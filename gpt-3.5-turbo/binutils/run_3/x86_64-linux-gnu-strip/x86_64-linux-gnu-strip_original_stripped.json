{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "save_value_to_memory_00113dfe",
                "param_1": "valuePointer",
                "param_2": "valueToSave",
                "lVar1": "memoryLocation"
            },
            "code": "\nvoid saveValueToMemory_00113dfe(undefined4 valuePointer,undefined valueToSave)\n\n{\n  long memoryLocation;\n  \n  memoryLocation = debug_make_type_constprop_0(3,valuePointer);\n  if (memoryLocation != 0) {\n    *(undefined *)(memoryLocation + 0x10) = valueToSave;\n  }\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "save_value_to_memory_00113dfe"
        },
        "FUN_001045d0": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001045d0"
        },
        "FUN_001044b0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "stab_demangle_v3_arg",
                "bfd_nonfatal.cold",
                "debug_record_line",
                "list_matching_formats",
                "list_supported_targets",
                "FUN_0010554f",
                "debug_record_variable",
                "finish_stab",
                "strip_usage",
                "debug_add_to_current_namespace.constprop.0",
                "bad_stab",
                "copy_usage",
                "stab_demangle_v3_arglist",
                "main",
                "stab_bad_demangle",
                "debug_name_type",
                "debug_write_type.constprop.0",
                "bfd_nonfatal_message",
                "display_info.isra.0",
                "debug_end_block",
                "stab_find_slot",
                "debug_get_real_type.isra.0",
                "debug_record_function",
                "stab_find_type",
                "report",
                "debug_end_function",
                "debug_start_block",
                "parse_stab",
                "stab_context",
                "parse_stab_type",
                "debug_tag_type",
                "debug_start_source",
                "debug_find_named_type",
                "warn_stab",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_001044b0"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_string_and_return_0010ab4d",
                "param_1": "baseAddress",
                "param_2": "newString",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "ptr1",
                "lVar2": "ptr2",
                "auVar3": "result",
                "sVar4": "newStringLen",
                "pcVar5": "existingString",
                "sVar6": "existingStringLen",
                "auVar7": "updatedResult"
            },
            "code": "\nundefined  [16] updateStringAndReturn_0010ab4d(long baseAddress,char *newString,undefined8 param3,undefined8 param4)\n\n{\n  ulong ptr1;\n  long ptr2;\n  undefined result [16];\n  size_t newStringLen;\n  char *existingString;\n  size_t existingStringLen;\n  undefined updatedResult [16];\n  \n  ptr1 = *(ulong *)(baseAddress + 0x60);\n  if ((ptr1 != 0) && (*(long *)(ptr1 + 0x20) != 0)) {\n    existingString = *(char **)(ptr1 + 0x30);\n    newStringLen = strlen(newString);\n    if (existingString == (char *)0x0) {\n      existingString = (char *)xmalloc(newStringLen + 3);\n      *existingString = '\\0';\n    }\n    else {\n      existingStringLen = strlen(existingString);\n      existingString = (char *)xrealloc(existingString,newStringLen + 4 + existingStringLen);\n    }\n    newStringLen = strlen(existingString);\n    sprintf(existingString + newStringLen,\"%s::\",newString);\n    ptr2 = *(long *)(baseAddress + 0x60);\n    *(char **)(ptr2 + 0x30) = existingString;\n    updatedResult._1_7_ = (undefined7)((ulong)ptr2 >> 8);\n    updatedResult[0] = 1;\n    updatedResult._8_8_ = param4;\n    return updatedResult;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = ptr1;\n  return result << 0x40;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "xrealloc",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_string_and_return_0010ab4d"
        },
        "FUN_001046f0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046f0"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "add_type_to_namespace_0010c218",
                "param_1": "fileInfo",
                "param_2": "nameType",
                "param_3": "currentFile",
                "uVar1": "errorMessage",
                "lVar2": "type",
                "pauVar3": "newType",
                "lVar4": "namespaceEntry"
            },
            "code": "\n\n\nlong addTypeToNamespace_0010c218(long fileInfo,long nameType,long currentFile)\n\n{\n  undefined8 errorMessage;\n  long type;\n  undefined (*newType) [16];\n  long namespaceEntry;\n  \n  if ((nameType != 0) && (currentFile != 0)) {\n    if ((*(long *)(fileInfo + 8) == 0) || (*(long *)(fileInfo + 0x10) == 0)) {\n      errorMessage = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      type = debug_make_type_constprop_0(0x16,0);\n      if (type != 0) {\n        newType = (undefined (*) [16])xmalloc(0x10);\n        namespaceEntry = *(long *)(fileInfo + 0x10);\n        *newType = ZEXT816(0);\n        *(long *)(*newType + 8) = currentFile;\n        *(undefined (**) [16])(type + 0x10) = newType;\n        namespaceEntry = debug_add_to_namespace_constprop_0(namespaceEntry + 0x10,nameType,0,3);\n        if (namespaceEntry != 0) {\n          *(long *)(namespaceEntry + 0x20) = type;\n          *(long *)*newType = namespaceEntry;\n          return type;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_find_type",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "add_type_to_namespace_0010c218"
        },
        "FUN_00128060": {
            "renaming": {},
            "code": "\n\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128060",
            "calling": [
                "strncpy"
            ],
            "imported": false,
            "current_name": "FUN_00128060"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  strip_symbols = 0;\n  discard_locals = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = program_name;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = is_strip;\n  if ((int)is_strip < 0) {\n    sVar15 = strlen(program_name);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  is_strip = uVar10;\n  strip_specific_htab = create_symbol_htab();\n  strip_unneeded_htab = create_symbol_htab();\n  keep_specific_htab = create_symbol_htab();\n  localize_specific_htab = create_symbol_htab();\n  globalize_specific_htab = create_symbol_htab();\n  keepglobal_specific_htab = create_symbol_htab();\n  weaken_specific_htab = create_symbol_htab();\n  redefine_specific_htab = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  redefine_specific_reverse_htab = create_symbol_htab();\n  puVar6 = xatexit_head_lto_priv_0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(xatexit_head_lto_priv_0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    xatexit_head_lto_priv_0 = (undefined *)puVar20;\n  }\n  puVar6 = xatexit_head_lto_priv_0;\n  iVar11 = *(int *)(xatexit_head_lto_priv_0 + 8);\n  *(int *)(xatexit_head_lto_priv_0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (is_strip != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",strip_options);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        deterministic = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        merge_notes = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        strip_symbols = 2;\n        break;\n      case 0x55:\n        deterministic = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        discard_locals = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        preserve_dates = 1;\n        break;\n      case 0x73:\n        strip_symbols = 7;\n        break;\n      case 0x76:\n        verbose = 1;\n        break;\n      case 0x77:\n        wildcard = 1;\n        break;\n      case 0x78:\n        discard_locals = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        keep_file_symbols = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        keep_section_symbols = 1;\n        break;\n      case 0xba:\n        merge_notes = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        strip_symbols = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        strip_symbols = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (strip_symbols < 8)) &&\n           ((-0xdaL >> ((byte)strip_symbols & 0x3f) & 1U) == 0)) {\n          merge_notes = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (deterministic < 0) {\n          deterministic = 1;\n        }\n        if (((strip_symbols | discard_locals) == 0) &&\n           (lVar30 = htab_elements(strip_specific_htab), lVar30 == 0)) {\n          strip_symbols = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = strip_options;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",copy_options);\n  pFVar14 = _optarg;\n  uVar10 = reverse_bytes;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return status;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((interleave != 0) && (copy_byte == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (interleave <= copy_byte) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (interleave - copy_byte < copy_width) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (deterministic < 0) {\n    deterministic = 1;\n  }\n  if ((strip_symbols | discard_locals) == 0) {\n    strip_symbols = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (pe_subsystem == -1) {\n        pe_subsystem = (short)iVar11;\n      }\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (status == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,preserve_dates);\n    status = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = change_sections;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(strip_specific_buffer);\n  free(strip_unneeded_buffer);\n  free(keep_specific_buffer);\n  free(localize_specific_buffer);\n  free(globalize_specific_buffer);\n  free(keepglobal_specific_buffer);\n  free(weaken_specific_buffer);\n  return status;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = status;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return status;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    status = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    status = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (status == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,preserve_dates);\n      status = uVar10;\n      if (iVar11 != 0) {\n        status = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  strip_symbols = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)section_rename_list;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)section_rename_list;\n    section_rename_list = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    deterministic = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(keepglobal_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(localize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    merge_notes = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    strip_symbols = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    deterministic = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(weaken_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    discard_locals = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_byte = (int)lVar30;\n    if (copy_byte < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    strip_symbols = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      interleave = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      interleave = (int)lVar30;\n      if (interleave < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    sections_copied = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    preserve_dates = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    verbose = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    wildcard = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    discard_locals = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    add_sections = init_section_add(_optarg,add_sections,\"--add-section\");\n    section_add_load_file(add_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    long_section_names = 1;\n    gnu_debuglink_filename = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = add_sym_list;\n        bVar39 = add_sym_list == (undefined8 *)0x0;\n        add_sym_list = puVar20;\n        if (bVar39) {\n          add_sym_tail = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)add_sym_tail = puVar20;\n    add_sym_tail = (undefined *)puVar20;\nLAB_00117e65:\n    add_symbols = add_symbols + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    use_alt_mach_code = strtoul((char *)_optarg,(char **)0x0,0);\n    if (use_alt_mach_code == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    change_section_address = parse_vma(_optarg,\"--change-addresses\");\n    change_start = change_section_address;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    change_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    change_start = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      do_debug_sections = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      do_debug_sections = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      do_debug_sections = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      do_debug_sections = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    convert_debugging = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    do_debug_sections = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    dump_sections = init_section_add(_optarg,dump_sections,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    strip_symbols = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    extract_symbol = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    pe_file_alignment = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    gap_fill = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    gap_fill_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(globalize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,globalize_specific_htab,&globalize_specific_buffer);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    pe_heap_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_heap_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    pe_image_base = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x100;\n    bfd_flags_to_set = bfd_flags_to_set & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_width = (int)lVar30;\n    if (copy_width < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,keepglobal_specific_htab,&keepglobal_specific_buffer);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    keep_file_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,keep_specific_htab,&keep_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    keep_section_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    localize_hidden = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,localize_specific_htab,&localize_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      long_section_names = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    merge_notes = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    strip_symbols = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    pad_to = parse_vma(_optarg,\"--pad-to\");\n    pad_to_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    prefix_alloc_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    prefix_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    prefix_symbols_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    bfd_flags_to_set = bfd_flags_to_set | 0x100;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    bfd_flags_to_set = bfd_flags_to_set | 0x80;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    remove_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)reverse_bytes;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    reverse_bytes = (uint)uVar27;\n    if (((int)reverse_bytes < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != reverse_bytes) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    pe_section_alignment = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    set_start = parse_vma(_optarg,\"--set-start\");\n    set_start_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    pe_stack_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_stack_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    strip_symbols = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,strip_specific_htab,&strip_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    strip_symbols = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(strip_unneeded_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,strip_unneeded_htab,&strip_unneeded_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      pe_major_subsystem_version = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        pe_minor_subsystem_version = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      pe_subsystem = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&v_0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0 + (long)unaff_R13 * 2;\n      pe_subsystem = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    update_sections = init_section_add(_optarg,update_sections,\"--update-section\");\n    section_add_load_file(update_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    weaken = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,weaken_specific_htab,&weaken_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x80;\n    bfd_flags_to_set = bfd_flags_to_set & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "called": [
                "add_redefine_and_check",
                "strchr",
                "bfd_set_error_program_name",
                "memmove",
                "find_section_list",
                "filename_cmp",
                "xstrndup",
                "strtoul",
                "fatal",
                "copy_usage",
                "dup",
                "strlen",
                "strncpy",
                "bfd_init",
                "dcgettext",
                "htab_create_alloc",
                "xrealloc",
                "ftell",
                "bfd_nonfatal_message",
                "convert_efi_target",
                "display_info.isra.0",
                "strtol",
                "add_specific_symbols",
                "strcmp",
                "mkstemp",
                "non_fatal",
                "template_in_dir",
                "free",
                "getc",
                "bindtextdomain",
                "bfd_set_default_target",
                "eq_string_redefnode",
                "fprintf",
                "strcpy",
                "handle_remove_section_option",
                "delete_symbol_htabs",
                "print_version",
                "fseek",
                "getopt_long",
                "copy_file",
                "setlocale",
                "fopen",
                "__errno_location",
                "htab_hash_redefnode",
                "stat",
                "free",
                "strerror",
                "section_add_load_file",
                "bfd_errmsg",
                "xmalloc_set_program_name",
                "parse_flags",
                "close",
                "startswith.lto_priv.0.lto_priv.0",
                "strip_usage",
                "init_section_add",
                "xcalloc",
                "htab_elements",
                "strncasecmp",
                "malloc",
                "get_file_size",
                "bfd_scan_arch",
                "unlink_if_ordinary",
                "memcpy",
                "strcasecmp",
                "xexit",
                "htab_find_slot",
                "ferror",
                "fread",
                "create_symbol_htab",
                "xatexit_cleanup.lto_priv.0",
                "bfd_get_error",
                "xstrdup",
                "fclose",
                "parse_vma",
                "smart_rename",
                "xmalloc",
                "textdomain"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_00128180": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128180",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_00128180"
        },
        "FUN_00104090": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "delete_symbol_htabs"
            ],
            "imported": false,
            "current_name": "FUN_00104090"
        },
        "FUN_00128068": {
            "renaming": {},
            "code": "\n\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128068",
            "calling": [
                "strncmp"
            ],
            "imported": false,
            "current_name": "FUN_00128068"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "debug_start_block_0010be88",
                "param_1": "block_ptr",
                "param_2": "start_block",
                "param_3": "end_block",
                "param_4": "result",
                "puVar1": "temp_ptr",
                "uVar2": "success",
                "puVar3": "block",
                "puVar4": "next_ptr",
                "lVar5": "current_block",
                "puVar6": "last_ptr",
                "puVar7": "temp_block",
                "bVar8": "is_zero",
                "auVar9": "return_value"
            },
            "code": "\n\n\nundefined  [16] debug_start_block_0010be88(long block_ptr,undefined8 start_block,undefined8 end_block,undefined8 result)\n\n{\n  undefined8 *temp_ptr;\n  undefined8 success;\n  undefined4 *block;\n  undefined8 *next_ptr;\n  long current_block;\n  undefined8 *last_ptr;\n  undefined4 *temp_block;\n  byte is_zero;\n  undefined return_value [16];\n  \n  is_zero = 0;\n  if ((*(long *)(block_ptr + 8) == 0) || (*(long *)(block_ptr + 0x20) == 0)) {\n    success = dcgettext(0,\"debug_start_block_0010be88: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",success);\n    success = 0;\n  }\n  else {\n    block = (undefined4 *)xmalloc(0x30);\n    temp_block = block;\n    for (current_block = 0xc; current_block != 0; current_block = current_block + -1) {\n      *temp_block = 0;\n      temp_block = temp_block + (ulong)is_zero * -2 + 1;\n    }\n    current_block = *(long *)(block_ptr + 0x20);\n    *(undefined8 *)(block + 6) = start_block;\n    *(undefined8 *)(block + 8) = 0xffffffffffffffff;\n    *(long *)(block + 2) = current_block;\n    temp_ptr = *(undefined8 **)(current_block + 0x10);\n    last_ptr = (undefined8 *)(current_block + 0x10);\n    while (next_ptr = temp_ptr, next_ptr != (undefined8 *)0x0) {\n      last_ptr = next_ptr;\n      temp_ptr = (undefined8 *)*next_ptr;\n    }\n    *last_ptr = block;\n    success = 1;\n    *(undefined4 **)(block_ptr + 0x20) = block;\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = success;\n  return return_value;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_start_block_0010be88"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_field_string_0010ba08",
                "param_1": "fieldArray",
                "param_2": "fieldName",
                "param_3": "fieldSize",
                "param_4": "fieldOffset",
                "param_5": "fieldType",
                "cVar1": "fieldFlag",
                "iVar2": "structSize",
                "lVar3": "structPtr",
                "__s": "structName",
                "sVar4": "structNameLen",
                "sVar5": "fieldNameLen",
                "sVar6": "fieldSizeLen",
                "__s_00": "fieldString",
                "uVar7": "warningMsg",
                "uVar8": "result",
                "pcVar9": "fieldTypeStr"
            },
            "code": "\nundefined8\ngenerateFieldString_0010ba08(undefined8 *fieldArray,char *fieldName,undefined8 fieldSize,ulong fieldOffset,int fieldType)\n\n{\n  char fieldFlag;\n  int structSize;\n  long structPtr;\n  char *structName;\n  size_t structNameLen;\n  size_t fieldNameLen;\n  size_t fieldSizeLen;\n  char *fieldString;\n  undefined8 warningMsg;\n  undefined8 result;\n  char *fieldTypeStr;\n  \n  fieldFlag = *(char *)(fieldArray[0xc] + 0x1c);\n  structSize = *(int *)(fieldArray[0xc] + 0x18);\n  structName = (char *)stab_pop_type();\n  if (*(char **)(fieldArray[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    structNameLen = strlen(*(char **)(fieldArray[0xc] + 0x20));\n    fieldNameLen = strlen(fieldName);\n    fieldSizeLen = strlen(structName);\n    fieldString = (char *)xmalloc(structNameLen + 0x32 + fieldNameLen + fieldSizeLen);\n    if (fieldType == 1) {\n      fieldTypeStr = \"/1\";\n    }\n    else {\n      fieldTypeStr = \"/0\";\n      if ((fieldType != 2) && (fieldTypeStr = \"\", fieldType != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldOffset == 0) && (fieldOffset = (ulong)(uint)(structSize * 8), fieldOffset == 0)) {\n      result = *(undefined8 *)*fieldArray;\n      warningMsg = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      non_fatal(warningMsg,result,fieldName);\n    }\n    sprintf(fieldString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(fieldArray[0xc] + 0x20),fieldName,fieldTypeStr,structName,\n            fieldSize,fieldOffset);\n    free(*(void **)(fieldArray[0xc] + 0x20));\n    structPtr = fieldArray[0xc];\n    *(char **)(structPtr + 0x20) = fieldString;\n    if (fieldFlag != '\\0') {\n      *(undefined *)(structPtr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)structPtr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "dcgettext",
                "non_fatal",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_field_string_0010ba08"
        },
        "FUN_00128188": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128188",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_00128188"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "add_formatted_string_to_data_list_0010aa53",
                "param_1": "dataList",
                "param_2": "value",
                "param_3": "prefix",
                "param_4": "option",
                "cVar1": "listFlag",
                "__s": "poppedString",
                "sVar5": "stringLength",
                "pcVar6": "formattedString",
                "lVar2": "dataNode",
                "uVar8": "successFlag",
                "uVar9": "loopIndex",
                "uVar10": "lastIndex",
                "cVar3": "optionChar",
                "lVar7": "newDataNode"
            },
            "code": "\nundefined8 addFormattedStringToDataList_0010aa53(long dataList,undefined8 value,char prefix,int option)\n\n{\n  char listFlag;\n  long dataNode;\n  char optionChar;\n  uint uVar4;\n  char *poppedString;\n  size_t stringLength;\n  char *formattedString;\n  long newDataNode;\n  undefined8 successFlag;\n  ulong loopIndex;\n  ulong lastIndex;\n  \n  listFlag = *(char *)(*(long *)(dataList + 0x60) + 0x1c);\n  poppedString = (char *)stab_pop_type();\n  stringLength = strlen(poppedString);\n  formattedString = (char *)xmalloc(stringLength + 0x19);\n  *formattedString = prefix + '0';\n  if (option == 1) {\n    optionChar = '1';\n  }\n  else {\n    optionChar = '0';\n    if ((option != 2) && (optionChar = '2', option != 0)) {\n                    \n      abort();\n    }\n  }\n  formattedString[1] = optionChar;\n  sprintf(formattedString + 2,\"%ld,%s;\",value);\n  free(poppedString);\n  dataNode = *(long *)(dataList + 0x60);\n  successFlag = 0;\n  if ((dataNode != 0) && (*(long *)(dataNode + 0x20) != 0)) {\n    dataNode = *(long *)(dataNode + 0x28);\n    lastIndex = 0;\n    if (dataNode != 0) {\n      uVar4 = 0;\n      do {\n        loopIndex = (ulong)uVar4;\n        lastIndex = (ulong)uVar4;\n        uVar4 = uVar4 + 1;\n      } while (*(long *)(dataNode + loopIndex * 8) != 0);\n    }\n    newDataNode = xrealloc(dataNode,(ulong)((int)lastIndex + 2) << 3);\n    *(char **)(newDataNode + lastIndex * 8) = formattedString;\n    *(undefined8 *)(newDataNode + (ulong)((int)lastIndex + 1) * 8) = 0;\n    dataNode = *(long *)(dataList + 0x60);\n    *(long *)(dataNode + 0x28) = newDataNode;\n    if (listFlag != '\\0') {\n      *(undefined *)(dataNode + 0x1c) = 1;\n    }\n    successFlag = 1;\n  }\n  return successFlag;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "xrealloc",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "add_formatted_string_to_data_list_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "parse_stab_entry_0011173a",
                "param_1": "file",
                "param_2": "stab_entry",
                "param_3": "type",
                "param_4": "param_count",
                "param_5": "line_number",
                "param_6": "name",
                "__ptr": "ptr",
                "cVar3": "ch",
                "uVar4": "result",
                "iVar5": "index",
                "puVar6": "ptr_array",
                "plVar7": "long_array",
                "pcVar8": "string_ptr",
                "uVar9": "return_value",
                "lVar10": "long_value_1",
                "lVar11": "long_value_1",
                "lVar12": "long_value",
                "pplVar13": "long_ptr_ptr_1",
                "uVar14": "ulong_value_1",
                "uVar15": "ulong_value_2",
                "pcVar16": "char_ptr",
                "uVar17": "uint_value",
                "dVar19": "double_value",
                "local_48": "local_string_ptr",
                "local_40": "local_ptr_array"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parse_stab_entry_0011173a(undefined8 file,long *stab_entry,int type,int param_count,ulong line_number,\n                      char *name)\n\n{\n  char cVar1;\n  byte bVar2;\n  void *ptr;\n  char ch;\n  undefined result;\n  int index;\n  undefined8 *ptr_array;\n  long *long_array;\n  char *string_ptr;\n  undefined8 return_value;\n  long long_value_1;\n  long long_value_1;\n  long long_value;\n  long **long_ptr_ptr_1;\n  ulong ulong_value_1;\n  ulong ulong_value_2;\n  char *char_ptr;\n  uint uint_value;\n  long **pplVar18;\n  double double_value;\n  char *local_string_ptr;\n  long **local_ptr_array [2];\n  \n  if (stab_entry[4] != 0) {\n    if (((type == 100) && (*name != '\\0')) && (stab_entry[5] == line_number)) goto LAB_00111a06;\n    ch = debug_set_filename(file);\n    if (ch == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)stab_entry + 0x44) = 0;\n    *(undefined4 *)(stab_entry + 8) = 0;\n    stab_entry[9] = stab_entry[4];\n    if (*(char *)(stab_entry + 1) == '\\0') {\n      stab_entry[6] = stab_entry[5];\n    }\n    *(undefined4 *)(stab_entry + 0x10) = 1;\n    ptr_array = (undefined8 *)xmalloc(8);\n    stab_entry[0x11] = (long)ptr_array;\n    *ptr_array = 0;\n    stab_entry[4] = 0;\n  }\n  strlen(name);\n  if (type == 0x84) {\nLAB_00111ab7:\n    result = debug_start_source(file,name);\n    return result;\n  }\n  if (type < 0x85) {\n    if (type == 0x3c) {\n      index = strcmp(name,\"gcc2_compiled.\");\n      if (index == 0) {\n        *(undefined4 *)(stab_entry + 8) = 2;\n        return 1;\n      }\n      index = strcmp(name,\"gcc_compiled.\");\n      if (index == 0) {\n        *(undefined4 *)(stab_entry + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)stab_entry + 0x44) = 1;\n      return 1;\n    }\n    if (type < 0x3d) {\n      if (type == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(stab_entry + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(stab_entry + 1) != '\\0') {\n            line_number = line_number + stab_entry[7];\n          }\n          ch = stab_emit_pending_vars(file,stab_entry);\n          if (ch != '\\0') {\n            ch = debug_end_function(file,line_number);\n            if (ch != '\\0') {\n              *(undefined *)(stab_entry + 0xc) = 0;\n              stab_entry[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(stab_entry + 0xc) != '\\0') &&\n           ((line_number < (ulong)stab_entry[0xd] || (stab_entry[0xd] == 0xffffffffffffffff)))) {\n          stab_entry[0xd] = line_number;\n        }\n      }\n      else if (type < 0x25) {\n        if (type == 0xc) {\n          return 1;\n        }\n        if (type - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (type == 0x2a) {\n          return 1;\n        }\n        if (type == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (type == 100) {\nLAB_00111a06:\n        if (*(char *)(stab_entry + 0xc) != '\\0') {\n          ulong_value_1 = line_number;\n          if (((*name != '\\0') && (ulong_value_2 = stab_entry[0xd], ulong_value_2 != 0xffffffffffffffff)) &&\n             (ulong_value_1 = ulong_value_2, line_number < ulong_value_2)) {\n            ulong_value_1 = line_number;\n          }\n          ch = stab_emit_pending_vars(file,stab_entry);\n          if (ch == '\\0') {\n            return 0;\n          }\n          ch = debug_end_function(file,ulong_value_1);\n          if (ch == '\\0') {\n            return 0;\n          }\n          *(undefined *)(stab_entry + 0xc) = 0;\n          stab_entry[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        ptr = (void *)stab_entry[4];\n        if (ptr == (void *)0x0) {\n          long_value = xstrdup(name);\n          stab_entry[4] = long_value;\n        }\n        else {\n          if (*name == '/') {\n            long_value = xstrdup(name);\n          }\n          else {\n            long_value = concat(ptr,name,0);\n          }\n          stab_entry[4] = long_value;\n          free(ptr);\n        }\n        stab_entry[5] = line_number;\n        return 1;\n      }\n      if (type < 0x65) {\n        if (type == 0x44) {\n          long_value = 0;\n          if (*(char *)(stab_entry + 0xc) != '\\0') {\n            long_value = stab_entry[7];\n          }\n          result = debug_record_line(file,(long)param_count,long_value + line_number);\n          return result;\n        }\n        if (type == 0x62) {\n          return 1;\n        }\n      }\n      else if (type == 0x82) {\n        long_array = (long *)xmalloc();\n        index = *(int *)(stab_entry + 0x10);\n        long_value_1 = stab_entry[10];\n        long_value_1 = stab_entry[0xb];\n        long_array[5] = 0;\n        long_value = stab_entry[0x11];\n        *(int *)(long_array + 4) = index;\n        uint_value = index + 1;\n        *(uint *)(stab_entry + 0x10) = uint_value;\n        *long_array = long_value_1;\n        long_array[1] = long_value_1;\n        long_array[2] = (long)name;\n        long_array[3] = line_number;\n        stab_entry[10] = (long)long_array;\n        stab_entry[0xb] = (long)long_array;\n        long_value = xrealloc(long_value,(ulong)uint_value << 3);\n        uint_value = *(uint *)(long_array + 4);\n        stab_entry[0x11] = long_value;\n        *(undefined8 *)(long_value + (ulong)uint_value * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    string_ptr = strchr(name,0x3a);\n    if ((string_ptr != (char *)0x0) && ((string_ptr[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(stab_entry + 0xc) != '\\0') {\n        ulong_value_1 = stab_entry[0xd];\n        ulong_value_2 = line_number;\n        if ((ulong_value_1 != 0xffffffffffffffff) && (ulong_value_2 = ulong_value_1, line_number < ulong_value_1)) {\n          ulong_value_2 = line_number;\n        }\n        ch = stab_emit_pending_vars(file,stab_entry);\n        if (ch == '\\0') {\n          return 0;\n        }\n        ch = debug_end_function(file,ulong_value_2);\n        if (ch == '\\0') {\n          return 0;\n        }\n        stab_entry[0xd] = -1;\n      }\n      if (*(char *)(stab_entry + 1) != '\\0') {\n        stab_entry[7] = line_number;\n      }\n      *(undefined *)(stab_entry + 0xc) = 1;\n    }\n    local_string_ptr = strchr(name,0x3a);\n    if (local_string_ptr == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_string_ptr[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      ch = name[1];\n      char_ptr = \"eh_throw\";\n      if (ch != 'e') {\n        if (ch < 'f') {\n          if ((ch != 'X') && (ch != '_')) {\nLAB_00111d1a:\n            return_value = dcgettext(0,\"unknown C++ encoded name\",5);\n            warn_stab(name,return_value);\n          }\n        }\n        else {\n          char_ptr = \"this\";\n          if (ch == 't') goto LAB_00111d62;\n          if (ch != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      char_ptr = (char *)0x0;\n      if ((name != local_string_ptr) && ((*name != ' ' || (local_string_ptr != name + 1)))) {\n        char_ptr = (char *)savestring(name,(int)local_string_ptr - (int)name);\n      }\n    }\nLAB_00111d62:\n    bVar2 = local_string_ptr[1];\n    string_ptr = local_string_ptr + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)bVar2 * 2) >> 2) & 1 |\n        (bVar2 == 0x2d || bVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      if (long_value == 0) {\n        return 0;\n      }\n      return_value = 4;\n      goto LAB_001123e8;\n    }\n    if (bVar2 == 0) goto switchD_00111de5_caseD_44;\n    string_ptr = local_string_ptr + 2;\n    ch = local_string_ptr[1];\n    switch(ch) {\n    case 'C':\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      string_ptr = \"debug_record_label: not implemented\";\n      if (long_value == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      if (long_value == 0) {\n        return 0;\n      }\n      ch = debug_record_function(file,char_ptr,long_value,ch == 'F',line_number);\n      if (ch != '\\0') {\n        do {\n          if (*local_string_ptr != ';') {\n            return 1;\n          }\n          local_string_ptr = local_string_ptr + 1;\n          long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n        } while (long_value != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      if (long_value == 0) {\n        return 0;\n      }\n      if (char_ptr == (char *)0x0) goto LAB_0011208f;\n      long_value_1 = stab_entry[3];\n      long_array = (long *)stab_entry[2];\n      ch = *(char *)(*(long *)(*stab_entry + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (type == 0x24) {\n        local_string_ptr = string_ptr;\n        do {\n          if (*local_string_ptr != ';') {\n            return 1;\n          }\n          local_string_ptr = local_string_ptr + 1;\n          long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n        } while (long_value != 0);\n        return 0;\n      }\n    case 'R':\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      if (long_value == 0) {\n        return 0;\n      }\n      return_value = 2;\n      break;\n    case 'S':\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      if (long_value == 0) {\n        return 0;\n      }\n      return_value = 2;\n      goto LAB_001121c4;\n    case 'T':\n      ch = local_string_ptr[2];\n      if (ch == 't') {\n        string_ptr = local_string_ptr + 3;\n      }\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,char_ptr,&local_string_ptr,local_ptr_array);\n      if (long_value == 0) {\n        return 0;\n      }\n      if (char_ptr == (char *)0x0) {\n        return 1;\n      }\n      cVar1 = *(char *)(stab_entry + 0x35);\n      long_array = (long *)debug_tag_type(file,char_ptr,long_value);\n      if (long_array == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_array[0] != (long **)0x0) {\n        *local_ptr_array[0] = long_array;\n      }\n      if (cVar1 != '\\0') goto LAB_001122f0;\n      long_ptr_ptr_1 = (long **)(stab_entry + 0x34);\n      pplVar18 = (long **)stab_entry[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      if (long_value == 0) {\n        return 0;\n      }\n      return_value = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      string_ptr = local_string_ptr + 3;\n      if (((local_string_ptr[2] != '\\0') && (string_ptr = local_string_ptr + 4, local_string_ptr[3] == 'n')) &&\n         (string_ptr = local_string_ptr + 5, char_ptr = local_string_ptr + 4, local_string_ptr = string_ptr, *char_ptr == '0')) {\n        for (; string_ptr = local_string_ptr, *local_string_ptr != '\\0'; local_string_ptr = local_string_ptr + 1) {\n          if (*local_string_ptr == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      if (long_value == 0) {\n        return 0;\n      }\n      return_value = 4;\n      break;\n    case 'c':\n      if (local_string_ptr[2] == '=') {\n        string_ptr = local_string_ptr + 4;\n        ch = local_string_ptr[3];\n        local_string_ptr = string_ptr;\n        if (ch == 'i') {\n          long_value = strtol(string_ptr,(char **)0x0,10);\n          if (char_ptr == (char *)0x0) {\n            return 0;\n          }\n          long_value_1 = debug_add_to_current_namespace_constprop_0(file,char_ptr,4);\n          if (long_value_1 != 0) {\n            *(long *)(long_value_1 + 0x20) = (long)(int)long_value;\n            return 1;\n          }\n          return 0;\n        }\n        if (ch == 'r') {\n          double_value = strtod(string_ptr,(char **)0x0);\n          if (char_ptr == (char *)0x0) {\n            return 0;\n          }\n          long_value = debug_add_to_current_namespace_constprop_0(file,char_ptr,5);\n          if (long_value != 0) {\n            *(double *)(long_value + 0x20) = double_value;\n            return 1;\n          }\n          return 0;\n        }\n        if (ch == 'e') {\n          long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n          if (long_value == 0) {\n            return 0;\n          }\n          string_ptr = local_string_ptr;\n          if (*local_string_ptr == ',') {\n            long_value_1 = strtol(local_string_ptr,(char **)0x0,10);\n            if (char_ptr == (char *)0x0) {\n              return 0;\n            }\n            long_value_1 = debug_add_to_current_namespace_constprop_0(file,char_ptr,6);\n            if (long_value_1 != 0) {\n              long_array = (long *)xmalloc(0x10);\n              *long_array = long_value;\n              long_array[1] = (long)(int)long_value_1;\n              *(long **)(long_value_1 + 0x20) = long_array;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_string_ptr[2] == 'F') {\n        local_string_ptr = local_string_ptr + 3;\n        long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n        if (long_value == 0) {\n          return 0;\n        }\n        return_value = debug_make_function_type_isra_0(long_value,0,0);\n        long_value = debug_make_pointer_type_isra_0(return_value);\n      }\n      else {\n        local_string_ptr = string_ptr;\n        long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      }\n      if (long_value == 0) {\n        return 0;\n      }\n      return_value = 1;\n      break;\n    case 'r':\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      if (long_value == 0) {\n        return 0;\n      }\n      return_value = 5;\nLAB_001123e8:\n      ch = stab_record_variable(file,stab_entry,char_ptr,long_value,return_value,line_number);\n      goto joined_r0x001123f8;\n    case 't':\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,char_ptr,&local_string_ptr,local_ptr_array);\n      if (long_value == 0) {\n        return 0;\n      }\n      if (char_ptr == (char *)0x0) {\n        return 1;\n      }\n      long_array = (long *)debug_name_type(file,char_ptr,long_value);\n      if (long_array == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_array[0] = long_array;\n      return 1;\n    case 'v':\n      local_string_ptr = string_ptr;\n      long_value = parse_stab_type(file,stab_entry,0,&local_string_ptr,0);\n      if (long_value == 0) {\n        return 0;\n      }\n      return_value = 3;\n    }\n    ch = debug_record_parameter(file,char_ptr,long_value,return_value,line_number);\n    goto joined_r0x001123f8;\n  }\n  if (type == 0xe0) {\n    if ((*(char *)((long)stab_entry + 0x44) != '\\0') && (param_count == 1)) {\n      return 1;\n    }\n    ch = stab_emit_pending_vars(file,stab_entry);\n    if (ch == '\\0') {\n      return 0;\n    }\n    ch = debug_end_block(file,stab_entry[7] + stab_entry[6] + line_number);\n    if (ch == '\\0') {\n      return 0;\n    }\n    stab_entry = stab_entry + 0xe;\n    *(int *)stab_entry = *(int *)stab_entry + -1;\n    string_ptr = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)stab_entry) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < type) {\n      if (type == 0xe2) {\n        string_ptr = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        string_ptr = \"debug_end_common_block: not implemented\";\n        if (type != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      return_value = dcgettext(0,string_ptr,5);\n      fprintf(_stderr,\"%s\\n\",return_value);\n      return 0;\n    }\n    if (type != 0xc0) {\n      if (type == 0xc2) {\n        index = *(int *)(stab_entry + 0x10);\n        *(uint *)(stab_entry + 0x10) = index + 1U;\n        long_value = xrealloc(stab_entry[0x11],(ulong)(index + 1U) << 3);\n        ptr_array = (undefined8 *)stab_entry[0xb];\n        stab_entry[0x11] = long_value;\n        while( true ) {\n          if (ptr_array == (undefined8 *)0x0) {\n            return_value = dcgettext(0,\"Undefined N_EXCL\",5);\n            warn_stab(name,return_value);\n            *(undefined8 *)(stab_entry[0x11] + (ulong)(*(int *)(stab_entry + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((line_number == ptr_array[3]) && (index = strcmp((char *)ptr_array[2],name), index == 0))\n          break;\n          ptr_array = (undefined8 *)*ptr_array;\n        }\n        *(undefined8 *)(long_value + (ulong)(*(int *)(stab_entry + 0x10) - 1) * 8) = ptr_array[5];\n        return 1;\n      }\n      if (type == 0xa2) {\n        long_value = stab_entry[10];\n        if (long_value != 0) {\n          long_value_1 = *(long *)(long_value + 8);\n          uint_value = *(uint *)(long_value + 0x20);\n          stab_entry[10] = long_value_1;\n          if ((uint_value < *(uint *)(stab_entry + 0x10)) &&\n             (*(undefined8 *)(long_value + 0x28) = *(undefined8 *)(stab_entry[0x11] + (ulong)uint_value * 8),\n             long_value_1 != 0)) {\n            name = *(char **)(long_value_1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)stab_entry[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)stab_entry + 0x44) != '\\0') && (param_count == 1)) {\n      return 1;\n    }\n    if (*(char *)(stab_entry + 0xc) != '\\0') {\n      ch = debug_start_block(file,stab_entry[7] + stab_entry[6] + line_number);\n      if (ch == '\\0') {\n        return 0;\n      }\n      ch = stab_emit_pending_vars(file,stab_entry);\n      if (ch != '\\0') {\n        *(int *)(stab_entry + 0xe) = *(int *)(stab_entry + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    string_ptr = \"N_LBRAC not within function\\n\";\n  }\n  string_ptr = (char *)dcgettext(0,string_ptr,5);\n  fprintf(_stderr,string_ptr);\n  return 0;\ncode_r0x00111cc7:\n  local_string_ptr = local_string_ptr + 2;\n  local_string_ptr = strchr(local_string_ptr,0x3a);\n  if (local_string_ptr == (char *)0x0) {\n    string_ptr = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_string_ptr = string_ptr;\n    bad_stab(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (ch != 't') {\n      return 1;\n    }\n    long_array = (long *)debug_name_type(file,char_ptr,long_array);\n    if (long_array != (long *)0x0) {\n      if (local_ptr_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_array[0] = long_array;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *char_ptr) &&\n     (index = strcmp((char *)pplVar18[1],char_ptr), index == 0)) {\n    pplVar18[3] = long_array;\n    *long_ptr_ptr_1 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  long_ptr_ptr_1 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_value_1 < 1) {\nLAB_0011208f:\n    return_value = 1;\nLAB_001121c4:\n    ch = debug_record_variable(file,char_ptr,long_value,return_value,line_number);\njoined_r0x001123f8:\n    if (ch != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  string_ptr = *(char **)(*long_array + 8);\n  if ((ch != '\\0') && (ch == *string_ptr)) {\n    string_ptr = string_ptr + 1;\n  }\n  if ((*string_ptr == *char_ptr) && (index = strcmp(string_ptr,char_ptr), index == 0)) {\n    line_number = *(long *)(*long_array + 0x10) + *(long *)(*(long *)(*long_array + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_value_1 = long_value_1 + -1;\n  long_array = long_array + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "strchr",
                "debug_record_line",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "bad_stab",
                "savestring",
                "debug_name_type",
                "concat",
                "strlen",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "stab_emit_pending_vars",
                "debug_end_block",
                "strtol",
                "strcmp",
                "debug_record_function",
                "free",
                "debug_end_function",
                "fprintf",
                "debug_start_block",
                "xstrdup",
                "stab_record_variable",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "debug_set_filename",
                "debug_tag_type",
                "debug_start_source",
                "xmalloc",
                "warn_stab",
                "strtod",
                "debug_record_parameter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_stab_entry_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_section_00115dc0",
                "param_1": "binary",
                "param_2": "sectionTable",
                "param_3": "sectionTableSize",
                "cVar1": "skipSectionResult",
                "iVar2": "error",
                "uVar3": "relocCount",
                "lVar4": "relocUpperBound",
                "puVar5": "relocTable",
                "uVar6": "relocTableSize",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "filteredRelocTable",
                "puVar8": "nextRelocEntry",
                "uVar9": "relEntryIndex",
                "uStack_38": "errorMessage",
                "strip_symbols": "symbolStrippingMode"
            },
            "code": "\nvoid processBinarySection_00115dc0(undefined8 binary,undefined8 *sectionTable,long sectionTableSize)\n\n{\n  char skipSectionResult;\n  int error;\n  undefined8 relocCount;\n  long relocUpperBound;\n  undefined8 *relocTable;\n  ulong relocTableSize;\n  code *jumpTable;\n  undefined8 *filteredRelocTable;\n  undefined8 *nextRelocEntry;\n  ulong relEntryIndex;\n  undefined8 errorMessage;\n  \n  skipSectionResult = skip_section(binary,sectionTable,0);\n  if (skipSectionResult != '\\0') {\n    return;\n  }\n  relocCount = sectionTable[0xc];\n  if ((((*(byte *)(sectionTableSize + 0x48) & 7) != 3) && (symbolStrippingMode != 6)) &&\n     (relocUpperBound = find_section_list(*sectionTable,0,0x100), relocUpperBound == 0)) {\n    relocUpperBound = bfd_get_reloc_upper_bound(binary,sectionTable);\n    if (relocUpperBound < 0) {\n      if ((relocUpperBound != -1) || (error = bfd_get_error(), error != 5)) {\n        status = 1;\n        relocCount = 0;\nLAB_00108315:\n        bfd_nonfatal_message(0,binary,sectionTable,relocCount,errorMessage);\n        return;\n      }\n    }\n    else if (relocUpperBound != 0) {\n      relocTable = (undefined8 *)sectionTable[0xe];\n      if (relocTable == (undefined8 *)0x0) {\n        relocTable = (undefined8 *)bfd_alloc(sectionTableSize);\n        if (relocTable == (undefined8 *)0x0) {\n          bfd_nonfatal(0);\n                    \n          xexit(1);\n        }\n        relocTableSize = bfd_canonicalize_reloc(binary,sectionTable,relocTable,isympp);\n        if ((long)relocTableSize < 0) {\n          status = 1;\n          relocCount = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocTableSize = (ulong)*(uint *)(sectionTable + 0xf);\n      }\n      if (symbolStrippingMode == 7) {\n        filteredRelocTable = relocTable;\n        for (relEntryIndex = 0; relEntryIndex != relocTableSize; relEntryIndex = relEntryIndex + 1) {\n          nextRelocEntry = filteredRelocTable;\n          if (((*(long **)relocTable[relEntryIndex] != (long *)0x0) &&\n              (relocUpperBound = **(long **)relocTable[relEntryIndex], relocUpperBound != 0)) &&\n             (skipSectionResult = is_specified_symbol(*(undefined8 *)(relocUpperBound + 8),keep_specific_htab),\n             skipSectionResult != '\\0')) {\n            nextRelocEntry = filteredRelocTable + 1;\n            *filteredRelocTable = relocTable[relEntryIndex];\n          }\n          filteredRelocTable = nextRelocEntry;\n        }\n        *filteredRelocTable = 0;\n        relocTableSize = (long)filteredRelocTable - (long)relocTable >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(sectionTableSize + 8) + 0x288);\n      if (relocTableSize == 0) {\n        relocTableSize = 0;\n        relocTable = (undefined8 *)0x0;\n      }\n      else {\n        relocTableSize = relocTableSize & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocTableSize = 0;\n  relocTable = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(sectionTableSize + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(sectionTableSize,relocCount,relocTable,relocTableSize);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "bfd_canonicalize_reloc",
                "xexit",
                "find_section_list",
                "bfd_nonfatal_message",
                "bfd_get_reloc_upper_bound",
                "copy_relocations_in_section.cold",
                "skip_section",
                "bfd_nonfatal",
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_section_00115dc0"
        },
        "FUN_001044c0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001044c0"
        },
        "FUN_001043a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001043a0"
        },
        "FUN_001045e0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "bfd_nonfatal.cold",
                "list_matching_formats",
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_001045e0"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "process_parameter_0010d559",
                "param_1": "functionList",
                "param_2": "byteStream",
                "param_3": "numOccurrences",
                "bVar1": "firstByte",
                "pbVar2": "currentByte",
                "cVar3": "demangleResult",
                "uVar4": "demangleCount",
                "iVar5": "comparisonResult",
                "ppcVar6": "tempBuffer",
                "sVar7": "stringLength",
                "lVar8": "result",
                "plVar9": "fieldsList",
                "pcVar10": "typeName",
                "__s1": "type",
                "__ptr": "saveString",
                "pbVar11": "nextByte",
                "uVar12": "taggedTypeCode",
                "__nptr": "numericString",
                "local_64": "count"
            },
            "code": "\nundefined8 processParameter_0010d559(undefined8 *functionList,byte **byteStream,long *numOccurrences)\n\n{\n  byte firstByte;\n  byte *currentByte;\n  char demangleResult;\n  uint demangleCount;\n  int comparisonResult;\n  char **tempBuffer;\n  size_t stringLength;\n  long result;\n  long *fieldsList;\n  char *typeName;\n  char *type;\n  void *saveString;\n  byte *nextByte;\n  undefined8 taggedTypeCode;\n  byte *numericString;\n  int count;\n  char *local_40 [2];\n  \n  currentByte = *byteStream;\n  firstByte = currentByte[1];\n  if ((char)firstByte < ':') {\n    if ((char)firstByte < '1') goto LAB_0010d5d8;\n    count = (char)firstByte + -0x30;\n    if (currentByte[2] == 0x5f) {\n      *byteStream = currentByte + 1;\n    }\n    nextByte = *byteStream + 2;\n  }\n  else {\n    if (((firstByte != 0x5f) || (((&_sch_istable)[(ulong)currentByte[2] * 2] & 4) == 0)) ||\n       (currentByte[2] == 0x30)) goto LAB_0010d5d8;\n    numericString = currentByte + 2;\n    result = strtol((char *)numericString,(char **)0x0,10);\n    count = (int)result;\n    while (((&_sch_istable)[(ulong)*numericString * 2] & 4) != 0) {\n      numericString = numericString + 1;\n    }\n    nextByte = numericString + 1;\n    if (*numericString != 0x5f) goto LAB_0010d5d8;\n  }\n  *byteStream = nextByte;\n  tempBuffer = (char **)0x0;\n  if (numOccurrences != (long *)0x0) {\n    tempBuffer = local_40;\n  }\n  result = 0;\n  while( true ) {\n    while( true ) {\n      count = count + -1;\n      if (count == -1) {\n        if (numOccurrences != (long *)0x0) {\n          *numOccurrences = result;\n        }\n        return 1;\n      }\n      if (**byteStream == 0x5f) {\n        *byteStream = *byteStream + 1;\n      }\n      if (**byteStream != 0x74) break;\n      demangleResult = stab_demangle_template(functionList,byteStream,tempBuffer);\n      typeName = local_40[0];\n      if (demangleResult == '\\0') {\n        return 0;\n      }\n      if (numOccurrences != (long *)0x0) {\n        stringLength = strlen(local_40[0]);\n        result = stab_find_tagged_type(*functionList,functionList[1],typeName,stringLength & 0xffffffff,9);\n        free(typeName);\n        if (result == 0) {\n          return 0;\n        }\n      }\n    }\n    demangleCount = stab_demangle_count(byteStream);\n    stringLength = strlen((char *)*byteStream);\n    if (stringLength < demangleCount) break;\n    if (numOccurrences != (long *)0x0) {\n      if ((result != 0) && (fieldsList = (long *)debug_get_fields_isra_0(result), fieldsList != (long *)0x0))\n      {\n        typeName = (char *)savestring(*byteStream,demangleCount);\n        for (; result = *fieldsList, result != 0; fieldsList = fieldsList + 1) {\n          result = *(long *)(result + 8);\n          if (result == 0) {\n            free(typeName);\n            return 0;\n          }\n          type = (char *)debug_get_type_name_constprop_0(result);\n          if ((type != (char *)0x0) && (comparisonResult = strcmp(type,typeName), comparisonResult == 0)) break;\n        }\n        free(typeName);\n        if (result != 0) goto LAB_0010d7ad;\n      }\n      taggedTypeCode = 9;\n      if (count == 0) {\n        saveString = (void *)savestring(*byteStream,demangleCount);\n        result = debug_find_named_type(*functionList,saveString);\n        free(saveString);\n        if (result != 0) goto LAB_0010d7ad;\n        taggedTypeCode = 0;\n      }\n      result = stab_find_tagged_type(*functionList,functionList[1],*byteStream,demangleCount,taggedTypeCode);\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *byteStream = *byteStream + demangleCount;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(currentByte);\n  return 0;\n}\n\n",
            "called": [
                "stab_bad_demangle",
                "strlen",
                "stab_demangle_count",
                "stab_find_tagged_type",
                "debug_get_fields.isra.0",
                "debug_find_named_type",
                "free",
                "stab_demangle_template",
                "savestring",
                "debug_get_type_name.constprop.0",
                "strtol",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_parameter_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "formatArgs",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list formatArgs)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,errorMessage,formatArgs);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "vfprintf",
                "putc",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00128290": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128290",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00128290"
        },
        "FUN_00128050": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128050",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00128050"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memory_to_free"
            },
            "code": "\nvoid cleanup_and_free_memory_00108466(void)\n\n{\n  void *memory_to_free;\n  \n  status = 1;\n  bfd_nonfatal_message(0);\n  free(memory_to_free);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "FUN_00128298": {
            "renaming": {},
            "code": "\n\n\n\nint feof(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* feof@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128298",
            "calling": [
                "feof"
            ],
            "imported": false,
            "current_name": "FUN_00128298"
        },
        "FUN_00128058": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128058",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_00128058"
        },
        "FUN_00128178": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128178",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_00128178"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_number_from_string_00108e76",
                "param_1": "string_ptr",
                "bVar1": "current_char",
                "iVar2": "result"
            },
            "code": "\nint extract_number_from_string_00108e76(byte **string_ptr)\n\n{\n  byte current_char;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_char = **string_ptr;\n    if (((&_sch_istable)[(ulong)current_char * 2] & 4) == 0) break;\n    *string_ptr = *string_ptr + 1;\n    result = result * 10 + -0x30 + (int)(char)current_char;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "extract_number_from_string_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "create_hash_function_0010bb52",
                "param_1": "input",
                "lVar1": "hash_function",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "create_new_hash"
            },
            "code": "\nlong create_hash_function_0010bb52(long input,undefined8 param_2,undefined8 param_3)\n\n{\n  long hash_function;\n  \n  if (((input != 0) || (input = allocate_hash(param_2,0x30), input != 0)) &&\n     (hash_function = create_new_hash(input,param_2,param_3), hash_function != 0)) {\n    *(undefined8 *)(hash_function + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_function + 0x18) = 0;\n    *(undefined4 *)(hash_function + 0x28) = 0;\n    return hash_function;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "create_hash_function_0010bb52"
        },
        "FUN_001043b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001043b0"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "directory_path",
                "param_2": "result_path",
                "iVar1": "access_result",
                "sStack_a8": "stats"
            },
            "code": "\nchar * check_directory_access_0011283f(char *directory_path,char *result_path)\n\n{\n  int access_result;\n  stat stats;\n  \n  if ((result_path == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&stats);\n      if ((access_result == 0) && ((stats.st_mode & 0xf000) == 0x4000)) {\n        result_path = directory_path;\n      }\n    }\n  }\n  return result_path;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "FUN_001045f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "setup_section",
                "FUN_0010554f",
                "FUN_00107880",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001045f0"
        },
        "FUN_001044d0": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "FUN_001044d0"
        },
        "FUN_001284a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284a8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001284a8"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_set_error_code_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errorPointer",
                "iVar1": "errorCode"
            },
            "code": "\nundefined8 closeFileAndSetErrorCode_00108237(void)\n\n{\n  int errorCode;\n  int *errorPointer;\n  int fileDescriptor;\n  \n  errorPointer = __errno_location();\n  errorCode = *errorPointer;\n  close(fileDescriptor);\n  *errorPointer = errorCode;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_code_00108237"
        },
        "FUN_00128088": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128088",
            "calling": [
                "strcpy"
            ],
            "imported": false,
            "current_name": "FUN_00128088"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_info_0010bc80",
                "param_1": "record_info_ptr",
                "param_2": "file_name",
                "param_3": "record_size",
                "param_4": "record_type",
                "uVar1": "result",
                "plVar2": "record_info_ptr_ptr",
                "puVar3": "debug_info_ptr",
                "lVar4": "loop_counter",
                "puVar5": "debug_info_ptr_ptr",
                "pcVar6": "default_file_name",
                "bVar7": "zero_byte",
                "auVar8": "output"
            },
            "code": "\n\n\nundefined  [16]\nrecord_debug_info_0010bc80(long record_info_ptr,char *file_name,long record_size,uint record_type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 result;\n  long *record_info_ptr_ptr;\n  undefined4 *debug_info_ptr;\n  long loop_counter;\n  undefined4 *debug_info_ptr_ptr;\n  char *default_file_name;\n  byte zero_byte;\n  undefined output [16];\n  \n  zero_byte = 0;\n  default_file_name = \"\";\n  if (file_name != (char *)0x0) {\n    default_file_name = file_name;\n  }\n  if (record_size != 0) {\n    if (*(long *)(record_info_ptr + 8) == 0) {\n      result = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      record_info_ptr_ptr = (long *)xmalloc(0x18);\n      *record_info_ptr_ptr = record_size;\n      *(undefined (*) [16])(record_info_ptr_ptr + 1) = ZEXT816(0);\n      debug_info_ptr = (undefined4 *)xmalloc(0x30);\n      *(long **)(record_info_ptr + 0x18) = record_info_ptr_ptr;\n      record_info_ptr_ptr[2] = (long)debug_info_ptr;\n      debug_info_ptr_ptr = debug_info_ptr;\n      for (loop_counter = 0xc; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *debug_info_ptr_ptr = 0;\n        debug_info_ptr_ptr = debug_info_ptr_ptr + (ulong)zero_byte * -2 + 1;\n      }\n      *(undefined4 **)(record_info_ptr + 0x20) = debug_info_ptr;\n      loop_counter = *(long *)(record_info_ptr + 0x10);\n      *(undefined8 *)(debug_info_ptr + 6) = param_5;\n      *(undefined8 *)(debug_info_ptr + 8) = 0xffffffffffffffff;\n      loop_counter = debug_add_to_namespace_constprop_0(loop_counter + 0x10,default_file_name,3,(record_type & 0xff) + 1);\n      if (loop_counter != 0) {\n        *(long **)(loop_counter + 0x20) = record_info_ptr_ptr;\n        result = CONCAT71((int7)((ulong)loop_counter >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  result = 0;\nLAB_0010bd56:\n  output._8_8_ = param_6;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "fprintf",
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_info_0010bc80"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_format_and_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = improve_and_reverse_code_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = isympp + uStack0000000000000010;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "non_fatal",
                "FUN_00107880",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_001042a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "display_info.isra.0.cold",
                "FUN_00107976",
                "print_version",
                "FUN_00104ea2",
                "display_info.isra.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042a0"
        },
        "FUN_001044e0": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "main",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001044e0"
        },
        "FUN_001043c0": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "main",
                "simple_copy.cold",
                "copy_file",
                "display_info.isra.0",
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001043c0"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_and_initialize_path_00114cf0",
                "param_1": "path",
                "pcVar1": "last_slash",
                "lVar2": "path_length",
                "lVar3": "prefix_length",
                "lVar4": "slash_index",
                "pcVar5": "new_path",
                "bVar6": "has_slash",
                "xmalloc": "allocate_memory"
            },
            "code": "\nvoid allocate_and_initialize_path_00114cf0(char *path)\n\n{\n  char *last_slash;\n  long path_length;\n  long prefix_length;\n  long slash_index;\n  char *new_path;\n  byte has_slash;\n  \n  has_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)allocate_memory(9);\n    prefix_length = 0;\n  }\n  else {\n    slash_index = (long)last_slash - (long)path;\n    last_slash = (char *)allocate_memory(slash_index + 0xb);\n    prefix_length = slash_index + 1;\n    new_path = last_slash;\n    for (path_length = slash_index; path_length != 0; path_length = path_length + -1) {\n      *new_path = *path;\n      path = path + (ulong)has_slash * -2 + 1;\n      new_path = new_path + (ulong)has_slash * -2 + 1;\n    }\n    last_slash[slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + prefix_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + prefix_length) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "main",
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_path_00114cf0"
        },
        "FUN_0011a4b4": {
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_0011a4b4"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_and_push_string_0010a181",
                "param_1": "arg1",
                "param_2": "start_index",
                "param_3": "end_index",
                "param_4": "flag",
                "cVar1": "char1",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "result_string",
                "lVar7": "counter",
                "local_41": "local_flag",
                "iVar2": "constant1",
                "iVar3": "result",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 processAndPushString_0010a181(long arg1,long start_index,long end_index,byte flag)\n\n{\n  char char1;\n  int constant1;\n  int result;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  long counter;\n  byte local_flag;\n  \n  char1 = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  local_flag = 1;\n  if (char1 == '\\0') {\n    local_flag = *(byte *)(*(long *)(arg1 + 0x60) + 0x1c);\n  }\n  constant1 = *(int *)(*(long *)(arg1 + 0x60) + 0x18);\n  string2 = (char *)stab_pop_type(arg1);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  result_string = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *result_string = '\\0';\n    counter = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    counter = *(long *)(arg1 + 0x68);\n    *(long *)(arg1 + 0x68) = counter + 1;\n    sprintf(result_string,\"%ld=@S;\",counter);\n    local_flag = flag;\n  }\n  length1 = strlen(result_string);\n  sprintf(result_string + length1,\"ar%s;%ld;%ld;%s\",string1,start_index,end_index,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (start_index <= end_index) {\n    result = constant1 * (((int)end_index - (int)start_index) + 1);\n  }\n  returnValue = stab_push_string(arg1,result_string,counter,local_flag,result);\n  if ((char)returnValue != '\\0') {\n    free(result_string);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_and_push_string_0010a181"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_supported_architectures_001199d0",
                "iVar1": "columnWidth",
                "iVar2": "archIndex",
                "iVar3": "unknownComparison",
                "pcVar4": "headerString",
                "sVar5": "headerLength",
                "pcVar6": "tempPath",
                "uVar7": "tmpdir",
                "piVar8": "errnoPtr",
                "iVar9": "loopIndex",
                "lVar10": "tempPathLength",
                "lVar11": "loopIndex2",
                "ppcVar12": "archMachArray",
                "uVar13": "maxArchLength",
                "uVar14": "archLength",
                "local_70": "negativeOne"
            },
            "code": "\n\n\nvoid printSupportedArchitectures_001199d0(void)\n\n{\n  int columnWidth;\n  int archIndex;\n  int unknownComparison;\n  char *headerString;\n  size_t headerLength;\n  char *tempPath;\n  undefined8 tmpdir;\n  int *errnoPtr;\n  int loopIndex;\n  long tempPathLength;\n  long loopIndex2;\n  char **archMachArray;\n  uint maxArchLength;\n  ulong archLength;\n  int negativeOne;\n  \n  headerString = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerString,\"(GNU Binutils for Debian) 2.40\");\n  if (memoized_tmpdir == (char *)0x0) {\n    headerString = getenv(\"TMPDIR\");\n    tmpdir = try_dir_lto_priv_0(headerString,0);\n    headerString = getenv(\"TMP\");\n    tmpdir = try_dir_lto_priv_0(headerString,tmpdir);\n    headerString = getenv(\"TEMP\");\n    tmpdir = try_dir_lto_priv_0(headerString,tmpdir);\n    tmpdir = try_dir_lto_priv_0(&DAT_0011b39a,tmpdir);\n    tmpdir = try_dir_lto_priv_0(vartmp,tmpdir);\n    headerString = (char *)try_dir_lto_priv_0(&tmp,tmpdir);\n    if (headerString == (char *)0x0) {\n      headerString = \".\";\n    }\n    headerLength = strlen(headerString);\n    tempPath = (char *)xmalloc((int)headerLength + 2);\n    memoized_tmpdir = strcpy(tempPath,headerString);\n    memoized_tmpdir[headerLength & 0xffffffff] = '/';\n    memoized_tmpdir[(int)headerLength + 1] = '\\0';\n  }\n  headerString = memoized_tmpdir;\n  headerLength = strlen(memoized_tmpdir);\n  tempPathLength = (long)(int)headerLength;\n  tempPath = (char *)xmalloc(tempPathLength + 9);\n  strcpy(tempPath,headerString);\n  *(undefined2 *)(tempPath + tempPathLength) = 0x6363;\n  *(undefined4 *)(tempPath + tempPathLength + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempPath + tempPathLength + 2) + 3) = 0x585858;\n  tempPath[tempPathLength + 8] = '\\0';\n  archIndex = mkstemps(tempPath,0);\n  if (archIndex == -1) {\n    errnoPtr = __errno_location();\n    tempPath = strerror(*errnoPtr);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerString,tempPath);\n                    \n    abort();\n  }\n  archIndex = close(archIndex);\n  if (archIndex != 0) {\n                    \n    abort();\n  }\n  maxArchLength = 0;\n  archIndex = 2;\n  bfd_iterate_over_targets(do_display_target);\n  unlink(tempPath);\n  free(tempPath);\n  negativeOne = 0;\n  do {\n    headerString = (char *)bfd_printable_arch_mach(archIndex);\n    headerLength = strlen(headerString);\n    if ((int)maxArchLength < (int)(uint)headerLength) {\n      maxArchLength = (uint)headerLength;\n    }\n    archIndex = archIndex + 1;\n  } while (archIndex != 0x57);\n  headerString = getenv(\"COLUMNS\");\n  archIndex = negativeOne;\n  if (headerString != (char *)0x0) {\n    tempPathLength = strtol(headerString,(char **)0x0,10);\n    columnWidth = (int)tempPathLength;\n    if (columnWidth != 0) goto LAB_00119b11;\n  }\n  columnWidth = 0x50;\nLAB_00119b11:\n  do {\n    negativeOne = archIndex;\n    if (-1 < negativeOne) {\n      return;\n    }\n    loopIndex2 = (long)negativeOne;\n    loopIndex = (columnWidth - maxArchLength) + -1;\n    tempPathLength = loopIndex2;\n    do {\n      archIndex = (int)tempPathLength;\n      if (-1 < archIndex) break;\n      headerLength = strlen(*(char **)(tempPathLength * 0x60));\n      tempPathLength = tempPathLength + 1;\n      loopIndex = (loopIndex - (int)headerLength) + -1;\n    } while (-1 < loopIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchLength + 1),&DAT_0011b4a1);\n    for (archMachArray = (char **)(loopIndex2 * 0x60);\n        ((ulong)(uint)(archIndex - negativeOne) + loopIndex2) * 0x60 - (long)archMachArray != 0;\n        archMachArray = archMachArray + 0xc) {\n      printf(\"%s \",*archMachArray);\n    }\n    loopIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerString = (char *)bfd_printable_arch_mach(loopIndex,0);\n      unknownComparison = strcmp(headerString,\"UNKNOWN!\");\n      if (unknownComparison != 0) {\n        tmpdir = bfd_printable_arch_mach(loopIndex,0);\n        printf(\"%*s \",(ulong)maxArchLength,tmpdir);\n        archMachArray = (char **)(loopIndex2 * 0x60);\n        unknownComparison = negativeOne;\n        while (archIndex != unknownComparison) {\n          if (*(char *)((long)archMachArray + (ulong)(loopIndex - 2) + 8) == '\\0') {\n            headerLength = strlen(*archMachArray);\n            for (archLength = headerLength & 0xffffffff; (int)archLength != 0; archLength = (ulong)((int)archLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachArray,_stdout);\n          }\n          unknownComparison = unknownComparison + 1;\n          if (archIndex != unknownComparison) {\n            putc(0x20,_stdout);\n          }\n          archMachArray = archMachArray + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      loopIndex = loopIndex + 1;\n    } while (loopIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "display_info.isra.0.cold",
                "strerror",
                "bfd_printable_arch_mach",
                "close",
                "abort",
                "mkstemps",
                "free",
                "bfd_iterate_over_targets",
                "getenv",
                "fprintf",
                "strcpy",
                "strlen",
                "dcgettext",
                "printf",
                "try_dir.lto_priv.0",
                "xmalloc",
                "do_display_target",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_supported_architectures_001199d0"
        },
        "FUN_00128198": {
            "renaming": {},
            "code": "\n\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128198",
            "calling": [
                "__assert_fail"
            ],
            "imported": false,
            "current_name": "FUN_00128198"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_build_attributes_0010847a",
                "process_gnu_build_attributes_00116490": "processGnuBuildAttributes"
            },
            "code": "\nvoid initializeBuildAttributes_0010847a(void)\n\n{\n  processGnuBuildAttributes();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_build_attributes_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "reverse_demangled_string_0010d21c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "bVar1": "byteVar1",
                "pbVar2": "bytePtrVar2",
                "bVar3": "byteVar3",
                "cVar4": "charVar4",
                "bVar5": "byteVar5",
                "uVar6": "result",
                "iVar7": "intVar7",
                "uVar8": "uintVar8",
                "sVar9": "sizeVar9",
                "pbVar10": "bytePtrVar10",
                "__ptr": "ptrVar",
                "__ptr_00": "ptrVar2",
                "__haystack": "haystack",
                "pcVar11": "var11",
                "uVar12": "result2",
                "pcVar13": "var13",
                "bVar14": "byteVar14",
                "pcVar15": "var15",
                "bVar16": "byteVar16",
                "bVar17": "byteVar17",
                "bVar18": "byteVar18",
                "bVar19": "byteVar19",
                "uVar20": "count",
                "uVar21": "ulongVar21",
                "local_3c": "arrayVar"
            },
            "code": "\nundefined4 reverseDemangledString_0010d21c(undefined8 arg1,byte **arg2,undefined8 *arg3)\n\n{\n  byte byteVar1;\n  byte *bytePtrVar2;\n  byte byteVar3;\n  char charVar4;\n  byte byteVar5;\n  undefined4 result;\n  int intVar7;\n  uint uintVar8;\n  size_t sizeVar9;\n  byte *bytePtrVar10;\n  void *ptrVar;\n  void *ptrVar2;\n  char *haystack;\n  char *var11;\n  undefined8 result2;\n  char *var13;\n  byte byteVar14;\n  char *var15;\n  byte byteVar16;\n  byte byteVar17;\n  byte byteVar18;\n  byte byteVar19;\n  uint count;\n  ulong ulongVar21;\n  uint arrayVar [3];\n  \n  bytePtrVar2 = *arg2;\n  *arg2 = bytePtrVar2 + 1;\n  arrayVar[0] = stab_demangle_count(arg2);\n  ulongVar21 = (ulong)arrayVar[0];\n  if (arrayVar[0] != 0) {\n    bytePtrVar10 = *arg2;\n    sizeVar9 = strlen((char *)bytePtrVar10);\n    if (ulongVar21 <= sizeVar9) {\n      *arg2 = bytePtrVar10 + ulongVar21;\n      count = 0;\n      result = stab_demangle_get_count(arg2,arrayVar);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (arrayVar[0] <= count) {\n          if (arg3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptrVar = (void *)savestring(bytePtrVar2,(int)*arg2 - (int)bytePtrVar2);\n          ptrVar2 = (void *)concat(\"NoSuchStrinG__\",ptrVar,0);\n          free(ptrVar);\n          haystack = (char *)cplus_demangle(ptrVar2,2);\n          free(ptrVar2);\n          if ((haystack != (char *)0x0) &&\n             (var11 = strstr(haystack,\"::NoSuchStrinG\"), var13 = haystack,\n             var15 = haystack, var11 != (char *)0x0)) {\n            for (; var13 != var11; var13 = var13 + 1) {\n              if ((*var13 != ' ') ||\n                 (((var13[1] == '>' && (haystack < var13)) && (var13[-1] == '>')))) {\n                *var15 = *var13;\n                var15 = var15 + 1;\n              }\n            }\n            result2 = savestring(haystack,(int)var15 - (int)haystack);\n            *arg3 = result2;\n            free(haystack);\n            return result;\n          }\n          stab_bad_demangle(bytePtrVar2);\n          free(haystack);\n          return 0;\n        }\n        bytePtrVar10 = *arg2;\n        if (*bytePtrVar10 != 0x5a) {\n          byteVar5 = stab_demangle_type_lto_priv_0(arg1,arg2,0);\n          if (byteVar5 == 0) {\n            return 0;\n          }\n          byteVar3 = 0;\n          byteVar14 = 0;\n          byteVar18 = 0;\n          byteVar17 = 0;\n          byteVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byteVar16 = byteVar3;\n              byteVar1 = *bytePtrVar10;\n              if ((byteVar14 | byteVar1 == 0) != 0) {\n                byteVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byteVar3 = byteVar5;\n              byteVar14 = byteVar5;\n            } while ('v' < (char)byteVar1);\n            if ((char)byteVar1 < 'b') {\n              if ((char)byteVar1 < 'U') {\n                if ((char)byteVar1 < 'C') goto LAB_0010d2e9;\n                ulongVar21 = 1L << (byteVar1 + 0xbd & 0x3f);\n                if ((ulongVar21 & 0x11409) == 0) {\n                  if ((ulongVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byteVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byteVar1 + 0xab)) goto LAB_0010d2e9;\n              bytePtrVar10 = bytePtrVar10 + 1;\n              byteVar3 = byteVar16;\n              byteVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byteVar1) {\n            case 0x62:\n              byteVar3 = byteVar16;\n              byteVar18 = byteVar5;\n              break;\n            case 99:\n              byteVar3 = byteVar16;\n              byteVar19 = byteVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byteVar3 = byteVar16;\n              byteVar17 = byteVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *arg2 = bytePtrVar10 + 1;\n        charVar4 = stab_demangle_type_lto_priv_0(arg1,arg2,0);\n        if (charVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  stab_bad_demangle(bytePtrVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byteVar16 == 0) {\n    if (byteVar19 == 0) {\n      if (byteVar18 == 0) {\n        if (byteVar17 == 0) {\n          if (byteVar5 != 0) {\n            uintVar8 = stab_demangle_count(arg2);\n            if (uintVar8 == 0) goto LAB_0010d280;\n            *arg2 = *arg2 + uintVar8;\n          }\n        }\n        else {\n          if (**arg2 == 0x6d) {\n            *arg2 = *arg2 + 1;\n          }\n          while( true ) {\n            bytePtrVar10 = *arg2;\n            if (((&_sch_istable)[(ulong)*bytePtrVar10 * 2] & 4) == 0) break;\n            *arg2 = bytePtrVar10 + 1;\n          }\n          if (*bytePtrVar10 == 0x2e) {\n            do {\n              bytePtrVar10 = bytePtrVar10 + 1;\n              *arg2 = bytePtrVar10;\n            } while (((&_sch_istable)[(ulong)*bytePtrVar10 * 2] & 4) != 0);\n          }\n          bytePtrVar10 = *arg2;\n          if (*bytePtrVar10 == 0x65) {\n            do {\n              bytePtrVar10 = bytePtrVar10 + 1;\n              *arg2 = bytePtrVar10;\n            } while (((&_sch_istable)[(ulong)*bytePtrVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar8 = stab_demangle_count(arg2);\n        if (1 < uintVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**arg2 == 0x6d) {\n        *arg2 = *arg2 + 1;\n      }\n      intVar7 = stab_demangle_count(arg2);\n      if (intVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**arg2 == 0x6d) {\n      *arg2 = *arg2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**arg2 * 2] & 4) != 0) {\n      *arg2 = *arg2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  count = count + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "cplus_demangle",
                "stab_bad_demangle",
                "strlen",
                "stab_demangle_get_count",
                "concat",
                "stab_demangle_count",
                "abort",
                "strstr",
                "stab_demangle_type.lto_priv.0",
                "free",
                "savestring"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "reverse_demangled_string_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "clear_unused_hash_tables_001054af",
                "param_1": "unused_param_1",
                "param_2": "unused_param_2"
            },
            "code": "\nvoid clearUnusedHashTables_001054af(undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  undefined8 in_RAX;\n  \n  htab_delete(strip_specific_htab);\n  htab_delete(strip_unneeded_htab);\n  htab_delete(keep_specific_htab);\n  htab_delete(localize_specific_htab);\n  htab_delete(globalize_specific_htab);\n  htab_delete(keepglobal_specific_htab);\n  htab_delete(weaken_specific_htab);\n  htab_delete(redefine_specific_htab);\n  htab_delete(redefine_specific_reverse_htab,unused_param_2,in_RAX);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "clear_unused_hash_tables_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "record_variable_0010c139",
                "param_1": "record",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "temp1",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "ptr",
                "in_R10": "register10",
                "unaff_R15": "register15"
            },
            "code": "\nulong record_variable_0010c139(undefined8 record,long data,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 temp1;\n  char flag;\n  ulong result;\n  undefined8 *ptr;\n  undefined8 register10;\n  undefined8 register15;\n  \n  flag = *(char *)(data + 0x60);\n  if ((flag != '\\0') && ((*(int *)(data + 0x40) != 0 || (*(char *)(data + 0x44) == '\\0')))) {\n    ptr = (undefined8 *)xmalloc(0x28);\n    temp1 = *(undefined8 *)(data + 0x78);\n    *(undefined8 *)((long)ptr + 0x1c) = 0;\n    ptr[2] = param4;\n    *(undefined4 *)(ptr + 3) = param5;\n    ptr[4] = param6;\n    *(undefined8 **)(data + 0x78) = ptr;\n    *ptr = temp1;\n    ptr[1] = param3;\n    return CONCAT71((int7)((ulong)register15 >> 8),flag) & 0xffffffff;\n  }\n  result = debug_record_variable_0010c139(record,param3,param4,param5,param6,register10);\n  return result;\n}\n\n",
            "called": [
                "debug_record_variable",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "record_variable_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "store_symbol_and_write_0010e439",
                "param_1": "baseAddress",
                "param_2": "symbolValue"
            },
            "code": "\nvoid storeSymbolAndWrite_0010e439(long baseAddress,undefined8 symbolValue)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = symbolValue;\n  stab_write_symbol_lto_priv_0(baseAddress,0x84,0,0,symbolValue);\n  return;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "stab_start_compilation_unit.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "store_symbol_and_write_0010e439"
        },
        "FUN_001043d0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "main",
                "parse_stab",
                "stab_push_string",
                "save_stab",
                "FUN_0010554f",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001043d0"
        },
        "FUN_001042b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "parse_coff_struct_type",
                "stab_demangle_v3_arglist",
                "stab_demangle_arg",
                "stab_class_method_var",
                "main",
                "parse_stab",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "parse_stab_type",
                "stab_demangle_remember_type",
                "stab_modify_type",
                "stab_class_start_method.lto_priv.0",
                "FUN_00114dc7",
                "stab_get_struct_index",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042b0"
        },
        "FUN_001284c0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284c0",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_001284c0"
        },
        "FUN_001044f0": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "main",
                "get_file_size",
                "try_dir.lto_priv.0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001044f0"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "param1",
                "param_2": "count",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid pushDefinedType_00109d3e(undefined8 param1,int count)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (count - 1U < 8) {\n    defaultValue = *(undefined8 *)(CSWTCH_58 + (ulong)(count - 1U) * 8);\n  }\n  stab_push_defined_type(param1,defaultValue,count);\n  return;\n}\n\n",
            "called": [
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_array_00112502",
                "param_1": "array",
                "param_2": "param",
                "param_3": "value",
                "uVar1": "index",
                "puVar2": "ptr",
                "uVar3": "result",
                "cVar4": "flag"
            },
            "code": "\nundefined check_array_00112502(long array,undefined8 param,ulong value)\n\n{\n  uint index;\n  undefined8 *ptr;\n  undefined8 result;\n  char flag;\n  \n  do {\n    ptr = *(undefined8 **)(array + 0x40);\n    if (ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(array + 0x48), index < 10 && (ptr[(ulong)index + 2] != -1))) {\n      if (value <= (ulong)ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      flag = stab_lineno_lto_priv_0(param,*(undefined8 *)(ptr[1] + 8));\n      if (flag == '\\0') {\n        return 0;\n      }\n      *(int *)(array + 0x48) = *(int *)(array + 0x48) + 1;\n    }\n    result = *ptr;\n    *(undefined4 *)(array + 0x48) = 0;\n    *(undefined8 *)(array + 0x40) = result;\n  } while( true );\n}\n\n",
            "called": [
                "stab_lineno.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "debug_write_name.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "check_array_00112502"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "parse_file_00104cc1",
                "uVar1": "errorMessage",
                "ppbVar2": "slot",
                "pbVar3": "currentChar",
                "bVar4": "nextChar",
                "unaff_RBX": "startOfLine",
                "pbVar5": "currentLine",
                "unaff_EBP": "lineNumber",
                "in_R10": "currentPosition",
                "unaff_R13": "result",
                "unaff_R14": "endOfLine",
                "unaff_R15": "currentToken",
                "param_7": "formatString",
                "param_8": "resultPointer",
                "param_9": "lineBuffer"
            },
            "code": "\nvoid parseFile_00104cc1(void)\n\n{\n  undefined8 errorMessage;\n  byte **slot;\n  byte *currentChar;\n  byte nextChar;\n  byte *startOfLine;\n  byte *currentLine;\n  int lineNumber;\n  byte *currentPosition;\n  undefined8 result;\n  byte *endOfLine;\n  byte *currentToken;\n  undefined8 formatString;\n  undefined8 *resultPointer;\n  byte *lineBuffer;\n  \ncode_r0x00104cc1:\n  lineBuffer = currentPosition;\n  errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  non_fatal(errorMessage,formatString,lineNumber);\n  currentLine = startOfLine;\n  currentPosition = lineBuffer;\nLAB_00114599:\n  do {\n    *currentPosition = 0;\n    if (currentToken < currentPosition) {\n      slot = (byte **)htab_find_slot();\n      *slot = currentToken;\n    }\n    lineNumber = lineNumber + 1;\n    currentChar = currentLine;\n    if (endOfLine[1] == 0) {\n      *resultPointer = result;\n      return;\n    }\n    for (; nextChar = *currentChar, endOfLine = currentChar, nextChar != 10; currentChar = currentChar + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          startOfLine = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *currentChar = 0;\n          startOfLine = currentChar + 1;\n          if (currentChar[1] == 10) {\n            startOfLine = currentChar + 2;\n            endOfLine = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      endOfLine = currentChar + 1;\n      startOfLine = currentChar + 2;\n    }\n    else {\n      startOfLine = currentChar + 1;\n    }\nLAB_00114553:\n    nextChar = *currentLine;\n    currentToken = currentLine;\n    while ((nextChar == 0x20 || (currentPosition = currentToken, nextChar == 9))) {\n      currentLine = currentToken + 1;\n      currentToken = currentToken + 1;\n      nextChar = *currentLine;\n    }\n    do {\n      currentLine = startOfLine;\n      if ((nextChar == 10) || (nextChar == 0xd)) goto LAB_00114676;\n      if (nextChar == 0) goto LAB_00114599;\n      nextChar = currentPosition[1];\n      currentPosition = currentPosition + 1;\n    } while ((nextChar != 0x20) && (nextChar != 9));\n    if ((char)nextChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (nextChar & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    nextChar = currentPosition[1];\n    if ((((((nextChar == 9) || (nextChar == 0x20)) && ((nextChar = currentPosition[2], nextChar == 9 || (nextChar == 0x20)))\n          ) && ((nextChar = currentPosition[3], nextChar == 9 || (nextChar == 0x20)))) &&\n        ((nextChar = currentPosition[4], nextChar == 9 || (nextChar == 0x20)))) &&\n       ((nextChar = currentPosition[5], nextChar == 9 || (nextChar == 0x20)))) {\n      nextChar = currentPosition[6];\n      currentChar = currentPosition + 6;\n      if ((nextChar == 9) || (nextChar == 0x20)) {\n        do {\n          do {\n            nextChar = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (nextChar == 0x20);\n        } while (nextChar == 9);\n      }\n    }\n    if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "FUN_00104d1c",
                "dcgettext",
                "non_fatal",
                "htab_find_slot",
                "add_specific_symbols.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_file_00104cc1"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "allocate_and_store_data_00113bfa",
                "param_1": "data_1",
                "param_2": "data_2",
                "lVar1": "type_constant",
                "plVar2": "pointer",
                "debug_make_type_constprop_0": "create_type_constant",
                "xmalloc": "allocate_memory"
            },
            "code": "\nlong allocate_and_store_data_00113bfa(long data_1,long data_2)\n\n{\n  long type_constant;\n  long *pointer;\n  \n  if (((data_1 != 0) && (data_2 != 0)) &&\n     (type_constant = create_type_constant(0x12,0), type_constant != 0)) {\n    pointer = (long *)allocate_memory(0x10);\n    *pointer = data_1;\n    pointer[1] = data_2;\n    *(long **)(type_constant + 0x10) = pointer;\n    return type_constant;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "allocate_and_store_data_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_not_coff_00108375",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "uVar1": "param1Value",
                "uVar2": "translationMessage",
                "unaff_EBX": "registerEBX"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00108375(undefined8 arg1,undefined8 *arg2,undefined8 arg3)\n\n{\n  undefined8 param1Value;\n  undefined8 translationMessage;\n  uint registerEBX;\n  \n  if (*(int *)(arg2[1] + 8) != 2) {\n    param1Value = *arg2;\n    registerEBX = registerEBX & 0xf7ffffff;\n    translationMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(translationMessage,param1Value,arg3);\n  }\n  return registerEBX;\n}\n\n",
            "called": [
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "check_new_section_flags"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00108375"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_and_push_string_00109e76",
                "param_1": "baseAddress",
                "param_2": "value",
                "lVar1": "previousCount",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateAndPushString_00109e76(long baseAddress,uint value)\n\n{\n  long previousCount;\n  char formattedString [58];\n  \n  previousCount = *(long *)(baseAddress + 0x68);\n  *(long *)(baseAddress + 0x68) = previousCount + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",previousCount,previousCount,(ulong)value);\n  stab_push_string(baseAddress,formattedString,previousCount,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_and_push_string_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_saved_stabs_001088ae",
                "param_1": "newParam1",
                "param_2": "newParam2",
                "param_3": "newParam3",
                "param_4": "newParam4",
                "lVar2": "stabsIndexOffset",
                "uVar3": "newString",
                "iVar1": "updatedIndex"
            },
            "code": "\nulong updateSavedStabs_001088ae(undefined4 newParam1,undefined4 newParam2,undefined8 newParam3,undefined8 newParam4)\n\n{\n  int updatedIndex;\n  long stabsIndexOffset;\n  undefined8 newString;\n  \n  stabsIndexOffset = (long)saved_stabs_index * 0x18;\n  free(*(void **)(saved_stabs + stabsIndexOffset + 0x10));\n  *(undefined4 *)(saved_stabs + stabsIndexOffset) = newParam1;\n  *(undefined4 *)(saved_stabs + stabsIndexOffset + 4) = newParam2;\n  *(undefined8 *)(saved_stabs + stabsIndexOffset + 8) = newParam3;\n  newString = xstrdup(newParam4);\n  *(undefined8 *)(saved_stabs + stabsIndexOffset + 0x10) = newString;\n  updatedIndex = saved_stabs_index + 1;\n  saved_stabs_index = updatedIndex % 0x10;\n  return (long)updatedIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_saved_stabs_001088ae"
        },
        "FUN_001042c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "template_in_dir"
            ],
            "imported": false,
            "current_name": "FUN_001042c0"
        },
        "FUN_001041a0": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "main",
                "debug_start_source",
                "stab_lineno.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001041a0"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_matching_string_0010afd5",
                "param_1": "list",
                "param_2": "data",
                "param_3": "str",
                "param_4": "len",
                "param_5": "flag",
                "param_6": "debug_value",
                "iVar1": "result",
                "__s2": "comp_str",
                "puVar2": "current_node",
                "uVar3": "indirect_type",
                "lVar4": "value",
                "puVar5": "inner_node",
                "puVar6": "inner_flag",
                "bVar7": "loop_counter",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16]\nfind_matching_string_0010afd5(undefined8 *list,long data,undefined8 str,undefined4 len,\n            undefined4 flag,undefined8 debug_value)\n\n{\n  int result;\n  char *comp_str;\n  undefined8 *current_node;\n  undefined8 indirect_type;\n  long value;\n  undefined8 *inner_node;\n  undefined4 *inner_flag;\n  byte loop_counter;\n  undefined return_value [16];\n  \n  loop_counter = 0;\n  comp_str = (char *)savestring(str,len);\n  for (list = (undefined8 *)*list; list != (undefined8 *)0x0;\n      list = (undefined8 *)*list) {\n    for (current_node = (undefined8 *)list[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (inner_node = *(undefined8 **)(undefined8 *)current_node[2]; inner_node != (undefined8 *)0x0;\n            inner_node = (undefined8 *)*inner_node) {\n          if ((*(int *)((long)inner_node + 0x14) == 1) && (*(char *)inner_node[1] == *comp_str)) {\n            result = strcmp((char *)inner_node[1],comp_str);\n            if (result == 0) {\n              value = inner_node[4];\n              if (value == 0) goto LAB_0010b05b;\n              free(comp_str);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(data + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)xmalloc(0x28);\n      indirect_type = *(undefined8 *)(data + 0x1a0);\n      inner_flag = (undefined4 *)((long)current_node + 0x14);\n      for (value = 5; value != 0; value = value + -1) {\n        *inner_flag = 0;\n        inner_flag = inner_flag + (ulong)loop_counter * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = flag;\n      *current_node = indirect_type;\n      current_node[1] = comp_str;\n      indirect_type = debug_make_indirect_type_isra_0(current_node + 3,comp_str);\n      *(undefined8 **)(data + 0x1a0) = current_node;\n      current_node[4] = indirect_type;\nLAB_0010b0e7:\n      value = current_node[4];\nLAB_0010b0eb:\n      return_value._8_8_ = debug_value;\n      return_value._0_8_ = value;\n      return return_value;\n    }\n    if (*(char *)current_node[1] == *comp_str) {\n      result = strcmp((char *)current_node[1],comp_str);\n      if (result == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = flag;\n        }\n        free(comp_str);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "debug_make_indirect_type.isra.0",
                "savestring",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "find_matching_string_0010afd5"
        },
        "FUN_001043e0": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001043e0"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "strchr",
                "bad_stab",
                "savestring",
                "concat",
                "strlen",
                "dcgettext",
                "debug_make_array_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "stab_demangle_args",
                "strtol",
                "debug_make_enum_type.isra.0",
                "strcmp",
                "debug_get_real_type.isra.0",
                "stab_demangle_count",
                "free",
                "fprintf",
                "strcpy",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "parse_number",
                "strstr",
                "cplus_demangle_init_info",
                "debug_make_float_type.isra.0",
                "debug_make_reference_type.isra.0",
                "cplus_demangle_mangled_name",
                "sprintf",
                "startswith.lto_priv.0.lto_priv.0",
                "strncmp",
                "debug_get_type_name.constprop.0",
                "stab_demangle_v3_arglist",
                "debug_make_void_type.isra.0",
                "strcat",
                "stab_bad_demangle",
                "debug_make_volatile_type.isra.0",
                "stab_demangle_qualified",
                "debug_make_method_type.isra.0",
                "malloc",
                "stab_demangle_remember_type",
                "debug_make_struct_type.isra.0",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "parse_stab_type_number",
                "stab_find_slot",
                "debug_make_const_type.isra.0",
                "stab_demangle_function_name.constprop.0",
                "stab_find_type",
                "stab_find_tagged_type",
                "strspn",
                "debug_make_type.constprop.0",
                "debug_make_int_type.isra.0",
                "debug_find_named_type",
                "warn_stab",
                "xmalloc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_stabs_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "stabOffset",
                "piVar3": "stabEntry",
                "iVar4": "index",
                "_stderr": "outputStream",
                "saved_stabs_index": "stabsIndex",
                "saved_stabs": "stabsData"
            },
            "code": "\n\n\nundefined8 printStabsEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long stabOffset;\n  int *stabEntry;\n  int index;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(outputStream,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,outputStream);\n  index = stabsIndex;\n  do {\n    stabOffset = (long)index * 0x18;\n    stabEntry = (int *)(stabsData + stabOffset);\n    if (*(long *)(stabsData + stabOffset + 0x10) != 0) {\n      stabName = bfd_get_stab_name(*stabEntry);\n      if (stabName == 0) {\n        if (*stabEntry == 0) {\n          fwrite(\"HdrSym\",1,6,outputStream);\n        }\n        else {\n          fprintf(outputStream,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(outputStream,\"%-6s\",stabName);\n      }\n      fprintf(outputStream,\" %-6d \",(ulong)*(uint *)(stabsData + stabOffset + 4));\n      fprintf(outputStream,\"%08lx\",*(undefined8 *)(stabsData + stabOffset + 8));\n      if (*stabEntry != 0) {\n        fprintf(outputStream,\" %s\",*(undefined8 *)(stabsData + stabOffset + 0x10));\n      }\n      fputc(10,outputStream);\n    }\n    index = (index + 1) % 0x10;\n  } while (stabsIndex != index);\n  return param_3;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "bfd_get_stab_name",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "modify_stab_entries_0010a083",
                "param_1": "entry_address",
                "stab_modify_type": "modify_stab_type"
            },
            "code": "\nvoid modify_stab_entries_0010a083(long entry_address)\n\n{\n  modify_stab_type(entry_address,0x2a,4,entry_address + 0x178,entry_address + 0x180);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_entries_0010a083"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "param_1": "array",
                "param_2": "value",
                "param_3": "newSize",
                "param_4": "flag",
                "param_5": "outParameter",
                "param_6": "extraData",
                "lVar1": "newElementIndex",
                "plVar2": "targetElement",
                "lVar3": "remainingElements",
                "puVar4": "currentElementPtr",
                "uVar5": "currentSize",
                "bVar6": "isFlagSet",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nresizeAndInitializeArray_00109c2e(long array,long value,ulong newSize,int flag,undefined4 *outParameter,\n            undefined8 extraData)\n\n{\n  long newElementIndex;\n  long *targetElement;\n  long remainingElements;\n  undefined *currentElementPtr;\n  ulong currentSize;\n  byte isFlagSet;\n  undefined returnValue [16];\n  \n  isFlagSet = 0;\n  newSize = newSize & 0xffffffff;\n  currentSize = *(ulong *)(array + 0x1b0);\n  if (currentSize <= newSize) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= newSize; currentSize = currentSize * 2) {\n    }\n    newElementIndex = xrealloc(*(undefined8 *)(array + 0x1a8),currentSize * 0x18);\n    *(long *)(array + 0x1a8) = newElementIndex;\n    currentElementPtr = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newElementIndex);\n    for (remainingElements = (currentSize - *(long *)(array + 0x1b0)) * 0x18; remainingElements != 0; remainingElements = remainingElements + -1) {\n      *currentElementPtr = 0;\n      currentElementPtr = currentElementPtr + (ulong)isFlagSet * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = currentSize;\n  }\n  targetElement = (long *)(newSize * 0x18 + *(long *)(array + 0x1a8));\n  if (*targetElement == 0) {\n    newElementIndex = *(long *)(array + 0x68);\n    *targetElement = newElementIndex;\n    *(long *)(array + 0x68) = newElementIndex + 1;\n    targetElement[1] = value;\n    *(int *)(targetElement + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(targetElement + 2) = 0;\n    *(undefined4 *)((long)targetElement + 0x14) = *outParameter;\n  }\n  else {\n    *outParameter = *(undefined4 *)((long)targetElement + 0x14);\n  }\n  returnValue._8_8_ = extraData;\n  returnValue._0_8_ = *targetElement;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "stab_tag_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "resize_and_initialize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "verify_and_print_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedMessage",
                "fatal": "exitProgram"
            },
            "code": "\nvoid verifyAndPrintErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = getLocalizedMessage(0,\"bad format for %s\",5);\n                    \n  exitProgram(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "init_section_add"
            ],
            "imported": false,
            "current_name": "verify_and_print_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_debug_to_namespace_00112996",
                "param_1": "ptr_struct",
                "param_2": "ptr_param2",
                "param_3": "ptr_param3",
                "uVar1": "result",
                "lVar2": "temp_var"
            },
            "code": "\n\n\nundefined8 add_debug_to_namespace_00112996(long ptr_struct,undefined8 ptr_param2,undefined8 ptr_param3)\n\n{\n  undefined8 result;\n  long temp_var;\n  \n  if ((*(long *)(ptr_struct + 8) != 0) && (*(long *)(ptr_struct + 0x10) != 0)) {\n    temp_var = *(long *)(ptr_struct + 0x10) + 0x10;\n    if (*(long *)(ptr_struct + 0x20) != 0) {\n      temp_var = *(long *)(ptr_struct + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(temp_var,ptr_param2,ptr_param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "debug_add_to_namespace.constprop.0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "add_debug_to_namespace_00112996"
        },
        "FUN_001284b8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284b8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_001284b8"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "param_1": "type",
                "param_2": "name",
                "param_3": "type",
                "param_4": "id",
                "uVar1": "result",
                "uVar2": "newSize",
                "lVar3": "typeInfo",
                "piVar4": "typePtr",
                "__s1": "existingName",
                "cVar5": "sameType",
                "iVar6": "count",
                "puVar7": "newClass",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] setClassId_0010c7a0(long type,char *name,int *type,undefined8 id)\n\n{\n  undefined8 result;\n  uint newSize;\n  long typeInfo;\n  int *typePtr;\n  char *existingName;\n  char sameType;\n  int count;\n  undefined8 *newClass;\n  undefined returnValue [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  typeInfo = *(long *)(type + 4);\n  newClass = (undefined8 *)(ulong)*(uint *)(typeInfo + 0xc);\n  if (*(uint *)(typeInfo + 0xc) <= *(uint *)(type + 0x38)) {\n    for (newClass = *(undefined8 **)(type + 0x50); newClass != (undefined8 *)0x0;\n        newClass = (undefined8 *)*newClass) {\n      typePtr = (int *)newClass[1];\n      if (*typePtr == *type) {\n        existingName = (char *)newClass[2];\n        if (name == (char *)0x0) {\n          if (existingName == (char *)0x0) {\nLAB_0010c82c:\n            sameType = debug_type_samep(type,typePtr,type);\n            if (sameType != '\\0') {\n              newSize = *(uint *)(*(long *)(newClass[1] + 0x10) + 0xc);\n              newClass = (undefined8 *)(ulong)newSize;\n              *(uint *)(typeInfo + 0xc) = newSize;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existingName != (char *)0x0) && (*existingName == *name)) &&\n                (count = strcmp(existingName,name), count == 0)) goto LAB_0010c82c;\n      }\n    }\n    count = *(int *)(type + 0x34) + 1;\n    *(int *)(type + 0x34) = count;\n    *(int *)(typeInfo + 0xc) = count;\n    newClass = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(type + 0x50);\n    newClass[2] = name;\n    *(undefined8 **)(type + 0x50) = newClass;\n    *newClass = result;\n    newClass[1] = type;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)newClass >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = id;\n  return returnValue;\n}\n\n",
            "called": [
                "debug_type_samep",
                "__assert_fail",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "set_class_id_0010c7a0"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "uVar1": "type1",
                "uVar2": "type2",
                "pplVar3": "ptr_ptr1",
                "ppcVar4": "ptr_ptr2",
                "ppcVar5": "ptr_ptr3",
                "lVar6": "ptr_value1",
                "lVar7": "ptr_value2",
                "lVar8": "ptr_value3",
                "pcVar9": "ptr_char1",
                "pcVar10": "ptr_char2",
                "cVar11": "compare_result",
                "bVar12": "result",
                "iVar13": "compare_result2",
                "uVar14": "debug_type1",
                "uVar15": "debug_type2",
                "puVar16": "ptr_debug_type1",
                "puVar17": "ptr_debug_type2",
                "plVar18": "ptr_value4",
                "lVar19": "offset",
                "lVar22": "offset2",
                "local_70": "ptr_value5",
                "local_58": "ptr_list",
                "plStack_50": "ptr_value6",
                "local_48": "ptr_value7",
                "plVar20": "ptr_value8",
                "plVar21": "ptr_value9"
            },
            "code": "\nbyte checkEquality_0010922b(long function_ptr,long *arg1,long *arg2)\n\n{\n  uint type1;\n  uint type2;\n  long **ptr_ptr1;\n  char **ptr_ptr2;\n  char **ptr_ptr3;\n  long ptr_value1;\n  long ptr_value2;\n  long ptr_value3;\n  char *ptr_char1;\n  char *ptr_char2;\n  char compare_result;\n  byte result;\n  int compare_result2;\n  undefined8 debug_type1;\n  undefined8 debug_type2;\n  undefined8 *ptr_debug_type1;\n  undefined8 *ptr_debug_type2;\n  long *ptr_value4;\n  long offset;\n  long *ptr_value8;\n  long *ptr_value9;\n  long offset2;\n  long *ptr_value5;\n  undefined8 *ptr_list;\n  long *ptr_value6;\n  long *ptr_value7;\n  \n  ptr_value4 = arg2;\n  if (arg1 == (long *)0x0) {\nLAB_00109241:\n    return arg2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr_value4 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    type1 = *(uint *)arg1;\n    if (type1 == 1) goto code_r0x00109263;\n    while (type2 = *(uint *)arg2, type2 == 1) {\n      arg2 = **(long ***)arg2[2];\n      if (arg2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (arg1 == arg2) {\n      return true;\n    }\n    if (type1 != 0x16) break;\n    if (type2 != 0x17) goto LAB_001092cb;\n    arg1 = *(long **)(arg1[2] + 8);\n    if (arg1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((type1 == 0x17) && (type2 == 0x16)) {\n    arg2 = *(long **)(arg2[2] + 8);\n    ptr_value4 = arg2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*arg1 != *arg2) {\n    return false;\n  }\n  if (type1 == 3) {\n    return *(char *)(arg1 + 2) == *(char *)(arg2 + 2);\n  }\n  if (type1 < 4) {\n    if (type1 == 2) {\n      return true;\n    }\n  }\n  else if (type1 - 4 < 3) {\n    return true;\n  }\n  ptr_list = *(undefined8 **)(function_ptr + 0x58);\n  for (ptr_debug_type2 = ptr_list; ptr_debug_type2 != (undefined8 *)0x0; ptr_debug_type2 = (undefined8 *)*ptr_debug_type2) {\n    if (((long *)ptr_debug_type2[1] == arg1) && ((long *)ptr_debug_type2[2] == arg2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(function_ptr + 0x58) = &ptr_list;\n  ptr_value6 = arg1;\n  ptr_value7 = arg2;\n  switch(type1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr_value4 = (long *)arg1[2];\n    ptr_ptr1 = (long **)arg2[2];\n    if (ptr_value4 == (long *)0x0) {\n      result = ptr_ptr1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_ptr1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(function_ptr + 0x38) < *(uint *)((long)ptr_value4 + 0xc)) &&\n       (*(uint *)((long)ptr_value4 + 0xc) == *(uint *)((long)ptr_ptr1 + 0xc))) goto LAB_001097af;\n    ptr_debug_type2 = (undefined8 *)*ptr_value4;\n    ptr_value5 = *ptr_ptr1;\n    if (((ptr_debug_type2 == (undefined8 *)0x0) == (ptr_value5 == (long *)0x0)) &&\n       ((((ptr_value4[2] == 0) == (ptr_ptr1[2] == (long *)0x0) &&\n         ((ptr_value4[3] == 0) == (ptr_ptr1[3] == (long *)0x0))) &&\n        ((ptr_value4[4] == 0) == (ptr_ptr1[4] == (long *)0x0))))) {\n      if (ptr_debug_type2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr_value4[4] != 0) &&\n           (compare_result = checkEquality_0010922b(function_ptr,ptr_value4[4],ptr_ptr1[4]), compare_result == '\\0'))\n        goto LAB_00109382;\n        ptr_value9 = (long *)ptr_value4[2];\n        if (ptr_value9 == (long *)0x0) {\nLAB_00109540:\n          ptr_debug_type2 = (undefined8 *)ptr_value4[3];\n          if (ptr_debug_type2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr_value4 = ptr_ptr1[3];\n          while( true ) {\n            ptr_ptr3 = (char **)*ptr_debug_type2;\n            if (ptr_ptr3 == (char **)0x0) {\n              result = *ptr_value4 == 0;\n              goto LAB_001099c4;\n            }\n            ptr_ptr2 = (char **)*ptr_value4;\n            if (ptr_ptr2 == (char **)0x0) break;\n            if ((**ptr_ptr3 != **ptr_ptr2) || (compare_result2 = strcmp(*ptr_ptr3,*ptr_ptr2), compare_result2 != 0))\n            break;\n            ptr_char1 = ptr_ptr3[1];\n            ptr_char2 = ptr_ptr2[1];\n            if ((ptr_char1 == (char *)0x0) != (ptr_char2 == (char *)0x0)) break;\n            if (ptr_char1 != (char *)0x0) {\n              offset2 = 0;\n              while( true ) {\n                ptr_ptr3 = *(char ***)(ptr_char1 + offset2);\n                ptr_ptr2 = *(char ***)(ptr_char2 + offset2);\n                if (ptr_ptr3 == (char **)0x0) break;\n                if (ptr_ptr2 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptr_ptr3 != **ptr_ptr2) ||\n                     ((((ulong)ptr_ptr3[2] ^ (ulong)ptr_ptr2[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr_ptr3[3] != ptr_ptr2[3] ||\n                     ((((ptr_ptr3[4] == (char *)0x0) != (ptr_ptr2[4] == (char *)0x0) ||\n                       (compare_result2 = strcmp(*ptr_ptr3,*ptr_ptr2), compare_result2 != 0)) ||\n                      (compare_result = checkEquality_0010922b(function_ptr,ptr_ptr3[1],ptr_ptr2[1]), compare_result == '\\0')))))) ||\n                   ((ptr_ptr3[4] != (char *)0x0 &&\n                    (compare_result = checkEquality_0010922b(function_ptr,ptr_ptr3[4],ptr_ptr2[4]), compare_result == '\\0'))))\n                goto LAB_00109382;\n                offset2 = offset2 + 8;\n              }\n              if (ptr_ptr2 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr_debug_type2 = ptr_debug_type2 + 1;\n            ptr_value4 = ptr_value4 + 1;\n          }\n        }\n        else {\n          ptr_value8 = ptr_ptr1[2];\n          for (; ptr_debug_type2 = (undefined8 *)*ptr_value9, ptr_debug_type2 != (undefined8 *)0x0;\n              ptr_value9 = ptr_value9 + 1) {\n            ptr_debug_type1 = (undefined8 *)*ptr_value8;\n            if ((((ptr_debug_type1 == (undefined8 *)0x0) ||\n                 (((ptr_debug_type2[1] ^ ptr_debug_type1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr_debug_type2 + 2) != *(int *)(ptr_debug_type1 + 2))) ||\n               (compare_result = checkEquality_0010922b(function_ptr,*ptr_debug_type2,*ptr_debug_type1), compare_result == '\\0'))\n            goto LAB_00109382;\n            ptr_value8 = ptr_value8 + 1;\n          }\n          if (*ptr_value8 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptr_ptr3 = (char **)*ptr_debug_type2, ptr_ptr3 != (char **)0x0; ptr_debug_type2 = ptr_debug_type2 + 1) {\n          ptr_ptr2 = (char **)*ptr_value5;\n          if (ptr_ptr2 == (char **)0x0) goto LAB_00109382;\n          ptr_char1 = *ptr_ptr2;\n          ptr_char2 = *ptr_ptr3;\n          if ((*ptr_char2 != *ptr_char1) ||\n             ((((ulong)ptr_ptr3[2] ^ (ulong)ptr_ptr2[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptr_ptr3 + 0x14) == '\\0') {\n            if (ptr_ptr3[3] == ptr_ptr2[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          compare_result2 = strcmp(ptr_ptr3[3],ptr_ptr2[3]);\n          if (compare_result2 != 0) goto LAB_00109382;\nLAB_00109480:\n          compare_result2 = strcmp(ptr_char2,ptr_char1);\n          if (((compare_result2 != 0) || (ptr_ptr3[1] == (char *)0x0)) || (ptr_ptr2[1] == (char *)0x0))\n          goto LAB_00109382;\n          debug_type1 = debug_get_real_type_isra_0(ptr_ptr2[1],0);\n          debug_type2 = debug_get_real_type_isra_0(ptr_ptr3[1],0);\n          compare_result = checkEquality_0010922b(function_ptr,debug_type2,debug_type1);\n          if (compare_result == '\\0') goto LAB_00109382;\n          ptr_value5 = ptr_value5 + 1;\n        }\n        if (*ptr_value5 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr_value4 = (long *)arg1[2];\n    ptr_value9 = (long *)arg2[2];\n    if (ptr_value4 == (long *)0x0) {\n      result = ptr_value9 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_value9 == (long *)0x0) goto LAB_00109382;\n    offset2 = *ptr_value4;\n    ptr_value1 = *ptr_value9;\n    offset = 0;\n    ptr_value2 = ptr_value4[1];\n    ptr_value3 = ptr_value9[1];\n    do {\n      ptr_char1 = *(char **)(offset2 + offset);\n      if (ptr_char1 == (char *)0x0) {\n        result = *(long *)(ptr_value1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      ptr_char2 = *(char **)(ptr_value1 + offset);\n      if (((ptr_char2 == (char *)0x0) || (*ptr_char1 != *ptr_char2)) ||\n         (*(long *)(ptr_value2 + offset) != *(long *)(ptr_value3 + offset))) break;\n      compare_result2 = strcmp(ptr_char1,ptr_char2);\n      offset = offset + 8;\n    } while (compare_result2 == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = checkEquality_0010922b(function_ptr,arg1[2],arg2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)arg1[2] + 2) == *(char *)((undefined8 *)arg2[2] + 2)) &&\n       (compare_result = checkEquality_0010922b(function_ptr,*(undefined8 *)arg1[2],*(undefined8 *)arg2[2]),\n       compare_result != '\\0')) {\n      ptr_value4 = *(long **)(arg1[2] + 8);\n      ptr_value9 = *(long **)(arg2[2] + 8);\n      if ((ptr_value4 == (long *)0x0) == (ptr_value9 == (long *)0x0)) {\n        if (ptr_value4 == (long *)0x0) goto LAB_001097af;\n        while (((*ptr_value4 != 0 && (*ptr_value9 != 0)) &&\n               (compare_result = checkEquality_0010922b(function_ptr), compare_result != '\\0'))) {\n          ptr_value4 = ptr_value4 + 1;\n          ptr_value9 = ptr_value9 + 1;\n        }\nLAB_0010995d:\n        if (*ptr_value4 != 0) goto LAB_00109964;\n        result = *ptr_value9 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr_debug_type2 = (undefined8 *)arg2[2];\n    ptr_debug_type1 = (undefined8 *)arg1[2];\n    result = 0;\n    if ((ptr_debug_type1[1] == ptr_debug_type2[1]) && (ptr_debug_type1[2] == ptr_debug_type2[2])) {\nLAB_00109862:\n      result = checkEquality_0010922b(function_ptr,*ptr_debug_type1,*ptr_debug_type2);\n    }\n    break;\n  case 0x10:\n    ptr_debug_type2 = (undefined8 *)arg2[2];\n    ptr_debug_type1 = (undefined8 *)arg1[2];\n    result = 0;\n    if (((ptr_debug_type1[2] == ptr_debug_type2[2]) && (ptr_debug_type1[3] == ptr_debug_type2[3])) &&\n       (*(char *)(ptr_debug_type1 + 4) == *(char *)(ptr_debug_type2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr_debug_type2 = (undefined8 *)arg2[2];\n    ptr_debug_type1 = (undefined8 *)arg1[2];\n    result = 0;\n    if (*(char *)(ptr_debug_type1 + 1) == *(char *)(ptr_debug_type2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    compare_result = checkEquality_0010922b(function_ptr,*(undefined8 *)arg1[2],*(undefined8 *)arg2[2]);\n    result = 0;\n    if (compare_result != '\\0') {\n      result = checkEquality_0010922b(function_ptr,*(undefined8 *)(arg1[2] + 8),*(undefined8 *)(arg2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)arg1[2] + 3) == *(char *)((undefined8 *)arg2[2] + 3)) &&\n        (compare_result = checkEquality_0010922b(function_ptr,*(undefined8 *)arg1[2],*(undefined8 *)arg2[2]),\n        compare_result != '\\0')) &&\n       (compare_result = checkEquality_0010922b(function_ptr,*(undefined8 *)(arg1[2] + 8),\n                              *(undefined8 *)(arg2[2] + 8)), compare_result != '\\0')) {\n      ptr_value4 = *(long **)(arg1[2] + 0x10);\n      ptr_value9 = *(long **)(arg2[2] + 0x10);\n      if ((ptr_value4 == (long *)0x0) == (ptr_value9 == (long *)0x0)) {\n        if (ptr_value4 != (long *)0x0) {\n          while (((*ptr_value4 != 0 && (*ptr_value9 != 0)) &&\n                 (compare_result = checkEquality_0010922b(function_ptr), compare_result != '\\0'))) {\n            ptr_value4 = ptr_value4 + 1;\n            ptr_value9 = ptr_value9 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr_value4 = (long *)arg2[2];\n    ptr_value9 = (long *)arg1[2];\n    compare_result2 = strcmp(*(char **)(*ptr_value9 + 8),*(char **)(*ptr_value4 + 8));\n    result = 0;\n    if (compare_result2 == 0) {\n      result = checkEquality_0010922b(function_ptr,ptr_value9[1],ptr_value4[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(function_ptr + 0x58) = ptr_list;\n  return result;\ncode_r0x00109263:\n  arg1 = **(long ***)arg1[2];\n  ptr_value4 = arg1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "debug_type_samep",
                "debug_get_real_type.isra.0",
                "abort",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "debug_type_samep",
                "debug_set_class_id.lto_priv.0"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "FUN_00104900": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "copy_file",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104900"
        },
        "FUN_00104908": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104908"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_archive_001052a2",
                "param_3": "file_path",
                "cVar1": "character",
                "iVar2": "counter",
                "iVar3": "status",
                "ppcVar4": "file_path",
                "lVar5": "length",
                "uVar6": "errorMessage",
                "__format": "messageFormat",
                "puVar7": "tempDir",
                "piVar8": "errnoLocation",
                "uVar9": "translatedErrorMessage",
                "in_RAX": "filePathPointer",
                "pcVar10": "currentChar",
                "lVar12": "archiveSize",
                "pvVar13": "allocatedMemory",
                "pcVar14": "closeFunction",
                "lVar15": "tempSize",
                "pcVar16": "currentChar2",
                "psVar17": "fileStat",
                "unaff_R14": "tempFile",
                "unaff_R15": "currentFile",
                "bVar18": "flag",
                "unaff_retaddr": "returnAddress",
                "in_stack_00000008": "inputFilePointer",
                "in_stack_00000010": "currentFilePointer",
                "in_stack_00000018": "tempDirPath",
                "in_stack_00000020": "archivedFile",
                "in_stack_00000028": "openMode",
                "in_stack_00000030": "flag2",
                "in_stack_000000f8": "permission",
                "in_stack_00000110": "archiveSize"
            },
            "code": "\nvoid extractArchive_001052a2(undefined8 param_1,undefined8 param_2,char *file_path)\n\n{\n  char character;\n  int counter;\n  int status;\n  char **file_path;\n  long length;\n  undefined8 errorMessage;\n  char *messageFormat;\n  undefined8 *tempDir;\n  int *errnoLocation;\n  undefined8 translatedErrorMessage;\n  long filePathPointer;\n  char *currentChar;\n  char **ppcharacter1;\n  long archiveSize;\n  void *allocatedMemory;\n  code *closeFunction;\n  long tempSize;\n  char *currentChar2;\n  stat *fileStat;\n  undefined8 *tempFile;\n  char **currentFile;\n  byte flag;\n  undefined8 returnAddress;\n  undefined8 *inputFilePointer;\n  long *currentFilePointer;\n  char *tempDirPath;\n  undefined8 *archivedFile;\n  undefined8 openMode;\n  undefined8 flag2;\n  uint permission;\n  long archiveSize;\n  \n  flag = 0;\n  currentChar = (char *)(filePathPointer + 1);\n  do {\n    if (*currentChar == '/') {\n      extractArchive_001052a2();\n      return;\n    }\n    while (*currentChar == '\\0') {\n      currentChar = (char *)concat(tempDirPath,&DAT_0011b47d);\n      status = stat(currentChar,(stat *)&stack0x00000050);\n      tempDir = tempFile;\n      if (-1 < status) {\n        archiveSize = make_tempdir(currentChar);\n        free(currentChar);\n        if (archiveSize == 0) {\n          errnoLocation = __errno_location();\n          currentChar = strerror(*errnoLocation);\n          translatedErrorMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(translatedErrorMessage,currentChar);\n          goto LAB_00104e93;\n        }\n        tempDir = (undefined8 *)xmalloc(0x18);\n        currentChar = *currentFile;\n        *tempDir = tempFile;\n        tempDir[2] = 0;\n        tempDir[1] = archiveSize;\n        currentChar = (char *)concat(archiveSize,&DAT_0011b47d,currentChar);\n      }\n      status = 0;\n      if (preserve_dates != '\\0') {\n        fileStat = (stat *)&stack0x00000050;\n        for (archiveSize = 0x24; archiveSize != 0; archiveSize = archiveSize + -1) {\n          *(undefined4 *)&fileStat->st_dev = 0;\n          fileStat = (stat *)((long)fileStat + (ulong)flag * -8 + 4);\n        }\n        ppcharacter1 = (char **)currentFile[0x1d];\n        if ((char **)currentFile[0x1d] == (char **)0x0) {\n          ppcharacter1 = currentFile;\n        }\n        status = (**(code **)(ppcharacter1[1] + 0x1e8))(currentFile,(stat *)&stack0x00000050);\n        if (status != 0) {\n          currentChar2 = *currentFile;\n          translatedErrorMessage = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(translatedErrorMessage,currentChar2);\n        }\n      }\n      tempFile = (undefined8 *)xmalloc(0x18);\n      tempFile[1] = currentChar;\n      *tempFile = tempDir;\n      tempFile[2] = 0;\n      character = bfd_check_format(currentFile,1);\n      if (character == '\\0') {\n        translatedErrorMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n        bfd_nonfatal_message(0,currentFile,0,translatedErrorMessage);\n        ppcharacter1 = (char **)bfd_openw(currentChar,openMode);\n        if (ppcharacter1 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        file_path = (char **)currentFile[0x1d];\n        if ((char **)currentFile[0x1d] == (char **)0x0) {\n          file_path = currentFile;\n        }\n        counter = (**(code **)(file_path[1] + 0x1e8))(currentFile,&stack0x000000e0);\n        archiveSize = archiveSize;\n        if (counter == 0) {\n          if (archiveSize < 0) {\n            translatedErrorMessage = bfd_get_archive_filename(currentFile);\n            errorMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            non_fatal(errorMessage,translatedErrorMessage);\n          }\n          else {\n            counter = bfd_seek(currentFile,0,0);\n            if (counter == 0) {\n              if (verbose != '\\0') {\n                currentChar2 = *ppcharacter1;\n                translatedErrorMessage = bfd_get_archive_filename(currentFile);\n                messageFormat = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(messageFormat,translatedErrorMessage,currentChar2);\n              }\n              allocatedMemory = (void *)xmalloc(0x2000);\n              for (; archiveSize != 0; archiveSize = archiveSize - tempSize) {\n                tempSize = 0x2000;\n                if (archiveSize < 0x2001) {\n                  tempSize = archiveSize;\n                }\n                length = bfd_bread(allocatedMemory,tempSize,currentFile);\n                file_path = currentFile;\n                if ((tempSize != length) ||\n                   (length = bfd_bwrite(allocatedMemory,tempSize,ppcharacter1), file_path = ppcharacter1, tempSize != length\n                   )) {\n                  bfd_nonfatal_message(0,file_path,0,0);\n                  free(allocatedMemory);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*ppcharacter1,permission | 0x100);\n              free(allocatedMemory);\n              character = bfd_close_all_done(ppcharacter1);\n              if (character == '\\0') {\n                bfd_nonfatal_message(currentChar,0,0,0);\n                status = 1;\n              }\n              goto LAB_00114a86;\n            }\n            translatedErrorMessage = bfd_get_archive_filename(currentFile);\n            bfd_nonfatal(translatedErrorMessage);\n          }\n        }\n        else {\n          bfd_nonfatal_message(0,currentFile,0,0);\n        }\nLAB_00104f00:\n        character = bfd_close_all_done(ppcharacter1);\n        if (character == '\\0') {\n          bfd_nonfatal_message(currentChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentChar);\n        status = 1;\n      }\n      else {\n        if (flag2._7_1_ == '\\0') {\n          ppcharacter1 = (char **)bfd_openw(currentChar,*(undefined8 *)currentFile[1]);\n        }\n        else {\n          ppcharacter1 = (char **)bfd_openw(currentChar,openMode);\n        }\n        if (ppcharacter1 == (char **)0x0) {\nLAB_00104e80:\n          bfd_nonfatal_message(currentChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        character = copy_object(currentFile,ppcharacter1,returnAddress);\n        if (character == '\\0') {\n          counter = bfd_get_arch(currentFile);\n          if (counter == 0) goto LAB_00104d75;\n          character = bfd_close_all_done(ppcharacter1);\n          if (character == '\\0') {\n            bfd_nonfatal_message(currentChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        character = bfd_close(ppcharacter1);\n        if (character == '\\0') {\n          bfd_nonfatal_message(currentChar,0,0,0);\n          status = 1;\n        }\nLAB_00114a86:\n        if ((preserve_dates != '\\0') && (status == 0)) {\n          set_times(currentChar,(stat *)&stack0x00000050);\n        }\n        archiveSize = bfd_openr(currentChar,openMode);\n        tempFile[2] = archiveSize;\n        *currentFilePointer = archiveSize;\n        currentFilePointer = (long *)(archiveSize + 0xf0);\n        ppcharacter1 = (char **)bfd_openr_next_archived_file(archivedFile,currentFile);\n        bfd_close(currentFile);\n        currentFile = ppcharacter1;\n      }\n      if ((status != 0) || (currentFile == (char **)0x0)) {\n        *currentFilePointer = 0;\n        allocatedMemory = (void *)xstrdup(*inputFilePointer);\n        if (status == 0) {\n          closeFunction = bfd_close;\n        }\n        else {\n          closeFunction = bfd_close_all_done;\n        }\n        character = (*closeFunction)(inputFilePointer);\n        if (character == '\\0') {\n          status = 1;\n          bfd_nonfatal_message(allocatedMemory,0,0,0);\n        }\n        free(allocatedMemory);\n        allocatedMemory = (void *)xstrdup(*archivedFile);\n        character = bfd_close(archivedFile);\n        if (character == '\\0') {\n          status = 1;\n          bfd_nonfatal_message(allocatedMemory,0,0,0);\n        }\n        free(allocatedMemory);\n        goto LAB_00114b4b;\n      }\n      currentChar = *currentFile;\n      file_path = currentChar;\n      if (*currentChar == '/') goto LAB_0010527d;\n    }\n    currentChar2 = currentChar;\n    if ((*currentChar == '.') && (currentChar2 = currentChar + 1, currentChar[1] == '.')) {\n      currentChar2 = currentChar + 2;\n      if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) {\nLAB_0010527d:\n        translatedErrorMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(translatedErrorMessage,file_path);\nLAB_00104e93:\n        status = 1;\nLAB_00114b4b:\n        while (tempFile != (undefined8 *)0x0) {\n          if (tempFile[2] == 0) {\n            rmdir((char *)tempFile[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)tempFile[1]);\n          }\n          free((void *)tempFile[1]);\n          tempDir = (undefined8 *)*tempFile;\n          free(tempFile);\n          tempFile = tempDir;\n        }\n        rmdir(tempDirPath);\n        free(tempDirPath);\n        return;\n      }\n    }\n    for (; (currentChar = currentChar2, *currentChar2 != '\\0' && (*currentChar2 != '/')); currentChar2 = currentChar2 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_archive_001052a2"
        },
        "FUN_001041b0": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001041b0"
        },
        "FUN_001043f0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "stab_context",
                "list_matching_formats",
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_001043f0"
        },
        "FUN_001042d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001042d0"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "update_symbol_table_0010e453",
                "param_1": "address",
                "param_2": "name",
                "param_3": "dependencies",
                "lVar1": "length",
                "cVar2": "status",
                "sVar3": "size",
                "__s": "formattedString",
                "uVar4": "result",
                "lVar5": "totalSize",
                "ppcVar6": "dependency",
                "lVar7": "index"
            },
            "code": "\nundefined8 updateSymbolTable_0010e453(long address,char *name,char **dependencies)\n\n{\n  long length;\n  char status;\n  size_t size;\n  undefined2 *formattedString;\n  undefined8 result;\n  long totalSize;\n  char **dependency;\n  long index;\n  \n  if (dependencies == (char **)0x0) {\n    if (name != (char *)0x0) {\n      size = strlen(name);\n      formattedString = (undefined2 *)xmalloc(size + 10);\n      sprintf((char *)formattedString,\"xe%s:\",name);\nLAB_0010e578:\n      status = stab_push_string(address,formattedString,0,0,4);\n      if (status != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    result = 0;\n  }\n  else {\n    totalSize = 10;\n    dependency = dependencies;\n    if (name != (char *)0x0) {\n      size = strlen(name);\n      totalSize = size + 10;\n    }\n    for (; *dependency != (char *)0x0; dependency = dependency + 1) {\n      size = strlen(*dependency);\n      totalSize = totalSize + 0x14 + size;\n    }\n    formattedString = (undefined2 *)xmalloc(totalSize);\n    if (name == (char *)0x0) {\n      *formattedString = 0x65;\n      totalSize = 0;\n    }\n    else {\n      totalSize = *(long *)(address + 0x68);\n      *(long *)(address + 0x68) = totalSize + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",name,totalSize);\n    }\n    index = 0;\n    while( true ) {\n      length = *(long *)((long)dependencies + index);\n      size = strlen((char *)formattedString);\n      if (length == 0) break;\n      index = index + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + size),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + size) = 0x3b;\n    if (name == (char *)0x0) goto LAB_0010e578;\n    status = stab_write_symbol_lto_priv_0(address,0x80,0,0,formattedString);\n    if ((status == '\\0') || (status = stab_push_defined_type(address,totalSize,4), status == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_table_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "param_1": "input",
                "lVar1": "structIndex",
                "uVar2": "result"
            },
            "code": "\nundefined8 pushDefinedType_00109d5c(undefined8 input)\n\n{\n  long structIndex;\n  undefined8 result;\n  \n  structIndex = stab_get_struct_index();\n  if (-1 < structIndex) {\n    result = stab_push_defined_type(input,structIndex,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "stab_get_struct_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_symbol_info_0010ed2c",
                "param_1": "symbol_info",
                "param_2": "new_size",
                "param_3": "extra_input",
                "cVar1": "success",
                "iVar2": "count",
                "uVar3": "return_value",
                "in_R10": "input_register",
                "auVar4": "output_array"
            },
            "code": "\nundefined  [16] update_symbol_info_0010ed2c(long symbol_info,ulong new_size,undefined8 extra_input)\n\n{\n  char success;\n  int count;\n  undefined8 extraout_RDX;\n  ulong return_value;\n  undefined8 input_register;\n  undefined output_array [16];\n  \n  if (*(ulong *)(symbol_info + 0x1f0) < new_size) {\n    *(ulong *)(symbol_info + 0x1f0) = new_size;\n  }\n  if (*(long *)(symbol_info + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(symbol_info + 0x1f8) != 0) {\n      count = *(int *)(symbol_info + 0x1f8) + -1;\n      return_value = CONCAT71((int7)((ulong)extra_input >> 8),1);\n      *(int *)(symbol_info + 0x1f8) = count;\n      if (count != 0) {\n        output_array = stab_write_symbol_lto_priv_0\n                           (symbol_info,0xe0,0,new_size - *(long *)(symbol_info + 0x200),0,input_register);\n        return output_array;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    success = stab_write_symbol_lto_priv_0(symbol_info,0xc0,0,*(long *)(symbol_info + 0x208),0);\n    if (success != '\\0') {\n      *(undefined8 *)(symbol_info + 0x208) = 0xffffffffffffffff;\n      extra_input = extraout_RDX;\n      goto LAB_0010ed78;\n    }\n  }\n  return_value = 0;\nLAB_0010edae:\n  output_array._0_8_ = return_value & 0xffffffff;\n  output_array._8_8_ = input_register;\n  return output_array;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_info_0010ed2c"
        },
        "FUN_001284e8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284e8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001284e8"
        },
        "FUN_001283c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283c8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_001283c8"
        },
        "FUN_0010e451": {
            "renaming": {},
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_0010e451"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_and_select_0011a1b0",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "var3",
                "param_4": "var4",
                "uVar1": "value1",
                "uVar2": "value2",
                "iVar3": "result",
                "extraout_var": "extraOutVar",
                "uVar4": "combinedResult",
                "auVar5": "output"
            },
            "code": "\nundefined  [16] compareAndSelect_0011a1b0(ulong *ptr1,ulong *ptr2,undefined8 var3,undefined8 var4)\n\n{\n  ulong value1;\n  ulong value2;\n  int result;\n  undefined4 extraOutVar;\n  ulong combinedResult;\n  undefined output [16];\n  \n  combinedResult = *ptr1;\n  if (*ptr2 <= *ptr1) {\n    combinedResult = *ptr2;\n  }\n  result = memcmp((void *)(ptr1[3] + 3),(void *)(ptr2[3] + 3),combinedResult - 3);\n  combinedResult = CONCAT44(extraOutVar,result);\n  if (result == 0) {\n    value1 = ptr1[8];\n    if (value1 < ptr2[7]) {\n      combinedResult = 0xffffffff;\n    }\n    else {\n      value2 = ptr2[8];\n      if (value2 < ptr1[7]) {\n        combinedResult = 1;\n      }\n      else {\n        combinedResult = 0xffffffff;\n        if (ptr2[7] <= ptr1[7]) {\n          if (value2 < value1) {\n            combinedResult = 1;\n          }\n          else {\n            combinedResult = 0xffffffff;\n            if (value2 <= value1) {\n              if (ptr1[2] == 0x100) {\n                combinedResult = (ulong)-(uint)(ptr2[2] != 0x100);\n              }\n              else {\n                combinedResult = (ulong)(ptr2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  output._8_8_ = var4;\n  output._0_8_ = combinedResult;\n  return output;\n}\n\n",
            "called": [
                "memcmp",
                "compare_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_and_select_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "process_build_attributes_001163d0",
                "param_1": "param_elf_header",
                "param_2": "param_program_header",
                "param_3": "param_notes_size",
                "param_4": "param_notes",
                "uVar1": "result",
                "uVar2": "elf_header",
                "uVar3": "program_header",
                "uVar7": "message",
                "bVar4": "flag",
                "puVar5": "ptr",
                "iVar6": "comparison_result",
                "lVar8": "length",
                "__ptr": "reloc_buffer",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "uVar13": "temp5",
                "uVar14": "temp6",
                "uVar15": "temp7",
                "uVar16": "temp8",
                "puVar17": "notes_ptr",
                "puVar18": "temp_ptr",
                "cVar19": "char_val",
                "puVar20": "temp_ptr2",
                "iVar21": "iteration_count",
                "puVar22": "notes_ptr2",
                "puVar23": "temp_ptr",
                "puVar25": "temp_ptr3",
                "uVar24": "temp9",
                "__nmemb": "notes_count",
                "local_88": "local_variable_1",
                "uStack_80": "uStack_variable",
                "local_70": "local_variable_2",
                "local_68": "remaining_size",
                "local_60": "notes_array"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\nulong process_build_attributes_001163d0(undefined8 *param_elf_header,undefined8 *param_program_header,ulong param_notes_size,undefined *param_notes)\n\n{\n  ulong result;\n  undefined8 elf_header;\n  undefined8 program_header;\n  bool flag;\n  ulong *ptr;\n  int comparison_result;\n  undefined8 message;\n  long length;\n  void *reloc_buffer;\n  ulong temp1;\n  ulong temp2;\n  ulong temp3;\n  ulong temp4;\n  undefined *reloc_buffer_00;\n  ulong temp5;\n  ulong temp6;\n  ulong temp7;\n  ulong temp8;\n  ulong *notes_ptr;\n  undefined *temp_ptr;\n  char char_val;\n  undefined *temp_ptr2;\n  int iteration_count;\n  undefined *notes_ptr2;\n  ulong *temp_ptr;\n  ulong temp9;\n  size_t notes_count;\n  ulong *temp_ptr3;\n  byte bVar26;\n  ulong local_variable_1;\n  ulong uStack_variable;\n  ulong local_variable_2;\n  ulong remaining_size;\n  ulong *notes_array;\n  \n  bVar26 = 0;\n  length = bfd_get_reloc_upper_bound();\n  remaining_size = param_notes_size;\n  if (0 < length) {\n    reloc_buffer = (void *)xmalloc(length);\n    length = bfd_canonicalize_reloc(param_elf_header,param_program_header,reloc_buffer,isympp);\n    free(reloc_buffer);\n    if (length != 0) {\n      if (is_strip == 0) {\n        elf_header = *param_elf_header;\n        program_header = *param_program_header;\n        message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        non_fatal(message,elf_header,program_header);\n      }\n      notes_array = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  notes_array = (ulong *)xcalloc(param_notes_size / 0xc,0x48,param_notes_size % 0xc);\n  local_variable_1 = 0;\n  local_variable_2 = 0;\n  temp8 = param_notes_size;\n  temp7 = 0;\n  temp_ptr = notes_array;\n  temp6 = 0;\n  notes_ptr2 = param_notes;\n  while (0xb < temp8) {\n    temp2 = (**(code **)(param_elf_header[1] + 0x40))(notes_ptr2);\n    *temp_ptr = temp2;\n    temp2 = (**(code **)(param_elf_header[1] + 0x40))(notes_ptr2 + 4);\n    temp_ptr[1] = temp2;\n    temp3 = (**(code **)(param_elf_header[1] + 0x40))(notes_ptr2 + 8);\n    temp2 = *temp_ptr;\n    temp_ptr[2] = temp3;\n    temp4 = temp_ptr[1];\n    temp5 = temp2 + 3 & 0xfffffffffffffffc;\n    temp_ptr[6] = temp5;\n    if (temp4 != (temp4 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp3 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = temp5 + temp4 + 0xc;\n    if (temp8 < result) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp2 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    temp_ptr[3] = (ulong)(notes_ptr2 + 0xc);\n    temp_ptr[4] = (ulong)(notes_ptr2 + temp5 + 0xc);\n    temp8 = temp8 + (-0xc - (temp5 + temp4));\n    if (temp2 != 2) {\n      if (notes_ptr2[0xc] == '$') {\n        if ((notes_ptr2[0xd] == '\\x01') && (notes_ptr2[0xe] == '1')) {\n          temp8 = process_gnu_build_attributes_00116490();\n          return temp8;\n        }\n      }\n      else if ((((4 < temp2) && (notes_ptr2[0xc] == 'G')) && (notes_ptr2[0xd] == 'A')) &&\n              ((notes_ptr2[0xe] == '$' && (notes_ptr2[0xf] == '\\x01')))) {\n        if (notes_ptr2[0x10] == '2') {\n          temp8 = process_gnu_build_attributes_00116490();\n          return temp8;\n        }\n        if (notes_ptr2[0x10] == '3') {\n          temp8 = process_gnu_build_attributes_00116490();\n          return temp8;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp1 = temp7;\n    temp9 = temp6;\n    if (temp4 == 0) {\n      if (temp3 == 0x100) {\n        temp_ptr[7] = local_variable_1;\nLAB_001164af:\n        temp4 = temp6;\n        temp9 = temp6;\n      }\n      else {\n        temp_ptr[7] = local_variable_2;\nLAB_0011669e:\n        temp1 = temp7;\n        temp4 = temp7;\n      }\n    }\n    else {\n      if (temp4 != 0x10) {\n        if (temp4 < 0x11) {\n          if (temp4 == 4) {\n            temp3 = (**(code **)(param_elf_header[1] + 0x40))();\n            temp4 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp4 == 8) {\n            temp8 = FUNC_001086af();\n            return temp8;\n          }\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      temp3 = (**(code **)(param_elf_header[1] + 0x28))(notes_ptr2 + temp5 + 0xc);\n      temp4 = (**(code **)(param_elf_header[1] + 0x28))();\n      if (temp4 < temp3) {\n        temp3 = temp4;\n      }\nLAB_00116631:\n      if (temp_ptr[2] == 0x100) {\n        if (temp3 == 0) {\n          temp3 = local_variable_1;\n        }\n        temp2 = *temp_ptr;\n        temp_ptr[7] = temp3;\n        temp9 = temp4;\n        local_variable_1 = temp3;\n        if (temp4 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp3 == 0) {\n          temp3 = local_variable_2;\n        }\n        temp2 = *temp_ptr;\n        temp_ptr[7] = temp3;\n        temp1 = temp4;\n        local_variable_2 = temp3;\n        if (temp4 == 0) goto LAB_0011669e;\n      }\n    }\n    temp_ptr[8] = temp4;\n    if (*(char *)((temp_ptr[3] - 1) + temp2) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    temp_ptr = temp_ptr + 9;\n    temp7 = temp1;\n    temp6 = temp9;\n    notes_ptr2 = notes_ptr2 + result;\n  }\n  if (temp8 == 0) {\n    elf_header = *param_elf_header;\n    program_header = *param_program_header;\n    message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    non_fatal(message,elf_header,program_header);\n    notes_count = ((long)temp_ptr - (long)notes_array >> 3) * -0x71c71c71c71c71c7;\n    qsort(notes_array,notes_count,0x48,compare_gnu_build_notes);\n    for (notes_ptr = notes_array; notes_ptr < temp_ptr; notes_ptr = notes_ptr + 9) {\n      temp8 = notes_ptr[2];\n      if (temp8 != 0) {\n        temp7 = notes_ptr[7];\n        temp6 = notes_ptr[8];\n        temp_ptr3 = notes_ptr;\n        iteration_count = 0;\n        if (temp7 == temp6) {\n          notes_ptr[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr = temp_ptr3;\n              temp_ptr3 = ptr + -9;\n              if (temp_ptr3 < notes_array) goto LAB_001167f5;\n              temp2 = ptr[-7];\n            } while (temp2 == 0);\n            if ((*temp_ptr3 != *notes_ptr) ||\n               (comparison_result = memcmp((void *)ptr[-6],(void *)notes_ptr[3],*notes_ptr), comparison_result != 0)) break;\n            temp4 = ptr[-2];\n            temp3 = ptr[-1];\n            if (temp7 == temp4) {\n              if (temp6 == temp3) {\n                notes_ptr[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (temp6 <= temp3) {\n                notes_ptr[2] = 0;\n                break;\n              }\n              if (temp3 < temp7) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < temp3) || (temp7 <= (temp3 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_build_notes_00116852;\n              }\nLAB_001167b8:\n              if ((temp8 == 0x101) == (temp2 == 0x101)) {\n                if (temp3 <= temp6) {\n                  temp3 = temp6;\n                }\n                if (temp4 < temp7) {\n                  temp7 = temp4;\n                }\n                ptr[-1] = temp3;\n                ptr[-2] = temp7;\n                notes_ptr[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp4 <= temp7) goto LAB_001167a6;\n              if (temp3 < temp7) goto LAB_0010852c;\n              if (temp6 < temp7) {\n                if ((0xfffffffffffffff0 < temp6) || (temp4 <= (temp6 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_build_notes_00116852;\n                goto LAB_001167b8;\n              }\n              if (temp6 != temp3) goto LAB_001167b8;\n            }\nprocess_build_notes_00116852:\n            flag = iteration_count < 0x11;\n            iteration_count = iteration_count + 1;\n          } while (flag);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(notes_array,notes_count,0x48,sort_gnu_build_notes);\n    reloc_buffer_00 = (undefined *)xmalloc(param_notes_size * 2);\n    uStack_variable = 0;\n    local_variable_2 = 0;\n    notes_ptr2 = reloc_buffer_00;\n    for (notes_ptr = notes_array; notes_ptr < temp_ptr; notes_ptr = notes_ptr + 9) {\n      if (notes_ptr[2] != 0) {\n        temp_ptr = notes_ptr2 + 0xc;\n        if ((notes_ptr[7] == local_variable_2) && (notes_ptr[8] == uStack_variable)) {\n          (**(code **)(param_elf_header[1] + 0x50))(*notes_ptr,notes_ptr2);\n          (**(code **)(param_elf_header[1] + 0x50))(0,notes_ptr2 + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(notes_ptr[2],notes_ptr2 + 8);\n          temp7 = notes_ptr[6];\n          temp8 = *notes_ptr;\n          notes_ptr2 = (undefined *)notes_ptr[3];\n          temp_ptr2 = temp_ptr;\n          for (temp6 = temp8; temp6 != 0; temp6 = temp6 - 1) {\n            *temp_ptr2 = *notes_ptr2;\n            notes_ptr2 = notes_ptr2 + (ulong)bVar26 * -2 + 1;\n            temp_ptr2 = temp_ptr2 + (ulong)bVar26 * -2 + 1;\n          }\n          if (temp8 < temp7) {\n            for (length = temp7 - temp8; length != 0; length = length + -1) {\n              *temp_ptr2 = 0;\n              temp_ptr2 = temp_ptr2 + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          notes_ptr2 = temp_ptr + temp7;\n        }\n        else {\n          (**(code **)(param_elf_header[1] + 0x50))();\n          if (*(int *)(param_elf_header[1] + 8) == 5) {\n            char_val = (*(char *)(param_elf_header[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_val = '\\b';\n          }\n          (**(code **)(param_elf_header[1] + 0x50))(char_val,notes_ptr2 + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(notes_ptr[2],notes_ptr2 + 8);\n          temp8 = *notes_ptr;\n          notes_ptr2 = (undefined *)notes_ptr[3];\n          temp_ptr2 = temp_ptr;\n          for (temp7 = temp8; temp7 != 0; temp7 = temp7 - 1) {\n            *temp_ptr2 = *notes_ptr2;\n            notes_ptr2 = notes_ptr2 + (ulong)bVar26 * -2 + 1;\n            temp_ptr2 = temp_ptr2 + (ulong)bVar26 * -2 + 1;\n          }\n          temp7 = notes_ptr[6];\n          if (temp8 < temp7) {\n            for (length = temp7 - temp8; length != 0; length = length + -1) {\n              *temp_ptr2 = 0;\n              temp_ptr2 = temp_ptr2 + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          length = param_elf_header[1];\n          temp_ptr = temp_ptr + temp7;\n          notes_ptr2 = temp_ptr + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(param_elf_header[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(notes_ptr[7],temp_ptr);\n            (**(code **)(param_elf_header[1] + 0x38))(notes_ptr[8],notes_ptr2);\n            notes_ptr2 = temp_ptr + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(notes_ptr[7],temp_ptr);\n            (**(code **)(param_elf_header[1] + 0x50))(notes_ptr[8],temp_ptr + 4);\n          }\n          local_variable_2 = notes_ptr[7];\n          uStack_variable = notes_ptr[8];\n        }\n      }\n    }\n    temp7 = (long)notes_ptr2 - (long)reloc_buffer_00;\n    temp8 = temp7;\n    notes_ptr2 = reloc_buffer_00;\n    remaining_size = param_notes_size;\n    if (temp7 < param_notes_size) {\n      for (; remaining_size = temp7, temp8 != 0; temp8 = temp8 - 1) {\n        *param_notes = *notes_ptr2;\n        notes_ptr2 = notes_ptr2 + (ulong)bVar26 * -2 + 1;\n        param_notes = param_notes + (ulong)bVar26 * -2 + 1;\n      }\n    }\n    free(reloc_buffer_00);\n  }\n  else {\n    length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      bfd_set_error(0x11);\n      bfd_nonfatal_message(0,param_elf_header,param_program_header,length);\n      status = 1;\n    }\n  }\nLAB_001166f8:\n  free(notes_array);\n  return remaining_size;\n}\n\n",
            "called": [
                "non_fatal",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "xcalloc",
                "bfd_get_reloc_upper_bound",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_build_attributes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_stripped_usage_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "localizedString"
            },
            "code": "\nvoid printStrippedUsage_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *localizedString;\n  \n  programName = program_name;\n  localizedString = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,localizedString,programName);\n  localizedString = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  list_supported_targets(program_name,outputFile);\n  if (exitCode == 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "list_supported_targets",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_stripped_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_data_00108c86",
                "param_1": "data_ptr",
                "cVar1": "startsWithLTO",
                "iVar2": "result",
                "sVar3": "length",
                "puVar4": "new_string",
                "lVar5": "offset",
                "__s": "input_string",
                "__s1": "arch_name",
                "puVar6": "new_string_ptr",
                "uVar7": "returnValue",
                "bVar8": "byte_val"
            },
            "code": "\nundefined8 extract_data_00108c86(long *data_ptr)\n\n{\n  char startsWithLTO;\n  int result;\n  size_t length;\n  undefined2 *new_string;\n  long offset;\n  char *input_string;\n  char *arch_name;\n  undefined2 *new_string_ptr;\n  undefined8 returnValue;\n  byte byte_val;\n  \n  byte_val = 0;\n  offset = *data_ptr;\n  input_string = (char *)(offset + 4);\n  startsWithLTO = startswith_lto_priv_0_lto_priv_0(input_string,&DAT_0011b73b);\n  if (startsWithLTO == '\\0') {\n    startsWithLTO = startswith_lto_priv_0_lto_priv_0(input_string,\"bsdrv-\");\n    if (startsWithLTO == '\\0') {\n      startsWithLTO = startswith_lto_priv_0_lto_priv_0(input_string,\"rtdrv-\");\n      if (startsWithLTO == '\\0') {\n        return 0xffffffff;\n      }\n      input_string = (char *)(offset + 6);\n      returnValue = 0xc;\n    }\n    else {\n      input_string = (char *)(offset + 6);\n      returnValue = 0xb;\n    }\n  }\n  else {\n    returnValue = 10;\n  }\n  length = strlen(input_string);\n  new_string = (undefined2 *)xmalloc(length + 8);\n  arch_name = input_string + 4;\n  new_string_ptr = new_string;\n  for (offset = length + 1; offset != 0; offset = offset + -1) {\n    *(char *)new_string_ptr = *input_string;\n    input_string = input_string + (ulong)byte_val * -2 + 1;\n    new_string_ptr = (undefined2 *)((long)new_string_ptr + (ulong)byte_val * -2 + 1);\n  }\n  *(undefined *)(new_string + 1) = 0x69;\n  *new_string = 0x6570;\n  result = strcmp(arch_name,\"ia32\");\n  if (result == 0) {\n    *(undefined *)((long)new_string + 7) = 0x36;\n    *(undefined2 *)((long)new_string + 5) = 0x3833;\n  }\n  else {\n    result = strcmp(arch_name,\"x86_64\");\n    if (result == 0) {\n      *(undefined *)((long)new_string + 7) = 0x2d;\n    }\n    else {\n      result = strcmp(arch_name,\"aarch64\");\n      if (result == 0) {\n        *(undefined8 *)((long)new_string + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *data_ptr = (long)new_string;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "startswith.lto_priv.0.lto_priv.0",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_data_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_args",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "FUN_00104910": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00104910"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_bfd_001053d5",
                "unaff_R12": "filePointer",
                "unaff_R14": "bfdPointer"
            },
            "code": "\nundefined4 closeBFD_001053d5(void)\n\n{\n  long filePointer;\n  undefined8 *bfdPointer;\n  \n  bfd_nonfatal(*bfdPointer);\n  *(undefined4 *)(filePointer + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(filePointer + 8);\n}\n\n",
            "called": [
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "close_bfd_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "validate_copy_flags_00104bba",
                "in_EAX": "eaxFlag",
                "uVar1": "errorMessage",
                "unaff_EBP": "ebpFlag",
                "unaff_R14": "r14Offset",
                "dcgettext": "getErrorMessage",
                "fatal": "printFatalError"
            },
            "code": "\nvoid validateCopyFlags_00104bba(void)\n\n{\n  uint eaxFlag;\n  undefined8 errorMessage;\n  uint ebpFlag;\n  long r14Offset;\n  \n  if ((eaxFlag & 2) != 0) {\n    errorMessage = getErrorMessage(0,\"error: %s both copied and removed\",5);\n                    \n    printFatalError(errorMessage);\n  }\n  if ((((eaxFlag & 8) == 0) || ((ebpFlag & 0x10) == 0)) && ((ebpFlag & 0x18) != 0x18)) {\n    if ((((eaxFlag & 0x20) == 0) || ((ebpFlag & 0x40) == 0)) && ((ebpFlag & 0x60) != 0x60)) {\n      *(uint *)(r14Offset + 0x14) = eaxFlag | ebpFlag;\n      return;\n    }\n    errorMessage = getErrorMessage(0,\"error: %s both sets and alters LMA\",5);\n                    \n    printFatalError(errorMessage);\n  }\n  errorMessage = getErrorMessage(0,\"error: %s both sets and alters VMA\",5);\n                    \n  printFatalError(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "find_section_list"
            ],
            "imported": false,
            "current_name": "validate_copy_flags_00104bba"
        },
        "FUN_001040a0": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "debug_type_samep",
                "stab_demangle_v3_arg",
                "stab_class_method_var",
                "stab_variable.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0",
                "stab_struct_field.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "display_info.isra.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001040a0"
        },
        "FUN_00104918": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "merge_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104918"
        },
        "FUN_001042e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001042e0"
        },
        "FUN_001283b0": {
            "renaming": {},
            "code": "\n\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fchmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b0",
            "calling": [
                "fchmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b0"
        },
        "FUN_001041c0": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001041c0"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "sourceLength",
                "puVar1": "destination",
                "lVar2": "remainingLength",
                "puVar3": "currentDestination",
                "bVar4": "increment"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int sourceLength)\n\n{\n  undefined *destination;\n  long remainingLength;\n  undefined *currentDestination;\n  byte increment;\n  \n  increment = 0;\n  destination = (undefined *)xmalloc((long)(sourceLength + 1));\n  currentDestination = destination;\n  for (remainingLength = (long)sourceLength; remainingLength != 0; remainingLength = remainingLength + -1) {\n    *currentDestination = *source;\n    source = source + (ulong)increment * -2 + 1;\n    currentDestination = currentDestination + (ulong)increment * -2 + 1;\n  }\n  destination[sourceLength] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slotPointer",
                "param_2": "slotIndex",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "errorMessage",
                "plVar2": "newSlotPointer",
                "lVar3": "shiftedSlotIndex",
                "lVar4": "tempVar",
                "uVar5": "tempIndex",
                "bVar6": "flag",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocateAndInitializeSlots_0010da0b(long **slotPointer,ulong slotIndex,undefined8 arg3,undefined8 arg4)\n\n{\n  undefined8 errorMessage;\n  long *newSlotPointer;\n  long shiftedSlotIndex;\n  long tempVar;\n  ulong tempIndex;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  tempIndex = slotIndex;\n  if ((long)slotIndex < 0x3e90) {\n    for (; 0xf < (long)tempIndex; tempIndex = tempIndex - 0x10) {\n      if (*slotPointer == (long *)0x0) {\n        newSlotPointer = (long *)xmalloc(0x88);\n        *slotPointer = newSlotPointer;\n        for (shiftedSlotIndex = 0x22; shiftedSlotIndex != 0; shiftedSlotIndex = shiftedSlotIndex + -1) {\n          *(undefined4 *)newSlotPointer = 0;\n          newSlotPointer = (long *)((long)newSlotPointer + (ulong)flag * -8 + 4);\n        }\n      }\n      slotPointer = (long **)*slotPointer;\n    }\n    shiftedSlotIndex = (slotIndex >> 4) * -0x10;\n    if ((long)slotIndex < 0) {\n      shiftedSlotIndex = 0;\n    }\n    if (*slotPointer == (long *)0x0) {\n      newSlotPointer = (long *)xmalloc(0x88);\n      *slotPointer = newSlotPointer;\n      for (tempVar = 0x22; tempVar != 0; tempVar = tempVar + -1) {\n        *(undefined4 *)newSlotPointer = 0;\n        newSlotPointer = (long *)((long)newSlotPointer + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = arg4;\n    result._0_8_ = *slotPointer + slotIndex + shiftedSlotIndex + 1;\n    return result;\n  }\n  errorMessage = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(errorMessage,slotIndex);\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_memory_00112894",
                "param_1": "data",
                "param_2": "byteValue",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "puVar1": "memoryBlock",
                "puVar2": "currentBlock",
                "lVar3": "loopCounter",
                "bVar4": "offset",
                "xmalloc": "allocateMemory"
            },
            "code": "\nundefined8 *\ninitializeMemory_00112894(undefined8 data,undefined byteValue,undefined8 param3Value,undefined8 param4Value)\n\n{\n  undefined8 *memoryBlock;\n  undefined8 *currentBlock;\n  long loopCounter;\n  byte offset;\n  \n  offset = 0;\n  memoryBlock = (undefined8 *)allocateMemory(0x1b0);\n  currentBlock = memoryBlock;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)currentBlock = 0;\n    currentBlock = (undefined8 *)((long)currentBlock + (ulong)offset * -8 + 4);\n  }\n  *memoryBlock = data;\n  *(undefined *)(memoryBlock + 1) = byteValue;\n  memoryBlock[2] = param3Value;\n  memoryBlock[3] = param4Value;\n  *(undefined4 *)(memoryBlock + 0x10) = 1;\n  currentBlock = (undefined8 *)allocateMemory(8);\n  memoryBlock[0xd] = 0xffffffffffffffff;\n  memoryBlock[0x11] = currentBlock;\n  *currentBlock = 0;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_00109b2f",
                "param_1": "input",
                "__ptr": "dataPtr",
                "puVar1": "returnValue"
            },
            "code": "\nundefined8 * extractAndFree_00109b2f(long input)\n\n{\n  undefined8 *dataPtr;\n  undefined8 *returnValue;\n  \n  dataPtr = *(undefined8 **)(input + 0x60);\n  if (dataPtr != (undefined8 *)0x0) {\n    returnValue = (undefined8 *)dataPtr[1];\n    *(undefined8 *)(input + 0x60) = *dataPtr;\n    free(dataPtr);\n    return returnValue;\n  }\n  return dataPtr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "stab_class_baseclass.lto_priv.0",
                "stab_modify_type",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extract_and_free_00109b2f"
        },
        "FUN_001283b8": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b8",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b8"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_redefinition_00108d9a",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "ppcVar1": "dynamic_string_array",
                "pcVar2": "duplicate_symbol",
                "lVar3": "symbol_index",
                "uVar4": "message",
                "plVar5": "slot_ptr",
                "redefine_specific_htab": "symbol_htab",
                "redefine_specific_reverse_htab": "reverse_symbol_htab"
            },
            "code": "\nundefined8 check_redefinition_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **dynamic_string_array;\n  char *duplicate_symbol;\n  long symbol_index;\n  undefined8 message;\n  long *slot_ptr;\n  \n  dynamic_string_array = (char **)xmalloc(0x10);\n  duplicate_symbol = strdup(symbol_name);\n  *dynamic_string_array = duplicate_symbol;\n  duplicate_symbol = strdup(target_symbol);\n  message = symbol_htab;\n  dynamic_string_array[1] = duplicate_symbol;\n  symbol_index = htab_find(message,dynamic_string_array);\n  if (symbol_index != 0) {\n    message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    fatal(message,error_message,symbol_name);\n  }\n  symbol_index = htab_find(reverse_symbol_htab,target_symbol);\n  if (symbol_index != 0) {\n    message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    fatal(message,error_message,target_symbol);\n  }\n  slot_ptr = (long *)htab_find_slot(symbol_htab,dynamic_string_array,1);\n  message = reverse_symbol_htab;\n  *slot_ptr = (long)dynamic_string_array;\n  duplicate_symbol = dynamic_string_array[1];\n  dynamic_string_array = (char **)htab_find_slot(message,duplicate_symbol,1);\n  *dynamic_string_array = duplicate_symbol;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "strdup",
                "htab_find_slot",
                "htab_find",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "write_symbol_0010e9a0",
                "param_1": "data",
                "param_2": "inputString",
                "param_3": "symbolType",
                "param_4": "symbolOffset",
                "__s": "symbol",
                "__s_00": "newSymbol",
                "sVar3": "inputLength",
                "sVar4": "symbolLength",
                "__s_01": "finalString",
                "pcVar5": "symbolChar",
                "uVar6": "symbolValue",
                "lVar1": "symbolCounter",
                "_sch_istable": "characterTable"
            },
            "code": "\nundefined4 writeSymbol_0010e9a0(long data,char *inputString,undefined4 symbolType,undefined8 symbolOffset)\n\n{\n  long symbolCounter;\n  undefined4 uVar2;\n  byte *symbol;\n  byte *newSymbol;\n  size_t inputLength;\n  size_t symbolLength;\n  char *finalString;\n  char *symbolChar;\n  undefined8 symbolValue;\n  \n  symbol = (byte *)stab_pop_type();\n  switch(symbolType) {\n  case 1:\n    symbolChar = \"G\";\n    symbolValue = 0x20;\n    break;\n  case 2:\n    symbolChar = \"S\";\n    symbolValue = 0x26;\n    break;\n  case 3:\n    symbolChar = \"V\";\n    symbolValue = 0x26;\n    break;\n  case 4:\n    symbolChar = \"\";\n    symbolValue = 0x80;\n    if (((&characterTable)[(ulong)*symbol * 2] & 4) == 0) {\n      symbolCounter = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = symbolCounter + 1;\n      inputLength = strlen((char *)symbol);\n      newSymbol = (byte *)xmalloc(inputLength + 0x14);\n      sprintf((char *)newSymbol,\"%ld=%s\",symbolCounter,symbol);\n      free(symbol);\n      symbol = newSymbol;\n    }\n    break;\n  case 5:\n    symbolChar = \"r\";\n    symbolValue = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  inputLength = strlen(inputString);\n  symbolLength = strlen((char *)symbol);\n  finalString = (char *)xmalloc(inputLength + 3 + symbolLength);\n  sprintf(finalString,\"%s:%s%s\",inputString,symbolChar,symbol);\n  free(symbol);\n  uVar2 = stab_write_symbol_lto_priv_0(data,symbolValue,0,symbolOffset,finalString);\n  if ((char)uVar2 != '\\0') {\n    free(finalString);\n  }\n  return uVar2;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_0010e9a0"
        },
        "FUN_001042f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001042f0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_section_error_0010827b",
                "uVar1": "section",
                "uVar2": "errorMessage",
                "unaff_RBX": "sectionPointer"
            },
            "code": "\nvoid printSectionError_0010827b(void)\n\n{\n  undefined8 section;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  \n  section = *sectionPointer;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  fatal(errorMessage,section);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "print_section_error_0010827b"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "check_and_fatal_error_00104920",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid checkAndFatalError_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "check_and_fatal_error_00104920"
        },
        "FUN_00104800": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "stab_context",
                "bfd_nonfatal_message",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104800"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "compareString",
                "xcalloc": "allocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  createHashTable(0x10,hashString,compareString,0,allocateMemory,deallocateMemory);\n  return;\n}\n\n",
            "called": [
                "free",
                "htab_eq_string",
                "htab_create_alloc",
                "htab_hash_string",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "FUN_001283e8": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283e8",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_001283e8"
        },
        "FUN_001282c0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282c0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_001282c0"
        },
        "FUN_001281a0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281a0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001281a0"
        },
        "FUN_001041d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001041d0"
        },
        "FUN_001040b0": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "set_times.cold",
                "simple_copy.cold",
                "smart_rename.cold",
                "main",
                "parse_number",
                "get_file_size.cold",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "simple_copy",
                "section_add_load_file.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_001040b0"
        },
        "FUN_00116aa0": {
            "renaming": {
                "FUN_00116aa0": "start_main_loop_00116aa0",
                "param_1": "unused_param",
                "param_2": "stack_size",
                "auStack_8": "unused_stack",
                "__libc_start_main": "initialize",
                "main": "entryPoint"
            },
            "code": "\nvoid processEntry startMainLoop_00116aa0(undefined8 unused_param,undefined8 stack_size)\n\n{\n  undefined unused_stack [8];\n  \n  initialize(entryPoint,stack_size,&stack0x00000008,0,0,unused_param,unused_stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_loop_00116aa0"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "lVar1": "alignmentMessage",
                "lVar2": "groupSignature",
                "cVar3": "isAlignmentSuccessful",
                "lVar4": "errorString",
                "lVar5": "groupSignatureResult",
                "unaff_RBX": "inputPtr",
                "unaff_RBP": "inputPtrBackup",
                "unaff_R12": "groupPtr",
                "unaff_R14B": "isAlignmentRequired",
                "unaff_R15": "outputPtr"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long alignmentMessage;\n  long groupSignature;\n  char isAlignmentSuccessful;\n  long errorString;\n  long groupSignatureResult;\n  long inputPtr;\n  long inputPtrBackup;\n  long groupPtr;\n  char isAlignmentRequired;\n  long outputPtr;\n  \n  errorString = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(outputPtr + 0xb4) = *(undefined4 *)(inputPtr + 0xb4);\n  *(byte *)(outputPtr + 0x28) =\n       *(byte *)(outputPtr + 0x28) & 0xcf | *(byte *)(inputPtr + 0x28) & 0x30;\n  *(long *)(inputPtr + 0x60) = outputPtr;\n  *(undefined8 *)(inputPtr + 0x58) = 0;\n  if ((*(byte *)(inputPtr + 0x27) & 2) != 0) {\n    alignmentMessage = *(long *)(inputPtr + 0xd0);\n    groupSignatureResult = group_signature_isra_0(alignmentMessage,*(undefined8 *)(inputPtr + 0xe0));\n    if ((groupSignatureResult != 0) &&\n       (groupSignature = *(long *)(groupPtr + 8), *(uint *)(groupSignatureResult + 0x18) = *(uint *)(groupSignatureResult + 0x18) | 0x20,\n       *(int *)(groupSignature + 8) == 5)) {\n      *(long *)(alignmentMessage + 0xb0) = groupSignatureResult;\n      isAlignmentSuccessful = (**(code **)(*(long *)(inputPtrBackup + 8) + 0x158))();\n      if (isAlignmentSuccessful == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  isAlignmentSuccessful = (**(code **)(*(long *)(inputPtrBackup + 8) + 0x158))();\n  if (isAlignmentSuccessful == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (isAlignmentRequired != '\\0') {\n    *(undefined4 *)(*(long *)(outputPtr + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010808f",
                "dcgettext",
                "group_signature.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "setup_section.cold"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "process_file_00109022",
                "param_1": "fileData",
                "param_2": "type",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "typeIndex",
                "pcVar2": "errorMsg",
                "plVar3": "result",
                "lVar4": "loopCounter",
                "uVar5": "fileIndex",
                "pplVar6": "filePtr",
                "bVar7": "loopCondition",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16] processFile_00109022(long fileData,uint *type,undefined8 arg1,undefined8 arg2)\n\n{\n  uint typeIndex;\n  char *errorMsg;\n  long *result;\n  long loopCounter;\n  uint fileIndex;\n  long **filePtr;\n  byte loopCondition;\n  undefined returnValue [16];\n  \n  loopCondition = 0;\n  fileIndex = *type;\n  typeIndex = type[1];\n  if (((int)fileIndex < 0) || (*(uint *)(fileData + 0x80) <= fileIndex)) {\n    errorMsg = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)fileIndex);\n  }\n  else {\n    if (-1 < (int)typeIndex) {\n      filePtr = (long **)(*(long *)(fileData + 0x88) + (long)(int)fileIndex * 8);\n      for (fileIndex = typeIndex; 0xf < (int)fileIndex; fileIndex = fileIndex - 0x10) {\n        if (*filePtr == (long *)0x0) {\n          result = (long *)xmalloc(0x88);\n          *filePtr = result;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)result = 0;\n            result = (long *)((long)result + (ulong)loopCondition * -8 + 4);\n          }\n        }\n        filePtr = (long **)*filePtr;\n      }\n      if (*filePtr == (long *)0x0) {\n        result = (long *)xmalloc(0x88);\n        *filePtr = result;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)result = 0;\n          result = (long *)((long)result + (ulong)loopCondition * -8 + 4);\n        }\n      }\n      result = *filePtr + (long)(int)((typeIndex >> 4) * -0x10 + typeIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorMsg = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)typeIndex);\n  }\n  result = (long *)0x0;\nLAB_00109117:\n  returnValue._8_8_ = arg2;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "parse_stab_type",
                "stab_find_type"
            ],
            "imported": false,
            "current_name": "process_file_00109022"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "process_debug_record_0010c05d",
                "param_1": "filePointer",
                "param_2": "variableId",
                "param_3": "namespaceId",
                "param_4": "debugFlag",
                "param_5": "messagePointer",
                "param_6": "returnValue",
                "auVar1": "temp1",
                "uVar2": "result",
                "piVar3": "intArrayPointer",
                "cVar4": "temp2",
                "lVar5": "loopCount",
                "lVar6": "currentFile",
                "piVar7": "intPointer",
                "bVar8": "temp3",
                "auVar9": "returnObject"
            },
            "code": "\n\n\nundefined  [16]\nprocessDebugRecord_0010c05d(long filePointer,long variableId,ulong namespaceId,int debugFlag,undefined8 messagePointer,\n            undefined8 returnValue)\n\n{\n  undefined temp1 [16];\n  undefined8 result;\n  int *intArrayPointer;\n  char temp2;\n  long loopCount;\n  long currentFile;\n  int *intPointer;\n  byte temp3;\n  undefined returnObject [16];\n  \n  temp3 = 0;\n  if (variableId == 0) {\n    temp1._8_8_ = 0;\n    temp1._0_8_ = namespaceId;\n    return temp1 << 0x40;\n  }\n  if (namespaceId != 0) {\n    if ((*(long *)(filePointer + 8) == 0) || (currentFile = *(long *)(filePointer + 0x10), currentFile == 0)) {\n      result = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      if (debugFlag - 1U < 2) {\n        currentFile = currentFile + 0x10;\n        temp2 = (debugFlag == 1) + '\\x01';\n      }\n      else if (*(long *)(filePointer + 0x20) == 0) {\n        currentFile = currentFile + 0x10;\n        temp2 = '\\0';\n      }\n      else {\n        currentFile = *(long *)(filePointer + 0x20) + 0x28;\n        temp2 = '\\0';\n      }\n      currentFile = debug_add_to_namespace_constprop_0(currentFile,variableId,2,temp2);\n      if (currentFile != 0) {\n        intArrayPointer = (int *)xmalloc(0x18);\n        intPointer = intArrayPointer + 1;\n        for (loopCount = 5; loopCount != 0; loopCount = loopCount + -1) {\n          *intPointer = 0;\n          intPointer = intPointer + (ulong)temp3 * -2 + 1;\n        }\n        *intArrayPointer = debugFlag;\n        result = 1;\n        *(ulong *)(intArrayPointer + 2) = namespaceId;\n        *(undefined8 *)(intArrayPointer + 4) = messagePointer;\n        *(int **)(currentFile + 0x20) = intArrayPointer;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  result = 0;\nLAB_0010c12e:\n  returnObject._8_8_ = returnValue;\n  returnObject._0_8_ = result;\n  return returnObject;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "stab_record_variable",
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0",
                "stab_emit_pending_vars"
            ],
            "imported": false,
            "current_name": "process_debug_record_0010c05d"
        },
        "FUN_001041e0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_001041e0"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "process_parameter_00109d97",
                "param_1": "input",
                "local_40": "formattedString",
                "lVar1": "count"
            },
            "code": "\nvoid processParameter_00109d97(long input)\n\n{\n  long count;\n  char formattedString [40];\n  \n  if (*(long *)(input + 0x70) != 0) {\n    stab_push_defined_type(input,*(long *)(input + 0x70),0);\n    return;\n  }\n  count = *(long *)(input + 0x68);\n  *(long *)(input + 0x68) = count + 1;\n  sprintf(formattedString,\"%ld=%ld\",count,count);\n  stab_push_string(input,formattedString,count,0,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_parameter_00109d97"
        },
        "FUN_001284f0": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284f0",
            "calling": [
                "main",
                "create_symbol_htab",
                "free"
            ],
            "imported": false,
            "current_name": "FUN_001284f0"
        },
        "FUN_00104810": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104810"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "FUNC_001086af"
            },
            "code": "\nulong FUNC_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *unaff_R12;\n  ulong unaff_R13;\n  ulong uVar20;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *param_14;\n  \n  bVar22 = 0;\n  param_7 = in_RCX;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n  uVar10 = (**(code **)(unaff_R14[1] + 0x40))(unaff_R12[4] + 4);\nLAB_0011662a:\n  uVar13 = unaff_RBP;\n  uVar20 = unaff_R13;\n  if (uVar10 < uVar9) {\n    uVar9 = uVar10;\n  }\n  do {\n    uVar11 = param_7;\n    uVar12 = param_7;\n    puVar15 = unaff_R12;\n    if (unaff_R12[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = unaff_retaddr;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar13;\n      unaff_R13 = uVar10;\n      unaff_retaddr = uVar9;\n      if (uVar10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = param_9;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar10;\n      unaff_R13 = uVar20;\n      param_9 = uVar9;\n      if (uVar10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = uVar10;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12 = puVar15 + 9;\n    if (unaff_RBX < 0xc) {\n      if (unaff_RBX != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *unaff_R14;\n      uVar3 = *param_14;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)unaff_R12 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,__nmemb,0x48,compare_gnu_build_notes);\n      puVar15 = param_11;\n      goto LAB_001167f9;\n    }\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12);\n    *unaff_R12 = uVar10;\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = uVar10;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 8);\n    uVar14 = *unaff_R12;\n    puVar15[0xb] = uVar9;\n    uVar10 = puVar15[10];\n    uVar13 = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = uVar13;\n    if (uVar10 != (uVar10 + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = uVar13 + uVar10 + 0xc;\n    if (unaff_RBX < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + uVar13;\n    puVar15[0xd] = uVar1;\n    unaff_RBX = unaff_RBX + (-0xc - (uVar13 + uVar10));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          uVar10 = process_gnu_build_attributes_00116490();\n          return uVar10;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          uVar10 = process_gnu_build_attributes_00116490();\n          return uVar10;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          uVar10 = process_gnu_build_attributes_00116490();\n          return uVar10;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    uVar13 = unaff_RBP;\n    uVar20 = unaff_R13;\n    if (uVar10 == 0) {\n      if (uVar9 == 0x100) {\n        puVar15[0x10] = unaff_retaddr;\nLAB_001164af:\n        uVar12 = uVar11;\n        uVar10 = uVar20;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      else {\n        puVar15[0x10] = param_9;\nLAB_0011669e:\n        unaff_RBP = uVar13;\n        uVar12 = uVar11;\n        uVar10 = uVar13;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      goto LAB_001164bb;\n    }\n    if (uVar10 == 0x10) break;\n    if (0x10 < uVar10) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        bfd_nonfatal_message(0,unaff_R14,param_14,lVar7);\n        status = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (uVar10 != 4) {\n      if (uVar10 == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = uVar11;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n    uVar10 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = uVar11;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x28))(uVar1);\n  uVar10 = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_R12 <= puVar15) {\n    qsort(param_11,__nmemb,0x48,sort_gnu_build_notes);\n    __ptr = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    puVar19 = __ptr;\n    for (puVar15 = param_11; puVar15 < unaff_R12; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == param_9) && (puVar15[8] == param_7)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(unaff_R14[1] + 0x50))(0,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar9 = puVar15[6];\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + uVar9;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            cVar17 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          uVar9 = puVar15[6];\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = unaff_R14[1];\n          puVar16 = puVar16 + uVar9;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          param_9 = puVar15[7];\n          param_7 = puVar15[8];\n        }\n      }\n    }\n    uVar9 = (long)puVar19 - (long)__ptr;\n    uVar10 = uVar9;\n    puVar19 = __ptr;\n    if (uVar9 < param_10) {\n      for (; param_10 = uVar9, uVar10 != 0; uVar10 = uVar10 - 1) {\n        *in_stack_00000030 = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (puVar15[2] != 0) {\n    uVar10 = puVar15[7];\n    uVar9 = puVar15[8];\n    uVar13 = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (uVar10 == uVar9) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < param_11) goto LAB_001167f5;\n          uVar20 = puVar5[-7];\n        } while (uVar20 == 0);\n        param_7 = uVar13;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        uVar13 = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (uVar10 == uVar13) {\n          if (uVar9 == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < uVar10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (uVar10 <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto process_build_notes_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (uVar20 == 0x101)) {\n            if (uVar11 <= uVar9) {\n              uVar11 = uVar9;\n            }\n            if (uVar13 < uVar10) {\n              uVar10 = uVar13;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = uVar10;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (uVar13 <= uVar10) goto LAB_001167a6;\n          if (uVar11 < uVar10) goto LAB_0010852c;\n          if (uVar9 < uVar10) {\n            if ((0xfffffffffffffff0 < uVar9) || (uVar13 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto process_build_notes_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != uVar11) goto LAB_001167b8;\n        }\nprocess_build_notes_00116852:\n        bVar4 = iVar23 < 0x11;\n        uVar13 = param_7;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "bfd_set_error",
                "dcgettext",
                "non_fatal",
                "qsort",
                "compare_gnu_build_notes",
                "bfd_nonfatal_message",
                "merge_gnu_build_notes.cold",
                "FUN_00116490"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "FUNC_001086af"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_class_method_variable_0010add5"
            },
            "code": "\nvoid initializeClassMethodVariable_0010add5(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_method_variable_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_debug_type_constprop_00113e17"
            },
            "code": "\nvoid initializeDebugTypeConstprop_00113e17(void)\n\n{\n  debug_make_type_constprop_0(2,0);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_constprop_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "create_memory_block_00109b52",
                "param_1": "memoryManager",
                "param_2": "sourceString",
                "param_3": "dataPointer",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "tempVar1",
                "puVar2": "newBlock",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined createMemoryBlock_00109b52(long memoryManager,undefined8 sourceString,undefined8 dataPointer,undefined flag,\n                      undefined4 value)\n\n{\n  undefined8 tempVar1;\n  undefined8 *newBlock;\n  undefined8 duplicatedString;\n  \n  newBlock = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(sourceString);\n  newBlock[2] = dataPointer;\n  *(undefined (*) [16])(newBlock + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newBlock + 6) = ZEXT816(0);\n  tempVar1 = *(undefined8 *)(memoryManager + 0x60);\n  *(undefined *)((long)newBlock + 0x1c) = flag;\n  *(undefined4 *)(newBlock + 3) = value;\n  *(undefined8 **)(memoryManager + 0x60) = newBlock;\n  *newBlock = tempVar1;\n  newBlock[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_memory_block_00109b52"
        },
        "FUN_001282b0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282b0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_001282b0"
        },
        "FUN_001040c0": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040c0"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_unsigned_integer_00109a32",
                "param_1": "input_string",
                "param_2": "overflow_flag",
                "param_3": "end_pointer",
                "param_4": "unused_parameter_4",
                "param_5": "unused_parameter_5",
                "__nptr": "current_ptr",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nparse_unsigned_integer_00109a32(char **input_string,undefined *overflow_flag,char *end_pointer,undefined8 unused_parameter_4,undefined8 unused_parameter_5)\n\n{\n  char *current_ptr;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (overflow_flag != (undefined *)0x0) {\n    *overflow_flag = 0;\n  }\n  current_ptr = *input_string;\n  if ((current_ptr < end_pointer) && (*current_ptr != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_ptr,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (overflow_flag == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(current_ptr,error_message);\n    }\n    else {\n      *overflow_flag = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = unused_parameter_5;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "strtoul",
                "warn_stab",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "parse_stab_type",
                "parse_stab_type_number"
            ],
            "imported": false,
            "current_name": "parse_unsigned_integer_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "find_debug_type_0010c6be",
                "param_1": "filePtr",
                "param_2": "tagName",
                "param_3": "tagPtr",
                "iVar1": "comparisonResult",
                "uVar2": "translatedString",
                "piVar3": "newTagPtr",
                "pauVar4": "tagInfoPtr",
                "lVar5": "fileOffset",
                "pcVar6": "errorMessage"
            },
            "code": "\n\n\nint * findDebugType_0010c6be(long filePtr,char *tagName,int *tagPtr)\n\n{\n  int comparisonResult;\n  undefined8 translatedString;\n  int *newTagPtr;\n  undefined (*tagInfoPtr) [16];\n  long fileOffset;\n  char *errorMessage;\n  \n  if ((tagName != (char *)0x0) && (tagPtr != (int *)0x0)) {\n    if (*(long *)(filePtr + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tagPtr != 0x17) {\n        newTagPtr = (int *)debug_make_type_constprop_0(0x17,0);\n        if (newTagPtr == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tagInfoPtr = (undefined (*) [16])xmalloc(0x10);\n        fileOffset = *(long *)(filePtr + 0x10);\n        *tagInfoPtr = ZEXT816(0);\n        *(int **)(*tagInfoPtr + 8) = tagPtr;\n        *(undefined (**) [16])(newTagPtr + 4) = tagInfoPtr;\n        fileOffset = debug_add_to_namespace_constprop_0(fileOffset + 0x10,tagName,1,3);\n        if (fileOffset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(fileOffset + 0x20) = newTagPtr;\n        *(long *)*tagInfoPtr = fileOffset;\n        return newTagPtr;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(tagPtr + 4) + 8),tagName);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return tagPtr;\n      }\n    }\n    translatedString = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translatedString);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "find_debug_type_0010c6be"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "__ptr": "memory",
                "__format": "error_message",
                "lVar1": "result",
                "uVar2": "count",
                "uVar3": "capacity",
                "uVar4": "new_count",
                "local_39": "demangled_name"
            },
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *memory;\n  char *error_message;\n  long result;\n  ulong count;\n  ulong capacity;\n  uint new_count;\n  char demangled_name [9];\n  \n  capacity = 10;\n  count = 0;\n  memory = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(memory);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    result = stab_demangle_v3_arg(arg1,arg2,*(long *)(arglist + 4),0,demangled_name);\n    if (result == 0) {\n      if (demangled_name[0] == '\\0') {\n        free(memory);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      new_count = (int)count + 1;\n      if ((uint)capacity <= new_count) {\n        capacity = (ulong)((uint)capacity + 10);\n        memory = (void *)xrealloc(memory,capacity << 3);\n      }\n      *(long *)((long)memory + count * 8) = result;\n      count = (ulong)new_count;\n    }\n  }\n  *(undefined8 *)((long)memory + count * 8) = 0;\n  return memory;\n}\n\n",
            "called": [
                "stab_demangle_v3_arg",
                "fprintf",
                "dcgettext",
                "xrealloc",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_v3_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "update_section_info_0011a2e0",
                "param_1": "sectionInfo",
                "param_2": "binary",
                "uVar1": "sectionOffset",
                "uVar2": "errorMessage",
                "lVar3": "sectionInfoPtr",
                "lVar4": "sectionPtr"
            },
            "code": "\nlong updateSectionInfo_0011a2e0(long sectionInfo,long binary)\n\n{\n  undefined8 sectionOffset;\n  undefined8 errorMessage;\n  long sectionInfoPtr;\n  long sectionPtr;\n  \n  sectionInfoPtr = (**(code **)(*(long *)(binary + 8) + 0x208))(binary);\n  sectionPtr = *(long *)(sectionInfo + 0x20);\n  *(undefined8 *)(sectionInfoPtr + 8) = *(undefined8 *)(sectionInfo + 8);\n  *(undefined8 *)(sectionInfoPtr + 0x10) = *(undefined8 *)(sectionInfo + 0x10);\n  *(undefined4 *)(sectionInfoPtr + 0x18) = *(undefined4 *)(sectionInfo + 0x18);\n  if (sectionPtr == 0) {\n    sectionPtr = 0x128598;\n  }\n  else {\n    sectionPtr = bfd_get_section_by_name(binary);\n    if (sectionPtr == 0) {\n      sectionOffset = *(undefined8 *)(sectionInfo + 0x20);\n      errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n      fatal(errorMessage,sectionOffset);\n    }\n  }\n  *(long *)(sectionInfoPtr + 0x20) = sectionPtr;\n  return sectionInfoPtr;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "create_new_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_section_info_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "write_symbol_to_stab_0010e8a9",
                "param_1": "symbolName",
                "param_2": "symbolType",
                "param_3": "value",
                "uVar1": "result",
                "sVar2": "valueLength",
                "__s": "symbolString"
            },
            "code": "\nundefined4 writeSymbolToStab_0010e8a9(undefined8 symbolName,undefined8 symbolType,char *value)\n\n{\n  undefined4 result;\n  size_t valueLength;\n  char *symbolString;\n  \n  valueLength = strlen(value);\n  symbolString = (char *)xmalloc(valueLength + 0x14);\n  sprintf(symbolString,\"%s:c=f%g\",symbolName,value);\n  result = stab_write_symbol_lto_priv_0(symbolType,0x80,0,0,symbolString);\n  if ((char)result != '\\0') {\n    free(symbolString);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_stab_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "process_flags_00104ad6",
                "unaff_RBP": "currentFlag",
                "__s": "section",
                "sVar4": "sectionLength",
                "iVar1": "comparisonResult",
                "iVar5": "sectionNameLength",
                "unaff_R14D": "flags",
                "unaff_R15": "supportedFlags",
                "auVar6": "result",
                "unaff_retaddr": "returnAddress",
                "pcVar3": "commaPosition",
                "uVar2": "errorMessage",
                "xmalloc": "dynamicMemoryAllocationFunction",
                "dcgettext": "getLocalizedMessage",
                "non_fatal": "nonFatalError",
                "fatal": "fatalError"
            },
            "code": "\nundefined  [16] processFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 errorMessage;\n  char *commaPosition;\n  char *currentFlag;\n  char *section;\n  size_t sectionLength;\n  int sectionNameLength;\n  uint flags;\n  char *supportedFlags;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    flags = flags | 0x2000;\n    section = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (section == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = flags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              commaPosition = strchr(section,0x2c);\n              if (commaPosition == (char *)0x0) {\n                sectionLength = strlen(section);\n                sectionNameLength = (int)sectionLength;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = commaPosition + 1;\n                sectionNameLength = (int)commaPosition - (int)section;\n              }\n              sectionLength = (size_t)sectionNameLength;\n              comparisonResult = strncasecmp(supportedFlags,section,sectionLength);\n              if (comparisonResult != 0) break;\n              flags = flags | 1;\n              section = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",section,sectionLength);\n            if (comparisonResult != 0) break;\n            flags = flags | 2;\n            section = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",section,sectionLength);\n          if (comparisonResult != 0) break;\n          flags = flags | 0x200;\n          section = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",section,sectionLength);\n        if (comparisonResult != 0) break;\n        flags = flags | 8;\n        section = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",section,sectionLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",section,sectionLength);\n      if (comparisonResult == 0) {\n        flags = flags | 0x10;\n        section = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",section,sectionLength);\n        if (comparisonResult == 0) {\n          flags = flags | 0x20;\n          section = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",section,sectionLength);\n          if (comparisonResult == 0) {\n            flags = flags | 0x40;\n            section = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",section,sectionLength);\n            if (comparisonResult == 0) {\n              flags = flags | 0x8000;\n              section = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",section,sectionLength);\n              if (comparisonResult == 0) {\n                flags = flags | 0x8000000;\n                section = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",section,sectionLength);\n                if (comparisonResult == 0) {\n                  flags = flags | 0x100;\n                  section = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",section,sectionLength);\n                  if (comparisonResult == 0) {\n                    flags = flags | 0x800000;\n                    section = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",section,sectionLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)dynamicMemoryAllocationFunction((long)(sectionNameLength + 1));\n                      strncpy(commaPosition,section,sectionLength);\n                      commaPosition[sectionLength] = '\\0';\n                      errorMessage = getLocalizedMessage(0,\"unrecognized section flag `%s\\'\",5);\n                      nonFatalError(errorMessage,commaPosition);\n                      errorMessage = getLocalizedMessage(0,\"supported flags: %s\",5);\n                    \n                      fatalError(errorMessage,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    flags = flags | 0x1000000;\n                    section = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "parse_flags.cold",
                "strlen",
                "strchr",
                "strncpy",
                "dcgettext",
                "non_fatal",
                "strncasecmp",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "process_flags_00104ad6"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkRAXValue_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "check_rax_value_001087da"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilationUnit",
                "param_2": "typeName",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "currentUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errMsg",
                "puVar4": "ptr1",
                "lVar5": "ptr2",
                "puVar6": "ptr3",
                "auVar7": "resultArray"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long compilationUnit,char *typeName,undefined8 param3,undefined8 param4)\n\n{\n  long currentUnit;\n  int comparisonResult;\n  undefined8 errMsg;\n  undefined8 *ptr1;\n  long ptr2;\n  undefined8 *ptr3;\n  undefined resultArray [16];\n  \n  currentUnit = *(long *)(compilationUnit + 8);\n  if (currentUnit == 0) {\n    errMsg = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errMsg);\n  }\n  else {\n    for (ptr2 = *(long *)(compilationUnit + 0x20); ptr2 != 0; ptr2 = *(long *)(ptr2 + 8)) {\n      if (*(undefined8 **)(ptr2 + 0x28) != (undefined8 *)0x0) {\n        for (ptr1 = (undefined8 *)**(undefined8 **)(ptr2 + 0x28); ptr1 != (undefined8 *)0x0;\n            ptr1 = (undefined8 *)*ptr1) {\n          if (*(int *)((long)ptr1 + 0x14) == 0) {\n            if (*(char *)ptr1[1] == *typeName) {\n              comparisonResult = strcmp((char *)ptr1[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (ptr3 = *(undefined8 **)(currentUnit + 8); ptr3 != (undefined8 *)0x0;\n        ptr3 = (undefined8 *)*ptr3) {\n      if ((undefined8 *)ptr3[2] != (undefined8 *)0x0) {\n        for (ptr1 = *(undefined8 **)(undefined8 *)ptr3[2]; ptr1 != (undefined8 *)0x0;\n            ptr1 = (undefined8 *)*ptr1) {\n          if (*(int *)((long)ptr1 + 0x14) == 0) {\n            if (*(char *)ptr1[1] == *typeName) {\n              comparisonResult = strcmp((char *)ptr1[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errMsg = 0;\nLAB_00109223:\n  resultArray._8_8_ = param4;\n  resultArray._0_8_ = errMsg;\n  return resultArray;\nLAB_00109216:\n  errMsg = ptr1[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_001041f0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001041f0"
        },
        "FUN_001040d0": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040d0"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_ebp_value_0010829e",
                "unaff_EBP": "EBP_value",
                "uVar1": "result"
            },
            "code": "\nundefined8 check_EBP_value_0010829e(void)\n\n{\n  undefined8 result;\n  int EBP_value;\n  \n  if (EBP_value == 5) {\n    result = is_dwo_section_constprop_0();\n    return result;\n  }\n  if ((EBP_value != 4) && (EBP_value == 6)) {\n    result = invert_result_and_return_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "check_ebp_value_0010829e"
        },
        "FUN_001281c0": {
            "renaming": {},
            "code": "\n\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fnmatch@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281c0",
            "calling": [
                "fnmatch"
            ],
            "imported": false,
            "current_name": "FUN_001281c0"
        },
        "FUN_00104700": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104700"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_binary_metadata_00104943",
                "in_RAX": "inputString",
                "lVar3": "numericValue",
                "iVar1": "defaultValue",
                "iVar2": "archMachIndex",
                "sVar4": "archMachStringLength",
                "pcVar5": "archMachString",
                "uVar6": "printableArchMach",
                "iVar7": "archMachLoopIndex",
                "lVar8": "paramIndex",
                "iVar9": "totalParams",
                "unaff_R15D": "stackBufferSize",
                "uVar10": "stringLength",
                "uVar11": "archMachOffset",
                "param_7": "currentParamIndex",
                "uStack000000000000000c": "paramStringLength",
                "param_11": "archMachFormat",
                "param_13": "binaryMetadata"
            },
            "code": "\n\n\nvoid printReverseBinaryMetadata_00104943(void)\n\n{\n  int defaultValue;\n  int archMachIndex;\n  char *inputString;\n  long numericValue;\n  size_t archMachStringLength;\n  char *archMachString;\n  undefined8 printableArchMach;\n  int archMachLoopIndex;\n  long paramIndex;\n  int totalParams;\n  uint stackBufferSize;\n  ulong stringLength;\n  uint archMachOffset;\n  int currentParamIndex;\n  uint paramStringLength;\n  undefined8 archMachFormat;\n  long binaryMetadata;\n  \n  numericValue = strtol(inputString,(char **)0x0,10);\n  defaultValue = (int)numericValue;\n  totalParams = currentParamIndex;\n  paramStringLength = stackBufferSize;\n  if (defaultValue == 0) {\n    defaultValue = 0x50;\n  }\n  do {\n    currentParamIndex = totalParams;\n    if (archMachFormat._4_4_ <= currentParamIndex) {\n      return;\n    }\n    paramIndex = (long)currentParamIndex;\n    archMachLoopIndex = (defaultValue - paramStringLength) + -1;\n    numericValue = paramIndex;\n    do {\n      totalParams = (int)numericValue;\n      if (archMachFormat._4_4_ <= totalParams) break;\n      archMachStringLength = strlen(*(char **)(binaryMetadata + numericValue * 0x60));\n      numericValue = numericValue + 1;\n      archMachLoopIndex = (archMachLoopIndex - (int)archMachStringLength) + -1;\n    } while (-1 < archMachLoopIndex);\n    printf(\"\\n%*s\",(ulong)(paramStringLength + 1),&DAT_0011b4a1);\n    for (numericValue = paramIndex * 0x60; ((ulong)(uint)(totalParams - currentParamIndex) + paramIndex) * 0x60 - numericValue != 0;\n        numericValue = numericValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(binaryMetadata + numericValue));\n    }\n    archMachLoopIndex = 2;\n    putc(10,_stdout);\n    do {\n      archMachString = (char *)bfd_printable_arch_mach(archMachLoopIndex,0);\n      archMachIndex = strcmp(archMachString,\"UNKNOWN!\");\n      if (archMachIndex != 0) {\n        printableArchMach = bfd_printable_arch_mach(archMachLoopIndex,0);\n        printf(\"%*s \",(ulong)paramStringLength,printableArchMach);\n        archMachOffset = archMachLoopIndex - 2;\n        numericValue = paramIndex * 0x60;\n        archMachIndex = currentParamIndex;\n        while (totalParams != archMachIndex) {\n          archMachString = *(char **)(binaryMetadata + numericValue);\n          if (*(char *)((long)(char **)(binaryMetadata + numericValue) + (ulong)archMachOffset + 8) == '\\0') {\n            archMachStringLength = strlen(archMachString);\n            for (stringLength = archMachStringLength & 0xffffffff; (int)stringLength != 0; stringLength = (ulong)((int)stringLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archMachString,_stdout);\n          }\n          archMachIndex = archMachIndex + 1;\n          if (totalParams != archMachIndex) {\n            putc(0x20,_stdout);\n          }\n          numericValue = numericValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archMachLoopIndex = archMachLoopIndex + 1;\n    } while (archMachLoopIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "fputs",
                "printf",
                "putc",
                "bfd_printable_arch_mach",
                "strtol",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "print_reverse_binary_metadata_00104943"
        },
        "FUN_00104820": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104820"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_type_and_allocate_memory_00113e23",
                "param_1": "value1",
                "param_2": "value2",
                "lVar1": "typeAddress",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong createTypeAndAllocateMemory_00113e23(undefined8 value1,undefined8 value2)\n\n{\n  long typeAddress;\n  undefined8 *allocatedMemory;\n  \n  typeAddress = debug_make_type_constprop_0(1,0);\n  if (typeAddress != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = value1;\n    allocatedMemory[1] = value2;\n    *(undefined8 **)(typeAddress + 0x10) = allocatedMemory;\n  }\n  return typeAddress;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_type",
                "stab_find_tagged_type"
            ],
            "imported": false,
            "current_name": "create_type_and_allocate_memory_00113e23"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStab_00108fb9(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "parse_stab_type_number"
            ],
            "imported": false,
            "current_name": "print_bad_stab_00108fb9"
        },
        "FUN_001280a0": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a0",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_001280a0"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_integer_from_string_00108ea1",
                "param_1": "input_string",
                "param_2": "parsed_integer",
                "iVar1": "current_digit",
                "pbVar2": "input_pointer",
                "pbVar3": "next_char",
                "uVar4": "result"
            },
            "code": "\nulong parse_integer_from_string_00108ea1(byte **input_string,int *parsed_integer)\n\n{\n  int current_digit;\n  byte *input_pointer;\n  byte *next_char;\n  ulong result;\n  \n  input_pointer = *input_string;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*input_pointer * 2] & 4) != 0) {\n    next_char = input_pointer + 1;\n    current_digit = (char)*input_pointer + -0x30;\n    *parsed_integer = current_digit;\n    *input_string = next_char;\n    if (((&_sch_istable)[(ulong)input_pointer[1] * 2] & 4) != 0) {\n      do {\n        input_pointer = next_char;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*input_pointer;\n        next_char = input_pointer + 1;\n      } while (((&_sch_istable)[(ulong)input_pointer[1] * 2] & 4) != 0);\n      if (input_pointer[1] == 0x5f) {\n        next_char = input_pointer + 2;\n        *input_string = next_char;\n        *parsed_integer = current_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_char >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "parse_integer_from_string_00108ea1"
        },
        "FUN_001280a8": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a8",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_001280a8"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_section_size_00108072",
                "unaff_RBX": "sectionPtr",
                "unaff_RBP": "functionBasePtr",
                "unaff_R12": "groupBasePtr",
                "unaff_R14B": "isReversed",
                "unaff_R15": "sectionInfo",
                "bVar1": "byteVar",
                "uVar2": "uintVar",
                "cVar3": "charVar",
                "uVar4": "sizeVar",
                "lVar5": "gettextResult",
                "lVar6": "sectionListPtr",
                "lVar7": "offset",
                "lVar8": "change_section_address",
                "find_section_list": "findSectionList",
                "dcgettext": "getTranslatedText",
                "set_alignment_00108179": "setAlignment",
                "group_signature_isra_0": "getGroupSignature",
                "copy_private_data_0010808f": "copyPrivateData",
                "bfd_nonfatal_message": "printErrorMessage"
            },
            "code": "\nvoid setSectionSize_00108072(void)\n\n{\n  byte byteVar;\n  undefined8 uintVar;\n  char charVar;\n  uint sizeVar;\n  long gettextResult;\n  long sectionListPtr;\n  long offset;\n  undefined8 *sectionPtr;\n  long functionBasePtr;\n  long groupBasePtr;\n  long change_section_address;\n  char isReversed;\n  long sectionInfo;\n  \n  gettextResult = getTranslatedText(0,\"failed to set size\",5);\n  change_section_address = sectionPtr[6];\n  sectionListPtr = findSectionList(*sectionPtr,0,0x18);\n  if (sectionListPtr == 0) {\n    *(byte *)(sectionInfo + 0x28) = *(byte *)(sectionInfo + 0x28) | 1;\n    uintVar = *sectionPtr;\n    change_section_address = change_section_address + change_section_address;\n    *(long *)(sectionInfo + 0x30) = change_section_address;\n    *(long *)(sectionInfo + 0x38) = change_section_address;\n    change_section_address = sectionPtr[7];\n    sectionListPtr = findSectionList(uintVar,0,0x60);\n    if (sectionListPtr == 0) goto LAB_00115695;\nLAB_00115860:\n    offset = *(long *)(sectionListPtr + 0x20);\n    if ((*(byte *)(sectionListPtr + 0x14) & 0x40) != 0) {\n      offset = offset + change_section_address;\n    }\n    *(long *)(sectionInfo + 0x38) = offset;\n    change_section_address = findSectionList(*sectionPtr,0,0x200);\n    if (change_section_address != 0) goto LAB_00115889;\nLAB_001156b8:\n    sizeVar = *(uint *)((long)sectionPtr + 0x7c);\n    if (sizeVar < 0x3f) goto LAB_001156c4;\n    gettextResult = getTranslatedText(0,\"failed to set alignment\",5);\n    *(undefined4 *)(sectionInfo + 0xb4) = *(undefined4 *)((long)sectionPtr + 0xb4);\n    *(byte *)(sectionInfo + 0x28) =\n         *(byte *)(sectionInfo + 0x28) & 0xcf | *(byte *)(sectionPtr + 5) & 0x30;\n    sectionPtr[0xc] = sectionInfo;\n    sectionPtr[0xb] = 0;\n    byteVar = *(byte *)((long)sectionPtr + 0x27);\n  }\n  else {\n    offset = *(long *)(sectionListPtr + 0x18);\n    if ((*(byte *)(sectionListPtr + 0x14) & 8) == 0) {\n      offset = offset + change_section_address;\n    }\n    *(byte *)(sectionInfo + 0x28) = *(byte *)(sectionInfo + 0x28) | 1;\n    uintVar = *sectionPtr;\n    *(long *)(sectionInfo + 0x30) = offset;\n    *(long *)(sectionInfo + 0x38) = offset;\n    change_section_address = sectionPtr[7];\n    sectionListPtr = findSectionList(uintVar,0,0x60);\n    if (sectionListPtr != 0) goto LAB_00115860;\nLAB_00115695:\n    uintVar = *sectionPtr;\n    *(long *)(sectionInfo + 0x38) = change_section_address + change_section_address;\n    change_section_address = findSectionList(uintVar,0,0x200);\n    if (change_section_address == 0) goto LAB_001156b8;\nLAB_00115889:\n    sizeVar = *(uint *)(change_section_address + 0x2c);\n    if (0x3e < sizeVar) {\n      setAlignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(sectionInfo + 0x7c) = sizeVar;\n    *(undefined4 *)(sectionInfo + 0xb4) = *(undefined4 *)((long)sectionPtr + 0xb4);\n    *(byte *)(sectionInfo + 0x28) =\n         *(byte *)(sectionInfo + 0x28) & 0xcf | *(byte *)(sectionPtr + 5) & 0x30;\n    sectionPtr[0xc] = sectionInfo;\n    sectionPtr[0xb] = 0;\n    byteVar = *(byte *)((long)sectionPtr + 0x27);\n  }\n  if ((byteVar & 2) != 0) {\n    change_section_address = sectionPtr[0x1a];\n    sectionListPtr = getGroupSignature(change_section_address,sectionPtr[0x1c]);\n    if ((sectionListPtr != 0) &&\n       (offset = *(long *)(groupBasePtr + 8), *(uint *)(sectionListPtr + 0x18) = *(uint *)(sectionListPtr + 0x18) | 0x20,\n       *(int *)(offset + 8) == 5)) {\n      *(long *)(change_section_address + 0xb0) = sectionListPtr;\n      charVar = (**(code **)(*(long *)(functionBasePtr + 8) + 0x158))();\n      if (charVar == '\\0') {\n        copyPrivateData();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar = (**(code **)(*(long *)(functionBasePtr + 8) + 0x158))();\n  if (charVar == '\\0') {\n    copyPrivateData();\n    return;\n  }\nLAB_0011571e:\n  if (isReversed != '\\0') {\n    *(undefined4 *)(*(long *)(sectionInfo + 0xd0) + 4) = 8;\n  }\n  if (gettextResult != 0) {\n    status = 1;\n    printErrorMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "find_section_list",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "set_section_size_00108072"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "ptr_1",
                "param_4": "ptr_2",
                "cVar1": "char1",
                "__s": "string1",
                "sVar2": "strlen_result",
                "__s_00": "allocated_string",
                "lVar3": "counter",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16] process_data_0010a2b9(long data_ptr,char flag,undefined8 ptr_1,undefined8 ptr_2)\n\n{\n  char char1;\n  char *string1;\n  size_t strlen_result;\n  char *allocated_string;\n  long counter;\n  undefined return_value [16];\n  \n  char1 = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  strlen_result = strlen(string1);\n  allocated_string = (char *)xmalloc(strlen_result + 0x1e);\n  if (flag == '\\0') {\n    *allocated_string = '\\0';\n    counter = 0;\n    flag = char1;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(allocated_string,\"%ld=@S;\",counter);\n  }\n  strlen_result = strlen(allocated_string);\n  sprintf(allocated_string + strlen_result,\"S%s\",string1);\n  free(string1);\n  return_value._0_4_ = stab_push_string(data_ptr,allocated_string,counter,flag,0);\n  return_value._4_4_ = 0;\n  if ((char)return_value._0_4_ != '\\0') {\n    free(allocated_string);\n  }\n  return_value._8_8_ = ptr_2;\n  return return_value;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010a2b9"
        },
        "FUN_001040e0": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001040e0"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_001283f0": {
            "renaming": {},
            "code": "\n\n\n\nint access(char *__name,int __type)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* access@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f0",
            "calling": [
                "access"
            ],
            "imported": false,
            "current_name": "FUN_001283f0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_and_write_symbol_0010ec73",
                "param_1": "symbolArray",
                "param_2": "newValue",
                "param_3": "unused_1",
                "param_4": "unused_2",
                "param_5": "unused_3",
                "param_6": "unused_4",
                "iVar1": "count",
                "cVar2": "success"
            },
            "code": "\nundefined updateAndWriteSymbol_0010ec73(long *symbolArray,long newValue,undefined8 unused_1,undefined8 unused_2,\n                      undefined8 unused_3,undefined8 unused_4)\n\n{\n  int count;\n  char success;\n  \n  if (symbolArray[0x3c] != -1) {\n    (**(code **)(*(long *)(*symbolArray + 8) + 0x50))(newValue,symbolArray[1] + 8 + symbolArray[0x3c]);\n    symbolArray[0x3c] = -1;\n  }\n  if (symbolArray[0x3d] != -1) {\n    (**(code **)(*(long *)(*symbolArray + 8) + 0x50))(newValue,symbolArray[1] + 8 + symbolArray[0x3d]);\n    symbolArray[0x3d] = -1;\n  }\n  count = *(int *)(symbolArray + 0x3f);\n  *(int *)(symbolArray + 0x3f) = count + 1;\n  if (count == 0) {\n    symbolArray[0x40] = newValue;\n  }\n  else {\n    if ((symbolArray[0x41] != -1) &&\n       (success = stab_write_symbol_lto_priv_0(symbolArray,0xc0,0,symbolArray[0x41],0,unused_4,unused_2),\n       success == '\\0')) {\n      return 0;\n    }\n    symbolArray[0x41] = newValue - symbolArray[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_and_write_symbol_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endianness",
                "dcgettext": "translateMessage"
            },
            "code": "\nvoid getEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    translateMessage(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    translateMessage(0,\"little endian\",5);\n    return;\n  }\n  translateMessage(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00104830": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104830"
        },
        "FUN_00104710": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104710"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_delete_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "bufferSize",
                "param_4": "fileSize",
                "param_5": "setFileTimes",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "copySize",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndDeleteFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 bufferSize,undefined8 fileSize,char setFileTimes,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong copySize;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    copySize = 0;\n  }\n  else {\n    copyResult = simple_copy(bufferSize,destinationFilePath,fileSize);\n    copySize = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(errorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  if (setFileTimes != '\\0') {\n    set_times(destinationFilePath,fileSize);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = copySize;\n  return returnValue;\n}\n\n",
            "called": [
                "simple_copy",
                "smart_rename.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00115970"
        },
        "FUN_001283f8": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f8",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_001283f8"
        },
        "FUN_001282d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282d8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_001282d8"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_class_and_method_variables_0010adf2"
            },
            "code": "\nvoid initializeClassAndMethodVariables_0010adf2(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_and_method_variables_0010adf2"
        },
        "FUN_00104840": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "merge_gnu_build_notes",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00104840"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "demangle_and_remember_type_0010d7d4",
                "param_3": "output_buffer",
                "param_4": "output_buffer_size",
                "param_5": "used_output_buffer_size",
                "uVar1": "start_address",
                "cVar2": "result",
                "uVar3": "success",
                "lVar4": "current_buffer",
                "plVar5": "buffer_ptr",
                "uVar6": "current_output_size",
                "local_40": "local_buffer"
            },
            "code": "\nundefined4\ndemangle_and_remember_type_0010d7d4(undefined8 param_1,undefined8 *param_2,long *output_buffer,uint *output_buffer_size,uint *used_output_buffer_size)\n\n{\n  undefined8 start_address;\n  char result;\n  undefined4 success;\n  long current_buffer;\n  long *buffer_ptr;\n  uint current_output_size;\n  long local_buffer [2];\n  \n  start_address = *param_2;\n  buffer_ptr = local_buffer;\n  if (output_buffer == (long *)0x0) {\n    buffer_ptr = (long *)0x0;\n  }\n  result = stab_demangle_type_lto_priv_0(param_1,param_2,buffer_ptr);\n  if ((result != '\\0') &&\n     (success = stab_demangle_remember_type(param_1,start_address,(int)*param_2 - (int)start_address),\n     (char)success != '\\0')) {\n    if (output_buffer == (long *)0x0) {\n      return success;\n    }\n    if (local_buffer[0] != 0) {\n      if (*used_output_buffer_size <= *output_buffer_size + 1) {\n        current_output_size = *used_output_buffer_size + 10;\n        current_buffer = *output_buffer;\n        *used_output_buffer_size = current_output_size;\n        current_buffer = xrealloc(current_buffer,(ulong)current_output_size << 3);\n        *output_buffer = current_buffer;\n      }\n      current_output_size = *output_buffer_size;\n      *(long *)(*output_buffer + (ulong)current_output_size * 8) = local_buffer[0];\n      *output_buffer_size = current_output_size + 1;\n      return success;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_remember_type",
                "xrealloc",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "stab_demangle_args"
            ],
            "imported": false,
            "current_name": "demangle_and_remember_type_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "fileName",
                "iVar1": "status",
                "piVar2": "errorCode",
                "uVar3": "errorMessage",
                "pcVar4": "errorDescription",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong checkFile_00113f50(char *fileName)\n\n{\n  int status;\n  int *errorCode;\n  undefined8 errorMessage;\n  char *errorDescription;\n  stat fileStats;\n  \n  if (fileName != (char *)0x0) {\n    status = stat(fileName,&fileStats);\n    if (status < 0) {\n      errorCode = __errno_location();\n      if (*errorCode == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(errorMessage,fileName);\n      }\n      else {\n        errorDescription = strerror(*errorCode);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(errorMessage,fileName,errorDescription);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(errorMessage,fileName);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(errorMessage,fileName);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(errorMessage,fileName);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "dcgettext",
                "non_fatal",
                "get_file_size.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "main",
                "copy_file",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd"
            },
            "code": "\nundefined8 initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "sort_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatList",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "formatPtr"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatList)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *formatPtr;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,programName);\n  for (formatPtr = formatList; *formatPtr != 0; formatPtr = formatPtr + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "free",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "generate_debug_info_0011378f",
                "param_1": "output_file",
                "param_2": "debug_data",
                "param_3": "debug_info_ptr",
                "param_4": "debug_info_size",
                "param_5": "debug_string",
                "param_6": "debug_version",
                "auVar1": "temp_var",
                "cVar2": "result",
                "uVar3": "error_code",
                "uVar4": "error_msg",
                "puVar5": "dest_ptr",
                "sVar6": "string_length",
                "lVar7": "loop_counter",
                "puVar8": "symbol_ptr",
                "puVar9": "symbol_table_ptr",
                "__dest": "dest_buffer",
                "plVar11": "source_ptr",
                "bVar12": "bool_flag",
                "local_258": "debug_data",
                "local_250": "debug_info",
                "local_248": "symbol_table_size",
                "uStack_244": "symbol_count",
                "uStack_240": "buffer_size",
                "uStack_23c": "temp_var",
                "local_238": "temp_buffer",
                "local_228": "source_file_id",
                "local_220": "string_table",
                "local_1f8": "temp_var",
                "local_1f0": "compilation_unit_id",
                "local_1e8": "line_number_table",
                "local_a0": "temp_buffer",
                "local_78": "temp_data",
                "uStack_70": "temp_var",
                "local_68": "source_id",
                "local_60": "temp_var",
                "local_58": "temp_var",
                "uStack_54": "temp_var",
                "uStack_50": "temp_var",
                "uStack_4c": "temp_var"
            },
            "code": "\nundefined4\ngenerate_debug_info_0011378f(undefined8 *output_file,undefined8 *debug_data,long *debug_info_ptr,undefined8 *debug_info_size,\n            undefined8 *debug_string,undefined8 *debug_version)\n\n{\n  undefined temp_var [16];\n  char result;\n  undefined4 error_code;\n  undefined8 error_msg;\n  undefined *dest_ptr;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *symbol_ptr;\n  undefined4 *symbol_table_ptr;\n  char *dest_buffer;\n  undefined8 *puVar10;\n  long *source_ptr;\n  byte bool_flag;\n  undefined8 *debug_data;\n  long debug_info;\n  undefined4 symbol_table_size;\n  undefined4 symbol_count;\n  undefined4 buffer_size;\n  undefined4 temp_var;\n  undefined temp_buffer [16];\n  undefined8 source_file_id;\n  undefined string_table [40];\n  undefined8 temp_var;\n  undefined8 compilation_unit_id;\n  undefined4 line_number_table [82];\n  undefined temp_buffer [40];\n  undefined temp_data [8];\n  undefined8 temp_var;\n  undefined8 source_id;\n  undefined4 temp_var;\n  undefined4 temp_var;\n  undefined4 temp_var;\n  undefined4 temp_var;\n  undefined4 temp_var;\n  \n  bool_flag = 0;\n  symbol_table_size = 0;\n  symbol_count = 0;\n  buffer_size = 500;\n  temp_var = 0;\n  debug_data = output_file;\n  debug_info = xmalloc(500);\n  source_file_id = 1;\n  temp_buffer = ZEXT816(0);\n  result = bfd_hash_table_init(string_table,string_hash_newfunc_lto_priv_0,0x30);\n  if ((result == '\\0') ||\n     (result = bfd_hash_table_init(temp_buffer,string_hash_newfunc_lto_priv_0,0x30), result == '\\0')) {\n    error_code = bfd_get_error();\n    error_msg = bfd_errmsg(error_code);\n    non_fatal(\"bfd_hash_table_init_failed: %s\",error_msg);\n  }\n  else {\n    temp_var = 0;\n    unique0x100000e9 = 0xffffffff;\n    temp_data = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    symbol_table_ptr = line_number_table;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *symbol_table_ptr = 0;\n      symbol_table_ptr = symbol_table_ptr + (ulong)bool_flag * -2 + 1;\n    }\n    source_id = 0;\n    temp_var = 0;\n    compilation_unit_id = 1;\n    temp_var = 0;\n    temp_var = 0;\n    temp_var = 0xffffffff;\n    temp_var = 0xffffffff;\n    result = stab_write_symbol_lto_priv_0(&debug_data,0,0,0,0);\n    temp_var = _temp_data;\n    if (result != '\\0') {\n      temp_data._4_4_ = symbol_count;\n      temp_data._0_4_ = symbol_table_size;\n      temp_var = temp_var._8_8_;\n      result = stab_write_symbol_lto_priv_0(&debug_data,100,0,0,*output_file);\n      if (result != '\\0') {\n        *(int *)(debug_data + 6) = *(int *)(debug_data + 6) + 1;\n        debug_data[10] = 0;\n        puVar10 = (undefined8 *)*debug_data;\n        *(undefined4 *)(debug_data + 7) = *(undefined4 *)((long)debug_data + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          debug_data[8] = puVar10[2];\n          *(undefined4 *)(debug_data + 9) = 0;\n          result = stab_start_compilation_unit_lto_priv_0(&debug_data,*(undefined8 *)(puVar10[1] + 8))\n          ;\n          if (result == '\\0') {\n            return 0;\n          }\n          source_ptr = (long *)puVar10[1];\n          if (source_ptr != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)source_ptr[2] != (undefined8 *)0x0) {\n                for (symbol_ptr = *(undefined8 **)(undefined8 *)source_ptr[2]; symbol_ptr != (undefined8 *)0x0;\n                    symbol_ptr = (undefined8 *)*symbol_ptr) {\n                  result = debug_write_name_constprop_0(debug_data,&debug_data);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              source_ptr = (long *)*source_ptr;\n              if (source_ptr == (long *)0x0) break;\n              result = stab_start_source_lto_priv_0(&debug_data,source_ptr[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = debug_write_linenos_constprop_0(debug_data,&debug_data,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(temp_var,temp_var) == -1) &&\n           (error_code = stab_write_symbol_lto_priv_0(&debug_data,100,0,source_id,0), (char)error_code != '\\0'))\n        {\n          (**(code **)(output_file[1] + 0x50))(source_file_id,debug_info + 8);\n          *debug_info_ptr = debug_info;\n          *debug_info_size = CONCAT44(symbol_count,symbol_table_size);\n          *debug_version = source_file_id;\n          dest_ptr = (undefined *)xmalloc();\n          *dest_ptr = 0;\n          dest_buffer = dest_ptr + 1;\n          *debug_string = dest_ptr;\n          for (loop_counter = temp_buffer._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(dest_buffer,*(char **)(loop_counter + 8));\n            string_length = strlen(dest_buffer);\n            dest_buffer = dest_buffer + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_write_linenos.constprop.0",
                "bfd_errmsg",
                "non_fatal",
                "stab_start_compilation_unit.lto_priv.0",
                "debug_write_name.constprop.0",
                "bfd_get_error",
                "strcpy",
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "string_hash_newfunc.lto_priv.0",
                "bfd_hash_table_init",
                "stab_start_source.lto_priv.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "generate_debug_info_0011378f"
        },
        "FUN_001281e0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strnlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281e0",
            "calling": [
                "strnlen"
            ],
            "imported": false,
            "current_name": "FUN_001281e0"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errorPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errorPtr;\n  undefined8 errorMessage;\n  \n  errorPtr = __errno_location();\n  if (*errorPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(errorMessage);\n  }\n  else {\n    strerror(*errorPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_001280c0": {
            "renaming": {},
            "code": "\n\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280c0",
            "calling": [
                "strtod"
            ],
            "imported": false,
            "current_name": "FUN_001280c0"
        },
        "FUN_001040f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001040f0"
        },
        "FUN_00104720": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "main",
                "create_symbol_htab"
            ],
            "imported": false,
            "current_name": "FUN_00104720"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "update_stab_modify_0010a0a0",
                "param_1": "base_address",
                "stab_modify_type": "modify_table_entry"
            },
            "code": "\nvoid update_stab_modify_0010a0a0(long base_address)\n\n{\n  modify_table_entry(base_address,0x26,4,base_address + 0x198,base_address + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_stab_modify_0010a0a0"
        },
        "FUN_00104600": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104600"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "report_data_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "reportPtr",
                "param_10": "data1",
                "param_11": "data2",
                "param_12": "data3",
                "param_13": "data4",
                "param_14": "data5",
                "in_AL": "conditionFlag",
                "local_d8": "bufferSize",
                "local_d4": "byteSize",
                "local_d0": "bufferPtr",
                "local_c8": "localBuffer",
                "local_b8": "resultBuffer",
                "local_b0": "dataPtr1",
                "local_a8": "dataPtr2",
                "local_a0": "dataPtr3",
                "local_98": "dataPtr4",
                "local_90": "dataPtr5",
                "local_88": "renamed1",
                "local_78": "renamed2",
                "local_68": "renamed3",
                "local_58": "renamed4",
                "local_48": "renamed5",
                "local_38": "renamed6",
                "local_28": "renamed7",
                "local_18": "renamed8"
            },
            "code": "\nvoid reportData_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 reportPtr,undefined8 data1,undefined8 data2,undefined8 data3,\n                 undefined8 data4,undefined8 data5)\n\n{\n  char conditionFlag;\n  undefined4 bufferSize;\n  undefined4 byteSize;\n  undefined *bufferPtr;\n  undefined *localBuffer;\n  undefined resultBuffer [8];\n  undefined8 dataPtr1;\n  undefined8 dataPtr2;\n  undefined8 dataPtr3;\n  undefined8 dataPtr4;\n  undefined8 dataPtr5;\n  undefined4 renamed1;\n  undefined4 renamed2;\n  undefined4 renamed3;\n  undefined4 renamed4;\n  undefined4 renamed5;\n  undefined4 renamed6;\n  undefined4 renamed7;\n  undefined4 renamed8;\n  \n  if (conditionFlag != '\\0') {\n    renamed1 = input1;\n    renamed2 = input2;\n    renamed3 = input3;\n    renamed4 = input4;\n    renamed5 = input5;\n    renamed6 = input6;\n    renamed7 = input7;\n    renamed8 = input8;\n  }\n  bufferPtr = &stack0x00000008;\n  bufferSize = 8;\n  localBuffer = resultBuffer;\n  byteSize = 0x30;\n  dataPtr1 = data1;\n  dataPtr2 = data2;\n  dataPtr3 = data3;\n  dataPtr4 = data4;\n  dataPtr5 = data5;\n  report(reportPtr,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00105828",
                "merge_gnu_build_notes",
                "set_times.cold",
                "FUN_0010554f",
                "parse_coff_struct_type",
                "FUN_001152b6",
                "stab_struct_field.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "smart_rename.cold",
                "stab_typdef.lto_priv.0",
                "FUN_00104cc1",
                "copy_object",
                "main",
                "parse_flags.cold",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "FUN_001086af",
                "check_new_section_flags.cold",
                "get_file_size.cold",
                "get_file_size",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "report_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "FUNC_00112c1f"
            },
            "code": "\n\n\nundefined8 FUNC_00112c1f(ulong param_1,undefined8 param_2,int *param_3,long param_4)\n\n{\n  long *plVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined8 *puVar4;\n  char cVar5;\n  int *piVar6;\n  undefined8 uVar7;\n  undefined8 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined8 uVar11;\n  ulong uVar12;\n  uint uVar13;\n  bool bVar14;\n  uint local_3c;\n  \n  uVar12 = param_1;\nLAB_00112c39:\n  if (param_3 != (int *)0x0) {\n    iVar9 = *param_3;\n    if (iVar9 - 0x16U < 2) {\n      do {\n        plVar1 = *(long **)(param_3 + 4);\n        uVar13 = *(uint *)(param_1 + 0x30);\n        uVar12 = (ulong)uVar13;\n        lVar2 = *plVar1;\n        if (*(uint *)(lVar2 + 0x10) == uVar13) {\n          if (iVar9 == 0x16) {\n            uVar7 = stab_typedef_type_lto_priv_0(param_2,*(undefined8 *)(lVar2 + 8));\n            return uVar7;\n          }\nLAB_00112c94:\n          piVar6 = (int *)debug_get_real_type_isra_0(param_3,0);\n          if (piVar6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*piVar6 - 7U < 4) && (*(long *)(piVar6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(piVar6 + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n               (cVar5 = debug_set_class_id_lto_priv_0\n                                  (param_1,*(undefined8 *)(**(long **)(param_3 + 4) + 8),piVar6),\n               cVar5 == '\\0')) {\n              return 0;\n            }\n            uVar13 = *(uint *)(*(long *)(piVar6 + 4) + 0xc);\n          }\n          else {\n            uVar13 = 0;\n          }\n          iVar9 = *piVar6;\n          uVar7 = *(undefined8 *)(**(long **)(param_3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (iVar9 == 0x17) {\n          if (lVar2 != param_4) goto LAB_00112c94;\n          *(uint *)(param_4 + 0x10) = uVar13;\n          param_4 = *plVar1;\n          param_3 = (int *)plVar1[1];\n          goto LAB_00112c39;\n        }\n        if (param_4 != 0) {\n          *(uint *)(param_4 + 0x10) = uVar13;\n        }\n        param_3 = (int *)plVar1[1];\n        if (param_3 == (int *)0x0) goto LAB_00112dd6;\n        iVar9 = *param_3;\n        param_4 = 0;\n      } while (iVar9 - 0x16U < 2);\nLAB_00112d74:\n      uVar7 = 0;\n    }\n    else {\n      if (param_4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param_4 + 0x10) = *(undefined4 *)(param_1 + 0x30);\n      if (*(int *)(param_4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      uVar7 = *(undefined8 *)(param_4 + 8);\n    }\n    switch(iVar9) {\n    case 0:\n      uVar7 = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",uVar7);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      uVar7 = stab_void_type_lto_priv_0(param_2);\n      return uVar7;\n    case 3:\n      uVar7 = stab_int_type_lto_priv_0(param_2,param_3[1],*(undefined *)(param_3 + 4));\n      return uVar7;\n    case 4:\n      uVar7 = stab_float_type_lto_priv_0(param_2,param_3[1]);\n      return uVar7;\n    case 5:\n      uVar7 = stab_complex_type_lto_priv_0(param_2,param_3[1]);\n      return uVar7;\n    case 6:\n      uVar7 = stab_bool_type_lto_priv_0(param_2,param_3[1]);\n      return uVar7;\n    case 7:\n    case 8:\n      if (*(long *)(param_3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(param_3 + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n           (cVar5 = debug_set_class_id_lto_priv_0(param_1,uVar7,param_3), cVar5 == '\\0')) {\n          return 0;\n        }\n        lVar2 = *(long *)(param_3 + 4);\n        if (*(int *)(param_1 + 0x30) == *(int *)(lVar2 + 8)) {\n          uVar13 = *(uint *)(lVar2 + 0xc);\n          if (uVar13 <= *(uint *)(param_1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          iVar9 = *param_3;\nLAB_00112ed2:\n          uVar7 = stab_tag_type_lto_priv_0(param_2,uVar7,uVar13,iVar9);\n          return uVar7;\n        }\n        *(int *)(lVar2 + 8) = *(int *)(param_1 + 0x30);\n      }\n      uVar10 = 0;\n      if (*(long *)(param_3 + 4) != 0) {\n        uVar10 = *(undefined4 *)(*(long *)(param_3 + 4) + 0xc);\n      }\n      cVar5 = stab_start_struct_type_lto_priv_0(param_2,uVar7,uVar10,*param_3 == 7,param_3[1]);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param_3 + 4) != (long *)0x0) && (uVar12 = 0, **(long **)(param_3 + 4) != 0)) {\n        while( true ) {\n          puVar4 = *(undefined8 **)(**(long **)(param_3 + 4) + uVar12 * 8);\n          if (puVar4 == (undefined8 *)0x0) break;\n          cVar5 = FUNC_00112c1f(param_1,param_2,puVar4[1],0);\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n          cVar5 = stab_struct_field_lto_priv_0\n                            (param_2,*puVar4,*(undefined4 *)(puVar4 + 3),\n                             *(undefined4 *)((long)puVar4 + 0x1c),*(undefined4 *)(puVar4 + 2));\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n          uVar12 = (ulong)((int)uVar12 + 1);\n        }\n      }\n      uVar7 = stab_end_struct_type_lto_priv_0(param_2);\n      return uVar7;\n    case 9:\n    case 10:\n      if (*(long *)(param_3 + 4) == 0) {\n        uVar13 = 0;\n        piVar6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param_3 + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n           (uVar12 = param_1, cVar5 = debug_set_class_id_lto_priv_0(param_1,uVar7,param_3),\n           cVar5 == '\\0')) {\n          return 0;\n        }\n        lVar2 = *(long *)(param_3 + 4);\n        uVar13 = *(uint *)(lVar2 + 0xc);\n        if (*(int *)(param_1 + 0x30) == *(int *)(lVar2 + 8)) {\n          if (uVar13 <= *(uint *)(param_1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          iVar9 = *param_3;\n          goto LAB_00112ed2;\n        }\n        piVar6 = *(int **)(lVar2 + 0x20);\n        *(int *)(lVar2 + 8) = *(int *)(param_1 + 0x30);\n        if (((piVar6 != (int *)0x0) && (param_3 != piVar6)) &&\n           (uVar12 = param_1, cVar5 = FUNC_00112c1f(param_1,param_2,piVar6,0), cVar5 == '\\0')) {\n          return 0;\n        }\n      }\n      cVar5 = stab_start_class_type_lto_priv_0\n                        (param_2,uVar7,uVar13,*param_3 == 9,param_3[1],piVar6 != (int *)0x0,\n                         param_3 == piVar6,uVar12);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param_3 + 4) != (long *)0x0) {\n        uVar13 = 0;\n        if (**(long **)(param_3 + 4) != 0) {\n          while (puVar4 = *(undefined8 **)(**(long **)(param_3 + 4) + (ulong)uVar13 * 8),\n                puVar4 != (undefined8 *)0x0) {\n            cVar5 = FUNC_00112c1f(param_1,param_2,puVar4[1],0);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)puVar4 + 0x14) == '\\0') {\n              cVar5 = stab_struct_field_lto_priv_0(param_2,*puVar4,*(undefined4 *)(puVar4 + 3));\n            }\n            else {\n              cVar5 = stab_class_static_member_lto_priv_0(param_2,*puVar4,puVar4[3]);\n            }\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = uVar13 + 1;\n          }\n        }\n        uVar13 = 0;\n        if (*(long *)(*(long *)(param_3 + 4) + 0x10) != 0) {\n          while (puVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_3 + 4) + 0x10) + (ulong)uVar13 * 8),\n                puVar4 != (undefined8 *)0x0) {\n            cVar5 = FUNC_00112c1f(param_1,param_2,*puVar4,0);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            cVar5 = stab_class_baseclass_lto_priv_0\n                              (param_2,*(undefined4 *)(puVar4 + 1),\n                               *(undefined *)((long)puVar4 + 0xc));\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = uVar13 + 1;\n          }\n        }\n        local_3c = 0;\n        if (*(long *)(*(long *)(param_3 + 4) + 0x18) != 0) {\n          while (puVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_3 + 4) + 0x18) + (ulong)local_3c * 8),\n                puVar4 != (undefined8 *)0x0) {\n            cVar5 = stab_class_start_method_lto_priv_0(param_2,*puVar4);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = 0;\n            while (puVar3 = *(undefined8 **)(puVar4[1] + (ulong)uVar13 * 8),\n                  puVar3 != (undefined8 *)0x0) {\n              if ((puVar3[4] != 0) &&\n                 (cVar5 = FUNC_00112c1f(param_1,param_2,puVar3[4],0), cVar5 == '\\0')) {\n                return 0;\n              }\n              cVar5 = FUNC_00112c1f(param_1,param_2,puVar3[1],0);\n              if (cVar5 == '\\0') {\n                return 0;\n              }\n              if (puVar3[3] == -1) {\n                cVar5 = stab_class_static_method_variant_lto_priv_0\n                                  (param_2,*puVar3,*(undefined4 *)(puVar3 + 2),\n                                   *(undefined *)((long)puVar3 + 0x14),\n                                   *(undefined *)((long)puVar3 + 0x15));\n              }\n              else {\n                cVar5 = stab_class_method_variant_lto_priv_0(param_2);\n              }\n              if (cVar5 == '\\0') {\n                return 0;\n              }\n              uVar13 = uVar13 + 1;\n            }\n            cVar5 = stab_class_end_method_lto_priv_0(param_2);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            local_3c = local_3c + 1;\n          }\n        }\n      }\n      uVar7 = stab_end_class_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0xb:\n      puVar4 = *(undefined8 **)(param_3 + 4);\n      if (puVar4 == (undefined8 *)0x0) {\n        uVar8 = 0;\n        uVar11 = 0;\n      }\n      else {\n        uVar8 = puVar4[1];\n        uVar11 = *puVar4;\n      }\n      uVar7 = stab_enum_type_lto_priv_0(param_2,uVar7,uVar11,uVar8);\n      return uVar7;\n    case 0xc:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_pointer_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0xd:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(param_3 + 4) + 8) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (lVar2 = *(long *)(*(long *)(*(long *)(param_3 + 4) + 8) + uVar12 * 8), lVar2 != 0) {\n          uVar12 = uVar12 + 1;\n          cVar5 = FUNC_00112c1f(param_1,param_2,lVar2,0);\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n        }\n        uVar12 = uVar12 & 0xffffffff;\n      }\n      uVar7 = stab_function_type_lto_priv_0\n                        (param_2,uVar12,*(undefined *)(*(long *)(param_3 + 4) + 0x10));\n      return uVar7;\n    case 0xe:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_reference_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0xf:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_range_type_lto_priv_0\n                        (param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),\n                         *(undefined8 *)(*(long *)(param_3 + 4) + 0x10));\n      return uVar7;\n    case 0x10:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      lVar2 = *(long *)(param_3 + 4);\n      uVar7 = stab_array_type_lto_priv_0\n                        (param_2,*(undefined8 *)(lVar2 + 0x10),*(undefined8 *)(lVar2 + 0x18),\n                         *(undefined *)(lVar2 + 0x20));\n      return uVar7;\n    case 0x11:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_set_type_lto_priv_0(param_2,*(undefined *)(*(long *)(param_3 + 4) + 8));\n      return uVar7;\n    case 0x12:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_offset_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0x13:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(param_3 + 4) + 0x10) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (lVar2 = *(long *)(*(long *)(*(long *)(param_3 + 4) + 0x10) + uVar12 * 8), lVar2 != 0)\n        {\n          uVar12 = uVar12 + 1;\n          cVar5 = FUNC_00112c1f(param_1,param_2,lVar2,0);\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param_3 + 4) + 8) != 0) &&\n         (cVar5 = FUNC_00112c1f(param_1,param_2,*(long *)(*(long *)(param_3 + 4) + 8),0),\n         cVar5 == '\\0')) {\n        return 0;\n      }\n      uVar7 = stab_method_type_lto_priv_0\n                        (param_2,*(long *)(*(long *)(param_3 + 4) + 8) != 0,uVar12 & 0xffffffff,\n                         *(undefined *)(*(long *)(param_3 + 4) + 0x18));\n      return uVar7;\n    case 0x14:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_const_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0x15:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_volatile_type_lto_priv_0(param_2);\n      return uVar7;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bVar14 = *(int **)**(undefined8 **)(param_3 + 4) == param_3;\n  param_3 = *(int **)**(undefined8 **)(param_3 + 4);\n  if (bVar14) {\nLAB_00112dd6:\n    uVar7 = stab_empty_type_lto_priv_0(param_2);\n    return uVar7;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "stab_typedef_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_tag_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "debug_set_class_id.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_class_baseclass.lto_priv.0",
                "dcgettext",
                "stab_bool_type.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "__assert_fail",
                "stab_class_method_variant.lto_priv.0",
                "debug_get_real_type.isra.0",
                "stab_function_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "abort",
                "stab_class_end_method.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_reference_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "fprintf",
                "stab_class_static_method_variant.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00112c1f",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "FUNC_00112c1f"
        },
        "FUN_00104850": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104850"
        },
        "FUN_00104730": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104730"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isCopyingEnabled",
                "unaff_R15": "baseAddress",
                "lVar1": "copyErrorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long copyErrorMessage;\n  char isCopyingEnabled;\n  long baseAddress;\n  \n  copyErrorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isCopyingEnabled != '\\0') {\n    *(undefined4 *)(*(long *)(baseAddress + 0xd0) + 4) = 8;\n  }\n  if (copyErrorMessage != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_nonfatal_message"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "FUN_001281d0": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281d0",
            "calling": [
                "memset"
            ],
            "imported": false,
            "current_name": "FUN_001281d0"
        },
        "FUN_00104610": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104610"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "display_warning_message_00108fe8",
                "param_1": "fileName",
                "param_2": "errorMessage",
                "in_RAX": "returnValue",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid displayWarningMessage_00108fe8(undefined8 fileName,undefined8 errorMessage)\n\n{\n  undefined8 returnValue;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,errorMessage,fileName,returnValue);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "parse_number"
            ],
            "imported": false,
            "current_name": "display_warning_message_00108fe8"
        },
        "FUN_001280b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280b8",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_001280b8"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_format_and_architecture_00105828",
                "iVar1": "architectureType",
                "uVar2": "arch",
                "uVar3": "archMach",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 checkFormatAndArchitecture_00105828(void)\n\n{\n  int architectureType;\n  undefined4 arch;\n  undefined8 archMach;\n  undefined8 errorMessage;\n  \n  architectureType = bfd_get_arch();\n  if (architectureType == 0) {\n    archMach = bfd_get_archive_filename();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    non_fatal(errorMessage,archMach);\n  }\n  else {\n    archMach = bfd_get_mach();\n    arch = bfd_get_arch();\n    archMach = bfd_printable_arch_mach(arch,archMach);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    non_fatal(errorMessage,archMach);\n  }\n  return 0;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "bfd_printable_arch_mach",
                "bfd_get_mach",
                "bfd_get_arch",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_format_and_architecture_00105828"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template_directory",
                "pcVar1": "temp_directory_path"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template_directory;\n  char *temp_directory_path;\n  \n  template_directory = (char *)template_in_dir();\n  temp_directory_path = mkdtemp(template_directory);\n  if (temp_directory_path == (char *)0x0) {\n    free(template_directory);\n  }\n  return temp_directory_path;\n}\n\n",
            "called": [
                "template_in_dir",
                "mkdtemp",
                "make_tempdir.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_push_type_0010bba1",
                "param_1": "hash_table",
                "param_2": "key",
                "lVar1": "entry",
                "uVar2": "result"
            },
            "code": "\nundefined8 lookup_and_push_type_0010bba1(long hash_table,undefined8 key)\n\n{\n  long entry;\n  undefined8 result;\n  \n  entry = bfd_hash_lookup(hash_table + 0x1b8,key,0,0);\n  if ((entry != 0) && (0 < *(long *)(entry + 0x20))) {\n    result = stab_push_defined_type(hash_table,*(long *)(entry + 0x20),*(undefined4 *)(entry + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "lookup_and_push_type_0010bba1"
        },
        "FUN_00104740": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "try_dir.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104740"
        },
        "FUN_00104620": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104620"
        },
        "FUN_00104860": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104860"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "create_symbol_0010e6a8",
                "param_1": "symbolTable",
                "param_2": "symbolName",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "type",
                "sVar3": "symbolNameLength",
                "sVar4": "typeLength",
                "__s_00": "formattedSymbol",
                "lVar8": "typeIndex",
                "uVar2": "someValue",
                "lVar5": "hashLookupResult",
                "uVar6": "errorMsg",
                "uVar7": "errorMessage",
                "uVar9": "returnValue",
                "auVar10": "result"
            },
            "code": "\nundefined  [16] createSymbol_0010e6a8(long symbolTable,char *symbolName,undefined8 param3,undefined8 param4)\n\n{\n  uint uVar1;\n  undefined4 someValue;\n  char *type;\n  size_t symbolNameLength;\n  size_t typeLength;\n  char *formattedSymbol;\n  long hashLookupResult;\n  undefined8 errorMsg;\n  undefined8 errorMessage;\n  long typeIndex;\n  ulong returnValue;\n  undefined result [16];\n  \n  typeIndex = *(long *)(*(long *)(symbolTable + 0x60) + 0x10);\n  someValue = *(undefined4 *)(*(long *)(symbolTable + 0x60) + 0x18);\n  type = (char *)stab_pop_type();\n  symbolNameLength = strlen(symbolName);\n  typeLength = strlen(type);\n  formattedSymbol = (char *)xmalloc(symbolNameLength + 0x14 + typeLength);\n  if (typeIndex < 1) {\n    typeIndex = *(long *)(symbolTable + 0x68);\n    *(long *)(symbolTable + 0x68) = typeIndex + 1;\n    sprintf(formattedSymbol,\"%s:t%ld=%s\",symbolName,typeIndex,type);\n  }\n  else {\n    sprintf(formattedSymbol,\"%s:t%s\",symbolName,type);\n  }\n  free(type);\n  uVar1 = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,formattedSymbol);\n  returnValue = (ulong)uVar1;\n  if ((char)uVar1 != '\\0') {\n    free(formattedSymbol);\n    hashLookupResult = bfd_hash_lookup(symbolTable + 0x1b8,symbolName,1,0);\n    if (hashLookupResult != 0) {\n      *(long *)(hashLookupResult + 0x20) = typeIndex;\n      *(undefined4 *)(hashLookupResult + 0x28) = someValue;\n      goto LAB_0010e7b3;\n    }\n    someValue = bfd_get_error();\n    errorMsg = bfd_errmsg(someValue);\n    errorMessage = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    non_fatal(errorMessage,errorMsg);\n  }\n  returnValue = 0;\nLAB_0010e7b3:\n  result._8_8_ = param4;\n  result._0_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "bfd_errmsg",
                "stab_write_symbol.lto_priv.0",
                "non_fatal",
                "dcgettext",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "create_symbol_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "reverse_symbol_and_write_0010e7c2",
                "param_1": "symbol",
                "param_2": "input_string",
                "__s": "symbol_pop",
                "sVar1": "input_string_length",
                "sVar2": "symbol_length",
                "__s_00": "new_string",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16] reverse_symbol_and_write_0010e7c2(undefined8 symbol,char *input_string,undefined8 param_3,undefined8 param_4)\n\n{\n  char *symbol_pop;\n  size_t input_string_length;\n  size_t symbol_length;\n  char *new_string;\n  undefined return_value [16];\n  \n  symbol_pop = (char *)stab_pop_type();\n  input_string_length = strlen(input_string);\n  symbol_length = strlen(symbol_pop);\n  new_string = (char *)xmalloc(input_string_length + 3 + symbol_length);\n  sprintf(new_string,\"%s:T%s\",input_string,symbol_pop);\n  free(symbol_pop);\n  return_value._0_4_ = stab_write_symbol_lto_priv_0(symbol,0x80,0,0,new_string);\n  return_value._4_4_ = 0;\n  if ((char)return_value._0_4_ != '\\0') {\n    free(new_string);\n  }\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_symbol_and_write_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "report_and_exit_00119dd0",
                "param_1": "result1",
                "param_2": "result2",
                "param_3": "result3",
                "param_4": "result4",
                "param_5": "result5",
                "param_6": "result6",
                "param_7": "result7",
                "param_8": "result8",
                "param_9": "data1",
                "param_10": "data2",
                "param_11": "data3",
                "param_12": "data4",
                "param_13": "data5",
                "param_14": "data6",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "count",
                "local_d0": "stackPtr",
                "local_c8": "buffer",
                "local_b8": "localBuffer",
                "local_b0": "userData1",
                "local_a8": "userData2",
                "local_a0": "userData3",
                "local_98": "userData4",
                "local_90": "userData5",
                "local_88": "localResult1",
                "local_78": "localResult2",
                "local_68": "localResult3",
                "local_58": "localResult4",
                "local_48": "localResult5",
                "local_38": "localResult6",
                "local_28": "localResult7",
                "local_18": "localResult8"
            },
            "code": "\nvoid reportAndExit_00119dd0(undefined4 result1,undefined4 result2,undefined4 result3,undefined4 result4,\n                 undefined4 result5,undefined4 result6,undefined4 result7,undefined4 result8,\n                 undefined8 data1,undefined8 data2,undefined8 data3,undefined8 data4,\n                 undefined8 data5,undefined8 data6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 count;\n  undefined *stackPtr;\n  undefined *buffer;\n  undefined localBuffer [8];\n  undefined8 userData1;\n  undefined8 userData2;\n  undefined8 userData3;\n  undefined8 userData4;\n  undefined8 userData5;\n  undefined4 localResult1;\n  undefined4 localResult2;\n  undefined4 localResult3;\n  undefined4 localResult4;\n  undefined4 localResult5;\n  undefined4 localResult6;\n  undefined4 localResult7;\n  undefined4 localResult8;\n  \n  if (flag != '\\0') {\n    localResult1 = result1;\n    localResult2 = result2;\n    localResult3 = result3;\n    localResult4 = result4;\n    localResult5 = result5;\n    localResult6 = result6;\n    localResult7 = result7;\n    localResult8 = result8;\n  }\n  stackPtr = &stack0x00000008;\n  size = 8;\n  buffer = localBuffer;\n  count = 0x30;\n  userData1 = data2;\n  userData2 = data3;\n  userData3 = data4;\n  userData4 = data5;\n  userData5 = data6;\n  report(data1,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "add_redefine_and_check",
                "FUN_0010554f",
                "init_section_add.cold",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "copy_section.cold",
                "main",
                "parse_vma.cold",
                "parse_flags.cold",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "create_new_symbol.cold",
                "copy_file",
                "FUN_00114dc7",
                "section_add_load_file.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "report_and_exit_00119dd0"
        },
        "FUN_00104500": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "copy_object",
                "copy_file",
                "FUN_00107880",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104500"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_bfd_error_001083b7",
                "param_1": "error_code",
                "iVar1": "bfd_error",
                "unaff_RBP": "ptr_ret_addr",
                "unaff_retaddr": "ret_addr"
            },
            "code": "\nundefined8 handle_bfd_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *ptr_ret_addr;\n  undefined8 ret_addr;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return ret_addr;\n    }\n  }\n  bfd_nonfatal(*ptr_ret_addr);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "handle_bfd_error_001083b7"
        },
        "FUN_001280e8": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280e8",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_001280e8"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_build_notes_00116852",
                "in_RCX": "buildNotes",
                "unaff_RBP": "currentNote",
                "unaff_R13": "startPointer",
                "unaff_R14": "currentPointer",
                "unaff_R15": "endPointer",
                "in_R10": "noteIndex",
                "param_7": "param1",
                "param_9": "param2",
                "param_10": "param3",
                "param_11": "param4",
                "param_12": "outputBuffer",
                "param_13": "param5",
                "param_14": "numNotes",
                "sVar1": "noteSize",
                "pcVar2": "executeFunc",
                "iVar3": "result",
                "uVar4": "incr",
                "__ptr": "tempBuffer",
                "puVar9": "destPtr",
                "cVar10": "charValue",
                "puVar11": "destPtr2",
                "puVar12": "destPtr3",
                "lVar7": "loopVar",
                "uVar5": "tempVar1",
                "uVar6": "tempVar2",
                "uVar8": "tempVar3",
                "bVar14": "byteVal"
            },
            "code": "\nulong processBuildNotes_00116852(void)\n\n{\n  size_t noteSize;\n  code *executeFunc;\n  int result;\n  uint incr;\n  undefined *tempBuffer;\n  size_t *buildNotes;\n  ulong tempVar1;\n  ulong tempVar2;\n  long loopVar;\n  ulong tempVar3;\n  size_t unaff_RBX;\n  size_t *currentNote;\n  undefined *destPtr;\n  char charValue;\n  undefined *destPtr2;\n  ulong noteIndex;\n  undefined *destPtr3;\n  size_t in_R11;\n  size_t *startPointer;\n  size_t *currentPointer;\n  size_t endPointer;\n  size_t *pnoteSize3;\n  byte byteVal;\n  size_t param1;\n  size_t param2;\n  ulong param3;\n  size_t *param4;\n  undefined *outputBuffer;\n  long param5;\n  size_t numNotes;\n  \n  byteVal = 0;\ncode_r0x00116852:\n  incr = (int)noteIndex + 1;\n  if (0x10 < (int)noteIndex) goto LAB_001167f5;\nLAB_00116863:\n  currentPointer = currentPointer + -9;\n  do {\n    if (startPointer <= currentPointer) {\n      noteSize = currentPointer[2];\n      if (noteSize == 0) goto LAB_00116863;\n      tempVar3 = (ulong)incr;\n      if ((*currentPointer == *currentNote) &&\n         (result = memcmp((void *)currentPointer[3],(void *)currentNote[3],*currentNote), result == 0)) {\n        tempVar2 = currentPointer[7];\n        tempVar1 = currentPointer[8];\n        noteIndex = tempVar3 & 0xffffffff;\n        if (endPointer == tempVar2) {\n          if (unaff_RBX != tempVar1) goto LAB_001167a6;\n          currentNote[2] = 0;\n        }\n        else {\n          if (endPointer < tempVar2) {\n            if (tempVar1 < endPointer) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < tempVar1) || (endPointer <= (tempVar1 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (unaff_RBX < endPointer) {\n              if ((0xfffffffffffffff0 < unaff_RBX) ||\n                 (tempVar2 <= (unaff_RBX + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (unaff_RBX == tempVar1) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (unaff_RBX <= tempVar1) {\n              currentNote[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (tempVar1 < endPointer) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (noteSize == 0x101)) goto code_r0x00116852;\n          if (tempVar1 <= unaff_RBX) {\n            tempVar1 = unaff_RBX;\n          }\n          if (tempVar2 < endPointer) {\n            endPointer = tempVar2;\n          }\n          currentPointer[8] = tempVar1;\n          currentPointer[7] = endPointer;\n          currentNote[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        currentPointer = currentNote;\n        currentNote = currentPointer + 9;\n        if (buildNotes <= currentNote) {\n          qsort(param4,numNotes,0x48,sort_gnu_build_notes);\n          tempBuffer = (undefined *)xmalloc(param3 * 2);\n          param1 = 0;\n          destPtr3 = tempBuffer;\n          for (pnoteSize3 = param4; pnoteSize3 < buildNotes; pnoteSize3 = pnoteSize3 + 9) {\n            if (pnoteSize3[2] != 0) {\n              destPtr2 = destPtr3 + 4;\n              destPtr = destPtr3 + 0xc;\n              executeFunc = *(code **)(*(long *)(param5 + 8) + 0x50);\n              if ((pnoteSize3[7] == param2) && (pnoteSize3[8] == param1)) {\n                (*executeFunc)(*pnoteSize3,destPtr3);\n                (**(code **)(*(long *)(param5 + 8) + 0x50))(0,destPtr2);\n                (**(code **)(*(long *)(param5 + 8) + 0x50))(pnoteSize3[2],destPtr3 + 8);\n                tempVar2 = pnoteSize3[6];\n                tempVar3 = *pnoteSize3;\n                destPtr3 = (undefined *)pnoteSize3[3];\n                destPtr2 = destPtr;\n                for (tempVar1 = tempVar3; tempVar1 != 0; tempVar1 = tempVar1 - 1) {\n                  *destPtr2 = *destPtr3;\n                  destPtr3 = destPtr3 + (ulong)byteVal * -2 + 1;\n                  destPtr2 = destPtr2 + (ulong)byteVal * -2 + 1;\n                }\n                if (tempVar3 < tempVar2) {\n                  for (loopVar = tempVar2 - tempVar3; loopVar != 0; loopVar = loopVar + -1) {\n                    *destPtr2 = 0;\n                    destPtr2 = destPtr2 + (ulong)byteVal * -2 + 1;\n                  }\n                }\n                destPtr3 = destPtr + tempVar2;\n              }\n              else {\n                (*executeFunc)();\n                if (*(int *)(*(long *)(param5 + 8) + 8) == 5) {\n                  charValue = (*(char *)(*(long *)(param5 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  charValue = '\\b';\n                }\n                (**(code **)(*(long *)(param5 + 8) + 0x50))(charValue,destPtr2);\n                (**(code **)(*(long *)(param5 + 8) + 0x50))(pnoteSize3[2],destPtr3 + 8);\n                tempVar3 = *pnoteSize3;\n                destPtr3 = (undefined *)pnoteSize3[3];\n                destPtr2 = destPtr;\n                for (tempVar2 = tempVar3; tempVar2 != 0; tempVar2 = tempVar2 - 1) {\n                  *destPtr2 = *destPtr3;\n                  destPtr3 = destPtr3 + (ulong)byteVal * -2 + 1;\n                  destPtr2 = destPtr2 + (ulong)byteVal * -2 + 1;\n                }\n                tempVar2 = pnoteSize3[6];\n                if (tempVar3 < tempVar2) {\n                  for (loopVar = tempVar2 - tempVar3; loopVar != 0; loopVar = loopVar + -1) {\n                    *destPtr2 = 0;\n                    destPtr2 = destPtr2 + (ulong)byteVal * -2 + 1;\n                  }\n                }\n                loopVar = *(long *)(param5 + 8);\n                destPtr = destPtr + tempVar2;\n                destPtr3 = destPtr + 8;\n                if ((*(int *)(loopVar + 8) == 5) &&\n                   (*(char *)(*(long *)(param5 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopVar + 0x38))(pnoteSize3[7],destPtr);\n                  (**(code **)(*(long *)(param5 + 8) + 0x38))(pnoteSize3[8],destPtr3);\n                  destPtr3 = destPtr + 0x10;\n                }\n                else {\n                  (**(code **)(loopVar + 0x50))(pnoteSize3[7],destPtr);\n                  (**(code **)(*(long *)(param5 + 8) + 0x50))(pnoteSize3[8],destPtr + 4);\n                }\n                param2 = pnoteSize3[7];\n                param1 = pnoteSize3[8];\n              }\n            }\n          }\n          tempVar2 = (long)destPtr3 - (long)tempBuffer;\n          tempVar3 = tempVar2;\n          destPtr3 = tempBuffer;\n          if (tempVar2 < param3) {\n            for (; param3 = tempVar2, tempVar3 != 0; tempVar3 = tempVar3 - 1) {\n              *outputBuffer = *destPtr3;\n              destPtr3 = destPtr3 + (ulong)byteVal * -2 + 1;\n              outputBuffer = outputBuffer + (ulong)byteVal * -2 + 1;\n            }\n          }\n          free(tempBuffer);\n          free(param4);\n          return param3;\n        }\n        in_R11 = currentPointer[0xb];\n      } while (in_R11 == 0);\n      endPointer = currentPointer[0x10];\n      unaff_RBX = currentPointer[0x11];\n      incr = 0;\n      if (endPointer != unaff_RBX) break;\n      currentPointer[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "memcmp",
                "FUN_00116852",
                "qsort",
                "free",
                "sort_gnu_build_notes",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_build_notes_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_or_get_ptr_00113d3a",
                "param_1": "pointer",
                "lVar1": "new_ptr"
            },
            "code": "\nlong initialize_or_get_ptr_00113d3a(long pointer)\n\n{\n  long new_ptr;\n  \n  if (pointer != 0) {\n    new_ptr = *(long *)(pointer + 8);\n    if (new_ptr == 0) {\n      new_ptr = debug_make_type_constprop_0(0xc,0);\n      if (new_ptr == 0) {\n        new_ptr = 0;\n      }\n      else {\n        *(long *)(new_ptr + 0x10) = pointer;\n        *(long *)(pointer + 8) = new_ptr;\n      }\n    }\n    return new_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_or_get_ptr_00113d3a"
        },
        "FUN_00104630": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104630"
        },
        "FUN_00104510": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "display_info.isra.0.cold",
                "main",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "FUN_00104510"
        },
        "FUN_00104870": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104870"
        },
        "FUN_00104750": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "main",
                "section_add_load_file",
                "FUN_00107880",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104750"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "modify_stab_type_0010a0d3",
                "param_1": "input_param",
                "stab_modify_type": "modify_stab_type"
            },
            "code": "\nvoid modify_stab_type_0010a0d3(long input_param)\n\n{\n  modify_stab_type_0010a0d3(input_param,0x42,*(undefined4 *)(*(long *)(input_param + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "create_output_section_00115530",
                "param_1": "binary",
                "param_2": "sections",
                "lVar1": "result",
                "pcVar2": "section_name",
                "ppcVar3": "section",
                "cVar4": "is_strip_section",
                "iVar5": "comparison_result",
                "uVar6": "new_flags",
                "sVar7": "prefix_length",
                "sVar8": "section_length",
                "lVar9": "section_info",
                "pcVar10": "concatenated_section_name",
                "pcVar11": "address_section_name",
                "pcVar12": "linked_section_name",
                "uVar13": "current_flags",
                "bVar14": "is_flag_zero",
                "local_50": "error_message",
                "local_48": "current_section_name",
                "local_40": "section_sizes"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nvoid create_output_section_00115530(long binary,char **sections,long param_3)\n\n{\n  long result;\n  char *section_name;\n  char **section;\n  char is_strip_section;\n  int comparison_result;\n  uint new_flags;\n  size_t prefix_length;\n  size_t section_length;\n  long section_info;\n  char *concatenated_section_name;\n  char *address_section_name;\n  char *linked_section_name;\n  uint current_flags;\n  bool is_flag_zero;\n  long error_message;\n  char *current_section_name;\n  long section_sizes [2];\n  \n  is_strip_section = is_strip_section_isra_0(sections);\n  if (is_strip_section != '\\0') {\n    return;\n  }\n  concatenated_section_name = *sections;\n  current_flags = *(uint *)((long)sections + 0x24);\n  current_section_name = concatenated_section_name;\n  section = section_rename_list;\n  if (*(int *)(*(long *)(binary + 8) + 8) != *(int *)(*(long *)(param_3 + 8) + 8)) {\n    current_flags = current_flags & *(uint *)(*(long *)(binary + 8) + 0x18) &\n             *(uint *)(*(long *)(param_3 + 8) + 0x18);\n  }\n  for (; section != (char **)0x0; section = (char **)section[3]) {\n    comparison_result = strcmp(*section,concatenated_section_name);\n    if (comparison_result == 0) {\n      if (*(uint *)(section + 2) != 0xffffffff) {\n        current_flags = *(uint *)(section + 2);\n      }\n      if (concatenated_section_name != section[1]) {\n        current_section_name = section[1];\n        current_flags = check_new_section_flags(current_flags,param_3);\n      }\n      break;\n    }\n  }\n  if (((prefix_alloc_sections_string != (char *)0x0) &&\n      (concatenated_section_name = prefix_alloc_sections_string, (*(byte *)((long)sections + 0x24) & 1) != 0)) ||\n     (concatenated_section_name = prefix_sections_string, prefix_sections_string != (char *)0x0)) {\n    prefix_length = strlen(concatenated_section_name);\n    section_length = strlen(current_section_name);\n    linked_section_name = (char *)xmalloc(prefix_length + 1 + section_length);\n    concatenated_section_name = strcpy(linked_section_name,concatenated_section_name);\n    current_section_name = strcat(concatenated_section_name,current_section_name);\n  }\n  section_info = find_section_list(*sections,0,0x80);\n  is_flag_zero = false;\n  if (section_info == 0) {\n    if ((strip_symbols == 4) && ((current_flags & 0x2000001) != 0)) {\n      comparison_result = *(int *)(*(long *)(binary + 8) + 8);\n      if (comparison_result == 5) {\n        if (*(int *)(sections[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param_3 + 8) + 8) == 5) {\n            is_flag_zero = (current_flags & 0x2000000) == 0;\n            new_flags = ~((-(uint)((current_flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)sections + 0x24) = *(uint *)((long)sections + 0x24) & new_flags;\n          }\n          else {\n            new_flags = 0xfdfffefd;\n          }\n          current_flags = current_flags & new_flags;\n        }\n      }\n      else if ((comparison_result != 2) || (comparison_result = strcmp(*sections,\".buildid\"), comparison_result != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    current_flags = check_new_section_flags(current_flags & 0x104 | *(uint *)(section_info + 0x28),param_3,*sections);\n  }\n  is_strip_section = bfd_convert_section_setup(binary,sections,param_3,&current_section_name,section_sizes);\n  if (is_strip_section == '\\0') {\n    concatenated_section_name = (char *)0x0;\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  concatenated_section_name = (char *)bfd_make_section_anyway_with_flags(param_3,current_section_name,current_flags);\n  if (concatenated_section_name == (char *)0x0) {\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (copy_byte < 0) {\n    if (extract_symbol != '\\0') {\n      section_sizes[0] = 0;\n      goto LAB_001158e7;\n    }\n    is_strip_section = bfd_set_section_size(concatenated_section_name,section_sizes[0]);\n    if (is_strip_section == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  else {\n    section_sizes[0] = ((((long)interleave - 1U) + section_sizes[0]) / (ulong)(long)interleave) *\n                  (long)copy_width;\nLAB_001158e7:\n    is_strip_section = bfd_set_section_size(concatenated_section_name);\n    if (is_strip_section == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  error_message = 0;\n  linked_section_name = sections[6];\n  section_info = find_section_list(*sections,0,0x18);\n  if (section_info == 0) {\n    concatenated_section_name[0x28] = concatenated_section_name[0x28] | 1;\n    address_section_name = *sections;\n    linked_section_name = linked_section_name + change_section_address;\n    *(char **)(concatenated_section_name + 0x30) = linked_section_name;\n    *(char **)(concatenated_section_name + 0x38) = linked_section_name;\n    linked_section_name = sections[7];\n    section_info = find_section_list(address_section_name,0,0x60);\n    if (section_info == 0) goto LAB_00115695;\nLAB_00115860:\n    address_section_name = *(char **)(section_info + 0x20);\n    if ((*(byte *)(section_info + 0x14) & 0x40) != 0) {\n      address_section_name = address_section_name + (long)linked_section_name;\n    }\n    *(char **)(concatenated_section_name + 0x38) = address_section_name;\n    section_info = find_section_list(*sections,0,0x200);\n    if (section_info != 0) goto LAB_00115889;\nLAB_001156b8:\n    current_flags = *(uint *)((long)sections + 0x7c);\n    if (current_flags < 0x3f) goto LAB_001156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(concatenated_section_name + 0xb4) = *(undefined4 *)((long)sections + 0xb4);\n    concatenated_section_name[0x28] = concatenated_section_name[0x28] & 0xcfU | *(byte *)(sections + 5) & 0x30;\n    sections[0xc] = concatenated_section_name;\n    sections[0xb] = (char *)0x0;\n    if ((*(byte *)((long)sections + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    is_strip_section = (**(code **)(*(long *)(param_3 + 8) + 0x158))(binary,sections,param_3,concatenated_section_name);\n    if (is_strip_section == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    address_section_name = *(char **)(section_info + 0x18);\n    if ((*(byte *)(section_info + 0x14) & 8) == 0) {\n      address_section_name = address_section_name + (long)linked_section_name;\n    }\n    concatenated_section_name[0x28] = concatenated_section_name[0x28] | 1;\n    section_name = *sections;\n    *(char **)(concatenated_section_name + 0x30) = address_section_name;\n    *(char **)(concatenated_section_name + 0x38) = address_section_name;\n    linked_section_name = sections[7];\n    section_info = find_section_list(section_name,0,0x60);\n    if (section_info != 0) goto LAB_00115860;\nLAB_00115695:\n    address_section_name = *sections;\n    *(char **)(concatenated_section_name + 0x38) = linked_section_name + change_section_address;\n    section_info = find_section_list(address_section_name,0,0x200);\n    if (section_info == 0) goto LAB_001156b8;\nLAB_00115889:\n    current_flags = *(uint *)(section_info + 0x2c);\n    if (0x3e < current_flags) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(concatenated_section_name + 0x7c) = current_flags;\n    *(undefined4 *)(concatenated_section_name + 0xb4) = *(undefined4 *)((long)sections + 0xb4);\n    concatenated_section_name[0x28] = concatenated_section_name[0x28] & 0xcfU | *(byte *)(sections + 5) & 0x30;\n    sections[0xc] = concatenated_section_name;\n    sections[0xb] = (char *)0x0;\n    if ((*(byte *)((long)sections + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    linked_section_name = sections[0x1a];\n    section_info = group_signature_isra_0(linked_section_name,sections[0x1c]);\n    if ((section_info == 0) ||\n       (result = *(long *)(binary + 8), *(uint *)(section_info + 0x18) = *(uint *)(section_info + 0x18) | 0x20,\n       *(int *)(result + 8) != 5)) goto LAB_00115700;\n    *(long *)(linked_section_name + 0xb0) = section_info;\n    is_strip_section = (**(code **)(*(long *)(param_3 + 8) + 0x158))(binary,sections,param_3,concatenated_section_name);\n    if (is_strip_section == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (is_flag_zero) {\n    *(undefined4 *)(*(long *)(concatenated_section_name + 0xd0) + 4) = 8;\n  }\n  if (error_message == 0) {\n    return;\n  }\nLAB_001080d1:\n  status = 1;\n  bfd_nonfatal_message(0,param_3,concatenated_section_name,error_message);\n  return;\n}\n\n",
            "called": [
                "check_new_section_flags",
                "is_strip_section.isra.0",
                "find_section_list",
                "setup_section.cold",
                "strcpy",
                "strcat",
                "strlen",
                "dcgettext",
                "bfd_set_section_size",
                "bfd_convert_section_setup",
                "bfd_make_section_anyway_with_flags",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "update_symbol_type_0010a0bd",
                "param_1": "symbolAddress",
                "stab_modify_type": "modifySymbolType"
            },
            "code": "\nvoid updateSymbolType_0010a0bd(long symbolAddress)\n\n{\n  modifySymbolType(symbolAddress,0x6b,*(undefined4 *)(*(long *)(symbolAddress + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_type_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "check_and_demangle_type_00113e5e",
                "param_1": "input_string",
                "param_2": "param_array",
                "param_3": "param_size",
                "local_20": "input_ptr"
            },
            "code": "\nundefined8 check_and_demangle_type_00113e5e(undefined8 input_string,char **param_array,long param_size)\n\n{\n  char cVar1;\n  char *input_ptr [2];\n  \n  input_ptr[0] = *param_array;\n  *param_array = (char *)(param_size + 2);\n  if ((((long)(char *)(param_size + 2) - (long)input_ptr[0] < 5) ||\n      (cVar1 = startswith_lto_priv_0_lto_priv_0(input_ptr[0],\"type\"), cVar1 == '\\0')) ||\n     ((input_ptr[0][4] != '$' && (input_ptr[0][4] != '.')))) {\n    if (*input_ptr[0] != '_') {\n      return 1;\n    }\n    if (input_ptr[0][1] != '_') {\n      return 1;\n    }\n    if (input_ptr[0][2] != 'o') {\n      return 1;\n    }\n    if (input_ptr[0][3] != 'p') {\n      return 1;\n    }\n    input_ptr[0] = input_ptr[0] + 4;\n  }\n  else {\n    input_ptr[0] = input_ptr[0] + 5;\n  }\n  cVar1 = stab_demangle_type_lto_priv_0(input_string,input_ptr,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "check_and_demangle_type_00113e5e"
        },
        "FUN_00104520": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104520"
        },
        "FUN_00104400": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "create_new_symbol",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104400"
        },
        "FUN_00104760": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "main",
                "mark_symbols_used_in_relocations.cold",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "fatal"
            ],
            "imported": false,
            "current_name": "FUN_00104760"
        },
        "FUN_00104640": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104640"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "transform_and_store_data_0010abdd",
                "param_1": "param",
                "param_2": "source",
                "param_3": "size",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "dataPtr1",
                "pcVar2": "dataPtr2",
                "bVar3": "byteVal1",
                "pcVar4": "dataPtr3",
                "__s": "dataPtr4",
                "sVar5": "length1",
                "sVar6": "length2",
                "sVar7": "length3",
                "sVar8": "length4",
                "uVar9": "result",
                "cVar10": "char1",
                "cVar11": "char2",
                "local_52": "localByte"
            },
            "code": "\nundefined8\ntransformAndStoreData_0010abdd(long param,char *source,uint size,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long dataPtr1;\n  char *dataPtr2;\n  byte byteVal1;\n  char *dataPtr3;\n  char *dataPtr4;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte localByte;\n  \n  dataPtr4 = (char *)0x0;\n  localByte = *(byte *)(*(long *)(param + 0x60) + 0x1c);\n  dataPtr3 = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    byteVal1 = 1;\n    if (localByte == 0) {\n      byteVal1 = *(byte *)(*(long *)(param + 0x60) + 0x1c);\n    }\n    localByte = byteVal1 & 1;\n    dataPtr4 = (char *)stab_pop_type(param);\n  }\n  dataPtr1 = *(long *)(param + 0x60);\n  if ((dataPtr1 == 0) || (dataPtr2 = *(char **)(dataPtr1 + 0x30), dataPtr2 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < size) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    length1 = strlen(dataPtr2);\n    length2 = strlen(dataPtr3);\n    length3 = strlen(source);\n    length4 = 0;\n    if (flag4 != '\\0') {\n      length4 = strlen(dataPtr4);\n    }\n    result = xrealloc(dataPtr2,length3 + length1 + 0x28 + length2 + length4);\n    *(undefined8 *)(dataPtr1 + 0x30) = result;\n    dataPtr2 = *(char **)(*(long *)(param + 0x60) + 0x30);\n    length1 = strlen(dataPtr2);\n    sprintf(dataPtr2 + length1,\"%s:%s;%c%c%c\",dataPtr3,source,(ulong)(byte)(0x32 - (char)size),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,length1);\n    free(dataPtr3);\n    if (flag4 != '\\0') {\n      dataPtr3 = *(char **)(*(long *)(param + 0x60) + 0x30);\n      length1 = strlen(dataPtr3);\n      sprintf(dataPtr3 + length1,\"%ld;%s;\",value,dataPtr4);\n      free(dataPtr4);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(param + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "xrealloc",
                "free",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_class_method_variant.lto_priv.0"
            ],
            "imported": false,
            "current_name": "transform_and_store_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "arguments",
                "param_3": "outputFormat",
                "uVar1": "arg1",
                "uVar2": "noteMessage"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *arguments,undefined8 outputFormat)\n\n{\n  undefined8 arg1;\n  undefined8 noteMessage;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(arguments[1] + 8) != 2)) {\n    arg1 = *arguments;\n    flags = flags & 0xf7ffffff;\n    noteMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(noteMessage,arg1,outputFormat);\n  }\n  return flags;\n}\n\n",
            "called": [
                "check_new_section_flags.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "setup_section",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00115f30"
        },
        "FUN_00104880": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_00104880"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "extract_result_001129f4",
                "param_1": "inputArray",
                "puVar1": "arrayPointer",
                "piVar2": "currentItem"
            },
            "code": "\nundefined8 extractResult_001129f4(int *inputArray)\n\n{\n  undefined8 *arrayPointer;\n  int *currentItem;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    arrayPointer = (undefined8 *)(inputArray + 4);\n    currentItem = **(int ***)(undefined8 *)*arrayPointer;\n  } while ((inputArray != currentItem) && (inputArray = currentItem, currentItem != (int *)0x0));\n  return ((undefined8 *)*arrayPointer)[1];\n}\n\n",
            "called": [
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "debug_get_real_type.isra.0",
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_qualified",
                "debug_get_type_name.constprop.0"
            ],
            "imported": false,
            "current_name": "extract_result_001129f4"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "invert_result_and_return_001082b3",
                "uVar1": "result"
            },
            "code": "\nuint invert_result_and_return_001082b3(void)\n\n{\n  uint result;\n  \n  result = is_dwo_section_constprop_0();\n  return result ^ 1;\n}\n\n",
            "called": [
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "invert_result_and_return_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "copy_archive_00114690",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "fileDescriptor",
                "param_4": "statStruct",
                "param_5": "bfdFlags",
                "param_6": "tempDir",
                "bVar1": "byteVar",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "stringPtr1",
                "pvVar7": "voidPtr1",
                "lVar8": "longVar1",
                "puVar9": "undefined8Ptr1",
                "piVar10": "intPtr1",
                "uVar11": "undefined8Var1",
                "uVar12": "undefined8Var2",
                "lVar13": "fileSize",
                "puVar14": "bfdPtr",
                "ppcVar16": "stringPtr2",
                "pcVar17": "stringVar1",
                "pcVar18": "stringVar2",
                "pcVar19": "stringVar3",
                "pcVar20": "functionPtr",
                "lVar21": "longVar2",
                "uVar22": "uintVar",
                "pcVar23": "stringVar4",
                "psVar24": "statPtr",
                "bVar25": "boolVar1",
                "bVar26": "byteVar2",
                "local_1a0": "undefined8Ptr2",
                "local_198": "longPtr1",
                "local_158": "statStruct2",
                "local_c8": "voidPtrArray3",
                "uStack_b0": "uintStackVar",
                "lStack_98": "longStackVar"
            },
            "code": "\nvoid copyArchive_00114690(undefined8 inputFile,undefined8 outputFile,int fileDescriptor,undefined8 statStruct,\n                 undefined8 bfdFlags,long tempDir,undefined8 param_7)\n\n{\n  byte byteVar;\n  char charVar1;\n  char charVar2;\n  int intVar1;\n  int intVar2;\n  char **stringPtr1;\n  void *voidPtr1;\n  long longVar1;\n  undefined8 *undefined8Ptr1;\n  int *intPtr1;\n  undefined8 undefined8Var1;\n  undefined8 undefined8Var2;\n  long fileSize;\n  undefined8 *bfdPtr;\n  char *pcVar15;\n  char **stringPtr2;\n  char *stringVar1;\n  char *stringVar2;\n  undefined8 *__ptr;\n  char **pstringVar3;\n  code *functionPtr;\n  long longVar2;\n  uint uintVar;\n  char *stringVar4;\n  stat *statPtr;\n  bool boolVar1;\n  byte byteVar2;\n  undefined8 *undefined8Ptr2;\n  long *longPtr1;\n  stat statStruct2;\n  void *voidPtrArray3 [3];\n  uint uintStackVar;\n  long longStackVar;\n  \n  byteVar2 = 0;\n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    if (fileSize == 0) {\n      undefined8Var2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      non_fatal(undefined8Var2,inputFile);\n    }\n    status = 1;\n    return;\n  }\n  bfdPtr = (undefined8 *)bfd_openr(inputFile,bfdFlags);\n  if ((bfdPtr == (undefined8 *)0x0) || (intVar2 = bfd_stat(bfdPtr,statStruct), intVar2 != 0)) {\n    bfd_nonfatal_message(inputFile,0,0,0);\n    status = 1;\n    return;\n  }\n  switch(do_debug_sections) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0x8000;\n  }\n  if (do_elf_stt_common == 1) {\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0xc0000;\n  }\n  else if (do_elf_stt_common == 2) {\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(bfdPtr,2);\n  if (charVar1 != '\\0') {\n    if (tempDir == 0) {\n      charVar1 = '\\0';\n      tempDir = *(long *)bfdPtr[1];\n    }\n    if (fileDescriptor < 0) {\n      undefined8Ptr2 = (undefined8 *)bfd_openw(outputFile,tempDir);\n    }\n    else {\n      undefined8Ptr2 = (undefined8 *)bfd_fdopenw(outputFile,tempDir,fileDescriptor);\n    }\n    if (undefined8Ptr2 != (undefined8 *)0x0) {\n      if (gnu_debuglink_filename != 0) {\n        undefined8Var2 = *bfdPtr;\n        undefined8Var1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        non_fatal(undefined8Var1,undefined8Var2);\n        gnu_debuglink_filename = 0;\n      }\n      set_long_section_mode(undefined8Ptr2,bfdPtr,long_section_names);\n      longPtr1 = undefined8Ptr2 + 0x1f;\n      if ((*(byte *)((long)bfdPtr + 0x49) & 0x10) != 0) {\n        status = 1;\n        bfd_set_error(5);\n        undefined8Var2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfd_nonfatal_message(0,bfdPtr,0,undefined8Var2);\n        return;\n      }\n      pcVar15 = (char *)make_tempdir(*undefined8Ptr2);\n      if (pcVar15 == (char *)0x0) {\n        intPtr1 = __errno_location();\n        pcVar15 = strerror(*intPtr1);\n        undefined8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        fatal(undefined8Var2,pcVar15);\n      }\n      if (strip_symbols == 7) {\n        byteVar = *(byte *)((long)bfdPtr + 0x49);\n        uintVar = 0;\n      }\n      else {\n        byteVar = *(byte *)((long)bfdPtr + 0x49);\n        uintVar = byteVar >> 3 & 1;\n      }\n      boolVar1 = deterministic != 0;\n      *(byte *)((long)undefined8Ptr2 + 0x49) =\n           byteVar & 0x10 | (byte)(uintVar << 3) | *(byte *)((long)undefined8Ptr2 + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)undefined8Ptr2 + 0x44) = *(uint *)((long)undefined8Ptr2 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      stringPtr2 = (char **)bfd_openr_next_archived_file(bfdPtr,0);\n      charVar2 = bfd_set_format(undefined8Ptr2,*(byte *)(bfdPtr + 9) & 7);\n      if (charVar2 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(0,undefined8Ptr2,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((status == 0 && (stringPtr2 != (char **)0x0))) {\n        stringVar2 = *stringPtr2;\n        stringVar1 = stringVar2;\n        if (*stringVar2 == '/') {\nLAB_0010527d:\n          undefined8Var2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          non_fatal(undefined8Var2,stringVar2);\nLAB_00104e93:\n          status = 1;\n          goto LAB_00114b4b;\n        }\n        while (*stringVar1 != '\\0') {\n          stringVar4 = stringVar1;\n          if ((*stringVar1 == '.') && (stringVar4 = stringVar1 + 1, stringVar1[1] == '.')) {\n            stringVar4 = stringVar1 + 2;\n            if ((stringVar1[2] == '\\0') || (stringVar1[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*stringVar4 != '\\0' && (*stringVar4 != '/')); stringVar4 = stringVar4 + 1) {\n          }\n          stringVar1 = stringVar4;\n          if (*stringVar4 == '/') {\n            extract_archive_001052a2();\n            return;\n          }\n        }\n        stringVar2 = (char *)concat(pcVar15,&DAT_0011b47d);\n        intVar2 = stat(stringVar2,&statStruct2);\n        undefined8Ptr1 = __ptr;\n        if (-1 < intVar2) {\n          fileSize = make_tempdir(stringVar2);\n          free(stringVar2);\n          if (fileSize == 0) {\n            intPtr1 = __errno_location();\n            stringVar2 = strerror(*intPtr1);\n            undefined8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            non_fatal(undefined8Var2,stringVar2);\n            goto LAB_00104e93;\n          }\n          undefined8Ptr1 = (undefined8 *)xmalloc(0x18);\n          stringVar2 = *stringPtr2;\n          *undefined8Ptr1 = __ptr;\n          undefined8Ptr1[2] = 0;\n          undefined8Ptr1[1] = fileSize;\n          stringVar2 = (char *)concat(fileSize,&DAT_0011b47d,stringVar2);\n        }\n        intVar2 = 0;\n        if (preserve_dates != '\\0') {\n          statPtr = &statStruct2;\n          for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n            *(undefined4 *)&statPtr->st_dev = 0;\n            statPtr = (stat *)((long)statPtr + (ulong)byteVar2 * -8 + 4);\n          }\n          pstringVar3 = (char **)stringPtr2[0x1d];\n          if ((char **)stringPtr2[0x1d] == (char **)0x0) {\n            pstringVar3 = stringPtr2;\n          }\n          intVar2 = (**(code **)(pstringVar3[1] + 0x1e8))(stringPtr2,&statStruct2);\n          if (intVar2 != 0) {\n            stringVar1 = *stringPtr2;\n            undefined8Var2 = dcgettext(0,\"internal stat error on %s\",5);\n            non_fatal(undefined8Var2,stringVar1);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = stringVar2;\n        *__ptr = undefined8Ptr1;\n        __ptr[2] = 0;\n        charVar2 = bfd_check_format(stringPtr2,1);\n        if (charVar2 == '\\0') {\n          undefined8Var2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          bfd_nonfatal_message(0,stringPtr2,0,undefined8Var2);\n          pstringVar3 = (char **)bfd_openw(stringVar2,tempDir);\n          if (pstringVar3 == (char **)0x0) {\nLAB_00104e80:\n            bfd_nonfatal_message(stringVar2,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          stringPtr1 = (char **)stringPtr2[0x1d];\n          if ((char **)stringPtr2[0x1d] == (char **)0x0) {\n            stringPtr1 = stringPtr2;\n          }\n          intVar1 = (**(code **)(stringPtr1[1] + 0x1e8))(stringPtr2);\n          fileSize = longStackVar;\n          if (intVar1 == 0) {\n            if (longStackVar < 0) {\n              bfd_get_archive_filename(stringPtr2);\n              undefined8Var2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              non_fatal(undefined8Var2);\n            }\n            else {\n              intVar1 = bfd_seek(stringPtr2,0,0);\n              if (intVar1 == 0) {\n                if (verbose != '\\0') {\n                  stringVar1 = *pstringVar3;\n                  undefined8Var2 = bfd_get_archive_filename(stringPtr2);\n                  stringVar4 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(stringVar4,undefined8Var2,stringVar1);\n                }\n                voidPtr1 = (void *)xmalloc(0x2000);\n                for (; fileSize != 0; fileSize = fileSize - longVar2) {\n                  longVar2 = 0x2000;\n                  if (fileSize < 0x2001) {\n                    longVar2 = fileSize;\n                  }\n                  longVar1 = bfd_bread(voidPtr1,longVar2,stringPtr2);\n                  stringPtr1 = stringPtr2;\n                  if ((longVar2 != longVar1) ||\n                     (longVar1 = bfd_bwrite(voidPtr1,longVar2,pstringVar3), stringPtr1 = pstringVar3,\n                     longVar2 != longVar1)) {\n                    bfd_nonfatal_message(0,stringPtr1,0,0);\n                    free(voidPtr1);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*pstringVar3,uintStackVar | 0x100);\n                free(voidPtr1);\n                charVar2 = bfd_close_all_done(pstringVar3);\n                if (charVar2 == '\\0') {\n                  bfd_nonfatal_message(stringVar2,0,0,0);\n                  status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefined8Var2 = bfd_get_archive_filename(stringPtr2);\n              bfd_nonfatal(undefined8Var2);\n            }\n          }\n          else {\n            bfd_nonfatal_message(0,stringPtr2,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_close_all_done(pstringVar3);\n          if (charVar2 == '\\0') {\n            bfd_nonfatal_message(stringVar2,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(stringVar2);\n          status = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            pstringVar3 = (char **)bfd_openw(stringVar2,*(undefined8 *)stringPtr2[1]);\n          }\n          else {\n            pstringVar3 = (char **)bfd_openw(stringVar2,tempDir);\n          }\n          if (pstringVar3 == (char **)0x0) goto LAB_00104e80;\n          charVar2 = copy_object(stringPtr2,pstringVar3,param_7);\n          if (charVar2 == '\\0') {\n            intVar1 = bfd_get_arch(stringPtr2);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charVar2 = bfd_close_all_done(pstringVar3);\n            if (charVar2 == '\\0') {\n              bfd_nonfatal_message(stringVar2,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(pstringVar3);\n          if (charVar2 == '\\0') {\n            bfd_nonfatal_message(stringVar2,0,0,0);\n            status = 1;\n          }\nLAB_00114a86:\n          if ((preserve_dates != '\\0') && (intVar2 == 0)) {\n            set_times(stringVar2,&statStruct2);\n          }\n          fileSize = bfd_openr(stringVar2,tempDir);\n          __ptr[2] = fileSize;\n          *longPtr1 = fileSize;\n          longPtr1 = (long *)(fileSize + 0xf0);\n          pstringVar3 = (char **)bfd_openr_next_archived_file(bfdPtr);\n          bfd_close(stringPtr2);\n          stringPtr2 = pstringVar3;\n        }\n      }\n      *longPtr1 = 0;\n      voidPtr1 = (void *)xstrdup(*undefined8Ptr2);\n      if (status == 0) {\n        functionPtr = bfd_close;\n      }\n      else {\n        functionPtr = bfd_close_all_done;\n      }\n      charVar1 = (*functionPtr)(undefined8Ptr2);\n      if (charVar1 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(voidPtr1,0,0,0);\n      }\n      free(voidPtr1);\n      voidPtr1 = (void *)xstrdup(*bfdPtr);\n      charVar1 = bfd_close(bfdPtr);\n      if (charVar1 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(voidPtr1,0,0,0);\n      }\n      free(voidPtr1);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        bfdPtr = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = bfdPtr;\n      }\n      rmdir(pcVar15);\n      free(pcVar15);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    bfd_nonfatal_message(outputFile,0,0,0);\n    status = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(bfdPtr,1,voidPtrArray3);\n  if (charVar1 == '\\0') {\n    intVar2 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(bfdPtr,3,&statStruct2);\n    if (charVar1 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      bfd_nonfatal_message(inputFile,0,0,0);\n      if (intVar2 == 0xd) {\n        list_matching_formats(voidPtrArray3[0]);\n      }\n      if (intVar1 != 0xd) {\n        status = 1;\n        return;\n      }\n      list_matching_formats(statStruct2.st_dev);\n      status = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(voidPtrArray3[0]);\n    }\n  }\n  if (tempDir == 0) {\n    tempDir = *(long *)bfdPtr[1];\n  }\n  if (fileDescriptor < 0) {\n    fileSize = bfd_openw(outputFile,tempDir);\n  }\n  else {\n    fileSize = bfd_fdopenw(outputFile,tempDir,fileDescriptor);\n  }\n  if (fileSize == 0) goto LAB_00105231;\n  set_long_section_mode(fileSize,bfdPtr,long_section_names);\n  charVar1 = copy_object(bfdPtr,fileSize,param_7);\n  if (charVar1 == '\\0') {\n    status = 1;\n  }\n  else if (status == 0) {\n    charVar1 = bfd_close(fileSize);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_close_all_done(fileSize);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    status = 1;\n    bfd_nonfatal_message(outputFile,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(bfdPtr);\n  if (charVar1 == '\\0') {\n    status = 1;\n    bfd_nonfatal_message(inputFile,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_set_error",
                "bfd_check_format_matches",
                "strerror",
                "list_matching_formats",
                "bfd_openr",
                "close",
                "bfd_stat",
                "fatal",
                "dcgettext",
                "get_file_size",
                "bfd_nonfatal_message",
                "bfd_close_all_done",
                "copy_file.cold",
                "non_fatal",
                "bfd_set_format",
                "free",
                "bfd_get_error",
                "copy_object",
                "bfd_fdopenw",
                "bfd_check_format",
                "bfd_openw",
                "bfd_openr_next_archived_file",
                "bfd_close",
                "make_tempdir",
                "__errno_location",
                "set_long_section_mode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_archive_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_stab_int_type_0010b800",
                "param_1": "input",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "pCurrent",
                "uVar2": "result",
                "sVar3": "stringLength",
                "lVar4": "value",
                "lVar5": "mask",
                "local_8c": "formattedString",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 processStabIntType_0010b800(long input,int size,char flag)\n\n{\n  long *pCurrent;\n  undefined8 result;\n  size_t stringLength;\n  long value;\n  long mask;\n  undefined2 formattedString;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    value = input + 0xb8;\n    if (flag != '\\0') {\n      value = input + 0x78;\n    }\n    pCurrent = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *pCurrent;\n    if (value != 0) {\n      result = stab_push_defined_type(input,value,size);\n      return result;\n    }\n    value = *(long *)(input + 0x68);\n    *(long *)(input + 0x68) = value + 1;\n    *pCurrent = value;\n    sprintf((char *)&formattedString,\"%ld=r%ld;\",value,value);\n    if (flag == '\\0') {\n      mask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&formattedString);\n      sprintf((char *)((long)&formattedString + stringLength),\"%ld;%ld;\",-mask,mask + -1);\n    }\n    else {\n      stringLength = strlen((char *)&formattedString);\n      *(undefined2 *)((long)&formattedString + stringLength) = 0x3b30;\n      *(undefined *)((long)&formattedString + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formattedString + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formattedString + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = stab_push_string(input,&formattedString,value,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    non_fatal(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "dcgettext",
                "non_fatal",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_float_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_stab_int_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "parse_and_format_00109ed3",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "data",
                "param_4": "buffer",
                "param_5": "bufferSize",
                "uVar1": "dataType",
                "uVar2": "temp",
                "cVar3": "status",
                "pcVar4": "string",
                "sVar5": "stringLength",
                "__s": "formattedString",
                "lVar6": "index",
                "__ptr": "tempPointer",
                "uVar7": "result",
                "uVar8": "isDefined",
                "lVar9": "remaining",
                "uVar10": "newSize",
                "puVar11": "bytePointer",
                "bVar12": "zero"
            },
            "code": "\nundefined8 parseAndFormat_00109ed3(long input,uint flag,undefined4 data,long *buffer,ulong *bufferSize)\n\n{\n  ulong dataType;\n  ulong temp;\n  char status;\n  char *string;\n  size_t stringLength;\n  char *formattedString;\n  long index;\n  void *tempPointer;\n  undefined8 result;\n  undefined isDefined;\n  long remaining;\n  ulong newSize;\n  undefined *bytePointer;\n  byte zero;\n  \n  zero = 0;\n  index = *(long *)(input + 0x60);\n  if (index != 0) {\n    dataType = *(ulong *)(index + 0x10);\n    if (((long)dataType < 1) || (buffer == (long *)0x0)) {\n      isDefined = *(undefined *)(index + 0x1c);\n      string = (char *)stab_pop_type(input);\n      stringLength = strlen(string);\n      formattedString = (char *)xmalloc(stringLength + 2);\n      sprintf(formattedString,\"%c%s\",(ulong)flag,string);\n      free(string);\n      index = 0;\n    }\n    else {\n      newSize = *bufferSize;\n      if (newSize <= dataType) {\n        if (newSize == 0) {\n          newSize = 10;\n        }\n        for (; newSize <= dataType; newSize = newSize * 2) {\n        }\n        index = xrealloc(*buffer,newSize * 8);\n        temp = *bufferSize;\n        *buffer = index;\n        bytePointer = (undefined *)(index + temp * 8);\n        for (remaining = (newSize - temp) * 8; remaining != 0; remaining = remaining + -1) {\n          *bytePointer = 0;\n          bytePointer = bytePointer + (ulong)zero * -2 + 1;\n        }\n        *bufferSize = newSize;\n      }\n      index = *(long *)(*buffer + dataType * 8);\n      if ((index != 0) && (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0')) {\n        tempPointer = (void *)stab_pop_type(input);\n        free(tempPointer);\n        result = stab_push_defined_type(input,index,data);\n        return result;\n      }\n      index = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = index + 1;\n      string = (char *)stab_pop_type(input);\n      stringLength = strlen(string);\n      formattedString = (char *)xmalloc(stringLength + 0x14);\n      sprintf(formattedString,\"%ld=%c%s\",index,(ulong)flag,string);\n      free(string);\n      isDefined = 1;\n      *(long *)(*buffer + dataType * 8) = index;\n    }\n    status = stab_push_string(input,formattedString,index,isDefined,data);\n    if (status != '\\0') {\n      free(formattedString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "xrealloc",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_reference_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_and_format_00109ed3"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debugger_0010bbd3",
                "param_1": "debuggerInfo",
                "param_2": "filename",
                "puVar1": "previousDebugger",
                "puVar2": "currentDebugger",
                "puVar3": "newDebugger",
                "lVar4": "loopCounter",
                "puVar5": "ptr",
                "pcVar6": "filenamePtr",
                "bVar7": "bFlag",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugger_0010bbd3(long *debuggerInfo,char *filename,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *previousDebugger;\n  undefined4 *currentDebugger;\n  undefined4 *newDebugger;\n  long loopCounter;\n  undefined4 *ptr;\n  char *filenamePtr;\n  byte bFlag;\n  undefined returnValue [16];\n  \n  bFlag = 0;\n  filenamePtr = \"\";\n  if (filename != (char *)0x0) {\n    filenamePtr = filename;\n  }\n  currentDebugger = (undefined4 *)xmalloc(0x18);\n  ptr = currentDebugger;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr = 0;\n    ptr = ptr + (ulong)bFlag * -2 + 1;\n  }\n  *(char **)(currentDebugger + 2) = filenamePtr;\n  newDebugger = (undefined4 *)xmalloc(0x18);\n  debuggerInfo[2] = (long)currentDebugger;\n  ptr = newDebugger;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr = 0;\n    ptr = ptr + (ulong)bFlag * -2 + 1;\n  }\n  previousDebugger = (undefined8 *)debuggerInfo[1];\n  *(undefined4 **)(newDebugger + 2) = currentDebugger;\n  if (previousDebugger == (undefined8 *)0x0) {\n    if (*debuggerInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debuggerInfo = (long)newDebugger;\n  }\n  else {\n    *previousDebugger = newDebugger;\n  }\n  debuggerInfo[1] = (long)newDebugger;\n  debuggerInfo[5] = 0;\n  *(undefined (*) [16])(debuggerInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param_4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debugger_0010bbd3"
        },
        "FUN_00104410": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104410"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((do_debug_sections != 1) && ((do_debug_sections & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (do_elf_stt_common != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (extract_symbol == '\\0') {\n    if (set_start_set == '\\0') {\n      lVar35 = change_start + param_1[0x17];\n    }\n    else {\n      lVar35 = change_start + set_start;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~bfd_flags_to_clear & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)param_1 + 0x44));\n  if (strip_symbols == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_format_and_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = preserve_dates == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar35 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar35 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,osympp);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = add_sections,\n     cVar11 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30)\n  {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = gnu_debuglink_filename;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = isympp;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = improve_and_reverse_code_0010554f();\n    return uVar26;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &names_0;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = isympp + uStack_1f8;\n        plVar15 = isympp;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = add_sym_list;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(redefine_specific_htab);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = section_rename_list, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0'))\n            {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = prefix_symbols_string;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = prefix_symbols_string;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar30 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = convert_debugging == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,isympp);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(strip_specific_htab);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(keep_specific_htab), lVar35 != 0 ||\n              (lVar35 = htab_elements(localize_specific_htab), lVar35 != 0)) ||\n             (lVar35 = htab_elements(globalize_specific_htab), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 != 0 ||\n             (lVar35 = htab_elements(weaken_specific_htab), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(redefine_specific_htab), lVar35 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,osympp,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = add_sections; puVar38 = update_sections, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190),\n       lVar35 = gnu_debuglink_filename, cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = dump_sections;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "FUN_00107976",
                "bfd_set_format",
                "bfd_nonfatal_message",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00104650": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104650"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_matching_index_00115d00",
                "param_1": "inputArray",
                "param_2": "binaryData",
                "uVar1": "arrayLength",
                "lVar2": "matchingIndex"
            },
            "code": "\nlong findMatchingIndex_00115d00(long inputArray,long binaryData)\n\n{\n  uint arrayLength;\n  long matchingIndex;\n  \n  matchingIndex = isympp;\n  if (isympp != 0) {\n    if (*(int *)(*(long *)(binaryData + 8) + 8) == 5) {\n      if (*(int *)(inputArray + 0x28) == *(int *)(*(long *)(binaryData + 0x110) + 0xd40)) {\n        arrayLength = *(uint *)(inputArray + 0x2c);\n        if (arrayLength == 0) {\n          matchingIndex = 0;\n        }\n        else if ((ulong)arrayLength <\n                 *(ulong *)(*(long *)(binaryData + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryData + 8) + 0x380) + 0x340) + 5))\n        {\n          matchingIndex = *(long *)(isympp + (ulong)(arrayLength - 1) * 8);\n        }\n        else {\n          matchingIndex = 0;\n        }\n      }\n      else {\n        matchingIndex = 0;\n      }\n    }\n    else {\n      matchingIndex = 0;\n    }\n  }\n  return matchingIndex;\n}\n\n",
            "called": [
                "group_signature.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "is_strip_section.isra.0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "find_matching_index_00115d00"
        },
        "FUN_00104530": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104530"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_data_structure_00113c43",
                "param_1": "inputData_1",
                "param_2": "inputData_2",
                "param_3": "inputData_3",
                "param_4": "inputData_4",
                "param_5": "inputData_5",
                "param_6": "inputData_6",
                "lVar1": "typePointer",
                "plVar2": "allocatedMemory",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ninitializeDataStructure_00113c43(long inputData_1,long inputData_2,long inputData_3,long inputData_4,undefined inputData_5,\n            undefined8 inputData_6)\n\n{\n  long typePointer;\n  long *allocatedMemory;\n  undefined returnValue [16];\n  \n  if ((inputData_1 != 0) && (inputData_2 != 0)) {\n    typePointer = debug_make_type_constprop_0(0x10,0);\n    if (typePointer != 0) {\n      allocatedMemory = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocatedMemory + 0x21) = 0;\n      *allocatedMemory = inputData_1;\n      *(undefined4 *)((long)allocatedMemory + 0x24) = 0;\n      allocatedMemory[1] = inputData_2;\n      allocatedMemory[2] = inputData_3;\n      allocatedMemory[3] = inputData_4;\n      *(undefined *)(allocatedMemory + 4) = inputData_5;\n      *(long **)(typePointer + 0x10) = allocatedMemory;\n      goto LAB_00113caa;\n    }\n  }\n  typePointer = 0;\nLAB_00113caa:\n  returnValue._8_8_ = inputData_6;\n  returnValue._0_8_ = typePointer;\n  return returnValue;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113c43"
        },
        "FUN_00104890": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "main",
                "set_times.cold",
                "get_file_size.cold",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "section_add_load_file.cold",
                "smart_rename.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104890"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "debugger_record_00112a33",
                "param_1": "ptrToStruct",
                "param_2": "param1",
                "param_3": "ptrToData",
                "param_4": "inputCode",
                "param_5": "param2",
                "param_6": "param3",
                "param_7": "flags",
                "uVar1": "returnValue",
                "lVar2": "result",
                "plVar3": "ptrToResult"
            },
            "code": "\nbool debuggerRecord_00112a33(undefined8 ptrToStruct,long param1,undefined8 ptrToData,byte inputCode,undefined8 param2\n                 ,undefined8 param3,uint flags)\n\n{\n  undefined returnValue;\n  long result;\n  long *ptrToResult;\n  \n  if (inputCode < 0x12) {\n    if (inputCode != 0) {\n      switch(inputCode) {\n      case 1:\n        returnValue = debug_record_variable\n                          (param2,*(undefined8 *)(param1 + 8),param3,4,\n                           *(long *)(param1 + 0x10) + *(long *)(*(long *)(param1 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        returnValue = debug_record_variable\n                          (param2,*(undefined8 *)(param1 + 8),param3,(flags & 0xff) + 2,\n                           *(long *)(param1 + 0x10) + *(long *)(*(long *)(param1 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 4:\n        returnValue = debug_record_variable\n                          (param2,*(undefined8 *)(param1 + 8),param3,5,\n                           *(long *)(param1 + 0x10) + *(long *)(*(long *)(param1 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 9:\n        returnValue = debug_record_parameter\n                          (param2,*(undefined8 *)(param1 + 8),param3,1,\n                           *(long *)(param1 + 0x10) + *(long *)(*(long *)(param1 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 10:\n      case 0xc:\n      case 0xf:\n        result = debug_tag_type(param2,*(undefined8 *)(param1 + 8));\n        if (result == 0) {\n          return false;\n        }\n        ptrToResult = (long *)coff_get_slot_lto_priv_0(ptrToStruct,ptrToData);\n        *ptrToResult = result;\n        break;\n      case 0xd:\n        result = debug_name_type(param2,*(undefined8 *)(param1 + 8));\n        return result != 0;\n      case 0x11:\n        returnValue = debug_record_parameter\n                          (param2,*(undefined8 *)(param1 + 8),param3,2,\n                           *(long *)(param1 + 0x10) + *(long *)(*(long *)(param1 + 0x20) + 0x30));\n        return (bool)returnValue;\n      }\n    }\n  }\n  else if (inputCode == 0x7f) {\nswitchD_00112a73_caseD_2:\n    returnValue = debug_record_variable\n                      (param2,*(undefined8 *)(param1 + 8),param3,1,\n                       *(long *)(param1 + 0x10) + *(long *)(*(long *)(param1 + 0x20) + 0x30));\n    return (bool)returnValue;\n  }\n  return true;\n}\n\n",
            "called": [
                "debug_name_type",
                "debug_tag_type",
                "coff_get_slot.lto_priv.0",
                "debug_record_variable",
                "debug_record_parameter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debugger_record_00112a33"
        },
        "FUN_00104770": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104770"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_type_0010c2d2",
                "param_1": "debugger",
                "param_2": "typeTable",
                "param_3": "typeCode",
                "uVar1": "typeIndex",
                "pcVar2": "typeName",
                "uVar3": "debugType",
                "lVar4": "type",
                "plVar5": "ptrType",
                "uVar6": "complement"
            },
            "code": "\n\n\nlong getType_0010c2d2(undefined8 debugger,long typeTable,int *typeCode)\n\n{\n  uint typeIndex;\n  char *typeName;\n  undefined8 debugType;\n  long type;\n  long *ptrType;\n  uint complement;\n  \n  if ((*typeCode == 0) && (typeIndex = typeCode[1], (int)typeIndex < 0)) {\n    complement = ~typeIndex;\n    if (complement < 0x22) {\n      type = *(long *)(typeTable + 0x90 + (ulong)complement * 8);\n      if (type == 0) {\n        switch(complement) {\n        case 1:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeName = \"char\";\n          break;\n        case 2:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeName = \"short\";\n          break;\n        case 3:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeName = \"long\";\n          break;\n        case 4:\n          debugType = debug_make_int_type_isra_0(1,1);\n          typeName = \"unsigned char\";\n          break;\n        case 5:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeName = \"signed char\";\n          break;\n        case 6:\n          debugType = debug_make_int_type_isra_0(2,1);\n          typeName = \"unsigned short\";\n          break;\n        case 7:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned int\";\n          break;\n        case 8:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned\";\n          break;\n        case 9:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned long\";\n          break;\n        case 10:\n          debugType = debug_make_void_type_isra_0();\n          typeName = \"void\";\n          break;\n        case 0xb:\n          debugType = debug_make_float_type_isra_0(4);\n          typeName = \"float\";\n          break;\n        case 0xc:\n          debugType = debug_make_float_type_isra_0(8);\n          typeName = \"double\";\n          break;\n        case 0xd:\n          debugType = debug_make_float_type_isra_0(8);\n          typeName = \"long double\";\n          break;\n        case 0xe:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeName = \"integer\";\n          break;\n        case 0xf:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeName = \"boolean\";\n          break;\n        case 0x10:\n          debugType = debug_make_float_type_isra_0(4);\n          typeName = \"short real\";\n          break;\n        case 0x11:\n          debugType = debug_make_float_type_isra_0(8);\n          typeName = \"real\";\n          break;\n        case 0x12:\n          typeName = \"stringptr\";\n          debugType = 0;\n          break;\n        case 0x13:\n          debugType = debug_make_int_type_isra_0(1,1);\n          typeName = \"character\";\n          break;\n        case 0x14:\n          debugType = debug_make_type_constprop_0(6,1);\n          typeName = \"logical*1\";\n          break;\n        case 0x15:\n          debugType = debug_make_type_constprop_0(6,2);\n          typeName = \"logical*2\";\n          break;\n        case 0x16:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeName = \"logical*4\";\n          break;\n        case 0x17:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeName = \"logical\";\n          break;\n        case 0x18:\n          debugType = debug_make_type_constprop_0(5,8);\n          typeName = \"complex\";\n          break;\n        case 0x19:\n          debugType = debug_make_type_constprop_0(5,0x10);\n          typeName = \"double complex\";\n          break;\n        case 0x1a:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeName = \"integer*1\";\n          break;\n        case 0x1b:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeName = \"integer*2\";\n          break;\n        case 0x1c:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeName = \"integer*4\";\n          break;\n        case 0x1d:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeName = \"wchar\";\n          break;\n        case 0x1e:\n          debugType = debug_make_int_type_isra_0(8,0);\n          typeName = \"long long\";\n          break;\n        case 0x1f:\n          debugType = debug_make_int_type_isra_0(8,1);\n          typeName = \"unsigned long long\";\n          break;\n        case 0x20:\n          debugType = debug_make_type_constprop_0(6,8);\n          typeName = \"logical*8\";\n          break;\n        case 0x21:\n          debugType = debug_make_int_type_isra_0(8,0);\n          typeName = \"integer*8\";\n          break;\n        default:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeName = \"int\";\n        }\n        type = debug_name_type(debugger,typeName,debugType);\n        *(long *)(typeTable + 0x90 + (ulong)complement * 8) = type;\n        return type;\n      }\n      return type;\n    }\n    typeName = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeName,(ulong)typeIndex);\n  }\n  else {\n    ptrType = (long *)stab_find_slot(typeTable);\n    if (ptrType != (long *)0x0) {\n      if (*ptrType == 0) {\n        type = debug_make_indirect_type_isra_0(ptrType,0);\n        return type;\n      }\n      return *ptrType;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_name_type",
                "dcgettext",
                "debug_make_indirect_type.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_type.constprop.0",
                "stab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_coff_data_0010e07c",
                "param_2": "coff_data",
                "lVar1": "symbol_table",
                "lVar2": "symbol_entry",
                "lVar3": "symbol_index",
                "cVar4": "result",
                "uVar5": "error_code",
                "__ptr": "parsed_data",
                "uVar6": "type_data",
                "uVar7": "aux_data",
                "puVar8": "parsed_entry",
                "pcVar9": "error_msg",
                "puVar10": "aux_data_ptr",
                "uVar11": "value",
                "lVar12": "entry_count",
                "iVar13": "aux_offset",
                "iVar14": "initial_entry_count",
                "local_a8": "local_var1",
                "uStack_a4": "local_var2",
                "uStack_a0": "local_var3",
                "uStack_9c": "local_var4",
                "local_88": "syment_buffer",
                "local_6a": "local_var5",
                "local_68": "local_var6",
                "local_67": "local_var7",
                "local_60": "aux_data_buffer",
                "local_56": "local_var8"
            },
            "code": "\nundefined8\nparse_coff_data_0010e07c(undefined8 param_1,long *coff_data,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long symbol_table;\n  long symbol_entry;\n  long symbol_index;\n  char result;\n  undefined4 error_code;\n  void *parsed_data;\n  undefined8 type_data;\n  undefined8 aux_data;\n  undefined4 *parsed_entry;\n  char *error_msg;\n  undefined *aux_data_ptr;\n  uint value;\n  long entry_count;\n  int aux_offset;\n  int initial_entry_count;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined syment_buffer [30];\n  undefined2 local_var5;\n  byte local_var6;\n  byte local_var7;\n  undefined aux_data_buffer [10];\n  ushort local_var8;\n  \n  initial_entry_count = 10;\n  entry_count = 0;\n  symbol_table = *(long *)(param_5 + 0x18);\n  parsed_data = (void *)xmalloc(0x50);\n  while ((coff_data[3] < symbol_table && (coff_data[2] < coff_data[1]))) {\n    symbol_entry = *(long *)(*coff_data + coff_data[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbol_entry,syment_buffer);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      type_data = bfd_errmsg(error_code);\n      error_msg = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      aux_data = dcgettext(0,error_msg,5);\n      non_fatal(aux_data,type_data);\n      free(parsed_data);\n      return 0;\n    }\n    symbol_index = coff_data[3];\n    aux_data_ptr = (undefined *)0x0;\n    coff_data[2] = coff_data[2] + 1;\n    coff_data[3] = symbol_index + 1 + (ulong)local_var7;\n    if (local_var7 != 0) {\n      aux_data_ptr = aux_data_buffer;\n      result = bfd_coff_get_auxent(param_1,symbol_entry,0,aux_data_ptr);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        type_data = bfd_errmsg(error_code);\n        error_msg = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_var6 == 0x12) {\n      value = (uint)local_var8;\n      aux_offset = (int)*(undefined8 *)(symbol_entry + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_entry + 0x20) + 0x30);\n    }\n    else {\n      if (local_var6 < 0x13) {\n        if ((local_var6 == 8) || (local_var6 == 0xb)) {\n          value = 0;\n          aux_offset = ((int)*(undefined8 *)(symbol_entry + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_entry + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_var6 == 0x66) break;\n      value = 0;\n      aux_offset = 0;\n    }\nLAB_0010e214:\n    aux_data = parse_coff_type_lto_priv_0(param_1,coff_data,param_3,symbol_index,local_var5,aux_data_ptr,1);\n    type_data = *(undefined8 *)(symbol_entry + 8);\n    parsed_entry = (undefined4 *)xmalloc(0x20);\n    local_var1 = (undefined4)type_data;\n    local_var2 = (undefined4)((ulong)type_data >> 0x20);\n    local_var3 = (undefined4)aux_data;\n    local_var4 = (undefined4)((ulong)aux_data >> 0x20);\n    *(undefined8 *)(parsed_entry + 5) = 0;\n    parsed_entry[6] = aux_offset;\n    parsed_entry[7] = value;\n    parsed_entry[4] = 0;\n    *parsed_entry = local_var1;\n    parsed_entry[1] = local_var2;\n    parsed_entry[2] = local_var3;\n    parsed_entry[3] = local_var4;\n    if (initial_entry_count <= (int)entry_count + 1) {\n      initial_entry_count = initial_entry_count + 10;\n      parsed_data = (void *)xrealloc(parsed_data,(long)initial_entry_count << 3,parsed_entry,0,param_6);\n    }\n    *(undefined4 **)((long)parsed_data + entry_count * 8) = parsed_entry;\n    entry_count = entry_count + 1;\n  }\n  *(undefined8 *)((long)parsed_data + (long)(int)entry_count * 8) = 0;\n  type_data = debug_make_struct_type_isra_0(param_4 == 8,*(undefined2 *)(param_5 + 10),parsed_data);\n  return type_data;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "parse_coff_type.lto_priv.0",
                "bfd_errmsg",
                "dcgettext",
                "non_fatal",
                "xrealloc",
                "free",
                "debug_make_struct_type.isra.0",
                "xmalloc",
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "parse_coff_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_coff_data_0010e07c"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_001082c3"
            },
            "code": "\nundefined8 initialize_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "group_signature.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "load_and_parse_file_00114460",
                "param_1": "filename",
                "param_2": "table",
                "param_3": "fileContent",
                "iVar1": "lineNumber",
                "piVar2": "errorPtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedText",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "file",
                "sVar5": "bytesRead",
                "ppbVar6": "slot",
                "pbVar7": "pointer",
                "bVar8": "byteValue",
                "pbVar9": "nextByte",
                "pbVar10": "currentByte",
                "pbVar11": "tempByte",
                "pbVar12": "startByte"
            },
            "code": "\nvoid loadAndParseFile_00114460(char *filename,undefined8 table,byte **fileContent)\n\n{\n  int lineNumber;\n  int *errorPtr;\n  char *errorMessage;\n  undefined8 translatedText;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *file;\n  size_t bytesRead;\n  byte **slot;\n  byte *pointer;\n  byte byteValue;\n  byte *nextByte;\n  byte *currentByte;\n  byte *tempByte;\n  byte *startByte;\n  \n  fileSize = get_file_size();\n  if (fileSize == 0) {\n    status = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    file = fopen(filename,\"r\");\n    if (file == (FILE *)0x0) {\n      errorPtr = __errno_location();\n      errorMessage = strerror(*errorPtr);\n      translatedText = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(translatedText,filename,errorMessage);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,file);\n    if ((bytesRead == 0) || (lineNumber = ferror(file), lineNumber != 0)) {\n      translatedText = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(translatedText,filename);\n    }\n    lineNumber = 1;\n    fclose(file);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    byteValue = *fileBuffer;\n    startByte = fileBuffer;\n    while (currentByte = startByte, byteValue != 0) {\n      for (; byteValue = *currentByte, tempByte = currentByte, byteValue != 10; currentByte = currentByte + 1) {\n        if ((char)byteValue < '\\v') {\n          if (byteValue == 0) {\n            nextByte = currentByte + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (byteValue == 0xd) {\n            *currentByte = 0;\n            nextByte = currentByte + 1;\n            if (currentByte[1] == 10) {\n              nextByte = currentByte + 2;\n              tempByte = currentByte + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (byteValue == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentByte = 0;\n      if (currentByte[1] == 0xd) {\n        tempByte = currentByte + 1;\n        nextByte = currentByte + 2;\n      }\n      else {\n        nextByte = currentByte + 1;\n      }\nLAB_00114553:\n      byteValue = *startByte;\n      while ((byteValue == 0x20 || (currentByte = startByte, byteValue == 9))) {\n        currentByte = startByte + 1;\n        startByte = startByte + 1;\n        byteValue = *currentByte;\n      }\n      do {\n        if ((byteValue == 10) || (byteValue == 0xd)) goto LAB_00114676;\n        if (byteValue == 0) goto LAB_00114599;\n        byteValue = currentByte[1];\n        currentByte = currentByte + 1;\n      } while ((byteValue != 0x20) && (byteValue != 9));\n      if ((char)byteValue < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (byteValue & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        byteValue = currentByte[1];\n        if ((((((byteValue == 9) || (byteValue == 0x20)) &&\n              ((byteValue = currentByte[2], byteValue == 9 || (byteValue == 0x20)))) &&\n             ((byteValue = currentByte[3], byteValue == 9 || (byteValue == 0x20)))) &&\n            ((byteValue = currentByte[4], byteValue == 9 || (byteValue == 0x20)))) &&\n           ((byteValue = currentByte[5], byteValue == 9 || (byteValue == 0x20)))) {\n          byteValue = currentByte[6];\n          pointer = currentByte + 6;\n          if ((byteValue == 9) || (byteValue == 0x20)) {\n            do {\n              do {\n                byteValue = pointer[1];\n                pointer = pointer + 1;\n              } while (byteValue == 0x20);\n            } while (byteValue == 9);\n          }\n        }\n        if ((0xd < byteValue) || ((-0x2402L >> (byteValue & 0x3f) & 1U) != 0)) {\n          translatedText = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(translatedText,filename,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentByte = 0;\n      if (startByte < currentByte) {\n        slot = (byte **)htab_find_slot(table,startByte,1);\n        *slot = startByte;\n      }\n      lineNumber = lineNumber + 1;\n      startByte = nextByte;\n      byteValue = tempByte[1];\n    }\n    *fileContent = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "strerror",
                "fclose",
                "dcgettext",
                "ferror",
                "get_file_size",
                "fread",
                "xmalloc",
                "fopen",
                "__errno_location",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "load_and_parse_file_00114460"
        },
        "FUN_001280f8": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280f8",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_001280f8"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "create_formatted_data_string_0010a94e",
                "param_1": "dataStructure",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "formatCode",
                "cVar1": "flag",
                "lVar2": "address",
                "__s": "type",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "pcVar7": "formattedString",
                "uVar8": "result",
                "pcVar9": "formatIndicator"
            },
            "code": "\nundefined8 createFormattedDataString_0010a94e(long dataStructure,char *string1,char *string2,int formatCode)\n\n{\n  char flag;\n  long address;\n  char *type;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *formattedString;\n  undefined8 result;\n  char *formatIndicator;\n  \n  flag = *(char *)(*(long *)(dataStructure + 0x60) + 0x1c);\n  type = (char *)stab_pop_type();\n  formattedString = *(char **)(*(long *)(dataStructure + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length1 = strlen(formattedString);\n    length2 = strlen(string1);\n    length3 = strlen(type);\n    length4 = strlen(string2);\n    formattedString = (char *)xmalloc(length1 + 10 + length2 + length3 + length4);\n    if (formatCode == 1) {\n      formatIndicator = \"/1\";\n    }\n    else {\n      formatIndicator = \"/0\";\n      if ((formatCode != 2) && (formatIndicator = \"\", formatCode != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(dataStructure + 0x60) + 0x20),string1,formatIndicator,\n            type,string2,*(long *)(dataStructure + 0x60));\n    free(*(void **)(*(long *)(dataStructure + 0x60) + 0x20));\n    address = *(long *)(dataStructure + 0x60);\n    *(char **)(address + 0x20) = formattedString;\n    if (flag != '\\0') {\n      *(undefined *)(address + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)address >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "create_formatted_data_string_0010a94e"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_real_type_00113b1e",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "initial_value",
                "param_4": "output_param",
                "auVar1": "result_1",
                "piVar2": "type_info",
                "uVar3": "real_type",
                "auVar4": "result_2"
            },
            "code": "\nundefined  [16] extract_real_type_00113b1e(long input_param,undefined8 unused_param,ulong initial_value,undefined8 output_param)\n\n{\n  undefined result_1 [16];\n  int *type_info;\n  undefined8 real_type;\n  undefined result_2 [16];\n  \n  if (input_param != 0) {\n    type_info = (int *)debug_get_real_type_isra_0(input_param,0);\n    if ((type_info == (int *)0x0) || (3 < *type_info - 7U)) {\n      real_type = 0;\n    }\n    else {\n      real_type = **(undefined8 **)(type_info + 4);\n    }\n    result_2._8_8_ = output_param;\n    result_2._0_8_ = real_type;\n    return result_2;\n  }\n  result_1._8_8_ = 0;\n  result_1._0_8_ = initial_value;\n  return result_1 << 0x40;\n}\n\n",
            "called": [
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "extract_real_type_00113b1e"
        },
        "FUN_00104300": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_set_filename",
                "debug_set_class_id.lto_priv.0",
                "bfd_get_archive_filename"
            ],
            "imported": false,
            "current_name": "FUN_00104300"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "format_and_push_string_0010a0e9",
                "param_1": "objectAddress",
                "param_2": "value1",
                "param_3": "value2",
                "__s": "string",
                "sVar3": "stringLength",
                "__s_00": "formattedString",
                "uVar1": "dataType",
                "uVar2": "returnValue"
            },
            "code": "\nundefined4 formatAndPushString_0010a0e9(long objectAddress,undefined8 value1,undefined8 value2)\n\n{\n  undefined dataType;\n  undefined4 returnValue;\n  char *string;\n  size_t stringLength;\n  char *formattedString;\n  \n  dataType = *(undefined *)(*(long *)(objectAddress + 0x60) + 0x1c);\n  returnValue = *(undefined4 *)(*(long *)(objectAddress + 0x60) + 0x18);\n  string = (char *)stab_pop_type();\n  stringLength = strlen(string);\n  formattedString = (char *)xmalloc(stringLength + 100);\n  sprintf(formattedString,\"r%s;%ld;%ld;\",string,value1,value2);\n  free(string);\n  returnValue = stab_push_string(objectAddress,formattedString,0,dataType,returnValue);\n  if ((char)returnValue != '\\0') {\n    free(formattedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "process_binary_00114c20",
                "param_1": "binaryAddress",
                "cVar1": "startsWithHeader",
                "pcVar2": "sectionAddress",
                "sections_removed": "numSectionsRemoved"
            },
            "code": "\nvoid processBinary_00114c20(long binaryAddress)\n\n{\n  char startsWithHeader;\n  char *sectionAddress;\n  \n  find_section_list(binaryAddress,1,1);\n  startsWithHeader = startswith_lto_priv_0_lto_priv_0(binaryAddress,&DAT_0011b499);\n  if (startsWithHeader != '\\0') {\n    sectionAddress = (char *)(binaryAddress + 5);\n    if (*(char *)(binaryAddress + 4) != 'a') {\n      sectionAddress = (char *)(binaryAddress + 4);\n    }\n    if (*sectionAddress != '\\0') {\n      find_section_list(sectionAddress,1,0x100);\n    }\n  }\n  numSectionsRemoved = 1;\n  return;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "find_section_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_binary_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_and_update_section_00115f50",
                "param_1": "sectionArray",
                "param_2": "symbolArray",
                "param_3": "flag",
                "__s1": "symbol",
                "uVar1": "comparisonResult",
                "uVar2": "returnStatus",
                "extraout_EDX": "extraStatus",
                "plVar3": "updateSectionPtr",
                "auVar4": "tmpVar"
            },
            "code": "\nuint checkAndUpdateSection_00115f50(long sectionArray,char **symbolArray,char flag)\n\n{\n  char *symbol;\n  uint comparisonResult;\n  undefined4 returnStatus;\n  undefined4 extraStatus;\n  long *updateSectionPtr;\n  undefined tmpVar [12];\n  \n  if ((status != 0) || (extract_symbol != '\\0')) {\n    return 1;\n  }\n  tmpVar = is_strip_section_isra_0(symbolArray);\n  if (tmpVar[0] == '\\0') {\n    if (update_sections != (long *)0x0) {\n      symbol = *symbolArray;\n      updateSectionPtr = update_sections;\n      do {\n        comparisonResult = strcmp(symbol,(char *)updateSectionPtr[1]);\n        tmpVar._4_4_ = 0;\n        tmpVar._0_4_ = comparisonResult;\n        tmpVar._8_4_ = extraStatus;\n        if (comparisonResult == 0) {\n          return 1;\n        }\n        updateSectionPtr = (long *)*updateSectionPtr;\n      } while (updateSectionPtr != (long *)0x0);\n    }\n    returnStatus = tmpVar._8_4_;\n    if (((((flag == '\\0') || (merge_notes == '\\0')) ||\n         (tmpVar._8_4_ = returnStatus, tmpVar._0_8_ = *(long *)(sectionArray + 8),\n         *(int *)(*(long *)(sectionArray + 8) + 8) != 5)) ||\n        ((tmpVar._0_8_ = (ulong)symbolArray[0x1a], *(int *)(symbolArray[0x1a] + 4) != 7 ||\n         (tmpVar = startswith_lto_priv_0_lto_priv_0(*symbolArray,\".gnu.build.attributes\"),\n         tmpVar[0] == '\\0')))) && ((*(byte *)((long)symbolArray + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(tmpVar._1_7_,symbolArray[8] == (char *)0x0) |\n             CONCAT31(tmpVar._9_3_,symbolArray[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_strip_section.isra.0",
                "startswith.lto_priv.0.lto_priv.0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "copy_relocations_in_section",
                "copy_section"
            ],
            "imported": false,
            "current_name": "check_and_update_section_00115f50"
        },
        "FUN_00104540": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "main",
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104540"
        },
        "FUN_00104420": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104420"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "handle_section_length_error_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "errorCode",
                "uVar1": "sectionLength",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSectionLengthError_001083de(void)\n\n{\n  undefined8 sectionLength;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 errorCode;\n  \n  sectionLength = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  fatal(errorMessage,sectionLength,errorCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "handle_section_length_error_001083de"
        },
        "FUN_00104780": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_00104780"
        },
        "FUN_00104660": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104660"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_stab_entry_0010b948",
                "param_1": "paramAddress",
                "param_2": "paramSize",
                "lVar1": "stabEntry",
                "cVar2": "isIntTypeLTO",
                "__ptr": "popPtr",
                "uVar3": "ulongParamSize",
                "uVar4": "decrementedParamSize",
                "local_5a": "formattedString"
            },
            "code": "\nvoid processStabEntry_0010b948(long paramAddress,uint paramSize)\n\n{\n  long stabEntry;\n  char isIntTypeLTO;\n  void *popPtr;\n  ulong ulongParamSize;\n  uint decrementedParamSize;\n  char formattedString [50];\n  \n  decrementedParamSize = paramSize - 1;\n  ulongParamSize = (ulong)paramSize;\n  if ((decrementedParamSize < 0x10) && (stabEntry = *(long *)(paramAddress + 0xf8 + (ulong)decrementedParamSize * 8), stabEntry != 0)) {\n    stab_push_defined_type(paramAddress,stabEntry,ulongParamSize);\n    return;\n  }\n  isIntTypeLTO = stab_int_type_lto_priv_0(paramAddress,4,0);\n  if (isIntTypeLTO != '\\0') {\n    popPtr = (void *)stab_pop_type(paramAddress);\n    stabEntry = *(long *)(paramAddress + 0x68);\n    *(long *)(paramAddress + 0x68) = stabEntry + 1;\n    if (decrementedParamSize < 0x10) {\n      *(long *)(paramAddress + 0xf8 + (ulong)decrementedParamSize * 8) = stabEntry;\n    }\n    sprintf(formattedString,\"%ld=r%s;%u;0;\",stabEntry,popPtr,ulongParamSize);\n    free(popPtr);\n    stab_push_string(paramAddress,formattedString,stabEntry,1,ulongParamSize);\n  }\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "free",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_stab_entry_0010b948"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "param_1": "inputParam",
                "param_2": "debugInfoParam",
                "iVar1": "param1Value",
                "__format": "formatString",
                "piVar3": "returnValue",
                "plVar4": "debugInfoPtr",
                "bVar5": "isCircular",
                "local_18": "localDebugInfoPtr",
                "local_10": "localInputParam"
            },
            "code": "\n\n\nint * getRealType_00112b6e(int *inputParam,long *debugInfoParam)\n\n{\n  int param1Value;\n  undefined8 uVar2;\n  char *formatString;\n  int *returnValue;\n  long *debugInfoPtr;\n  bool isCircular;\n  long *localDebugInfoPtr;\n  int *localInputParam;\n  \n  param1Value = *inputParam;\n  if ((param1Value != 1) && (1 < param1Value - 0x16U)) {\n    return inputParam;\n  }\n  debugInfoPtr = debugInfoParam;\n  while (debugInfoPtr != (long *)0x0) {\n    if ((inputParam == (int *)debugInfoPtr[1]) ||\n       (isCircular = debugInfoPtr == (long *)*debugInfoPtr, debugInfoPtr = (long *)*debugInfoPtr, isCircular)) {\n      uVar2 = debug_get_type_name_constprop_0\n                        (inputParam,\"debug_get_real_type: circular debug information for %s\\n\");\n      formatString = (char *)dcgettext(0);\n      fprintf(_stderr,formatString,uVar2);\n      return (int *)0x0;\n    }\n  }\n  localDebugInfoPtr = debugInfoParam;\n  localInputParam = inputParam;\n  if (param1Value - 0x16U < 2) {\n    returnValue = (int *)getRealType_00112b6e((*(undefined8 **)(inputParam + 4))[1],&localDebugInfoPtr);\n    return returnValue;\n  }\n  returnValue = *(int **)**(undefined8 **)(inputParam + 4);\n  if (inputParam == returnValue) {\n    return inputParam;\n  }\n  if (returnValue == (int *)0x0) {\n    return inputParam;\n  }\n  returnValue = (int *)getRealType_00112b6e(returnValue,&localDebugInfoPtr);\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "debug_get_real_type.isra.0",
                "dcgettext",
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "debug_get_real_type.isra.0",
                "debug_type_samep",
                "debug_write_type.constprop.0",
                "parse_stab_type",
                "debug_get_fields.isra.0"
            ],
            "imported": false,
            "current_name": "get_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "convert_to_struct_string_0010a83e",
                "param_1": "structurePointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "convertFlag",
                "param_7": "popTypeFlag",
                "uVar1": "returnValue",
                "__s": "string1",
                "__s_00": "string2",
                "sVar2": "stringLength",
                "cVar3": "charVar"
            },
            "code": "\nundefined4\nconvertToStructString_0010a83e(long structurePointer,undefined8 param2,ulong param3,undefined param4,ulong param5,\n            byte convertFlag,byte popTypeFlag)\n\n{\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t stringLength;\n  char charVar;\n  \n  if (((popTypeFlag ^ 1) & convertFlag) == 0) {\n    string1 = (char *)0x0;\n    charVar = '\\0';\n  }\n  else {\n    charVar = *(char *)(*(long *)(structurePointer + 0x60) + 0x1c);\n    string1 = (char *)stab_pop_type();\n    param5 = param5 & 0xffffffff;\n    param3 = param3 & 0xffffffff;\n  }\n  returnValue = stab_start_struct_type_lto_priv_0(structurePointer,param2,param3,param4,param5);\n  if ((char)returnValue != '\\0') {\n    if (convertFlag == 0) {\n      return returnValue;\n    }\n    if (popTypeFlag == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      stringLength = strlen(string1);\n      string2 = (char *)xmalloc(stringLength + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (charVar != '\\0') {\n        *(undefined *)(*(long *)(structurePointer + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(structurePointer + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(structurePointer + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(structurePointer + 0x60) + 0x38) = string2;\n    return returnValue;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "free",
                "xmalloc",
                "stab_start_struct_type.lto_priv.0",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "convert_to_struct_string_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_debug_type_entry_00113d6e",
                "param_1": "debug_type",
                "param_2": "debug_value",
                "lVar1": "debug_type_entry",
                "puVar2": "new_entry"
            },
            "code": "\nlong create_debug_type_entry_00113d6e(undefined8 debug_type,undefined8 debug_value)\n\n{\n  long debug_type_entry;\n  undefined8 *new_entry;\n  \n  debug_type_entry = debug_make_type_constprop_0(0xb,0);\n  if (debug_type_entry != 0) {\n    new_entry = (undefined8 *)xmalloc(0x10);\n    *new_entry = debug_type;\n    new_entry[1] = debug_value;\n    *(undefined8 **)(debug_type_entry + 0x10) = new_entry;\n  }\n  return debug_type_entry;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_type_entry_00113d6e"
        },
        "FUN_00104430": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104430"
        },
        "FUN_00104310": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "display_info.isra.0.cold",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104310"
        },
        "FUN_00104670": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "FUN_00104670"
        },
        "FUN_00104550": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104550"
        },
        "FUN_00104790": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "main",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_00104790"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_command_00114d50",
                "param_1": "commandPtr",
                "param_2": "dataPtr",
                "param_3": "status"
            },
            "code": "\nvoid executeCommand_00114d50(long commandPtr,long dataPtr,uint status)\n\n{\n  if (*(int *)(*(long *)(commandPtr + 8) + 8) != 2) {\n    return;\n  }\n  if ((status == 2) && (*(int *)(*(long *)(dataPtr + 8) + 8) == 2)) {\n    status = (uint)*(byte *)(*(long *)(*(long *)(dataPtr + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(commandPtr + 8) + 0x380) + 0x78))(commandPtr,status != 0);\n  return;\n}\n\n",
            "called": [
                "set_long_section_mode.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "execute_command_00114d50"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "file",
                "param_2": "errorCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108916(FILE *file,int errorCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(file,message,programName);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(file,message);\n  list_supported_targets(program_name,file);\n  if (errorCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "list_supported_targets",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_bfd_error_message_001126c0",
                "param_1": "errorFlag",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "archiveFileParam",
                "param_10": "bfdErrorCode",
                "param_11": "longPtrParam",
                "param_12": "errorMsgParam",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "al",
                "iVar1": "bfdError",
                "uVar2": "errorDescription",
                "local_100": "localVariable1",
                "local_fc": "localVariable2",
                "local_f8": "localVariable3",
                "local_f0": "localVariable4",
                "local_e8": "localArray",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "param1Copy",
                "local_a8": "param2Copy",
                "local_98": "param3Copy",
                "local_88": "param4Copy",
                "local_78": "param5Copy",
                "local_68": "param6Copy",
                "local_58": "param7Copy",
                "local_48": "param8Copy"
            },
            "code": "\n\n\nvoid printBfdErrorMessage_001126c0(undefined4 errorFlag,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 long archiveFileParam,long bfdErrorCode,long *longPtrParam,char *errorMsgParam,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char al;\n  int bfdError;\n  undefined8 errorDescription;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined *localVariable3;\n  undefined *localVariable4;\n  undefined localArray [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  undefined4 param5Copy;\n  undefined4 param6Copy;\n  undefined4 param7Copy;\n  undefined4 param8Copy;\n  \n  if (al != '\\0') {\n    param1Copy = errorFlag;\n    param2Copy = param2;\n    param3Copy = param3;\n    param4Copy = param4;\n    param5Copy = param5;\n    param6Copy = param6;\n    param7Copy = param7;\n    param8Copy = param8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorDescription = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorDescription = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(program_name,_stderr);\n  if (bfdErrorCode != 0) {\n    if (archiveFileParam == 0) {\n      archiveFileParam = bfd_get_archive_filename(bfdErrorCode);\n    }\n    if ((longPtrParam != (long *)0x0) && (*longPtrParam != 0)) {\n      fprintf(_stderr,\": %s[%s]\",archiveFileParam);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",archiveFileParam);\nLAB_001127c1:\n  if (errorMsgParam != (char *)0x0) {\n    localVariable3 = &stack0x00000008;\n    localVariable4 = localArray;\n    localVariable1 = 0x20;\n    localVariable2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,errorMsgParam,&localVariable1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorDescription);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "bfd_get_error",
                "vfprintf",
                "bfd_errmsg",
                "fputs",
                "dcgettext",
                "fwrite",
                "fflush",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "copy_object.cold",
                "FUN_0010808f",
                "copy_file.cold",
                "FUN_0010554f",
                "copy_object",
                "main",
                "FUN_001086af",
                "FUN_00108466",
                "copy_relocations_in_section",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "copy_section"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_001126c0"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_constant_type_00113b4a",
                "param_1": "inputValue",
                "lVar1": "constantType",
                "debug_make_type_constprop_0": "createConstantType"
            },
            "code": "\nlong initializeConstantType_00113b4a(long inputValue)\n\n{\n  long constantType;\n  \n  if (inputValue != 0) {\n    constantType = createConstantType(0x15,0);\n    if (constantType == 0) {\n      constantType = 0;\n    }\n    else {\n      *(long *)(constantType + 0x10) = inputValue;\n    }\n    return constantType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_constant_type_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_symbol_information_0010edb4",
                "param_1": "symbolTable",
                "param_2": "filename",
                "param_3": "symbolType",
                "param_4": "symbolSize",
                "cVar1": "writeResult",
                "iVar2": "filenameComparison",
                "uVar3": "writeResult",
                "in_R10": "additionalParam"
            },
            "code": "\nundefined8 updateSymbolInformation_0010edb4(long symbolTable,undefined8 filename,undefined4 symbolType,ulong symbolSize)\n\n{\n  char writeResult;\n  int filenameComparison;\n  undefined8 writeResult;\n  undefined8 additionalParam;\n  \n  if (*(long *)(symbolTable + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(symbolTable + 0x1f0) < symbolSize) {\n    *(ulong *)(symbolTable + 0x1f0) = symbolSize;\n  }\n  filenameComparison = filename_cmp(filename);\n  if (filenameComparison != 0) {\n    writeResult = stab_write_symbol_lto_priv_0(symbolTable,0x84,0,symbolSize,filename);\n    if (writeResult == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(symbolTable + 0x210) = filename;\n  }\n  writeResult = stab_write_symbol_lto_priv_0\n                    (symbolTable,0x44,symbolType,symbolSize - *(long *)(symbolTable + 0x200),0,additionalParam);\n  return writeResult;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "debug_write_linenos.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_information_0010edb4"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "reverse_and_modify_0010e5db",
                "param_1": "input",
                "param_2": "count",
                "__ptr": "ptr",
                "__s": "string",
                "sVar2": "length",
                "__s_00": "modifiedString",
                "in_R10": "value",
                "iVar3": "index",
                "auVar4": "result",
                "cVar1": "success"
            },
            "code": "\nundefined  [16] reverseAndModify_0010e5db(long input,int count)\n\n{\n  char success;\n  void *ptr;\n  char *string;\n  size_t length;\n  char *modifiedString;\n  ulong value;\n  int index;\n  undefined result [16];\n  \n  index = 0;\n  do {\n    if (count <= index) {\n      result = stab_modify_type(input,0x66,0,input + 0x188,input + 400,value);\n      return result;\n    }\n    if (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)stab_pop_type(input);\n      free(ptr);\n    }\n    else {\n      string = (char *)stab_pop_type(input);\n      length = strlen(string);\n      modifiedString = (char *)xmalloc(length + 3);\n      sprintf(modifiedString,\":t%s\",string);\n      free(string);\n      success = stab_write_symbol_lto_priv_0(input,0x80,0,0,modifiedString);\n      if (success == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = value;\n        return result << 0x40;\n      }\n      free(modifiedString);\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "stab_modify_type",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_and_modify_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_remove_00104d25",
                "param_7": "param",
                "status": "cleanupStatus"
            },
            "code": "\nvoid cleanupAndRemove_00104d25(void)\n\n{\n  undefined8 param;\n  \n  cleanupStatus = 1;\n  bfd_nonfatal_message(0,param,0,0);\n  remove_directory_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "bfd_nonfatal_message"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "cleanup_and_remove_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "improved_and_reversed_code_0010551d",
                "puVar1": "pointer",
                "bVar2": "byteVar",
                "puVar3": "undefinedPointer",
                "pcVar4": "functionPointer",
                "puVar5": "pointer",
                "uVar6": "ulongVar1",
                "uVar7": "ulongVar2",
                "__s": "charArray",
                "cVar8": "characterVar1",
                "cVar9": "characterVar2",
                "uVar10": "uintVar1",
                "iVar11": "intVar1",
                "uVar12": "uintVar2",
                "uVar13": "undefinedVar1",
                "iVar14": "intVar2",
                "plVar15": "longPointer2",
                "uVar16": "ulongVar3",
                "uVar17": "ulongVar4",
                "sVar18": "sizeVar1",
                "pcVar19": "charPointer5",
                "pcVar28": "charPointer4",
                "puVar29": "pointer1",
                "lVar21": "longVar1",
                "uVar20": "ulongVar5",
                "in_stack_00000018": "charVar1",
                "sVar26": "sizeVar2",
                "plVar32": "longPointer1",
                "uVar24": "ulongVar6",
                "lVar25": "longVar2",
                "lVar27": "longVar3",
                "pcVar33": "charPointer3",
                "unaff_RBP": "longVar4",
                "in_stack_000000e0": "voidPointer",
                "in_stack_00000140": "charPointer6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong improved_and_reversed_code_0010551d(void)\n\n{\n  uint *pointer;\n  byte byteVar;\n  undefined *undefinedPointer;\n  code *functionPointer;\n  undefined8 *pointer;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  char *charArray;\n  char characterVar1;\n  char characterVar2;\n  uint uintVar1;\n  int intVar1;\n  uint uintVar2;\n  undefined4 undefinedVar1;\n  int intVar2;\n  long *longPointer2;\n  undefined8 ulongVar3;\n  undefined8 ulongVar4;\n  size_t sizeVar1;\n  char *charPointer5;\n  void *__ptr;\n  void *__ptr_00;\n  ulong ulongVar5;\n  long longVar1;\n  ulong uVar22;\n  int *piVar23;\n  ulong ulongVar6;\n  long longVar2;\n  FILE *charArray_00;\n  size_t sizeVar2;\n  long longVar3;\n  long *unaff_RBX;\n  char *charPointer4;\n  undefined8 *pointer1;\n  ulong uVar30;\n  int iVar31;\n  long longVar4;\n  long *longPointer1;\n  char *charPointer3;\n  undefined4 *undefinedPointer4;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **pundefinedPointer7;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char charVar1;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *voidPointer;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *charPointer6;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  longVar4 = *(long *)(longVar4 + 8);\n  pointer1 = dump_sections;\n  if (longVar4 == 0) goto joined_r0x001151c7;\n  if (merge_notes != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(longVar4 + 0xd0) + 4) != 7)) ||\n        (characterVar2 = startswith_lto_priv_0_lto_priv_0(), characterVar2 == '\\0')) ||\n       ((*(long *)(longVar4 + 0x60) == 0 || (longVar2 = *(long *)(longVar4 + 0x40), longVar2 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    characterVar2 = bfd_get_full_section_contents();\n    if (characterVar2 != '\\0') {\n      longVar3 = merge_gnu_build_notes();\n      unaff_RBX[2] = longVar3;\n      if ((longVar3 == longVar2) || (characterVar2 = bfd_set_section_size(), characterVar2 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = longVar4;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,longVar4);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (longVar2 = *(long *)(longVar4 + 8); longVar2 != 0; longVar2 = *(long *)(longVar2 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointer1 != (undefined8 *)0x0; pointer1 = (undefined8 *)*pointer1) {\n    longVar2 = bfd_get_section_by_name();\n    if (longVar2 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(longVar2 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sizeVar1 = *(size_t *)(longVar2 + 0x40);\n      charArray_00 = fopen((char *)pointer1[2],\"w\");\n      if (charArray_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(pointer1[2],0,0);\n      }\n      else {\n        characterVar2 = bfd_malloc_and_get_section();\n        if (characterVar2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sizeVar1 != 0) &&\n                (sizeVar2 = fwrite(charPointer6,1,sizeVar1,charArray_00), sizeVar2 != sizeVar1)) {\n          piVar23 = __errno_location();\n          charPointer3 = strerror(*piVar23);\n          ulongVar4 = pointer1[2];\n          ulongVar3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(ulongVar3,ulongVar4,charPointer3);\n          free(charPointer6);\n          fclose(charArray_00);\n          return 0;\n        }\n        fclose(charArray_00);\n        free(charPointer6);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    longVar2 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (longVar2 != 0) {\n      ulongVar4 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(ulongVar4);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    longVar2 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      ulongVar4 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,ulongVar4,longVar2);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      ulongVar5 = 0;\n      for (ulongVar6 = *(ulong *)(in_stack_00000008 + 0x90); ulongVar6 != 0;\n          ulongVar6 = *(ulong *)(ulongVar6 + 8)) {\n        uVar22 = *(ulong *)(ulongVar6 + 0x30);\n        uVar30 = ulongVar5;\n        ulongVar1 = ulongVar6;\n        ulongVar2 = ulongVar5;\n        if (uVar22 != 0) {\n          while ((uVar30 = ulongVar1, ulongVar2 != 0 &&\n                 (uVar30 = ulongVar6, uVar22 <= *(ulong *)(ulongVar5 + 0x30)))) {\n            ulongVar6 = *(ulong *)(ulongVar6 + 8);\n            if (ulongVar6 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(ulongVar6 + 0x30);\n            ulongVar1 = ulongVar5;\n            ulongVar2 = uVar22;\n          }\n        }\n        ulongVar5 = uVar30;\n      }\nLAB_00107db8:\n      if (ulongVar5 == 0) {\n        ulongVar6 = 0x1000;\n      }\n      else {\n        ulongVar5 = *(long *)(ulongVar5 + 0x40) + *(long *)(ulongVar5 + 0x30);\n        ulongVar6 = 0xffffffffffffffff;\n        if (ulongVar5 < 0xfffffffffffff001) {\n          ulongVar6 = ulongVar5 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = ulongVar6;\n      *(ulong *)(lStack0000000000000078 + 0x38) = ulongVar6;\n    }\n  }\n  longPointer1 = isympp;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    ulongVar6 = improve_and_reverse_code_0010554f();\n    return ulongVar6;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pundefinedPointer7 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    undefinedPointer4 = puStack0000000000000020;\n    for (longVar2 = 0x18; longVar2 != 0; longVar2 = longVar2 + -1) {\n      *undefinedPointer4 = 0;\n      undefinedPointer4 = undefinedPointer4 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      undefinedPointer = *pundefinedPointer7;\n      longVar2 = bfd_get_section_by_name();\n      longVar3 = bfd_get_section_by_name();\n      if ((longVar2 != 0) && (longVar3 != 0)) {\n        longVar2 = *(long *)(longVar2 + 0x40);\n        __ptr = (void *)xmalloc(longVar2);\n        characterVar2 = bfd_get_section_contents();\n        if (characterVar2 == '\\0') {\n          undefinedVar1 = bfd_get_error();\n          bfd_errmsg(undefinedVar1);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          ulongVar6 = *(ulong *)(longVar3 + 0x40);\n          __ptr_00 = (void *)xmalloc(ulongVar6 + 1);\n          charVar1 = bfd_get_section_contents();\n          if (charVar1 == '\\0') {\n            undefinedVar1 = bfd_get_error();\n            bfd_errmsg(undefinedVar1);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + ulongVar6) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + longVar2 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                ulongVar5 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                byteVar = *(byte *)((long)pvVar36 + 4);\n                undefinedVar1 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                longVar3 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + longVar3;\n                }\n                else {\n                  uVar22 = (ulongVar5 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < ulongVar6) {\n                    charPointer3 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar1 = strlen(charPointer3);\n                      if (((sizeVar1 == 0) || (charPointer4 = charPointer3 + (sizeVar1 - 1), *charPointer4 != '\\')) ||\n                         ((ulong)((long)__ptr + longVar2) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *charPointer4 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intVar1 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      ulongVar5 = (ulong)(uint)(intVar1 + (int)lStack0000000000000088);\n                      if (ulongVar6 <= ulongVar5) break;\n                      charPointer3 = (char *)concat(charPointer3,(long)__ptr_00 + ulongVar5,0);\n                      *charPointer4 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = charPointer3;\n                    }\n                    ulongVar4 = *unaff_R14;\n                    charPointer4 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,charPointer4,ulongVar4,undefinedPointer,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byteVar,undefinedVar1,longVar3,charPointer3);\n                    characterVar2 = parse_stab(puStack0000000000000020,pcStack0000000000000038,byteVar);\n                    if (characterVar2 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulongVar4 = *unaff_R14;\n                    charPointer3 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,charPointer3,ulongVar4,undefinedPointer,((long)pvVar36 - (long)__ptr) / 0xc,\n                            ulongVar5 & 0xffffffff,(ulong)byteVar,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pundefinedPointer7 = pundefinedPointer7 + 2;\n    } while (pundefinedPointer7 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (characterVar2 = finish_stab(), characterVar2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      longVar2 = 0;\n      for (longPointer2 = longPointer1; longPointer2 < longPointer1 + in_stack_00000010; longPointer2 = longPointer2 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((longVar2 != 0) || (longVar2 = start_stab_constprop_0(), longVar2 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            charPointer3 = (char *)0x0;\n            charPointer4 = in_stack_00000150;\n            while (((*charPointer4 != '\\0' && (sizeVar1 = strlen(charPointer4), charPointer4[sizeVar1 - 1] == '\\')) &&\n                   (longPointer2 + 1 < longPointer1 + in_stack_00000010))) {\n              charPointer5 = (char *)xstrdup(charPointer4);\n              sizeVar1 = strlen(charPointer5);\n              charPointer5[sizeVar1 - 1] = '\\0';\n              charPointer4 = (char *)concat(charPointer5,*(undefined8 *)(longPointer2[1] + 8),0);\n              free(charPointer5);\n              free(charPointer3);\n              longPointer2 = longPointer2 + 1;\n              charPointer3 = charPointer4;\n            }\n            save_stab(uStack0000000000000158,(int)sStack000000000000015a,charPointer6,charPointer4);\n            charVar1 = parse_stab(puStack0000000000000020,longVar2,uStack0000000000000158);\n            if (charVar1 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((longVar2 != 0) && (characterVar2 = finish_stab(), characterVar2 == '\\0')) goto LAB_00105981;\n    }\n    if (charVar1 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        charPointer3 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      charPointer6 = (char *)0x0;\n      in_stack_000000c0 = longPointer1;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      pointer1 = (undefined8 *)&stack0x00000148;\n      for (longVar2 = 0x22; longVar2 != 0; longVar2 = longVar2 + -1) {\n        *(undefined4 *)pointer1 = 0;\n        pointer1 = (undefined8 *)((long)pointer1 + (ulong)bVar39 * -8 + 4);\n      }\n      characterVar2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        longVar2 = longPointer1[in_stack_000000d0];\n        characterVar1 = bfd_coff_get_syment();\n        longVar3 = in_stack_000000d8;\n        if (characterVar1 == '\\0') {\n          undefinedVar1 = bfd_get_error();\n          bfd_errmsg(undefinedVar1);\n          charPointer3 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulongVar4 = dcgettext(0,charPointer3,5);\n          non_fatal(ulongVar4);\n          goto LAB_00105981;\n        }\n        charPointer3 = *(char **)(longVar2 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (characterVar1 = bfd_coff_get_auxent(), characterVar1 == '\\0')) {\n          undefinedVar1 = bfd_get_error();\n          bfd_errmsg(undefinedVar1);\n          charPointer3 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)longVar3) {\n          if (bStack0000000000000100 != 0x67) {\n            characterVar1 = debug_set_filename(puStack0000000000000020);\n            if (characterVar1 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          characterVar1 = debug_set_filename(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = charPointer3;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar1 = strcmp(charPointer3,\".bb\");\n              if (intVar1 == 0) {\n                characterVar1 = debug_start_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar1 = strcmp(charPointer3,\".eb\");\n              if (intVar1 == 0) {\n                characterVar1 = debug_end_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar1 = strcmp(charPointer3,\".bf\");\n              if (intVar1 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  longVar3 = parse_coff_type_lto_priv_0();\n                  if ((longVar3 == 0) ||\n                     (characterVar2 = debug_record_function(puStack0000000000000020), characterVar2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar1 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar1 = in_stack_00000118 - 1;\n                    }\n                    longVar2 = *(long *)(*(long *)(longVar2 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      characterVar1 = debug_record_line(puStack0000000000000020,intVar1 + iVar31,\n                                                *(long *)(_uStack0000000000000048 + 6) + longVar2);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (characterVar1 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                charPointer3 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar1 = strcmp(charPointer3,\".ef\");\n                if (intVar1 != 0) goto switchD_00106e1a_caseD_68;\n                if (characterVar2 != '\\0') {\n                  characterVar2 = debug_end_function(puStack0000000000000020);\n                  if (characterVar2 == '\\0') goto LAB_00105981;\n                  characterVar2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                charPointer3 = \"%ld: unexpected .ef\\n\";\n              }\n              ulongVar4 = dcgettext(0,charPointer3,5);\n              non_fatal(ulongVar4);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longVar1 = parse_coff_type_lto_priv_0();\n          if (longVar1 == 0) goto LAB_00105981;\n          characterVar1 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,longVar2,longVar3);\n        }\njoined_r0x00107247:\n        if (characterVar1 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') &&\n       (keep_section_symbols == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        longPointer1 = isympp + in_stack_00000010;\n        longPointer2 = isympp;\n        do {\n          uintVar1 = *(uint *)(*longPointer2 + 0x18);\n          if ((uintVar1 & 0x1000000) != 0) {\n            *(uint *)(*longPointer2 + 0x18) = uintVar1 & 0xfeffffff;\n          }\n          longPointer2 = longPointer2 + 1;\n        } while (longPointer1 != longPointer2);\n      }\n    }\n    else {\n      for (longVar2 = *(long *)(in_stack_00000008 + 0x90); longVar2 != 0; longVar2 = *(long *)(longVar2 + 8)\n          ) {\n        if (*(long *)(longVar2 + 0xe8) != 0) {\n          pointer = (uint *)(*(long *)(longVar2 + 0xe8) + 0x18);\n          *pointer = *pointer | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar1 = bfd_get_error();\n      if (intVar1 != 0) {\n        status = 1;\n        return 0;\n      }\n    }\n    longVar2 = xmalloc();\n    longPointer1 = isympp;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    osympp = longVar2;\n    if (in_stack_00000010 == 0) {\n      ulongVar6 = 0;\n    }\n    else {\n      ulongVar6 = 0;\n      _charVar1 = 0;\n      do {\n        intVar1 = add_symbols;\n        longPointer2 = (long *)longPointer1[_charVar1];\n        functionPointer = (code *)longPointer2[4];\n        uintVar1 = *(uint *)(longPointer2 + 3);\n        charPointer3 = (char *)longPointer2[1];\n        charPointer4 = charPointer3;\n        if (add_sym_list != (undefined8 *)0x0) {\n          iVar31 = 0;\n          pointer1 = add_sym_list;\n          while( true ) {\n            if ((intVar1 <= iVar31) || (charPointer5 = (char *)pointer1[5], charPointer5 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (charPointer5 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          intVar2 = strcmp(charPointer5,charPointer3);\n          if (intVar2 != 0) {\n            pointer1 = (undefined8 *)*pointer1;\n            goto LAB_0010750b;\n          }\n          free(charPointer5);\n          ulongVar5 = ulongVar6 + 1;\n          pointer1[5] = \"\";\n          ulongVar3 = create_new_symbol(pointer1);\n          ulongVar4 = redefine_specific_htab;\n          *(undefined8 *)(longVar2 + ulongVar6 * 8) = ulongVar3;\n          longVar3 = htab_elements(ulongVar4);\n          if ((longVar3 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          characterVar2 = *charPointer3;\n          if (characterVar2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          charPointer3 = prefix_symbols_string;\n          if ((change_leading_char != '\\0') &&\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')) {\n            longVar3 = unaff_R14[1];\n            characterVar2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        longVar3 = htab_elements(redefine_specific_htab);\n        ulongVar5 = ulongVar6;\n        if ((longVar3 == 0) && (section_rename_list == (char **)0x0)) goto LAB_00105af8;\n        if (charPointer3 != (char *)0x0) {\nLAB_001064eb:\n          if (((*charPointer3 == '_') && (charPointer3[1] == '_')) &&\n             (intVar1 = strcmp(charPointer3 + (charPointer3[2] == '_'),\"__gnu_lto_slim\"), intVar1 == 0)) {\n            ulongVar4 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(ulongVar4);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        charPointer6 = charPointer3;\n        longVar3 = htab_find(redefine_specific_htab);\n        if (((longVar3 == 0) || (charPointer4 = *(char **)(longVar3 + 8), charPointer3 == charPointer4)) &&\n           (charPointer4 = charPointer3, ppcVar35 = section_rename_list, (uintVar1 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            intVar1 = strcmp(*ppcVar35,charPointer3);\n            if (intVar1 == 0) {\n              charPointer4 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        longPointer2[1] = (long)charPointer4;\n        characterVar2 = *charPointer4;\n        if (characterVar2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        charPointer3 = prefix_symbols_string;\n        longVar3 = unaff_R14[1];\n        if (*(char *)(longVar3 + 0x1c) == characterVar2) {\n          if (change_leading_char == '\\0') {\n            if ((remove_leading_char == '\\0') ||\n               ((((uintVar1 & 0x82) == 0 && (functionPointer != bfd_map_over_sections)) &&\n                ((*(byte *)(longPointer2[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            charPointer4 = charPointer4 + 1;\n            longPointer2[1] = (long)charPointer4;\n            goto joined_r0x00106565;\n          }\n          characterVar2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (characterVar2 == '\\0') goto LAB_0010677d;\n          if (prefix_symbols_string != (char *)0x0) {\n            charPointer4 = charPointer4 + 1;\n            longPointer2[1] = (long)charPointer4;\n            sizeVar1 = strlen(charPointer4);\n            longVar3 = sizeVar1 + 2;\n            goto LAB_001066bc;\n          }\n          *charPointer4 = characterVar2;\n          longPointer2[1] = (long)charPointer4;\n          ulongVar6 = ulongVar5;\n        }\n        else {\n          if ((change_leading_char == '\\0') ||\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n            ulongVar6 = ulongVar5;\n            if (charPointer3 == (char *)0x0) goto LAB_00105b32;\n            sizeVar1 = strlen(charPointer4);\n            sizeVar2 = strlen(charPointer3);\n            charPointer3 = (char *)xmalloc(sizeVar2 + sizeVar1 + 1);\n            charPointer5 = charPointer3;\n          }\n          else {\nLAB_0010668d:\n            charPointer3 = prefix_symbols_string;\n            if ((*(char *)(longVar3 + 0x1c) != '\\0') && (characterVar2 != *(char *)(longVar3 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar1 = strlen(charPointer4);\n            longVar3 = sizeVar1 + 2;\n            if (charPointer3 == (char *)0x0) {\n              charPointer5 = (char *)xmalloc(longVar3);\n            }\n            else {\nLAB_001066bc:\n              sizeVar1 = strlen(charPointer3);\n              charPointer5 = (char *)xmalloc(sizeVar1 + longVar3);\n            }\n            charPointer3 = charPointer5 + 1;\n            *charPointer5 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          charArray = prefix_symbols_string;\n          if (prefix_symbols_string != (char *)0x0) {\n            strcpy(charPointer3,prefix_symbols_string);\n            sizeVar1 = strlen(charArray);\n            charPointer3 = charPointer3 + sizeVar1;\n          }\n          strcpy(charPointer3,charPointer4);\n          longPointer2[1] = (long)charPointer5;\n          charPointer4 = charPointer5;\n          ulongVar6 = ulongVar5;\n        }\nLAB_00105b32:\n        if (strip_symbols == 7) goto LAB_001067a8;\n        if (((uintVar1 & 0x20) == 0) &&\n           (((uintVar1 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(longPointer2[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar1 & 0x82) != 0 || ((*(byte *)(longPointer2[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar1 = bfd_decode_symclass(longPointer2), intVar1 == 0x49)) {\nLAB_00105be2:\n            if (wildcard == '\\0') {\n              longVar3 = htab_find();\n              if (longVar3 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              charPointer6 = charPointer4;\n              htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar1 & 0x82) == 0) && (functionPointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(longPointer2[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar1 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (longVar3 = *(long *)(longPointer2[4] + 0xd0), longVar3 == 0)) ||\n                 (*(long *)(longVar3 + 0x40) == 0)) {\n                if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                if (discard_locals == 1) {\n                  characterVar2 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            characterVar2 = convert_debugging;\n            if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n              if (characterVar2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (strip_symbols != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (wildcard == '\\0') {\n          longVar3 = htab_find();\n          if (longVar3 != 0) {\nLAB_0010687f:\n            ulongVar4 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(ulongVar4);\n            status = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          charPointer6 = charPointer4;\n          htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar1 & 0x20) == 0) {\nLAB_00105c07:\n          if (wildcard != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            charPointer6 = charPointer4;\n            htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          longVar3 = htab_find();\n          if (longVar3 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((keep_file_symbols != '\\0') && ((uintVar1 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (wildcard == '\\0') {\n            longVar3 = htab_find();\n            if (longVar3 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            charPointer6 = charPointer4;\n            htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          characterVar2 = is_strip_section_isra_0(longPointer2[4]);\n          if (characterVar2 == '\\0') {\n            if (((uintVar1 & 0x800002) == 0) && (functionPointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar1 & 0x82) != 0) {\n                characterVar2 = is_specified_symbol(charPointer4);\n                if ((characterVar2 == '\\0') &&\n                   ((longVar3 = htab_elements(keepglobal_specific_htab), longVar3 == 0 ||\n                    (characterVar2 = is_specified_symbol(charPointer4), characterVar2 != '\\0')))) {\n                  if (((((localize_hidden == '\\0') ||\n                        (uintVar2 = *(uint *)(longPointer2 + 3), (uintVar2 & 0x200000) != 0)) ||\n                       (longVar3 = *longPointer2, longVar3 == 0)) ||\n                      ((*(int *)(*(long *)(longVar3 + 8) + 8) != 5 || (*(long *)(longVar3 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)longPointer2 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintVar2 = *(uint *)(longPointer2 + 3);\n                }\n                *(uint *)(longPointer2 + 3) = uintVar2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar1 & 1) != 0) && (characterVar2 = is_specified_symbol(charPointer4), characterVar2 != '\\0')) {\n                *(uint *)(longPointer2 + 3) = *(uint *)(longPointer2 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((weaken != '\\0') || (characterVar2 = is_specified_symbol(charPointer4), characterVar2 != '\\0')) {\n                *(uint *)(longPointer2 + 3) = *(uint *)(longPointer2 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (functionPointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(longVar2 + ulongVar6 * 8) = longPointer2;\n            ulongVar6 = ulongVar6 + 1;\n          }\n        }\n        _charVar1 = _charVar1 + 1;\n      } while (in_stack_00000010 != _charVar1);\n    }\n    if (add_sym_list != (undefined8 *)0x0) {\n      pointer1 = add_sym_list;\n      intVar1 = add_symbols;\n      for (longVar3 = 0; longVar3 < intVar1; longVar3 = longVar3 + 1) {\n        charPointer3 = (char *)pointer1[5];\n        if (charPointer3 == (char *)0x0) {\n          longVar1 = ulongVar6 * 8;\n          ulongVar6 = ulongVar6 + 1;\n          ulongVar4 = create_new_symbol(pointer1,in_stack_00000008);\n          *(undefined8 *)(longVar2 + longVar1) = ulongVar4;\n          intVar1 = add_symbols;\n        }\n        else if (charPointer3 != \"\") {\n          ulongVar4 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(ulongVar4,charPointer3);\n        }\n        pointer1 = (undefined8 *)*pointer1;\n      }\n    }\n    bVar38 = convert_debugging != '\\0';\n    *(undefined8 *)(longVar2 + ulongVar6 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar1 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((intVar1 != 5) && (intVar1 != 2)) {\n        ulongVar4 = **(undefined8 **)(in_stack_00000008 + 8);\n        ulongVar3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,ulongVar3,ulongVar4);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      voidPointer = (void *)0x0;\n      characterVar2 = write_stabs_in_sections_debugging_info_constprop_0\n                        (in_stack_00000008,puStack0000000000000020,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (characterVar2 == '\\0') goto LAB_00105d8c;\n      longVar2 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      longVar3 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((longVar2 == 0) || (longVar3 == 0)) ||\n          (characterVar2 = bfd_set_section_size(longVar2,in_stack_00000110), characterVar2 == '\\0')) ||\n         (characterVar2 = bfd_set_section_size(longVar3,charPointer6), characterVar2 == '\\0')) {\n        charPointer3 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulongVar4 = dcgettext(0,charPointer3,5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,ulongVar4);\n        free(voidPointer);\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      *(undefined4 *)(longVar2 + 0x7c) = 2;\n      *(undefined4 *)(longVar3 + 0x7c) = 0;\n      characterVar2 = bfd_set_section_contents\n                        (in_stack_00000008,longVar2,in_stack_000000c0,0,in_stack_00000110);\n      if ((characterVar2 == '\\0') ||\n         (characterVar2 = bfd_set_section_contents\n                            (in_stack_00000008,longVar3,voidPointer,0,charPointer6),\n         characterVar2 == '\\0')) {\n        charPointer3 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = ulongVar6 & 0xffffffff;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    longVar2 = htab_elements(strip_specific_htab);\n    if (((longVar2 != 0) ||\n        (((((((longVar2 = htab_elements(keep_specific_htab), longVar2 != 0 ||\n              (longVar2 = htab_elements(localize_specific_htab), longVar2 != 0)) ||\n             (longVar2 = htab_elements(globalize_specific_htab), longVar2 != 0)) ||\n            ((longVar2 = htab_elements(keepglobal_specific_htab), longVar2 != 0 ||\n             (longVar2 = htab_elements(weaken_specific_htab), longVar2 != 0)))) ||\n           (longVar2 = htab_elements(redefine_specific_htab), longVar2 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,osympp,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,copy_relocations_in_section,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,copy_section,in_stack_00000008);\n  for (pointer1 = add_sections; pointer = update_sections, pointer1 != (undefined8 *)0x0;\n      pointer1 = (undefined8 *)*pointer1) {\n    characterVar2 = bfd_set_section_contents(in_stack_00000008,pointer1[5],pointer1[4],0,pointer1[3]);\n    if (characterVar2 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,pointer1[5],0);\n      return 0;\n    }\n  }\n  for (; pointer != (undefined8 *)0x0; pointer = (undefined8 *)*pointer) {\n    ulongVar4 = *(undefined8 *)(pointer[5] + 0x60);\n    characterVar2 = bfd_set_section_contents(in_stack_00000008,ulongVar4,pointer[4],0,pointer[3]);\n    if (characterVar2 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,ulongVar4,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((merge_notes != '\\0') && (is_strip == 0)) {\n      ulongVar4 = *unaff_R14;\n      ulongVar3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(ulongVar3,ulongVar4);\n    }\nLAB_0010578f:\n    if ((gnu_debuglink_filename == 0) ||\n       (characterVar2 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       longVar2 = gnu_debuglink_filename, characterVar2 != '\\0')) {\n      uintVar1 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      ulongVar6 = (ulong)uintVar1;\n      if ((char)uintVar1 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return ulongVar6;\n        }\n        characterVar2 = bfd_alt_mach_code(in_stack_00000008,use_alt_mach_code & 0xffffffff);\n        ulongVar5 = use_alt_mach_code;\n        if (characterVar2 != '\\0') {\n          return ulongVar6;\n        }\n        ulongVar4 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(ulongVar4,ulongVar5);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          ulongVar4 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(ulongVar4);\n          return ulongVar6;\n        }\n        ulongVar4 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(ulongVar4);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n        return ulongVar6;\n      }\n      ulongVar4 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,ulongVar4);\n    }\n    else {\n      ulongVar4 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,ulongVar4,longVar2);\n    }\n    return 0;\n  }\n  longPointer1 = (long *)0x0;\n  pointer1 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (pointer1 == (undefined8 *)0x0) {\n      do {\n        longPointer1 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = longPointer1;\n      } while (longPointer1 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((merge_notes != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(pointer1[0x1a] + 4) == 7)) &&\n       (characterVar2 = startswith_lto_priv_0_lto_priv_0(*pointer1,\".gnu.build.attributes\"), characterVar2 != '\\0'))\n    {\n      if (longPointer1 == (long *)0x0) {\n        longPointer1 = unaff_R13;\n      }\n      longPointer2 = unaff_R13;\n      if (*(undefined8 **)(*longPointer1 + 0x60) == pointer1) {\nLAB_0010625f:\n        charPointer3 = \"error: failed to merge notes\";\n        if (longPointer1[1] != 0) {\n          characterVar2 = bfd_set_section_contents(in_stack_00000008,pointer1,longPointer1[1],0,longPointer1[2]);\n          if (characterVar2 == '\\0') {\n            ulongVar4 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,in_stack_00000008,pointer1,ulongVar4);\n            return 0;\n          }\n          longPointer1 = (long *)longPointer1[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          longPointer1 = longPointer2;\n          if (*(undefined8 **)(*longPointer2 + 0x60) == pointer1) goto LAB_0010625f;\n          longPointer1 = (long *)longPointer2[3];\n          longPointer2 = longPointer1;\n        } while (longPointer1 != (long *)0x0);\n        charPointer3 = \"error: failed to locate merged notes\";\n      }\n      ulongVar4 = dcgettext(0,charPointer3,5);\n      bfd_nonfatal_message(0,in_stack_00000008,pointer1,ulongVar4);\n    }\nLAB_001061be:\n    pointer1 = (undefined8 *)pointer1[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improved_and_reversed_code_0010551d"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "inputString"
            },
            "code": "\nvoid hashString_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_00104320": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "FUN_0010554f",
                "stab_demangle_template",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104320"
        },
        "FUN_00104200": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104200"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "updated_function_0010c1c6",
                "param_1": "param_one",
                "param_2": "param_two",
                "param_3": "param_three",
                "param_4": "param_four",
                "param_5": "param_five",
                "param_6": "param_six",
                "puVar1": "pointer_var",
                "cVar2": "char_var",
                "__ptr": "pointer",
                "__ptr[1]": "pointer_one",
                "__ptr[2]": "pointer_two",
                "__ptr[4]": "pointer_four"
            },
            "code": "\nundefined updated_function_0010c1c6(undefined8 param_one,long param_two,undefined8 param_three,undefined8 param_four,\n                      undefined8 param_five,undefined8 param_six)\n\n{\n  undefined8 *pointer_var;\n  char char_var;\n  undefined8 *pointer;\n  \n  pointer = *(undefined8 **)(param_two + 0x78);\n  while( true ) {\n    if (pointer == (undefined8 *)0x0) {\n      *(undefined8 *)(param_two + 0x78) = 0;\n      return 1;\n    }\n    char_var = debug_record_variable\n                      (param_one,pointer_one,pointer_two,*(undefined4 *)(pointer + 3),pointer_four,param_six,param_five\n                      );\n    if (char_var == '\\0') break;\n    pointer_var = (undefined8 *)*pointer;\n    free(pointer);\n    pointer = pointer_var;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_record_variable",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "parse_stab",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "updated_function_0010c1c6"
        },
        "FUN_00104560": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "stab_typedef_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104560"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_symbol_table_001082df",
                "unaff_RBX": "symbolTable",
                "unaff_RBP": "functionPointer",
                "unaff_R13": "symbols",
                "uVar1": "symbolCount",
                "lVar2": "symbolAddress",
                "cVar3": "symbolType",
                "puVar4": "filteredSymbols",
                "puVar5": "nextFilteredSymbol",
                "uVar6": "currentIndex",
                "strip_symbols": "stripSymbols"
            },
            "code": "\nvoid processSymbolTable_001082df(void)\n\n{\n  uint symbolCount;\n  long symbolAddress;\n  char symbolType;\n  long symbolTable;\n  undefined8 *filteredSymbols;\n  undefined8 *nextFilteredSymbol;\n  long functionPointer;\n  ulong currentIndex;\n  undefined8 *symbols;\n  \n  symbolCount = *(uint *)(symbolTable + 0x78);\n  if (stripSymbols == 7) {\n    filteredSymbols = symbols;\n    for (currentIndex = 0; currentIndex != symbolCount; currentIndex = currentIndex + 1) {\n      nextFilteredSymbol = filteredSymbols;\n      if (((*(long **)symbols[currentIndex] != (long *)0x0) &&\n          (symbolAddress = **(long **)symbols[currentIndex], symbolAddress != 0)) &&\n         (symbolType = is_specified_symbol(*(undefined8 *)(symbolAddress + 8),keep_specific_htab), symbolType != '\\0')\n         ) {\n        nextFilteredSymbol = filteredSymbols + 1;\n        *filteredSymbols = symbols[currentIndex];\n      }\n      filteredSymbols = nextFilteredSymbol;\n    }\n    *filteredSymbols = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(functionPointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "is_specified_symbol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "process_symbol_table_001082df"
        },
        "FUN_00104440": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00107880",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_00104440"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_and_store_00114d60",
                "param_1": "fileInfoPtr",
                "iVar1": "eofIndicator",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorString",
                "__stream": "filePointer",
                "uVar4": "errorMessage",
                "uVar5": "bufferPtr",
                "__errno_location": "getErrnoLocation",
                "strerror": "getErrorString",
                "dcgettext": "getErrorMessage",
                "fatal": "showFatalError",
                "lVar7": "bytesRead",
                "lVar8": "bufferSize",
                "sVar6": "readSize"
            },
            "code": "\nvoid readFileAndStore_00114d60(long fileInfoPtr)\n\n{\n  int eofIndicator;\n  int *errorNumberPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  undefined8 bufferPtr;\n  size_t readSize;\n  long bytesRead;\n  long bufferSize;\n  \n  filePointer = fopen(*(char **)(fileInfoPtr + 0x10),\"r\");\n  if (filePointer == (FILE *)0x0) {\n    errorNumberPtr = getErrnoLocation();\n    errorString = getErrorString(*errorNumberPtr);\n    bufferPtr = *(undefined8 *)(fileInfoPtr + 0x10);\n    errorMessage = getErrorMessage(0,\"cannot open: %s: %s\",5);\n                    \n    showFatalError(errorMessage,bufferPtr,errorString);\n  }\n  bufferSize = 0x1000;\n  bytesRead = 0;\n  bufferPtr = xmalloc(0x1000);\n  *(undefined8 *)(fileInfoPtr + 0x20) = bufferPtr;\n  while( true ) {\n    eofIndicator = feof(filePointer);\n    if (eofIndicator != 0) {\n      *(long *)(fileInfoPtr + 0x18) = bytesRead;\n      fclose(filePointer);\n      return;\n    }\n    if (bytesRead == bufferSize) {\n      bufferSize = bytesRead * 2;\n      bufferPtr = xrealloc(*(undefined8 *)(fileInfoPtr + 0x20),bufferSize);\n      *(undefined8 *)(fileInfoPtr + 0x20) = bufferPtr;\n    }\n    readSize = fread((void *)(*(long *)(fileInfoPtr + 0x20) + bytesRead),1,bufferSize - bytesRead,filePointer);\n    eofIndicator = ferror(filePointer);\n    if (eofIndicator != 0) break;\n    bytesRead = bytesRead + readSize;\n  }\n  bufferPtr = *(undefined8 *)(fileInfoPtr + 0x10);\n  errorMessage = getErrorMessage(0,\"%s: fread failed\",5);\n                    \n  showFatalError(errorMessage,bufferPtr);\n}\n\n",
            "called": [
                "section_add_load_file.cold",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_file_and_store_00114d60"
        },
        "FUN_00104680": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104680"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "handle_missing_section_00108808",
                "unaff_RBP": "framePointer",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleMissingSection_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  long framePointer;\n  \n  sectionAddress = *(undefined8 *)(framePointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  fatal(errorMessage,sectionAddress);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "create_new_symbol"
            ],
            "imported": false,
            "current_name": "handle_missing_section_00108808"
        },
        "FUN_00128418": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128418",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00128418"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "bVar4": "currentByte",
                "unaff_EBP": "lineCounter",
                "unaff_R13": "callbackFunc",
                "in_stack_00000008": "context",
                "in_stack_00000010": "callbackFuncPtr"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte currentByte;\n  byte *pbVar5;\n  int lineCounter;\n  byte *pbVar6;\n  undefined8 callbackFunc;\n  byte *pbVar7;\n  byte *unaff_R14;\n  byte *unaff_R15;\n  undefined8 context;\n  undefined8 *callbackFuncPtr;\n  \n  *unaff_R14 = 0;\nLAB_00114520:\n  unaff_R14 = unaff_R14 + 1;\n  do {\n    currentByte = *unaff_R14;\n    pbVar7 = unaff_R14;\n    if (currentByte == 10) {\n      *unaff_R14 = 0;\n      if (unaff_R14[1] == 0xd) {\n        pbVar7 = unaff_R14 + 1;\n        pbVar5 = unaff_R14 + 2;\n      }\n      else {\n        pbVar5 = unaff_R14 + 1;\n      }\n    }\n    else if ((char)currentByte < '\\v') {\n      if (currentByte != 0) goto LAB_00114520;\n      pbVar5 = unaff_R14 + 1;\n    }\n    else {\n      if (currentByte != 0xd) break;\n      *unaff_R14 = 0;\n      pbVar5 = unaff_R14 + 1;\n      if (unaff_R14[1] == 10) {\n        pbVar5 = unaff_R14 + 2;\n        pbVar7 = unaff_R14 + 1;\n      }\n    }\n    currentByte = *unaff_R15;\n    while ((currentByte == 0x20 || (pbVar6 = unaff_R15, currentByte == 9))) {\n      pbVar6 = unaff_R15 + 1;\n      unaff_R15 = unaff_R15 + 1;\n      currentByte = *pbVar6;\n    }\n    do {\n      if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n      if (currentByte == 0) goto LAB_00114599;\n      currentByte = pbVar6[1];\n      pbVar6 = pbVar6 + 1;\n    } while ((currentByte != 0x20) && (currentByte != 9));\n    if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentByte = pbVar6[1];\n      if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n            ((currentByte = pbVar6[2], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = pbVar6[3], currentByte == 9 || (currentByte == 0x20)))) &&\n          ((currentByte = pbVar6[4], currentByte == 9 || (currentByte == 0x20)))) &&\n         ((currentByte = pbVar6[5], currentByte == 9 || (currentByte == 0x20)))) {\n        currentByte = pbVar6[6];\n        pbVar3 = pbVar6 + 6;\n        if ((currentByte == 9) || (currentByte == 0x20)) {\n          do {\n            do {\n              currentByte = pbVar3[1];\n              pbVar3 = pbVar3 + 1;\n            } while (currentByte == 0x20);\n          } while (currentByte == 9);\n        }\n      }\n      if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(uVar1,context,lineCounter);\n      }\n    }\nLAB_00114599:\n    *pbVar6 = 0;\n    if (unaff_R15 < pbVar6) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = unaff_R15;\n    }\n    lineCounter = lineCounter + 1;\n    unaff_R14 = pbVar5;\n    unaff_R15 = pbVar5;\n    if (pbVar7[1] == 0) {\n      *callbackFuncPtr = callbackFunc;\n      return;\n    }\n  } while( true );\n  if (currentByte == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_print_error_00119940",
                "param_1": "address",
                "param_2": "message",
                "uVar1": "errorString",
                "local_20": "outputBuffer"
            },
            "code": "\nvoid checkAndPrintError_00119940(undefined8 address,undefined8 message)\n\n{\n  undefined8 errorString;\n  char *outputBuffer [2];\n  \n  bfd_scan_vma(address,outputBuffer,0);\n  if (*outputBuffer[0] == '\\0') {\n    return;\n  }\n  errorString = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorString,message,address);\n}\n\n",
            "called": [
                "parse_vma.cold",
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_print_error_00119940"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "input",
                "param_2": "address",
                "param_3": "value",
                "in_RAX": "baseAddress"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 input,long address,uint value)\n\n{\n  long baseAddress;\n  \n  if ((value == 2) && (*(int *)(*(long *)(address + 8) + 8) == 2)) {\n    value = (uint)*(byte *)(*(long *)(*(long *)(address + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(baseAddress + 0x380) + 0x78))(input,value != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "set_long_section_mode"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "FUN_00104210": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "main",
                "FUN_00107880",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104210"
        },
        "FUN_00104450": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104450"
        },
        "FUN_00104330": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_00104330"
        },
        "FUN_00104690": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104690"
        },
        "FUN_00104570": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_00104ea2",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104570"
        },
        "FUN_00128408": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128408",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128408"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_function_00113a4d",
                "param_1": "code_output",
                "param_2": "debug_info",
                "param_3": "function_data",
                "param_4": "variable_info",
                "param_5": "additional_info",
                "cVar1": "is_debug_written",
                "uVar2": "result",
                "puVar3": "ptr",
                "auVar4": "debug_result"
            },
            "code": "\nundefined8\nprocess_function_00113a4d(undefined8 code_output,undefined8 debug_info,long function_data,undefined8 variable_info,\n            undefined8 additional_info)\n\n{\n  char is_debug_written;\n  undefined8 result;\n  undefined8 *ptr;\n  undefined debug_result [16];\n  \n  is_debug_written = debug_write_linenos_constprop_0(code_output,debug_info,*(undefined8 *)(function_data + 0x18));\n  if ((is_debug_written != '\\0') &&\n     (((*(long *)(function_data + 0x28) == 0 && (*(long *)(function_data + 8) != 0)) ||\n      (is_debug_written = stab_start_block_lto_priv_0(debug_info,*(undefined8 *)(function_data + 0x18)), is_debug_written != '\\0'))\n     )) {\n    if (*(undefined8 **)(function_data + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(function_data + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        is_debug_written = debug_write_name_constprop_0(code_output,debug_info,ptr);\n        if (is_debug_written == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(function_data + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      is_debug_written = process_function_00113a4d(code_output,debug_info,ptr);\n      if (is_debug_written == '\\0') {\n        return 0;\n      }\n    }\n    debug_result = debug_write_linenos_constprop_0(code_output,debug_info,*(undefined8 *)(function_data + 0x20));\n    if (debug_result[0] != '\\0') {\n      if ((*(long *)(function_data + 0x28) == 0) && (*(long *)(function_data + 8) != 0)) {\n        return debug_result._0_8_;\n      }\n      result = stab_end_block_lto_priv_0\n                        (debug_info,*(undefined8 *)(function_data + 0x20),debug_result._8_8_,additional_info);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_block.lto_priv.0",
                "debug_write_linenos.constprop.0",
                "debug_write_name.constprop.0",
                "stab_end_block.lto_priv.0",
                "debug_write_block.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "debug_write_name.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_function_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "param_1",
                "unaff_RBX": "memoryBlock"
            },
            "code": "\nundefined8 freeMemory_001081e9(void)\n\n{\n  undefined8 param_1;\n  void *memoryBlock;\n  undefined8 param_7;\n  \n  param_7 = param_1;\n  free(memoryBlock);\n  return param_7;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "free_memory_001081e9"
        },
        "FUN_00104100": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "main",
                "setup_section",
                "parse_stab_type",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "display_info.isra.0",
                "stab_end_class_type.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104100"
        },
        "FUN_00104340": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "find_section_list",
                "is_specified_symbol_predicate"
            ],
            "imported": false,
            "current_name": "FUN_00104340"
        },
        "FUN_00104220": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104220"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_debug_type_00113b71",
                "param_1": "value",
                "lVar1": "debugTypePointer"
            },
            "code": "\nlong initializeDebugType_00113b71(long value)\n\n{\n  long debugTypePointer;\n  \n  if (value != 0) {\n    debugTypePointer = debug_make_type_constprop_0(0x14,0);\n    if (debugTypePointer == 0) {\n      debugTypePointer = 0;\n    }\n    else {\n      *(long *)(debugTypePointer + 0x10) = value;\n    }\n    return debugTypePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113b71"
        },
        "FUN_00104580": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "FUN_00104580"
        },
        "FUN_00104460": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104460"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "process_parameter_00109dfe",
                "param_1": "parameter",
                "lVar1": "counter",
                "local_40": "formattedString"
            },
            "code": "\nvoid processParameter_00109dfe(long parameter)\n\n{\n  long counter;\n  char formattedString [40];\n  \n  if (*(long *)(parameter + 0x70) != 0) {\n    stab_push_defined_type(parameter,*(long *)(parameter + 0x70),0);\n    return;\n  }\n  counter = *(long *)(parameter + 0x68);\n  *(long *)(parameter + 0x68) = counter + 1;\n  *(long *)(parameter + 0x70) = counter;\n  sprintf(formattedString,\"%ld=%ld\",counter,counter);\n  stab_push_string(parameter,formattedString,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_parameter_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_if_string_ends_with_semicolon_00109bbb",
                "param_1": "address",
                "__s": "string",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkIfStringEndsWithSemicolon_00109bbb(long address)\n\n{\n  char *string;\n  size_t stringLength;\n  \n  if (*(long *)(address + 0x60) != 0) {\n    string = *(char **)(*(long *)(address + 0x60) + 0x30);\n    if (string != (char *)0x0) {\n      stringLength = strlen(string);\n      *(undefined2 *)(string + stringLength) = 0x3b;\n    }\n    return string != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "check_if_string_ends_with_semicolon_00109bbb"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "generate_formatted_string_0010ae0e",
                "param_1": "input",
                "lVar1": "ptr1",
                "lVar2": "ptr2",
                "__ptr": "ptr3",
                "pcVar3": "strPtr",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "formattedStrPtr",
                "uVar7": "result",
                "lVar8": "totalLength",
                "uVar9": "counter",
                "uVar10": "subCounter"
            },
            "code": "\nundefined8 generateFormattedString_0010ae0e(long input)\n\n{\n  long ptr1;\n  long ptr2;\n  void *ptr3;\n  char *strPtr;\n  size_t len1;\n  size_t len2;\n  char *formattedStrPtr;\n  undefined8 result;\n  long totalLength;\n  uint counter;\n  ulong subCounter;\n  \n  result = 0;\n  ptr1 = *(long *)(input + 0x60);\n  if (((ptr1 != 0) && (*(char **)(ptr1 + 8) != (char *)0x0)) &&\n     (formattedStrPtr = *(char **)(ptr1 + 0x20), formattedStrPtr != (char *)0x0)) {\n    len1 = strlen(*(char **)(ptr1 + 8));\n    len2 = strlen(formattedStrPtr);\n    ptr2 = *(long *)(ptr1 + 0x28);\n    if (ptr2 == 0) {\n      totalLength = len1 + len2 + 10;\n      subCounter = 0;\n    }\n    else {\n      totalLength = len1 + len2 + 0x1e;\n      subCounter = 0;\n      while( true ) {\n        formattedStrPtr = *(char **)(ptr2 + subCounter * 8);\n        if (formattedStrPtr == (char *)0x0) break;\n        len1 = strlen(formattedStrPtr);\n        subCounter = (ulong)((int)subCounter + 1);\n        totalLength = totalLength + len1;\n      }\n    }\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x30));\n      totalLength = totalLength + len1;\n    }\n    if (*(char **)(ptr1 + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x38));\n      totalLength = totalLength + len1;\n    }\n    formattedStrPtr = (char *)xmalloc(totalLength);\n    ptr1 = *(long *)(input + 0x60);\n    strcpy(formattedStrPtr,*(char **)(ptr1 + 8));\n    if (*(long *)(ptr1 + 0x28) != 0) {\n      counter = 0;\n      len1 = strlen(formattedStrPtr);\n      sprintf(formattedStrPtr + len1,\"!%u,\",subCounter);\n      while( true ) {\n        ptr1 = *(long *)(input + 0x60);\n        subCounter = (ulong)counter;\n        ptr3 = *(void **)(ptr1 + 0x28);\n        strPtr = *(char **)((long)ptr3 + subCounter * 8);\n        if (strPtr == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(formattedStrPtr,strPtr);\n        free(*(void **)(*(long *)(ptr1 + 0x28) + subCounter * 8));\n      }\n      free(ptr3);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    ptr1 = *(long *)(input + 0x60);\n    strcat(formattedStrPtr,*(char **)(ptr1 + 0x20));\n    free(*(void **)(ptr1 + 0x20));\n    ptr1 = *(long *)(input + 0x60);\n    *(undefined8 *)(ptr1 + 0x20) = 0;\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      strcat(formattedStrPtr,*(char **)(ptr1 + 0x30));\n      free(*(void **)(ptr1 + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(formattedStrPtr);\n    ptr1 = *(long *)(input + 0x60);\n    *(undefined2 *)(formattedStrPtr + len1) = 0x3b;\n    strPtr = *(char **)(ptr1 + 0x38);\n    if (strPtr != (char *)0x0) {\n      strcpy(formattedStrPtr + len1 + 1,strPtr);\n      free(*(void **)(ptr1 + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    ptr1 = *(long *)(input + 0x60);\n    *(char **)(ptr1 + 8) = formattedStrPtr;\n    result = CONCAT71((int7)((ulong)ptr1 >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "strcat",
                "strcpy",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "write_debug_information_001135a5",
                "param_1": "outputStream",
                "param_2": "inputStream",
                "param_3": "data",
                "iVar1": "index",
                "cVar2": "success",
                "uVar3": "result",
                "puVar4": "currentNode",
                "puVar5": "functionNode"
            },
            "code": "\nundefined8 writeDebugInformation_001135a5(undefined8 outputStream,undefined8 inputStream,long data)\n\n{\n  int index;\n  char success;\n  undefined8 result;\n  undefined8 *currentNode;\n  undefined8 *functionNode;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    success = debug_write_type_constprop_0(outputStream,inputStream,*(undefined8 *)(data + 0x20),data);\n    if (success != '\\0') {\n      result = stab_typdef_lto_priv_0(inputStream,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 1:\n    success = debug_write_type_constprop_0(outputStream,inputStream,*(undefined8 *)(data + 0x20),data);\n    if (success != '\\0') {\n      result = stab_tag_lto_priv_0(inputStream,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 2:\n    success = debug_write_type_constprop_0\n                      (outputStream,inputStream,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (success != '\\0') {\n      result = stab_variable_lto_priv_0\n                        (inputStream,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    functionNode = *(undefined8 **)(data + 0x20);\n    index = *(int *)(data + 0x18);\n    result = *(undefined8 *)(data + 8);\n    success = debug_write_linenos_constprop_0(outputStream,inputStream,*(undefined8 *)(functionNode[2] + 0x18));\n    if (((success != '\\0') &&\n        (success = debug_write_type_constprop_0(outputStream,inputStream,*functionNode,0), success != '\\0')) &&\n       (success = stab_start_function_lto_priv_0(inputStream,result,index == 2), success != '\\0')) {\n      for (currentNode = (undefined8 *)functionNode[1]; currentNode != (undefined8 *)0x0;\n          currentNode = (undefined8 *)*currentNode) {\n        success = debug_write_type_constprop_0(outputStream,inputStream,currentNode[2],0);\n        if (success == '\\0') {\n          return 0;\n        }\n        success = stab_function_parameter_lto_priv_0(inputStream,currentNode[1],*(undefined4 *)(currentNode + 3));\n        if (success == '\\0') {\n          return 0;\n        }\n      }\n      functionNode = (undefined8 *)functionNode[2];\n      while( true ) {\n        if (functionNode == (undefined8 *)0x0) {\n          result = stab_end_function_lto_priv_0(inputStream);\n          return result;\n        }\n        success = debug_write_block_constprop_0(outputStream,inputStream,functionNode);\n        if (success == '\\0') break;\n        functionNode = (undefined8 *)*functionNode;\n      }\n    }\n    break;\n  case 4:\n    result = stab_int_constant_lto_priv_0\n                      (inputStream,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return result;\n  case 5:\n    result = stab_float_constant_lto_priv_0\n                      (*(undefined8 *)(data + 0x20),inputStream,*(undefined8 *)(data + 8));\n    return result;\n  case 6:\n    success = debug_write_type_constprop_0(outputStream,inputStream,**(undefined8 **)(data + 0x20),0);\n    if (success != '\\0') {\n      result = stab_typed_constant_lto_priv_0\n                        (inputStream,*(undefined8 *)(data + 8),\n                         *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_end_function.lto_priv.0",
                "stab_variable.lto_priv.0",
                "debug_write_linenos.constprop.0",
                "abort",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "debug_write_block.constprop.0",
                "stab_int_constant.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_float_constant.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "write_debug_information_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~bfd_flags_to_clear & *(uint *)(param_7[1] + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)unaff_R14 + 0x44));\n  if (strip_symbols == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_format_and_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = preserve_dates == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar28 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar28 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = add_sections, cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33)\n  {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = improve_and_reverse_code_0010554f();\n    return uVar29;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = add_sym_list;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (section_rename_list == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(redefine_specific_htab);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = section_rename_list, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = prefix_symbols_string;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = prefix_symbols_string;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar33 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = convert_debugging == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(strip_specific_htab);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(keep_specific_htab), lVar28 != 0 ||\n              (lVar28 = htab_elements(localize_specific_htab), lVar28 != 0)) ||\n             (lVar28 = htab_elements(globalize_specific_htab), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 != 0 ||\n             (lVar28 = htab_elements(weaken_specific_htab), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(redefine_specific_htab), lVar28 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = add_sections; puVar38 = update_sections, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)use_alt_mach_code;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = dump_sections;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_file_flags",
                "dcgettext",
                "printf",
                "FUN_001152b6",
                "bfd_set_start_address",
                "bfd_get_mach",
                "bfd_get_arch",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "copy_object"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "FUN_00128318": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128318",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_00128318"
        },
        "FUN_00104590": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104590"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "decompile_and_improve_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "var1",
                "iVar2": "var2",
                "pcVar3": "result",
                "plVar4": "ptrList",
                "pcVar5": "errorMessage",
                "sVar6": "strLen",
                "__ptr": "ptr",
                "lVar7": "var7",
                "local_40": "localBuffer"
            },
            "code": "\n\n\nchar * decompile_and_improve_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long param4,\n                   undefined *param5)\n\n{\n  uint var1;\n  int var2;\n  char *result;\n  long *ptrList;\n  char *errorMessage;\n  size_t strLen;\n  void *ptr;\n  long var7;\n  undefined localBuffer [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    var1 = *param3;\n    if (0x29 < var1) break;\n    if (0x17 < var1) {\n      switch(var1) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)decompile_and_improve_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)debug_make_volatile_type_isra_0(result);\n            return result;\n          case 0x1b:\n            result = (char *)debug_make_const_type_isra_0(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)debug_make_pointer_type_isra_0(result);\n            return result;\n          case 0x23:\n            result = (char *)debug_make_reference_type_isra_0(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,param3,0x14,localBuffer);\n        if (result == (char *)0x0) {\n          errorMessage = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        var2 = strcmp(result,\"signed char\");\n        if (var2 == 0) {\nLAB_0010b406:\n          errorMessage = (char *)debug_make_int_type_isra_0(1,0);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"bool\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_type_constprop_0(6,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"char\");\n        if (var2 == 0) goto LAB_0010b406;\n        var2 = strcmp(result,\"double\");\n        if ((var2 == 0) || (var2 = strcmp(result,\"long double\"), var2 == 0)) {\n          errorMessage = (char *)debug_make_float_type_isra_0(8);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"float\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_float_type_isra_0(4);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"__float128\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_float_type_isra_0(0x10);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"unsigned char\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(1,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"int\");\n        if (var2 == 0) {\nLAB_0010b504:\n          errorMessage = (char *)debug_make_int_type_isra_0(4,0);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"unsigned int\");\n        if (var2 == 0) {\nLAB_0010b528:\n          errorMessage = (char *)debug_make_int_type_isra_0(4,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"long\");\n        if (var2 == 0) goto LAB_0010b504;\n        var2 = strcmp(result,\"unsigned long\");\n        if (var2 == 0) goto LAB_0010b528;\n        var2 = strcmp(result,\"__int128\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"unsigned __int128\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"short\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(2,0);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"unsigned short\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(2,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"void\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_void_type_isra_0();\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"wchar_t\");\n        if (var2 == 0) goto LAB_0010b528;\n        var2 = strcmp(result,\"long long\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(8,0);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"unsigned long long\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(8,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"...\");\n        if (var2 == 0) {\n          errorMessage = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          errorMessage = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          errorMessage = (char *)dcgettext(0,errorMessage,5);\n          fprintf(_stderr,errorMessage);\n        }\n        errorMessage = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return errorMessage;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          ptr = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          ptr = (void *)decompile_and_improve_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          var7 = stab_demangle_v3_arglist(param1,param2,*(undefined8 *)(param3 + 6),localBuffer);\n          if (var7 != 0) {\n            result = (char *)debug_make_function_type_isra_0(ptr,var7,localBuffer[0]);\n            return result;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (var1 != 1) {\n      if (var1 == 4) {\n        result = (char *)cplus_demangle_print(3,param3,0x14,localBuffer);\n        errorMessage = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          strLen = strlen(result);\n          errorMessage = (char *)stab_find_tagged_type(param1,param2,result,strLen & 0xffffffff,9);\n          free(result);\n          return errorMessage;\n        }\nLAB_0010b3d3:\n        errorMessage = (char *)dcgettext(0,errorMessage,5);\n        fprintf(_stderr,errorMessage);\n        return result;\n      }\n      if (var1 == 0) {\n        if ((param4 == 0) ||\n           (ptrList = (long *)debug_get_fields_isra_0(param4), ptrList == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = decompile_and_improve_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    param5 = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)var1);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*ptrList == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)stab_find_tagged_type\n                               (param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return result;\n  }\n  result = *(char **)(*ptrList + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  errorMessage = (char *)debug_get_type_name_constprop_0(result);\n  if (errorMessage != (char *)0x0) {\n    strLen = strlen(errorMessage);\n    if ((param3[6] == (uint)strLen) &&\n       (var2 = strncmp(errorMessage,*(char **)(param3 + 4),(long)(int)param3[6]), var2 == 0)) {\n      return result;\n    }\n  }\n  ptrList = ptrList + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "stab_demangle_v3_arg",
                "stab_find_tagged_type",
                "strncmp",
                "abort",
                "free",
                "debug_get_type_name.constprop.0",
                "debug_make_type.constprop.0",
                "stab_demangle_v3_arglist",
                "fprintf",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "strlen",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "cplus_demangle_print",
                "debug_get_fields.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_const_type.isra.0",
                "strcmp",
                "debug_make_reference_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_v3_arglist"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "in_CL": "currentChar",
                "ppbVar2": "mapSlotPtr",
                "pbVar3": "nextCharPtr",
                "bVar4": "nextChar",
                "unaff_RBX": "stringPtr",
                "unaff_EBP": "lineCount",
                "pbVar5": "stringStartPtr",
                "unaff_R13": "returnAddress",
                "unaff_R14": "currentLineStartPtr",
                "unaff_R15": "currentLinePtr",
                "in_stack_00000008": "context",
                "in_stack_00000010": "returnAddressPtr",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 errorMessage;\n  byte **mapSlotPtr;\n  byte *nextCharPtr;\n  byte currentChar;\n  byte nextChar;\n  byte *stringPtr;\n  int lineCount;\n  byte *stringStartPtr;\n  undefined8 returnAddress;\n  byte *currentLineStartPtr;\n  byte *currentLinePtr;\n  undefined8 context;\n  undefined8 *returnAddressPtr;\n  \n  do {\n    stringStartPtr = currentLinePtr;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = stringStartPtr[1];\n      stringStartPtr = stringStartPtr + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextChar = stringStartPtr[1];\n      if ((((((nextChar == 9) || (nextChar == 0x20)) &&\n            ((nextChar = stringStartPtr[2], nextChar == 9 || (nextChar == 0x20)))) &&\n           ((nextChar = stringStartPtr[3], nextChar == 9 || (nextChar == 0x20)))) &&\n          ((nextChar = stringStartPtr[4], nextChar == 9 || (nextChar == 0x20)))) &&\n         ((nextChar = stringStartPtr[5], nextChar == 9 || (nextChar == 0x20)))) {\n        nextChar = stringStartPtr[6];\n        nextCharPtr = stringStartPtr + 6;\n        if ((nextChar == 9) || (nextChar == 0x20)) {\n          do {\n            do {\n              nextChar = nextCharPtr[1];\n              nextCharPtr = nextCharPtr + 1;\n            } while (nextChar == 0x20);\n          } while (nextChar == 9);\n        }\n      }\n      if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) {\n        errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(errorMessage,context,lineCount);\n      }\n    }\nLAB_00114599:\n    *stringStartPtr = 0;\n    if (currentLinePtr < stringStartPtr) {\n      mapSlotPtr = (byte **)htab_find_slot();\n      *mapSlotPtr = currentLinePtr;\n    }\n    lineCount = lineCount + 1;\n    stringStartPtr = stringPtr;\n    if (currentLineStartPtr[1] == 0) {\n      *returnAddressPtr = returnAddress;\n      return;\n    }\n    for (; nextChar = *stringStartPtr, currentLineStartPtr = stringStartPtr, nextChar != 10; stringStartPtr = stringStartPtr + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          nextCharPtr = stringStartPtr + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *stringStartPtr = 0;\n          nextCharPtr = stringStartPtr + 1;\n          if (stringStartPtr[1] == 10) {\n            nextCharPtr = stringStartPtr + 2;\n            currentLineStartPtr = stringStartPtr + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *stringStartPtr = 0;\n    if (stringStartPtr[1] == 0xd) {\n      currentLineStartPtr = stringStartPtr + 1;\n      nextCharPtr = stringStartPtr + 2;\n    }\n    else {\n      nextCharPtr = stringStartPtr + 1;\n    }\nLAB_00114553:\n    currentChar = *stringPtr;\n    currentLinePtr = stringPtr;\n    while (stringPtr = nextCharPtr, currentChar == 0x20) {\nLAB_00104c3f:\n      stringStartPtr = currentLinePtr + 1;\n      currentLinePtr = currentLinePtr + 1;\n      nextCharPtr = stringPtr;\n      currentChar = *stringStartPtr;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "improve_and_reverse_code_0010554f",
                "gap_fill_set": "isGapFillSet",
                "pad_to_set": "isPadToSet",
                "param_12": "sectionCount",
                "param_14": "gapFillArray",
                "param_17": "sectionArray",
                "param_30": "relocationSectionArray",
                "param_31": "relocationSectionCount",
                "param_40": "newSectionArray",
                "param_43": "symbolChar",
                "param_44": "symbolType",
                "plVar28": "symbolArray",
                "__ptr_02": "stabArray",
                "puVar4": "updateSections",
                "puVar26": "addSymbols",
                "lVar14": "tempVar",
                "lVar37": "tempVar2",
                "uVar9": "status",
                "uVar12": "octetsPerByte",
                "uVar29": "sectionSize",
                "uVar16": "newSymbol",
                "uVar17": "errorString",
                "uVar21": "offset"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 improveAndReverseCode_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *updateSections;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 status;\n  int iVar10;\n  int iVar11;\n  uint octetsPerByte;\n  uint uVar13;\n  long tempVar;\n  long *plVar15;\n  undefined8 newSymbol;\n  undefined *__ptr;\n  undefined8 errorString;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong offset;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *addSymbols;\n  int iVar27;\n  long *symbolArray;\n  ulong sectionSize;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long tempVar2;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *stabArray;\n  ulong sectionCount;\n  char *param_13;\n  undefined *gapFillArray;\n  uint param_15;\n  long *sectionArray;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *relocationSectionArray;\n  ulong relocationSectionCount;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *newSectionArray;\n  char param_41;\n  char *param_42;\n  undefined symbolChar;\n  short symbolType;\n  \n  bVar39 = 0;\n  if ((isGapFillSet == '\\0') && (isPadToSet == '\\0')) {\n    sectionCount = 0;\n    gapFillArray = (undefined *)0x0;\n    sectionArray = (long *)0x0;\n    sectionSize = sectionCount;\n  }\n  else {\n    tempVar = (ulong)in_stack_00000068._4_4_ * 8;\n    sectionArray = (long *)xmalloc(tempVar);\n    newSectionArray = sectionArray;\n    bfd_map_over_sections(param_7,get_sections,&stack0x00000140);\n    qsort(sectionArray,(ulong)in_stack_00000068._4_4_,8,compare_section_lma);\n    gapFillArray = (undefined *)xmalloc(tempVar);\n    bVar38 = isGapFillSet != '\\0';\n    puVar33 = gapFillArray;\n    for (; tempVar != 0; tempVar = tempVar + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      sectionSize = 0;\n      sectionCount = 0;\n      do {\n        puVar30 = (ulong *)(gapFillArray + sectionSize * 8);\n        symbolArray = sectionArray + sectionSize;\n        offset = sectionCount;\n        do {\n          sectionCount = offset;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)sectionSize) goto LAB_00107cd1;\n          sectionSize = (ulong)((uint)sectionSize + 1);\n          octetsPerByte = bfd_octets_per_byte(param_7,*symbolArray);\n          uVar13 = bfd_octets_per_byte(param_7);\n          tempVar = *symbolArray;\n          if ((*(uint *)(tempVar + 0x24) & 0x102) != 0x102) break;\n          offset = (ulong)uVar13 * *(long *)(symbolArray[1] + 0x38);\n          uVar24 = (ulong)octetsPerByte * *(long *)(tempVar + 0x38) + *(long *)(tempVar + 0x40);\n          if (offset <= uVar24) break;\n          offset = offset - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,param_7,*symbolArray);\n            status = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = offset;\n          symbolArray = symbolArray + 1;\n          puVar30 = puVar30 + 1;\n        } while (sectionCount < offset);\n      } while( true );\n    }\n    sectionCount = 0;\nLAB_00107cd1:\n    sectionSize = sectionCount;\n    if (isPadToSet != '\\0') {\n      octetsPerByte = bfd_octets_per_byte(param_7);\n      tempVar = sectionArray[in_stack_00000068._4_4_ - 1];\n      offset = pad_to * (ulong)octetsPerByte;\n      uVar24 = *(long *)(tempVar + 0x40) + (ulong)octetsPerByte * *(long *)(tempVar + 0x38);\n      if (uVar24 < offset) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,param_7,sectionArray[in_stack_00000068._4_4_ - 1]);\n          status = 1;\n        }\n        else {\n          sectionSize = offset - uVar24;\n          *(ulong *)(gapFillArray + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = sectionSize;\n          if (sectionSize <= sectionCount) {\n            sectionSize = sectionCount;\n          }\n        }\n      }\n    }\n  }\n  sectionCount = sectionSize;\n  symbolArray = isympp;\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    stabArray = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &names_0;\n    stabArray = (undefined4 *)xmalloc(0x60);\n    puVar32 = stabArray;\n    for (tempVar = 0x18; tempVar != 0; tempVar = tempVar + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      tempVar = bfd_get_section_by_name(unaff_R14,puVar33);\n      tempVar2 = bfd_get_section_by_name();\n      if ((tempVar != 0) && (tempVar2 != 0)) {\n        lVar23 = *(long *)(tempVar + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,tempVar,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          status = bfd_get_error();\n          bfd_errmsg(status);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          sectionSize = *(ulong *)(tempVar2 + 0x40);\n          __ptr_01 = (void *)xmalloc(sectionSize + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,tempVar2,__ptr_01,0);\n          if (param_9 == '\\0') {\n            status = bfd_get_error();\n            bfd_errmsg(status);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + sectionSize) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)start_stab_constprop_0(unaff_R14,1,symbolArray),\n               param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                offset = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                status = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                tempVar = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + tempVar;\n                }\n                else {\n                  uVar24 = (offset & 0xffffffff) + param_23;\n                  if (uVar24 < sectionSize) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      offset = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (sectionSize <= offset) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + offset,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    errorString = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,errorString,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,status,tempVar,pcVar31);\n                    cVar7 = parse_stab(stabArray,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    errorString = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,errorString,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            offset & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = finish_stab(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(stabArray);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      tempVar = 0;\n      for (plVar15 = symbolArray; plVar15 < symbolArray + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((tempVar == 0) && (tempVar = start_stab_constprop_0(unaff_R14,0,symbolArray), tempVar == 0))\n             || ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < symbolArray + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          save_stab(symbolChar,(int)symbolType,newSectionArray,pcVar22);\n          param_9 = parse_stab(stabArray,tempVar,symbolChar);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((tempVar != 0) && (cVar7 = finish_stab(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        newSectionArray = (long *)0x0;\n        relocationSectionArray = symbolArray;\n        param_32 = 0;\n        relocationSectionCount = param_8;\n        in_stack_000000d8 = 0;\n        addSymbols = (undefined8 *)&stack0x00000148;\n        for (tempVar = 0x22; tempVar != 0; tempVar = tempVar + -1) {\n          *(undefined4 *)addSymbols = 0;\n          addSymbols = (undefined8 *)((long)addSymbols + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        octetsPerByte = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            tempVar = symbolArray[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,tempVar,&stack0x000000e0);\n            tempVar2 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              status = bfd_get_error();\n              bfd_errmsg(status);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(tempVar + 8);\n            addSymbols = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              addSymbols = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,tempVar,0);\n              if (cVar8 == '\\0') {\n                status = bfd_get_error();\n                bfd_errmsg(status);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)tempVar2) break;\n            if (param_36 != 0x67) {\n              cVar8 = debug_set_filename(stabArray);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = debug_set_filename(stabArray);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,tempVar,tempVar2);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                octetsPerByte = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = debug_start_block(stabArray);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block(stabArray);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)octetsPerByte >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  tempVar2 = parse_coff_type_lto_priv_0\n                                     (unaff_R14,&stack0x000000c0,&stack0x00000140,tempVar2,\n                                      uVar13 ^ (octetsPerByte ^ uVar13) & *(uint *)(unaff_R14[0x22] + 0x38)\n                                      ,addSymbols,0,stabArray);\n                  if ((tempVar2 == 0) || (cVar7 = debug_record_function(stabArray), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    tempVar = *(long *)(*(long *)(tempVar + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = debug_record_line(stabArray,iVar10 + iVar27,\n                                                *(long *)(_param_15 + 6) + tempVar);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  octetsPerByte = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = debug_end_function(stabArray);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              errorString = dcgettext(0,pcVar31,5);\n              non_fatal(errorString);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        errorString = dcgettext(0,pcVar31,5);\n        non_fatal(errorString);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        symbolArray = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          octetsPerByte = *(uint *)(*plVar15 + 0x18);\n          if ((octetsPerByte & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = octetsPerByte & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (symbolArray != plVar15);\n      }\n    }\n    else {\n      for (tempVar = *(long *)(param_7 + 0x90); tempVar != 0; tempVar = *(long *)(tempVar + 8)) {\n        if (*(long *)(tempVar + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(tempVar + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      tempVar = xmalloc();\n      symbolArray = isympp;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = tempVar;\n      if (param_8 == 0) {\n        sectionSize = 0;\n      }\n      else {\n        sectionSize = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = add_symbols;\n          plVar15 = (long *)symbolArray[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          octetsPerByte = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar27 = 0;\n            addSymbols = add_sym_list;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)addSymbols[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  offset = sectionSize + 1;\n                  addSymbols[5] = \"\";\n                  newSymbol = create_new_symbol(addSymbols);\n                  errorString = redefine_specific_htab;\n                  *(undefined8 *)(tempVar + sectionSize * 8) = newSymbol;\n                  tempVar2 = htab_elements(errorString);\n                  if ((tempVar2 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                addSymbols = (undefined8 *)*addSymbols;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          tempVar2 = htab_elements(redefine_specific_htab);\n          offset = sectionSize;\n          if ((tempVar2 != 0) || (section_rename_list != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                errorString = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(errorString);\n              }\n            }\n            _param_41 = 0;\n            newSectionArray = plVar20;\n            tempVar2 = htab_find(redefine_specific_htab);\n            if (((tempVar2 == 0) || (plVar25 = *(long **)(tempVar2 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = section_rename_list, (octetsPerByte & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              tempVar2 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = prefix_symbols_string;\n          tempVar2 = unaff_R14[1];\n          if (*(char *)(tempVar2 + 0x1c) == cVar7) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((octetsPerByte & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              tempVar2 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + tempVar2);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            sectionSize = offset;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              sectionSize = offset;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = prefix_symbols_string;\n              if ((*(char *)(tempVar2 + 0x1c) != '\\0') && (cVar7 != *(char *)(tempVar2 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              tempVar2 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(tempVar2);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            pcVar31 = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy((char *)__dest,prefix_symbols_string);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            sectionSize = offset;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((octetsPerByte & 0x20) == 0) &&\n             (((octetsPerByte & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((octetsPerByte & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                tempVar2 = htab_find();\n                if (tempVar2 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                newSectionArray = plVar25;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((octetsPerByte & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((octetsPerByte & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (tempVar2 = *(long *)(plVar15[4] + 0xd0), tempVar2 == 0)) ||\n                   (*(long *)(tempVar2 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            tempVar2 = htab_find();\n            if (tempVar2 != 0) {\nLAB_0010687f:\n              errorString = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(errorString);\n              status = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            newSectionArray = plVar25;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((octetsPerByte & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              newSectionArray = plVar25;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            tempVar2 = htab_find();\n            if (tempVar2 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((octetsPerByte & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              tempVar2 = htab_find();\n              if (tempVar2 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              newSectionArray = plVar25;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = is_strip_section_isra_0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((octetsPerByte & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((octetsPerByte & 0x82) != 0) {\n                  cVar7 = is_specified_symbol(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((tempVar2 = htab_elements(keepglobal_specific_htab), tempVar2 == 0 ||\n                      (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (tempVar2 = *plVar15, tempVar2 == 0)) ||\n                        ((*(int *)(*(long *)(tempVar2 + 8) + 8) != 5 ||\n                         (*(long *)(tempVar2 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((octetsPerByte & 1) != 0) && (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(tempVar + sectionSize * 8) = plVar15;\n              sectionSize = sectionSize + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        addSymbols = add_sym_list;\n        iVar10 = add_symbols;\n        for (tempVar2 = 0; tempVar2 < iVar10; tempVar2 = tempVar2 + 1) {\n          pcVar31 = (char *)addSymbols[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = sectionSize * 8;\n            sectionSize = sectionSize + 1;\n            errorString = create_new_symbol(addSymbols,param_7);\n            *(undefined8 *)(tempVar + lVar23) = errorString;\n            iVar10 = add_symbols;\n          }\n          else if (pcVar31 != \"\") {\n            errorString = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(errorString,pcVar31);\n          }\n          addSymbols = (undefined8 *)*addSymbols;\n        }\n      }\n      bVar38 = convert_debugging == '\\0';\n      *(undefined8 *)(tempVar + sectionSize * 8) = 0;\n      if ((bVar38) || (stabArray == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = sectionSize & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = write_stabs_in_sections_debugging_info_constprop_0\n                          (param_7,stabArray,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &stack0x00000140);\n        if (cVar7 != '\\0') {\n          tempVar = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          tempVar2 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((tempVar == 0) || (tempVar2 == 0)) ||\n              (cVar7 = bfd_set_section_size(tempVar,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(tempVar2,newSectionArray), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(tempVar + 0x7c) = 2;\n            *(undefined4 *)(tempVar2 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(param_7,tempVar,relocationSectionArray,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(param_7,tempVar2,param_33,0,newSectionArray), cVar7 != '\\0')\n               ) {\n              free(stabArray);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          errorString = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,param_7,0,errorString);\n          free(param_33);\n          free(stabArray);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        errorString = **(undefined8 **)(param_7 + 8);\n        newSymbol = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,newSymbol,errorString);\n      }\n      free(stabArray);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,mark_symbols_used_in_relocations,isympp);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    tempVar = htab_elements(strip_specific_htab);\n    if (((tempVar != 0) ||\n        ((((tempVar = htab_elements(keep_specific_htab), tempVar != 0 ||\n           (tempVar = htab_elements(localize_specific_htab), tempVar != 0)) ||\n          (tempVar = htab_elements(globalize_specific_htab), tempVar != 0)) ||\n         ((tempVar = htab_elements(keepglobal_specific_htab), tempVar != 0 ||\n          (tempVar = htab_elements(weaken_specific_htab), tempVar != 0)))))) ||\n       ((((tempVar = htab_elements(redefine_specific_htab), tempVar != 0 ||\n          ((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')))) ||\n         (sections_copied != '\\0')) ||\n        ((((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n          (remove_leading_char != '\\0')) ||\n         (((section_rename_list != (char **)0x0 || (weaken != '\\0')) || (add_symbols != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (addSymbols = add_sections; updateSections = update_sections, addSymbols != (undefined8 *)0x0;\n        addSymbols = (undefined8 *)*addSymbols) {\n      cVar7 = bfd_set_section_contents(param_7,addSymbols[5],addSymbols[4],0,addSymbols[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,addSymbols[5],0);\n        return 0;\n      }\n    }\n    for (; updateSections != (undefined8 *)0x0; updateSections = (undefined8 *)*updateSections) {\n      errorString = *(undefined8 *)(updateSections[5] + 0x60);\n      cVar7 = bfd_set_section_contents(param_7,errorString,updateSections[4],0,updateSections[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,errorString,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        errorString = *unaff_R14;\n        newSymbol = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(newSymbol,errorString);\n      }\n    }\n    else {\n      symbolArray = (long *)0x0;\n      for (addSymbols = *(undefined8 **)(param_7 + 0x90); addSymbols != (undefined8 *)0x0;\n          addSymbols = (undefined8 *)addSymbols[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(addSymbols[0x1a] + 4) == 7 &&\n            (cVar7 = startswith_lto_priv_0_lto_priv_0(*addSymbols,\".gnu.build.attributes\"),\n            cVar7 != '\\0')))) {\n          if (symbolArray == (long *)0x0) {\n            symbolArray = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*symbolArray + 0x60) == addSymbols) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (symbolArray[1] != 0) {\n              cVar7 = bfd_set_section_contents(param_7,addSymbols,symbolArray[1],0,symbolArray[2]);\n              if (cVar7 == '\\0') {\n                errorString = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,addSymbols,errorString);\n                return 0;\n              }\n              symbolArray = (long *)symbolArray[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              symbolArray = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == addSymbols) goto LAB_0010625f;\n              symbolArray = (long *)plVar15[3];\n              plVar15 = symbolArray;\n            } while (symbolArray != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          errorString = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,param_7,addSymbols,errorString);\n        }\nLAB_001061be:\n      }\n      do {\n        symbolArray = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = symbolArray;\n      } while (symbolArray != (long *)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(param_7,param_21), tempVar = gnu_debuglink_filename\n       , cVar7 != '\\0')) {\n      if (gapFillArray != (undefined *)0x0) {\n        if (0x2000 < sectionCount) {\n          sectionCount = 0x2000;\n        }\n        tempVar = 0;\n        __ptr = (undefined *)xmalloc(sectionCount);\n        uVar5 = gap_fill;\n        puVar33 = __ptr;\n        for (sectionCount = sectionCount & 0xffffffff; sectionCount != 0; sectionCount = sectionCount - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)tempVar < in_stack_00000068._4_4_; tempVar = tempVar + 1) {\n          sectionSize = *(ulong *)(gapFillArray + tempVar * 8);\n          if (sectionSize != 0) {\n            tempVar2 = *(long *)(*sectionArray + 0x40) - sectionSize;\n            do {\n              offset = 0x2000;\n              if (sectionSize < 0x2001) {\n                offset = sectionSize;\n              }\n              cVar7 = bfd_set_section_contents(param_7,*sectionArray,__ptr,tempVar2,offset);\n              if (cVar7 == '\\0') {\n                bfd_nonfatal_message(0,param_7,*sectionArray,0);\n                free(__ptr);\n                return 0;\n              }\n              tempVar2 = tempVar2 + offset;\n              sectionSize = sectionSize - offset;\n            } while (sectionSize != 0);\n          }\n          sectionArray = sectionArray + 1;\n        }\n        free(__ptr);\n        free(gapFillArray);\n      }\n      status = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      if ((char)status != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return status;\n        }\n        cVar7 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        sectionSize = use_alt_mach_code;\n        if (cVar7 == '\\0') {\n          errorString = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(errorString,sectionSize);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            errorString = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(errorString);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return status;\n          }\n          errorString = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(errorString);\n          return status;\n        }\n        return status;\n      }\n      errorString = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,errorString);\n    }\n    else {\n      errorString = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,errorString,tempVar);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "is_strip_section.isra.0",
                "is_specified_symbol",
                "finish_stab",
                "bfd_is_local_label",
                "fatal",
                "bfd_map_over_sections",
                "strlen",
                "concat",
                "dcgettext",
                "bfd_set_section_size",
                "create_new_symbol",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "bfd_set_symtab",
                "htab_find",
                "debug_end_block",
                "copy_section",
                "bfd_coff_get_syment",
                "strcmp",
                "debug_record_function",
                "non_fatal",
                "htab_traverse",
                "free",
                "bfd_map_over_sections",
                "debug_end_function",
                "fprintf",
                "debug_start_block",
                "free_saved_stabs",
                "strcpy",
                "parse_stab",
                "bfd_alt_mach_code",
                "bfd_decode_symclass",
                "debug_set_filename",
                "bfd_make_section_with_flags",
                "bfd_set_error",
                "bfd_errmsg",
                "debug_record_line",
                "save_stab",
                "startswith.lto_priv.0.lto_priv.0",
                "htab_elements",
                "bfd_fill_in_gnu_debuglink_section",
                "qsort",
                "mark_symbols_used_in_relocations",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_coff_get_auxent",
                "start_stab.constprop.0",
                "bfd_octets_per_byte",
                "get_sections",
                "bfd_set_section_contents",
                "bfd_get_error",
                "xstrdup",
                "parse_coff_type.lto_priv.0",
                "stab_context",
                "compare_section_lma",
                "bfd_get_section_contents",
                "parse_coff_symbol.constprop.0.isra.0",
                "is_specified_symbol_predicate",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improve_and_reverse_code_0010554f"
        },
        "FUN_00104230": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104230"
        },
        "FUN_00104110": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104110"
        },
        "FUN_00128440": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128440",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128440"
        },
        "FUN_00104470": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "debug_type_samep",
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "FUN_0010554f",
                "stab_find_tagged_type",
                "find_section_list",
                "debug_set_class_id.lto_priv.0",
                "eq_string_redefnode",
                "main",
                "parse_stab",
                "setup_section",
                "is_strip_section_1.isra.0",
                "parse_stab_type",
                "stab_demangle_qualified",
                "debug_tag_type",
                "convert_efi_target",
                "debug_find_named_type",
                "skip_section"
            ],
            "imported": false,
            "current_name": "FUN_00104470"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "convert_and_push_string_00109cf4",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "options",
                "local_3c": "convertedString"
            },
            "code": "\nvoid convertAndPushString_00109cf4(undefined8 destination,undefined8 value,undefined4 options)\n\n{\n  char convertedString [28];\n  \n  sprintf(convertedString,\"%ld\",value);\n  stab_push_string(destination,convertedString,value,0,options);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "stab_void_type.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_tag_type.lto_priv.0",
                "stab_bool_type.lto_priv.0",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "convert_and_push_string_00109cf4"
        },
        "FUN_00128320": {
            "renaming": {},
            "code": "\n\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128320",
            "calling": [
                "strncasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128320"
        },
        "FUN_00104350": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00104350"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_input_00109ab1",
                "param_1": "input_string",
                "param_2": "output_values",
                "param_3": "num1",
                "param_4": "num2",
                "uVar1": "parsed_value",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "output"
            },
            "code": "\nundefined  [16]\nparse_input_00109ab1(char **input_string,undefined4 *output_values,undefined8 num1,undefined8 num2,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_value;\n  char *current_char;\n  undefined8 result;\n  undefined output [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    parsed_value = parse_number(input_string,0);\n    *output_values = parsed_value;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      parsed_value = parse_number(input_string,0,num1);\n      output_values[1] = parsed_value;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    bad_stab(current_char);\n    result = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)parse_number(input_string,0);\n    output_values[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  output._8_8_ = param_5;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "parse_number",
                "bad_stab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_input_00109ab1"
        },
        "FUN_00128200": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128200",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_00128200"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_strip_section_001159d0",
                "param_1": "input_param",
                "uVar3": "result",
                "lVar4": "group_signature",
                "lVar5": "current_signature",
                "uVar1": "symbol",
                "cVar2": "is_valid_symbol"
            },
            "code": "\nundefined4 check_strip_section_001159d0(long input_param)\n\n{\n  undefined8 symbol;\n  char is_valid_symbol;\n  undefined4 result;\n  long group_signature;\n  long current_signature;\n  \n  result = is_strip_section_1_isra_0();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(input_param + 0x27) & 2) == 0) {\n      return result;\n    }\n    group_signature = group_signature_isra_0(*(undefined8 *)(input_param + 0xd0),*(undefined8 *)(input_param + 0xe0));\n    if ((group_signature != 0) &&\n       (((symbol = *(undefined8 *)(group_signature + 8), strip_symbols != 7 ||\n         (is_valid_symbol = is_specified_symbol(symbol,keep_specific_htab), is_valid_symbol != '\\0')) &&\n        (is_valid_symbol = is_specified_symbol(symbol,strip_specific_htab), is_valid_symbol == '\\0')))) {\n      group_signature = *(long *)(*(long *)(input_param + 0xd0) + 0xc0);\n      current_signature = group_signature;\n      do {\n        if (current_signature == 0) {\n          return 1;\n        }\n        is_valid_symbol = is_strip_section_1_isra_0(current_signature);\n        if (is_valid_symbol == '\\0') {\n          return result;\n        }\n        current_signature = *(long *)(*(long *)(current_signature + 0xd0) + 0xc0);\n      } while (group_signature != current_signature);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_strip_section_1.isra.0",
                "is_specified_symbol",
                "group_signature.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "setup_section",
                "FUN_0010554f",
                "skip_section"
            ],
            "imported": false,
            "current_name": "check_strip_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "combine_strings_0010a77a",
                "param_1": "input",
                "uVar1": "status",
                "lVar2": "data",
                "__s": "sourceString",
                "uVar4": "returnValue",
                "__s_00": "inputString",
                "sVar5": "inputStringLength",
                "sVar6": "sourceStringLength",
                "__s_01": "combinedString",
                "uVar3": "parameter3"
            },
            "code": "\nundefined4 combineStrings_0010a77a(long input)\n\n{\n  undefined status;\n  long data;\n  char *sourceString;\n  undefined8 parameter3;\n  undefined4 returnValue;\n  char *inputString;\n  size_t inputStringLength;\n  size_t sourceStringLength;\n  char *combinedString;\n  \n  data = *(long *)(input + 0x60);\n  if ((data != 0) && (sourceString = *(char **)(data + 0x20), sourceString != (char *)0x0)) {\n    returnValue = *(undefined4 *)(data + 0x18);\n    status = *(undefined *)(data + 0x1c);\n    parameter3 = *(undefined8 *)(data + 0x10);\n    inputString = (char *)stab_pop_type();\n    inputStringLength = strlen(inputString);\n    sourceStringLength = strlen(sourceString);\n    combinedString = (char *)xmalloc(inputStringLength + 2 + sourceStringLength);\n    sprintf(combinedString,\"%s%s;\",inputString,sourceString);\n    free(inputString);\n    free(sourceString);\n    returnValue = stab_push_string(input,combinedString,parameter3,status,returnValue);\n    if ((char)returnValue != '\\0') {\n      free(combinedString);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "combine_strings_0010a77a"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_file_error_handler_0010543c",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar1": "filePointer",
                "uVar4": "errorMessage",
                "unaff_RBP": "stackBase"
            },
            "code": "\nvoid openFileErrorHandler_0010543c(void)\n\n{\n  undefined8 filePointer;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  long stackBase;\n  \n  errnoLocation = __errno_location();\n  errorString = strerror(*errnoLocation);\n  filePointer = *(undefined8 *)(stackBase + 0x10);\n  errorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(errorMessage,filePointer,errorString);\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "__errno_location",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "section_add_load_file"
            ],
            "imported": false,
            "current_name": "open_file_error_handler_0010543c"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "create_improved_string_0010a424",
                "param_1": "original",
                "param_2": "condition1",
                "param_3": "length",
                "param_4": "condition2",
                "cVar1": "result",
                "bVar2": "byteVar",
                "iVar3": "count",
                "uVar4": "returnValue",
                "pcVar5": "str1",
                "__ptr": "ptr",
                "uVar6": "value",
                "__s": "str2",
                "sVar7": "str1Len",
                "sVar8": "str2Len",
                "__s_00": "finalStr",
                "lVar9": "index",
                "bVar10": "boolVar",
                "lVar11": "loopIndex",
                "uVar12": "undefinedVar"
            },
            "code": "\nundefined4 createImprovedString_0010a424(long original,char condition1,int length,char condition2)\n\n{\n  char result;\n  byte byteVar;\n  int count;\n  undefined4 returnValue;\n  char *str1;\n  undefined8 *ptr;\n  undefined8 value;\n  char *str2;\n  size_t str1Len;\n  size_t str2Len;\n  char *finalStr;\n  long index;\n  byte boolVar;\n  long loopIndex;\n  undefined undefinedVar;\n  \n  if ((condition1 == '\\0') && (result = stab_empty_type_lto_priv_0(), result == '\\0')) {\n    return 0;\n  }\n  boolVar = *(byte *)(*(long *)(original + 0x60) + 0x1c);\n  str1 = (char *)stab_pop_type(original);\n  if (length < 0) {\n    ptr = (undefined8 *)0x0;\n    length = 0;\nLAB_0010a582:\n    undefinedVar = 1;\n    if (boolVar != 0) goto LAB_0010a596;\n  }\n  else {\n    if (length != 0) {\n      count = length + 1;\n      ptr = (undefined8 *)xmalloc((long)count * 8);\n      index = (long)(length + -1);\n      do {\n        byteVar = 1;\n        if (boolVar == 0) {\n          byteVar = *(byte *)(*(long *)(original + 0x60) + 0x1c);\n        }\n        value = stab_pop_type(original);\n        boolVar = byteVar & 1;\n        ptr[index] = value;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (condition2 == '\\0') {\n        result = stab_empty_type_lto_priv_0(original);\n        if (result == '\\0') {\n          return 0;\n        }\n        byteVar = 1;\n        if (boolVar == 0) {\n          byteVar = *(byte *)(*(long *)(original + 0x60) + 0x1c);\n        }\n        boolVar = byteVar & 1;\n        value = stab_pop_type(original);\n        ptr[(long)count + -1] = value;\n        length = count;\n      }\n      goto LAB_0010a582;\n    }\n    ptr = (undefined8 *)0x0;\n    if (condition2 != '\\0') goto LAB_0010a582;\n    ptr = (undefined8 *)xmalloc(8);\n    result = stab_empty_type_lto_priv_0(original);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((boolVar != 0) || (*(char *)(*(long *)(original + 0x60) + 0x1c) != '\\0')) {\n      value = stab_pop_type(original);\n      length = 1;\n      undefinedVar = 1;\n      *ptr = value;\n      goto LAB_0010a596;\n    }\n    value = stab_pop_type(original);\n    length = 1;\n    *ptr = value;\n  }\n  undefinedVar = *(undefined *)(*(long *)(original + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)stab_pop_type(original);\n  str1Len = strlen(str1);\n  str2Len = strlen(str2);\n  index = str1Len + 10 + str2Len;\n  for (loopIndex = 0; (int)loopIndex < length; loopIndex = loopIndex + 1) {\n    str1Len = strlen((char *)ptr[loopIndex]);\n    index = index + str1Len;\n  }\n  finalStr = (char *)xmalloc(index);\n  sprintf(finalStr,\"#%s,%s\",str1,str2);\n  index = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    str1Len = strlen(finalStr);\n    if (length <= (int)index) break;\n    *(undefined2 *)(finalStr + str1Len) = 0x2c;\n    str1 = (char *)ptr[index];\n    index = index + 1;\n    strcpy(finalStr + str1Len + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(finalStr + str1Len) = 0x3b;\n  free(ptr);\n  returnValue = stab_push_string(original,finalStr,0,undefinedVar,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(finalStr);\n  return returnValue;\n}\n\n",
            "called": [
                "strcpy",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_empty_type.lto_priv.0",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "create_improved_string_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_program_info_00119970",
                "param_1": "version",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printProgramInfo_00119970(undefined8 version)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_program_info_00119970"
        },
        "FUN_00104480": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "display_info.isra.0.cold",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00104480"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_input_00114c80",
                "param_1": "input_string",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "pcVar1": "equal_sign_ptr",
                "uVar2": "substring",
                "auVar3": "new_struct",
                "dcgettext": "get_error_message",
                "fatal": "display_error"
            },
            "code": "\nundefined  [16] parse_input_00114c80(char *input_string,undefined8 value_1,undefined8 value_2,undefined8 value_3)\n\n{\n  char *equal_sign_ptr;\n  undefined8 substring;\n  undefined new_struct [16];\n  \n  equal_sign_ptr = strchr(input_string,0x3d);\n  if (equal_sign_ptr != (char *)0x0) {\n    new_struct._0_8_ = (undefined8 *)xmalloc(0x30);\n    substring = xstrndup(input_string,(long)equal_sign_ptr - (long)input_string);\n    new_struct._0_8_[2] = equal_sign_ptr + 1;\n    new_struct._0_8_[1] = substring;\n    new_struct._0_8_[4] = 0;\n    new_struct._0_8_[3] = 0;\n    *new_struct._0_8_ = value_1;\n    new_struct._8_8_ = value_3;\n    return new_struct;\n  }\n  substring = get_error_message(0,\"bad format for %s\",5);\n                    \n  display_error(substring,value_2);\n}\n\n",
            "called": [
                "strchr",
                "init_section_add.cold",
                "xstrndup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_input_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_and_value_0010870e",
                "param_1": "inputPointer",
                "param_2": "newValue",
                "param_3": "pointerToLong",
                "puVar1": "currentPointer"
            },
            "code": "\nvoid updatePointerAndValue_0010870e(undefined8 inputPointer,undefined8 newValue,long *pointerToLong)\n\n{\n  undefined8 *currentPointer;\n  \n  currentPointer = (undefined8 *)*pointerToLong;\n  *currentPointer = newValue;\n  *pointerToLong = (long)(currentPointer + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_and_value_0010870e"
        },
        "FUN_001048a0": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001048a0"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_data",
                "param_2": "symbol_table",
                "param_3": "debug_data",
                "param_5": "type_code",
                "param_6": "enum_values",
                "param_7": "flag",
                "param_8": "debug_info",
                "lVar1": "temp1",
                "cVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "lVar5": "result",
                "uVar6": "temp6",
                "plVar7": "ptr",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "temp8",
                "iVar9": "temp9",
                "pcVar10": "temp10",
                "uVar11": "temp11",
                "lVar12": "temp12",
                "uVar13": "temp13",
                "uVar14": "temp14",
                "uVar15": "temp15",
                "local_68": "buffer",
                "local_48": "char_val",
                "local_47": "byte_val"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_data,long *symbol_table,long debug_data,undefined8 param_4,uint type_code,\n                 long *enum_values,char flag,undefined8 debug_info)\n\n{\n  long temp1;\n  char temp2;\n  undefined4 temp3;\n  undefined8 temp4;\n  long result;\n  undefined8 temp6;\n  long *ptr;\n  void *ptr1;\n  void *ptr2;\n  byte temp8;\n  int temp9;\n  char *temp10;\n  ulong temp11;\n  long temp12;\n  uint temp13;\n  uint temp14;\n  undefined8 temp15;\n  undefined buffer [32];\n  char char_val;\n  byte byte_val;\n  \n  result = *(long *)(coff_data + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    temp13 = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    temp11 = (ulong)(type_code & *(uint *)(result + 0x40));\n    temp8 = (byte)*(undefined4 *)(result + 0x3c);\n    temp13 = (temp13 ^ type_code) & *(uint *)(result + 0x38) ^ temp13;\n    if (temp11 == 1L << (temp8 & 0x3f)) {\n      temp4 = parse_coff_type_0010dac0(coff_data,symbol_table,debug_data,param_4,temp13,enum_values,flag,debug_info);\n      result = debug_make_pointer_type_isra_0(temp4);\n      return result;\n    }\n    if (temp11 != 2L << (temp8 & 0x3f)) {\n      if (temp11 != 3L << (temp8 & 0x3f)) {\n        temp4 = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          temp13);\n        non_fatal(temp4,type_code);\n        return 0;\n      }\n      temp14 = 0;\n      if (enum_values != (long *)0x0) {\n        temp14 = (uint)*(ushort *)(enum_values + 2);\n        ptr = enum_values + 2;\n        for (temp9 = 0; (*(short *)ptr != 0 && (temp9 != 3)); temp9 = temp9 + 1) {\n          *(short *)ptr = *(short *)((long)ptr + 2);\n          ptr = (long *)((long)ptr + 2);\n        }\n        *(short *)ptr = 0;\n      }\n      temp15 = 0;\n      temp4 = debug_info;\n      temp6 = parse_coff_type_0010dac0(coff_data,symbol_table,debug_data,param_4,temp13,enum_values,0);\n      result = *(long *)(debug_data + 0x28);\n      if (result == 0) {\n        temp4 = debug_make_int_type_isra_0(4,0,temp15,temp4);\n        result = debug_name_type(debug_info,\"int\",temp4);\n        *(long *)(debug_data + 0x28) = result;\n      }\n      result = debug_make_array_type_isra_0(temp6,result,0,(long)(int)(temp14 - 1),0);\n      return result;\n    }\n    temp4 = parse_coff_type_0010dac0(coff_data,symbol_table,debug_data,param_4,temp13,enum_values,flag,debug_info);\n    result = debug_make_function_type_isra_0(temp4,0,0);\n    return result;\n  }\n  if ((enum_values != (long *)0x0) && (0 < *enum_values)) {\n    ptr = (long *)coff_get_slot_lto_priv_0(debug_data);\n    if (*ptr != 0) {\n      return *ptr;\n    }\n    result = debug_make_indirect_type_isra_0(ptr,0);\n    return result;\n  }\n  if (flag == '\\0') {\n    enum_values = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = debug_make_void_type_isra_0();\n    return result;\n  }\n  result = *(long *)(debug_data + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    temp4 = debug_make_void_type_isra_0();\n    temp10 = \"void\";\n    break;\n  case 2:\n    temp4 = debug_make_int_type_isra_0(1,0);\n    temp10 = \"char\";\n    break;\n  case 3:\n    temp4 = debug_make_int_type_isra_0(2,0);\n    temp10 = \"short\";\n    break;\n  case 4:\n    temp4 = debug_make_int_type_isra_0(4,0);\n    temp10 = \"int\";\n    break;\n  case 5:\n    temp4 = debug_make_int_type_isra_0(4,0);\n    temp10 = \"long\";\n    break;\n  case 6:\n    temp4 = debug_make_float_type_isra_0(4);\n    temp10 = \"float\";\n    break;\n  case 7:\n    temp4 = debug_make_float_type_isra_0(8);\n    temp10 = \"double\";\n    break;\n  case 8:\n    if (enum_values == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    temp4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (enum_values == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    temp4 = 9;\nLAB_0010de7a:\n    result = parse_coff_struct_type(coff_data,symbol_table,debug_data,temp4,enum_values,debug_info);\nLAB_0010e046:\n    ptr = (long *)coff_get_slot_lto_priv_0(debug_data,param_4);\n    *ptr = result;\n    return result;\n  case 10:\n    if (enum_values == (long *)0x0) {\n      result = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      result = enum_values[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      temp12 = 0;\n      do {\n        while( true ) {\n          if ((result <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          temp9 = (int)temp12;\n          temp1 = *(long *)(*symbol_table + symbol_table[2] * 8);\n          temp2 = bfd_coff_get_syment(coff_data,temp1,buffer);\n          temp12 = (long)temp9;\n          if (temp2 == '\\0') {\n            temp3 = bfd_get_error();\n            temp4 = bfd_errmsg(temp3);\n            temp6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(temp6,temp4);\n            free(ptr1);\n            free(ptr2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)byte_val + 1 + symbol_table[3];\n          if (char_val != '\\x10') break;\n          if ((int)type_code <= temp9 + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          temp12 = *(long *)(temp1 + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)temp9 * 8) = *(undefined8 *)(temp1 + 8);\n          *(long *)((long)ptr2 + (long)temp9 * 8) =\n               *(long *)(temp1 + 0x10) + *(long *)(temp12 + 0x30);\n          temp12 = (long)(temp9 + 1);\n        }\n      } while (char_val != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + temp12 * 8) = 0;\n      result = debug_make_enum_type_isra_0(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    temp4 = debug_make_int_type_isra_0(1,1);\n    temp10 = \"unsigned char\";\n    break;\n  case 0xd:\n    temp4 = debug_make_int_type_isra_0(2,1);\n    temp10 = \"unsigned short\";\n    break;\n  case 0xe:\n    temp4 = debug_make_int_type_isra_0(4,1);\n    temp10 = \"unsigned int\";\n    break;\n  case 0xf:\n    temp4 = debug_make_int_type_isra_0(4,1);\n    temp10 = \"unsigned long\";\n    break;\n  case 0x10:\n    temp4 = debug_make_float_type_isra_0(0xc);\n    temp10 = \"long double\";\n  }\n  result = debug_name_type(debug_info,temp10,temp4);\nLAB_0010e065:\n  *(long *)(debug_data + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "non_fatal",
                "parse_coff_struct_type",
                "coff_get_slot.lto_priv.0",
                "free",
                "debug_make_indirect_type.isra.0",
                "bfd_get_error",
                "debug_make_void_type.isra.0",
                "debug_make_int_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "debug_make_array_type.isra.0",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "debug_make_struct_type.isra.0",
                "debug_make_float_type.isra.0",
                "xmalloc",
                "bfd_coff_get_syment",
                "debug_make_enum_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "str1",
                "param_2": "str2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "__n": "str2Length",
                "extraout_var": "extraVar",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *str1,char *str2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  size_t str2Length;\n  undefined4 extraVar;\n  undefined result [16];\n  \n  str2Length = strlen(str2);\n  comparisonResult = strncmp(str1,str2,str2Length);\n  result._1_7_ = (undefined7)(CONCAT44(extraVar,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "main",
                "stab_demangle_function_name.constprop.0",
                "handle_remove_section_option",
                "parse_stab_type",
                "FUN_0010554f",
                "convert_efi_target",
                "FUN_00107880",
                "skip_section",
                "is_dwo_section.constprop.0"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_cannot_set_time_error_0010882c",
                "piVar1": "errorLocationPtr",
                "uVar2": "errorMsg",
                "strerror": "getErrorString",
                "dcgettext": "getFormattedMessage",
                "non_fatal": "reportError"
            },
            "code": "\nvoid printCannotSetTimeError_0010882c(void)\n\n{\n  int *errorLocationPtr;\n  undefined8 errorMsg;\n  \n  errorLocationPtr = __errno_location();\n  getErrorString(*errorLocationPtr);\n  errorMsg = getFormattedMessage(0,\"%s: cannot set time: %s\",5);\n  reportError(errorMsg);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "print_cannot_set_time_error_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "write_symbol_to_symbol_table_0010ebb0",
                "param_1": "symbolTable",
                "param_2": "fileName",
                "param_3": "switchCaseValue",
                "param_4": "data",
                "__s": "poppedType",
                "cVar1": "switchChar",
                "__s_00": "formattedString",
                "uVar2": "switchCaseIndex",
                "uVar3": "result",
                "sVar4": "fileNameLength",
                "sVar5": "poppedTypeLength"
            },
            "code": "\nundefined4 writeSymbolToSymbolTable_0010ebb0(undefined8 symbolTable,char *fileName,int switchCaseValue,undefined8 data)\n\n{\n  char switchChar;\n  uint switchCaseIndex;\n  undefined4 result;\n  char *poppedType;\n  size_t fileNameLength;\n  size_t poppedTypeLength;\n  char *formattedString;\n  \n  poppedType = (char *)stab_pop_type();\n  switchCaseIndex = switchCaseValue - 1;\n  if (switchCaseIndex < 4) {\n    result = *(undefined4 *)(CSWTCH_42 + (ulong)switchCaseIndex * 4);\n    switchChar = *(char *)((long)&CSWTCH_43 + (ulong)switchCaseIndex);\n    fileNameLength = strlen(fileName);\n    poppedTypeLength = strlen(poppedType);\n    formattedString = (char *)xmalloc(fileNameLength + 3 + poppedTypeLength);\n    sprintf(formattedString,\"%s:%c%s\",fileName,(ulong)(uint)(int)switchChar,poppedType);\n    free(poppedType);\n    result = stab_write_symbol_lto_priv_0(symbolTable,result,0,data,formattedString);\n    if ((char)result != '\\0') {\n      free(formattedString);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_symbol_table_0010ebb0"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_data_object_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "typeObject",
                "plVar2": "dataObject"
            },
            "code": "\nlong createDataObject_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long typeObject;\n  long *dataObject;\n  \n  if ((input1 != 0) && (typeObject = debug_make_type_constprop_0(0x13,0), typeObject != 0)) {\n    dataObject = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)dataObject + 0x19) = 0;\n    *dataObject = input1;\n    *(undefined4 *)((long)dataObject + 0x1c) = 0;\n    dataObject[1] = input2;\n    dataObject[2] = input3;\n    *(undefined *)(dataObject + 3) = input4;\n    *(long **)(typeObject + 0x10) = dataObject;\n    return typeObject;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_data_object_00113b98"
        },
        "FUN_00104120": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104120"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_if_symbol_exists_00115d70",
                "param_1": "symbol",
                "param_2": "hashTable",
                "lVar1": "result",
                "local_18": "symbolCopy",
                "local_10": "symbolExists"
            },
            "code": "\nundefined checkIfSymbolExists_00115d70(undefined8 symbol,undefined8 hashTable)\n\n{\n  long result;\n  undefined8 symbolCopy;\n  undefined symbolExists;\n  \n  if (wildcard == '\\0') {\n    result = htab_find(hashTable,symbol);\n    symbolExists = result != 0;\n  }\n  else {\n    symbolExists = 0;\n    symbolCopy = symbol;\n    htab_traverse(hashTable,is_specified_symbol_predicate,&symbolCopy);\n  }\n  return symbolExists;\n}\n\n",
            "called": [
                "is_specified_symbol_predicate",
                "htab_traverse",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "is_strip_section.isra.0",
                "FUN_0010554f",
                "copy_relocations_in_section.cold"
            ],
            "imported": false,
            "current_name": "check_if_symbol_exists_00115d70"
        },
        "FUN_00104000": {
            "renaming": {
                "FUN_00104000": "initialize_monitor_00104000",
                "ctx": "context",
                "iVar1": "returnValue"
            },
            "code": "\nint initializeMonitor_00104000(EVP_PKEY_CTX *context)\n\n{\n  int returnValue;\n  \n  returnValue = __gmon_start__();\n  return returnValue;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_monitor_00104000"
        },
        "FUN_00104360": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104360"
        },
        "FUN_00128430": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcat@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128430",
            "calling": [
                "strcat"
            ],
            "imported": false,
            "current_name": "FUN_00128430"
        },
        "FUN_00104240": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "bfd_nonfatal.cold",
                "merge_gnu_build_notes",
                "add_redefine_and_check",
                "list_matching_formats",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "finish_stab",
                "stab_struct_field.lto_priv.0",
                "bad_stab",
                "copy_usage",
                "main",
                "debug_name_type",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "stab_write_symbol.lto_priv.0",
                "debug_write_type.constprop.0",
                "get_file_size.cold",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "display_info.isra.0",
                "debug_end_block",
                "add_specific_symbols",
                "debug_get_real_type.isra.0",
                "debug_record_function",
                "parse_coff_struct_type",
                "endian_string",
                "debug_end_function",
                "copy_section.cold",
                "debug_start_block",
                "copy_object",
                "parse_vma.cold",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "parse_number",
                "print_version",
                "create_new_symbol.cold",
                "FUN_00107880",
                "copy_file",
                "do_display_target",
                "stab_demangle_v3_arg",
                "debug_record_line",
                "list_supported_targets",
                "FUN_0010554f",
                "init_section_add.cold",
                "debug_record_variable",
                "strip_usage",
                "debug_add_to_current_namespace.constprop.0",
                "FUN_00116490",
                "setup_section.cold",
                "smart_rename.cold",
                "stab_typdef.lto_priv.0",
                "FUN_00108179",
                "stab_demangle_v3_arglist",
                "FUN_00104cc1",
                "stab_bad_demangle",
                "setup_section",
                "get_file_size",
                "section_add_load_file.cold",
                "stab_find_slot",
                "FUN_00105828",
                "copy_object.cold",
                "set_times.cold",
                "FUN_0010808f",
                "stab_find_type",
                "FUN_001152b6",
                "stab_int_type.lto_priv.0",
                "parse_coff_type.lto_priv.0",
                "stab_context",
                "FUN_001086af",
                "FUN_00107976",
                "check_new_section_flags.cold",
                "debug_tag_type",
                "debug_start_source",
                "debug_find_named_type",
                "FUN_00114dc7",
                "warn_stab",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_00104240"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "dataStructure",
                "param_2": "value",
                "param_3": "size",
                "uVar1": "newAllocatedMemory",
                "puVar2": "ptrToStoredData",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndStoreData_00109be3(long dataStructure,undefined8 value,undefined4 size)\n\n{\n  undefined8 newAllocatedMemory;\n  undefined8 *ptrToStoredData;\n  uint currentSize;\n  \n  if (*(uint *)(dataStructure + 0x2c) <= *(uint *)(dataStructure + 0x28)) {\n    currentSize = *(uint *)(dataStructure + 0x2c) + 10;\n    *(uint *)(dataStructure + 0x2c) = currentSize;\n    newAllocatedMemory = xrealloc(*(undefined8 *)(dataStructure + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(dataStructure + 0x20) = newAllocatedMemory;\n  }\n  currentSize = *(uint *)(dataStructure + 0x28);\n  ptrToStoredData = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(dataStructure + 0x20));\n  *ptrToStoredData = value;\n  *(undefined4 *)(ptrToStoredData + 1) = size;\n  *(uint *)(dataStructure + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)ptrToStoredData >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "stab_demangle_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "expand_and_store_data_00109be3"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_with_null_terminator_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "allocatedString"
            },
            "code": "\nvoid copyStringWithNullTerminator_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *allocatedString;\n  \n  stringLength = strnlen(inputString,maxLength);\n  allocatedString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)allocatedString + stringLength) = 0;\n  memcpy(allocatedString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "memcpy",
                "xmalloc",
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "main",
                "init_section_add"
            ],
            "imported": false,
            "current_name": "copy_string_with_null_terminator_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "write_stab_symbol_0010e918",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "__s": "symbol",
                "sVar2": "param2Length",
                "sVar3": "symbolLength",
                "__s_00": "formattedSymbol",
                "uVar1": "result"
            },
            "code": "\nundefined4 writeStabSymbol_0010e918(undefined8 param1,char *param2,undefined8 param3)\n\n{\n  undefined4 result;\n  char *symbol;\n  size_t param2Length;\n  size_t symbolLength;\n  char *formattedSymbol;\n  \n  symbol = (char *)stab_pop_type();\n  param2Length = strlen(param2);\n  symbolLength = strlen(symbol);\n  formattedSymbol = (char *)xmalloc(param2Length + 0x14 + symbolLength);\n  sprintf(formattedSymbol,\"%s:c=e%s,%ld\",param2,symbol,param3);\n  free(symbol);\n  result = stab_write_symbol_lto_priv_0(param1,0x80,0,0,formattedSymbol);\n  if ((char)result != '\\0') {\n    free(formattedSymbol);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_stab_symbol_0010e918"
        },
        "FUN_00128218": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128218",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00128218"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "process_section_00116110",
                "param_1": "inputFile",
                "param_2": "sectionData",
                "param_3": "outputFile",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "lVar3": "sectionIndex",
                "iVar4": "copyWidth",
                "iVar5": "copyByte",
                "cVar6": "result",
                "uVar7": "errorMsg",
                "__ptr": "buffer",
                "lVar8": "copyIndex",
                "uVar9": "loopIndex1",
                "iVar10": "reverseBytes",
                "uVar11": "loopIndex2",
                "puVar12": "tempPointer",
                "lVar13": "sectionListIndex",
                "puVar14": "tempPointer2",
                "puVar15": "tempPointer3",
                "pvVar16": "tempPointer4",
                "uVar17": "tempVar3",
                "uVar18": "loopCount1",
                "uVar19": "loopCount2",
                "bVar20": "skipSection",
                "local_38": "sectionSize",
                "local_30": "sectionContents"
            },
            "code": "\nvoid processSection_00116110(undefined8 inputFile,undefined8 *sectionData,undefined8 outputFile)\n\n{\n  undefined tempVar1;\n  undefined8 tempVar2;\n  long sectionIndex;\n  int copyWidth;\n  int copyByte;\n  char result;\n  undefined8 errorMsg;\n  undefined8 *buffer;\n  long copyIndex;\n  ulong loopIndex1;\n  int reverseBytes;\n  ulong loopIndex2;\n  undefined *tempPointer;\n  long sectionListIndex;\n  undefined8 *tempPointer2;\n  undefined8 *tempPointer3;\n  void *tempPointer4;\n  ulong tempVar3;\n  ulong loopCount1;\n  ulong loopCount2;\n  byte skipSection;\n  ulong sectionSize;\n  void *sectionContents;\n  \n  skipSection = 0;\n  result = skip_section(inputFile,sectionData,1);\n  if (result != '\\0') {\n    return;\n  }\n  sectionSize = sectionData[8];\n  sectionIndex = sectionData[0xc];\n  if (((*(byte *)((long)sectionData + 0x25) & 1) == 0) || ((*(byte *)(sectionIndex + 0x25) & 1) == 0)) {\n    sectionListIndex = find_section_list(*sectionData,0,0x80);\n    if (sectionListIndex == 0) {\n      return;\n    }\n    if ((*(byte *)(sectionListIndex + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(sectionSize);\n    tempPointer3 = buffer;\n    if (7 < sectionSize) {\n      for (loopCount1 = sectionSize >> 3; loopCount1 != 0; loopCount1 = loopCount1 - 1) {\n        *tempPointer3 = 0;\n        tempPointer3 = tempPointer3 + (ulong)skipSection * -2 + 1;\n      }\n    }\n    tempPointer2 = tempPointer3;\n    if ((sectionSize & 4) != 0) {\n      tempPointer2 = (undefined8 *)((long)tempPointer3 + (ulong)skipSection * -8 + 4);\n      *(undefined4 *)tempPointer3 = 0;\n    }\n    tempPointer3 = tempPointer2;\n    if ((sectionSize & 2) != 0) {\n      tempPointer3 = (undefined8 *)((long)tempPointer2 + (ulong)skipSection * -4 + 2);\n      *(undefined2 *)tempPointer2 = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)tempPointer3 = 0;\n    }\n    result = bfd_set_section_contents(outputFile,sectionIndex,buffer,0);\n    if (result != '\\0') {\n      free(buffer);\n      return;\n    }\n    status = 1;\n    bfd_nonfatal_message(0,outputFile,sectionIndex,0);\n    free(buffer);\n    return;\n  }\n  sectionContents = (void *)0x0;\n  result = bfd_get_full_section_contents(inputFile,sectionData,&sectionContents);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(inputFile,sectionData,outputFile,&sectionContents,&sectionSize),\n     reverseBytes = reverse_bytes, result == '\\0')) {\n    bfd_set_section_size(sectionIndex,0);\n    status = 1;\n    bfd_nonfatal_message(0,inputFile,sectionData,0);\n    free(sectionContents);\n    return;\n  }\n  copyWidth = copy_width;\n  copyByte = copy_byte;\n  if (reverse_bytes != 0) {\n    loopCount1 = (ulong)reverse_bytes;\n    if (sectionSize % loopCount1 != 0) {\n      tempVar2 = *sectionData;\n      errorMsg = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      fatal(errorMsg,tempVar2,reverseBytes);\n    }\n    reverseBytes = reverse_bytes / 2;\n    loopIndex2 = 0;\n    while (loopCount2 = loopIndex2, copyWidth = copy_width, copyByte = copy_byte, loopCount2 < sectionSize) {\n      loopIndex2 = loopCount1 + loopCount2;\n      tempVar3 = loopIndex2;\n      for (loopIndex1 = 0; loopIndex1 < (ulong)(long)reverseBytes; loopIndex1 = loopIndex1 + 1) {\n        tempVar3 = tempVar3 - 1;\n        tempPointer = (undefined *)(loopCount2 + loopIndex1 + (long)sectionContents);\n        tempVar1 = *tempPointer;\n        *tempPointer = *(undefined *)((long)sectionContents + tempVar3);\n        *(undefined *)((long)sectionContents + tempVar3) = tempVar1;\n      }\n    }\n  }\n  copy_width = copyWidth;\n  copy_byte = copyByte;\n  if (-1 < copyByte) {\n    loopCount1 = (ulong)interleave;\n    reverseBytes = (int)((ulong)sectionData[7] % loopCount1);\n    loopIndex2 = ((long)copyByte - (long)reverseBytes) + (long)sectionContents;\n    if (copyByte < reverseBytes) {\n      loopIndex2 = loopIndex2 + loopCount1;\n    }\n    sectionListIndex = (sectionSize + (long)sectionContents) - loopIndex2;\n    tempPointer4 = sectionContents;\n    for (; loopIndex2 < sectionSize + (long)sectionContents; loopIndex2 = loopIndex2 + loopCount1) {\n      for (copyIndex = 0; ((int)copyIndex < copyWidth && (copyIndex != sectionListIndex)); copyIndex = copyIndex + 1) {\n        *(undefined *)((long)tempPointer4 + copyIndex) = *(undefined *)(loopIndex2 + copyIndex);\n      }\n      tempPointer4 = (void *)((long)tempPointer4 + copyIndex);\n      sectionListIndex = sectionListIndex - loopCount1;\n    }\n    sectionSize = ((((loopCount1 - 1) + sectionSize) - (long)copyByte) / loopCount1) * (long)copyWidth;\n    loopCount1 = *(ulong *)(sectionIndex + 0x38) / loopCount1;\n    *(ulong *)(sectionIndex + 0x38) = loopCount1;\n    if (copyByte < reverseBytes) {\n      *(ulong *)(sectionIndex + 0x38) = loopCount1 + 1;\n      result = bfd_set_section_contents(outputFile,sectionIndex,sectionContents,0,sectionSize);\n      if (result == '\\0') {\n        cleanup_and_free_memory_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(outputFile,sectionIndex,sectionContents,0,sectionSize);\n  if (result == '\\0') {\n    cleanup_and_free_memory_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionContents);\n  return;\n}\n\n",
            "called": [
                "FUN_00108466",
                "bfd_set_section_size",
                "bfd_convert_section_contents",
                "bfd_nonfatal_message",
                "find_section_list",
                "free",
                "bfd_get_full_section_contents",
                "skip_section",
                "xmalloc",
                "bfd_set_section_contents",
                "copy_section.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_00116110"
        },
        "FUN_00104490": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104490"
        },
        "FUN_00104370": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010554f",
                "parse_coff_struct_type",
                "mark_symbols_used_in_relocations.cold",
                "stab_typdef.lto_priv.0",
                "main",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "copy_file",
                "bfd_nonfatal",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104370"
        },
        "FUN_001048b0": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001048b0"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorType",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorType;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorType != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "block_ptr",
                "param_2": "new_block_ptr",
                "param_3": "unused_param",
                "param_4": "result",
                "lVar1": "current_block_ptr",
                "uVar2": "error_msg",
                "pcVar3": "error_string",
                "auVar4": "return_value"
            },
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 new_block_ptr,undefined8 unused_param,undefined8 result)\n\n{\n  long current_block_ptr;\n  undefined8 error_msg;\n  char *error_string;\n  undefined return_value [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block_ptr = *(long *)(block_ptr + 0x20), current_block_ptr == 0)) {\n    error_string = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block_ptr + 8) != 0) {\n      *(undefined8 *)(current_block_ptr + 0x20) = new_block_ptr;\n      error_msg = CONCAT71((int7)((ulong)current_block_ptr >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block_ptr + 8);\n      goto LAB_0010bf84;\n    }\n    error_string = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  error_msg = dcgettext(0,error_string,5);\n  fprintf(_stderr,\"%s\\n\",error_msg);\n  error_msg = 0;\nLAB_0010bf84:\n  return_value._8_8_ = result;\n  return_value._0_8_ = error_msg;\n  return return_value;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "FUN_00104250": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "FUN_00104250"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "demangle_and_improve_type_0010c95e",
                "param_1": "input_pointer",
                "param_2": "input_byte_pointer",
                "param_3": "output_long_pointer",
                "bVar1": "current_byte",
                "bVar2": "next_byte",
                "pbVar3": "current_byte_pointer",
                "bVar4": "is_signed_char",
                "bVar5": "is_const",
                "bVar6": "is_volatile",
                "cVar7": "result_char",
                "uVar8": "type_count",
                "pbVar9": "next_byte_pointer",
                "lVar10": "named_type",
                "uVar11": "result",
                "pcVar12": "type_name",
                "sVar13": "type_name_length",
                "uVar14": "type_index",
                "__ptr": "type_string",
                "lVar15": "type_result",
                "pcVar19": "type_qualifier",
                "puVar16": "type_long_pointer",
                "puVar17": "type_undefined_pointer",
                "ppcVar18": "type_string_pointer",
                "local_49": "is_pointer",
                "local_48": "pointer_bitness",
                "local_40": "type_string_array"
            },
            "code": "\nundefined8 demangle_and_improve_type_0010c95e(undefined8 *input_pointer,byte **input_byte_pointer,long *output_long_pointer)\n\n{\n  byte current_byte;\n  byte next_byte;\n  byte *current_byte_pointer;\n  bool is_signed_char;\n  bool is_const;\n  bool is_volatile;\n  char result_char;\n  uint type_count;\n  byte *next_byte_pointer;\n  long named_type;\n  undefined8 result;\n  char *type_name;\n  size_t type_name_length;\n  ulong type_index;\n  void *type_string;\n  long type_result;\n  ulong *type_long_pointer;\n  undefined *type_undefined_pointer;\n  char **type_string_pointer;\n  char *type_qualifier;\n  byte *pnext_byte0;\n  undefined is_pointer;\n  ulong pointer_bitness;\n  char *type_string_array [2];\n  \n  while( true ) {\n    pnext_byte0 = *input_byte_pointer;\n    current_byte = *pnext_byte0;\n    if ('T' < (char)current_byte) break;\n    if ((char)current_byte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(current_byte) {\n    case 0x41:\n      type_result = 0;\n      current_byte_pointer = pnext_byte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *input_byte_pointer = pnext_byte0 + 1;\n      result_char = demangle_and_improve_type_0010c95e(input_pointer,input_byte_pointer,output_long_pointer);\n      if (result_char == '\\0') {\n        return 0;\n      }\n      if (output_long_pointer == (long *)0x0) {\n        return 1;\n      }\n      type_result = debug_make_const_type_isra_0(*output_long_pointer);\n      *output_long_pointer = type_result;\n      return 1;\n    case 0x46:\n      *input_byte_pointer = pnext_byte0 + 1;\n      if (output_long_pointer == (long *)0x0) {\n        type_long_pointer = (ulong *)0x0;\n        type_string_pointer = (char **)0x0;\n      }\n      else {\n        type_long_pointer = &pointer_bitness;\n        type_string_pointer = type_string_array;\n      }\n      result_char = stab_demangle_args(input_pointer,input_byte_pointer,type_string_pointer,type_long_pointer);\n      if (result_char == '\\0') {\n        return 0;\n      }\n      if (**input_byte_pointer == 0x5f) {\n        *input_byte_pointer = *input_byte_pointer + 1;\n        result_char = demangle_and_improve_type_0010c95e(input_pointer,input_byte_pointer,output_long_pointer);\n        if (result_char == '\\0') {\n          return 0;\n        }\n        if (output_long_pointer == (long *)0x0) {\n          return 1;\n        }\n        type_result = debug_make_function_type_isra_0(*output_long_pointer,type_string_array[0],pointer_bitness & 0xff);\n        *output_long_pointer = type_result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *input_byte_pointer = pnext_byte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      is_pointer = 0;\n      type_string_array[0] = (char *)0x0;\n      pointer_bitness = 0;\n      *input_byte_pointer = pnext_byte0 + 1;\n      if (((&_sch_istable)[(ulong)pnext_byte0[1] * 2] & 4) == 0) {\n        if (pnext_byte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        type_string_pointer = type_string_array;\n        if (output_long_pointer == (long *)0x0) {\n          type_string_pointer = (char **)0x0;\n        }\n        result_char = stab_demangle_qualified(input_pointer,input_byte_pointer,type_string_pointer);\n        if (result_char == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        type_count = stab_demangle_count(input_byte_pointer);\n        current_byte_pointer = *input_byte_pointer;\n        type_name_length = strlen((char *)current_byte_pointer);\n        if (type_name_length < type_count) goto switchD_0010cdf9_caseD_60;\n        *input_byte_pointer = current_byte_pointer + type_count;\n        if ((output_long_pointer != (long *)0x0) &&\n           (type_string_array[0] = (char *)stab_find_tagged_type(*input_pointer,input_pointer[1],current_byte_pointer,type_count,9),\n           type_string_array[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **input_byte_pointer;\n      if (current_byte == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *input_byte_pointer = *input_byte_pointer + 1;\n        }\n        if (**input_byte_pointer != 0x46) goto switchD_0010cdf9_caseD_60;\n        *input_byte_pointer = *input_byte_pointer + 1;\n        if (output_long_pointer == (long *)0x0) {\n          type_undefined_pointer = (undefined *)0x0;\n          type_long_pointer = (ulong *)0x0;\n        }\n        else {\n          type_undefined_pointer = &is_pointer;\n          type_long_pointer = &pointer_bitness;\n        }\n        result_char = stab_demangle_args(input_pointer,input_byte_pointer,type_long_pointer,type_undefined_pointer);\n        if (result_char == '\\0') {\n          return 0;\n        }\n      }\n      if (**input_byte_pointer == 0x5f) {\n        *input_byte_pointer = *input_byte_pointer + 1;\n        result_char = demangle_and_improve_type_0010c95e(input_pointer,input_byte_pointer,output_long_pointer);\n        if (result_char == '\\0') {\n          return 0;\n        }\n        if (output_long_pointer == (long *)0x0) {\n          return 1;\n        }\n        if (current_byte != 0x4d) {\n          type_result = debug_make_offset_type_isra_0(type_string_array[0],*output_long_pointer);\n          *output_long_pointer = type_result;\n          return 1;\n        }\n        type_result = debug_make_method_type_isra_0(*output_long_pointer,type_string_array[0],pointer_bitness,is_pointer);\n        *output_long_pointer = type_result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      result = stab_demangle_qualified(input_pointer,input_byte_pointer,output_long_pointer);\n      return result;\n    case 0x52:\n      *input_byte_pointer = pnext_byte0 + 1;\n      result_char = demangle_and_improve_type_0010c95e(input_pointer,input_byte_pointer,output_long_pointer);\n      if (result_char == '\\0') {\n        return 0;\n      }\n      if (output_long_pointer == (long *)0x0) {\n        return 1;\n      }\n      type_result = debug_make_reference_type_isra_0(*output_long_pointer);\n      *output_long_pointer = type_result;\n      return 1;\n    case 0x54:\n      *input_byte_pointer = pnext_byte0 + 1;\n      result_char = stab_demangle_get_count(input_byte_pointer,&pointer_bitness);\n      if (result_char != '\\0') {\n        if ((uint)pointer_bitness < *(uint *)(input_pointer + 5)) {\n          type_string_array[0] = *(char **)((pointer_bitness & 0xffffffff) * 0x10 + input_pointer[4]);\n          result_char = demangle_and_improve_type_0010c95e(input_pointer,type_string_array,output_long_pointer);\n          if (result_char == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (current_byte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *input_byte_pointer = pnext_byte0 + 1;\n    result_char = demangle_and_improve_type_0010c95e(input_pointer,input_byte_pointer,output_long_pointer);\n    if (result_char == '\\0') {\n      return 0;\n    }\n    if (output_long_pointer == (long *)0x0) {\n      return 1;\n    }\n    type_result = debug_make_pointer_type_isra_0(*output_long_pointer);\n    *output_long_pointer = type_result;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  is_volatile = false;\n  is_signed_char = false;\n  result_char = '\\0';\n  is_const = false;\n  do {\n    current_byte_pointer = *input_byte_pointer;\n    current_byte = *current_byte_pointer;\n    if (current_byte == 0x55) {\n      result_char = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)current_byte) {\n      if (current_byte == 0x56) {\n        is_volatile = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)current_byte) goto switchD_0010cdf9_caseD_60;\n      if ((char)current_byte < '_') goto LAB_0010cdfb;\n      switch(current_byte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (output_long_pointer == (long *)0x0) {\nLAB_0010d0aa:\n          *input_byte_pointer = current_byte_pointer + 1;\n          return 1;\n        }\n        type_result = debug_find_named_type(*input_pointer,&DAT_00120436);\n        *output_long_pointer = type_result;\n        if (type_result == 0) {\n          type_result = debug_make_type_constprop_0(6,4);\n          *output_long_pointer = type_result;\n          *input_byte_pointer = *input_byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (output_long_pointer == (long *)0x0) goto LAB_0010d0aa;\n        type_qualifier = \"unsigned char\";\n        if ((result_char == '\\0') && (type_qualifier = \"char\", is_signed_char)) {\n          type_qualifier = \"signed char\";\n        }\n        type_result = debug_find_named_type(*input_pointer,type_qualifier);\n        *output_long_pointer = type_result;\n        if (type_result == 0) {\n          type_result = debug_make_int_type_isra_0(1,result_char);\n          *output_long_pointer = type_result;\n          *input_byte_pointer = *input_byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (output_long_pointer == (long *)0x0) goto LAB_0010d0aa;\n        type_qualifier = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (output_long_pointer == (long *)0x0) goto LAB_0010d0aa;\n        type_result = debug_find_named_type(*input_pointer,\"float\");\n        *output_long_pointer = type_result;\n        if (type_result == 0) {\n          type_result = debug_make_float_type_isra_0(4);\n          *output_long_pointer = type_result;\n          *input_byte_pointer = *input_byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (output_long_pointer == (long *)0x0) goto LAB_0010d0aa;\n        type_qualifier = \"unsigned int\";\n        type_name = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (output_long_pointer == (long *)0x0) goto LAB_0010d0aa;\n        type_qualifier = \"long unsigned int\";\n        type_name = \"long int\";\nLAB_0010ced2:\n        if (result_char == '\\0') {\n          type_qualifier = type_name;\n        }\n        type_result = debug_find_named_type(*input_pointer,type_qualifier);\n        *output_long_pointer = type_result;\n        if (type_result == 0) {\n          type_result = debug_make_int_type_isra_0(4,result_char);\n          *output_long_pointer = type_result;\n          *input_byte_pointer = *input_byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        type_qualifier = \"long double\";\n        if (output_long_pointer == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        type_result = debug_find_named_type(*input_pointer,type_qualifier);\n        *output_long_pointer = type_result;\n        if (type_result == 0) {\n          type_result = debug_make_float_type_isra_0(8);\n          *output_long_pointer = type_result;\n          *input_byte_pointer = *input_byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (output_long_pointer == (long *)0x0) goto LAB_0010d0aa;\n        type_qualifier = \"short unsigned int\";\n        if (result_char == '\\0') {\n          type_qualifier = \"short int\";\n        }\n        type_result = debug_find_named_type(*input_pointer,type_qualifier);\n        *output_long_pointer = type_result;\n        if (type_result == 0) {\n          type_result = debug_make_int_type_isra_0(2,result_char);\n          *output_long_pointer = type_result;\n          *input_byte_pointer = *input_byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        type_string_pointer = type_string_array;\n        if (output_long_pointer == (long *)0x0) {\n          type_string_pointer = (char **)0x0;\n        }\n        result_char = stab_demangle_template(input_pointer,input_byte_pointer,type_string_pointer);\n        if (result_char == '\\0') {\n          return 0;\n        }\n        if (output_long_pointer == (long *)0x0) {\n          return 1;\n        }\n        type_name_length = strlen(type_string_array[0]);\n        type_result = stab_find_tagged_type(*input_pointer,input_pointer[1],type_string_array[0],type_name_length & 0xffffffff,9);\n        *output_long_pointer = type_result;\n        free(type_string_array[0]);\n        type_result = *output_long_pointer;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (output_long_pointer == (long *)0x0) goto LAB_0010d0aa;\n        type_result = debug_find_named_type(*input_pointer,&DAT_00120495);\n        *output_long_pointer = type_result;\n        if (type_result == 0) {\n          type_result = debug_make_void_type_isra_0();\n          *output_long_pointer = type_result;\n          *input_byte_pointer = *input_byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (output_long_pointer == (long *)0x0) goto LAB_0010d0aa;\n        type_result = debug_find_named_type(*input_pointer,\"__wchar_t\");\n        *output_long_pointer = type_result;\n        if (type_result == 0) {\n          type_result = debug_make_int_type_isra_0(2,1);\n          *output_long_pointer = type_result;\n          *input_byte_pointer = *input_byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (output_long_pointer == (long *)0x0) goto LAB_0010d0aa;\n        type_qualifier = \"long long unsigned int\";\n        if (result_char == '\\0') {\n          type_qualifier = \"long long int\";\n        }\n        type_result = debug_find_named_type(*input_pointer,type_qualifier);\n        *output_long_pointer = type_result;\n        if (type_result == 0) {\n          type_result = debug_make_int_type_isra_0(8,result_char);\n          *output_long_pointer = type_result;\n        }\n      }\n      *input_byte_pointer = *input_byte_pointer + 1;\n      goto LAB_0010d1de;\n    }\n    if (current_byte == 0x43) {\n      is_const = true;\n      goto LAB_0010cd84;\n    }\n    if (current_byte != 0x53) goto LAB_0010cdc5;\n    is_signed_char = true;\nLAB_0010cd84:\n    *input_byte_pointer = current_byte_pointer + 1;\n  } while( true );\nLAB_0010ca26:\n  next_byte_pointer = current_byte_pointer + 1;\n  *input_byte_pointer = next_byte_pointer;\n  current_byte = *next_byte_pointer;\n  if (current_byte == 0) goto switchD_0010cdf9_caseD_60;\n  if (current_byte == 0x5f) {\n    *input_byte_pointer = current_byte_pointer + 2;\n    result_char = demangle_and_improve_type_0010c95e(input_pointer,input_byte_pointer,output_long_pointer);\n    if (result_char == '\\0') {\n      return 0;\n    }\n    if (output_long_pointer == (long *)0x0) {\n      return 1;\n    }\n    named_type = debug_find_named_type(*input_pointer,\"int\");\n    if (named_type == 0) {\n      named_type = debug_make_int_type_isra_0(4,0);\n    }\n    type_result = debug_make_array_type_isra_0(*output_long_pointer,named_type,0,type_result,0);\n    *output_long_pointer = type_result;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  type_result = type_result * 10 + (long)((char)current_byte + -0x30);\n  current_byte_pointer = next_byte_pointer;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)current_byte < ':') {\n    if ((char)current_byte < '0') {\n      if (current_byte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      stab_bad_demangle(pnext_byte0);\n      if (output_long_pointer == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((current_byte != 0x47) || (*input_byte_pointer = current_byte_pointer + 1, ((&_sch_istable)[(ulong)current_byte_pointer[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnext_byte0 = *input_byte_pointer;\n  type_count = stab_demangle_count(input_byte_pointer);\n  current_byte_pointer = *input_byte_pointer;\n  type_name_length = strlen((char *)current_byte_pointer);\n  type_index = (ulong)type_count;\n  if (type_index <= type_name_length) {\n    *input_byte_pointer = current_byte_pointer + type_index;\n    if (output_long_pointer == (long *)0x0) {\n      return 1;\n    }\n    type_string = (void *)savestring(current_byte_pointer,type_index);\n    type_result = debug_find_named_type(*input_pointer,type_string);\n    *output_long_pointer = type_result;\n    free(type_string);\n    if (*output_long_pointer == 0) {\n      type_result = stab_find_tagged_type(*input_pointer,input_pointer[1],current_byte_pointer,(int)*input_byte_pointer - (int)current_byte_pointer,0);\n      *output_long_pointer = type_result;\njoined_r0x0010d1d8:\n      if (type_result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_const) {\n      type_result = debug_make_const_type_isra_0(*output_long_pointer);\n      *output_long_pointer = type_result;\n    }\n    if (is_volatile) {\n      type_result = debug_make_volatile_type_isra_0(*output_long_pointer);\n      *output_long_pointer = type_result;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  stab_bad_demangle(pnext_byte0);\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "stab_demangle_count",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "free",
                "savestring",
                "debug_make_type.constprop.0",
                "stab_bad_demangle",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "strlen",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_array_type.isra.0",
                "stab_demangle_qualified",
                "debug_make_pointer_type.isra.0",
                "debug_make_method_type.isra.0",
                "debug_find_named_type",
                "stab_demangle_args",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "debug_make_float_type.isra.0",
                "debug_make_reference_type.isra.0",
                "debug_make_const_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "stab_demangle_arg",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "demangle_and_improve_type_0010c95e"
        },
        "FUN_00104130": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "main",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104130"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_format_and_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = improve_and_reverse_code_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "strerror",
                "merge_gnu_build_notes",
                "check_new_section_flags",
                "startswith.lto_priv.0.lto_priv.0",
                "FUN_0010554f",
                "find_section_list",
                "bfd_get_arch",
                "setup_section",
                "bfd_create_gnu_debuglink_section",
                "dcgettext",
                "bfd_set_section_size",
                "bfd_nonfatal_message",
                "bfd_get_full_section_contents",
                "FUN_00105828",
                "copy_object.cold",
                "bfd_malloc_and_get_section",
                "non_fatal",
                "fwrite",
                "bfd_set_format",
                "free",
                "bfd_map_over_sections",
                "fclose",
                "bfd_make_section_with_flags",
                "xmalloc",
                "fopen",
                "__errno_location"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_modified_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfoPtr",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errMsg",
                "uVar4": "errorMsg",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "creationTime"
            },
            "code": "\nvoid setFileModifiedTime_0011a350(char *filePath,long fileInfoPtr)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errMsg;\n  undefined8 errorMsg;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 creationTime;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfoPtr + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfoPtr + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfoPtr + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfoPtr + 100);\n  accessTime = *(undefined4 *)(fileInfoPtr + 0x48);\n  modificationTime = *(undefined4 *)(fileInfoPtr + 0x4c);\n  changeTime = *(undefined4 *)(fileInfoPtr + 0x50);\n  creationTime = *(undefined4 *)(fileInfoPtr + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errMsg = strerror(*errnoPtr);\n    errorMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(errorMsg,filePath,errMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "set_times.cold",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "set_file_modified_time_0011a350"
        },
        "FUN_00128448": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128448",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00128448"
        },
        "FUN_00128328": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128328",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00128328"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_0011a110",
                "param_1": "errorMessage",
                "iVar1": "error",
                "uVar2": "message",
                "in_R10": "additionalInfo",
                "_stdout": "stdout",
                "_stderr": "stderr",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printError_0011a110(long errorMessage)\n\n{\n  int error;\n  undefined8 message;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    message = bfd_errmsg(error);\n  }\n  fflush(stdout);\n  if (errorMessage != 0) {\n    fprintf(stderr,\"%s: %s: %s\\n\",programName,errorMessage,message,additionalInfo);\n    return;\n  }\n  fprintf(stderr,\"%s: %s\\n\",programName,message,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_nonfatal.cold",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "do_display_target.cold",
                "mark_symbols_used_in_relocations.cold",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "print_error_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_data_0010e2f0",
                "param_1": "stringTable",
                "param_2": "param_2_unused",
                "param_3": "param_3_unused",
                "param_4": "param_4_unused",
                "param_5": "string",
                "lVar1": "prevStringTablePtr",
                "uVar2": "bfdErrorCode",
                "lVar3": "hashLookupResult",
                "uVar4": "bfdErrorMessage",
                "uVar5": "errorMessageFormat",
                "sVar6": "stringLength",
                "lVar7": "newStringTablePtr",
                "local_44": "resultBuffer",
                "uStack_40": "param_2_copy",
                "uStack_3f": "uStack_3f_unused",
                "uStack_3e": "param_3_copy",
                "local_3c": "localArray"
            },
            "code": "\nundefined8\nprocessStringData_0010e2f0(long *stringTable,undefined param_2_unused,int param_3_unused,undefined8 param_4_unused,char *string)\n\n{\n  long prevStringTablePtr;\n  undefined4 bfdErrorCode;\n  long hashLookupResult;\n  undefined8 bfdErrorMessage;\n  undefined8 errorMessageFormat;\n  size_t stringLength;\n  long newStringTablePtr;\n  undefined4 resultBuffer;\n  undefined param_2_copy;\n  undefined uStack_3f_unused;\n  undefined2 param_3_copy;\n  undefined4 localArray [3];\n  \n  if (string == (char *)0x0) {\n    newStringTablePtr = 0;\n  }\n  else {\n    hashLookupResult = bfd_hash_lookup(stringTable + 7,string,1,1);\n    if (hashLookupResult == 0) {\n      bfdErrorCode = bfd_get_error();\n      bfdErrorMessage = bfd_errmsg(bfdErrorCode);\n      errorMessageFormat = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      non_fatal(errorMessageFormat,bfdErrorMessage);\n      return 0;\n    }\n    newStringTablePtr = *(long *)(hashLookupResult + 0x20);\n    if (newStringTablePtr == -1) {\n      newStringTablePtr = stringTable[6];\n      prevStringTablePtr = stringTable[5];\n      *(long *)(hashLookupResult + 0x20) = newStringTablePtr;\n      if (prevStringTablePtr == 0) {\n        stringTable[4] = hashLookupResult;\n      }\n      else {\n        *(long *)(prevStringTablePtr + 0x18) = hashLookupResult;\n      }\n      stringTable[5] = hashLookupResult;\n      stringLength = strlen(string);\n      stringTable[6] = newStringTablePtr + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*stringTable + 8) + 0x50))(newStringTablePtr,&resultBuffer);\n  uStack_3f_unused = 0;\n  param_2_copy = param_2_unused;\n  (**(code **)(*(long *)(*stringTable + 8) + 0x68))((long)param_3_unused,&param_3_copy);\n  (**(code **)(*(long *)(*stringTable + 8) + 0x50))(param_4_unused,localArray);\n  if ((ulong)stringTable[3] < stringTable[2] + 0xcU) {\n    stringTable[3] = stringTable[3] * 2;\n    newStringTablePtr = xrealloc(stringTable[1]);\n    stringTable[1] = newStringTablePtr;\n  }\n  newStringTablePtr = stringTable[2];\n  hashLookupResult = stringTable[1];\n  *(ulong *)(hashLookupResult + newStringTablePtr) = CONCAT26(param_3_copy,CONCAT15(uStack_3f_unused,CONCAT14(param_2_copy,resultBuffer)));\n  *(undefined4 *)(hashLookupResult + 8 + newStringTablePtr) = localArray[0];\n  stringTable[2] = stringTable[2] + 0xc;\n  return CONCAT71((int7)((ulong)newStringTablePtr >> 8),1);\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "bfd_errmsg",
                "dcgettext",
                "non_fatal",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_lineno.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_start_block.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_start_source.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_end_block.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_string_data_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "string",
                "param_2": "unused",
                "param_3": "unused",
                "param_4": "unused",
                "iVar1": "comparisonResult",
                "uVar2": "errorMessage",
                "pcVar3": "commaPosition",
                "pcVar4": "nextSectionFlag",
                "sVar5": "stringLength",
                "iVar6": "sectionFlagLength",
                "uVar7": "parsedFlags",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *string,undefined8 unused,undefined8 unused,undefined8 unused)\n\n{\n  int comparisonResult;\n  undefined8 errorMessage;\n  char *commaPosition;\n  char *nextSectionFlag;\n  size_t stringLength;\n  int sectionFlagLength;\n  uint parsedFlags;\n  undefined result [16];\n  \n  parsedFlags = 0;\n  do {\n    commaPosition = strchr(string,0x2c);\n    if (commaPosition == (char *)0x0) {\n      stringLength = strlen(string);\n      sectionFlagLength = (int)stringLength;\n      nextSectionFlag = (char *)0x0;\n    }\n    else {\n      nextSectionFlag = commaPosition + 1;\n      sectionFlagLength = (int)commaPosition - (int)string;\n    }\n    stringLength = (size_t)sectionFlagLength;\n    comparisonResult = strncasecmp(\"alloc\",string,stringLength);\n    if (comparisonResult == 0) {\n      parsedFlags = parsedFlags | 1;\n    }\n    else {\n      comparisonResult = strncasecmp(\"load\",string,stringLength);\n      if (comparisonResult == 0) {\n        parsedFlags = parsedFlags | 2;\n      }\n      else {\n        comparisonResult = strncasecmp(\"noload\",string,stringLength);\n        if (comparisonResult == 0) {\n          parsedFlags = parsedFlags | 0x200;\n        }\n        else {\n          comparisonResult = strncasecmp(\"readonly\",string,stringLength);\n          if (comparisonResult == 0) {\n            parsedFlags = parsedFlags | 8;\n          }\n          else {\n            comparisonResult = strncasecmp(\"debug\",string,stringLength);\n            if (comparisonResult == 0) {\n              parsedFlags = parsedFlags | 0x2000;\n            }\n            else {\n              comparisonResult = strncasecmp(\"code\",string,stringLength);\n              if (comparisonResult == 0) {\n                parsedFlags = parsedFlags | 0x10;\n              }\n              else {\n                comparisonResult = strncasecmp(\"data\",string,stringLength);\n                if (comparisonResult == 0) {\n                  parsedFlags = parsedFlags | 0x20;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"rom\",string,stringLength);\n                  if (comparisonResult == 0) {\n                    parsedFlags = parsedFlags | 0x40;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"exclude\",string,stringLength);\n                    if (comparisonResult == 0) {\n                      parsedFlags = parsedFlags | 0x8000;\n                    }\n                    else {\n                      comparisonResult = strncasecmp(\"share\",string,stringLength);\n                      if (comparisonResult == 0) {\n                        parsedFlags = parsedFlags | 0x8000000;\n                      }\n                      else {\n                        comparisonResult = strncasecmp(\"contents\",string,stringLength);\n                        if (comparisonResult == 0) {\n                          parsedFlags = parsedFlags | 0x100;\n                        }\n                        else {\n                          comparisonResult = strncasecmp(\"merge\",string,stringLength);\n                          if (comparisonResult == 0) {\n                            parsedFlags = parsedFlags | 0x800000;\n                          }\n                          else {\n                            comparisonResult = strncasecmp(\"strings\",string,stringLength);\n                            if (comparisonResult != 0) {\n                              commaPosition = (char *)xmalloc((long)(sectionFlagLength + 1));\n                              strncpy(commaPosition,string,stringLength);\n                              commaPosition[stringLength] = '\\0';\n                              errorMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal(errorMessage,commaPosition);\n                              errorMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              fatal(errorMessage,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            parsedFlags = parsedFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    string = nextSectionFlag;\n  } while (nextSectionFlag != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = parsedFlags;\n  result._8_8_ = unused;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "format_combined_string_001125fa",
                "param_1": "input_params",
                "uVar1": "combined_string_length",
                "ppcVar2": "secondary_param",
                "sVar3": "secondary_string_length",
                "sVar4": "primary_string_length",
                "__s": "formatted_string",
                "__assert_fail": "assert_failure",
                "curr_1": "current_buffer_length",
                "buf_0": "buffer",
                "strlen": "string_length",
                "free": "release_memory",
                "xmalloc": "allocate_memory",
                "sprintf": "format_string"
            },
            "code": "\nchar * format_combined_string_001125fa(char **input_params)\n\n{\n  ulong combined_string_length;\n  char **secondary_param;\n  size_t secondary_string_length;\n  size_t primary_string_length;\n  char *formatted_string;\n  \n  if (input_params == (char **)0x0) {\n                    \n    assert_failure(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  secondary_param = (char **)input_params[0x1d];\n  formatted_string = *input_params;\n  if ((secondary_param != (char **)0x0) && ((*(byte *)((long)secondary_param + 0x49) & 0x10) == 0)) {\n    secondary_string_length = string_length(*secondary_param);\n    primary_string_length = string_length(formatted_string);\n    combined_string_length = secondary_string_length + 3 + primary_string_length;\n    if (current_buffer_length < combined_string_length) {\n      if (current_buffer_length != 0) {\n        release_memory(buffer);\n      }\n      current_buffer_length = (combined_string_length >> 1) + combined_string_length;\n      buffer = (char *)allocate_memory();\n    }\n    format_string(buffer,\"%s(%s)\",*(undefined8 *)input_params[0x1d],*input_params);\n    formatted_string = buffer;\n  }\n  return formatted_string;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "free",
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "copy_object",
                "FUN_00105828",
                "FUN_00107976",
                "FUN_001152b6",
                "bfd_nonfatal_message",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "format_combined_string_001125fa"
        },
        "FUN_00104380": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104380"
        },
        "FUN_00104260": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104260"
        },
        "FUN_001048c0": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "parse_stab_type",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001048c0"
        },
        "FUN_001047a0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "main",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type",
                "bfd_nonfatal_message",
                "bfd_nonfatal",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047a0"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_one_00108f05"
            },
            "code": "\nundefined getOne_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "get_one_00108f05"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_saved_stabs_00108863",
                "puVar1": "pointerToSavedStabs",
                "puVar2": "nextPointerToSavedStabs",
                "saved_stabs": "stabsArray",
                "saved_stabs_index": "stabsArrayIndex"
            },
            "code": "\nvoid clearSavedStabs_00108863(void)\n\n{\n  undefined4 *pointerToSavedStabs;\n  undefined4 *nextPointerToSavedStabs;\n  \n  pointerToSavedStabs = (undefined4 *)stabsArray;\n  do {\n    nextPointerToSavedStabs = pointerToSavedStabs + 6;\n    free(*(void **)(pointerToSavedStabs + 4));\n    *(undefined8 *)(pointerToSavedStabs + 4) = 0;\n    pointerToSavedStabs = nextPointerToSavedStabs;\n  } while (nextPointerToSavedStabs != &stabsArrayIndex);\n  stabsArrayIndex = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_saved_stabs_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "undefined": "targetFunction"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(targetFunction *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00128450": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128450",
            "calling": [
                "fwrite",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00128450"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "add_source_file_00108f08",
                "param_1": "sourceFilesArray",
                "param_2": "filename",
                "iVar1": "cmpResult",
                "uVar2": "returnValue",
                "puVar3": "currentNode",
                "puVar4": "previousNode",
                "lVar5": "counter",
                "puVar6": "sourceFilesHead",
                "pcVar7": "currentFilename",
                "puVar8": "newNode",
                "bVar9": "bytes",
                "_stderr": "errorOutput",
                "dcgettext": "getErrorMessage",
                "fprintf": "printErrorMessage",
                "filename_cmp": "compareFilenames",
                "xmalloc": "allocateMemory"
            },
            "code": "\n\n\nundefined8 addSourceFile_00108f08(long sourceFilesArray,char *filename)\n\n{\n  int cmpResult;\n  undefined8 returnValue;\n  undefined8 *currentNode;\n  undefined8 *previousNode;\n  long counter;\n  undefined8 *sourceFilesHead;\n  char *currentFilename;\n  undefined8 *newNode;\n  byte bytes;\n  \n  bytes = 0;\n  currentFilename = \"\";\n  if (filename != (char *)0x0) {\n    currentFilename = filename;\n  }\n  if (*(long *)(sourceFilesArray + 8) == 0) {\n    returnValue = getErrorMessage(0,\"debug_start_source: no debug_set_filename call\",5);\n    printErrorMessage(errorOutput,\"%s\\n\",returnValue);\n    returnValue = 0;\n  }\n  else {\n    for (currentNode = *(undefined8 **)(*(long *)(sourceFilesArray + 8) + 8); currentNode != (undefined8 *)0x0;\n        currentNode = (undefined8 *)*currentNode) {\n      cmpResult = compareFilenames(currentNode[1],currentFilename);\n      if (cmpResult == 0) goto LAB_00108fad;\n    }\n    currentNode = (undefined8 *)allocateMemory(0x18);\n    sourceFilesHead = *(undefined8 **)(sourceFilesArray + 0x10);\n    newNode = currentNode;\n    for (counter = 6; counter != 0; counter = counter + -1) {\n      *(undefined4 *)newNode = 0;\n      newNode = (undefined8 *)((long)newNode + (ulong)bytes * -8 + 4);\n    }\n    currentNode[1] = currentFilename;\n    newNode = (undefined8 *)*sourceFilesHead;\n    while (previousNode = newNode, previousNode != (undefined8 *)0x0) {\n      sourceFilesHead = previousNode;\n      newNode = (undefined8 *)*previousNode;\n    }\n    *sourceFilesHead = currentNode;\nLAB_00108fad:\n    *(undefined8 **)(sourceFilesArray + 0x10) = currentNode;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "filename_cmp",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "add_source_file_00108f08"
        },
        "FUN_00104140": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_001086af",
                "FUN_00116852",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104140"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "copy_file.cold",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "FUN_00128210": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strspn@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128210",
            "calling": [
                "strspn"
            ],
            "imported": false,
            "current_name": "FUN_00128210"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_sections_00114190",
                "param_1": "section_name",
                "param_2": "is_copy",
                "param_3": "flags",
                "uVar1": "section_flags",
                "plVar2": "fnmatch_pattern",
                "pplVar3": "next_section",
                "iVar4": "fnmatch_result",
                "uVar5": "error_message",
                "pplVar6": "current_section",
                "pplVar7": "prev_section",
                "pplVar8": "next_section_temp"
            },
            "code": "\nlong ** process_sections_00114190(long *section_name,char is_copy,uint flags)\n\n{\n  uint section_flags;\n  long *fnmatch_pattern;\n  long **next_section;\n  int fnmatch_result;\n  undefined8 error_message;\n  long **current_section;\n  long **prev_section;\n  long **next_section_temp;\n  \n  prev_section = change_sections;\n  if (change_sections == (long **)0x0) {\n    if (is_copy == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (is_copy == '\\0') {\n    if ((flags & *(uint *)((long)change_sections + 0x14)) == 0) {\nLAB_001141e5:\n      current_section = (long **)*prev_section;\n      if (current_section == (long **)0x0) {\n        return (long **)0x0;\n      }\n      prev_section = (long **)0x0;\n    }\n    else {\n      fnmatch_pattern = change_sections[1];\n      if (*(char *)fnmatch_pattern == '!') {\n        fnmatch_result = fnmatch((char *)((long)fnmatch_pattern + 1),(char *)section_name,0);\n        current_section = prev_section;\n        if (fnmatch_result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      fnmatch_result = fnmatch((char *)fnmatch_pattern,(char *)section_name,0);\n      if (fnmatch_result != 0) goto LAB_001141e5;\n      current_section = (long **)*prev_section;\n      if (current_section == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)current_section + 0x14)) != 0) {\n      fnmatch_pattern = current_section[1];\n      if (*(char *)fnmatch_pattern == '!') {\n        fnmatch_result = fnmatch((char *)((long)fnmatch_pattern + 1),(char *)section_name,0);\n        if (fnmatch_result == 0) {\nLAB_0011438e:\n          *(undefined *)(current_section + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        fnmatch_result = fnmatch((char *)fnmatch_pattern,(char *)section_name,0);\n        if ((prev_section == (long **)0x0) && (fnmatch_result == 0)) {\n          next_section_temp = (long **)*current_section;\n          prev_section = current_section;\n          if (next_section_temp == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_section_temp = (long **)*current_section;\n    current_section = prev_section;\n    if (next_section_temp != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    fnmatch_result = strcmp((char *)change_sections[1],(char *)section_name);\n    if (fnmatch_result == 0) {\nLAB_001143cd:\n      section_flags = *(uint *)((long)prev_section + 0x14);\n      if ((((section_flags & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((section_flags & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        fatal(error_message,section_name);\n      }\n      if ((((section_flags & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        fatal(error_message,section_name);\n      }\n      if ((((section_flags & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)prev_section + 0x14) = section_flags | flags;\n        return prev_section;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      fatal(error_message,section_name);\n    }\n    prev_section = (long **)*prev_section;\n    if (prev_section == (long **)0x0) goto LAB_001142a9;\n    fnmatch_result = strcmp((char *)prev_section[1],(char *)section_name);\n    if (fnmatch_result == 0) goto LAB_001143cd;\n    next_section_temp = (long **)*prev_section;\n    current_section = (long **)0x0;\n    if (next_section_temp == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      prev_section = current_section;\n      if (is_copy == '\\0') {\n        while (current_section = next_section_temp, next_section = prev_section, next_section_temp = current_section,\n              (flags & *(uint *)((long)current_section + 0x14)) != 0) {\n          fnmatch_pattern = current_section[1];\n          if (*(char *)fnmatch_pattern == '!') {\n            fnmatch_result = fnmatch((char *)((long)fnmatch_pattern + 1),(char *)section_name,0);\n            if (fnmatch_result == 0) goto LAB_0011438e;\n            next_section_temp = (long **)*current_section;\n            if ((long **)*current_section == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            fnmatch_result = fnmatch((char *)fnmatch_pattern,(char *)section_name,0);\n            if ((prev_section == (long **)0x0) && (fnmatch_result == 0)) {\n              prev_section = current_section;\n              next_section_temp = (long **)*current_section;\n              if ((long **)*current_section == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_section_temp = (long **)*current_section;\n              if ((long **)*current_section == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        fnmatch_result = strcmp((char *)next_section_temp[1],(char *)section_name);\n        next_section = current_section;\n        prev_section = next_section_temp;\n        if (fnmatch_result == 0) goto LAB_001143cd;\n      }\n      current_section = next_section;\n      next_section_temp = (long **)*next_section_temp;\n      prev_section = current_section;\n    } while (next_section_temp != (long **)0x0);\nLAB_001142a1:\n    if (is_copy != '\\0') {\nLAB_001142a9:\n      current_section = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_section + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_section + 2) = 0;\n      *(uint *)((long)current_section + 0x14) = flags;\n      current_section[5] = (long *)0x0;\n      prev_section = current_section;\n      *current_section = (long *)change_sections;\n      change_sections = prev_section;\n      current_section[1] = section_name;\n      return current_section;\n    }\n  }\nLAB_00114212:\n  if (prev_section == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(prev_section + 2) = 1;\n  return prev_section;\n}\n\n",
            "called": [
                "dcgettext",
                "fnmatch",
                "find_section_list.cold",
                "xmalloc",
                "fatal",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "main",
                "setup_section",
                "is_strip_section_1.isra.0",
                "handle_remove_section_option",
                "copy_relocations_in_section",
                "FUN_00107880",
                "setup_section.cold",
                "copy_section"
            ],
            "imported": false,
            "current_name": "process_sections_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "process_gnu_build_attributes_00116490",
                "param_1": "param_a",
                "param_2": "param_b",
                "param_3": "param_c",
                "param_4": "param_d",
                "uVar1": "new_var1",
                "uVar2": "new_var2",
                "uVar3": "new_var3",
                "bVar4": "new_var4",
                "puVar5": "new_ptr1",
                "iVar6": "new_var6",
                "lVar7": "new_var7",
                "uVar8": "new_var8",
                "in_RAX": "new_var9",
                "uVar9": "new_var10",
                "uVar10": "new_var11",
                "uVar11": "new_var12",
                "uVar12": "new_var13",
                "__ptr": "new_ptr2",
                "uVar13": "new_var14",
                "unaff_RBX": "new_var15",
                "unaff_RBP": "new_var16",
                "puVar14": "new_ptr3",
                "puVar15": "new_ptr4",
                "cVar16": "new_var17",
                "puVar17": "new_ptr5",
                "puVar18": "new_ptr6",
                "in_R11": "new_var18",
                "unaff_R12": "new_ptr7",
                "puVar19": "new_ptr8",
                "unaff_R13": "new_var19",
                "__nmemb": "new_var20",
                "unaff_R14": "new_ptr9",
                "puVar20": "new_ptr10",
                "bVar21": "new_var21",
                "iVar22": "new_var22",
                "unaff_retaddr": "new_var23",
                "param_7": "param_e",
                "param_8": "param_f",
                "param_9": "param_g",
                "in_stack_00000020": "new_var24",
                "in_stack_00000028": "new_ptr11",
                "in_stack_00000030": "new_ptr12",
                "in_stack_00000038": "new_var25",
                "in_stack_00000040": "new_var26",
                "in_stack_00000048": "new_ptr13",
                "status": "new_var27"
            },
            "code": "\nulong process_gnu_build_attributes_00116490(undefined8 param_a,ulong param_b,ulong param_c,long param_d)\n\n{\n  undefined8 new_var1;\n  undefined8 new_var2;\n  ulong new_var3;\n  bool new_var4;\n  ulong *new_ptr1;\n  int new_var6;\n  long new_var7;\n  undefined8 new_var8;\n  ulong new_var9;\n  ulong new_var10;\n  ulong new_var11;\n  ulong new_var12;\n  ulong new_var13;\n  undefined *new_ptr2;\n  ulong new_var14;\n  ulong new_var15;\n  ulong new_var16;\n  ulong *new_ptr3;\n  undefined *new_ptr4;\n  char new_var17;\n  undefined *new_ptr5;\n  undefined *new_ptr6;\n  ulong new_var18;\n  ulong *new_ptr7;\n  ulong *new_ptr8;\n  ulong new_var19;\n  size_t new_var20;\n  undefined8 *new_ptr9;\n  ulong *new_ptr10;\n  byte new_var21;\n  int new_var22;\n  ulong new_var23;\n  ulong param_e;\n  uint param_f;\n  ulong param_g;\n  ulong new_var24;\n  ulong *new_ptr11;\n  undefined *new_ptr12;\n  uint new_var25;\n  uint new_var26;\n  undefined8 *new_ptr13;\n  \n  new_var21 = 0;\ncode_r0x00116490:\n  new_var7 = param_d;\n  new_var11 = new_var16;\n  new_var14 = new_var19;\n  if (new_var9 == 0) {\n    if (param_b == 0x100) {\n      new_ptr7[7] = new_var23;\n      new_var12 = new_var23;\nLAB_001164af:\n      new_var10 = new_var19;\n      new_var14 = new_var19;\n      new_var23 = new_var12;\n    }\n    else {\n      new_ptr7[7] = param_g;\nLAB_0011669e:\n      new_var11 = new_var16;\n      new_var10 = new_var16;\n    }\nLAB_001164bb:\n    new_ptr7[8] = new_var10;\n    if (*(char *)((new_ptr7[3] - 1) + param_c) != '\\0') {\n      new_var7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    new_ptr8 = new_ptr7 + 9;\n    if (0xb < new_var15) {\n      new_var10 = (**(code **)(new_ptr9[1] + 0x40))(new_var7);\n      *new_ptr8 = new_var10;\n      new_var10 = (**(code **)(new_ptr9[1] + 0x40))(new_var7 + 4);\n      new_ptr7[10] = new_var10;\n      param_b = (**(code **)(new_ptr9[1] + 0x40))(new_var7 + 8);\n      param_c = *new_ptr8;\n      new_ptr7[0xb] = param_b;\n      new_var9 = new_ptr7[10];\n      new_var10 = param_c + 3 & 0xfffffffffffffffc;\n      new_ptr7[0xf] = new_var10;\n      if (new_var9 != (new_var9 + 3 & 0xfffffffffffffffc)) {\n        new_var7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_b - 0x100) {\n        new_var7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      new_var12 = new_var10 + new_var9 + 0xc;\n      if (new_var15 < new_var12) {\n        new_var7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_c < 2) {\n        new_var7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      new_ptr7[0xc] = new_var7 + 0xc;\n      new_var18 = new_var7 + 0xc + new_var10;\n      new_ptr7[0xd] = new_var18;\n      new_var15 = new_var15 + (-0xc - (new_var10 + new_var9));\n      param_d = new_var7 + new_var12;\n      new_var16 = new_var11;\n      new_ptr7 = new_ptr8;\n      new_var19 = new_var14;\n      if (param_c != 2) {\n        if (*(char *)(new_var7 + 0xc) == '$') {\n          if ((*(char *)(new_var7 + 0xd) == '\\x01') && (*(char *)(new_var7 + 0xe) == '1')) {\n            new_var11 = process_gnu_build_attributes_00116490();\n            return new_var11;\n          }\n        }\n        else if ((((4 < param_c) && (*(char *)(new_var7 + 0xc) == 'G')) &&\n                 (*(char *)(new_var7 + 0xd) == 'A')) &&\n                ((*(char *)(new_var7 + 0xe) == '$' && (*(char *)(new_var7 + 0xf) == '\\x01')))) {\n          if (*(char *)(new_var7 + 0x10) == '2') {\n            new_var11 = process_gnu_build_attributes_00116490();\n            return new_var11;\n          }\n          if (*(char *)(new_var7 + 0x10) == '3') {\n            new_var11 = process_gnu_build_attributes_00116490();\n            return new_var11;\n          }\n          new_var7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (new_var15 != 0) {\n      new_var7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((new_var25 | new_var26 | param_f) == 0) {\n      new_var1 = *new_ptr9;\n      new_var2 = *new_ptr13;\n      new_var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(new_var8,new_var1,new_var2);\nLAB_0011671b:\n      new_var20 = ((long)new_ptr8 - (long)new_ptr11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(new_ptr11,new_var20,0x48,compare_gnu_build_notes);\n      for (new_ptr3 = new_ptr11; new_ptr3 < new_ptr8; new_ptr3 = new_ptr3 + 9) {\n        new_var11 = new_ptr3[2];\n        if (new_var11 != 0) {\n          new_var14 = new_ptr3[7];\n          new_var10 = new_ptr3[8];\n          new_ptr10 = new_ptr3;\n          new_var22 = 0;\n          if (new_var14 == new_var10) {\n            new_ptr3[2] = 0;\n          }\n          else {\n            do {\n              do {\n                new_ptr1 = new_ptr10;\n                new_ptr10 = new_ptr1 + -9;\n                if (new_ptr10 < new_ptr11) goto LAB_001167f5;\n                new_var12 = new_ptr1[-7];\n              } while (new_var12 == 0);\n              if ((*new_ptr10 != *new_ptr3) ||\n                 (new_var6 = memcmp((void *)new_ptr1[-6],(void *)new_ptr3[3],*new_ptr3), new_var6 != 0))\n              break;\n              new_var3 = new_ptr1[-2];\n              new_var13 = new_ptr1[-1];\n              if (new_var14 == new_var3) {\n                if (new_var10 == new_var13) {\n                  new_ptr3[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (new_var10 <= new_var13) {\n                  new_ptr3[2] = 0;\n                  break;\n                }\n                if (new_var13 < new_var14) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < new_var13) ||\n                     (new_var14 <= (new_var13 + 0xf & 0xfffffffffffffff0))) goto process_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((new_var11 == 0x101) == (new_var12 == 0x101)) {\n                  if (new_var13 <= new_var10) {\n                    new_var13 = new_var10;\n                  }\n                  if (new_var3 < new_var14) {\n                    new_var14 = new_var3;\n                  }\n                  new_ptr1[-1] = new_var13;\n                  new_ptr1[-2] = new_var14;\n                  new_ptr3[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (new_var3 <= new_var14) goto LAB_001167a6;\n                if (new_var13 < new_var14) goto LAB_0010852c;\n                if (new_var10 < new_var14) {\n                  if ((0xfffffffffffffff0 < new_var10) || (new_var3 <= (new_var10 + 0xf & 0xfffffffffffffff0)))\n                  goto process_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (new_var10 != new_var13) goto LAB_001167b8;\n              }\nprocess_build_notes_00116852:\n              new_var4 = new_var22 < 0x11;\n              new_var22 = new_var22 + 1;\n            } while (new_var4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(new_ptr11,new_var20,0x48,sort_gnu_build_notes);\n      new_ptr2 = (undefined *)xmalloc(new_var24 * 2);\n      param_e = 0;\n      param_g = 0;\n      new_ptr6 = new_ptr2;\n      for (new_ptr3 = new_ptr11; new_ptr3 < new_ptr8; new_ptr3 = new_ptr3 + 9) {\n        if (new_ptr3[2] != 0) {\n          new_ptr5 = new_ptr6 + 4;\n          new_ptr4 = new_ptr6 + 0xc;\n          if ((new_ptr3[7] == param_g) && (new_ptr3[8] == param_e)) {\n            (**(code **)(new_ptr9[1] + 0x50))(*new_ptr3,new_ptr6);\n            (**(code **)(new_ptr9[1] + 0x50))(0,new_ptr5);\n            (**(code **)(new_ptr9[1] + 0x50))(new_ptr3[2],new_ptr6 + 8);\n            new_var14 = new_ptr3[6];\n            new_var11 = *new_ptr3;\n            new_ptr6 = (undefined *)new_ptr3[3];\n            new_ptr5 = new_ptr4;\n            for (new_var10 = new_var11; new_var10 != 0; new_var10 = new_var10 - 1) {\n              *new_ptr5 = *new_ptr6;\n              new_ptr6 = new_ptr6 + (ulong)new_var21 * -2 + 1;\n              new_ptr5 = new_ptr5 + (ulong)new_var21 * -2 + 1;\n            }\n            if (new_var11 < new_var14) {\n              for (new_var7 = new_var14 - new_var11; new_var7 != 0; new_var7 = new_var7 + -1) {\n                *new_ptr5 = 0;\n                new_ptr5 = new_ptr5 + (ulong)new_var21 * -2 + 1;\n              }\n            }\n            new_ptr6 = new_ptr4 + new_var14;\n          }\n          else {\n            (**(code **)(new_ptr9[1] + 0x50))();\n            if (*(int *)(new_ptr9[1] + 8) == 5) {\n              new_var17 = (*(char *)(new_ptr9[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              new_var17 = '\\b';\n            }\n            (**(code **)(new_ptr9[1] + 0x50))(new_var17,new_ptr5);\n            (**(code **)(new_ptr9[1] + 0x50))(new_ptr3[2],new_ptr6 + 8);\n            new_var11 = *new_ptr3;\n            new_ptr6 = (undefined *)new_ptr3[3];\n            new_ptr5 = new_ptr4;\n            for (new_var14 = new_var11; new_var14 != 0; new_var14 = new_var14 - 1) {\n              *new_ptr5 = *new_ptr6;\n              new_ptr6 = new_ptr6 + (ulong)new_var21 * -2 + 1;\n              new_ptr5 = new_ptr5 + (ulong)new_var21 * -2 + 1;\n            }\n            new_var14 = new_ptr3[6];\n            if (new_var11 < new_var14) {\n              for (new_var7 = new_var14 - new_var11; new_var7 != 0; new_var7 = new_var7 + -1) {\n                *new_ptr5 = 0;\n                new_ptr5 = new_ptr5 + (ulong)new_var21 * -2 + 1;\n              }\n            }\n            new_var7 = new_ptr9[1];\n            new_ptr4 = new_ptr4 + new_var14;\n            new_ptr6 = new_ptr4 + 8;\n            if ((*(int *)(new_var7 + 8) == 5) && (*(char *)(new_ptr9[0x22] + 4) == '\\x02')) {\n              (**(code **)(new_var7 + 0x38))(new_ptr3[7],new_ptr4);\n              (**(code **)(new_ptr9[1] + 0x38))(new_ptr3[8],new_ptr6);\n              new_ptr6 = new_ptr4 + 0x10;\n            }\n            else {\n              (**(code **)(new_var7 + 0x50))(new_ptr3[7],new_ptr4);\n              (**(code **)(new_ptr9[1] + 0x50))(new_ptr3[8],new_ptr4 + 4);\n            }\n            param_g = new_ptr3[7];\n            param_e = new_ptr3[8];\n          }\n        }\n      }\n      new_var14 = (long)new_ptr6 - (long)new_ptr2;\n      new_var11 = new_var14;\n      new_ptr6 = new_ptr2;\n      if (new_var14 < new_var24) {\n        for (; new_var24 = new_var14, new_var11 != 0; new_var11 = new_var11 - 1) {\n          *new_ptr12 = *new_ptr6;\n          new_ptr6 = new_ptr6 + (ulong)new_var21 * -2 + 1;\n          new_ptr12 = new_ptr12 + (ulong)new_var21 * -2 + 1;\n        }\n      }\n      free(new_ptr2);\nLAB_001166f8:\n      free(new_ptr11);\n      return new_var24;\n    }\n    if (((new_var26 | param_f) == 0) || (new_var25 == 0)) {\n      if (new_var26 == 0) {\n        if (param_f != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_f == 0) goto LAB_001166f8;\n    }\n    new_var7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (new_var9 == 0x10) {\n      new_var12 = (**(code **)(new_ptr9[1] + 0x28))(new_var18);\n      new_var10 = (**(code **)(new_ptr9[1] + 0x28))(new_ptr7[4] + 8);\n      if (new_var10 < new_var12) {\n        new_var12 = new_var10;\n      }\nLAB_00116631:\n      if (new_ptr7[2] == 0x100) {\n        if (new_var12 == 0) {\n          new_var12 = new_var23;\n        }\n        param_c = *new_ptr7;\n        new_ptr7[7] = new_var12;\n        new_var14 = new_var10;\n        new_var23 = new_var12;\n        if (new_var10 == 0) goto LAB_001164af;\n      }\n      else {\n        if (new_var12 == 0) {\n          new_var12 = param_g;\n        }\n        param_c = *new_ptr7;\n        new_ptr7[7] = new_var12;\n        new_var11 = new_var10;\n        param_g = new_var12;\n        if (new_var10 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (new_var9 < 0x11) {\n      if (new_var9 == 4) {\n        new_var12 = (**(code **)(new_ptr9[1] + 0x40))(new_var18);\n        new_var10 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (new_var9 == 8) {\n        new_var11 = FUNC_001086af();\n        return new_var11;\n      }\n    }\n    new_var7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (new_var7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,new_ptr9,new_ptr13,new_var7);\n    new_var27 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "merge_gnu_build_notes.cold"
            ],
            "imported": false,
            "current_name": "process_gnu_build_attributes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_build_notes_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "FUN_00128118": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128118",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00128118"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetId",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptrTarget"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long targetId;\n  char *message;\n  long *targetList;\n  long *ptrTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptrTarget = targetList;\n  while( true ) {\n    targetId = *ptrTarget;\n    ptrTarget = ptrTarget + 1;\n    if (targetId == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "bfd_target_list",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "strip_usage",
                "copy_usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_001048d0": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001048d0"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "check_and_set_function_end_0010be1a",
                "param_1": "functionInfo",
                "param_2": "newFunctionInfo",
                "param_3": "unused1",
                "param_4": "unused2",
                "lVar1": "blockInfo",
                "uVar2": "errorMessage",
                "pcVar3": "errorString",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] checkAndSetFunctionEnd_0010be1a(long functionInfo,undefined8 newFunctionInfo,undefined8 unused1,undefined8 unused2)\n\n{\n  long blockInfo;\n  undefined8 errorMessage;\n  char *errorString;\n  undefined returnValue [16];\n  \n  if (((*(long *)(functionInfo + 8) == 0) || (blockInfo = *(long *)(functionInfo + 0x20), blockInfo == 0)) ||\n     (*(long *)(functionInfo + 0x18) == 0)) {\n    errorString = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(blockInfo + 8) == 0) {\n      *(undefined8 *)(blockInfo + 0x20) = newFunctionInfo;\n      errorMessage = CONCAT71((int7)((ulong)blockInfo >> 8),1);\n      *(undefined (*) [16])(functionInfo + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorString = \"debug_end_function: some blocks were not closed\";\n  }\n  errorMessage = dcgettext(0,errorString,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010be86:\n  returnValue._8_8_ = unused2;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "parse_stab",
                "FUN_0010554f",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "check_and_set_function_end_0010be1a"
        },
        "FUN_00104270": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "stab_variable.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "FUN_0010554f",
                "startswith.lto_priv.0.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "main",
                "setup_section",
                "stab_enum_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_demangle_qualified",
                "stab_class_start_method.lto_priv.0",
                "convert_efi_target",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "display_info.isra.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_get_archive_filename",
                "stab_function_parameter.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "stab_modify_type",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "is_dwo_section.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104270"
        },
        "FUN_00104150": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104150"
        },
        "FUN_00104390": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "merge_gnu_build_notes",
                "stab_variable.lto_priv.0",
                "add_redefine_and_check",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "stab_struct_field.lto_priv.0",
                "savestring",
                "debug_set_class_id.lto_priv.0",
                "xstrndup",
                "stab_start_struct_type.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "main",
                "debug_name_type",
                "debug_make_array_type.isra.0",
                "convert_efi_target",
                "stab_demangle_args",
                "stab_method_type.lto_priv.0",
                "FUN_00104ea2",
                "display_info.isra.0",
                "copy_section",
                "add_specific_symbols",
                "bfd_get_archive_filename",
                "debug_make_enum_type.isra.0",
                "stab_function_type.lto_priv.0",
                "debug_record_function",
                "debug_add_to_namespace.constprop.0",
                "stab_range_type.lto_priv.0",
                "template_in_dir",
                "parse_coff_struct_type",
                "stab_start_function.lto_priv.0",
                "debug_start_block",
                "parse_flags.cold",
                "parse_stab",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "debug_set_filename",
                "stab_modify_type",
                "FUN_00107880",
                "section_add_load_file",
                "debug_record_line",
                "stab_end_struct_type.lto_priv.0",
                "FUN_0010554f",
                "debug_record_variable",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "stab_set_type.lto_priv.0",
                "init_section_add",
                "stab_typdef.lto_priv.0",
                "stab_demangle_v3_arglist",
                "setup_section",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "debug_make_method_type.isra.0",
                "stab_class_start_method.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "debug_make_offset_type.isra.0",
                "stab_class_static_member.lto_priv.0",
                "debug_make_struct_type.isra.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_find_slot",
                "stab_function_parameter.lto_priv.0",
                "stab_push_string",
                "stab_start_class_type.lto_priv.0",
                "FUN_00116852",
                "start_stab.constprop.0",
                "stab_find_tagged_type",
                "debug_make_type.constprop.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_record_variable",
                "parse_coff_type.lto_priv.0",
                "debug_tag_type",
                "debug_start_source",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_00104390"
        },
        "FUN_001047b0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "merge_gnu_build_notes",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_001047b0"
        },
        "FUN_00128000": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemps@GLIBC_2.11 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128000",
            "calling": [
                "mkstemps"
            ],
            "imported": false,
            "current_name": "FUN_00128000"
        },
        "FUN_00104030": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104030"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_debug_type_00113da9",
                "param_1": "byteOffset",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "ptrToMemory",
                "lVar2": "loopCounter",
                "puVar3": "ptrToMemoryElement",
                "bVar4": "tempByte",
                "auVar5": "returnStruct"
            },
            "code": "\nundefined  [16] initializeDebugType_00113da9(byte byteOffset,undefined8 arg2,undefined8 arg3,undefined8 arg4)\n\n{\n  undefined8 *ptrToMemory;\n  long loopCounter;\n  undefined8 *ptrToMemoryElement;\n  byte tempByte;\n  undefined returnStruct [16];\n  \n  tempByte = 0;\n  returnStruct._0_8_ = debug_make_type_constprop_0(8 - (uint)byteOffset);\n  if (returnStruct._0_8_ != 0) {\n    ptrToMemory = (undefined8 *)xmalloc(0x28);\n    ptrToMemoryElement = ptrToMemory + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)ptrToMemoryElement = 0;\n      ptrToMemoryElement = (undefined8 *)((long)ptrToMemoryElement + (ulong)tempByte * -8 + 4);\n    }\n    *ptrToMemory = arg3;\n    *(undefined8 **)(returnStruct._0_8_ + 0x10) = ptrToMemory;\n  }\n  returnStruct._8_8_ = arg4;\n  return returnStruct;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "attribute1",
                "param_1[2]": "record1_attr1",
                "param_2[2]": "record2_attr1",
                "param_2[7]": "record2_attr6",
                "param_1[7]": "record1_attr6",
                "param_2[8]": "record2_attr7",
                "param_1[8]": "record1_attr7",
                "param_1[3]": "record1_attr3",
                "param_2[3]": "record2_attr3"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong attribute1;\n  \n  attribute1 = record1_attr1;\n  if (attribute1 == record2_attr1) {\n    if (record2_attr6 <= record1_attr6) {\n      if (record1_attr6 <= record2_attr6) {\n        if (record2_attr7 < record1_attr7) {\n          return -1;\n        }\n        if (record2_attr7 <= record1_attr7) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1_attr3 + 3) != *(char *)(record2_attr3 + 3)) {\n              return (int)*(char *)(record1_attr3 + 3) - (int)*(char *)(record2_attr3 + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((attribute1 == 0) || ((attribute1 != 0x100 && (record2_attr1 != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "sort_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "FUN_00128228": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128228",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_00128228"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "format_and_push_string_0010a69a",
                "param_1": "stringBuffer",
                "param_2": "unused",
                "param_3": "isIndexValid",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "structIndex",
                "sVar3": "stringLength",
                "uVar4": "allocatedMemory",
                "uVar5": "isStructPresent",
                "local_60": "formattedString"
            },
            "code": "\nundefined4 formatAndPushString_0010a69a(long stringBuffer,undefined8 unused,int isIndexValid,char flag,uint value)\n\n{\n  undefined4 result;\n  long structIndex;\n  size_t stringLength;\n  undefined8 allocatedMemory;\n  undefined isStructPresent;\n  char formattedString [48];\n  \n  if (isIndexValid == 0) {\n    formattedString[0] = '\\0';\n    isStructPresent = 0;\n    structIndex = 0;\n  }\n  else {\n    structIndex = stab_get_struct_index();\n    if (structIndex < 0) {\n      return 0;\n    }\n    isStructPresent = 1;\n    sprintf(formattedString,\"%ld=\",structIndex);\n  }\n  stringLength = strlen(formattedString);\n  sprintf(formattedString + stringLength,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = stab_push_string(stringBuffer,formattedString,structIndex,isStructPresent,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  structIndex = *(long *)(stringBuffer + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(structIndex + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(stringBuffer + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_get_struct_index",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "stab_start_class_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_0010a69a"
        },
        "FUN_001048e0": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001048e0"
        },
        "FUN_001047c0": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "setup_section",
                "parse_stab_type",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047c0"
        },
        "FUN_00104160": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "main",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104160"
        },
        "FUN_00104040": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104040"
        },
        "FUN_00104280": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104280"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_interaction_00115b70",
                "param_1": "section_name",
                "pcVar1": "current_section",
                "iVar2": "comparison_result",
                "iVar3": "strip_option",
                "lVar4": "section_list_1",
                "lVar5": "section_list_2",
                "uVar6": "error_message",
                "plVar7": "update_section_node"
            },
            "code": "\nundefined8 check_section_interaction_00115b70(char **section_name)\n\n{\n  char *current_section;\n  int comparison_result;\n  int strip_option;\n  long section_list_1;\n  long section_list_2;\n  undefined8 error_message;\n  long *update_section_node;\n  \n  section_list_1 = find_section_list(*section_name,0,4);\n  if (section_list_1 == 0) {\n    if ((sections_removed != '\\0') || (sections_copied != '\\0')) {\n      section_list_1 = find_section_list(*section_name,0,1);\n      section_list_2 = find_section_list(*section_name,0,2);\n      if (section_list_1 != 0) {\n        if (section_list_2 != 0) {\n          current_section = *section_name;\n          error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(error_message,current_section);\n        }\n        if (section_list_1 != 0) {\n          if (update_sections == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_name;\n          update_section_node = update_sections;\n          do {\n            strip_option = strcmp(current_section,(char *)update_section_node[1]);\n            if (strip_option == 0) {\n              error_message = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(error_message,current_section);\n            }\n            update_section_node = (long *)*update_section_node;\n          } while (update_section_node != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((sections_copied != '\\0') && (section_list_2 == 0)) {\n        return 1;\n      }\n    }\n    strip_option = strip_symbols;\n    if ((*(byte *)((long)section_name + 0x25) & 0x20) != 0) {\n      if ((((strip_symbols - 2U < 2) || (strip_symbols == 7)) || (discard_locals == 2)) ||\n         (convert_debugging != '\\0')) {\n        current_section = *section_name;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          strip_option = strcmp(current_section,\".reloc\");\n          if (strip_option != 0) {\n            return 1;\n          }\n          error_message = check_ebp_value_0010829e();\n          return error_message;\n        }\n      }\n      if (strip_option == 5) {\n        error_message = is_dwo_section_constprop_0(section_name);\n        return error_message;\n      }\n      if (strip_option == 4) {\n        return 0;\n      }\n    }\n    if (strip_option == 6) {\n      error_message = invert_result_and_return_001082b3();\n      return error_message;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "is_strip_section_1.isra.0.cold",
                "dcgettext",
                "find_section_list",
                "FUN_0010829e",
                "strcmp",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_section_interaction_00115b70"
        },
        "FUN_001046a0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "FUN_001046a0"
        },
        "FUN_00128358": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128358",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_00128358"
        },
        "FUN_00128230": {
            "renaming": {},
            "code": "\n\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128230",
            "calling": [
                "memcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128230"
        },
        "FUN_00116b40": {
            "renaming": {
                "FUN_00116b40": "initialize_application_00116b40",
                "completed_0": "isInitialized",
                "__cxa_finalize": "cleanUpFinalization",
                "__dso_handle": "dynamicSharedObjectHandle",
                "deregister_tm_clones": "unregisterCloneFunctions"
            },
            "code": "\nvoid initializeApplication_00116b40(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  cleanUpFinalization(dynamicSharedObjectHandle);\n  unregisterCloneFunctions();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "initialize_application_00116b40"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "update_reloc_flags_00116030",
                "param_1": "bfd_file",
                "param_2": "offset",
                "plVar1": "reloc_ptr",
                "lVar2": "reloc_val",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar6": "fwrite_func",
                "lVar7": "canonicalize_result",
                "__ptr": "reloc_data",
                "lVar8": "loop_index",
                "uStack_28": "default_return_value"
            },
            "code": "\n\n\nundefined8 updateRelocFlags_00116030(undefined8 *bfd_file,long offset)\n\n{\n  long *reloc_ptr;\n  long reloc_val;\n  long lVar3;\n  long lVar4;\n  int error_code;\n  undefined8 return_value;\n  long fwrite_func;\n  void *reloc_data;\n  long canonicalize_result;\n  undefined8 extraout_RAX;\n  long loop_index;\n  undefined8 default_return_value;\n  \n  if (*(long *)(offset + 0x60) == 0) {\n    return return_value;\n  }\n  fwrite_func = bfd_get_reloc_upper_bound();\n  if (fwrite_func < 0) {\n    if ((fwrite_func != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      bfd_nonfatal(*bfd_file);\n                    \n      xexit(1);\n    }\n  }\n  else if (fwrite_func != 0) {\n    reloc_data = (void *)xmalloc();\n    canonicalize_result = bfd_canonicalize_reloc(bfd_file,offset,reloc_data);\n    lVar4 = _DAT_00128680;\n    lVar3 = _DAT_00128568;\n    fwrite_func = _fwrite;\n    if (canonicalize_result < 0) {\n      bfd_nonfatal(*bfd_file);\n                    \n      xexit(1);\n    }\n    if (canonicalize_result != 0) {\n      loop_index = 0;\n      do {\n        reloc_ptr = **(long ***)((long)reloc_data + loop_index * 8);\n        if ((((reloc_ptr != (long *)0x0) && (reloc_val = *reloc_ptr, reloc_val != 0)) && (reloc_val != fwrite_func)) &&\n           ((reloc_val != lVar4 && (reloc_val != lVar3)))) {\n          *(uint *)(reloc_val + 0x18) = *(uint *)(reloc_val + 0x18) | 0x20;\n        }\n        loop_index = loop_index + 1;\n      } while (canonicalize_result != loop_index);\n    }\n    free(reloc_data);\n    return extraout_RAX;\n  }\n  return default_return_value;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc",
                "xexit",
                "mark_symbols_used_in_relocations.cold",
                "fwrite",
                "bfd_get_reloc_upper_bound",
                "free",
                "xmalloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_reloc_flags_00116030"
        },
        "FUN_00128018": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128018",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_00128018"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_and_compare_00113ede",
                "param_1": "strings",
                "__s": "current_string",
                "sVar1": "string_length",
                "uVar2": "comparison_result"
            },
            "code": "\nundefined8 check_string_length_and_compare_00113ede(char **strings)\n\n{\n  char *current_string;\n  size_t string_length;\n  undefined8 comparison_result;\n  \n  if (strings == (char **)0x0) {\n    return 0;\n  }\n  current_string = *strings;\n  if (current_string != (char *)0x0) {\n    string_length = strlen(current_string);\n    if (4 < (int)string_length) {\n      comparison_result = startswith_lto_priv_0_lto_priv_0(current_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return comparison_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_string_length_and_compare_00113ede"
        },
        "FUN_001047d0": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "add_redefine_and_check",
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "FUN_001047d0"
        },
        "FUN_001046b0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001046b0"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "record1Value",
                "lVar2": "record2Value",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long record1Value;\n  long record2Value;\n  int result;\n  uint flag;\n  \n  record1Value = *record1;\n  record2Value = *record2;\n  flag = *(uint *)(record2Value + 0x24) & 0x102;\n  if ((*(uint *)(record1Value + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1Value + 0x38) <= *(ulong *)(record2Value + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2Value + 0x38) <= *(ulong *)(record1Value + 0x38)) {\n      if (*(ulong *)(record2Value + 0x40) < *(ulong *)(record1Value + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2Value + 0x40) <= *(ulong *)(record1Value + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1Value + 0x18) <= *(uint *)(record2Value + 0x18)) {\n            return -(uint)(*(uint *)(record1Value + 0x18) < *(uint *)(record2Value + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "FUN_001048f0": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "merge_gnu_build_notes",
                "stab_variable.lto_priv.0",
                "list_matching_formats",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "stab_pop_type",
                "stab_int_constant.lto_priv.0",
                "main",
                "stab_method_type.lto_priv.0",
                "FUN_00104ea2",
                "display_info.isra.0",
                "stab_emit_pending_vars",
                "copy_section",
                "bfd_get_archive_filename",
                "stab_function_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "parse_coff_struct_type",
                "stab_start_function.lto_priv.0",
                "free_saved_stabs",
                "parse_stab",
                "parse_stab_type",
                "stab_modify_type",
                "FUN_00107880",
                "copy_file",
                "stab_demangle_v3_arg",
                "stab_end_struct_type.lto_priv.0",
                "save_stab",
                "FUN_0010554f",
                "list_supported_targets",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_demangle_v3_arglist",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_demangle_qualified",
                "FUN_00114b84",
                "make_tempdir.cold",
                "mark_symbols_used_in_relocations",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "stab_function_parameter.lto_priv.0",
                "copy_object.cold",
                "stab_start_class_type.lto_priv.0",
                "FUN_00116852",
                "stab_find_tagged_type",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_class_method_var",
                "parse_coff_type.lto_priv.0",
                "FUN_00108466",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001048f0"
        },
        "FUN_00128260": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128260",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00128260"
        },
        "FUN_00104290": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "main",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "init_section_add"
            ],
            "imported": false,
            "current_name": "FUN_00104290"
        },
        "FUN_00104050": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUN_00104050"
        },
        "FUN_00104170": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "FUN_00104170"
        },
        "FUN_001048f8": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "htab_hash_redefnode"
            ],
            "imported": false,
            "current_name": "FUN_001048f8"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_types_0010c892",
                "param_1": "param",
                "param_2": "debugDataPtr",
                "cVar1": "emitResult",
                "lVar2": "typeResult1",
                "lVar3": "typeResult2",
                "uVar4": "result",
                "puVar5": "pNext",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processDebugTypes_0010c892(undefined8 param,long debugDataPtr)\n\n{\n  char emitResult;\n  long typeResult1;\n  long typeResult2;\n  undefined8 result;\n  undefined8 *pNext;\n  int kind;\n  \n  if (*(char *)(debugDataPtr + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (pNext = *(undefined8 **)(debugDataPtr + 0x1a0); pNext != (undefined8 *)0x0;\n        pNext = (undefined8 *)*pNext) {\n      kind = *(int *)(pNext + 2);\n      typeResult2 = pNext[1];\n      if (kind != 0) {\n        if (typeResult2 != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        pNext[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (typeResult2 == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      typeResult1 = debug_make_type_constprop_0(kind,0);\n      if (typeResult1 == 0) goto LAB_0010c910;\n      typeResult2 = debug_tag_type(param,typeResult2,typeResult1);\n      pNext[3] = typeResult2;\n      if (typeResult2 == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    emitResult = stab_emit_pending_vars();\n    if (emitResult != '\\0') {\n      emitResult = debug_end_function(param,*(undefined8 *)(debugDataPtr + 0x68));\n      if (emitResult != '\\0') {\n        *(undefined *)(debugDataPtr + 0x60) = 0;\n        *(undefined8 *)(debugDataPtr + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_tag_type",
                "stab_emit_pending_vars",
                "debug_make_type.constprop.0",
                "debug_end_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_types_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_00112904",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "dataPointer"
            },
            "code": "\nvoid initializeData_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *dataPointer;\n  \n  dataPointer = (undefined4 *)xmalloc(0x18);\n  *dataPointer = value1;\n  dataPointer[1] = value2;\n  *(undefined (*) [16])(dataPointer + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_find_type",
                "finish_stab",
                "stab_demangle_type.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_array_type.isra.0",
                "parse_stab_type",
                "debug_make_pointer_type.isra.0",
                "debug_tag_type",
                "debug_make_method_type.isra.0",
                "debug_make_offset_type.isra.0",
                "debug_make_struct_type.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_const_type.isra.0",
                "debug_make_reference_type.isra.0",
                "debug_make_enum_type.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_data_00112904"
        },
        "FUN_00128388": {
            "renaming": {},
            "code": "\n\n\n\nchar * mkdtemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkdtemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128388",
            "calling": [
                "mkdtemp"
            ],
            "imported": false,
            "current_name": "FUN_00128388"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "undefinedReturnValue",
                "auVar2": "resultArray"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 undefinedReturnValue;\n  undefined resultArray [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  resultArray._1_7_ = 0;\n  resultArray[0] = comparisonResult == 0;\n  resultArray._8_8_ = undefinedReturnValue;\n  return resultArray;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_exit_functions_0011a390",
                "lVar1": "currentIndex",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "currentNode",
                "uVar5": "numFunctions"
            },
            "code": "\nvoid executeExitFunctions_0011a390(void)\n\n{\n  long currentIndex;\n  long prevIndex;\n  long tempIndex;\n  long *currentNode;\n  uint numFunctions;\n  \n  currentNode = (long *)xatexit_head_lto_priv_0;\n  if (xatexit_head_lto_priv_0 != (undefined *)0x0) {\n    do {\n      numFunctions = *(int *)(currentNode + 1) - 1;\n      if (-1 < (int)numFunctions) {\n        currentIndex = (long)(int)numFunctions;\n        numFunctions = numFunctions & 7;\n        (*(code *)currentNode[currentIndex + 2])();\n        prevIndex = currentIndex + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (numFunctions != 0) {\n            if (numFunctions != 1) {\n              if (numFunctions != 2) {\n                if (numFunctions != 3) {\n                  if (numFunctions != 4) {\n                    if (numFunctions != 5) {\n                      if (numFunctions != 6) {\n                        (*(code *)currentNode[currentIndex + 1])();\n                        prevIndex = currentIndex + -2;\n                      }\n                      (*(code *)currentNode[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)currentNode[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)currentNode[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)currentNode[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)currentNode[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)currentNode[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)currentNode[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)currentNode[tempIndex + 1])();\n            (*(code *)currentNode[tempIndex])();\n            (*(code *)currentNode[currentIndex])();\n            (*(code *)currentNode[tempIndex + -2])();\n            (*(code *)currentNode[tempIndex + -3])();\n            (*(code *)currentNode[tempIndex + -4])();\n            (*(code *)currentNode[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_0011a466:\n      currentNode = (long *)*currentNode;\n    } while (currentNode != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_functions_0011a390"
        },
        "FUN_00128008": {
            "renaming": {},
            "code": "\n\n\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128008",
            "calling": [
                "getenv"
            ],
            "imported": false,
            "current_name": "FUN_00128008"
        },
        "FUN_00128128": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128128",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00128128"
        },
        "FUN_001046c0": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001046c0"
        },
        "FUN_001045a0": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00105828",
                "display_info.isra.0.cold",
                "display_info.isra.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001045a0"
        },
        "FUN_001047e0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "stab_variable.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_function_parameter.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "parse_stab_type",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047e0"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "write_symbol_to_debug_file_0010e842",
                "param_1": "symbolTablePtr",
                "param_2": "symbolName",
                "param_3": "value",
                "param_4": "extraData",
                "__s": "formattedSymbol",
                "auVar2": "result",
                "sVar1": "symbolNameLength"
            },
            "code": "\nundefined  [16] writeSymbolToDebugFile_0010e842(undefined8 symbolTablePtr,char *symbolName,undefined8 value,undefined8 extraData)\n\n{\n  size_t symbolNameLength;\n  char *formattedSymbol;\n  undefined result [16];\n  \n  symbolNameLength = strlen(symbolName);\n  formattedSymbol = (char *)xmalloc(symbolNameLength + 0x14);\n  sprintf(formattedSymbol,\"%s:c=i%ld\",symbolName,value);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbolTablePtr,0x80,0,0,formattedSymbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedSymbol);\n  }\n  result._8_8_ = extraData;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_debug_file_0010e842"
        },
        "FUN_00104060": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00104060"
        },
        "FUN_00128370": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128370",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00128370"
        },
        "FUN_00104180": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104180"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_debug_type_00113cb9",
                "param_1": "inputValue",
                "lVar1": "debugType"
            },
            "code": "\nlong initializeDebugType_00113cb9(long inputValue)\n\n{\n  long debugType;\n  \n  if (inputValue != 0) {\n    debugType = debug_make_type_constprop_0(0xe,0);\n    if (debugType == 0) {\n      debugType = 0;\n    }\n    else {\n      *(long *)(debugType + 0x10) = inputValue;\n    }\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113cb9"
        },
        "FUN_00128130": {
            "renaming": {},
            "code": "\n\n\n\nint rmdir(char *__path)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* rmdir@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128130",
            "calling": [
                "rmdir"
            ],
            "imported": false,
            "current_name": "FUN_00128130"
        },
        "FUN_00128498": {
            "renaming": {},
            "code": "\n\n\n\nchar * strdup(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strdup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128498",
            "calling": [
                "strdup"
            ],
            "imported": false,
            "current_name": "FUN_00128498"
        },
        "FUN_00128258": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128258",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128258"
        },
        "FUN_00128138": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128138",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00128138"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "write_formatted_string_to_symbol_0010eafe",
                "param_1": "symbolTableRef",
                "param_2": "baseString",
                "param_3": "flag",
                "__s": "poppedValue",
                "sVar2": "baseStringLen",
                "sVar3": "poppedValueLen",
                "__s_00": "formattedString"
            },
            "code": "\nundefined4 writeFormattedStringToSymbol_0010eafe(long symbolTableRef,char *baseString,char flag)\n\n{\n  undefined4 uVar1;\n  char *poppedValue;\n  size_t baseStringLen;\n  size_t poppedValueLen;\n  char *formattedString;\n  \n  if ((*(int *)(symbolTableRef + 0x1f8) == 0) && (*(long *)(symbolTableRef + 0x1e8) == -1)) {\n    poppedValue = (char *)stab_pop_type();\n    baseStringLen = strlen(baseString);\n    poppedValueLen = strlen(poppedValue);\n    formattedString = (char *)xmalloc(baseStringLen + 3 + poppedValueLen);\n    sprintf(formattedString,\"%s:%c%s\",baseString,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),poppedValue);\n    *(undefined8 *)(symbolTableRef + 0x1e8) = *(undefined8 *)(symbolTableRef + 0x10);\n    uVar1 = stab_write_symbol_lto_priv_0(symbolTableRef,0x24,0,0,formattedString);\n    if ((char)uVar1 != '\\0') {\n      free(formattedString);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_formatted_string_to_symbol_0010eafe"
        },
        "FUN_001045b0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "FUN_001045b0"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_type_as_constprop_00113df2",
                "param_1": "input",
                "debug_make_type_constprop_0": "setInputAsConstprop"
            },
            "code": "\nvoid initializeTypeAsConstprop_00113df2(undefined4 input)\n\n{\n  setInputAsConstprop(4,input);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_type_as_constprop_00113df2"
        },
        "FUN_001047f0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "print_version",
                "strip_usage",
                "copy_usage"
            ],
            "imported": false,
            "current_name": "FUN_001047f0"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "merge_strings_0010a377",
                "param_1": "input_ptr",
                "cVar1": "flag",
                "__s": "string_1",
                "__s_00": "string_2",
                "sVar3": "length_1",
                "sVar4": "length_2",
                "__s_01": "merged_string",
                "uVar2": "result",
                "uVar5": "flag_copy"
            },
            "code": "\nundefined4 merge_strings_0010a377(long input_ptr)\n\n{\n  char flag;\n  undefined4 result;\n  char *string_1;\n  char *string_2;\n  size_t length_1;\n  size_t length_2;\n  char *merged_string;\n  undefined flag_copy;\n  \n  flag_copy = 1;\n  flag = *(char *)(*(long *)(input_ptr + 0x60) + 0x1c);\n  string_1 = (char *)stab_pop_type();\n  if (flag == '\\0') {\n    flag_copy = *(undefined *)(*(long *)(input_ptr + 0x60) + 0x1c);\n  }\n  string_2 = (char *)stab_pop_type(input_ptr);\n  length_1 = strlen(string_1);\n  length_2 = strlen(string_2);\n  merged_string = (char *)xmalloc(length_1 + 3 + length_2);\n  sprintf(merged_string,\"@%s,%s\",string_2,string_1);\n  free(string_2);\n  free(string_1);\n  result = stab_push_string(input_ptr,merged_string,0,flag_copy,0);\n  if ((char)result != '\\0') {\n    free(merged_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "merge_strings_0010a377"
        },
        "FUN_001046d0": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001046d0"
        },
        "FUN_00128160": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128160",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_00128160"
        },
        "FUN_00104070": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "FUN_00104070"
        },
        "FUN_00104190": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_00104190"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "demangle_stab_symbols_0010d882",
                "param_1": "param_input",
                "param_2": "param_strings",
                "param_3": "param_output",
                "param_4": "param_flag",
                "iVar1": "local_var1",
                "pcVar2": "ptr_param_string",
                "cVar3": "char_value",
                "lVar4": "local_var2",
                "pcVar5": "ptr_param_string_copy",
                "uVar6": "ulong_value",
                "bVar7": "bool_check",
                "local_50": "local_var3",
                "local_4c": "local_var4",
                "local_48": "local_var5",
                "local_44": "local_var6",
                "local_40": "local_array"
            },
            "code": "\nundefined8 demangle_stab_symbols_0010d882(long param_input,char **param_strings,long *param_output,undefined *param_flag)\n\n{\n  int local_var1;\n  char *ptr_param_string;\n  char char_value;\n  long local_var2;\n  char *ptr_param_string_copy;\n  ulong ulong_value;\n  bool bool_check;\n  uint local_var3;\n  undefined4 local_var4;\n  uint local_var5;\n  int local_var6;\n  undefined8 local_array [2];\n  \n  ptr_param_string = *param_strings;\n  local_var4 = 10;\n  if (param_output != (long *)0x0) {\n    local_var2 = xmalloc();\n    *param_output = local_var2;\n    *param_flag = 0;\n  }\n  local_var3 = 0;\n  while( true ) {\n    ptr_param_string_copy = *param_strings;\n    char_value = *ptr_param_string_copy;\n    if ((char_value == '_' || char_value == '\\0') || (char_value == 'e')) break;\n    if ((char_value == 'N') || (char_value == 'T')) {\n      *param_strings = ptr_param_string_copy + 1;\n      if (char_value == 'T') {\n        local_var6 = 1;\n      }\n      else {\n        char_value = stab_demangle_get_count(param_strings,&local_var6);\n        if (char_value == '\\0') goto LAB_0010d958;\n      }\n      char_value = stab_demangle_get_count(param_strings,&local_var5);\n      if ((char_value == '\\0') || (*(uint *)(param_input + 0x28) <= local_var5)) {\nLAB_0010d958:\n        stab_bad_demangle(ptr_param_string);\n        return 0;\n      }\n      ulong_value = (ulong)local_var5;\n      while (local_var1 = local_var6 + -1, bool_check = local_var6 != 0, local_var6 = local_var1, bool_check) {\n        local_array[0] = *(undefined8 *)(*(long *)(param_input + 0x20) + ulong_value * 0x10);\n        char_value = stab_demangle_arg(param_input,local_array,param_output,&local_var3,&local_var4);\n        if (char_value == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      char_value = stab_demangle_arg(param_input,param_strings,param_output,&local_var3,&local_var4);\n      if (char_value == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (param_output == (long *)0x0) {\n    if (char_value != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*param_output + (ulong)local_var3 * 8) = 0;\n    if (*ptr_param_string_copy != 'e') goto LAB_0010d9fa;\n    *param_flag = 1;\n  }\n  ptr_param_string_copy = ptr_param_string_copy + 1;\n  *param_strings = ptr_param_string_copy;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)ptr_param_string_copy >> 8),1);\n}\n\n",
            "called": [
                "stab_demangle_arg",
                "stab_bad_demangle",
                "stab_demangle_get_count",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "demangle_stab_symbols_0010d882"
        },
        "FUN_00128040": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128040",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00128040"
        },
        "FUN_00128168": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128168",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_00128168"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "arrayPtr",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "memoryBlock",
                "pauVar2": "existingArrayPtr",
                "lVar3": "loopCounter",
                "puVar4": "currentPointer",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**arrayPtr) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *memoryBlock;\n  undefined (*existingArrayPtr) [16];\n  long loopCounter;\n  undefined4 *currentPointer;\n  byte byteValue;\n  \n  byteValue = 0;\n  memoryBlock = (undefined4 *)xmalloc(0x28);\n  currentPointer = memoryBlock;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentPointer = 0;\n    currentPointer = currentPointer + (ulong)byteValue * -2 + 1;\n  }\n  existingArrayPtr = *arrayPtr;\n  *(undefined8 *)(memoryBlock + 2) = value;\n  memoryBlock[5] = param3;\n  memoryBlock[6] = param4;\n  if (existingArrayPtr == (undefined (*) [16])0x0) {\n    existingArrayPtr = (undefined (*) [16])xmalloc(0x10);\n    *existingArrayPtr = ZEXT816(0);\n    *arrayPtr = existingArrayPtr;\n    *(undefined (**) [16])(*existingArrayPtr + 8) = existingArrayPtr;\n  }\n  **(undefined8 **)(*existingArrayPtr + 8) = memoryBlock;\n  *(undefined4 **)(*existingArrayPtr + 8) = memoryBlock;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "debug_name_type",
                "debug_record_function",
                "debug_tag_type",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_line_debug_info_0010bf86",
                "param_1": "record_ptr",
                "param_2": "line_ptr",
                "param_3": "unit_ptr",
                "uVar1": "result",
                "puVar2": "current_ptr",
                "uVar3": "index",
                "puVar4": "new_debug_ptr",
                "lVar5": "counter",
                "puVar6": "temp_ptr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordLineDebugInfo_0010bf86(long record_ptr,undefined8 line_ptr,undefined8 unit_ptr)\n\n{\n  undefined8 result;\n  undefined8 *current_ptr;\n  ulong index;\n  undefined4 *new_debug_ptr;\n  long counter;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record_ptr + 8) == 0) {\n    result = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    counter = *(long *)(record_ptr + 0x28);\n    if ((counter != 0) && (*(long *)(counter + 8) == *(long *)(record_ptr + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(counter + 0x10 + index * 8) == -1) {\n          current_ptr = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(counter + 0x10 + (long)current_ptr * 8) = line_ptr;\n          *(undefined8 *)(counter + 0x60 + (long)current_ptr * 8) = unit_ptr;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    new_debug_ptr = (undefined4 *)xmalloc(0xb0);\n    temp_ptr = new_debug_ptr;\n    for (counter = 0x2c; counter != 0; counter = counter + -1) {\n      *temp_ptr = 0;\n      temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n    }\n    result = *(undefined8 *)(record_ptr + 0x10);\n    *(undefined8 *)(new_debug_ptr + 4) = line_ptr;\n    *(undefined8 *)(new_debug_ptr + 2) = result;\n    *(undefined8 *)(new_debug_ptr + 0x18) = unit_ptr;\n    temp_ptr = new_debug_ptr + 6;\n    for (counter = 0x48; counter != 0; counter = counter + -1) {\n      *(undefined *)temp_ptr = 0xff;\n      temp_ptr = (undefined4 *)((long)temp_ptr + (ulong)flag * -2 + 1);\n    }\n    current_ptr = *(undefined8 **)(record_ptr + 0x28);\n    if (current_ptr == (undefined8 *)0x0) {\n      current_ptr = *(undefined8 **)(record_ptr + 8);\n      current_ptr[2] = new_debug_ptr;\n    }\n    else {\n      *current_ptr = new_debug_ptr;\n    }\n    *(undefined4 **)(record_ptr + 0x28) = new_debug_ptr;\nLAB_0010c056:\n    result = CONCAT71((int7)((ulong)current_ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_line_debug_info_0010bf86"
        },
        "FUN_00128048": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128048",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_00128048"
        },
        "FUN_00128288": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128288",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128288"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "text",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint patternMatch_0011a170(char **pattern,char **text)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*text,0);\n    if (matchResult == 0) {\n      *(undefined *)(text + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*text,0);\n    if (matchResult == 0) {\n      *(undefined *)(text + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "function_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "temp_ptr1",
                "uVar2": "error_message",
                "puVar3": "temp_ptr2",
                "puVar4": "temp_ptr3",
                "lVar5": "loop_counter",
                "puVar6": "temp_ptr4",
                "puVar7": "temp_ptr5",
                "bVar8": "byte_val"
            },
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_ptr,long param2,long param3,undefined4 param4,undefined8 param5)\n\n{\n  undefined8 *temp_ptr1;\n  undefined8 error_message;\n  undefined4 *temp_ptr2;\n  undefined8 *temp_ptr3;\n  long loop_counter;\n  undefined8 *temp_ptr4;\n  undefined4 *temp_ptr5;\n  byte byte_val;\n  \n  byte_val = 0;\n  if (param2 == 0) {\n    return 0;\n  }\n  if (param3 != 0) {\n    if ((*(long *)(function_ptr + 8) != 0) && (*(long *)(function_ptr + 0x18) != 0)) {\n      temp_ptr2 = (undefined4 *)xmalloc(0x28);\n      temp_ptr5 = temp_ptr2;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *temp_ptr5 = 0;\n        temp_ptr5 = temp_ptr5 + (ulong)byte_val * -2 + 1;\n      }\n      loop_counter = *(long *)(function_ptr + 0x18);\n      *(long *)(temp_ptr2 + 2) = param2;\n      *(long *)(temp_ptr2 + 4) = param3;\n      temp_ptr2[6] = param4;\n      temp_ptr1 = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(temp_ptr2 + 8) = param5;\n      temp_ptr4 = (undefined8 *)(loop_counter + 8);\n      while (temp_ptr3 = temp_ptr1, temp_ptr3 != (undefined8 *)0x0) {\n        temp_ptr4 = temp_ptr3;\n        temp_ptr1 = (undefined8 *)*temp_ptr3;\n      }\n      *temp_ptr4 = temp_ptr2;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_archive_00104ea2",
                "cVar1": "result",
                "iVar2": "arch",
                "ppcVar3": "archive",
                "pvVar4": "buffer",
                "lVar5": "readSize",
                "ppcVar6": "filePtr",
                "pcVar7": "currentChar",
                "puVar8": "tempDir",
                "piVar9": "errno",
                "pcVar10": "errorMessage",
                "uVar11": "message",
                "lVar12": "fileSize",
                "pcVar13": "closeFunction",
                "lVar14": "writeSize",
                "unaff_EBX": "errCode",
                "unaff_RBP": "fileStat",
                "pcVar15": "tempPtr",
                "psVar16": "tempStat",
                "unaff_R12": "archivePath",
                "unaff_R13": "tempDirNode",
                "unaff_R15": "archivePtr",
                "bVar17": "byteVar",
                "unaff_retaddr": "returnValue",
                "param_7": "inputPath",
                "param_8": "outputPtr",
                "param_9": "tempDirName",
                "param_10": "tempPath",
                "param_11": "openMode",
                "in_stack_00000030": "flagVar",
                "param_18": "filePerm",
                "param_19": "maxSize"
            },
            "code": "\nvoid extractArchive_00104ea2(void)\n\n{\n  char result;\n  int arch;\n  char **archive;\n  void *buffer;\n  long readSize;\n  char **filePtr;\n  char *currentChar;\n  undefined8 *tempDir;\n  int *errno;\n  char *errorMessage;\n  undefined8 message;\n  long fileSize;\n  code *closeFunction;\n  long writeSize;\n  int errCode;\n  stat *fileStat;\n  char *tempPtr;\n  stat *tempStat;\n  char *archivePath;\n  undefined8 *tempDirNode;\n  char **archivePtr;\n  byte byteVar;\n  undefined8 returnValue;\n  undefined8 *inputPath;\n  long *outputPtr;\n  char *tempDirName;\n  undefined8 *tempPath;\n  undefined8 openMode;\n  undefined8 flagVar;\n  uint filePerm;\n  long maxSize;\n  \n  byteVar = 0;\ncode_r0x00104ea2:\n  filePtr = (char **)bfd_openw(archivePath,openMode);\n  if (filePtr == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(archivePath,0,0,0);\nLAB_00104e93:\n    status = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = copy_object(archivePtr,filePtr,returnValue);\n    if (result == '\\0') {\n      arch = bfd_get_arch(archivePtr);\n      if (arch == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(filePtr);\n      if (result != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(filePtr);\n    filePtr = archivePtr;\n    if (result == '\\0') {\n      bfd_nonfatal_message(archivePath,0,0,0);\n      status = 1;\n    }\nLAB_00114a86:\n    if ((preserve_dates != '\\0') && (errCode == 0)) {\n      set_times(archivePath,fileStat);\n    }\n    fileSize = bfd_openr(archivePath,openMode);\n    tempDirNode[2] = fileSize;\n    *outputPtr = fileSize;\n    outputPtr = (long *)(fileSize + 0xf0);\n    archivePtr = (char **)bfd_openr_next_archived_file(tempPath,filePtr);\n    bfd_close(filePtr);\n    while ((status == 0 && (archivePtr != (char **)0x0))) {\n      errorMessage = *archivePtr;\n      currentChar = errorMessage;\n      if (*errorMessage == '/') {\nLAB_0010527d:\n        message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(message,errorMessage);\n        goto LAB_00104e93;\n      }\n      while (*currentChar != '\\0') {\n        tempPtr = currentChar;\n        if ((*currentChar == '.') && (tempPtr = currentChar + 1, currentChar[1] == '.')) {\n          tempPtr = currentChar + 2;\n          if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*tempPtr != '\\0' && (*tempPtr != '/')); tempPtr = tempPtr + 1) {\n        }\n        currentChar = tempPtr;\n        if (*tempPtr == '/') {\n          extract_archive_001052a2();\n          return;\n        }\n      }\n      fileStat = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(tempDirName,&DAT_0011b47d);\n      arch = stat(archivePath,fileStat);\n      tempDir = tempDirNode;\n      if (-1 < arch) {\n        fileSize = make_tempdir(archivePath);\n        free(archivePath);\n        if (fileSize == 0) {\n          errno = __errno_location();\n          errorMessage = strerror(*errno);\n          message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(message,errorMessage);\n          goto LAB_00104e93;\n        }\n        tempDir = (undefined8 *)xmalloc(0x18);\n        errorMessage = *archivePtr;\n        *tempDir = tempDirNode;\n        tempDir[2] = 0;\n        tempDir[1] = fileSize;\n        archivePath = (char *)concat(fileSize,&DAT_0011b47d,errorMessage);\n      }\n      errCode = 0;\n      if (preserve_dates != '\\0') {\n        tempStat = fileStat;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&tempStat->st_dev = 0;\n          tempStat = (stat *)((long)tempStat + (ulong)byteVar * -8 + 4);\n        }\n        filePtr = (char **)archivePtr[0x1d];\n        if ((char **)archivePtr[0x1d] == (char **)0x0) {\n          filePtr = archivePtr;\n        }\n        errCode = (**(code **)(filePtr[1] + 0x1e8))(archivePtr,fileStat);\n        if (errCode != 0) {\n          errorMessage = *archivePtr;\n          message = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(message,errorMessage);\n        }\n      }\n      tempDirNode = (undefined8 *)xmalloc(0x18);\n      tempDirNode[1] = archivePath;\n      *tempDirNode = tempDir;\n      tempDirNode[2] = 0;\n      result = bfd_check_format(archivePtr,1);\n      if (result != '\\0') {\n        if (flagVar._7_1_ != '\\0') goto code_r0x00104ea2;\n        filePtr = (char **)bfd_openw(archivePath,*(undefined8 *)archivePtr[1]);\n        if (filePtr == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      message = dcgettext(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,archivePtr,0,message);\n      filePtr = (char **)bfd_openw(archivePath,openMode);\n      if (filePtr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archive = (char **)archivePtr[0x1d];\n      if ((char **)archivePtr[0x1d] == (char **)0x0) {\n        archive = archivePtr;\n      }\n      arch = (**(code **)(archive[1] + 0x1e8))(archivePtr);\n      fileSize = maxSize;\n      if (arch == 0) {\n        if (maxSize < 0) {\n          bfd_get_archive_filename(archivePtr);\n          message = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          non_fatal(message);\n        }\n        else {\n          arch = bfd_seek(archivePtr,0,0);\n          if (arch == 0) {\n            if (verbose != '\\0') {\n              errorMessage = *filePtr;\n              message = bfd_get_archive_filename(archivePtr);\n              currentChar = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(currentChar,message,errorMessage);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (fileSize == 0) {\n                chmod(*filePtr,filePerm | 0x100);\n                free(buffer);\n                result = bfd_close_all_done(filePtr);\n                filePtr = archivePtr;\n                if (result == '\\0') {\n                  bfd_nonfatal_message(archivePath,0,0,0);\n                  status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              writeSize = 0x2000;\n              if (fileSize < 0x2001) {\n                writeSize = fileSize;\n              }\n              readSize = bfd_bread(buffer,writeSize,archivePtr);\n              archive = archivePtr;\n              if ((writeSize != readSize) ||\n                 (readSize = bfd_bwrite(buffer,writeSize,filePtr), archive = filePtr, writeSize != readSize))\n              break;\n              fileSize = fileSize - writeSize;\n            }\n            bfd_nonfatal_message(0,archive,0,0);\n            free(buffer);\n          }\n          else {\n            message = bfd_get_archive_filename(archivePtr);\n            bfd_nonfatal(message);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,archivePtr,0,0);\n      }\n      result = bfd_close_all_done(filePtr);\n      if (result == '\\0') {\n        bfd_nonfatal_message(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      status = 1;\n    }\n    *outputPtr = 0;\n    buffer = (void *)xstrdup(*inputPath);\n    if (status == 0) {\n      closeFunction = bfd_close;\n    }\n    else {\n      closeFunction = bfd_close_all_done;\n    }\n    result = (*closeFunction)(inputPath);\n    if (result == '\\0') {\n      status = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*tempPath);\n    result = bfd_close(tempPath);\n    if (result == '\\0') {\n      status = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (tempDirNode != (undefined8 *)0x0) {\n    if (tempDirNode[2] == 0) {\n      rmdir((char *)tempDirNode[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempDirNode[1]);\n    }\n    free((void *)tempDirNode[1]);\n    tempDir = (undefined8 *)*tempDirNode;\n    free(tempDirNode);\n    tempDirNode = tempDir;\n  }\n  rmdir(tempDirName);\n  free(tempDirName);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "stat",
                "strerror",
                "bfd_openr",
                "FUN_001052a2",
                "bfd_get_arch",
                "bfd_close_all_done",
                "concat",
                "dcgettext",
                "printf",
                "bfd_bread",
                "FUN_00114b84",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_get_archive_filename",
                "non_fatal",
                "chmod",
                "free",
                "bfd_seek",
                "copy_object",
                "xstrdup",
                "bfd_bwrite",
                "bfd_check_format",
                "bfd_openw",
                "bfd_openr_next_archived_file",
                "bfd_close",
                "make_tempdir",
                "xmalloc",
                "bfd_nonfatal",
                "set_times",
                "bfd_close",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_archive_00104ea2"
        },
        "FUN_001044a0": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "main",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001044a0"
        },
        "FUN_001046e0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046e0"
        },
        "FUN_001045c0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "main",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001045c0"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "initialize_data_00113ce0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "lVar1": "typeCode",
                "plVar2": "ptrData",
                "auVar3": "output"
            },
            "code": "\nundefined  [16]\ninitializeData_00113ce0(long input1,long input2,undefined input3,undefined8 input4,undefined8 input5)\n\n{\n  long typeCode;\n  long *ptrData;\n  undefined output [16];\n  \n  if (input1 != 0) {\n    typeCode = debug_make_type_constprop_0(0xd,0);\n    if (typeCode != 0) {\n      ptrData = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)ptrData + 0x11) = 0;\n      *ptrData = input1;\n      *(undefined4 *)((long)ptrData + 0x14) = 0;\n      ptrData[1] = input2;\n      *(undefined *)(ptrData + 2) = input3;\n      *(long **)(typeCode + 0x10) = ptrData;\n      goto LAB_00113d2f;\n    }\n  }\n  typeCode = 0;\nLAB_00113d2f:\n  output._8_8_ = input5;\n  output._0_8_ = typeCode;\n  return output;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_data_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "startOffset",
                "unaff_R14": "endOffset",
                "sVar4": "bytesRead",
                "iVar1": "error",
                "uVar2": "errorString",
                "uVar3": "errorMessage"
            },
            "code": "\nvoid readAndResizeBuffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorString;\n  undefined8 errorMessage;\n  size_t bytesRead;\n  FILE *file;\n  long buffer;\n  long startOffset;\n  long endOffset;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(buffer + 0x20) + startOffset),1,endOffset - startOffset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      errorMessage = *(undefined8 *)(buffer + 0x10);\n      errorString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(errorString,errorMessage);\n    }\n    startOffset = startOffset + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (startOffset == endOffset) {\n      endOffset = startOffset * 2;\n      errorMessage = xrealloc(*(undefined8 *)(buffer + 0x20),endOffset);\n      *(undefined8 *)(buffer + 0x20) = errorMessage;\n    }\n  }\n  *(long *)(buffer + 0x18) = startOffset;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "fclose",
                "dcgettext",
                "ferror",
                "xrealloc",
                "feof",
                "fread",
                "FUN_00114dc7",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_buffer_00114dc7"
        },
        "FUN_00116b80": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00116b80"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "decompile_and_print_00119f70",
                "param_1": "headers",
                "param_2": "data",
                "uVar1": "format_version",
                "cVar2": "error_flag",
                "iVar3": "iteration_variable",
                "uVar4": "formatted_endian_string_1",
                "uVar5": "formatted_endian_string_2",
                "__format": "header_data_format",
                "lVar6": "allocated_size",
                "uVar7": "printable_arch_mach",
                "lVar8": "allocated_data"
            },
            "code": "\nundefined4 decompile_and_print_00119f70(undefined8 *headers,undefined8 *data)\n\n{\n  undefined4 format_version;\n  char error_flag;\n  int iteration_variable;\n  undefined8 formatted_endian_string_1;\n  undefined8 formatted_endian_string_2;\n  char *header_data_format;\n  long allocated_size;\n  undefined8 printable_arch_mach;\n  long allocated_data;\n  \n  iteration_variable = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = iteration_variable;\n  if ((ulong)data[2] < (ulong)((long)iteration_variable * 0x60)) {\n    allocated_size = 0x3000;\n    if (0x3f < iteration_variable) {\n      allocated_size = (long)iteration_variable * 0xc0;\n    }\n    allocated_data = xrealloc(data[3]);\n    data[3] = allocated_data;\n    memset((void *)(allocated_data + data[2]),0,allocated_size - data[2]);\n    data[2] = allocated_size;\n  }\n  format_version = *(undefined4 *)((long)headers + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *headers;\n  formatted_endian_string_1 = endian_string(format_version);\n  formatted_endian_string_2 = endian_string(*(undefined4 *)(headers + 2));\n  printable_arch_mach = *headers;\n  header_data_format = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(header_data_format,printable_arch_mach,formatted_endian_string_2,formatted_endian_string_1);\n  allocated_size = bfd_openw(*data,*headers);\n  if (allocated_size == 0) {\n    bfd_nonfatal(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    iteration_variable = 2;\n    error_flag = bfd_set_format(allocated_size,1);\n    if (error_flag == '\\0') {\n      iteration_variable = bfd_get_error();\n      if (iteration_variable != 5) {\n        bfd_nonfatal(*headers);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        error_flag = (**(code **)(*(long *)(allocated_size + 8) + 0x2a0))(allocated_size,iteration_variable,0);\n        if (error_flag != '\\0') {\n          printable_arch_mach = bfd_printable_arch_mach(iteration_variable,0);\n          printf(\"  %s\\n\",printable_arch_mach);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(iteration_variable - 2)) =\n               1;\n        }\n        iteration_variable = iteration_variable + 1;\n      } while (iteration_variable != 0x57);\n    }\n    bfd_close_all_done(allocated_size);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "printf",
                "bfd_openw",
                "bfd_printable_arch_mach",
                "endian_string",
                "do_display_target.cold",
                "bfd_set_format",
                "xrealloc",
                "memset",
                "bfd_close_all_done",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "decompile_and_print_00119f70"
        },
        "FUN_00128150": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128150",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00128150"
        },
        "FUN_00128030": {
            "renaming": {},
            "code": "\n\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128030",
            "calling": [
                "strcasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128030"
        },
        "FUN_00104080": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104080"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "param_3": "mode_pointer",
                "iVar1": "errno_copy",
                "__fd": "destination_file_descriptor",
                "iVar2": "read_result",
                "_Var3": "file_offset",
                "uVar4": "bytes_copied",
                "sVar5": "write_result",
                "piVar6": "errno_location",
                "local_2038": "buffer"
            },
            "code": "\nulong copy_file_00115a90(int source_file_descriptor,char *destination_file_path,long mode_pointer)\n\n{\n  int errno_copy;\n  int destination_file_descriptor;\n  int read_result;\n  __off_t file_offset;\n  ulong bytes_copied;\n  size_t write_result;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (file_offset = lseek(source_file_descriptor,0,0), file_offset == 0)) {\n    destination_file_descriptor = open(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_copied = simple_copy_cold();\n      return bytes_copied;\n    }\n    do {\n      bytes_copied = read(source_file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_copied;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        errno_copy = *errno_location;\n        fchmod(destination_file_descriptor,*(__mode_t *)(mode_pointer + 0x18));\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (read_result != 0) {\n          *errno_location = errno_copy;\n          return 0xffffffff;\n        }\n        return bytes_copied & 0xffffffff;\n      }\n      write_result = write(destination_file_descriptor,buffer,(long)read_result);\n    } while (write_result == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "lseek",
                "fchmod",
                "write",
                "simple_copy.cold",
                "open",
                "read",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "FUN_00128390": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128390",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00128390"
        },
        "FUN_00128158": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128158",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00128158"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_and_delete_file_00108200",
                "unaff_RBP": "fileToCopy",
                "unaff_R12B": "shouldSetTimes",
                "unaff_R13": "filePermissions",
                "auVar3": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyAndDeleteFile_00108200(void)\n\n{\n  int *piVar1;\n  undefined8 uVar2;\n  char *fileToCopy;\n  char shouldSetTimes;\n  ulong filePermissions;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  piVar1 = __errno_location();\n  strerror(*piVar1);\n  uVar2 = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(uVar2);\n  unlink(fileToCopy);\n  if (shouldSetTimes != '\\0') {\n    set_times();\n  }\n  returnValue._0_8_ = filePermissions & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "set_times",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00108200"
        }
    },
    "used_tokens": 301542,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00116aa0",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00104000",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00116b40",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ],
        [
            "FUN_00104cc1",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114690",
            "FUN_00114460",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00116110",
            "FUN_00104ea2"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_00112c1f",
            "FUN_00112b6e",
            "FUN_00113a4d",
            "FUN_0010b0fa",
            "FUN_0010dac0",
            "FUN_0010c95e"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_0010847a",
            "FUN_001163d0"
        ]
    ],
    "locked_functions": []
}