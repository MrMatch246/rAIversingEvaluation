{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001024f0",
                "FUN_00102e20",
                "FUN_00102380"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_001024f0",
                "FUN_00102e20"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00105120 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00105100);\n  FUNC_00102430();\n  DAT_00105120 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00102430",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_0010225e",
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_0010225e"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "FUN_0010225e": {
            "renaming": {
                "FUN_0010225e": "display_usage_and_exit_0010225e",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "__format": "bugReportFormat",
                "puVar1": "demanglerPointer"
            },
            "code": "\n\n\nvoid displayUsageAndExit_0010225e(FILE *outputFile,int exitCode)\n\n{\n  char *bugReportFormat;\n  undefined8 *demanglerPointer;\n  \n  fprintf(outputFile,\"Usage: %s [options] [mangled names]\\n\",DAT_0010d148);\n  fprintf(outputFile,\"Options are:\\n  [-_|--strip-underscore]     Ignore first leading underscore%s\\n\",\n          \"\");\n  fprintf(outputFile,\"  [-n|--no-strip-underscore]  Do not ignore a leading underscore%s\\n\",\n          \" (default)\");\n  fwrite(\"  [-p|--no-params]            Do not display function arguments\\n  [-i|--no-verbose]           Do not show implementation details (if any)\\n  [-R|--recurse-limit]        Enable a limit on recursion whilst demangling.  [Default]\\n  ]-r|--no-recurse-limit]     Disable a limit on recursion whilst demangling\\n  [-t|--types]                Also attempt to demangle type encodings\\n  [-s|--format \"\n         ,1,0x184,outputFile);\n  fprintf(outputFile,\"{%s\",_libiberty_demanglers);\n  demanglerPointer = (undefined8 *)&libiberty_demanglers;\n  while (*(int *)(demanglerPointer + 4) != 0) {\n    fprintf(outputFile,\",%s\",demanglerPointer[3]);\n    demanglerPointer = demanglerPointer + 3;\n  }\n  fputc(0x7d,outputFile);\n  fwrite(&DAT_001035e8,1,2,outputFile);\n  fwrite(\"  [@<file>]                   Read extra options from <file>\\n  [-h|--help]                 Display this information\\n  [-v|--version]              Show the version information\\nDemangled names are displayed to stdout.\\nIf a name cannot be demangled it is just echoed to stdout.\\nIf no names are provided on the command line, stdin is read.\\n\"\n         ,1,0x150,outputFile);\n  if (exitCode == 0) {\n    bugReportFormat = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,bugReportFormat,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "fwrite",
                "bfd_set_error_program_name",
                "exit",
                "dcgettext",
                "exit",
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010225e",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "display_usage_and_exit_0010225e"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00102380"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "FUN_001024f0": {
            "renaming": {
                "FUN_001024f0": "demangle_symbols_001024f0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptr1",
                "bVar2": "byteVar2",
                "bVar3": "boolVar3",
                "bVar4": "boolVar4",
                "bVar5": "boolVar5",
                "bVar6": "byteVar6",
                "iVar7": "intVar7",
                "uVar8": "uintVar8",
                "iVar9": "option",
                "__stream": "fileStream",
                "__n": "size",
                "__s": "fileContents",
                "sVar10": "readSize",
                "__ptr": "newString",
                "lVar11": "longVar11",
                "plVar12": "params",
                "__src": "srcStringList",
                "plVar13": "pointedList",
                "uVar14": "resultVar14",
                "pcVar15": "stringVar15",
                "pbVar16": "ptr2",
                "lVar17": "longVar17",
                "ppuVar18": "ptrPtr18",
                "lVar19": "longVar19",
                "pbVar20": "ptr3",
                "unaff_R13": "unusedVar",
                "local_110": "localVar110",
                "local_10c": "localVar10c",
                "local_108": "localVar108",
                "local_100": "localVar100",
                "local_c8": "localStat"
            },
            "code": "\n\n\nundefined8 demangle_symbols_001024f0(int argc,long *argv)\n\n{\n  byte *ptr1;\n  byte byteVar2;\n  bool boolVar3;\n  bool boolVar4;\n  bool boolVar5;\n  byte byteVar6;\n  int intVar7;\n  uint uintVar8;\n  int option;\n  FILE *fileStream;\n  size_t size;\n  byte *fileContents;\n  size_t readSize;\n  byte *newString;\n  long longVar11;\n  long *params;\n  long *srcStringList;\n  long *pointedList;\n  undefined8 resultVar14;\n  char *stringVar15;\n  byte *ptr2;\n  long longVar17;\n  undefined **ptrPtr18;\n  long longVar19;\n  byte *ptr3;\n  ulong unusedVar;\n  int localVar110;\n  int localVar10c;\n  size_t localVar108;\n  long localVar100;\n  stat localStat;\n  \n  DAT_0010d148 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d148);\n  params = argv;\n  if (1 < argc) {\n    localVar10c = 2000;\n    unusedVar = 1;\n    localVar110 = 0;\n    do {\n      option = (int)unusedVar;\n      longVar17 = (long)option;\n      if (*(char *)params[longVar17] == '@') {\n        localVar10c = localVar10c + -1;\n        if (localVar10c == 0) goto LAB_00102bdd;\n        stringVar15 = (char *)params[longVar17] + 1;\n        intVar7 = stat(stringVar15,&localStat);\n        if (intVar7 < 0) goto LAB_00102900;\n        if ((localStat.st_mode & 0xf000) == 0x4000) {\n          longVar17 = *params;\n          stringVar15 = \"%s: error: @-file refers to a directory\\n\";\n          do {\n            fprintf(_stderr,stringVar15,longVar17);\n            xexit(1);\nLAB_00102bdd:\n            longVar17 = *params;\n            stringVar15 = \"%s: error: too many @-files encountered\\n\";\n          } while( true );\n        }\n        fileStream = fopen(stringVar15,\"r\");\n        if (fileStream == (FILE *)0x0) goto LAB_00102900;\n        intVar7 = fseek(fileStream,0,2);\n        if (((intVar7 == -1) || (size = ftell(fileStream), size == 0xffffffffffffffff)) ||\n           (intVar7 = fseek(fileStream,0,0), intVar7 == -1)) {\nLAB_001029a0:\n          fclose(fileStream);\n          if (option + 1 < argc) goto LAB_0010290d;\n          break;\n        }\n        fileContents = (byte *)xmalloc(size + 1);\n        readSize = fread(fileContents,1,size,fileStream);\n        if ((size != readSize) && (intVar7 = ferror(fileStream), intVar7 != 0)) {\n          free(fileContents);\n          goto LAB_001029a0;\n        }\n        fileContents[readSize] = 0;\n        byteVar6 = *fileContents;\n        ptr2 = fileContents;\n        if (byteVar6 != 0) {\nLAB_00102680:\n          if (((&_sch_istable)[(ulong)byteVar6 * 2] & 0x40) != 0) goto LAB_00102670;\n          strlen((char *)fileContents);\n          newString = (byte *)xmalloc();\n          srcStringList = (long *)0x0;\n          intVar7 = 0;\n          boolVar3 = false;\n          boolVar5 = false;\n          boolVar4 = false;\n          localVar100 = 0;\n          ptr2 = fileContents;\n          do {\n            while (((&_sch_istable)[(ulong)*ptr2 * 2] & 0x40) != 0) {\n              ptr2 = ptr2 + 1;\n            }\n            if ((intVar7 == 0) || (intVar7 + -1 <= (int)localVar100)) {\n              if (srcStringList == (long *)0x0) {\n                intVar7 = 8;\n                srcStringList = (long *)xmalloc(0x40);\n              }\n              else {\n                intVar7 = intVar7 * 2;\n                srcStringList = (long *)xrealloc(srcStringList,(long)intVar7 << 3);\n              }\n              pointedList = srcStringList + localVar100;\n              *pointedList = 0;\n            }\n            else {\n              pointedList = srcStringList + localVar100;\n            }\n            byteVar6 = *ptr2;\n            ptr3 = newString;\n            while (byteVar6 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar6 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar5 | boolVar4 | boolVar3))) {\n                  boolVar4 = false;\n                  boolVar3 = false;\n                  boolVar5 = false;\n                  goto LAB_0010276f;\n                }\n                if (!boolVar4) break;\n                ptr2 = ptr2 + 1;\n                *ptr3 = byteVar6;\n                ptr3 = ptr3 + 1;\n                boolVar4 = false;\n                byteVar6 = *ptr2;\n                if (byteVar6 == 0) goto LAB_0010276f;\n              }\n              if (byteVar6 == 0x5c) {\n                boolVar4 = true;\n              }\n              else if (boolVar5) {\n                if (byteVar6 == 0x27) {\n                  boolVar5 = false;\n                }\n                else {\nLAB_001028e1:\n                  *ptr3 = byteVar6;\n                  ptr3 = ptr3 + 1;\n                }\n              }\n              else if (boolVar3) {\n                if (byteVar6 != 0x22) goto LAB_001028e1;\n                boolVar3 = false;\n              }\n              else if (byteVar6 == 0x27) {\n                boolVar5 = true;\n              }\n              else {\n                if (byteVar6 != 0x22) goto LAB_001028e1;\n                boolVar3 = true;\n              }\n              ptr1 = ptr2 + 1;\n              ptr2 = ptr2 + 1;\n              byteVar6 = *ptr1;\n            }\nLAB_0010276f:\n            *ptr3 = 0;\n            longVar11 = xstrdup(newString);\n            *pointedList = longVar11;\n            srcStringList[localVar100 + 1] = 0;\n            byteVar6 = *ptr2;\n            byteVar2 = (&_sch_istable)[(ulong)byteVar6 * 2];\n            while ((byteVar2 & 0x40) != 0) {\n              byteVar6 = ptr2[1];\n              ptr2 = ptr2 + 1;\n              byteVar2 = (&_sch_istable)[(ulong)byteVar6 * 2];\n            }\n            localVar100 = localVar100 + 1;\n          } while (byteVar6 != 0);\n          free(newString);\n          pointedList = params;\n          if (argv == params) goto LAB_00102adb;\n          goto LAB_00102807;\n        }\nLAB_00102abe:\n        srcStringList = (long *)xmalloc(8);\n        *srcStringList = 0;\n        if (argv == params) {\nLAB_00102adb:\n          if (*params == 0) {\n            intVar7 = 0;\n          }\n          else {\n            longVar11 = 1;\n            do {\n              intVar7 = (int)longVar11;\n              pointedList = params + longVar11;\n              longVar11 = longVar11 + 1;\n            } while (*pointedList != 0);\n          }\n          longVar19 = 0;\n          pointedList = (long *)xmalloc((long)(intVar7 + 1) << 3);\n          longVar11 = *params;\n          while (longVar11 != 0) {\n            resultVar14 = xstrdup();\n            *(undefined8 *)((long)pointedList + longVar19) = resultVar14;\n            longVar19 = longVar19 + 8;\n            longVar11 = *(long *)((long)params + longVar19);\n          }\n          *(undefined8 *)((long)pointedList + longVar19) = 0;\nLAB_00102807:\n          params = pointedList;\n          if (*srcStringList == 0) goto LAB_00102ba3;\n          longVar11 = 0;\n          do {\n            longVar11 = longVar11 + 1;\n          } while (srcStringList[longVar11] != 0);\n          localVar108 = longVar11 * 8;\n        }\n        else {\nLAB_00102ba3:\n          longVar11 = 0;\n          localVar108 = 0;\n        }\n        free((void *)params[longVar17]);\n        params = (long *)xrealloc(params,(longVar11 + 1 + (long)argc) * 8);\n        intVar7 = argc + -1 + (int)longVar11;\n        memmove(params + longVar17 + longVar11,params + longVar17 + 1,(long)(argc - option) << 3);\n        memcpy(params + longVar17,srcStringList,localVar108);\n        free(srcStringList);\n        free(fileContents);\n        fclose(fileStream);\n        uintVar8 = localVar110 + 1;\n        unusedVar = longVar17 * 8;\n        argc = intVar7;\n        if (intVar7 <= (int)uintVar8) break;\n      }\n      else {\nLAB_00102900:\n        if (argc <= option + 1) break;\nLAB_0010290d:\n        uintVar8 = option + 1;\n        localVar110 = option;\n      }\n      unusedVar = (ulong)uintVar8;\n    } while( true );\n  }\n  ptrPtr18 = &PTR_s_strip_underscore_00104be0;\n  while (option = getopt_long(argc,params,\"_hinprRs:tv\",&PTR_s_strip_underscore_00104be0,0),\n        option != -1) {\n    switch(option) {\n    case 0x3f:\nswitchD_001029f9_caseD_3f:\n      FUN_0010225e(_stderr,1);\n    case 0x5f:\nswitchD_001029f9_caseD_5f:\n      _DAT_0010d140 = 1;\n      break;\n    default:\n      do {\n        option = getopt_long(argc,params,\"_hinprRs:tv\",&PTR_s_strip_underscore_00104be0,0);\n        if (option == -1) goto LAB_00102a6c;\n        switch(option) {\n        case 0x3f:\n          goto switchD_001029f9_caseD_3f;\n        case 0x52:\n          goto switchD_001029f9_caseD_52;\n        case 0x5f:\n          goto switchD_001029f9_caseD_5f;\n        case 0x68:\n          goto switchD_001029f9_caseD_68;\n        case 0x69:\n          goto switchD_001029f9_caseD_69;\n        case 0x6e:\n          goto switchD_001029f9_caseD_6e;\n        case 0x70:\n          goto switchD_001029f9_caseD_70;\n        case 0x72:\n          goto switchD_001029f9_caseD_72;\n        case 0x73:\n          goto switchD_001029f9_caseD_73;\n        case 0x74:\n          goto switchD_001029f9_caseD_74;\n        case 0x76:\n          goto switchD_001029f9_caseD_76;\n        }\n      } while( true );\n    case 0x52:\nswitchD_001029f9_caseD_52:\n      DAT_00105108 = DAT_00105108 & 0xfffbffff;\n      break;\n    case 0x68:\nswitchD_001029f9_caseD_68:\n      FUN_0010225e(_stdout,0);\n    case 0x74:\nswitchD_001029f9_caseD_74:\n      DAT_00105108 = DAT_00105108 | 0x10;\n      break;\n    case 0x69:\nswitchD_001029f9_caseD_69:\n      DAT_00105108 = DAT_00105108 & 0xfffffff7;\n      break;\n    case 0x6e:\nswitchD_001029f9_caseD_6e:\n      _DAT_0010d140 = 0;\n      break;\n    case 0x70:\nswitchD_001029f9_caseD_70:\n      DAT_00105108 = DAT_00105108 & 0xfffffffe;\n      break;\n    case 0x72:\nswitchD_001029f9_caseD_72:\n      DAT_00105108 = DAT_00105108 | 0x40000;\n      break;\n    case 0x73:\nswitchD_001029f9_caseD_73:\n      option = cplus_demangle_name_to_style(_optarg);\n      if (option == 0) {\n        fprintf(_stderr,\"%s: unknown demangling style `%s\\'\\n\",DAT_0010d148,_optarg);\n        return 1;\n      }\n      cplus_demangle_set_style(option);\n      break;\n    case 0x76:\nswitchD_001029f9_caseD_76:\n      printf(\"GNU %s %s\\n\",\"c++filt\",\"(GNU Binutils for Debian) 2.40\");\n      stringVar15 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(stringVar15);\n      stringVar15 = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(stringVar15);\n                    \n      exit(0);\n    }\n  }\nLAB_00102a6c:\n  if (_optind < argc) {\n    do {\n      FUN_00102380(params[_optind]);\n      putc(10,_stdout);\n      _optind = _optind + 1;\n    } while (_optind < argc);\n  }\n  else {\n    if (_current_demangling_style == 0x8000) {\nLAB_00102c76:\n      ptrPtr18 = (undefined **)&stdout;\n      do {\n        unusedVar = 0;\n        uintVar8 = getc(_stdin);\n        while( true ) {\n          params = (long *)(unusedVar & 0xffffffff);\n          if (uintVar8 == 0xffffffff) goto LAB_00102d0d;\n          if ((((&_sch_istable)[(ulong)(uintVar8 & 0xff) * 2] & 0x8c) == 0) &&\n             (stringVar15 = strchr(\"_$.\",uintVar8), stringVar15 == (char *)0x0)) {\n            if ((int)params != 0) goto LAB_00102d6f;\n            goto LAB_00102d47;\n          }\n          if (unusedVar == 0x7ffe) break;\n          (&DAT_00105140)[unusedVar] = (char)uintVar8;\n          unusedVar = unusedVar + 1;\n          uintVar8 = getc(_stdin);\n        }\n        params = (long *)0x7ffe;\nLAB_00102d6f:\n        *(undefined *)(params + 0x20a28) = 0;\n        FUN_00102380(&DAT_00105140);\nLAB_00102d47:\n        putc(uintVar8,_stdout);\n        if (uintVar8 == 10) {\n          fflush(_stdout);\n        }\n      } while( true );\n    }\n    if (_current_demangling_style < 0x8001) {\n      if (((_current_demangling_style == 0x100) || (_current_demangling_style == 0x4000)) ||\n         (_current_demangling_style == 4)) goto LAB_00102c76;\n    }\n    else if ((_current_demangling_style - 0x10000U & 0xfffeffff) == 0) goto LAB_00102c76;\n    FUN_00102e20(\"Internal error: no symbol alphabet for current style\");\nLAB_00102d0d:\n    if ((int)unusedVar != 0) {\n      *(undefined *)(params + 0x20a28) = 0;\n      FUN_00102380();\n    }\n    fflush((FILE *)*ptrPtr18);\n  }\n  return 0;\nLAB_00102670:\n  byteVar6 = ptr2[1];\n  ptr2 = ptr2 + 1;\n  if (byteVar6 == 0) goto LAB_00102abe;\n  goto LAB_00102680;\n}\n\n",
            "called": [
                "FUN_0010225e",
                "fopen",
                "stat",
                "ftell",
                "xmalloc",
                "bfd_set_error_program_name",
                "free",
                "memcpy",
                "dcgettext",
                "putc",
                "cplus_demangle_name_to_style",
                "fclose",
                "strchr",
                "xstrdup",
                "xmalloc_set_program_name",
                "cplus_demangle_set_style",
                "exit",
                "memmove",
                "getopt_long",
                "fseek",
                "printf",
                "fprintf",
                "fflush",
                "ferror",
                "xrealloc",
                "FUN_00102380",
                "strlen",
                "xexit",
                "fread",
                "FUN_00102e20",
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "demangle_symbols_001024f0"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001024f0",
                "FUN_00102380"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00102460();\n  return;\n}\n\n",
            "called": [
                "FUN_00102460"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_00102230": {
            "renaming": {
                "FUN_00102230": "print_demangled_string_00102230",
                "param_1": "offset",
                "in_AL": "character",
                "__ptr": "demangled_string",
                "unaff_RBX": "string"
            },
            "code": "\n\n\nvoid print_demangled_string_00102230(ulong offset)\n\n{\n  byte character;\n  void *demangled_string;\n  char *string;\n  \n  if (string[character] == '_') {\n    offset = (ulong)((int)offset + 1);\n  }\n  demangled_string = (void *)cplus_demangle(string + offset,DAT_00105108);\n  if (demangled_string != (void *)0x0) {\n    if (*string == '.') {\n      putc(0x2e,_stdout);\n    }\n    printf(\"%s\",demangled_string);\n    free(demangled_string);\n    return;\n  }\n  printf(\"%s\");\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102380"
            ],
            "imported": false,
            "current_name": "print_demangled_string_00102230"
        },
        "FUN_00102430": {
            "renaming": {
                "FUN_00102430": "FUNC_00102430"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102443) */\n/* WARNING: Removing unreachable block (ram,0x0010244f) */\n\nvoid FUNC_00102430(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00102430",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00102430"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_001024f0",
                "FUN_00102380"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_001024f0",
                "FUN_00102e20"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f00",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_0010225e",
                "FUN_00102e20"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_0010225e",
                "FUN_001024f0",
                "FUN_00102e20"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_0010225e",
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_001024f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001024f0",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_00102e20": {
            "renaming": {
                "FUN_00102e20": "report_internal_error_00102e20",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid reportInternalError_00102e20(void)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010d148);\n  fwrite(\"Internal error: no symbol alphabet for current style\",1,0x34,standardError);\n  putc(10,standardError);\n  xexit(1);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fwrite",
                "fflush",
                "xexit",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e20",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "report_internal_error_00102e20"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00102380": {
            "renaming": {
                "FUN_00102380": "print_symbol_name_00102380",
                "param_1": "symbol",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "hasPrefix",
                "__ptr": "demangledName",
                "uVar2": "prefixLength"
            },
            "code": "\n\n\nvoid printSymbolName_00102380(char *symbol,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  uint hasPrefix;\n  void *demangledName;\n  ulong prefixLength;\n  \n  hasPrefix = (uint)(*symbol == '.' || *symbol == '$');\n  prefixLength = (ulong)hasPrefix;\n  if ((_DAT_0010d140 != 0) && (symbol[hasPrefix] == '_')) {\n    prefixLength = (ulong)(hasPrefix + 1);\n  }\n  demangledName = (void *)cplus_demangle(symbol + prefixLength,DAT_00105108);\n  if (demangledName != (void *)0x0) {\n    if (*symbol == '.') {\n      putc(0x2e,_stdout);\n    }\n    printf(\"%s\",demangledName);\n    free(demangledName);\n    return;\n  }\n  printf(\"%s\",symbol,param4);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_00102230",
                "free",
                "cplus_demangle",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001024f0"
            ],
            "imported": false,
            "current_name": "print_symbol_name_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_function_00102020"
            },
            "code": "\nvoid executeIndirectFunction_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00102020"
        },
        "FUN_00102460": {
            "renaming": {
                "FUN_00102460": "FUNC_00102460"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102484) */\n/* WARNING: Removing unreachable block (ram,0x00102490) */\n\nvoid FUNC_00102460(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00102460",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00102460"
        }
    },
    "used_tokens": 6659,
    "layers": [
        [
            "FUN_0010225e",
            "FUN_001024f0",
            "FUN_00102230",
            "FUN_00102e20",
            "FUN_00102380",
            "FUN_00102020"
        ]
    ],
    "locked_functions": []
}