{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_file_00102cd9",
                "in_EAX": "status",
                "iVar1": "comparisonResult",
                "unaff_RBX": "fileList",
                "param_7": "searchFile"
            },
            "code": "\nlong * findMatchingFile_00102cd9(void)\n\n{\n  int status;\n  int comparisonResult;\n  long *fileList;\n  undefined8 searchFile;\n  \n  searchFile = DAT_0010d638;\n  if (status == 3) {\n    for (; *fileList != 0; fileList = (long *)(*fileList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileList != (undefined8 *)0x0; fileList = (long *)(*fileList + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*fileList,searchFile);\n      if (comparisonResult == 0) {\n        if (status != 2) {\n          return fileList;\n        }\n        return (long *)(*fileList + 0xf0);\n      }\n    }\n  }\n  return fileList;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_file_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00105830",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "file",
                "param_2": "fileInfo",
                "param_3": "printFlag",
                "param_4": "hexFlag",
                "iVar1": "result",
                "ppcVar2": "ppFileInfo",
                "pcVar3": "timeStr",
                "uVar4": "fileType",
                "local_100": "currentTime",
                "uStack_f3": "permission",
                "cStack_f2": "readPerm",
                "cStack_f1": "writePerm",
                "cStack_f0": "executePerm",
                "cStack_ef": "readPermSetuid",
                "cStack_ee": "writePermSetgid",
                "cStack_ed": "executePermSticky",
                "cStack_ec": "readPermOther",
                "cStack_eb": "writePermOther",
                "cStack_ea": "executePermOther",
                "local_e8": "timeBuffer",
                "local_b8": "unkBuffer",
                "uStack_a0": "fileMode",
                "uStack_9c": "inodeNumber",
                "uStack_98": "fileCount",
                "uStack_88": "fileSize",
                "local_60": "localVar",
                "&local_100": "&currentTime",
                "dcgettext": "getCorruptTimeData"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *file,char **fileInfo,char printFlag,char hexFlag)\n\n{\n  int result;\n  char **ppFileInfo;\n  char *timeStr;\n  uint fileType;\n  time_t currentTime;\n  undefined permission;\n  char readPerm;\n  char writePerm;\n  char executePerm;\n  char readPermSetuid;\n  char writePermSetgid;\n  char executePermSticky;\n  char readPermOther;\n  char writePermOther;\n  char executePermOther;\n  undefined uStack_e9;\n  char timeBuffer [48];\n  undefined unkBuffer [24];\n  uint fileMode;\n  uint inodeNumber;\n  uint fileCount;\n  undefined8 fileSize;\n  time_t localVar;\n  \n  if (printFlag != '\\0') {\n    ppFileInfo = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      ppFileInfo = fileInfo;\n    }\n    result = (**(code **)(ppFileInfo[1] + 0x1e8))(fileInfo,unkBuffer);\n    if (result == 0) {\n      currentTime = localVar;\n      timeStr = ctime(&currentTime);\n      if (timeStr == (char *)0x0) {\n        timeStr = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(timeBuffer,timeStr);\n      }\n      else {\n        sprintf(timeBuffer,\"%.12s %.4s\",timeStr + 4);\n      }\n      fileType = fileMode & 0xf000;\n      if (fileType == 0x4000) {\n        permission = 100;\n      }\n      else if (fileType == 0xa000) {\n        permission = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        permission = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        permission = 99;\n      }\n      else if (fileType == 0xc000) {\n        permission = 0x73;\n      }\n      else {\n        permission = 0x70;\n        if (fileType != 0x1000) {\n          permission = 0x2d;\n        }\n      }\n      readPerm = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n      writePerm = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n      executePerm = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n      readPermSetuid = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n      writePermSetgid = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n      executePermSticky = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n      readPermOther = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n      writePermOther = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n      executePermOther = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileMode & 0x800) != 0) {\n        if (executePerm == 'x') {\n          executePerm = 's';\n        }\n        else {\n          executePerm = 'S';\n        }\n      }\n      if ((fileMode & 0x400) != 0) {\n        if (executePermSticky == 'x') {\n          executePermSticky = 's';\n        }\n        else {\n          executePermSticky = 'S';\n        }\n      }\n      if ((fileMode & 0x200) != 0) {\n        if (executePermOther == 'x') {\n          executePermOther = 't';\n        }\n        else {\n          executePermOther = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&readPerm,(ulong)inodeNumber,(ulong)fileCount,fileSize,\n              timeBuffer,(ulong)fileMode);\n    }\n  }\n  fputs(*fileInfo,file);\n  if (hexFlag != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00102d8c",
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_file_00105a68",
                "pcVar1": "directoryPath",
                "pFVar2": "filePointer",
                "sVar3": "pathLength"
            },
            "code": "\nvoid processFile_00105a68(void)\n\n{\n  char *directoryPath;\n  FILE *filePointer;\n  size_t pathLength;\n  \n  directoryPath = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    pathLength = strlen(DAT_0010d5e8);\n    if (pathLength != 0) {\n      if (directoryPath[pathLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(directoryPath,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(directoryPath,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "strlen",
                "perror",
                "FUN_00102e57",
                "xexit",
                "concat",
                "printf",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "extract_files_from_archive_001032a8",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "fileNames",
                "param_4": "returnValue",
                "lVar1": "nextEntry",
                "uVar2": "currentFileName",
                "bVar3": "foundEntry",
                "plVar4": "currentEntry",
                "iVar5": "comparisonResult",
                "__format": "errorMessageFormat",
                "plVar6": "nextEntry",
                "lVar7": "currentEntry",
                "plVar8": "previousEntry"
            },
            "code": "\n\n\nundefined8 extractFilesFromArchive_001032a8(long *archive,code *callback,undefined8 *fileNames,undefined8 returnValue)\n\n{\n  long nextEntry;\n  undefined8 currentFileName;\n  bool foundEntry;\n  long *currentEntry;\n  int comparisonResult;\n  char *errorMessageFormat;\n  long *nextEntry;\n  long currentEntry;\n  long *previousEntry;\n  \n  currentEntry = archive[0x1e];\n  if (fileNames == (undefined8 *)0x0) {\n    while (currentEntry != 0) {\n      nextEntry = *(long *)(currentEntry + 0xf0);\n      (*callback)(currentEntry,0);\n      currentEntry = nextEntry;\n    }\n  }\n  else {\n    do {\n      foundEntry = false;\n      currentEntry = (long *)archive[0x1e];\n      previousEntry = archive;\n      while (nextEntry = currentEntry, nextEntry != (long *)0x0) {\n        if (*nextEntry != 0) {\n          comparisonResult = filename_cmp(*fileNames);\n          if (comparisonResult == 0) {\n            foundEntry = true;\n            (*callback)(nextEntry,previousEntry);\n          }\n        }\n        previousEntry = nextEntry;\n        currentEntry = (long *)nextEntry[0x1e];\n      }\n      if (!foundEntry) {\n        currentFileName = *fileNames;\n        errorMessageFormat = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorMessageFormat,currentFileName);\n      }\n      fileNames = (undefined8 *)fileNames[1];\n    } while (fileNames != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "filename_cmp",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_files_from_archive_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_missing_entry_error_message_0010285f",
                "__format": "errorMessageFormat",
                "lVar2": "substring",
                "plVar3": "fallbackSubstring",
                "uVar4": "entryName",
                "plVar5": "currentEntry",
                "unaff_RBP": "handleMissingEntry",
                "unaff_R12": "archivePtr",
                "unaff_R13D": "remainingEntries",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "extractedEntryCount",
                "code_r0x0010285f": "startLoop"
            },
            "code": "\n\n\nvoid printMissingEntryErrorMessage_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessageFormat;\n  long substring;\n  long *fallbackSubstring;\n  undefined8 entryName;\n  long *currentEntry;\n  code *handleMissingEntry;\n  long archivePtr;\n  int remainingEntries;\n  undefined8 *entryNames;\n  int extractedEntryCount;\n  \nstartLoop:\n  entryName = *entryNames;\n  errorMessageFormat = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorMessageFormat,entryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  remainingEntries = remainingEntries + -1;\n  if (remainingEntries == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archivePtr + 0xf0);\n  extractedEntryCount = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto startLoop;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      substring = *currentEntry;\n      if (substring == 0) {\n        fallbackSubstring = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          fallbackSubstring = currentEntry;\n        }\n        (**(code **)(fallbackSubstring[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePtr + 0x49) & 0x10) == 0) || (substring = extract_substring_00105830(), substring != 0))\n      {\n        entryName = extract_substring_00105830(*entryNames);\n        iVar1 = filename_cmp(entryName,substring);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (extractedEntryCount = extractedEntryCount + 1,\n            extractedEntryCount == _DAT_0010d630)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*handleMissingEntry)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_missing_entry_error_message_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102c25",
                "FUN_001057a0",
                "FUN_001028ed",
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "unaff_RBX": "unknownErrorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "_stdout": "stdout",
                "_stderr": "stderr"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long unknownErrorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(stdout);\n  if (unknownErrorCode != 0) {\n    fprintf(stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "display_usage_0010342d",
                "param_1": "verbosity",
                "uVar1": "message",
                "pcVar2": "localizedMessage",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid displayUsage_0010342d(uint verbosity)\n\n{\n  undefined8 message;\n  char *localizedMessage;\n  FILE *outputStream;\n  \n  localizedMessage = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (verbosity != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,localizedMessage,DAT_0010d660);\n  message = DAT_0010d660;\n  localizedMessage = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,localizedMessage,message);\n  localizedMessage = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  print_emulation_options_0010336b(outputStream);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (verbosity != 0) {\n    localizedMessage = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedMessage,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(verbosity ^ 1);\n}\n\n",
            "called": [
                "FUN_0010336b",
                "xexit",
                "fprintf",
                "dcgettext",
                "FUN_0010266f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "display_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "param_1": "outputToStdout",
                "uVar1": "version",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010394a(uint outputToStdout)\n\n{\n  undefined8 version;\n  char *message;\n  FILE *outputStream;\n  \n  version = DAT_0010d660;\n  outputStream = _stderr;\n  if (outputToStdout != 0) {\n    outputStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,version);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (outputToStdout != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToStdout ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "fprintf",
                "dcgettext",
                "FUN_0010266f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "print_error_message_00107920",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "localVar1",
                "local_d4": "localVar2",
                "local_d0": "ptrLocalD0",
                "local_c8": "ptrLocalC8",
                "local_b8": "localBuffer",
                "local_b0": "localVar3",
                "local_a8": "localVar4",
                "local_a0": "localVar5",
                "local_98": "localVar6",
                "local_90": "localVar7",
                "local_88": "localVar8",
                "local_78": "localVar9",
                "local_68": "localVar10",
                "local_58": "localVar11",
                "local_48": "localVar12",
                "local_38": "localVar13",
                "local_28": "localVar14",
                "local_18": "localVar15"
            },
            "code": "\nvoid printErrorMessage_00107920(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *ptrLocalD0;\n  undefined *ptrLocalC8;\n  undefined localBuffer [8];\n  undefined8 localVar3;\n  undefined8 localVar4;\n  undefined8 localVar5;\n  undefined8 localVar6;\n  undefined8 localVar7;\n  undefined4 localVar8;\n  undefined4 localVar9;\n  undefined4 localVar10;\n  undefined4 localVar11;\n  undefined4 localVar12;\n  undefined4 localVar13;\n  undefined4 localVar14;\n  undefined4 localVar15;\n  \n  if (flag != '\\0') {\n    localVar8 = errorCode;\n    localVar9 = param2;\n    localVar10 = param3;\n    localVar11 = param4;\n    localVar12 = param5;\n    localVar13 = param6;\n    localVar14 = param7;\n    localVar15 = param8;\n  }\n  ptrLocalD0 = &stack0x00000008;\n  localVar1 = 8;\n  ptrLocalC8 = localBuffer;\n  localVar2 = 0x30;\n  localVar3 = param10;\n  localVar4 = param11;\n  localVar5 = param12;\n  localVar6 = param13;\n  localVar7 = param14;\n  print_error_message_001078c0(errorMessage,&localVar1);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_001052a0",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00105db0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "print_error_message_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "get_result_00105bb0",
                "undefined8": "int",
                "return": "result"
            },
            "code": "\nint get_result_00105bb0(void)\n\n{\n  result 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "get_result_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_application_00107640"
            },
            "code": "\nundefined8 initializeApplication_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_application_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_and_write_archive_00102e6f",
                "pcVar1": "archivePath",
                "in_RAX": "currentPath",
                "uVar2": "basenameResult",
                "uVar3": "errorMessage",
                "pFVar4": "archiveFile",
                "sVar5": "archivePathLength",
                "pcVar6": "pathIterator"
            },
            "code": "\nvoid extractAndWriteArchive_00102e6f(void)\n\n{\n  char *archivePath;\n  char *currentPath;\n  undefined8 basenameResult;\n  undefined8 errorMessage;\n  FILE *archiveFile;\n  size_t archivePathLength;\n  char *pathIterator;\n  \n  archivePath = DAT_0010d5e8;\n  do {\n    currentPath = currentPath + 1;\n    while (*currentPath != '/') {\n      if (*currentPath == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (archivePathLength = strlen(DAT_0010d5e8), archivePathLength != 0)) {\n          if (archivePath[archivePathLength - 1] == '/') {\n            DAT_0010d618 = (char *)concat(archivePath,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(archivePath,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        archiveFile = fopen(DAT_0010d618,\"w\");\n        if (archiveFile == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      pathIterator = currentPath;\n      if ((*currentPath == '.') && (pathIterator = currentPath + 1, currentPath[1] == '.')) {\n        pathIterator = currentPath + 2;\n        if ((currentPath[2] == '/') || (currentPath[2] == '\\0')) {\n          basenameResult = lbasename();\n          archivePath = DAT_0010d618;\n          errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          print_error_message_00107920(errorMessage,archivePath,basenameResult);\n          DAT_0010d618 = (char *)basenameResult;\n          process_file_00105a68();\n          return;\n        }\n      }\n      for (; (currentPath = pathIterator, *pathIterator != '\\0' && (*pathIterator != '/')); pathIterator = pathIterator + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00107920",
                "dcgettext",
                "FUN_00105a68",
                "FUN_00102e6f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_exit_status_0010315d"
            },
            "code": "\n\n\nvoid checkExitStatus_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_exit_status_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00102e57",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_file_info_00107890",
                "param_1": "file",
                "_stdout": "output"
            },
            "code": "\n\n\nvoid printFileInfo_00107890(undefined8 file)\n\n{\n  print_file_info_001079c0(output,file,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_file_info_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "pvVar1": "buffer",
                "pvVar2": "dynamicBuffer",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 inputParam1,undefined8 inputParam2,undefined8 inputParam3,undefined8 inputParam4)\n\n{\n  void *buffer;\n  void *dynamicBuffer;\n  undefined returnValue [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)print_error_message_and_exit_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    dynamicBuffer = malloc(0x4002);\n    *(void **)((long)buffer + 8) = dynamicBuffer;\n  } while (dynamicBuffer == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  initialize_file_001031cf(buffer,inputParam1);\n  returnValue._8_8_ = inputParam4;\n  returnValue._0_8_ = buffer;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_001033b0",
                "FUN_001031cf",
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_and_print_string_00103172",
                "param_1": "sourceString",
                "param_2": "targetString",
                "param_3": "condition",
                "param_4": "data",
                "uVar1": "sourceContent",
                "auVar2": "outputData"
            },
            "code": "\nundefined  [16]\nupdateAndPrintString_00103172(undefined8 *sourceString,undefined8 *targetString,char condition,undefined8 data)\n\n{\n  undefined8 sourceContent;\n  undefined outputData [16];\n  \n  if (condition != '\\0') {\n    printf(\"r - %s\\n\",*targetString);\n  }\n  sourceContent = *sourceString;\n  targetString[0x1e] = sourceContent;\n  outputData._1_7_ = (undefined7)((ulong)sourceContent >> 8);\n  outputData[0] = 1;\n  *sourceString = targetString;\n  outputData._8_8_ = data;\n  return outputData;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_and_print_string_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_matching_entry_00105870",
                "param_1": "entries",
                "param_2": "entryCount",
                "param_3": "searchKey",
                "iVar1": "comparisonResult",
                "iVar3": "searchMode",
                "uVar2": "defaultSearchKey"
            },
            "code": "\nlong * findMatchingEntry_00105870(long *entries,int entryCount,undefined8 searchKey)\n\n{\n  int comparisonResult;\n  undefined8 defaultSearchKey;\n  int searchMode;\n  \n  defaultSearchKey = DAT_0010d638;\n  searchMode = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultSearchKey = searchKey;\n    searchMode = entryCount;\n  }\n  if (searchMode == 3) {\n    for (; *entries != 0; entries = (long *)(*entries + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*entries != (undefined8 *)0x0; entries = (long *)(*entries + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*entries,defaultSearchKey);\n      if (comparisonResult == 0) {\n        if (searchMode != 2) {\n          return entries;\n        }\n        return (long *)(*entries + 0xf0);\n      }\n    }\n  }\n  return entries;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "find_matching_entry_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "ptrToData"
            },
            "code": "\nvoid extractDataFromBinary_001030ed(void)\n\n{\n  undefined8 *ptrToData;\n  \n  ptrToData = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)ptrToData + 0x1c);\n  DAT_0010d5b0 = (undefined *)ptrToData[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *ptrToData;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_00103e95",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "filePermissions",
                "param_4": "userIdentifier",
                "uVar1": "reverseResult",
                "piVar2": "errnoPointer",
                "pcVar3": "errorString",
                "uVar4": "translatedErrorMessage",
                "uVar5": "unlinkResult",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] copyAndDeleteFile_00105bc0(char *sourceFilePath,char *destinationFilePath,undefined4 filePermissions,undefined8 userIdentifier)\n\n{\n  uint reverseResult;\n  int *errnoPointer;\n  char *errorString;\n  undefined8 translatedErrorMessage;\n  ulong unlinkResult;\n  undefined result [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    unlinkResult = 0;\n  }\n  else {\n    reverseResult = reverse_and_save_file_00105c00(filePermissions);\n    unlinkResult = (ulong)reverseResult;\n    if (reverseResult != 0) {\n      errnoPointer = __errno_location();\n      errorString = strerror(*errnoPointer);\n      translatedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00107920(translatedErrorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  result._8_8_ = userIdentifier;\n  result._0_8_ = unlinkResult;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102f1e",
                "FUN_00105c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_and_extract_archived_files_00107650",
                "param_1": "inputFile",
                "lVar2": "fileSize",
                "uVar1": "result"
            },
            "code": "\nundefined8 checkAndExtractArchivedFiles_00107650(undefined8 inputFile)\n\n{\n  undefined8 result;\n  long fileSize;\n  \n  fileSize = get_file_size_001052a0();\n  if (fileSize < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    fileSize = extract_archived_files_00105300(inputFile,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    extract_and_write_archive_001058b0(fileSize);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00105300",
                "FUN_001052a0",
                "xexit",
                "FUN_0010284b",
                "FUN_001058b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_and_extract_archived_files_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_print_error_00102f1e",
                "unaff_RBP": "bufferSize",
                "unaff_R12": "filePath",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorCode",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined  [16] copyFileAndPrintError_00102f1e(void)\n\n{\n  int *errorCode;\n  undefined8 errorMessage;\n  ulong bufferSize;\n  char *filePath;\n  undefined auVar3 [16];\n  undefined8 returnAddress;\n  \n  errorCode = __errno_location();\n  strerror(*errorCode);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00107920(errorMessage);\n  unlink(filePath);\n  auVar3._0_8_ = bufferSize & 0xffffffff;\n  auVar3._8_8_ = returnAddress;\n  return auVar3;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "unlink",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_and_print_error_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_error_message_00102fd7",
                "piVar1": "errorNumber",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printErrorMessage_00102fd7(void)\n\n{\n  int *errorNumber;\n  undefined8 errorMessage;\n  \n  errorNumber = __errno_location();\n  strerror(*errorNumber);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_00107920(errorMessage);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_error_message_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_active_ar_00103ba8",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid checkActiveAR_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(standardOutput);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_active_ar_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105480",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00102cd9",
                "FUN_00105db0",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00103c60",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_0010285f",
                "FUN_00102fd7",
                "FUN_00102d8c",
                "FUN_001031a5",
                "FUN_00102e6f",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_0010336b",
                "FUN_001028ed",
                "FUN_001025a0",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_001075e0",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_001032a8",
                "FUN_0010266f",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_file_info_00103ddc",
                "param_1": "file"
            },
            "code": "\nvoid printFileInfo_00103ddc(undefined8 file)\n\n{\n  print_file_info_001079c0(DAT_0010d578,file,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_file_info_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "message",
                "param_2": "arguments"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010d660);\n  vfprintf(_stderr,message,arguments);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fflush",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107690",
                "FUN_00107920"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_information_001075e0",
                "param_1": "version",
                "pcVar1": "copyrightText"
            },
            "code": "\nvoid printVersionInformation_001075e0(undefined8 version)\n\n{\n  char *copyrightText;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightText = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightText);\n  copyrightText = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightText);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_version_information_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archive_entries_00105480",
                "param_1": "archive",
                "param_2": "entryProcessor",
                "param_3": "entryPaths",
                "param_4": "numEntries",
                "iVar1": "comparisonResult",
                "__format": "errorMessageFormat",
                "lVar2": "currentEntry",
                "plVar3": "fallbackEntry",
                "uVar4": "extractedSubstring",
                "plVar5": "entryList",
                "local_cc": "matchingCount",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processArchiveEntries_00105480(long archive,code *entryProcessor,undefined8 *entryPaths,int numEntries)\n\n{\n  int comparisonResult;\n  char *errorMessageFormat;\n  long currentEntry;\n  long *fallbackEntry;\n  undefined8 extractedSubstring;\n  long *entryList;\n  int matchingCount;\n  undefined buffer [152];\n  \n  currentEntry = *(long *)(archive + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*entryProcessor)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entryList = *(long **)(archive + 0xf0);\n      matchingCount = 0;\n      for (; entryList != (long *)0x0; entryList = (long *)entryList[0x1e]) {\n        if (*(int *)((long)entryList + 0xac) == 0) {\n          currentEntry = *entryList;\n          if (currentEntry == 0) {\n            fallbackEntry = (long *)entryList[0x1d];\n            if ((long *)entryList[0x1d] == (long *)0x0) {\n              fallbackEntry = entryList;\n            }\n            (**(code **)(fallbackEntry[1] + 0x1e8))(entryList,buffer);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (currentEntry = extract_substring_00105830(currentEntry,archive), currentEntry != 0)) {\n            extractedSubstring = extract_substring_00105830(*entryPaths,archive);\n            comparisonResult = filename_cmp(extractedSubstring,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((DAT_0010d634 == '\\0' || (matchingCount = matchingCount + 1, matchingCount == _DAT_0010d630)))) {\n              (*entryProcessor)();\n              *(undefined4 *)((long)entryList + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      extractedSubstring = *entryPaths;\n      errorMessageFormat = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,errorMessageFormat,extractedSubstring);\nLAB_0010553e:\n      entryPaths = entryPaths + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_in_archive_script_001031a5",
                "__format": "formatString",
                "uVar1": "updatedVar1"
            },
            "code": "\nvoid printSyntaxErrorInArchiveScript_001031a5(void)\n\n{\n  uint updatedVar1;\n  char *formatString;\n  \n  updatedVar1 = DAT_0010d554 + 1;\n  formatString = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(formatString,(ulong)updatedVar1);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_syntax_error_in_archive_script_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00102ba1",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_00102d2f",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105300",
                "FUN_00107690",
                "FUN_00107c10",
                "FUN_0010394a",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_00107650",
                "FUN_0010315d",
                "FUN_00102d2f",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00105c00",
                "FUN_00102f55",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "input_argument",
                "lVar1": "loop_counter",
                "lVar2": "new_size",
                "puVar3": "buffer_ptr",
                "bVar4": "is_zero",
                "__size": "total_size"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t total_size;\n  undefined8 input_argument;\n  long loop_counter;\n  long new_size;\n  undefined4 *buffer_ptr;\n  byte is_zero;\n  \n  is_zero = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return input_argument;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return input_argument;\n    }\n    new_size = DAT_0010d580 + 8;\n    total_size = new_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,total_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (total_size - 0x40));\n      DAT_0010d580 = new_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)is_zero * -2 + 1;\n      }\n      return input_argument;\n    }\n  }\n  print_error_message_and_exit_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return input_argument;\n}\n\n",
            "called": [
                "realloc",
                "FUN_001033b0",
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "inputParams",
                "__ptr": "allocatedMemory",
                "puVar2": "archivePtr",
                "iVar1": "result",
                "uVar3": "bytesRead",
                "uVar4": "errorString",
                "sVar5": "bytesWritten",
                "piVar6": "errorCodePtr",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorMessage",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "expectedBytes"
            },
            "code": "\n\n\nvoid extractAndPrintArchive_00103a78(undefined8 *inputParams)\n\n{\n  int result;\n  void *allocatedMemory;\n  undefined8 *archivePtr;\n  ulong bytesRead;\n  undefined8 errorString;\n  size_t bytesWritten;\n  int *errorCodePtr;\n  size_t remainingBytes;\n  char *errorMessage;\n  ulong totalBytesRead;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong expectedBytes;\n  \n  allocatedMemory = (void *)xmalloc(0x2000);\n  archivePtr = (undefined8 *)inputParams[0x1d];\n  if ((undefined8 *)inputParams[0x1d] == (undefined8 *)0x0) {\n    archivePtr = inputParams;\n  }\n  result = (**(code **)(archivePtr[1] + 0x1e8))(inputParams,stackBuffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*inputParams);\n    }\n    totalBytesRead = 0;\n    bfd_seek(inputParams,0,0);\n    goto LAB_00103afd;\n  }\n  inputParams = (undefined8 *)*inputParams;\n  errorMessage = \"internal stat error on %s\";\n  do {\n    errorString = dcgettext(0,errorMessage,5);\n    print_error_and_exit_00107690(errorString,inputParams);\n    expectedBytes = archiveSize;\n    do {\n      bytesWritten = fwrite(allocatedMemory,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errorCodePtr = __errno_location();\n        errorMessage = strerror(*errorCodePtr);\n        print_error_and_exit_00107690(\"stdout: %s\",errorMessage);\nLAB_00103b91:\n        free(allocatedMemory);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (expectedBytes <= totalBytesRead) goto LAB_00103b91;\n      remainingBytes = expectedBytes - totalBytesRead;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(allocatedMemory,remainingBytes,inputParams);\n    } while (remainingBytes == bytesRead);\n    errorMessage = \"%s is not a valid archive\";\n    inputParams = *(undefined8 **)inputParams[0x1d];\n    archiveSize = expectedBytes;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00107690",
                "bfd_seek",
                "xmalloc",
                "free",
                "strerror",
                "bfd_bread",
                "printf",
                "fwrite",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_0010285f",
                "FUN_001078c0",
                "FUN_00102d8c",
                "FUN_00105300",
                "FUN_0010336b",
                "FUN_001033b0",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "extract_and_write_archive_001058b0",
                "param_1": "input_files",
                "cVar1": "result",
                "uVar2": "flags",
                "iVar3": "temp_fd",
                "uVar4": "archive_format",
                "__format": "error_message",
                "__ptr": "file_path",
                "__stream": "file",
                "ppcVar5": "bfd_file",
                "uStack0000000000000020": "file_mode",
                "in_stack_00000028": "inode",
                "in_stack_00000038": "file_size",
                "local_3c": "error_code",
                "uStack_33": "file_type",
                "cStack_32": "is_setuid",
                "cStack_31": "is_setgid"
            },
            "code": "\n\n\nvoid extract_and_write_archive_001058b0(undefined8 *input_files)\n\n{\n  char result;\n  uint flags;\n  int temp_fd;\n  undefined8 archive_format;\n  char *error_message;\n  void *file_path;\n  FILE *file;\n  char **bfd_file;\n  uint file_mode;\n  uint inode;\n  undefined8 file_size;\n  int error_code [2];\n  undefined file_type;\n  char is_setuid;\n  char is_setgid;\n  \n  archive_format = input_files[0x1e];\n  error_code[0] = -1;\n  file_path = (void *)xstrdup(*input_files);\n  file = (FILE *)extract_file_path_001057a0(file_path,error_code);\n  temp_fd = error_code[0];\n  if (file != (FILE *)0x0) {\n    DAT_0010d618 = file;\n    bfd_file = (char **)bfd_fdopenw(file,*(undefined8 *)input_files[1],error_code[0]);\n    if (bfd_file != (char **)0x0) {\n      DAT_0010d5e0 = bfd_file;\n      bfd_set_format(bfd_file,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)bfd_file + 0x49) & 0xfffffff7;\n      *(char *)((long)bfd_file + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)bfd_file + 0x44) = *(uint *)((long)bfd_file + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)bfd_file + 0x44) = *(uint *)((long)bfd_file + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)input_files + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)bfd_file + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(bfd_file,archive_format);\n        if (result != '\\0') break;\n        flags = handle_error_and_exit_00107c10(file_path);\nLAB_00102d37:\n        *(uint *)((long)bfd_file + 0x44) = *(uint *)((long)bfd_file + 0x44) | 0x100000;\n      }\n      temp_fd = dup(temp_fd);\n      result = bfd_close(bfd_file);\n      if (result == '\\0') {\n        handle_error_and_exit_00107c10(file_path);\n        error_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,error_message);\n        flags = file_mode & 0xf000;\n        if (flags == 0x4000) {\n          file_type = 100;\n        }\n        else if (flags == 0xa000) {\n          file_type = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          file_type = 0x62;\n        }\n        else if (flags == 0x2000) {\n          file_type = 99;\n        }\n        else if (flags == 0xc000) {\n          file_type = 0x73;\n        }\n        else {\n          file_type = 0x70;\n          if (flags != 0x1000) {\n            file_type = 0x2d;\n          }\n        }\n        is_setuid = (-((_file_mode & 0x100) == 0) & 0xbbU) + 0x72;\n        is_setgid = (-((_file_mode & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(file,\"%s %ld/%ld %6lu %s \",&is_setuid,_file_mode >> 0x20,\n                (ulong)inode,file_size,&stack0xffffffffffffffd8,\n                _file_mode & 0xffffffff);\n        fputs(*bfd_file,file);\n        if ((char)input_files != '\\0') {\n          if ((*(byte *)((long)bfd_file + 0x49) & 0x10) == 0) {\n            if (bfd_file[0xb] != (char *)0x0) {\n              fprintf(file,\" 0x%lx\");\n            }\n          }\n          else if (bfd_file[0xc] != (char *)0x0) {\n            fprintf(file,\" 0x%lx\");\n          }\n        }\n        fputc(10,file);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(input_files);\n      temp_fd = copy_and_delete_file_00105bc0(file,file_path,temp_fd);\n      if (temp_fd == 0) {\n        free(file_path);\n        free(file);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(temp_fd);\n    handle_error_and_exit_00107c10(file_path);\n  }\n  archive_format = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  handle_error_and_exit_00107c10(archive_format);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "close",
                "FUN_001057a0",
                "xstrdup",
                "FUN_00107c10",
                "bfd_fdopenw",
                "bfd_set_format",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_00102bf5"
            },
            "code": "\nvoid cleanup_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "unlink_if_ordinary",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103ba8",
                "FUN_00102f96",
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "reset_data_00102943"
            },
            "code": "\nvoid resetData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "imported": false,
            "current_name": "reset_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_timestamps_00107c80",
                "param_1": "filePath",
                "param_2": "binaryData",
                "iVar1": "result",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4",
                "local_28": "timeSpec5",
                "uStack_24": "timeSpec6",
                "uStack_20": "timeSpec7",
                "uStack_1c": "timeSpec8"
            },
            "code": "\nvoid setFileTimestamps_00107c80(char *filePath,long binaryData)\n\n{\n  int result;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 timeSpec5;\n  undefined4 timeSpec6;\n  undefined4 timeSpec7;\n  undefined4 timeSpec8;\n  \n  timeSpec5 = *(undefined4 *)(binaryData + 0x58);\n  timeSpec6 = *(undefined4 *)(binaryData + 0x5c);\n  timeSpec7 = *(undefined4 *)(binaryData + 0x60);\n  timeSpec8 = *(undefined4 *)(binaryData + 100);\n  timeSpec1 = *(undefined4 *)(binaryData + 0x48);\n  timeSpec2 = *(undefined4 *)(binaryData + 0x4c);\n  timeSpec3 = *(undefined4 *)(binaryData + 0x50);\n  timeSpec4 = *(undefined4 *)(binaryData + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timeSpec1,0);\n  if (result != 0) {\n    errnoLocation = __errno_location();\n    errorMessage = strerror(*errnoLocation);\n    translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00107920(translatedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00102fd7",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_timestamps_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_file_name_00105a20",
                "param_1": "filePath",
                "pcVar1": "basePath",
                "pcVar2": "currentPath",
                "uVar3": "baseName",
                "uVar4": "errorMessage",
                "pFVar5": "filePtr",
                "sVar6": "length"
            },
            "code": "\nvoid extractFileName_00105a20(char *filePath)\n\n{\n  char *basePath;\n  char *currentPath;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *filePtr;\n  size_t length;\n  \n  basePath = DAT_0010d5e8;\n  DAT_0010d618 = filePath;\n  if (*filePath == '/') {\nLAB_00102e9a:\n    baseName = lbasename();\n    basePath = DAT_0010d618;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    print_error_message_00107920(errorMessage,basePath,baseName);\n    DAT_0010d618 = (char *)baseName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*filePath == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (length = strlen(DAT_0010d5e8), length != 0)) {\n        if (basePath[length - 1] == '/') {\n          DAT_0010d618 = (char *)concat(basePath,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(basePath,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      filePtr = fopen(DAT_0010d618,\"w\");\n      if (filePtr == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentPath = filePath;\n    if ((*filePath == '.') && (currentPath = filePath + 1, filePath[1] == '.')) {\n      currentPath = filePath + 2;\n      if ((filePath[2] == '/') || (filePath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentPath != '\\0' && (*currentPath != '/')); currentPath = currentPath + 1) {\n    }\n    for (; filePath = currentPath, *currentPath == '/'; currentPath = currentPath + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_file_name_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_001028ed",
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_00102f55",
                "piVar2": "ptrErrno",
                "unaff_R12D": "fileDescriptor",
                "iVar1": "errnoValue"
            },
            "code": "\nundefined8 closeFile_00102f55(void)\n\n{\n  int errnoValue;\n  int *ptrErrno;\n  int fileDescriptor;\n  \n  ptrErrno = __errno_location();\n  errnoValue = *ptrErrno;\n  close(fileDescriptor);\n  *ptrErrno = errnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_file_path_001057a0",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unknown_param",
                "param_4": "output_param",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "path_length",
                "lVar4": "current_index",
                "lVar5": "last_slash_index",
                "pcVar6": "new_file_path",
                "bVar7": "slash_exists",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] extract_file_path_001057a0(char *file_path,int *file_descriptor,undefined8 unknown_param,undefined8 output_param)\n\n{\n  int result;\n  char *last_slash;\n  long path_length;\n  long current_index;\n  long last_slash_index;\n  char *new_file_path;\n  byte slash_exists;\n  undefined return_value [16];\n  \n  slash_exists = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    last_slash_index = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(last_slash_index + 0xb);\n    path_length = last_slash_index + 1;\n    new_file_path = last_slash;\n    for (current_index = last_slash_index; current_index != 0; current_index = current_index + -1) {\n      *new_file_path = *file_path;\n      file_path = file_path + (ulong)slash_exists * -2 + 1;\n      new_file_path = new_file_path + (ulong)slash_exists * -2 + 1;\n    }\n    last_slash[last_slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    new_file_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    new_file_path = last_slash;\n  }\n  return_value._8_8_ = output_param;\n  return_value._0_8_ = new_file_path;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00102ba1",
                "strrchr",
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "extract_file_path_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "param_9": "permissionString",
                "param_19": "fileMode",
                "param_20": "fileSize",
                "param_22": "timestamp",
                "unaff_RBX": "fileData",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "isExecutable",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "userReadPermission",
                "cStack0000000000000017": "userWritePermission",
                "cStack0000000000000019": "groupReadPermission",
                "cStack000000000000001a": "groupWritePermission",
                "cStack000000000000001b": "otherReadPermission",
                "cStack000000000000001c": "otherWritePermission",
                "cStack000000000000001d": "setuidPermission",
                "cStack000000000000001e": "setgidPermission",
                "uStack000000000000006c": "inodeNumber"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *__format;\n  uint uVar1;\n  char **fileData;\n  FILE *outputFile;\n  char isExecutable;\n  undefined fileTypeChar;\n  char userReadPermission;\n  char userWritePermission;\n  char permissionString;\n  char groupReadPermission;\n  char groupWritePermission;\n  char otherReadPermission;\n  char otherWritePermission;\n  char setuidPermission;\n  char setgidPermission;\n  undefined uStack000000000000001f;\n  uint fileMode;\n  uint inodeNumber;\n  uint fileSize;\n  undefined8 timestamp;\n  \n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar1 = fileMode & 0xf000;\n  if (uVar1 == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (uVar1 != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  userReadPermission = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  userWritePermission = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  permissionString = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  groupReadPermission = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  groupWritePermission = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  otherReadPermission = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  otherWritePermission = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  setuidPermission = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  setgidPermission = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (permissionString == 'x') {\n      permissionString = 's';\n    }\n    else {\n      permissionString = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (otherReadPermission == 'x') {\n      otherReadPermission = 's';\n    }\n    else {\n      otherReadPermission = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (setgidPermission == 'x') {\n      setgidPermission = 't';\n    }\n    else {\n      setgidPermission = 'T';\n    }\n  }\n  uStack000000000000001f = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)inodeNumber,\n          (ulong)fileSize,timestamp,&stack0x00000020,(ulong)fileMode);\n  fputs(*fileData,outputFile);\n  if (isExecutable != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fputs",
                "sprintf",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00102c25",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105c00",
                "FUN_001031cf",
                "FUN_001025a0",
                "FUN_00102f55",
                "FUN_00102fd7",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "extract_archived_files_00105300",
                "param_1": "filename",
                "param_2": "result",
                "plVar1": "fileList",
                "pcVar2": "errorMessage",
                "bVar3": "isThinLibrary",
                "cVar4": "formatMatch",
                "iVar5": "status",
                "uVar6": "errMsg",
                "uVar7": "errMsg",
                "piVar8": "errorNum",
                "lVar9": "file",
                "puVar10": "extractedFiles",
                "local_b0": "matchingFormat",
                "local_a8": "fileStat"
            },
            "code": "\n\n\nundefined8 * extractArchivedFiles_00105300(char *filename,undefined8 *result)\n\n{\n  long *fileList;\n  char *errorMessage;\n  byte isThinLibrary;\n  char formatMatch;\n  int status;\n  undefined8 errMsg;\n  undefined8 errMsg;\n  int *errorNum;\n  long file;\n  undefined8 *extractedFiles;\n  undefined8 matchingFormat;\n  stat fileStat;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  status = stat(filename,&fileStat);\n  errorMessage = DAT_0010d618;\n  if (status == 0) goto LAB_001053be;\n  errorNum = __errno_location();\n  if (*errorNum == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(filename);\n      check_exit_status_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (result != (undefined8 *)0x0)) {\n      extractedFiles = (undefined8 *)extract_archived_files_00102710();\n      return extractedFiles;\n    }\n    result = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((result != (undefined8 *)0x0) && (formatMatch = bfd_set_format(result,2), formatMatch != '\\0')) &&\n       (formatMatch = bfd_close(result), formatMatch != '\\0')) {\n      errorMessage = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  handle_error_and_exit_00107c10(filename);\n  do {\n    isThinLibrary = *(byte *)((long)result + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        errMsg = *result;\n        errMsg = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit_00107690(errMsg,errMsg);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      errMsg = *result;\n      errMsg = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit_00107690(errMsg,errMsg);\nLAB_001027cb:\n      print_error_message_00107c20(filename);\n      status = bfd_get_error();\n      if (status == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(matchingFormat);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      fileList = result + 0x1e;\n      for (file = bfd_openr_next_archived_file(result,0); file != 0;\n          file = bfd_openr_next_archived_file(result,file)) {\n        *fileList = file;\n        fileList = (long *)(file + 0xf0);\n      }\n      *fileList = 0;\n      status = bfd_get_error();\n      if (status == 9) {\n        return result;\n      }\n      do {\n        handle_error_and_exit_00107c10(filename);\nLAB_00102826:\n        errMsg = dcgettext(0,\"creating %s\",5);\n        print_error_message_00107920(errMsg,filename);\n        errorMessage = filename;\nLAB_001053be:\n        DAT_0010d618 = errorMessage;\n        result = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (result == (undefined8 *)0x0);\n      formatMatch = bfd_check_format_matches(result,2,&matchingFormat);\n      if (formatMatch == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file = bfd_openr_next_archived_file(result,0), file == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103bd1",
                "bfd_set_error",
                "FUN_00102710",
                "FUN_00107c10",
                "bfd_close",
                "stat",
                "perror",
                "bfd_openw",
                "FUN_00107690",
                "bfd_openr_next_archived_file",
                "bfd_check_format_matches",
                "bfd_set_format",
                "FUN_00107c20",
                "bfd_openr",
                "xexit",
                "FUN_00107920",
                "fprintf",
                "dcgettext",
                "FUN_0010315d",
                "bfd_get_error",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "decompile_binary_function_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePointer1",
                "puVar2": "uintPointer",
                "bVar3": "byteVar3",
                "plVar4": "longPointer",
                "puVar5": "undefined8Pointer",
                "uVar6": "uintVar6",
                "uVar7": "uintVar7",
                "bVar8": "boolVar8",
                "bVar9": "boolVar9",
                "ppcVar10": "charPointerPointer",
                "piVar11": "intPointer",
                "puVar12": "undefinedPointer",
                "bVar13": "byteVar13",
                "cVar14": "charVar14",
                "iVar15": "intVar15",
                "uVar16": "uintVar16",
                "uVar17": "undefined4Var17",
                "pFVar18": "filePointer",
                "sVar19": "size_tVar19",
                "sVar20": "size_tVar20",
                "__ptr": "bytePointer",
                "plVar21": "longPointer21",
                "pFVar22": "filePointer22",
                "pcVar23": "charPointer23",
                "lVar24": "longVar24",
                "uVar25": "ulongVar25",
                "puVar26": "undefined8Pointer26",
                "uVar27": "undefined8Var27",
                "pFVar28": "filePointer28",
                "uVar30": "undefined8Var30",
                "lVar35": "longVar35",
                "uVar37": "uintVar37",
                "pcVar39": "charPointer39",
                "ppuVar36": "undefinedPointerPointer",
                "bVar47": "boolVar47",
                "bVar48": "byteVar48",
                "local_130": "filePointer130",
                "local_128": "filePointer128",
                "local_118": "bytePointer118",
                "local_110": "charPointerPointer110",
                "local_108": "size_tVar108",
                "local_100": "longVar100",
                "local_b0": "uintVarb0"
            },
            "code": "\n\n\nvoid decompile_binary_function_00105db0(uint argc,FILE *argv)\n\n{\n  byte *bytePointer1;\n  uint *uintPointer;\n  byte byteVar3;\n  long *longPointer;\n  undefined8 *undefined8Pointer;\n  undefined4 uintVar6;\n  undefined4 uintVar7;\n  bool boolVar8;\n  bool boolVar9;\n  char **charPointerPointer;\n  int *intPointer;\n  undefined *undefinedPointer;\n  byte byteVar13;\n  char charVar14;\n  int intVar15;\n  uint uintVar16;\n  undefined4 undefined4Var17;\n  FILE *filePointer;\n  size_t size_tVar19;\n  size_t size_tVar20;\n  byte *bytePointer;\n  long *longPointer21;\n  FILE *filePointer22;\n  char *charPointer23;\n  long longVar24;\n  ulong ulongVar25;\n  undefined8 *undefined8Pointer26;\n  undefined8 undefined8Var27;\n  FILE *filePointer28;\n  long **pplVar29;\n  undefined8 undefined8Var30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar33;\n  long lVar34;\n  long longVar35;\n  undefined **undefinedPointerPointer;\n  uint uintVar37;\n  char *unaff_RBP;\n  byte *pbyteVar38;\n  char *charPointer39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uVar44;\n  int iVar45;\n  char *pcVar46;\n  bool boolVar47;\n  byte byteVar48;\n  undefined8 filePointer130;\n  FILE *filePointer128;\n  byte *bytePointer118;\n  char **charPointerPointer110;\n  size_t size_tVar108;\n  long longVar100;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint uintVarb0;\n  \n  byteVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  filePointer = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  charPointerPointer110 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  filePointer128 = (FILE *)0x0;\n  filePointer22 = argv;\n  do {\n    uintVar16 = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)uintVar16;\n    filePointer130 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)filePointer22;\n    if (**(char **)(&filePointer22->_flags + (long)unaff_RBP * 2) == '@') {\n      uVar44 = (int)charPointerPointer110 - 1;\n      charPointerPointer110 = (char **)(ulong)uVar44;\n      if (uVar44 == 0) {\n        longPointer21 = *(long **)filePointer22;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,longPointer21);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      charPointer39 = *(char **)(&filePointer22->_flags + (long)unaff_RBP * 2) + 1;\n      intVar15 = stat(charPointer39,(stat *)local_c8);\n      if (-1 < intVar15) {\n        if ((uintVarb0 & 0xf000) == 0x4000) {\n          longPointer21 = *(long **)filePointer22;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePointer = fopen(charPointer39,\"r\");\n        if (filePointer != (FILE *)0x0) {\n          intVar15 = fseek(filePointer,0,2);\n          if (((intVar15 != -1) && (size_tVar19 = ftell(filePointer), size_tVar19 != 0xffffffffffffffff)) &&\n             (intVar15 = fseek(filePointer,0,0), intVar15 != -1)) {\n            bytePointer118 = (byte *)xmalloc(size_tVar19 + 1);\n            size_tVar20 = fread(bytePointer118,1,size_tVar19,filePointer);\n            if ((size_tVar19 == size_tVar20) || (intVar15 = ferror(filePointer), intVar15 == 0)) {\n              bytePointer118[size_tVar20] = 0;\n              byteVar13 = *bytePointer118;\n              pbyteVar33 = bytePointer118;\n              while( true ) {\n                if (byteVar13 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar13 * 2] & 0x40) == 0) break;\n                byteVar13 = pbyteVar33[1];\n                pbyteVar33 = pbyteVar33 + 1;\n              }\n              size_tVar19 = strlen((char *)bytePointer118);\n              bytePointer = (byte *)xmalloc(size_tVar19 + 1);\n              filePointer28 = (FILE *)0x0;\n              intVar15 = 0;\n              boolVar9 = false;\n              boolVar47 = false;\n              boolVar8 = false;\n              longVar100 = 0;\n              pbyteVar33 = bytePointer118;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar33 * 2] & 0x40) != 0) {\n                  pbyteVar33 = pbyteVar33 + 1;\n                }\n                if ((intVar15 == 0) || (intVar15 + -1 <= (int)longVar100)) {\n                  if (filePointer28 == (FILE *)0x0) {\n                    intVar15 = 8;\n                    filePointer28 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePointer28->_flags + longVar100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar15 = intVar15 * 2;\n                    filePointer28 = (FILE *)xrealloc(filePointer28,(long)intVar15 << 3);\n                    ppcVar31 = (char **)((long)&filePointer28->_flags + longVar100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePointer28->_flags + longVar100 * 8);\n                }\n                byteVar13 = *pbyteVar33;\n                pbyteVar38 = bytePointer;\n                while (byteVar13 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar13 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar9 | boolVar8 | boolVar47))) {\n                      boolVar8 = false;\n                      boolVar9 = false;\n                      boolVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar8) break;\n                    pbyteVar33 = pbyteVar33 + 1;\n                    *pbyteVar38 = byteVar13;\n                    pbyteVar38 = pbyteVar38 + 1;\n                    boolVar8 = false;\n                    byteVar13 = *pbyteVar33;\n                    if (byteVar13 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar13 == 0x5c) {\n                    boolVar8 = true;\n                  }\n                  else if (boolVar47) {\n                    if (byteVar13 == 0x27) {\n                      boolVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVar38 = byteVar13;\n                      pbyteVar38 = pbyteVar38 + 1;\n                    }\n                  }\n                  else if (boolVar9) {\n                    if (byteVar13 != 0x22) goto LAB_001061f1;\n                    boolVar9 = false;\n                  }\n                  else if (byteVar13 == 0x27) {\n                    boolVar47 = true;\n                  }\n                  else {\n                    if (byteVar13 != 0x22) goto LAB_001061f1;\n                    boolVar9 = true;\n                  }\n                  bytePointer1 = pbyteVar33 + 1;\n                  pbyteVar33 = pbyteVar33 + 1;\n                  byteVar13 = *bytePointer1;\n                }\nLAB_0010606f:\n                *pbyteVar38 = 0;\n                longPointer21 = (long *)xstrdup(bytePointer);\n                *ppcVar31 = (char *)longPointer21;\n                *(undefined8 *)(filePointer28->_shortbuf + longVar100 * 8 + -0x7b) = 0;\n                byteVar13 = *pbyteVar33;\n                byteVar3 = (&_sch_istable)[(ulong)byteVar13 * 2];\n                while ((byteVar3 & 0x40) != 0) {\n                  byteVar13 = pbyteVar33[1];\n                  pbyteVar33 = pbyteVar33 + 1;\n                  byteVar3 = (&_sch_istable)[(ulong)byteVar13 * 2];\n                }\n                longVar100 = longVar100 + 1;\n                if (byteVar13 == 0) {\n                  free(bytePointer);\n                  if (filePointer22 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(bytePointer118);\n          }\n          fclose(filePointer);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar16 + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d2d4 < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar16 = (uint)unaff_R12;\n        intVar15 = bfd_init();\n        charPointer39 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar15 != 0x118) goto LAB_00106803;\n        charPointer39 = \"x86_64-pc-linux-gnu\";\n        uintVar16 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPointer = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)uintVar16;\n        if ((char)uintVar16 != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = execute_reverse_functions_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPointer = PTR_DAT_0010d2e0;\n            intVar15 = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar15 + 1;\n            *(code **)(undefinedPointer + (long)intVar15 * 8 + 0x10) = cleanup_and_remove_file_00107730;\n          }\n          else {\n            undefined8Pointer26 = (undefined8 *)malloc(0x110);\n            if (undefined8Pointer26 != (undefined8 *)0x0) {\n              *undefined8Pointer26 = undefinedPointer;\n              *(undefined4 *)(undefined8Pointer26 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8Pointer26;\n              goto LAB_0010632b;\n            }\n          }\n          longVar24 = 1;\n          do {\n            longVar35 = longVar24;\n            intVar15 = (int)pcVar46;\n            if (intVar15 <= (int)longVar35) break;\n            charVar14 = initialize_application_00107640(*(undefined8 *)((int *)pcVar43 + longVar35 * 2));\n            longVar24 = longVar35 + 1;\n          } while (charVar14 != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + longVar35 * 8 + -8);\n          uVar44 = intVar15 - ((int)longVar35 + -1);\n          filePointer = (FILE *)(ulong)uVar44;\n          if (_DAT_0010d2d4 != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uintVar37 = 0;\n            while (intVar15 = getopt_long(filePointer,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar15 != -1)\n            {\n              if (intVar15 < 0x77) {\n                if (0x43 < intVar15) {\n                  switch(intVar15) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uintVar37 = uintVar16;\n                  }\n                }\n              }\n              else if (intVar15 == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uVar44 < 2) {\nLAB_00107125:\n              charPointer39 = (char *)0x0;\n              print_usage_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                print_usage_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                print_version_information_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                charPointer39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uintVar37 != '\\0') break;\n                uintVar16 = check_and_extract_archived_files_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar16);\n              }\n            }\n            while (longVar24 = get_file_size_001052a0(charPointer39), longVar24 < 1) {\n              uintVar16 = 1;\nLAB_001071c4:\n              intPointer = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPointer + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar16);\n              if ((int)uVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              charPointer39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)intPointer * 8 + -0x7b);\n            }\n            intVar15 = open(charPointer39,2,0);\n            if (intVar15 < 0) {\n              bfd_set_error(1);\n              handle_error_and_exit_00107c10(charPointer39);\nLAB_0010737f:\n              handle_error_and_exit_00107c10(charPointer39);\nLAB_00107387:\n              print_error_message_00107c20(charPointer39);\n              intVar15 = bfd_get_error();\n              if (intVar15 == 0xd) {\n                print_matching_formats_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(charPointer39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar14 = bfd_check_format_matches(unaff_RBP,2,local_c8);\n            if (charVar14 == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uintPointer = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *uintPointer = *uintPointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar14 = bfd_close(unaff_RBP);\n              if (charVar14 != '\\0') {\n                uintVar16 = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Var27 = dcgettext(0,\"%s: no archive map to update\",5);\n            print_error_and_exit_00107690(undefined8Var27,charPointer39);\nLAB_001073cc:\n            charPointer39 = (char *)lbasename(DAT_0010d660);\n            size_tVar19 = strlen(charPointer39);\n            if ((size_tVar19 < 6) ||\n               (intVar15 = filename_cmp(charPointer39 + (size_tVar19 - 6),\"ranlib\"), intVar15 != 0)) {\n              _DAT_0010d2d4 = 0;\n            }\n            else {\n              _DAT_0010d2d4 = 1;\n            }\n            goto LAB_001062d3;\n          }\n          undefinedPointerPointer = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePointer22 = (FILE *)unaff_RBP;\n          filePointer28 = filePointer;\n          if ((int)uVar44 < 2) goto switchD_00107462_caseD_1;\n          filePointer130 = (FILE *)CONCAT71(filePointer130._1_7_,(char)uintVar16);\nLAB_001063a3:\n          filePointer22 = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            size_tVar19 = strlen(*(char **)((long)pcVar46 + 8));\n            intVar15 = (int)size_tVar19 + (int)filePointer;\n            unaff_R12 = (FILE *)xmalloc((long)intVar15 * 8);\n            undefined4Var17 = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = undefined4Var17;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            filePointer128 = (FILE *)((long)pcVar46 + 0x10);\n            charPointerPointer110 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              bytePointer118 = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              charPointer39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = charPointer39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                charPointer39 = (char *)xstrdup(bytePointer118);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = charPointer39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  charPointer39 = (char *)xstrdup(bytePointer118);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = charPointer39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    charPointer39 = (char *)xstrdup(bytePointer118);\n                    unaff_R12->_IO_write_base = charPointer39;\n                    charVar14 = *(char *)((long)ppcVar31 + 4);\n                    charPointerPointer110 = ppcVar32;\n                    if (charVar14 != '\\0') {\n                      charPointer39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = charVar14;\n                        charPointer23 = (char *)xstrdup(bytePointer118);\n                        charPointer39 = charPointer39 + 1;\n                        *ppcVar31 = charPointer23;\n                        charVar14 = *charPointer39;\n                        ppcVar31 = ppcVar32;\n                        charPointerPointer110 = ppcVar32;\n                      } while (charVar14 != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar24 = (long)(int)filePointer;\n            intPointer = (int *)pcVar46 + longVar24 * 2;\n            if (filePointer128 < intPointer) {\n              ulongVar25 = longVar24 * 8 - 0x11;\n              if ((ulongVar25 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < intPointer) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < intPointer &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < intPointer)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < intPointer)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < intPointer)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  charPointerPointer = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < intPointer;\n                      ppcVar31 = ppcVar31 + (ulong)byteVar48 * -2 + 1) {\n                    *charPointerPointer = *ppcVar31;\n                    charPointerPointer = charPointerPointer + (ulong)byteVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4Var17 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                uintVar6 = *(undefined4 *)((long)pcVar46 + 0x18);\n                uintVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (ulongVar25 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefined4Var17;\n                *(undefined4 *)(ppcVar32 + 1) = uintVar6;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = uintVar7;\n                undefined4Var17 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                uintVar6 = *(undefined4 *)((long)pcVar46 + 0x28);\n                uintVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar25 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefined4Var17;\n                *(undefined4 *)(ppcVar32 + 3) = uintVar6;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = uintVar7;\n                if (ulongVar25 != 2) {\n                  undefined4Var17 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  uintVar6 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  uintVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefined4Var17;\n                  *(undefined4 *)(ppcVar32 + 5) = uintVar6;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = uintVar7;\n                  if (ulongVar25 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      charPointer39 = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      undefined4Var17 = *(undefined4 *)(charPointer39 + 4);\n                      uintVar6 = *(undefined4 *)(charPointer39 + 8);\n                      uintVar7 = *(undefined4 *)(charPointer39 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)charPointer39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefined4Var17;\n                      *(undefined4 *)(ppcVar31 + 1) = uintVar6;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = uintVar7;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulongVar25);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)filePointer128 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar24 + -2;\n            }\n            filePointer = (FILE *)(ulong)(intVar15 - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar16 = (uint)unaff_R12;\n            uVar44 = getopt_long((ulong)filePointer & 0xffffffff,pcVar46,filePointer22,undefinedPointerPointer,0);\n            unaff_RBP = (char *)filePointer22;\n            if (uVar44 == 0xffffffff) break;\n            if (((uVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uVar44 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePointer28 = (FILE *)pcVar46;\n            if (uVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            display_usage_0010342d(0);\n            pcVar46 = (char *)filePointer28;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uVar44 = DAT_0010d64c;\n          filePointer22 = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)filePointer <= _optind || (_optind < 1)))) {\n              uVar44 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVar16 = (int)filePointer - (_optind + -1);\n            filePointer = (FILE *)(ulong)uintVar16;\n            _optind = 0;\n            if (1 < (int)uintVar16) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)filePointer130 & 0xff);\n          uintVar16 = (uint)unaff_R12;\n          undefinedPointerPointer = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              print_version_information_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePointer28 = (FILE *)pcVar46;\n              if (*undefinedPointerPointer == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uVar44 == 3) goto LAB_00106abc;\n                  if (uVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  charPointer39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 == 3) || (uVar44 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefined4Var17 = check_and_extract_archived_files_00107650();\n                    \n                  xexit(undefined4Var17);\n                }\nLAB_00106abc:\n                if (uVar44 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  charPointer39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*undefinedPointerPointer;\n                unaff_RBP = (char *)0x1;\n                charPointer39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                charPointer39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar15 = (int)unaff_RBP;\n                  if (*(char **)((long)undefinedPointerPointer + (long)intVar15 * 2 * 4) == (char *)0x0) {\n                    undefined8Var27 = dcgettext(0,\"`N\\' missing value.\",5);\n                    print_error_and_exit_00107690(undefined8Var27);\n                    uVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uVar44 == 2) {\nLAB_0010704f:\n                      charPointer39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(intVar15 + 1);\n                  longVar24 = strtol(*(char **)((long)undefinedPointerPointer + (long)intVar15 * 2 * 4),(char **)0x0,10)\n                  ;\n                  charPointer39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)longVar24;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar24 = (long)(int)unaff_RBP;\n              filePointer22 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)undefinedPointerPointer + longVar24 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePointer22 = (FILE *)((long)undefinedPointerPointer + (longVar24 + 1) * 2 * 4);\n              if (*(FILE **)filePointer22 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePointer22 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)undefinedPointerPointer + (longVar24 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)undefinedPointerPointer + (longVar24 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)undefinedPointerPointer + (longVar24 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)undefinedPointerPointer + (longVar24 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePointer = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePointer;\n                  filePointer = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)undefinedPointerPointer + longVar24 * 2 * 4) + (long)filePointer * 2) !=\n                         0);\n              }\n              undefined8Pointer26 = (undefined8 *)extract_archived_files_00105300();\n              filePointer = filePointer22;\n              if (DAT_0010d64c == 5) {\n                charPointer39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8Pointer26 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)filePointer22;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  process_archive_entries_00105480(undefined8Pointer26,extract_and_save_file_from_archive_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                size_tVar19 = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(size_tVar19 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8Pointer26);\n                if (DAT_0010d620 == 0) {\n                  charPointer39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar24 = bfd_find_target(\"binary\",DAT_0010d620);\n                  charPointer39 = \"Cannot set libdeps record type to binary.\";\n                  if (longVar24 != 0) {\n                    charVar14 = bfd_set_format(DAT_0010d620,1,5);\n                    charPointer39 = \"Cannot set libdeps object format.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    charVar14 = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    charPointer39 = \"Cannot make libdeps object writable.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    filePointer28 = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    charPointer39 = \"Cannot write libdeps record.\";\n                    if (filePointer28 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar14 = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    charPointer39 = \"Cannot make libdeps object readable.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    longVar24 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    charPointer39 = \"Cannot reset libdeps record type.\";\n                    if (longVar24 == 0) goto LAB_00106803;\n                    intVar15 = (int)pcVar43;\n                    filePointer130 = (FILE *)((long)(intVar15 + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(filePointer130,\"Cannot reset libdeps record type.\");\n                    if (intVar15 == 0) {\n                      longVar24 = 0;\n                    }\n                    else {\n                      undefined4Var17 = *(undefined4 *)&filePointer22->field_0x4;\n                      *(int *)unaff_RBP = filePointer22->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = undefined4Var17;\n                      longVar24 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = filePointer130[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePointer22->_flags;\n                        filePointer22 = (FILE *)((long)filePointer22 + (ulong)byteVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byteVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + longVar24) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar15 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)filePointer130) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePointer22 = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)filePointer22;\n                if (filePointer22 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePointer = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)filePointer22;\n                if ((filePointer22 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  process_binary_data_00105570(undefined8Pointer26,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)filePointer22;\nswitchD_00106ed8_caseD_3:\n                process_archive_entries_00105480(undefined8Pointer26,print_file_info_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)filePointer22;\nswitchD_00106ed8_caseD_4:\n                process_archive_entries_00105480(undefined8Pointer26,extract_and_print_archive_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                charPointer39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (filePointer22 == (FILE *)0x0) break;\nLAB_00106afb:\n                filePointer = (FILE *)(undefined8Pointer26 + 0x1e);\n                do {\n                  unaff_R12 = filePointer;\n                  if (*(FILE **)filePointer22 == (FILE *)0x0) {\nLAB_00106b9f:\n                    extract_and_write_archive_001058b0(undefined8Pointer26);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPointer21 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)filePointer22;\n                    if (longPointer21 == (long *)0x0) {\n                      undefined8Var27 = *undefined8Pointer26;\n                      undefined8Var30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      print_error_and_exit_00107690(undefined8Var30,pcVar46,undefined8Var27);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar24 = *longPointer21;\n                    undefined8Var27 = extract_substring_00105830(pcVar46,undefined8Pointer26);\n                    intVar15 = filename_cmp(undefined8Var27,longVar24);\n                    if (intVar15 == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)longPointer21[0x1e];\n                  pplVar29 = (long **)find_matching_entry_00105870(filePointer,3,0);\n                  boolVar47 = DAT_0010d60c != 0;\n                  longPointer = *pplVar29;\n                  *pplVar29 = longPointer21;\n                  longPointer21[0x1e] = (long)longPointer;\n                  if (boolVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)filePointer22);\n                  }\n                  filePointer22 = (FILE *)&filePointer22->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            display_usage_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar15 = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar15);\n          extract_and_check_archives_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4Var17 = bfd_get_error();\n        filePointer22 = (FILE *)bfd_errmsg(undefined4Var17);\n        undefined8Var27 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar15 = print_error_and_exit_00107690(undefined8Var27,\"x86_64-pc-linux-gnu\",filePointer22);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          undefinedPointerPointer = (undefined **)charPointer39;\n          filePointer28 = (FILE *)pcVar46;\n          switch(intVar15) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar16 = (uint)unaff_R12;\n            charPointer39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)filePointer22;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        charPointer39 = \"two different operation options specified\";\n        unaff_RBP = (char *)filePointer22;\nLAB_00106803:\n        undefined8Var27 = dcgettext(0,charPointer39,5);\n        print_error_and_exit_00107690(undefined8Var27);\nLAB_00106814:\n        intVar15 = (int)pcVar46;\n        filePointer28 = (FILE *)xmalloc(8);\n        *(long **)filePointer28 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar15 = 0;\n          }\n          else {\n            longVar24 = 1;\n            do {\n              intVar15 = (int)longVar24;\n              longVar35 = longVar24 * 2;\n              longVar24 = longVar24 + 1;\n            } while (*(long *)((int *)pcVar43 + longVar35) != 0);\n          }\n          filePointer22 = (FILE *)xmalloc((long)(intVar15 + 1) << 3);\n          longPointer21 = *(long **)pcVar43;\n          longVar24 = 0;\n          while (longPointer21 != (long *)0x0) {\n            undefined8Var27 = xstrdup();\n            *(undefined8 *)((long)&filePointer22->_flags + longVar24) = undefined8Var27;\n            longPointer21 = *(long **)((char *)((long)pcVar43 + 0x83) + longVar24 + -0x7b);\n            longVar24 = longVar24 + 8;\n          }\n          *(undefined8 *)((long)&filePointer22->_flags + longVar24) = 0;\nLAB_0010610a:\n          intVar15 = (int)pcVar46;\n          pcVar43 = (char *)filePointer22;\n          if (*(long **)filePointer28 == (long *)0x0) goto LAB_00106a80;\n          longVar24 = 0;\n          do {\n            lVar34 = longVar24 + 1;\n            longVar35 = longVar24 * 8;\n            longVar24 = lVar34;\n          } while (*(long *)(filePointer28->_shortbuf + longVar35 + -0x7b) != 0);\n          size_tVar108 = lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 = 0;\n          size_tVar108 = 0;\n        }\n        longVar24 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)pcVar43 + longVar24));\n        filePointer22 = (FILE *)xrealloc(pcVar43,(lVar34 + 1 + (long)intVar15) * 8);\n        uVar44 = intVar15 + -1 + (int)lVar34;\n        pcVar46 = (char *)(ulong)uVar44;\n        memmove(&filePointer22->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&filePointer22->_IO_read_ptr + (long)filePointer130),\n                (long)(int)(intVar15 - uintVar16) << 3);\n        memcpy((void *)((long)&filePointer130->_flags + (long)&filePointer22->_flags),filePointer28,size_tVar108);\n        free(filePointer28);\n        free(bytePointer118);\n        fclose(filePointer);\n        uintVar16 = (int)filePointer128 + 1;\n        unaff_R12 = filePointer130;\n        pcVar43 = (char *)filePointer22;\n        filePointer130 = filePointer28;\n        if ((int)uintVar16 < (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar16 = uintVar16 + 1;\n    filePointer128 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar16;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar15 = getopt_long((ulong)filePointer & 0xffffffff,pcVar46,filePointer22,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)filePointer22;\n  if (intVar15 == -1) goto LAB_00106680;\n  if ((0x14 < intVar15 - 100U) || ((0x117201UL >> ((byte)(intVar15 - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Var27 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  print_error_message_00107920(undefined8Var27);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)filePointer != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  iVar45 = 0;\n  intVar15 = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  undefined8Pointer = undefined8Pointer26;\n  if (intVar15 == 0) {\n    *(byte *)((long)undefined8Pointer26 + 0x49) = *(byte *)((long)undefined8Pointer26 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      longPointer21 = undefined8Pointer + 0x1e;\n      if ((undefined8 *)*longPointer21 == (undefined8 *)0x0) break;\n      undefined8Var27 = *(undefined8 *)*longPointer21;\n      undefined8Var30 = extract_substring_00105830(*(FILE **)unaff_RBP,undefined8Pointer26);\n      intVar15 = filename_cmp(undefined8Var30,undefined8Var27);\n      if ((intVar15 == 0) &&\n         ((DAT_0010d634 == '\\0' || (iVar45 = iVar45 + 1, iVar45 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *longPointer21 = *(long *)(*longPointer21 + 0xf0);\n        filePointer = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8Pointer = (undefined8 *)*longPointer21;\n    }\n    if (DAT_0010d60c != 0) {\n      filePointer22 = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,filePointer22);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "fseek",
                "ftell",
                "fread",
                "memcpy",
                "FUN_00107cc0",
                "bfd_make_writable",
                "bfd_check_format_matches",
                "free",
                "setlocale",
                "FUN_00105830",
                "memmove",
                "FUN_00107c20",
                "bfd_make_readable",
                "FUN_00107640",
                "xexit",
                "FUN_0010394a",
                "FUN_00107890",
                "textdomain",
                "printf",
                "FUN_00103a78",
                "bfd_find_target",
                "isatty",
                "FUN_001052a0",
                "open",
                "bindtextdomain",
                "FUN_00103e95",
                "bfd_close",
                "stat",
                "strcmp",
                "bfd_create",
                "malloc",
                "bfd_plugin_set_program_name",
                "getopt_long",
                "bfd_set_format",
                "strtol",
                "xrealloc",
                "lbasename",
                "FUN_00107920",
                "FUN_0010342d",
                "fprintf",
                "bfd_set_error_program_name",
                "dcgettext",
                "bfd_get_error",
                "FUN_00103bd1",
                "filename_cmp",
                "bfd_fdopenr",
                "FUN_00105870",
                "bfd_set_error",
                "FUN_00107740",
                "bfd_set_default_target",
                "bfd_errmsg",
                "xmalloc_set_program_name",
                "FUN_00105570",
                "FUN_00105300",
                "bfd_init",
                "ferror",
                "fileno",
                "fopen",
                "FUN_001058b0",
                "FUN_00105480",
                "bfd_bwrite",
                "FUN_00107c10",
                "FUN_00107730",
                "FUN_00107650",
                "bfd_plugin_set_plugin",
                "FUN_00107690",
                "xstrdup",
                "FUN_001075e0",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "decompile_binary_function_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatList",
                "__format": "messageFormat",
                "plVar2": "currentFormat",
                "uVar1": "dataValue"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatList)\n\n{\n  undefined8 dataValue;\n  char *messageFormat;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  dataValue = DAT_0010d660;\n  messageFormat = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,messageFormat,dataValue);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "handle_error_and_exit_00107c10",
                "print_error_message_00107c20": "print_error_message",
                "xexit": "exit_code"
            },
            "code": "\nvoid handle_error_and_exit_00107c10(void)\n\n{\n  print_error_message();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "handle_error_and_exit_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "extract_archived_files_00102710",
                "unaff_RBP": "result",
                "in_stack_00000008": "archive_path",
                "plVar1": "file_address_ptr",
                "cVar2": "format_match",
                "bVar3": "is_thin",
                "iVar4": "bfd_error",
                "lVar5": "file_address"
            },
            "code": "\n\n\nundefined8 * extract_archived_files_00102710(void)\n\n{\n  long *file_address_ptr;\n  char format_match;\n  byte is_thin;\n  int bfd_error;\n  long file_address;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined8 *puVar8;\n  undefined8 result;\n  undefined8 archive_path;\n  \n  file_address = bfd_openr();\n  if (file_address != 0) {\n    format_match = bfd_check_format(file_address,1);\n    if (format_match != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file_address + 8);\n    }\n    bfd_close(file_address);\n  }\n  puVar8 = (undefined8 *)bfd_openw();\n  if (((puVar8 != (undefined8 *)0x0) && (format_match = bfd_set_format(puVar8,2), format_match != '\\0')) &&\n     (format_match = bfd_close(puVar8), format_match != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  handle_error_and_exit_00107c10();\n  do {\n    is_thin = *(byte *)((long)puVar8 + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin != 0) {\n        uVar7 = *puVar8;\n        uVar6 = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit_00107690(uVar6,uVar7);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin == 0) {\n      uVar7 = *puVar8;\n      uVar6 = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit_00107690(uVar6,uVar7);\nLAB_001027cb:\n      print_error_message_00107c20();\n      bfd_error = bfd_get_error();\n      if (bfd_error == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(archive_path);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      file_address_ptr = puVar8 + 0x1e;\n      for (file_address = bfd_openr_next_archived_file(puVar8,0); file_address != 0;\n          file_address = bfd_openr_next_archived_file(puVar8,file_address)) {\n        *file_address_ptr = file_address;\n        file_address_ptr = (long *)(file_address + 0xf0);\n      }\n      *file_address_ptr = 0;\n      bfd_error = bfd_get_error();\n      if (bfd_error == 9) {\n        return puVar8;\n      }\n      do {\n        handle_error_and_exit_00107c10();\nLAB_00102826:\n        uVar7 = dcgettext(0,\"creating %s\",5);\n        print_error_message_00107920(uVar7);\nLAB_001053b7:\n        DAT_0010d618 = result;\n        puVar8 = (undefined8 *)bfd_openr();\n      } while (puVar8 == (undefined8 *)0x0);\n      format_match = bfd_check_format_matches(puVar8,2,&stack0x00000008);\n      if (format_match == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_address = bfd_openr_next_archived_file(puVar8,0), file_address == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "extract_and_check_archives_00103e95",
                "ppcVar29": "filePaths",
                "local_828": "currentBuffer",
                "local_820": "bufferStart",
                "local_818": "newBufferSize",
                "local_810": "newFileBuffers",
                "lVar18": "index",
                "local_800": "fileCount",
                "ppcVar38": "newFilePaths",
                "lVar21": "bufferSize",
                "lVar31": "newBufferSize",
                "fread": "readFromFile",
                "fwrite": "writeToFile",
                "malloc": "allocateMemory",
                "free": "freeMemory",
                "stat": "getFileStats",
                "fprintf": "printToFile",
                "fopen": "openFile",
                "printf": "printToConsole",
                "fclose": "closeFile",
                "getc": "getCharacter",
                "ferror": "getFileError",
                "realloc": "reallocateMemory",
                "create_buffer_001033d6": "createBuffer",
                "filename_cmp": "compareFileNames",
                "extract_data_from_binary_001030ed": "extractDataFromBinary",
                "print_syntax_error_in_archive_script_001031a5": "printSyntaxError",
                "print_error_message_and_exit_001033b0": "printErrorMessageAndExit",
                "copy_and_delete_file_00105bc0": "copyAndDeleteFile",
                "print_file_info_00103ddc": "printFileInfo",
                "extract_and_save_file_from_archive_00107740": "extractAndSaveFile",
                "check_active_ar_00103ba8": "checkActiveArchive",
                "copy_data_0010312d": "copyData"
            },
            "code": "\n\n\nvoid extract_and_check_archives_00103e95(void)\n\n{\n  long **pplVar1;\n  char cVar2;\n  FILE **ppFVar3;\n  FILE *pFVar4;\n  long *plVar5;\n  undefined8 uVar6;\n  byte *pbVar7;\n  int iVar8;\n  char *pcVar10;\n  undefined8 uVar11;\n  int iVar9;\n  long *plVar12;\n  size_t sVar13;\n  void *pvVar14;\n  char *pcVar15;\n  char *pcVar16;\n  long lVar17;\n  long index;\n  ulong uVar19;\n  uint uVar20;\n  long bufferSize;\n  undefined8 *puVar22;\n  undefined8 *puVar23;\n  uint uVar24;\n  int iVar25;\n  ulong uVar26;\n  char **ppcVar27;\n  bool bVar28;\n  char **filePaths;\n  byte bVar30;\n  long newBufferSize;\n  byte *pbVar32;\n  byte *pbVar33;\n  int *piVar34;\n  byte *pbVar35;\n  uint uVar36;\n  int iVar37;\n  char **newFilePaths;\n  byte bVar39;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *currentBuffer;\n  char *bufferStart;\n  long newBufferSize;\n  char **newFileBuffers;\n  int fileCount;\n  uint local_7fc;\n  byte *local_7f8;\n  stat local_7d0;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  bVar39 = 0;\n  index = 0;\n  DAT_0010d550 = -2;\n  filePaths = local_678;\n  fileCount = 0;\n  currentBuffer = local_740;\n  newBufferSize = 200;\n  bufferStart = currentBuffer;\n  newFileBuffers = filePaths;\nLAB_00103ee9:\n  *currentBuffer = (char)index;\n  if (bufferStart + newBufferSize + -1 <= currentBuffer) {\n    bufferSize = (long)currentBuffer - (long)bufferStart;\n    lVar17 = bufferSize + 1;\n    if (newBufferSize < 10000) {\n      newBufferSize = newBufferSize * 2;\n      newBufferSize = 10000;\n      if (newBufferSize < 0x2711) {\n        newBufferSize = newBufferSize;\n      }\n      pcVar10 = (char *)malloc(newBufferSize * 9 + 7);\n      if (pcVar10 != (char *)0x0) {\n        newBufferSize = lVar17 * 8;\n        pcVar15 = bufferStart;\n        pcVar16 = pcVar10;\n        for (; lVar17 != 0; lVar17 = lVar17 + -1) {\n          *pcVar16 = *pcVar15;\n          pcVar15 = pcVar15 + (ulong)bVar39 * -2 + 1;\n          pcVar16 = pcVar16 + (ulong)bVar39 * -2 + 1;\n        }\n        newFilePaths = (char **)(pcVar10 + newBufferSize);\n        filePaths = newFilePaths;\n        for (; newBufferSize != 0; newBufferSize = newBufferSize + -1) {\n          *(undefined *)filePaths = *(undefined *)newFileBuffers;\n          newFileBuffers = (char **)((long)newFileBuffers + (ulong)bVar39 * -2 + 1);\n          filePaths = (char **)((long)filePaths + (ulong)bVar39 * -2 + 1);\n        }\n        if (bufferStart != local_740) {\n          freeMemory(bufferStart);\n        }\n        currentBuffer = pcVar10 + bufferSize;\n        filePaths = newFilePaths + bufferSize;\n        bufferStart = pcVar10;\n        newFileBuffers = newFilePaths;\n        if (pcVar10 + newBufferSize + -1 <= currentBuffer) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    printSyntaxError();\nLAB_0010524c:\n    pcVar10 = bufferStart;\n    if (bufferStart == local_740) {\n      return;\n    }\nLAB_00105265:\n    freeMemory(pcVar10);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)index;\n  if (iVar37 == 3) goto LAB_0010524c;\n  cVar2 = (&DAT_0010a200)[iVar37];\n  if (cVar2 != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          ensure_buffer_stack_00103df9();\n          puVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          uVar11 = createBuffer(DAT_0010d590);\n          *puVar22 = uVar11;\n        }\n        extractDataFromBinary();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pbVar32 = DAT_0010d5b0;\n      pbVar35 = DAT_0010d5b0;\n      uVar20 = DAT_0010d5d0;\nLAB_001040d4:\n      uVar19 = (ulong)uVar20;\n      uVar26 = (ulong)local_7fc;\n      bVar28 = false;\n      do {\n        bVar30 = (&DAT_0010ab00)[*pbVar35];\n        if (*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2) != 0) {\n          bVar28 = true;\n          uVar26 = uVar19 & 0xffffffff;\n          local_7f8 = pbVar35;\n        }\n        while( true ) {\n          iVar8 = (int)uVar19;\n          index = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + (uint)bVar30);\n          if (iVar8 == *(short *)(&DAT_0010a440 + index * 2)) break;\n          uVar19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)iVar8 * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)iVar8 * 2)) {\n            bVar30 = (&DAT_0010a7c0)[(int)(uint)bVar30];\n          }\n        }\n        pbVar35 = pbVar35 + 1;\n        uVar19 = (ulong)*(short *)(&DAT_0010a240 + index * 2);\n      } while (*(short *)(&DAT_0010a640 + uVar19 * 2) != 0xc2);\n      local_7fc = (uint)uVar26;\n      pbVar33 = pbVar32;\n      if (bVar28) {\n        DAT_0010d5b8 = local_7f8;\n        DAT_0010d5c0 = local_7fc;\n      }\nLAB_0010419f:\n      iVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2);\n      if (iVar8 == 0) {\n        iVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pbVar35 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pbVar35 - (int)pbVar33;\n      DAT_0010d588 = *pbVar35;\n      DAT_0010d5b0 = pbVar35;\n      DAT_0010d5c8 = pbVar33;\n      *pbVar35 = 0;\nLAB_001041f0:\n      pbVar32 = DAT_0010d5c8;\n      index = DAT_0010d5a0;\n      switch(iVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        printErrorMessageAndExit(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      index = (long)iVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        iVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          iVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uVar20 = cVar2 + iVar37;\n    if ((0x22 < uVar20) || (iVar37 != (char)(&DAT_0010a0a0)[(int)uVar20])) goto LAB_001049db;\n    cVar2 = (&DAT_0010a060)[(int)uVar20];\n    index = (long)cVar2;\n    if (cVar2 < '\\x01') {\n      iVar37 = -(int)cVar2;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    fileCount = fileCount + -1 + (uint)(fileCount == 0);\n    filePaths = filePaths + 1;\n    *filePaths = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&DAT_0010a020)[(int)index];\n  if ((&DAT_0010a020)[(int)index] == '\\0') {\n    if (fileCount == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      printSyntaxError();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[index] != -0xe) &&\n             (uVar20 = (int)(char)(&DAT_0010a200)[index] + 1, uVar20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uVar20] == '\\x01')) &&\n           (index = (long)(char)(&DAT_0010a060)[(int)uVar20],\n           '\\0' < (char)(&DAT_0010a060)[(int)uVar20])) goto LAB_00105227;\n        if (bufferStart == currentBuffer) goto LAB_0010524c;\n        currentBuffer = currentBuffer + -1;\n        filePaths = filePaths + -1;\n        index = (long)*currentBuffer;\n      } while( true );\n    }\n    if (fileCount != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  uVar11 = DAT_0010d660;\n  ppcVar27 = DAT_0010d558;\n  cVar2 = (&DAT_00109fe0)[iVar37];\n  newFilePaths = (char **)filePaths[1 - cVar2];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    checkActiveArchive();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    printSyntaxError();\n    break;\n  case 0x17:\n    puVar22 = (undefined8 *)*filePaths;\n    if (DAT_0010d558 == (char **)0x0) {\n      pcVar10 = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pcVar10 = (char *)dcgettext(0,pcVar10,5);\n      fprintf(_stderr,pcVar10,uVar11);\n      check_exit_status_0010315d();\n    }\n    else {\n      for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n        for (puVar23 = (undefined8 *)DAT_0010d558[0x1f]; puVar23 != (undefined8 *)0x0;\n            puVar23 = (undefined8 *)puVar23[0x1e]) {\n          iVar8 = filename_cmp(*puVar23);\n          if (iVar8 == 0) {\n            extractAndSaveFile();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*puVar22,0);\n        uVar6 = DAT_0010d660;\n        uVar11 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar6,uVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    puVar22 = (undefined8 *)*filePaths;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      pcVar10 = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      bVar28 = false;\n      ppcVar27 = DAT_0010d558 + 0x1f;\n      for (pcVar10 = DAT_0010d558[0x1f]; pcVar10 != (char *)0x0;\n          pcVar10 = *(char **)(pcVar10 + 0xf0)) {\n        iVar8 = filename_cmp();\n        if (iVar8 == 0) {\n          pcVar15 = (char *)bfd_openr(*puVar22,0);\n          uVar11 = DAT_0010d660;\n          if (pcVar15 == (char *)0x0) {\n            uVar6 = *puVar22;\n            pcVar15 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pcVar15,uVar11,uVar6);\n            check_exit_status_0010315d();\n          }\n          else {\n            *ppcVar27 = pcVar15;\n            bVar28 = true;\n            *(undefined8 *)(pcVar15 + 0xf0) = *(undefined8 *)(pcVar10 + 0xf0);\n          }\n        }\n        else {\n          ppcVar27 = (char **)(pcVar10 + 0xf0);\n        }\n      }\n      if (!bVar28) {\n        pcVar10 = (char *)bfd_openr(*puVar22,0);\n        uVar6 = DAT_0010d660;\n        uVar11 = *puVar22;\n        pcVar15 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar15,uVar6,uVar11);\n        uVar11 = DAT_0010d660;\n        if (pcVar10 == (char *)0x0) {\n          uVar6 = *puVar22;\n          pcVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pcVar10,uVar11,uVar6);\n          check_exit_status_0010315d();\n        }\n        else {\n          *ppcVar27 = pcVar10;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    puVar22 = (undefined8 *)*filePaths;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      bVar28 = false;\n      ppcVar27 = DAT_0010d558 + 0x1f;\n      for (puVar23 = (undefined8 *)DAT_0010d558[0x1f]; uVar11 = DAT_0010d660,\n          puVar23 != (undefined8 *)0x0; puVar23 = (undefined8 *)puVar23[0x1e]) {\n        iVar8 = filename_cmp(*puVar23,*puVar22);\n        if (iVar8 == 0) {\n          bVar28 = true;\n          *ppcVar27 = (char *)puVar23[0x1e];\n        }\n        else {\n          ppcVar27 = (char **)(puVar23 + 0x1e);\n        }\n      }\n      if (!bVar28) {\n        uVar6 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar11,uVar6);\n        check_exit_status_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    puVar22 = (undefined8 *)*filePaths;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      pcVar10 = (char *)bfd_openr(*puVar22,\"plugin\");\n      uVar11 = DAT_0010d660;\n      ppcVar27 = DAT_0010d558;\n      if (pcVar10 == (char *)0x0) {\n        uVar6 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar11,uVar6);\n        check_exit_status_0010315d();\n      }\n      else {\n        *(char **)(pcVar10 + 0xf0) = DAT_0010d558[0x1f];\n        ppcVar27[0x1f] = pcVar10;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    pcVar10 = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    pcVar15 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pcVar15,pcVar10);\n    for (pcVar10 = DAT_0010d558[0x1f]; pcVar10 != (char *)0x0; pcVar10 = *(char **)(pcVar10 + 0xf0))\n    {\n      printFileInfo(pcVar10,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(ppcVar27);\n    pcVar10 = DAT_0010d570;\n    iVar8 = stat(DAT_0010d570,&local_7d0);\n    if ((iVar8 != 0) && (DAT_0010d558 = (char **)bfd_openw(pcVar10,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    copyAndDeleteFile(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    freeMemory(DAT_0010d560);\n    freeMemory(DAT_0010d570);\n    break;\n  case 0x1e:\n    extract_and_check_archives_00103e95_00103c60(*filePaths,0);\n    break;\n  case 0x1f:\n    extract_and_check_archives_00103e95_00103c60(*filePaths,1);\n    break;\n  case 0x20:\n    pcVar10 = *filePaths;\n    if (DAT_0010d558 == (char **)0x0) {\n      pcVar10 = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    index = extract_archived_files_00105300(filePaths[-1],0);\n    if (index != 0) {\n      extract_files_from_archive_001032a8(index,copyData,pcVar10);\n    }\n    break;\n  case 0x21:\n    pcVar10 = *filePaths;\n    pcVar15 = filePaths[-1];\n    uVar11 = extract_archived_files_00105300(filePaths[-2],0);\n    if (pcVar10 == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(pcVar10,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        extract_files_from_archive_001032a8(uVar11,printFileInfo,pcVar15);\n        bfd_close(uVar11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pcVar16 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pcVar16,pcVar10);\n    }\n    extract_files_from_archive_001032a8(uVar11,printFileInfo,pcVar15);\n    bfd_close(uVar11);\n    break;\n  case 0x22:\n    newFilePaths = (char **)*filePaths;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    newFilePaths = (char **)0x0;\n    break;\n  case 0x24:\n    newFilePaths = (char **)filePaths[-1];\n    break;\n  case 0x26:\n    newFilePaths = (char **)malloc(0x10);\n    pcVar10 = filePaths[-2];\n    *newFilePaths = *filePaths;\n    newFilePaths[1] = pcVar10;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  index = (long)cVar2;\n  currentBuffer = currentBuffer + -index;\n  filePaths[1 - index] = (char *)newFilePaths;\n  filePaths = filePaths + (1 - index);\n  uVar20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[iVar37] + -0x18] + (int)*currentBuffer;\n  if ((uVar20 < 0x23) && (*currentBuffer == (&DAT_0010a0a0)[(int)uVar20])) {\n    index = (long)(char)(&DAT_0010a060)[(int)uVar20];\n  }\n  else {\n    index = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  iVar8 = ((int)pbVar35 - (int)DAT_0010d5c8) + -1;\n  *pbVar35 = DAT_0010d588;\n  pplVar1 = (long **)(DAT_0010d5a8 + index * 8);\n  ppFVar3 = (FILE **)*pplVar1;\n  if (*(int *)(ppFVar3 + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)ppFVar3 + 0x1c);\n    *(undefined4 *)(ppFVar3 + 7) = 1;\n    *ppFVar3 = DAT_0010d590;\n  }\n  pbVar7 = DAT_0010d5b0;\n  pFVar4 = ppFVar3[1];\n  auVar40._8_8_ = pFVar4;\n  auVar40._0_8_ = ppFVar3;\n  if ((byte *)((long)&pFVar4->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&pFVar4->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      auVar40 = printErrorMessageAndExit();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      uVar20 = (int)((long)pbVar7 - (long)pbVar32) - 1;\n      for (index = 0; (int)index < (int)uVar20; index = index + 1) {\n        *(byte *)(auVar40._8_8_ + index) = pbVar32[index];\n      }\n      plVar12 = *pplVar1;\n      if (*(int *)(plVar12 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)plVar12 + 0x1c) = 0;\nLAB_0010475e:\n        pFVar4 = DAT_0010d590;\n        if (uVar20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            ensure_buffer_stack_00103df9();\n            puVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            uVar11 = createBuffer(pFVar4);\n            *puVar22 = uVar11;\n          }\n          index = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            index = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          iVar9 = 1;\n          initialize_file_001031cf(index);\n          extractDataFromBinary();\n        }\n        else {\n          iVar9 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          plVar5 = *pplVar1;\n          uVar24 = ~uVar20 + *(int *)(plVar12 + 3);\n          if (0 < (int)uVar24) break;\n          uVar24 = (int)DAT_0010d5b0 - (int)(void *)plVar5[1];\n          if (*(int *)(plVar5 + 4) == 0) {\n            plVar5[1] = 0;\nLAB_00104626:\n            printErrorMessageAndExit();\n            break;\n          }\n          iVar9 = *(int *)(plVar5 + 3);\n          iVar25 = iVar9;\n          if (iVar9 < 1) {\n            iVar25 = iVar9 / 8;\n          }\n          *(int *)(plVar5 + 3) = iVar25 + iVar9;\n          pvVar14 = remalloc((void *)plVar5[1],(long)(iVar25 + iVar9 + 2));\n          plVar5[1] = (long)pvVar14;\n          if (pvVar14 == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)pvVar14 + (long)(int)uVar24);\n          plVar12 = *pplVar1;\n        }\n        if (0x2000 < (int)uVar24) {\n          uVar24 = 0x2000;\n        }\n        uVar26 = (ulong)uVar24;\n        if (*(int *)((long)plVar5 + 0x24) == 0) {\n          piVar34 = __errno_location();\n          uVar26 = (ulong)(int)uVar24;\n          uVar19 = (ulong)(int)uVar20;\n          *piVar34 = 0;\n          goto LAB_001046c7;\n        }\n        uVar19 = 0;\n        piVar34 = (int *)(long)(int)uVar20;\n        do {\n          iVar9 = getc(DAT_0010d590);\n          uVar36 = (uint)uVar19;\n          if (iVar9 == -1) {\n            iVar9 = ferror(DAT_0010d590);\n            uVar24 = uVar36;\n            if (iVar9 != 0) {\n              do {\n                pcVar10 = \"input in flex scanner failed\";\n                printErrorMessageAndExit();\n                do {\n                  *piVar34 = 0;\n                  clearerr((FILE *)pcVar10);\nLAB_001046c7:\n                  sVar13 = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + uVar19),1,uVar26,DAT_0010d590);\n                  pcVar10 = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)sVar13;\n                  uVar24 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (iVar9 = ferror(DAT_0010d590), uVar24 = DAT_0010d598, iVar9 == 0))\n                  goto LAB_00104738;\n                } while (*piVar34 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (iVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uVar20 +\n             (long)(int)uVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uVar24 = uVar36 + 1;\n            break;\n          }\n          uVar19 = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)piVar34) =\n               (char)iVar9;\n          piVar34 = (int *)((long)piVar34 + 1);\n        } while (uVar24 != uVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uVar24;\n        uVar24 = DAT_0010d598;\n        iVar9 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uVar24 == 0) goto LAB_0010475e;\n      }\n      plVar12 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      index = *plVar12;\n      uVar20 = uVar20 + DAT_0010d598;\n      if (*(int *)(index + 0x18) < (int)uVar20) {\n        iVar25 = ((int)DAT_0010d598 >> 1) + uVar20;\n        pvVar14 = remalloc(*(void **)(index + 8),(long)iVar25);\n        *(void **)(index + 8) = pvVar14;\n        auVar41._8_8_ = plVar12;\n        auVar41._0_8_ = *plVar12;\n        if (*(long *)(*plVar12 + 8) == 0) {\n          auVar41 = printErrorMessageAndExit();\n        }\n        plVar12 = auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) = iVar25 + -2;\n      }\n      DAT_0010d598 = uVar20;\n      *(undefined *)(*(long *)(*plVar12 + 8) + (long)(int)uVar20) = 0;\n      *(undefined *)(*(long *)(*plVar12 + 8) + 1 + (long)(int)uVar20) = 0;\n      pbVar32 = *(byte **)(*plVar12 + 8);\n      DAT_0010d5c8 = pbVar32;\n      if (iVar9 == 1) goto LAB_001048a4;\n      if (iVar9 == 2) goto LAB_001048ca;\n      pbVar35 = pbVar32 + iVar8;\n      DAT_0010d5b0 = pbVar35;\n      uVar20 = find_matching_index_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)pbVar7 - (long)pbVar32 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pbVar35 = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pbVar35;\n    uVar19 = find_matching_index_0010300e();\n    pbVar33 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pbVar35 = pbVar32 + iVar8;\n  DAT_0010d5b0 = pbVar35;\n  uVar19 = find_matching_index_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)uVar19 * 2) != 0) {\n    DAT_0010d5b8 = pbVar35;\n    DAT_0010d5c0 = (uint)uVar19;\n  }\n  uVar26 = uVar19 & 0xffffffff;\n  while( true ) {\n    iVar8 = (int)uVar26;\n    if (iVar8 == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2)) break;\n    uVar26 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)iVar8 * 2);\n  }\n  uVar20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2);\n  pbVar33 = pbVar32;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2) == 0)\n     || (uVar20 == 0xb0)) goto LAB_0010419f;\n  pbVar35 = pbVar35 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  iVar8 = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pbVar35 = DAT_0010d588;\n  uVar19 = (ulong)DAT_0010d5c0;\n  pbVar35 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  filePaths = filePaths + 1;\n  fileCount = 3;\n  *filePaths = DAT_0010d548;\nLAB_001049d1:\n  currentBuffer = currentBuffer + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "FUN_00103c60",
                "filename_cmp",
                "FUN_001033d6",
                "bfd_openw",
                "FUN_001031cf",
                "FUN_00107740",
                "fread",
                "FUN_00105300",
                "FUN_001030ed",
                "FUN_00105bc0",
                "free",
                "ferror",
                "dup",
                "fwrite",
                "printf",
                "FUN_0010315d",
                "fopen",
                "bfd_close",
                "stat",
                "clearerr",
                "FUN_00103df9",
                "malloc",
                "FUN_0010312d",
                "FUN_001031a5",
                "FUN_0010300e",
                "realloc",
                "FUN_00103ba8",
                "bfd_cache_close",
                "xstrdup",
                "FUN_001033b0",
                "bfd_openr",
                "bfd_set_format",
                "FUN_00103ddc",
                "fprintf",
                "fclose",
                "dcgettext",
                "FUN_001032a8",
                "unlink",
                "__errno_location",
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_check_archives_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_00102c25",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_reverse_functions_00107cc0",
                "lVar1": "currentIndex",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionPointers",
                "uVar5": "numFunctions"
            },
            "code": "\nvoid executeReverseFunctions_00107cc0(void)\n\n{\n  long currentIndex;\n  long previousIndex;\n  long tempIndex;\n  long *functionPointers;\n  uint numFunctions;\n  \n  functionPointers = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      numFunctions = *(int *)(functionPointers + 1) - 1;\n      if (-1 < (int)numFunctions) {\n        currentIndex = (long)(int)numFunctions;\n        numFunctions = numFunctions & 7;\n        (*(code *)functionPointers[currentIndex + 2])();\n        previousIndex = currentIndex + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (numFunctions != 0) {\n            if (numFunctions != 1) {\n              if (numFunctions != 2) {\n                if (numFunctions != 3) {\n                  if (numFunctions != 4) {\n                    if (numFunctions != 5) {\n                      if (numFunctions != 6) {\n                        (*(code *)functionPointers[currentIndex + 1])();\n                        previousIndex = currentIndex + -2;\n                      }\n                      (*(code *)functionPointers[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)functionPointers[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)functionPointers[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)functionPointers[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)functionPointers[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)functionPointers[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionPointers[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)functionPointers[tempIndex + 1])();\n            (*(code *)functionPointers[tempIndex])();\n            (*(code *)functionPointers[currentIndex])();\n            (*(code *)functionPointers[tempIndex + -2])();\n            (*(code *)functionPointers[tempIndex + -3])();\n            (*(code *)functionPointers[tempIndex + -4])();\n            (*(code *)functionPointers[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_00107d96:\n      functionPointers = (long *)*functionPointers;\n    } while (functionPointers != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_reverse_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "extract_and_process_archived_data_00105ae0",
                "param_1": "archive_path",
                "param_2": "output_path"
            },
            "code": "\nvoid extract_and_process_archived_data_00105ae0(undefined8 archive_path,undefined8 output_path,undefined param_3,undefined param_4)\n\n{\n  extract_archived_data_00105af0(archive_path,output_path,param_3,param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_and_process_archived_data_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(decompile_binary_function_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "print_error_and_exit_00107690",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "flag",
                "local_d8": "buffer_size",
                "local_d0": "buffer_ptr",
                "local_b8": "local_array",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy"
            },
            "code": "\nvoid print_error_and_exit_00107690(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 local_d4;\n  undefined *buffer_ptr;\n  undefined *local_c8;\n  undefined local_array [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (flag != '\\0') {\n    local_88 = error_code;\n    local_78 = param_2;\n    local_68 = param_3;\n    local_58 = param_4;\n    local_48 = param_5;\n    local_38 = param_6;\n    local_28 = param_7;\n    local_18 = param_8;\n  }\n  buffer_ptr = &stack0x00000008;\n  buffer_size = 8;\n  local_c8 = local_array;\n  local_d4 = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message_001078c0(error_message,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_00102c25",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "output",
                "lVar1": "targetAddr",
                "pcVar2": "text",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *output)\n\n{\n  long targetAddr;\n  char *text;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    text = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output,text);\n  }\n  else {\n    text = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output,text,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    targetAddr = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (targetAddr == 0) break;\n    fprintf(output,\" %s\");\n  }\n  fputc(10,output);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "bfd_target_list",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010394a",
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_substring_00105830",
                "param_1": "input_string",
                "param_2": "data_ptr",
                "param_3": "unused_param",
                "param_4": "output_ptr",
                "__s": "base_name",
                "lVar1": "ptr_to_data",
                "sVar2": "input_length",
                "uVar3": "sub_length",
                "pcVar4": "output_string",
                "bVar5": "byte_value",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extract_substring_00105830(char *input_string,long data_ptr,undefined8 unused_param,undefined8 output_ptr)\n\n{\n  long ptr_to_data;\n  size_t input_length;\n  char *base_name;\n  ulong sub_length;\n  char *output_string;\n  byte byte_value;\n  undefined result [16];\n  \n  byte_value = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    base_name = (char *)lbasename();\n    input_string = base_name;\n    if ((DAT_0010d5fa != '\\0') && (data_ptr != 0)) {\n      input_length = strlen(base_name);\n      sub_length = (ulong)*(byte *)(*(long *)(data_ptr + 8) + 0x1e);\n      if (sub_length < input_length) {\n        input_string = (char *)xmalloc(sub_length + 1);\n        ptr_to_data = *(long *)(data_ptr + 8);\n        output_string = input_string;\n        for (sub_length = (ulong)*(byte *)(ptr_to_data + 0x1e); sub_length != 0; sub_length = sub_length - 1) {\n          *output_string = *base_name;\n          base_name = base_name + (ulong)byte_value * -2 + 1;\n          output_string = output_string + (ulong)byte_value * -2 + 1;\n        }\n        input_string[*(byte *)(ptr_to_data + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = output_ptr;\n  result._0_8_ = input_string;\n  return result;\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00102bb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105480",
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_substring_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_and_remove_file_00107730",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid cleanupAndRemoveFile_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_and_remove_file_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorString",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "unknown",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "fflush": "flushBuffer",
                "bfd_get_error": "getBfdError",
                "dcgettext": "getTranslatedString",
                "bfd_errmsg": "getErrorMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorString)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 unknown;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (errorString != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010d660,errorString,errorMessage,unknown);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010d660,errorMessage,unknown);\n  return;\n}\n\n",
            "called": [
                "FUN_00102f96",
                "bfd_errmsg",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00107c10",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "outputFile",
                "param_2": "inputFile",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errorNumber",
                "uVar2": "isTerminal",
                "iVar3": "fileDescriptor",
                "piVar4": "errorLocation",
                "lVar5": "dataAddress"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **outputFile,FILE *inputFile,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errorNumber;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errorLocation;\n  long dataAddress;\n  \n  errorLocation = __errno_location();\n  dataAddress = DAT_0010d5a8;\n  errorNumber = *errorLocation;\n  if (outputFile == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (outputFile == *(FILE ***)(dataAddress + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)outputFile + 0x1c) = 0;\n    *(undefined *)&outputFile[1]->_flags = 0;\n    *(undefined *)((long)&outputFile[1]->_flags + 1) = 0;\n    *(undefined4 *)(outputFile + 5) = 1;\n    outputFile[2] = outputFile[1];\n    *(undefined4 *)(outputFile + 7) = 0;\n    if (dataAddress != 0) {\n      if (outputFile == *(FILE ***)(dataAddress + DAT_0010d5a0 * 8)) {\n        extract_data_from_binary_001030ed();\n      }\n      *outputFile = inputFile;\n      *(undefined4 *)((long)outputFile + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *outputFile = inputFile;\n    *(undefined4 *)((long)outputFile + 0x34) = 1;\n  }\n  *(undefined8 *)((long)outputFile + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileDescriptor = fileno(inputFile);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)outputFile + 0x24) = isTerminal;\n  *errorLocation = errorNumber;\n  return param5;\n}\n\n",
            "called": [
                "FUN_001030ed",
                "fileno",
                "__errno_location",
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "sourceData",
                "param_2": "destinationData",
                "lVar1": "tempData"
            },
            "code": "\nvoid copyData_0010312d(long sourceData,long destinationData)\n\n{\n  long tempData;\n  \n  if (destinationData != 0) {\n    *(undefined8 *)(destinationData + 0xf0) = *(undefined8 *)(sourceData + 0xf0);\n  }\n  tempData = DAT_0010d558;\n  *(undefined8 *)(sourceData + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(tempData + 0xf8) = sourceData;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "reverse_and_save_file_00105c00",
                "param_1": "fileDescriptor",
                "param_2": "filename",
                "_Var3": "fileOffset",
                "uVar4": "bytesRead",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPtr",
                "auStack_2038": "buffer",
                "iVar1": "errno",
                "__fd": "newFileDescriptor",
                "iVar2": "numBytesRead"
            },
            "code": "\nulong reverseAndSaveFile_00105c00(int fileDescriptor,char *filename)\n\n{\n  int errno;\n  int newFileDescriptor;\n  int numBytesRead;\n  __off_t fileOffset;\n  ulong bytesRead;\n  size_t bytesWritten;\n  int *errnoPtr;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptor) && (fileOffset = lseek(fileDescriptor,0,0), fileOffset == 0)) {\n    newFileDescriptor = open(filename,0x201);\n    if (newFileDescriptor < 0) {\n      bytesRead = close_file_00102f55();\n      return bytesRead;\n    }\n    do {\n      bytesRead = read(fileDescriptor,buffer,0x2000);\n      numBytesRead = (int)bytesRead;\n      if (numBytesRead < 1) {\n        errnoPtr = __errno_location();\n        errno = *errnoPtr;\n        close(fileDescriptor);\n        close(newFileDescriptor);\n        if (numBytesRead != 0) {\n          *errnoPtr = errno;\n          return 0xffffffff;\n        }\n        return bytesRead & 0xffffffff;\n      }\n      bytesWritten = write(newFileDescriptor,buffer,(long)numBytesRead);\n    } while (bytesWritten == (long)numBytesRead);\n    errnoPtr = __errno_location();\n    numBytesRead = *errnoPtr;\n    close(fileDescriptor);\n    close(newFileDescriptor);\n    *errnoPtr = numBytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "open",
                "read",
                "close",
                "lseek",
                "write",
                "FUN_00102f55",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "reverse_and_save_file_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_size_001052a0",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "error_num",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_info"
            },
            "code": "\nlong get_file_size_001052a0(char *file_path)\n\n{\n  int status;\n  int *error_num;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_info;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_info);\n    if (status < 0) {\n      error_num = __errno_location();\n      if (*error_num == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00107920(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*error_num);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00107920(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_info.st_size) {\n        return file_info.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "FUN_001025a0",
                "FUN_00107920",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_file_size_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "message"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *message;\n  \n  message = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,message);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00103172",
                "FUN_00103ba8",
                "FUN_00103e95",
                "FUN_00102f08",
                "FUN_001075e0",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_001031a5",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "extract_and_check_archives_00103c60",
                "param_1": "input_file",
                "param_2": "is_plugin",
                "cVar1": "is_valid_format",
                "piVar2": "errno_ptr",
                "pcVar3": "error_message",
                "lVar4": "input_archive",
                "lVar5": "archived_file",
                "uVar6": "program_name",
                "plVar7": "next_archived_file"
            },
            "code": "\n\n\nvoid extract_and_check_archives_00103c60(char *input_file,int is_plugin)\n\n{\n  char is_valid_format;\n  int *errno_ptr;\n  char *error_message;\n  long input_archive;\n  long archived_file;\n  undefined8 program_name;\n  long *next_archived_file;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)extract_file_path_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errno_ptr = __errno_location();\n    input_file = strerror(*errno_ptr);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_file = DAT_0010d560;\n    }\n    else {\n      if (is_plugin != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive = bfd_openr(input_file,\"plugin\");\n      if (input_archive == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        is_valid_format = bfd_check_format(input_archive,2);\n        if (is_valid_format != '\\0') {\n          next_archived_file = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_archive,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_archive,archived_file)) {\n            *next_archived_file = archived_file;\n            next_archived_file = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,program_name,input_file);\n  check_exit_status_0010315d();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "xstrdup",
                "FUN_001057a0",
                "bfd_set_format",
                "strerror",
                "bfd_fdopenw",
                "bfd_openr",
                "fprintf",
                "FUN_0010315d",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_check_archives_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "write_to_file_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid writeToFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "write_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "extract_archived_data_00105af0",
                "param_1": "data_buffer",
                "param_2": "archive_file",
                "param_3": "modify_flag",
                "param_4": "check_flag",
                "cVar1": "format_check_result",
                "uVar2": "extracted_data",
                "lVar3": "current_archived_file",
                "uVar4": "result"
            },
            "code": "\nulong extract_archived_data_00105af0(long *data_buffer,long archive_file,char modify_flag,char check_flag)\n\n{\n  char format_check_result;\n  uint extracted_data;\n  long current_archived_file;\n  ulong result;\n  \n  if (check_flag == '\\0') {\n    if (modify_flag != '\\0') {\n      result = print_and_modify_data_00102f08();\n      return result;\n    }\n  }\n  else {\n    format_check_result = bfd_check_format(archive_file,2);\n    if (format_check_result != '\\0') {\n      result = 0;\n      for (current_archived_file = bfd_openr_next_archived_file(archive_file,0); current_archived_file != 0;\n          current_archived_file = bfd_openr_next_archived_file(archive_file,current_archived_file)) {\n        extracted_data = extract_archived_data_00105af0(data_buffer,current_archived_file,modify_flag,1);\n        if ((char)extracted_data != '\\0') {\n          result = (ulong)extracted_data;\n          data_buffer = (long *)(*data_buffer + 0xf0);\n        }\n      }\n      return result;\n    }\n    if (modify_flag != '\\0') {\n      result = print_and_modify_data_00102f08();\n      return result;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *data_buffer;\n  *data_buffer = archive_file;\n  return 1;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105af0",
                "FUN_001028ed",
                "FUN_00105ae0"
            ],
            "imported": false,
            "current_name": "extract_archived_data_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_index_0010300e",
                "bVar1": "foundMatch",
                "iVar2": "currentIndex",
                "lVar3": "updatedIndex",
                "bVar4": "matchValue",
                "pbVar5": "currentByte",
                "in_R9": "matchingByte",
                "in_R10D": "matchingIndex"
            },
            "code": "\nvoid findMatchingIndex_0010300e(void)\n\n{\n  bool foundMatch;\n  int currentIndex;\n  long updatedIndex;\n  byte matchValue;\n  byte *currentByte;\n  byte *matchingByte;\n  int matchingIndex;\n  \n  foundMatch = false;\n  currentIndex = DAT_0010d5d0;\n  for (currentByte = DAT_0010d5c8; currentByte < DAT_0010d5b0; currentByte = currentByte + 1) {\n    matchValue = 1;\n    if (*currentByte != 0) {\n      matchValue = (&DAT_0010ab00)[*currentByte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      foundMatch = true;\n      matchingByte = currentByte;\n      matchingIndex = currentIndex;\n    }\n    while( true ) {\n      updatedIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)matchValue);\n      if (*(short *)(&DAT_0010a440 + updatedIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        matchValue = (&DAT_0010a7c0)[(int)(uint)matchValue];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + updatedIndex * 2);\n  }\n  if (foundMatch) {\n    DAT_0010d5b8 = matchingByte;\n    DAT_0010d5c0 = matchingIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_index_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "deallocate_and_return_00102ba1",
                "unaff_RBP": "ptrToBeDeallocated",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] deallocateAndReturn_00102ba1(void)\n\n{\n  undefined returnValue [16];\n  void *ptrToBeDeallocated;\n  ulong returnAddress;\n  \n  free(ptrToBeDeallocated);\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = returnAddress;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "deallocate_and_return_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_save_file_from_archive_00107740",
                "param_1": "archive",
                "iVar1": "comparisonResult",
                "iVar2": "status",
                "piVar3": "errorCode",
                "pcVar4": "errorMessage",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "plVar8": "currentFile",
                "puVar9": "localArray",
                "uVar5": "error",
                "pplVar6": "filePointer",
                "_Stack_b0": "fileMode",
                "uStack_98": "fileSize",
                "uStack_80": "timestamp",
                "uStack_70": "timestamp"
            },
            "code": "\n\n\nlong * extractAndSaveFileFromArchive_00107740(long **archive)\n\n{\n  int comparisonResult;\n  int status;\n  int *errorCode;\n  char *errorMessage;\n  undefined8 error;\n  long **filePointer;\n  void *buffer;\n  size_t bytesRead;\n  long loopCounter;\n  long *currentFile;\n  undefined4 *localArray;\n  ulong uVar10;\n  size_t sVar11;\n  undefined4 local_c8 [6];\n  __mode_t fileMode;\n  ulong fileSize;\n  undefined8 timestamp;\n  undefined8 timestamp;\n  \n  if (_DAT_0010d600 != 0) {\n    localArray = local_c8;\n    for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *localArray = 0;\n      localArray = localArray + 1;\n    }\n  }\n  filePointer = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    filePointer = archive;\n  }\n  status = (*(code *)filePointer[1][0x3d])(archive,local_c8);\n  if (status != 0) {\n    currentFile = *archive;\n    error = dcgettext(0,\"internal stat error on %s\",5);\n    status = print_error_and_exit_00107690(error,currentFile);\n    error = DAT_0010d638;\n    if (status == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentFile,error);\n        if (comparisonResult == 0) {\n          if (status != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek(archive,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (fileSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_file_name_00105a20(*archive);\n  }\n  else {\n    uVar10 = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      sVar11 = fileSize - uVar10;\n      if (0x2000 < sVar11) {\n        sVar11 = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,sVar11,archive);\n      if (sVar11 != bytesRead) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        error = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_and_exit_00107690(error,archive);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_file_name_00105a20(*archive);\n      }\n      sVar11 = fwrite(buffer,1,bytesRead,DAT_0010d5d8);\n      if (sVar11 != bytesRead) {\n        errorCode = __errno_location();\n        errorMessage = strerror(*errorCode);\n        print_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,errorMessage);\n        goto LAB_00102c78;\n      }\n      uVar10 = uVar10 + bytesRead;\n    } while (uVar10 < fileSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorMessage = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,fileMode);\n  if (_DAT_0010d600 != 0) {\n    timestamp = timestamp;\n    set_file_timestamps_00107c80(errorMessage,local_c8);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_save_file_from_archive_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "bVar1": "errorFlag",
                "cVar2": "result",
                "iVar3": "copyResult",
                "__format": "errorMessage",
                "uVar4": "fileType",
                "unaff_RBX": "filePaths",
                "unaff_RBP": "outputFile",
                "unaff_R12": "isDirectory",
                "unaff_R13": "fileData",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "filePermission",
                "cStack0000000000000016": "readPermission",
                "cStack0000000000000017": "writePermission",
                "in_stack_00000018": "executePermission",
                "cStack0000000000000019": "readPermissionOwner",
                "cStack000000000000001a": "writePermissionOwner",
                "cStack000000000000001b": "executePermissionOwner",
                "cStack000000000000001c": "readPermissionGroup",
                "cStack000000000000001d": "writePermissionGroup",
                "cStack000000000000001e": "executePermissionGroup",
                "uStack000000000000001f": "filePermissionOther",
                "uStack0000000000000068": "fileMode",
                "uStack000000000000006c": "fileOwner",
                "in_stack_00000070": "fileGroup",
                "in_stack_00000080": "fileSize"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte errorFlag;\n  char result;\n  int copyResult;\n  char *errorMessage;\n  uint fileType;\n  char **filePaths;\n  FILE *outputFile;\n  long isDirectory;\n  void *fileData;\n  int fileDescriptor;\n  undefined filePermission;\n  char readPermission;\n  char writePermission;\n  char executePermission;\n  char readPermissionOwner;\n  char writePermissionOwner;\n  char executePermissionOwner;\n  char readPermissionGroup;\n  char writePermissionGroup;\n  char executePermissionGroup;\n  undefined filePermissionOther;\n  uint fileMode;\n  uint fileOwner;\n  uint fileGroup;\n  undefined8 fileSize;\n  \n  do {\n    errorFlag = handle_error_and_exit_00107c10();\n    *(uint *)((long)filePaths + 0x44) = *(uint *)((long)filePaths + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(isDirectory + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)filePaths + 0x49) = errorFlag | 0x10;\n    }\n    result = bfd_set_archive_head();\n  } while (result == '\\0');\n  dup(fileDescriptor);\n  result = bfd_close();\n  if (result != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    copyResult = copy_and_delete_file_00105bc0();\n    if (copyResult == 0) {\n      free(fileData);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  handle_error_and_exit_00107c10();\n  errorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,errorMessage);\n  fileType = fileMode & 0xf000;\n  if (fileType == 0x4000) {\n    filePermission = 100;\n  }\n  else if (fileType == 0xa000) {\n    filePermission = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    filePermission = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    filePermission = 99;\n  }\n  else if (fileType == 0xc000) {\n    filePermission = 0x73;\n  }\n  else {\n    filePermission = 0x70;\n    if (fileType != 0x1000) {\n      filePermission = 0x2d;\n    }\n  }\n  readPermission = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  writePermission = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  executePermission = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  readPermissionOwner = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  writePermissionOwner = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  executePermissionOwner = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  readPermissionGroup = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  writePermissionGroup = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  executePermissionGroup = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (executePermission == 'x') {\n      executePermission = 's';\n    }\n    else {\n      executePermission = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (executePermissionOwner == 'x') {\n      executePermissionOwner = 's';\n    }\n    else {\n      executePermissionOwner = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (executePermissionGroup == 'x') {\n      executePermissionGroup = 't';\n    }\n    else {\n      executePermissionGroup = 'T';\n    }\n  }\n  filePermissionOther = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileOwner,\n          (ulong)fileGroup,fileSize,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*filePaths,outputFile);\n  if ((char)isDirectory != '\\0') {\n    if ((*(byte *)((long)filePaths + 0x49) & 0x10) == 0) {\n      if (filePaths[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (filePaths[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00105bc0",
                "free",
                "bfd_set_archive_head",
                "bfd_close",
                "FUN_00107c10",
                "dup",
                "xexit",
                "FUN_00102d2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "extract_and_process_archived_data_001028ed",
                "param_1": "archive_name",
                "param_2": "bfd_handle",
                "uVar1": "undefined_var1",
                "bVar2": "byte_var2",
                "iVar3": "int_var3",
                "sVar4": "size_t_var4",
                "piVar5": "int_ptr_var5",
                "pcVar6": "char_ptr_var6",
                "pcVar7": "char_ptr_var7",
                "ppcVar8": "char_ptr_ptr_var8",
                "uVar9": "undefined_var9",
                "lVar10": "long_var10",
                "__s": "char_ptr_var_s",
                "__s_00": "char_ptr_var_s_00",
                "lVar11": "long_var11",
                "uVar12": "undefined_var12",
                "uVar13": "ulong_var13",
                "unaff_RBX": "char_ptr_var_RBx",
                "ppcVar14": "char_ptr_ptr_var14",
                "unaff_RBP": "char_ptr_ptr_var_BP",
                "unaff_R12": "char_ptr_ptr_var12",
                "unaff_R13D": "uint_var13D",
                "ppcVar15": "char_ptr_ptr_var15",
                "unaff_R14": "long_var14",
                "bVar16": "bool_var16",
                "bVar17": "byte_var17",
                "param_7": "char_ptr_ptr_param7",
                "param_9": "undefined8_var9",
                "in_stack_00000078": "long_var_in_stack_00000078",
                "in_stack_00000108": "long_var_in_stack_00000108"
            },
            "code": "\n\n\nundefined8 extract_and_process_archived_data_001028ed(undefined8 archive_name,long bfd_handle)\n\n{\n  undefined undefined_var1;\n  byte byte_var2;\n  int int_var3;\n  size_t size_t_var4;\n  int *int_ptr_var5;\n  char *char_ptr_var6;\n  char *char_ptr_var7;\n  char **char_ptr_ptr_var8;\n  undefined8 undefined_var9;\n  long long_var10;\n  char *char_ptr_var_s;\n  char *char_ptr_var_s_00;\n  long long_var11;\n  undefined8 undefined_var12;\n  ulong ulong_var13;\n  char *char_ptr_var_RBx;\n  char **char_ptr_ptr_var14;\n  char **char_ptr_ptr_var_BP;\n  char **char_ptr_ptr_var12;\n  uint uint_var13D;\n  char **char_ptr_ptr_var15;\n  long long_var14;\n  bool bool_var16;\n  byte byte_var17;\n  char **char_ptr_ptr_param7;\n  undefined8 undefined8_var9;\n  long long_var_in_stack_00000078;\n  long long_var_in_stack_00000108;\n  \n  byte_var17 = 0;\ncode_r0x001028ed:\n  handle_error_and_exit_00107c10(char_ptr_var_RBx,bfd_handle);\nLAB_001028f5:\n  undefined_var12 = DAT_0010d638;\n  if (uint_var13D != 3) {\n    while( true ) {\n      if ((undefined8 *)*char_ptr_ptr_var12 == (undefined8 *)0x0) goto LAB_0010571f;\n      int_var3 = filename_cmp(*(undefined8 *)*char_ptr_ptr_var12,undefined_var12);\n      if (int_var3 == 0) break;\n      char_ptr_ptr_var12 = (char **)(*char_ptr_ptr_var12 + 0xf0);\n    }\n    if (uint_var13D != 2) goto LAB_0010571f;\n    char_ptr_ptr_var12 = (char **)(*char_ptr_ptr_var12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  long_var10 = *(long *)(long_var14 + 0xf0);\n  if (*(long *)(long_var14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    long_var11 = long_var10;\n    long_var10 = *(long *)(long_var11 + 0xf0);\n  } while (long_var10 != 0);\n  char_ptr_ptr_var12 = (char **)(long_var11 + 0xf0);\n  char_ptr_var_RBx = *char_ptr_ptr_var_BP;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined_var1 = DAT_0010d5f8;\n  uint_var13D = (uint)(DAT_0010d60c != 0);\n  bfd_handle = bfd_openr(char_ptr_var_RBx,DAT_0010d5f0);\n  if (bfd_handle != 0) {\n    char_ptr_ptr_var_BP = char_ptr_ptr_var_BP + 1;\n    byte_var2 = extract_archived_data_00105af0(char_ptr_ptr_var12,bfd_handle,uint_var13D,undefined_var1);\n    undefined8_var9._6_1_ = undefined8_var9._6_1_ | byte_var2;\n    char_ptr_var6 = *char_ptr_ptr_var_BP;\n    do {\n      if (char_ptr_var6 == (char *)0x0) {\n        if (undefined8_var9._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefined_var12 = extract_and_write_archive_001058b0();\n        return undefined_var12;\n      }\n      char_ptr_ptr_var14 = *(char ***)(long_var14 + 0xf0);\n      char_ptr_ptr_var12 = char_ptr_ptr_param7;\n      if (undefined8_var9._7_1_ == '\\0') {\n        char_ptr_ptr_var15 = char_ptr_ptr_param7;\n        if (char_ptr_ptr_var14 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              char_ptr_var_s = (char *)lbasename(*char_ptr_ptr_var14);\n              char_ptr_var7 = char_ptr_var_s;\n              if (DAT_0010d5fa != '\\0') {\n                size_t_var4 = strlen(char_ptr_var_s);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(long_var14 + 8) + 0x1e);\n                if (ulong_var13 < size_t_var4) {\n                  char_ptr_var7 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(long_var14 + 8);\n                  char_ptr_var6 = char_ptr_var7;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_ptr_var6 = *char_ptr_var_s;\n                    char_ptr_var_s = char_ptr_var_s + (ulong)byte_var17 * -2 + 1;\n                    char_ptr_var6 = char_ptr_var6 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_ptr_var7[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                char_ptr_var6 = *char_ptr_ptr_var_BP;\n                char_ptr_var_s = char_ptr_var7;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              char_ptr_var6 = *char_ptr_ptr_var_BP;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              char_ptr_var_s_00 = (char *)lbasename(char_ptr_var6);\n              if (DAT_0010d5fa != '\\0') {\n                size_t_var4 = strlen(char_ptr_var_s_00);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(long_var14 + 8) + 0x1e);\n                char_ptr_var6 = char_ptr_var_s_00;\n                char_ptr_var_s = char_ptr_var7;\n                if (ulong_var13 < size_t_var4) {\n                  char_ptr_var6 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(long_var14 + 8);\n                  char_ptr_var7 = char_ptr_var6;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_ptr_var7 = *char_ptr_var_s_00;\n                    char_ptr_var_s_00 = char_ptr_var_s_00 + (ulong)byte_var17 * -2 + 1;\n                    char_ptr_var7 = char_ptr_var7 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_ptr_var6[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              int_var3 = filename_cmp(char_ptr_var_s_00,char_ptr_var7);\n            }\n            else {\n              char_ptr_var6 = *char_ptr_ptr_var_BP;\n              char_ptr_var_s = *char_ptr_ptr_var14;\nLAB_00102980:\n              int_var3 = filename_cmp(char_ptr_var6,char_ptr_var_s);\n            }\n            if ((int_var3 == 0) && (char_ptr_ptr_var14[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                int_var3 = stat(*char_ptr_ptr_var_BP,(stat *)&stack0x000000b0);\n                if (int_var3 != 0) {\n                  int_ptr_var5 = __errno_location();\n                  if (*int_ptr_var5 != 2) {\n                    handle_error_and_exit_00107c10(*char_ptr_ptr_var_BP);\nLAB_00102b7e:\n                    char_ptr_var6 = *char_ptr_ptr_var14;\n                    undefined_var12 = dcgettext(0,\"internal stat error on %s\",5);\n                    print_error_and_exit_00107690(undefined_var12,char_ptr_var6);\n                    free(char_ptr_ptr_var_BP);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                char_ptr_ptr_var8 = (char **)char_ptr_ptr_var14[0x1d];\n                if ((char **)char_ptr_ptr_var14[0x1d] == (char **)0x0) {\n                  char_ptr_ptr_var8 = char_ptr_ptr_var14;\n                }\n                int_var3 = (**(code **)(char_ptr_ptr_var8[1] + 0x1e8))(char_ptr_ptr_var14,&stack0x00000020);\n                if (int_var3 != 0) goto LAB_00102b7e;\n                if (long_var_in_stack_00000108 <= long_var_in_stack_00000078) goto LAB_0010577e;\n              }\n              undefined_var12 = find_matching_entry_00105870(char_ptr_ptr_param7,2,*char_ptr_ptr_var14);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                char_ptr_var6 = *char_ptr_ptr_var_BP;\n                bool_var16 = DAT_0010d60c != 0;\n                long_var10 = bfd_openr(char_ptr_var6,DAT_0010d5f0);\n                if (long_var10 == 0) {\n                  handle_error_and_exit_00107c10(char_ptr_var6,0);\n                  goto LAB_00102b3e;\n                }\n                byte_var2 = update_and_print_string_00103172(undefined_var12,long_var10,bool_var16);\n              }\n              else {\n                undefined_var9 = extract_substring_00105830(*char_ptr_ptr_var_BP);\n                int_var3 = filename_cmp(undefined_var9,\"__.LIBDEP\");\n                if (int_var3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte_var2 = update_and_print_string_00103172(undefined_var12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte_var2 != 0) {\n                *char_ptr_ptr_var15 = *(char **)(*char_ptr_ptr_var15 + 0xf0);\n                undefined8_var9._6_1_ = byte_var2;\n              }\n              goto LAB_0010577e;\n            }\n            char_ptr_ptr_var15 = char_ptr_ptr_var14 + 0x1e;\n            char_ptr_ptr_var14 = (char **)char_ptr_ptr_var14[0x1e];\n          } while (char_ptr_ptr_var14 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uint_var13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uint_var13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        long_var10 = *(long *)(long_var14 + 0xf0);\n        if (*(long *)(long_var14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      char_ptr_var_RBx = *char_ptr_ptr_var_BP;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefined_var12 = extract_substring_00105830(char_ptr_var_RBx);\n      int_var3 = filename_cmp(undefined_var12,\"__.LIBDEP\");\n      if (int_var3 != 0) goto code_r0x0010574f;\n      byte_var2 = extract_and_process_archived_data_001028ed_00105ae0(char_ptr_ptr_var12,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      undefined8_var9._6_1_ = byte_var2 | undefined8_var9._6_1_;\nLAB_0010577e:\n      char_ptr_ptr_var_BP = char_ptr_ptr_var_BP + 1;\n      char_ptr_var6 = *char_ptr_ptr_var_BP;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  char_ptr_var_RBx = *char_ptr_ptr_var_BP;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "xmalloc",
                "filename_cmp",
                "FUN_00103172",
                "FUN_00105870",
                "strlen",
                "FUN_00107c10",
                "stat",
                "FUN_00107690",
                "FUN_00102943",
                "FUN_00105af0",
                "FUN_00105830",
                "bfd_openr",
                "FUN_001028ed",
                "lbasename",
                "dcgettext",
                "FUN_001058b0",
                "FUN_00105ae0",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_and_process_archived_data_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00102bf5",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(errorStream,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "exit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "error_location_ptr",
                "uVar2": "error_message",
                "dcgettext": "get_translated_message",
                "print_error_message_00107920": "print_error_message",
                "strerror": "get_error_string"
            },
            "code": "\nundefined8 handle_file_error_001025a0(void)\n\n{\n  int *error_location_ptr;\n  undefined8 error_message;\n  \n  error_location_ptr = __errno_location();\n  if (*error_location_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_message);\n  }\n  else {\n    strerror(*error_location_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_one_0010284b"
            },
            "code": "\nundefined8 getOne_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_one_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_file_data_00102c25",
                "param_7": "destination_buffers",
                "param_11": "permissions",
                "param_12": "archive_size",
                "iVar1": "comparison_result",
                "iVar2": "return_code",
                "piVar3": "errno_location",
                "pcVar4": "error_message",
                "uVar5": "gettext_result",
                "pplVar6": "file_pointers",
                "__ptr": "buffer_pointer",
                "__n": "read_size",
                "lVar7": "loop_variable",
                "unaff_RBX": "function_parameter",
                "plVar8": "file_pointer",
                "puVar9": "parameter_pointer",
                "uVar10": "bytes_read",
                "sVar11": "size_to_read"
            },
            "code": "\n\n\nlong * extract_file_data_00102c25(void)\n\n{\n  int comparison_result;\n  int return_code;\n  int *errno_location;\n  char *error_message;\n  undefined8 gettext_result;\n  long **file_pointers;\n  void *buffer_pointer;\n  size_t read_size;\n  long loop_variable;\n  long **function_parameter;\n  long *file_pointer;\n  undefined4 *parameter_pointer;\n  ulong bytes_read;\n  size_t size_to_read;\n  undefined4 *destination_buffers;\n  __mode_t permissions;\n  ulong archive_size;\n  \n  parameter_pointer = destination_buffers;\n  for (loop_variable = 0x24; loop_variable != 0; loop_variable = loop_variable + -1) {\n    *parameter_pointer = 0;\n    parameter_pointer = parameter_pointer + 1;\n  }\n  file_pointers = (long **)function_parameter[0x1d];\n  if ((long **)function_parameter[0x1d] == (long **)0x0) {\n    file_pointers = function_parameter;\n  }\n  return_code = (*(code *)file_pointers[1][0x3d])();\n  if (return_code != 0) {\n    file_pointer = *function_parameter;\n    gettext_result = dcgettext(0,\"internal stat error on %s\",5);\n    return_code = print_error_and_exit_00107690(gettext_result,file_pointer);\n    gettext_result = DAT_0010d638;\n    if (return_code == 3) {\n      for (; *file_pointer != 0; file_pointer = (long *)(*file_pointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*file_pointer != (undefined8 *)0x0; file_pointer = (long *)(*file_pointer + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*file_pointer,gettext_result);\n        if (comparison_result == 0) {\n          if (return_code != 2) {\n            return file_pointer;\n          }\n          return (long *)(*file_pointer + 0xf0);\n        }\n      }\n    }\n    return file_pointer;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_file_name_00105a20(*function_parameter);\n  }\n  else {\n    bytes_read = 0;\n    buffer_pointer = (void *)xmalloc(0x2000);\n    do {\n      size_to_read = archive_size - bytes_read;\n      if (0x2000 < size_to_read) {\n        size_to_read = 0x2000;\n      }\n      read_size = bfd_bread(buffer_pointer,size_to_read);\n      if (size_to_read != read_size) {\nLAB_00102c78:\n        function_parameter = (long **)*function_parameter[0x1d];\n        gettext_result = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_and_exit_00107690(gettext_result,function_parameter);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_file_name_00105a20(*function_parameter);\n      }\n      size_to_read = fwrite(buffer_pointer,1,read_size,DAT_0010d5d8);\n      if (size_to_read != read_size) {\n        errno_location = __errno_location();\n        error_message = strerror(*errno_location);\n        print_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      bytes_read = bytes_read + read_size;\n    } while (bytes_read < archive_size);\n    free(buffer_pointer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,permissions);\n  if (_DAT_0010d600 != 0) {\n    set_file_timestamps_00107c80(error_message,destination_buffers);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "bfd_seek",
                "xmalloc",
                "strerror",
                "FUN_00105a20",
                "bfd_bread",
                "chmod",
                "FUN_00107690",
                "free",
                "FUN_00107c80",
                "fclose",
                "fwrite",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_file_data_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "reverse_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "inputLength",
                "puVar3": "outputString",
                "uVar4": "maxLength",
                "unaff_RBX": "source",
                "unaff_RBP": "basePointer",
                "puVar5": "outputPointer",
                "bVar6": "byteVar",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] reverseString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t inputLength;\n  undefined *outputString;\n  ulong maxLength;\n  undefined *source;\n  long basePointer;\n  undefined *outputPointer;\n  byte byteVar;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  byteVar = 0;\n  inputLength = strlen(inputString);\n  maxLength = (ulong)*(byte *)(*(long *)(basePointer + 8) + 0x1e);\n  outputString = source;\n  if (maxLength < inputLength) {\n    outputString = (undefined *)xmalloc(maxLength + 1);\n    lVar1 = *(long *)(basePointer + 8);\n    outputPointer = outputString;\n    for (maxLength = (ulong)*(byte *)(lVar1 + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n      *outputPointer = *source;\n      source = source + (ulong)byteVar * -2 + 1;\n      outputPointer = outputPointer + (ulong)byteVar * -2 + 1;\n    }\n    outputString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = outputString;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "reverse_string_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_modify_data_00102f08",
                "unaff_RBX": "pointer1",
                "unaff_R12": "pointer2"
            },
            "code": "\nundefined8 print_and_modify_data_00102f08(void)\n\n{\n  undefined8 *pointer1;\n  undefined8 *pointer2;\n  \n  printf(\"a - %s\\n\",*pointer1);\n  pointer1[0x1e] = *pointer2;\n  *pointer2 = pointer1;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_modify_data_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_binary_data_00105570",
                "param_1": "binaryData",
                "param_2": "filePaths",
                "param_3": "flag",
                "ppcVar1": "currentFilePath",
                "uVar2": "undefinedVar",
                "bVar3": "flag1",
                "iVar4": "tempInt",
                "sVar5": "tempSize",
                "piVar6": "errorLocation",
                "pcVar7": "tempCharPtr",
                "pcVar8": "tempCharPtr2",
                "uVar9": "tempVar",
                "pcVar10": "currentFilePath",
                "__s": "basenameCharPtr",
                "lVar11": "tempLongVar1",
                "lVar12": "tempLongVar2",
                "uVar13": "tempVar2",
                "uVar14": "tempVar3",
                "ppcVar15": "currentFilePtr",
                "ppcVar16": "currentFilePtr2",
                "uVar17": "tempVar4",
                "ppcVar18": "tempFilePtr",
                "bVar19": "flag2",
                "bVar20": "tempByte",
                "local_15a": "flag3",
                "auStack_158": "tempArray",
                "lStack_100": "tempLongVar3",
                "sStack_c8": "tempStatStruct"
            },
            "code": "\n\n\nundefined8 processBinaryData_00105570(long binaryData,char **filePaths,char flag)\n\n{\n  char **currentFilePath;\n  undefined undefinedVar;\n  byte flag1;\n  int tempInt;\n  size_t tempSize;\n  int *errorLocation;\n  char *tempCharPtr;\n  char *tempCharPtr2;\n  undefined8 tempVar;\n  char *currentFilePath;\n  char *basenameCharPtr;\n  long tempLongVar1;\n  long tempLongVar2;\n  undefined8 tempVar2;\n  ulong tempVar3;\n  char **currentFilePtr;\n  char **currentFilePtr2;\n  uint tempVar4;\n  char **tempFilePtr;\n  bool flag2;\n  byte tempByte;\n  byte flag3;\n  undefined tempArray [88];\n  long tempLongVar3;\n  stat tempStatStruct;\n  \n  tempByte = 0;\n  currentFilePath = (char **)(binaryData + 0xf0);\n  flag3 = 0;\n  if (filePaths == (char **)0x0) {\n    tempVar2 = reset_data_00102943();\n    return tempVar2;\n  }\n  do {\n    currentFilePath = *filePaths;\njoined_r0x001055aa:\n    if (currentFilePath == (char *)0x0) {\n      if (flag3 != 0) {\n        tempVar2 = extract_and_write_archive_001058b0(binaryData);\n        return tempVar2;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    currentFilePtr = *(char ***)(binaryData + 0xf0);\n    currentFilePtr2 = currentFilePath;\n    if (flag != '\\0') {\nLAB_0010564c:\n      tempVar4 = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      tempLongVar2 = *(long *)(binaryData + 0xf0);\n      if (*(long *)(binaryData + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        tempLongVar1 = tempLongVar2;\n        tempLongVar2 = *(long *)(tempLongVar1 + 0xf0);\n      } while (tempLongVar2 != 0);\n      currentFilePtr2 = (char **)(tempLongVar1 + 0xf0);\n      currentFilePath = *filePaths;\n      do {\n        if (DAT_0010d620 != 0) {\n          tempVar2 = extract_substring_00105830(currentFilePath,binaryData);\n          tempInt = filename_cmp(tempVar2,\"__.LIBDEP\");\n          if (tempInt == 0) {\n            flag1 = extract_and_process_archived_data_00105ae0(currentFilePtr2,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            flag3 = flag1 | flag3;\n            goto LAB_0010577e;\n          }\n          currentFilePath = *filePaths;\n        }\n        undefinedVar = DAT_0010d5f8;\n        flag2 = DAT_0010d60c != 0;\n        tempLongVar2 = bfd_openr(currentFilePath,DAT_0010d5f0);\n        if (tempLongVar2 != 0) {\n          filePaths = filePaths + 1;\n          flag1 = extract_archived_data_00105af0(currentFilePtr2,tempLongVar2,(uint)flag2,undefinedVar);\n          flag3 = flag3 | flag1;\n          currentFilePath = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        handle_error_and_exit_00107c10(currentFilePath,0);\n        tempVar4 = (uint)flag2;\nLAB_001028f5:\n        tempVar2 = DAT_0010d638;\n        if (tempVar4 == 3) {\n          tempLongVar2 = *(long *)(binaryData + 0xf0);\n          if (*(long *)(binaryData + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*currentFilePtr2 != (undefined8 *)0x0;\n              currentFilePtr2 = (char **)(*currentFilePtr2 + 0xf0)) {\n            tempInt = filename_cmp(*(undefined8 *)*currentFilePtr2,tempVar2);\n            if (tempInt == 0) {\n              if (tempVar4 == 2) {\n                currentFilePtr2 = (char **)(*currentFilePtr2 + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFilePath = *filePaths;\n      } while( true );\n    }\n    tempFilePtr = currentFilePath;\n    if (currentFilePtr == (char **)0x0) {\n      tempVar4 = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      currentFilePath = (char *)lbasename(*currentFilePtr);\n      tempCharPtr2 = currentFilePath;\n      if (DAT_0010d5fa != '\\0') {\n        tempSize = strlen(currentFilePath);\n        tempVar3 = (ulong)*(byte *)(*(long *)(binaryData + 8) + 0x1e);\n        if (tempVar3 < tempSize) {\n          tempCharPtr2 = (char *)xmalloc(tempVar3 + 1);\n          tempLongVar2 = *(long *)(binaryData + 8);\n          tempCharPtr = tempCharPtr2;\n          for (tempVar3 = (ulong)*(byte *)(tempLongVar2 + 0x1e); tempVar3 != 0; tempVar3 = tempVar3 - 1) {\n            *tempCharPtr = *currentFilePath;\n            currentFilePath = currentFilePath + (ulong)tempByte * -2 + 1;\n            tempCharPtr = tempCharPtr + (ulong)tempByte * -2 + 1;\n          }\n          tempCharPtr2[*(byte *)(tempLongVar2 + 0x1e)] = '\\0';\n        }\n        tempCharPtr = *filePaths;\n        currentFilePath = tempCharPtr2;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      tempCharPtr = *filePaths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basenameCharPtr = (char *)lbasename(tempCharPtr);\n      if (DAT_0010d5fa != '\\0') {\n        tempSize = strlen(basenameCharPtr);\n        tempVar3 = (ulong)*(byte *)(*(long *)(binaryData + 8) + 0x1e);\n        tempCharPtr = basenameCharPtr;\n        currentFilePath = tempCharPtr2;\n        if (tempVar3 < tempSize) {\n          tempCharPtr = (char *)xmalloc(tempVar3 + 1);\n          tempLongVar2 = *(long *)(binaryData + 8);\n          tempCharPtr2 = tempCharPtr;\n          for (tempVar3 = (ulong)*(byte *)(tempLongVar2 + 0x1e); tempVar3 != 0; tempVar3 = tempVar3 - 1) {\n            *tempCharPtr2 = *basenameCharPtr;\n            basenameCharPtr = basenameCharPtr + (ulong)tempByte * -2 + 1;\n            tempCharPtr2 = tempCharPtr2 + (ulong)tempByte * -2 + 1;\n          }\n          tempCharPtr[*(byte *)(tempLongVar2 + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      tempInt = filename_cmp(basenameCharPtr,tempCharPtr2);\n      if (tempInt == 0) goto LAB_00102993;\nLAB_00105639:\n      tempFilePtr = currentFilePtr + 0x1e;\n      currentFilePtr = (char **)currentFilePtr[0x1e];\n      if (currentFilePtr == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    tempCharPtr = *filePaths;\n    currentFilePath = *currentFilePtr;\nLAB_00102980:\n    tempInt = filename_cmp(tempCharPtr,currentFilePath);\n    if (tempInt != 0) goto LAB_00105639;\nLAB_00102993:\n    if (currentFilePtr[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      tempInt = stat(*filePaths,&tempStatStruct);\n      if (tempInt != 0) {\n        errorLocation = __errno_location();\n        if (*errorLocation != 2) {\n          handle_error_and_exit_00107c10(*filePaths);\nLAB_00102b7e:\n          currentFilePath = *currentFilePtr;\n          tempVar2 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_and_exit_00107690(tempVar2,currentFilePath);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      currentFilePtr2 = (char **)currentFilePtr[0x1d];\n      if ((char **)currentFilePtr[0x1d] == (char **)0x0) {\n        currentFilePtr2 = currentFilePtr;\n      }\n      tempInt = (**(code **)(currentFilePtr2[1] + 0x1e8))(currentFilePtr,tempArray);\n      if (tempInt != 0) goto LAB_00102b7e;\n      if (tempStatStruct.st_mtim.tv_sec <= tempLongVar3) goto LAB_0010577e;\n    }\n    tempVar2 = find_matching_entry_00105870(currentFilePath,2,*currentFilePtr);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      currentFilePath = *filePaths;\n      flag2 = DAT_0010d60c != 0;\n      tempLongVar2 = bfd_openr(currentFilePath,DAT_0010d5f0);\n      if (tempLongVar2 == 0) {\n        handle_error_and_exit_00107c10(currentFilePath,0);\n        goto LAB_00102b3e;\n      }\n      flag1 = update_and_print_string_00103172(tempVar2,tempLongVar2,flag2);\n    }\n    else {\n      tempVar = extract_substring_00105830(*filePaths,binaryData);\n      tempInt = filename_cmp(tempVar,\"__.LIBDEP\");\n      if (tempInt != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      flag1 = update_and_print_string_00103172(tempVar2,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (flag1 != 0) {\n      *tempFilePtr = *(char **)(*tempFilePtr + 0xf0);\n      flag3 = flag1;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_binary_data_00105570"
        }
    },
    "used_tokens": 74371,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00103ba8",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_001031a5",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00103bd1",
            "FUN_00107cc0",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_0010312d",
            "FUN_0010336b",
            "FUN_00102e57",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_001033b0",
            "FUN_0010284b",
            "FUN_00102bb0",
            "FUN_00102f08"
        ],
        [
            "FUN_0010285f",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00107890",
            "FUN_00103ddc",
            "FUN_00105480",
            "FUN_00103df9",
            "FUN_00107c10",
            "FUN_00107690",
            "FUN_001031cf",
            "FUN_00105c00",
            "FUN_00103c60"
        ],
        [
            "FUN_00102e6f",
            "FUN_001033d6",
            "FUN_00105bc0",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103a78",
            "FUN_00107c80",
            "FUN_00102710",
            "FUN_001052a0",
            "FUN_001025a0"
        ],
        [
            "FUN_001058b0",
            "FUN_00105300",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_00102c25"
        ],
        [
            "FUN_00107650",
            "FUN_00103e95"
        ],
        [
            "FUN_00105af0"
        ],
        [
            "FUN_00105ae0"
        ],
        [
            "FUN_001028ed",
            "FUN_00105570"
        ],
        [
            "FUN_00105db0"
        ]
    ],
    "locked_functions": []
}