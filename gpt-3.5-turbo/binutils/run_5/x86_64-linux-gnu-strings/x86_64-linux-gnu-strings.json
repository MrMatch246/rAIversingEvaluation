{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102b11",
                "FUN_00103240",
                "FUN_0010293a",
                "FUN_001038b0",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_001038b0",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00103910": {
            "renaming": {
                "FUN_00103910": "print_error_message_00103910",
                "param_1": "error_type",
                "param_2": "error_code",
                "in_AL": "is_error_flag",
                "local_d8": "buffer_size",
                "local_d0": "buffer",
                "local_b8": "local_variable",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "error_type_copy",
                "local_78": "error_code_copy"
            },
            "code": "\nvoid print_error_message_00103910(undefined4 error_type,undefined4 error_code,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 param_9,undefined8 error_type0,undefined8 error_type1,undefined8 error_type2,\n                 undefined8 error_type3,undefined8 error_type4)\n\n{\n  char is_error_flag;\n  undefined4 buffer_size;\n  undefined4 local_d4;\n  undefined *buffer;\n  undefined *local_c8;\n  undefined local_variable [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 error_type_copy;\n  undefined4 error_code_copy;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (is_error_flag != '\\0') {\n    error_type_copy = error_type;\n    error_code_copy = error_code;\n    local_68 = param_3;\n    local_58 = param_4;\n    local_48 = param_5;\n    local_38 = param_6;\n    local_28 = param_7;\n    local_18 = param_8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_c8 = local_variable;\n  local_d4 = 0x30;\n  param_10_copy = error_type0;\n  param_11_copy = error_type1;\n  param_12_copy = error_type2;\n  param_13_copy = error_type3;\n  param_14_copy = error_type4;\n  print_error_message_00103910_001038b0(param_9,&buffer_size);\n  return;\n}\n\n",
            "called": [
                "FUN_001038b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103910",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "print_error_message_00103910"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00108340 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00108188);\n  FUNC_001039e0();\n  DAT_00108340 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_001039e0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a50",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_00103510": {
            "renaming": {
                "FUN_00103510": "print_formatted_data_00103510",
                "unaff_R14": "outputBuffer",
                "unaff_R15": "formatString",
                "in_stack_00000010": "enabledTag",
                "in_stack_00000038": "enabledFormat",
                "uVar1": "charValue",
                "uVar2": "formatCounter",
                "uVar3": "bufferIndex",
                "uVar4": "loopCounter",
                "bVar5": "isOutOfRange"
            },
            "code": "\n\n\nvoid printFormattedData_00103510(void)\n\n{\n  ulong charValue;\n  uint formatCounter;\n  ulong bufferIndex;\n  ulong loopCounter;\n  char *outputBuffer;\n  undefined8 formatString;\n  bool isOutOfRange;\n  undefined8 enabledTag;\n  undefined8 enabledFormat;\n  \ncode_r0x00103510:\n  loopCounter = 2;\njoined_r0x0010341b:\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",enabledTag);\n    }\n    if (DAT_00108372 == '\\0') {\n      outputBuffer[loopCounter] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    else {\n      FUN_0010286f(formatString);\n      outputBuffer[loopCounter] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    while (loopCounter = decode_00103520(), loopCounter != 0xffffffffffffffff) {\n      if (0xff < loopCounter) {\nLAB_0010348e:\n        adjust_data_values_00103810();\n        break;\n      }\n      if (loopCounter == 9) {\nLAB_00102438:\n        putc((int)loopCounter,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + loopCounter * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)loopCounter < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + loopCounter * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)loopCounter,_stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n    while (loopCounter = (ulong)DAT_00108374, formatString = enabledFormat, DAT_00108374 != 0) {\n      loopCounter = decode_00103520();\n      formatCounter = DAT_00108374;\n      if (loopCounter == 0xffffffffffffffff) goto LAB_001034be;\n      if (loopCounter < 0x100) {\n        if (loopCounter == 9) {\nLAB_001023f5:\n          *outputBuffer = (char)loopCounter;\n          if (formatCounter < 2) {\n            print_string_in_chunks_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + loopCounter * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)loopCounter < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + loopCounter * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *outputBuffer = (char)loopCounter;\n          if (formatCounter < 2) {\n            loopCounter = 1;\n            break;\n          }\n        }\n        loopCounter = decode_00103520();\n        formatCounter = DAT_00108374;\n        if (loopCounter == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < loopCounter) goto code_r0x001034d5;\n        if (loopCounter == 9) {\nLAB_001023bb:\n          outputBuffer[1] = (char)loopCounter;\n          if (formatCounter < 3) {\n            printFormattedData_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + loopCounter * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)loopCounter < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + loopCounter * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          outputBuffer[1] = (char)loopCounter;\n          if (formatCounter < 3) goto code_r0x00103510;\n        }\n        loopCounter = decode_00103520();\n        formatCounter = DAT_00108374;\n        if (loopCounter == 0xffffffffffffffff) {\nLAB_001034be:\n          free(outputBuffer);\n          return;\n        }\n        if (0xff < loopCounter) goto code_r0x001034d5;\n        if (loopCounter == 9) {\nLAB_00102381:\n          outputBuffer[2] = (char)loopCounter;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + loopCounter * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)loopCounter < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + loopCounter * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          outputBuffer[2] = (char)loopCounter;\n        }\n        if (3 < formatCounter) {\n          bufferIndex = 3;\n          do {\n            charValue = decode_00103520();\n            if (charValue == 0xffffffffffffffff) goto LAB_001034be;\n            if (0xff < charValue) goto code_r0x001034d5;\n            if (((charValue != 9) && ((*(ushort *)(&_sch_istable + charValue * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)charValue < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&_sch_istable + charValue * 2) & 0x40) == 0) {\n                process_data_001034d5();\n                return;\n              }\n            }\n            formatCounter = (int)bufferIndex + 1;\n            loopCounter = (ulong)formatCounter;\n            isOutOfRange = DAT_00108374 <= formatCounter;\n            outputBuffer[bufferIndex] = (char)charValue;\n            bufferIndex = loopCounter;\n            if (isOutOfRange) goto joined_r0x0010341b;\n          } while( true );\n        }\n        loopCounter = 3;\n        break;\n      }\ncode_r0x001034d5:\n      adjust_data_values_00103810();\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103510",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_data_00103510"
        },
        "FUN_00102b11": {
            "renaming": {
                "FUN_00102b11": "process_data_00102b11",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "stream1",
                "param_4": "stream2",
                "param_5": "param5",
                "param_6": "buffer",
                "uVar1": "byte",
                "uVar2": "byteValue",
                "uVar3": "byteValue2",
                "iVar4": "value",
                "uVar6": "dataCount",
                "uVar7": "subByteValue1",
                "uVar8": "subByteValue2",
                "uVar9": "count",
                "uVar10": "subByteValue",
                "local_80": "offset",
                "local_4c": "tempArray",
                "local_40": "tempValue",
                "local_3c": "byteValue3",
                "local_3b": "byteValue4",
                "local_3a": "byteValue5",
                "local_39": "byteValue6"
            },
            "code": "\n\n\nvoid processData_00102b11(undefined8 arg1,long arg2,undefined8 stream1,long stream2,uint param5,\n                 long buffer)\n\n{\n  undefined byte;\n  uint byteValue;\n  uint byteValue2;\n  int value;\n  uint uVar5;\n  ulong dataCount;\n  undefined subByteValue1;\n  undefined subByteValue2;\n  uint count;\n  undefined subByteValue;\n  ulong offset;\n  uint tempArray [3];\n  uint tempValue;\n  byte byteValue3;\n  byte byteValue4;\n  byte byteValue5;\n  byte byteValue6;\n  \n  count = 0;\n  tempValue = 0;\n  offset = 0;\n  dataCount = 0;\n  tempArray[0] = param5;\n  byteValue = 0;\n  while (uVar5 = (uint)dataCount, count < DAT_00108374) {\n    byteValue = read_byte_from_stream_0010290e(stream1,stream2,tempArray,&tempValue);\n    if (byteValue == 0xffffffff) break;\n    if (byteValue < 0x100) {\n      subByteValue = (undefined)byteValue;\n      if (byteValue == 9) {\n        if (count == 0) {\n          offset = (ulong)(tempValue - 1);\n        }\nLAB_00102c09:\n        count = count + 1;\n        *(undefined *)(buffer + dataCount) = subByteValue;\n        dataCount = (ulong)(uVar5 + 1);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)byteValue * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)byteValue < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)byteValue * 2) & 0x40) == 0)) goto LAB_00102b96;\n            goto LAB_00102bf3;\n          }\n          if (count == 0) {\n            offset = (ulong)(tempValue - 1);\n          }\n        }\n        else {\nLAB_00102bf3:\n          if (count == 0) {\n            offset = (ulong)(tempValue - 1);\n          }\n          if ((int)byteValue < 0x7f) goto LAB_00102c09;\n        }\n        if ((int)byteValue < 0xc0) goto LAB_00102b96;\n        byteValue2 = read_byte_from_stream_0010290e(stream1,stream2,tempArray,&tempValue);\n        if (byteValue2 == 0xffffffff) {\nLAB_00102dee:\n          byteValue = 0xffffffff;\n          break;\n        }\n        subByteValue1 = (undefined)byteValue2;\n        if ((byteValue2 & 0xc0) == 0x80) {\n          if ((byteValue & 0x20) == 0) {\n            if (DAT_00108350 == 5) goto LAB_00102c67;\n            count = count + 1;\n            *(undefined *)(buffer + dataCount) = subByteValue;\n            *(undefined *)(buffer + (ulong)(uVar5 + 1)) = subByteValue1;\n            dataCount = (ulong)(uVar5 + 2);\n            byteValue = byteValue2;\n          }\n          else {\n            byteValue2 = read_byte_from_stream_0010290e(stream1,stream2,tempArray,&tempValue);\n            if (byteValue2 == 0xffffffff) goto LAB_00102dee;\n            subByteValue2 = (undefined)byteValue2;\n            if ((byteValue2 & 0xc0) == 0x80) {\n              if ((byteValue & 0x10) == 0) {\n                if (DAT_00108350 == 5) goto LAB_00102ce5;\n                count = count + 1;\n                *(undefined *)(buffer + dataCount) = subByteValue;\n                dataCount = (ulong)(uVar5 + 3);\n                *(undefined *)(buffer + (ulong)(uVar5 + 1)) = subByteValue1;\n                *(undefined *)(buffer + (ulong)(uVar5 + 2)) = subByteValue2;\n                byteValue = byteValue2;\n              }\n              else {\n                byteValue = read_byte_from_stream_0010290e(stream1,stream2,tempArray,&tempValue);\n                if (byteValue == 0xffffffff) goto LAB_00102dee;\n                byte = (undefined)byteValue;\n                if ((byteValue & 0xc0) == 0x80) {\n                  if (DAT_00108350 == 5) {\n                    *(undefined *)(stream2 + (ulong)tempArray[0]) = byte;\n                    *(undefined *)(stream2 + (ulong)(tempArray[0] + 1)) = subByteValue1;\n                    *(undefined *)(stream2 + (ulong)(tempArray[0] + 2)) = subByteValue2;\n                    goto LAB_00102db9;\n                  }\n                  count = count + 1;\n                  *(undefined *)(buffer + dataCount) = subByteValue;\n                  *(undefined *)(buffer + (ulong)(uVar5 + 1)) = subByteValue1;\n                  dataCount = (ulong)(uVar5 + 4);\n                  *(undefined *)(buffer + (ulong)(uVar5 + 2)) = subByteValue2;\n                  *(undefined *)(buffer + (ulong)(uVar5 + 3)) = byte;\n                }\n                else {\n                  *(undefined *)(stream2 + (ulong)tempArray[0]) = byte;\n                  *(undefined *)(stream2 + (ulong)(tempArray[0] + 1)) = subByteValue2;\n                  *(undefined *)(stream2 + (ulong)(tempArray[0] + 2)) = subByteValue1;\nLAB_00102db9:\n                  tempArray[0] = tempArray[0] + 3;\n                  dataCount = 0;\n                  count = 0;\n                }\n              }\n            }\n            else {\nLAB_00102ce5:\n              dataCount = 0;\n              count = 0;\n              *(undefined *)(stream2 + (ulong)tempArray[0]) = subByteValue2;\n              *(undefined *)(stream2 + (ulong)(tempArray[0] + 1)) = subByteValue1;\n              tempArray[0] = tempArray[0] + 2;\n              byteValue = byteValue2;\n            }\n          }\n        }\n        else {\nLAB_00102c67:\n          count = 0;\n          *(undefined *)(stream2 + (ulong)tempArray[0]) = subByteValue1;\n          dataCount = 0;\n          tempArray[0] = tempArray[0] + 1;\n          byteValue = byteValue2;\n        }\n      }\n    }\n    else {\nLAB_00102b96:\n      count = 0;\n      dataCount = 0;\n    }\n  }\n  if (count < DAT_00108374) {\n    if (byteValue != 0xffffffff) {\nLAB_0010308d:\n      processData_00102b11(arg1,(ulong)tempValue + arg2,stream1,stream2,tempArray[0],buffer);\n    }\n  }\n  else {\n    byteValue = 0;\n    print_if_enabled_00103890(arg1,offset + arg2);\n    while (byteValue < uVar5) {\n      dataCount = (ulong)byteValue;\n      if (*(byte *)(dataCount + buffer) < 0x7f) {\n        byteValue = byteValue + 1;\n        putc((uint)*(byte *)(dataCount + buffer),_stdout);\n      }\n      else {\n        value = decode_and_display_unicode_0010293a();\n        byteValue = byteValue + value;\n      }\n    }\n    while( true ) {\n      byteValue = read_byte_from_stream_0010290e(stream1,stream2,tempArray,&tempValue);\n      if (byteValue == 0xffffffff) break;\n      if (0xff < byteValue) {\nLAB_00103049:\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(DAT_00108358,_stdout);\n        }\n        goto LAB_0010308d;\n      }\n      if (byteValue == 9) {\nLAB_00102ed4:\n        putc(byteValue,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)byteValue * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)byteValue < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)byteValue * 2) & 0x40) == 0)) goto LAB_00103049;\n            goto LAB_00102ecf;\n          }\n        }\n        else {\nLAB_00102ecf:\n          if ((int)byteValue < 0x7f) goto LAB_00102ed4;\n        }\n        if ((int)byteValue < 0xc0) goto LAB_00103049;\n        byteValue3 = (byte)byteValue;\n        value = read_byte_from_stream_0010290e(stream1,stream2,tempArray,&tempValue);\n        if (value == -1) break;\n        byteValue4 = (byte)value;\n        if ((byteValue4 & 0xc0) != 0x80) {\nLAB_00102f32:\n          dataCount = (ulong)tempArray[0];\n          tempArray[0] = tempArray[0] + 1;\n          *(byte *)(stream2 + dataCount) = byteValue4;\njoined_r0x00102f51:\n          if (DAT_00108358 == (char *)0x0) {\n            putc(10,_stdout);\n          }\n          else {\n            fputs(DAT_00108358,_stdout);\n          }\n          goto LAB_0010308d;\n        }\n        if ((byteValue3 & 0x20) == 0) {\n          if (DAT_00108350 != 5) goto LAB_0010300e;\n          goto LAB_00102f32;\n        }\n        value = read_byte_from_stream_0010290e(stream1,stream2,tempArray,&tempValue);\n        if (value == -1) break;\n        byteValue5 = (byte)value;\n        if ((byteValue5 & 0xc0) != 0x80) {\nLAB_00102f94:\n          *(byte *)(stream2 + (ulong)tempArray[0]) = byteValue5;\n          byteValue = tempArray[0] + 1;\n          tempArray[0] = tempArray[0] + 2;\nLAB_00102ff2:\n          *(byte *)(stream2 + (ulong)byteValue) = byteValue4;\n          goto joined_r0x00102f51;\n        }\n        if ((byteValue3 & 0x10) != 0) {\n          value = read_byte_from_stream_0010290e(stream1,stream2,tempArray,&tempValue);\n          if (value != -1) {\n            byteValue6 = (byte)value;\n            if (((byteValue6 & 0xc0) == 0x80) && (DAT_00108350 != 5)) goto LAB_0010300e;\n            *(byte *)(stream2 + (ulong)tempArray[0]) = byteValue6;\n            *(byte *)(stream2 + (ulong)(tempArray[0] + 1)) = byteValue5;\n            byteValue = tempArray[0] + 2;\n            tempArray[0] = tempArray[0] + 3;\n            goto LAB_00102ff2;\n          }\n          break;\n        }\n        if (DAT_00108350 == 5) goto LAB_00102f94;\nLAB_0010300e:\n        decode_and_display_unicode_0010293a(&byteValue3);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010290e",
                "FUN_00102b11",
                "fputs",
                "FUN_0010293a",
                "FUN_00103890",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102b11",
            "calling": [
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "imported": false,
            "current_name": "process_data_00102b11"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_0010293a"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103a10();\n  return;\n}\n\n",
            "called": [
                "FUN_00103a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a90",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_0010293a": {
            "renaming": {
                "FUN_0010293a": "decode_and_display_unicode_0010293a",
                "param_1": "input_data",
                "bVar1": "option",
                "uVar2": "first_data",
                "iVar3": "is_terminal",
                "uVar4": "output_length",
                "uVar5": "second_data",
                "pbVar6": "end_pointer"
            },
            "code": "\n\n\nuint decode_and_display_unicode_0010293a(byte *input_data)\n\n{\n  byte option;\n  uint first_data;\n  int is_terminal;\n  uint output_length;\n  uint second_data;\n  byte *end_pointer;\n  \n  output_length = 2;\n  option = *input_data & 0x30;\n  if ((option != 0x10) && (output_length = 3, option != 0x20)) {\n    output_length = (-(uint)(option == 0) & 0xfffffffe) + 4;\n  }\n  if (DAT_00108350 == 3) {\n    end_pointer = input_data + output_length;\n    putc(0x3c,_stdout);\n    printf(\"0x\");\n    do {\n      option = *input_data;\n      input_data = input_data + 1;\n      printf(\"%02x\",(ulong)option);\n    } while (end_pointer != input_data);\n    putc(0x3e,_stdout);\n    return output_length;\n  }\n  if (DAT_00108350 < 4) {\n    if (DAT_00108350 == 1) {\n      printf(\"%.1s\",input_data);\n      return output_length;\n    }\n    if (DAT_00108350 == 2) {\nLAB_001029cd:\n      first_data = (uint)input_data[1];\n      second_data = (uint)*input_data;\n      if (output_length == 3) {\n        printf(\"\\u%02x%02x\",(ulong)((second_data & 0xf) << 4 | (int)first_data >> 2 & 0xfU),\n               (ulong)((first_data & 3) << 6 | input_data[2] & 0x3f));\n      }\n      else if (output_length == 4) {\n        printf(\"\\u%02x%02x%02x\",(ulong)((second_data & 7) << 6 | (int)first_data >> 2 & 0xfU),\n               (ulong)((first_data & 3) << 6 | (int)(uint)input_data[2] >> 2 & 0xfU),\n               (ulong)((input_data[2] & 3) << 6 | input_data[3] & 0x3f));\n      }\n      else {\n        printf(\"\\u%02x%02x\",(ulong)((int)(uint)*input_data >> 2 & 7),\n               (ulong)((second_data & 3) << 6 | input_data[1] & 0x3f));\n      }\n      if (DAT_00108350 != 4) {\n        return output_length;\n      }\n      is_terminal = isatty(1);\n      if (is_terminal == 0) {\n        return output_length;\n      }\n      printf(\"\\x1b[0m\");\n      return output_length;\n    }\n  }\n  else if (DAT_00108350 == 4) {\n    is_terminal = isatty(1);\n    if (is_terminal != 0) {\n      printf(\"\\x1b[31;47m\");\n    }\n    goto LAB_001029cd;\n  }\n  fwrite(\"ICE: unexpected unicode display type\\n\",1,0x25,_stderr);\n  return output_length;\n}\n\n",
            "called": [
                "printf",
                "isatty",
                "fwrite",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010293a",
            "calling": [
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "imported": false,
            "current_name": "decode_and_display_unicode_0010293a"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00103240",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_001038b0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103520": {
            "renaming": {
                "FUN_00103520": "decode_00103520",
                "param_1": "file",
                "param_2": "count",
                "param_3": "remaining",
                "param_4": "buffer",
                "bVar1": "byteValue",
                "pbVar2": "bytePointer",
                "uVar3": "result",
                "uVar4": "tempResult",
                "uVar5": "output",
                "iVar6": "iteration",
                "iVar7": "numIterations"
            },
            "code": "\nulong decode_00103520(_IO_FILE *file,long *count,int *remaining,byte **buffer)\n\n{\n  byte byteValue;\n  byte *bytePointer;\n  uint result;\n  ulong tempResult;\n  ulong output;\n  int iteration;\n  int numIterations;\n  \n  numIterations = DAT_0010834c;\n  if (DAT_0010834c < 1) {\n    output = 0;\n    if (DAT_00108360 == 'L') {\n      output = extract_bits_00102771();\n      return output;\n    }\n    goto LAB_0010361f;\n  }\n  if (file == (_IO_FILE *)0x0) {\n    output = 0;\n    iteration = 0;\n    do {\n      if (*remaining == 0) {\n        return 0xffffffffffffffff;\n      }\n      iteration = iteration + 1;\n      *remaining = *remaining + -1;\n      bytePointer = *buffer;\n      *buffer = bytePointer + 1;\n      byteValue = *bytePointer;\n      *count = *count + 1;\n      output = output << 8 | (ulong)byteValue;\n    } while (iteration != numIterations);\n  }\n  else if (*remaining == 0) {\n    bytePointer = (byte *)file->_IO_read_ptr;\n    if (file->_IO_read_end <= bytePointer) {\n      result = __uflow(file);\n      output = (ulong)(result & 0xff);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      goto LAB_001036aa;\n    }\n    file->_IO_read_ptr = (char *)(bytePointer + 1);\n    output = (ulong)*bytePointer;\n    *count = *count + 1;\n    iteration = 0;\n    if (numIterations == 1) goto LAB_00103610;\nLAB_00103574:\n    bytePointer = (byte *)file->_IO_read_ptr;\n    if (bytePointer < file->_IO_read_end) {\n      file->_IO_read_ptr = (char *)(bytePointer + 1);\n      byteValue = *bytePointer;\n      *count = *count + 1;\n      output = output << 8 | (ulong)byteValue;\n      if (DAT_0010834c < 3) goto LAB_00103610;\nLAB_001035a1:\n      bytePointer = (byte *)file->_IO_read_ptr;\n      if (bytePointer < file->_IO_read_end) {\n        file->_IO_read_ptr = (char *)(bytePointer + 1);\n        byteValue = *bytePointer;\n        *count = *count + 1;\n        output = output << 8 | (ulong)byteValue;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n      }\n      else {\n        result = __uflow(file);\n        if (result == 0xffffffff) {\n          return 0xffffffffffffffff;\n        }\n        tempResult = (ulong)(result & 0xff);\nLAB_00103717:\n        *count = *count + 1;\n        output = output << 8 | tempResult;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n        iteration = *remaining;\n      }\n      numIterations = 3;\n      while( true ) {\n        if (iteration == 0) {\n          while (bytePointer = (byte *)file->_IO_read_ptr, bytePointer < file->_IO_read_end) {\n            numIterations = numIterations + 1;\n            file->_IO_read_ptr = (char *)(bytePointer + 1);\n            byteValue = *bytePointer;\n            *count = *count + 1;\n            output = output << 8 | (ulong)byteValue;\n            if (DAT_0010834c <= numIterations) goto LAB_00103610;\n          }\n          result = __uflow(file);\n          if (result == 0xffffffff) {\n            return 0xffffffffffffffff;\n          }\n          tempResult = (ulong)(result & 0xff);\n        }\n        else {\n          bytePointer = *buffer;\n          *remaining = iteration + -1;\n          *buffer = bytePointer + 1;\n          tempResult = (ulong)*bytePointer;\n        }\n        *count = *count + 1;\n        numIterations = numIterations + 1;\n        output = output << 8 | tempResult;\n        if (DAT_0010834c <= numIterations) break;\n        iteration = *remaining;\n      }\n    }\n    else {\n      result = __uflow(file);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      tempResult = (ulong)(result & 0xff);\nLAB_001036dd:\n      *count = *count + 1;\n      output = output << 8 | tempResult;\n      if (2 < DAT_0010834c) {\n        iteration = *remaining;\n        if (iteration == 0) goto LAB_001035a1;\n        bytePointer = *buffer;\n        *remaining = iteration + -1;\n        *buffer = bytePointer + 1;\n        tempResult = (ulong)*bytePointer;\n        goto LAB_00103717;\n      }\n    }\n  }\n  else {\n    bytePointer = *buffer;\n    *remaining = *remaining + -1;\n    *buffer = bytePointer + 1;\n    output = (ulong)*bytePointer;\nLAB_001036aa:\n    *count = *count + 1;\n    if (1 < DAT_0010834c) {\n      iteration = *remaining;\n      if (iteration == 0) goto LAB_00103574;\n      bytePointer = *buffer;\n      *remaining = iteration + -1;\n      *buffer = bytePointer + 1;\n      tempResult = (ulong)*bytePointer;\n      goto LAB_001036dd;\n    }\n  }\nLAB_00103610:\n  if (DAT_00108360 == 'L') {\n    output = extract_bits_00102771();\n    return output;\n  }\nLAB_0010361f:\n  if (DAT_00108360 == 'l') {\n    output = output >> 8 & 0xff | (output & 0xff) << 8;\n  }\n  return output;\n}\n\n",
            "called": [
                "__uflow",
                "FUN_00102771"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103520",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "decode_00103520"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103240": {
            "renaming": {
                "FUN_00103240": "print_formatted_data_00103240",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "pbVar1": "bytePointer1",
                "bVar2": "byteVar",
                "cVar3": "charVar",
                "lVar4": "longVar",
                "uVar5": "uintVar",
                "iVar6": "intVar",
                "__ptr": "pointer",
                "__s": "string",
                "uVar7": "ulongVar1",
                "uVar8": "ulongVar2",
                "uVar9": "uintVar1",
                "uVar10": "ulongVar3",
                "uVar11": "uintVar2",
                "bVar12": "boolVar",
                "local_80": "localVar1",
                "local_60": "localVar2",
                "local_54": "localVar3",
                "local_50": "localArray1",
                "local_3d": "localArray2"
            },
            "code": "\n\n\nvoid printFormattedData_00103240(long param1,long param2,long param3,int param4,byte *param5)\n\n{\n  byte *bytePointer1;\n  byte byteVar;\n  char charVar;\n  long longVar;\n  uint uintVar;\n  int intVar;\n  void *pointer;\n  char *string;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  uint uintVar1;\n  ulong ulongVar3;\n  uint uintVar2;\n  bool boolVar;\n  long localVar1;\n  byte *localVar2;\n  int localVar3;\n  long localArray1 [2];\n  undefined localArray2 [13];\n  \n  localVar2 = param5;\n  localVar3 = param4;\n  localArray1[0] = param3;\n  if (DAT_00108350 == 0) {\n    string = (char *)xmalloc(DAT_00108374 + 1);\n    do {\n      while (longVar = localArray1[0], ulongVar2 = (ulong)DAT_00108374, DAT_00108374 == 0) {\njoined_r0x001034ef:\n        if (DAT_00108371 != '\\0') {\n          printf(\"%s: \",param1);\n        }\n        if (DAT_00108372 == '\\0') {\n          string[ulongVar2] = '\\0';\n          fputs(string,_stdout);\n        }\n        else {\n          print_formatted_value_0010286f(longVar);\n          string[ulongVar2] = '\\0';\n          fputs(string,_stdout);\n        }\n        while (ulongVar2 = decode_00103520(param2,localArray1,&localVar3,&localVar2),\n              ulongVar2 != 0xffffffffffffffff) {\n          if (0xff < ulongVar2) {\nLAB_0010348e:\n            adjust_data_values_00103810(ulongVar2,localArray1,&localVar3,&localVar2);\n            break;\n          }\n          if (ulongVar2 == 9) {\nLAB_00102438:\n            putc((int)ulongVar2,_stdout);\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + ulongVar2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)ulongVar2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + ulongVar2 * 2) & 0x40) == 0))))\n              goto LAB_0010348e;\n              goto LAB_00102438;\n            }\n            putc((int)ulongVar2,_stdout);\n          }\n        }\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(DAT_00108358,_stdout);\n        }\n      }\n      ulongVar1 = decode_00103520(param2,localArray1,&localVar3,&localVar2);\n      uintVar1 = DAT_00108374;\n      if (ulongVar1 == 0xffffffffffffffff) goto LAB_001034be;\n      if (ulongVar1 < 0x100) {\n        if (ulongVar1 == 9) {\nLAB_001023f5:\n          *string = (char)ulongVar1;\n          if (uintVar1 < 2) {\n            print_string_in_chunks_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + ulongVar1 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)ulongVar1 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + ulongVar1 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *string = (char)ulongVar1;\n          if (uintVar1 < 2) {\n            ulongVar2 = 1;\n            goto joined_r0x001034ef;\n          }\n        }\n        ulongVar1 = decode_00103520(param2,localArray1,&localVar3,&localVar2);\n        uintVar1 = DAT_00108374;\n        if (ulongVar1 == 0xffffffffffffffff) goto LAB_001034be;\n        if (ulongVar1 < 0x100) {\n          if (ulongVar1 == 9) {\nLAB_001023bb:\n            string[1] = (char)ulongVar1;\n            if (uintVar1 < 3) {\n              print_formatted_data_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + ulongVar1 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)ulongVar1 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + ulongVar1 * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            string[1] = (char)ulongVar1;\n            if (uintVar1 < 3) {\n              ulongVar2 = 2;\n              goto joined_r0x001034ef;\n            }\n          }\n          ulongVar1 = decode_00103520(param2,localArray1,&localVar3,&localVar2);\n          uintVar1 = DAT_00108374;\n          if (ulongVar1 == 0xffffffffffffffff) {\nLAB_001034be:\n            free(string);\n            return;\n          }\n          if (ulongVar1 < 0x100) {\n            if (ulongVar1 == 9) {\nLAB_00102381:\n              string[2] = (char)ulongVar1;\n            }\n            else {\n              if ((*(ushort *)(&_sch_istable + ulongVar1 * 2) & 0x10) == 0) {\n                if (((DAT_00108360 != 'S') || ((long)ulongVar1 < 0x80)) &&\n                   ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + ulongVar1 * 2) & 0x40) == 0))\n                   )) goto code_r0x001034d5;\n                goto LAB_00102381;\n              }\n              string[2] = (char)ulongVar1;\n            }\n            if (uintVar1 < 4) {\n              ulongVar2 = 3;\n            }\n            else {\n              ulongVar3 = 3;\n              do {\n                ulongVar1 = decode_00103520(param2,localArray1,&localVar3,&localVar2);\n                if (ulongVar1 == 0xffffffffffffffff) goto LAB_001034be;\n                if (0xff < ulongVar1) goto code_r0x001034d5;\n                if (((ulongVar1 != 9) && ((*(ushort *)(&_sch_istable + ulongVar1 * 2) & 0x10) == 0)) &&\n                   ((DAT_00108360 != 'S' || ((long)ulongVar1 < 0x80)))) {\n                  if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                  if ((*(ushort *)(&_sch_istable + ulongVar1 * 2) & 0x40) == 0) {\n                    process_data_001034d5();\n                    return;\n                  }\n                }\n                uintVar1 = (int)ulongVar3 + 1;\n                ulongVar2 = (ulong)uintVar1;\n                boolVar = uintVar1 < DAT_00108374;\n                string[ulongVar3] = (char)ulongVar1;\n                ulongVar3 = ulongVar2;\n              } while (boolVar);\n            }\n            goto joined_r0x001034ef;\n          }\n        }\n      }\ncode_r0x001034d5:\n      adjust_data_values_00103810(ulongVar1,localArray1,&localVar3,&localVar2);\n    } while( true );\n  }\n  if (param5 != (byte *)0x0) {\n    ulongVar2 = (ulong)param4;\n    localVar1 = param3;\n    if (param1 != 0) {\nLAB_0010249c:\n      uintVar1 = DAT_00108374;\n      charVar = DAT_00108373;\n      intVar = DAT_00108350;\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        if (ulongVar2 != 0) {\n          ulongVar1 = 0;\n          uintVar2 = 0;\n          ulongVar3 = 0;\n          do {\n            while( true ) {\n              byteVar = param5[ulongVar3];\n              if (byteVar != 9) break;\nLAB_0010252e:\n              uintVar = 1;\nLAB_00102533:\n              if (uintVar2 == 0) {\n                ulongVar1 = ulongVar3;\n              }\n              uintVar2 = uintVar2 + 1;\n              if (uintVar1 <= uintVar2) goto LAB_001026a9;\n              ulongVar3 = ulongVar3 + uintVar;\n              if (ulongVar2 <= ulongVar3) goto LAB_00102551;\n            }\n            if ((*(ushort *)(&_sch_istable + (long)(int)(uint)byteVar * 2) & 0x10) != 0) {\n              if (0x7e < byteVar) goto LAB_0010264e;\n              goto LAB_0010252e;\n            }\n            if (0x7f < byteVar) {\nLAB_0010264e:\n              if ((byteVar < 0xc0) ||\n                 (uintVar = check_byte_sequence_001028b2(param5 + ulongVar3,ulongVar2 - ulongVar3), uintVar == 0))\n              goto LAB_0010269a;\n              if (intVar == 5) goto LAB_00102688;\n              goto LAB_00102533;\n            }\n            if (((charVar != '\\0') &&\n                ((*(ushort *)(&_sch_istable + (long)(int)(uint)byteVar * 2) & 0x40) != 0)) &&\n               (byteVar != 0x7f)) goto LAB_0010252e;\nLAB_0010269a:\n            uintVar = 1;\nLAB_00102688:\n            ulongVar3 = ulongVar3 + uintVar;\n            if (ulongVar2 <= ulongVar3) goto LAB_001026a1;\n            uintVar2 = 0;\n          } while( true );\n        }\n        goto LAB_00102551;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_buffer\\n\",1,0x2b,_stderr);\n  }\n  if (param2 != 0) {\n    if (param1 != 0) {\nLAB_0010255f:\n      longVar = localArray1[0];\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        pointer = (void *)xmalloc(DAT_00108374 * 4 + 1);\n        process_data_00102b11(param1,longVar,param2,localArray2,0,pointer);\n        free(pointer);\n        return;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_stream\\n\",1,0x2b,_stderr);\n  }\n  return;\nLAB_001026a1:\n  if (uintVar1 != 0) {\nLAB_00102551:\n    if (param2 == 0) {\n      return;\n    }\n    goto LAB_0010255f;\n  }\nLAB_001026a9:\n  print_if_enabled_00103890(param1,localVar1 + ulongVar1);\n  for (; bytePointer1 = param5 + ulongVar1, ulongVar1 < ulongVar2; ulongVar1 = ulongVar1 + uintVar1) {\n    byteVar = *bytePointer1;\n    if (byteVar == 9) {\nLAB_00102708:\n      putc((uint)byteVar,_stdout);\n      uintVar1 = 1;\n    }\n    else {\n      if ((*(ushort *)(&_sch_istable + (long)(int)(uint)byteVar * 2) & 0x10) == 0) {\n        if ((DAT_00108360 != 'S') || (byteVar < 0x80)) {\n          if ((DAT_00108373 != '\\0') &&\n             ((*(ushort *)(&_sch_istable + (long)(int)(uint)byteVar * 2) & 0x40) != 0))\n          goto LAB_00102703;\n          break;\n        }\n      }\n      else {\nLAB_00102703:\n        if (byteVar < 0x7f) goto LAB_00102708;\n      }\n      intVar = check_byte_sequence_001028b2(bytePointer1,ulongVar2 - ulongVar1);\n      if ((intVar == 0) || (DAT_00108350 == 5)) break;\n      uintVar1 = decode_and_display_unicode_0010293a(bytePointer1);\n    }\n  }\n  if (DAT_00108358 == (char *)0x0) {\n    putc(10,_stdout);\n  }\n  else {\n    fputs(DAT_00108358,_stdout);\n  }\n  localVar1 = localVar1 + ulongVar1;\n  ulongVar2 = ulongVar2 - ulongVar1;\n  param5 = bytePointer1;\n  goto LAB_0010249c;\n}\n\n",
            "called": [
                "FUN_00102b11",
                "FUN_001028b2",
                "fputs",
                "xmalloc",
                "FUN_0010293a",
                "FUN_00103890",
                "fwrite",
                "free",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103240",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "print_formatted_data_00103240"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00104a60": {
            "renaming": {
                "FUN_00104a60": "handle_error_and_exit_00104a60",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "initialize_variables",
                "local_d8": "length",
                "local_d4": "size",
                "local_d0": "buffer_pointer",
                "local_c8": "local_buffer",
                "local_b8": "local_array",
                "local_b0": "param_10",
                "local_a8": "param_11",
                "local_a0": "param_12",
                "local_98": "param_13",
                "local_90": "param_14",
                "local_88": "param_1",
                "local_78": "param_2",
                "local_68": "param_3",
                "local_58": "param_4",
                "local_48": "param_5",
                "local_38": "param_6",
                "local_28": "param_7",
                "local_18": "param_8"
            },
            "code": "\n\n\nvoid handle_error_and_exit_00104a60(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char initialize_variables;\n  undefined4 length;\n  undefined4 size;\n  undefined *buffer_pointer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param_10;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 param_1;\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 param_5;\n  undefined4 param_6;\n  undefined4 param_7;\n  undefined4 param_8;\n  \n  if (initialize_variables != '\\0') {\n    param_1 = error_code;\n    param_2 = param_2;\n    param_3 = param_3;\n    param_4 = param_4;\n    param_5 = param_5;\n    param_6 = param_6;\n    param_7 = param_7;\n    param_8 = param_8;\n  }\n  buffer_pointer = &stack0x00000008;\n  length = 8;\n  local_buffer = local_array;\n  size = 0x30;\n  param_10 = error_code0;\n  param_11 = error_code1;\n  param_12 = error_code2;\n  param_13 = error_code3;\n  param_14 = error_code4;\n  print_error_message_001038b0(error_message,&length);\n  xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n",
            "called": [
                "FUN_001038b0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a60",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "handle_error_and_exit_00104a60"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104af4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00103a10": {
            "renaming": {
                "FUN_00103a10": "FUNC_00103a10"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103a34) */\n/* WARNING: Removing unreachable block (ram,0x00103a40) */\n\nvoid FUNC_00103a10(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103a10",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00103a10"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_0010282b": {
            "renaming": {
                "FUN_0010282b": "initialize_data_0010282b",
                "in_RAX": "dataPointer",
                "in_RCX": "bufferPointer",
                "unaff_RBX": "inputValue"
            },
            "code": "\nvoid initializeData_0010282b(void)\n\n{\n  undefined4 *dataPointer;\n  undefined8 *bufferPointer;\n  undefined8 inputValue;\n  \n  DAT_00108348 = (undefined)((ulong)inputValue >> 8);\n  DAT_0010834a = (undefined)((ulong)inputValue >> 0x18);\n  DAT_00108349 = (undefined)((ulong)inputValue >> 0x10);\n  *dataPointer = 3;\n  *bufferPointer = &DAT_00108348;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010282b",
            "calling": [
                "FUN_00103810"
            ],
            "imported": false,
            "current_name": "initialize_data_0010282b"
        },
        "FUN_0010286f": {
            "renaming": {
                "FUN_0010286f": "print_formatted_value_0010286f",
                "param_1": "value"
            },
            "code": "\nvoid printFormattedValue_0010286f(undefined8 value)\n\n{\n  if (DAT_00108354 == 10) {\n    printf(\"%7ld \",value);\n    return;\n  }\n  if (DAT_00108354 != 0x10) {\n    if (DAT_00108354 == 8) {\n      printf(\"%7lo \",value);\n      return;\n    }\n    return;\n  }\n  printf(\"%7lx \",value);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010286f",
            "calling": [
                "FUN_00102853",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_value_0010286f"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(parse_strings_00103aa0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00103aa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001039b0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_001038b0": {
            "renaming": {
                "FUN_001038b0": "print_error_message_001038b0",
                "param_1": "errorMessage",
                "param_2": "varArgs",
                "fflush": "flushStandardOutput",
                "fprintf": "printToStandardError",
                "vfprintf": "printVariableArgumentsToError",
                "putc": "writeCharacterToError"
            },
            "code": "\n\n\nvoid printErrorMessage_001038b0(char *errorMessage,__gnuc_va_list varArgs)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_00108378);\n  vfprintf(_stderr,errorMessage,varArgs);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "fprintf",
                "fflush",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001038b0",
            "calling": [
                "FUN_00104a60",
                "FUN_00103910"
            ],
            "imported": false,
            "current_name": "print_error_message_001038b0"
        },
        "FUN_0010290e": {
            "renaming": {
                "FUN_0010290e": "read_byte_from_stream_0010290e",
                "param_1": "stream",
                "param_2": "offset",
                "param_3": "remainingBytes",
                "param_4": "byteCount",
                "pbVar1": "streamBuffer",
                "uVar2": "result"
            },
            "code": "\nuint readByteFromStream_0010290e(_IO_FILE *stream,long offset,uint *remainingBytes,int *byteCount)\n\n{\n  byte *streamBuffer;\n  uint result;\n  \n  if (*remainingBytes != 0) {\n    result = *remainingBytes - 1;\n    *remainingBytes = result;\n    return (uint)*(byte *)(offset + (ulong)result);\n  }\n  *byteCount = *byteCount + 1;\n  streamBuffer = (byte *)stream->_IO_read_ptr;\n  if (stream->_IO_read_end <= streamBuffer) {\n    result = __uflow(stream);\n    return result;\n  }\n  stream->_IO_read_ptr = (char *)(streamBuffer + 1);\n  return (uint)*streamBuffer;\n}\n\n",
            "called": [
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010290e",
            "calling": [
                "FUN_00102b11"
            ],
            "imported": false,
            "current_name": "read_byte_from_stream_0010290e"
        },
        "FUN_00103890": {
            "renaming": {
                "FUN_00103890": "print_if_enabled_00103890",
                "param_1": "message",
                "param_2": "value",
                "print_formatted_value_0010286f": "print_value"
            },
            "code": "\nvoid print_if_enabled_00103890(undefined8 message,undefined8 value)\n\n{\n  if (DAT_00108371 != '\\0') {\n    printf(\"%s: \",message);\n  }\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  print_value(value);\n  return;\n}\n\n",
            "called": [
                "FUN_00102853"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103890",
            "calling": [
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "imported": false,
            "current_name": "print_if_enabled_00103890"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103810": {
            "renaming": {
                "FUN_00103810": "adjust_data_values_00103810",
                "param_1": "value",
                "param_2": "dataPtr",
                "param_3": "counterPtr",
                "param_4": "resultPtr",
                "iVar1": "counterValue",
                "lVar2": "startValue",
                "iVar3": "newCounterValue",
                "initialize_data_0010282b": "initializeData"
            },
            "code": "\n\n\nvoid adjustDataValues_00103810(undefined8 value,long *dataPtr,int *counterPtr,long *resultPtr)\n\n{\n  int counterValue;\n  long startValue;\n  int newCounterValue;\n  \n  startValue = (long)DAT_0010834c;\n  if (DAT_0010834c < 2) {\n    return;\n  }\n  newCounterValue = DAT_0010834c + -1;\n  *dataPtr = *dataPtr - (long)newCounterValue;\n  counterValue = *counterPtr;\n  if (counterValue == 0) {\n    if (DAT_00108360 != 'l') {\n      if (DAT_00108360 < 'm') {\n        if (DAT_00108360 == 'b') {\n          DAT_00108348 = (undefined)value;\n          *counterPtr = 1;\n        }\n        else if (DAT_00108360 < 'c') {\n          if (DAT_00108360 == 'B') {\n            _DAT_00108349 = (ushort)value << 8 | (ushort)value >> 8;\n            DAT_00108348 = (undefined)((ulong)value >> 0x10);\n            *counterPtr = 3;\n          }\n          else if (DAT_00108360 == 'L') {\n            initializeData();\n            return;\n          }\n        }\n      }\n      *resultPtr = (long)&DAT_00108348;\n      return;\n    }\n    DAT_00108348 = (undefined)((ulong)value >> 8);\n    *counterPtr = 1;\n    *resultPtr = (long)&DAT_00108348;\n  }\n  else {\n    *resultPtr = *resultPtr + (1 - startValue);\n    *counterPtr = newCounterValue + counterValue;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_001027e2",
                "FUN_0010282b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103810",
            "calling": [
                "FUN_001034d5",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "adjust_data_values_00103810"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001030c0"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "FUN_001030c0": {
            "renaming": {
                "FUN_001030c0": "print_usage_001030c0",
                "param_1": "file",
                "param_2": "exitCode",
                "lVar1": "supportedTargets",
                "pcVar2": "messageFormat",
                "__ptr": "targetList",
                "plVar3": "targetPtr"
            },
            "code": "\nvoid printUsage_001030c0(FILE *file,int exitCode)\n\n{\n  long supportedTargets;\n  char *messageFormat;\n  long *targetList;\n  long *targetPtr;\n  \n  supportedTargets = DAT_00108378;\n  messageFormat = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(file,messageFormat,supportedTargets);\n  messageFormat = (char *)dcgettext(0,\" Display printable strings in [file(s)] (stdin by default)\\n\",5);\n  fprintf(file,messageFormat);\n  messageFormat = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,messageFormat);\n  messageFormat = (char *)dcgettext(0,\n                             \"  -a - --all                Scan the entire file, not just the data section [default]\\n  -d --data                 Only scan the data sections in the file\\n\"\n                             ,5);\n  fprintf(file,messageFormat);\n  messageFormat = (char *)dcgettext(0,\n                             \"  -f --print-file-name      Print the name of the file before each string\\n  -n <number>               Locate & print any sequence of at least <number>\\n    --bytes=<number>         displayable characters.  (The default is 4).\\n  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\\n  -w --include-all-whitespace Include all whitespace as valid string characters\\n  -o                        An alias for --radix=o\\n  -T --target=<BFDNAME>     Specify the binary file format\\n  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\\n                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\\n  --unicode={default|show|invalid|hex|escape|highlight}\\n  -U {d|s|i|x|e|h}          Specify how to treat UTF-8 encoded unicode characters\\n  -s --output-separator=<string> String used to separate strings in output.\\n  @<file>                   Read options from <file>\\n  -h --help                 Display this information\\n  -v -V --version           Print the program\\'s version number\\n\"\n                             ,5);\n  fprintf(file,messageFormat);\n  supportedTargets = DAT_00108378;\n  if (DAT_00108378 == 0) {\n    messageFormat = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,messageFormat);\n  }\n  else {\n    messageFormat = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,messageFormat,supportedTargets);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtr = targetList;\n  while( true ) {\n    supportedTargets = *targetPtr;\n    targetPtr = targetPtr + 1;\n    if (supportedTargets == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  if (exitCode == 0) {\n    messageFormat = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,messageFormat,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "bfd_target_list",
                "fprintf",
                "fputc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "print_usage_001030c0"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00102853",
                "FUN_0010286f",
                "FUN_0010293a",
                "FUN_0010259a",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_0010259a": {
            "renaming": {
                "FUN_0010259a": "print_formatted_value_0010259a",
                "param_7": "value",
                "param_8": "format",
                "param_11": "data",
                "in_R8": "index",
                "unaff_R14": "string",
                "unaff_R15": "callback",
                "bVar3": "isAdjusted",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "code": "\n\n\nvoid printFormattedValue_0010259a(void)\n\n{\n  uint value1;\n  ulong value2;\n  ulong index;\n  char *string;\n  undefined8 callback;\n  bool isAdjusted;\n  uint value;\n  undefined8 format;\n  undefined8 data;\n  \n  do {\n    value = (uint)index;\n    printf(\"%s: \",format);\n    index = (ulong)value;\n    do {\n      if (DAT_00108372 == '\\0') {\n        string[index] = '\\0';\n        fputs(string,_stdout);\n      }\n      else {\n        value = (uint)index;\n        print_formatted_value_0010286f(callback);\n        string[value] = '\\0';\n        fputs(string,_stdout);\n      }\n      while (value2 = decode_00103520(), value2 != 0xffffffffffffffff) {\n        if (0xff < value2) {\nLAB_0010348e:\n          adjust_data_values_00103810();\n          break;\n        }\n        if (value2 == 9) {\nLAB_00102438:\n          putc((int)value2,_stdout);\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + value2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)value2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + value2 * 2) & 0x40) == 0))))\n            goto LAB_0010348e;\n            goto LAB_00102438;\n          }\n          putc((int)value2,_stdout);\n        }\n      }\n      if (DAT_00108358 == (char *)0x0) {\n        putc(10,_stdout);\n      }\n      else {\n        fputs(DAT_00108358,_stdout);\n      }\n      while (index = (ulong)DAT_00108374, DAT_00108374 != 0) {\n        value2 = decode_00103520();\n        value1 = DAT_00108374;\n        if (value2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (value2 < 0x100) {\n          if (value2 == 9) {\nLAB_001023f5:\n            *string = (char)value2;\n            if (value1 < 2) {\n              print_string_in_chunks_001034fa();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + value2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)value2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + value2 * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023f5;\n            }\n            *string = (char)value2;\n            if (value1 < 2) {\n              index = 1;\n              break;\n            }\n          }\n          value2 = decode_00103520();\n          value1 = DAT_00108374;\n          if (value2 == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < value2) goto code_r0x001034d5;\n          if (value2 == 9) {\nLAB_001023bb:\n            string[1] = (char)value2;\n            if (value1 < 3) {\n              print_formatted_data_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + value2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)value2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + value2 * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            string[1] = (char)value2;\n            if (value1 < 3) {\n              index = 2;\n              break;\n            }\n          }\n          value2 = decode_00103520();\n          value1 = DAT_00108374;\n          if (value2 == 0xffffffffffffffff) {\nLAB_001034be:\n            free(string);\n            return;\n          }\n          if (0xff < value2) goto code_r0x001034d5;\n          if (value2 == 9) {\nLAB_00102381:\n            string[2] = (char)value2;\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + value2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)value2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + value2 * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_00102381;\n            }\n            string[2] = (char)value2;\n          }\n          if (3 < value1) {\n            index = 3;\n            do {\n              value = (uint)index;\n              value2 = decode_00103520();\n              if (value2 == 0xffffffffffffffff) goto LAB_001034be;\n              if (0xff < value2) goto code_r0x001034d5;\n              if (((value2 != 9) && ((*(ushort *)(&_sch_istable + value2 * 2) & 0x10) == 0)) &&\n                 ((DAT_00108360 != 'S' || ((long)value2 < 0x80)))) {\n                if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                if ((*(ushort *)(&_sch_istable + value2 * 2) & 0x40) == 0) {\n                  process_data_001034d5();\n                  return;\n                }\n              }\n              index = (ulong)(value + 1);\n              isAdjusted = DAT_00108374 <= value + 1;\n              string[value] = (char)value2;\n              if (isAdjusted) goto joined_r0x0010341b;\n            } while( true );\n          }\n          index = 3;\n          break;\n        }\ncode_r0x001034d5:\n        adjust_data_values_00103810();\n      }\njoined_r0x0010341b:\n      callback = data;\n    } while (DAT_00108371 == '\\0');\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001034d5",
                "fputs",
                "FUN_0010286f",
                "FUN_00103810",
                "FUN_001034fa",
                "printf",
                "FUN_00102330",
                "FUN_00103510",
                "FUN_00103520",
                "FUN_0010259a",
                "free",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010259a",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_value_0010259a"
        },
        "FUN_001028b2": {
            "renaming": {
                "FUN_001028b2": "check_byte_sequence_001028b2",
                "param_1": "byteSequence",
                "param_2": "length",
                "bVar1": "firstByte",
                "lVar2": "result"
            },
            "code": "\nlong checkByteSequence_001028b2(byte *byteSequence,long length)\n\n{\n  byte firstByte;\n  long result;\n  \n  firstByte = *byteSequence;\n  if ((0xbf < firstByte) && (length != 1)) {\n    result = 0;\n    if ((byteSequence[1] & 0xc0) == 0x80) {\n      if ((firstByte & 0x20) == 0) {\n        return 2;\n      }\n      if ((length != 2) && ((byteSequence[2] & 0xc0) == 0x80)) {\n        if ((firstByte & 0x10) == 0) {\n          result = 3;\n        }\n        else {\n          result = 0;\n          if (length != 3) {\n            return (ulong)((byteSequence[3] & 0xc0) == 0x80) << 2;\n          }\n        }\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028b2",
            "calling": [
                "FUN_00103240"
            ],
            "imported": false,
            "current_name": "check_byte_sequence_001028b2"
        },
        "FUN_001039e0": {
            "renaming": {
                "FUN_001039e0": "FUNC_001039e0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001039f3) */\n/* WARNING: Removing unreachable block (ram,0x001039ff) */\n\nvoid FUNC_001039e0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001039e0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_001039e0"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00102330": {
            "renaming": {
                "FUN_00102330": "decode_and_print_data_00102330",
                "param_1": "data",
                "in_AX": "flags",
                "uVar1": "temp1",
                "uVar2": "index1",
                "uVar3": "index2",
                "in_R8D": "loop_counter",
                "unaff_R14": "buffer",
                "unaff_R15": "formatted_value",
                "bVar4": "is_less",
                "in_stack_00000010": "message",
                "in_stack_00000038": "formatted_data"
            },
            "code": "\n\n\nvoid decode_and_print_data_00102330(ulong data)\n\n{\n  uint temp1;\n  ushort flags;\n  ulong index1;\n  ulong index2;\n  uint loop_counter;\n  char *buffer;\n  undefined8 formatted_value;\n  bool is_less;\n  undefined8 message;\n  undefined8 formatted_data;\n  \ncode_r0x00102330:\n  if ((DAT_00108360 != 'S') || ((long)data < 0x80)) {\n    if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n    if ((flags & 0x40) == 0) {\n      process_data_001034d5();\n      return;\n    }\n  }\nLAB_00103400:\n  index1 = (ulong)loop_counter;\n  loop_counter = loop_counter + 1;\n  index2 = (ulong)loop_counter;\n  is_less = loop_counter < DAT_00108374;\n  buffer[index1] = (char)data;\n  if (is_less) goto LAB_001033b3;\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",message);\n    }\n    if (DAT_00108372 == '\\0') {\n      buffer[index2] = '\\0';\n      fputs(buffer,_stdout);\n    }\n    else {\n      print_formatted_value_0010286f(formatted_value);\n      buffer[index2] = '\\0';\n      fputs(buffer,_stdout);\n    }\n    while (index2 = decode_00103520(), index2 != 0xffffffffffffffff) {\n      if (0xff < index2) {\nLAB_0010348e:\n        adjust_data_values_00103810();\n        break;\n      }\n      if (index2 == 9) {\nLAB_00102438:\n        putc((int)index2,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)index2,_stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n    while (index2 = (ulong)DAT_00108374, formatted_value = formatted_data, DAT_00108374 != 0) {\n      index2 = decode_00103520();\n      temp1 = DAT_00108374;\n      if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n      if (index2 < 0x100) {\n        if (index2 == 9) {\nLAB_001023f5:\n          *buffer = (char)index2;\n          if (temp1 < 2) {\n            print_string_in_chunks_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *buffer = (char)index2;\n          if (temp1 < 2) {\n            index2 = 1;\n            break;\n          }\n        }\n        index2 = decode_00103520();\n        temp1 = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index2) goto code_r0x001034d5;\n        if (index2 == 9) {\nLAB_001023bb:\n          buffer[1] = (char)index2;\n          if (temp1 < 3) {\n            print_formatted_data_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          buffer[1] = (char)index2;\n          if (temp1 < 3) {\n            index2 = 2;\n            break;\n          }\n        }\n        index2 = decode_00103520();\n        temp1 = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index2) goto code_r0x001034d5;\n        if (index2 == 9) {\nLAB_00102381:\n          buffer[2] = (char)index2;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          buffer[2] = (char)index2;\n        }\n        if (temp1 < 4) {\n          index2 = 3;\n          break;\n        }\n        loop_counter = 3;\nLAB_001033b3:\n        data = decode_00103520();\n        if (data == 0xffffffffffffffff) {\nLAB_001034be:\n          free(buffer);\n          return;\n        }\n        if (data < 0x100) {\n          if ((data == 9) ||\n             (flags = *(ushort *)(&_sch_istable + data * 2), (flags & 0x10) != 0))\n          goto LAB_00103400;\n          goto code_r0x00102330;\n        }\n      }\ncode_r0x001034d5:\n      adjust_data_values_00103810();\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001034d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "decode_and_print_data_00102330"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001030c0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00102771": {
            "renaming": {
                "FUN_00102771": "extract_bits_00102771",
                "unaff_RBX": "result"
            },
            "code": "\nulong extractBits_00102771(void)\n\n{\n  ulong result;\n  \n  return result >> 0x18 & 0xff |\n         (result & 0xff) << 0x18 | (ulong)((uint)(result << 8) & 0xff0000) |\n         (ulong)((uint)(result >> 8) & 0xff00);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102771",
            "calling": [
                "FUN_00103520"
            ],
            "imported": false,
            "current_name": "extract_bits_00102771"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_001030c0",
                "FUN_00103240",
                "FUN_0010259a",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00104a60",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_001034fa": {
            "renaming": {
                "FUN_001034fa": "print_string_in_chunks_001034fa",
                "unaff_R14": "outputBuffer",
                "unaff_R15": "formatString",
                "in_stack_00000010": "prompt",
                "in_stack_00000038": "separator",
                "uVar1": "character",
                "uVar2": "remainingChunks",
                "uVar3": "currentChunk",
                "uVar4": "index",
                "bVar5": "validCharacter"
            },
            "code": "\n\n\nvoid printStringInChunks_001034fa(void)\n\n{\n  ulong character;\n  uint remainingChunks;\n  ulong currentChunk;\n  ulong index;\n  char *outputBuffer;\n  undefined8 formatString;\n  bool validCharacter;\n  undefined8 prompt;\n  undefined8 separator;\n  \ncode_r0x001034fa:\n  index = 1;\njoined_r0x0010341b:\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",prompt);\n    }\n    if (DAT_00108372 == '\\0') {\n      outputBuffer[index] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    else {\n      FUN_0010286f(formatString);\n      outputBuffer[index] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    while (index = decode_00103520(), index != 0xffffffffffffffff) {\n      if (0xff < index) {\nLAB_0010348e:\n        adjust_data_values_00103810();\n        break;\n      }\n      if (index == 9) {\nLAB_00102438:\n        putc((int)index,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + index * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)index,_stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n    while (index = (ulong)DAT_00108374, formatString = separator, DAT_00108374 != 0) {\n      index = decode_00103520();\n      remainingChunks = DAT_00108374;\n      if (index == 0xffffffffffffffff) goto LAB_001034be;\n      if (index < 0x100) {\n        if (index == 9) {\nLAB_001023f5:\n          *outputBuffer = (char)index;\n          if (remainingChunks < 2) {\n            printStringInChunks_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *outputBuffer = (char)index;\n          if (remainingChunks < 2) goto code_r0x001034fa;\n        }\n        index = decode_00103520();\n        remainingChunks = DAT_00108374;\n        if (index == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index) goto code_r0x001034d5;\n        if (index == 9) {\nLAB_001023bb:\n          outputBuffer[1] = (char)index;\n          if (remainingChunks < 3) {\n            FUN_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          outputBuffer[1] = (char)index;\n          if (remainingChunks < 3) {\n            index = 2;\n            break;\n          }\n        }\n        index = decode_00103520();\n        remainingChunks = DAT_00108374;\n        if (index == 0xffffffffffffffff) {\nLAB_001034be:\n          free(outputBuffer);\n          return;\n        }\n        if (0xff < index) goto code_r0x001034d5;\n        if (index == 9) {\nLAB_00102381:\n          outputBuffer[2] = (char)index;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          outputBuffer[2] = (char)index;\n        }\n        if (3 < remainingChunks) {\n          currentChunk = 3;\n          do {\n            character = decode_00103520();\n            if (character == 0xffffffffffffffff) goto LAB_001034be;\n            if (0xff < character) goto code_r0x001034d5;\n            if (((character != 9) && ((*(ushort *)(&_sch_istable + character * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)character < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&_sch_istable + character * 2) & 0x40) == 0) {\n                process_data_001034d5();\n                return;\n              }\n            }\n            remainingChunks = (int)currentChunk + 1;\n            index = (ulong)remainingChunks;\n            validCharacter = DAT_00108374 <= remainingChunks;\n            outputBuffer[currentChunk] = (char)character;\n            currentChunk = index;\n            if (validCharacter) goto joined_r0x0010341b;\n          } while( true );\n        }\n        index = 3;\n        break;\n      }\ncode_r0x001034d5:\n      adjust_data_values_00103810();\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001034fa",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_string_in_chunks_001034fa"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_00102853": {
            "renaming": {
                "FUN_00102853": "print_formatted_string_00102853",
                "param_1": "string"
            },
            "code": "\nvoid print_formatted_string_00102853(undefined8 string)\n\n{\n  printf(\"%s: \",string);\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  print_formatted_value_0010286f();\n  return;\n}\n\n",
            "called": [
                "FUN_0010286f",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102853",
            "calling": [
                "FUN_00103890"
            ],
            "imported": false,
            "current_name": "print_formatted_string_00102853"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_00103240",
                "FUN_0010293a"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_001030c0",
                "FUN_001038b0",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "__uflow": {
            "renaming": {},
            "code": "\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = __uflow(param_1);\n  return iVar1;\n}\n\n",
            "called": [
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_0010290e",
                "FUN_00103520"
            ],
            "imported": false,
            "current_name": "__uflow"
        },
        "FUN_001027e2": {
            "renaming": {
                "FUN_001027e2": "update_and_add_001027e2",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "increment",
                "param_4": "result",
                "in_RAX": "pointer"
            },
            "code": "\nvoid update_and_add_001027e2(int operand1,int operand2,long increment,long *result)\n\n{\n  int *pointer;\n  \n  *result = *result + (1 - increment);\n  *pointer = operand1 + operand2;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027e2",
            "calling": [
                "FUN_00103810"
            ],
            "imported": false,
            "current_name": "update_and_add_001027e2"
        },
        "FUN_001034d5": {
            "renaming": {
                "FUN_001034d5": "process_data_001034d5",
                "uVar1": "dataIndex",
                "uVar2": "decodedValue",
                "uVar3": "dataLength",
                "uVar4": "counter",
                "unaff_R14": "dataBuffer",
                "bVar5": "isValid",
                "in_stack_00000010": "filename",
                "in_stack_00000038": "formattedValue"
            },
            "code": "\n\n\nvoid processData_001034d5(void)\n\n{\n  ulong dataIndex;\n  ulong decodedValue;\n  uint dataLength;\n  ulong counter;\n  char *dataBuffer;\n  bool isValid;\n  undefined8 filename;\n  undefined8 formattedValue;\n  \ncode_r0x001034d5:\n  adjust_data_values_00103810();\n  do {\n    dataIndex = (ulong)DAT_00108374;\n    if (DAT_00108374 != 0) {\n      dataIndex = decode_00103520();\n      dataLength = DAT_00108374;\n      if (dataIndex == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < dataIndex) goto code_r0x001034d5;\n      if (dataIndex == 9) {\nLAB_001023f5:\n        *dataBuffer = (char)dataIndex;\n        if (dataLength < 2) {\n          print_string_in_chunks_001034fa();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + dataIndex * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)dataIndex)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&_sch_istable + dataIndex * 2) & 0x40) != 0))))\n          goto LAB_001023f5;\n          goto code_r0x001034d5;\n        }\n        *dataBuffer = (char)dataIndex;\n        if (dataLength < 2) {\n          dataIndex = 1;\n          goto joined_r0x001034ef;\n        }\n      }\n      dataIndex = decode_00103520();\n      dataLength = DAT_00108374;\n      if (dataIndex == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < dataIndex) goto code_r0x001034d5;\n      if (dataIndex == 9) {\nLAB_001023bb:\n        dataBuffer[1] = (char)dataIndex;\n        if (dataLength < 3) {\n          print_formatted_data_00103510();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + dataIndex * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)dataIndex)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&_sch_istable + dataIndex * 2) & 0x40) != 0))))\n          goto LAB_001023bb;\n          goto code_r0x001034d5;\n        }\n        dataBuffer[1] = (char)dataIndex;\n        if (dataLength < 3) {\n          dataIndex = 2;\n          goto joined_r0x001034ef;\n        }\n      }\n      dataIndex = decode_00103520();\n      dataLength = DAT_00108374;\n      if (dataIndex == 0xffffffffffffffff) {\nLAB_001034be:\n        free(dataBuffer);\n        return;\n      }\n      if (0xff < dataIndex) goto code_r0x001034d5;\n      if (dataIndex == 9) {\nLAB_00102381:\n        dataBuffer[2] = (char)dataIndex;\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + dataIndex * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)dataIndex)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&_sch_istable + dataIndex * 2) & 0x40) != 0))))\n          goto LAB_00102381;\n          goto code_r0x001034d5;\n        }\n        dataBuffer[2] = (char)dataIndex;\n      }\n      if (dataLength < 4) {\n        dataIndex = 3;\n      }\n      else {\n        counter = 3;\n        do {\n          decodedValue = decode_00103520();\n          if (decodedValue == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < decodedValue) goto code_r0x001034d5;\n          if (((decodedValue != 9) && ((*(ushort *)(&_sch_istable + decodedValue * 2) & 0x10) == 0)) &&\n             ((DAT_00108360 != 'S' || ((long)decodedValue < 0x80)))) {\n            if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n            if ((*(ushort *)(&_sch_istable + decodedValue * 2) & 0x40) == 0) {\n              processData_001034d5();\n              return;\n            }\n          }\n          dataLength = (int)counter + 1;\n          dataIndex = (ulong)dataLength;\n          isValid = dataLength < DAT_00108374;\n          dataBuffer[counter] = (char)decodedValue;\n          counter = dataIndex;\n        } while (isValid);\n      }\n    }\njoined_r0x001034ef:\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",filename);\n    }\n    if (DAT_00108372 == '\\0') {\n      dataBuffer[dataIndex] = '\\0';\n      fputs(dataBuffer,_stdout);\n    }\n    else {\n      print_formatted_value_0010286f(formattedValue);\n      dataBuffer[dataIndex] = '\\0';\n      fputs(dataBuffer,_stdout);\n    }\n    while (dataIndex = decode_00103520(), dataIndex != 0xffffffffffffffff) {\n      if (0xff < dataIndex) {\nLAB_0010348e:\n        adjust_data_values_00103810();\n        break;\n      }\n      if (dataIndex == 9) {\nLAB_00102438:\n        putc((int)dataIndex,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + dataIndex * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)dataIndex < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + dataIndex * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)dataIndex,_stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001034d5",
            "calling": [
                "FUN_00102330",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "process_data_001034d5"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102b11",
                "FUN_00103240",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_00103aa0": {
            "renaming": {
                "FUN_00103aa0": "parse_strings_00103aa0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptr1",
                "bVar2": "var2",
                "bVar3": "var3",
                "cVar4": "var4",
                "iVar5": "index",
                "uVar6": "count",
                "iVar7": "counter",
                "uVar8": "bfd_error",
                "__stream": "file_stream",
                "sVar9": "file_size",
                "sVar10": "bytes_read",
                "__ptr": "data_ptr",
                "lVar11": "file_name",
                "plVar12": "file_list",
                "uVar13": "value",
                "__src": "result",
                "uVar14": "error_message",
                "__stream_00": "stream",
                "piVar15": "error_code",
                "plVar16": "current_file",
                "uVar17": "format_message",
                "plVar18": "result_entry",
                "pbVar19": "byte_ptr",
                "pcVar20": "string_ptr",
                "ppuVar21": "pointer_pointer",
                "lVar22": "size",
                "pbVar23": "byte_ptr2",
                "pcVar24": "error_message",
                "bVar25": "flag1",
                "unaff_R12": "inner_loop_iterator",
                "puVar26": "section",
                "bVar27": "flag2",
                "bVar28": "flag3",
                "local_140": "result_index",
                "local_138": "current_string",
                "local_128": "file_data",
                "local_120": "max_string_length",
                "local_118": "string_length",
                "local_110": "result_length",
                "local_d8": "error_string",
                "local_d0": "section_data",
                "local_c8": "file_info"
            },
            "code": "\n\n\n\nFILE * parse_strings_00103aa0(int argc,long *argv)\n\n{\n  byte *ptr1;\n  byte var2;\n  byte var3;\n  char var4;\n  int index;\n  uint count;\n  int counter;\n  undefined4 bfd_error;\n  FILE *file_stream;\n  size_t file_size;\n  size_t bytes_read;\n  byte *data_ptr;\n  long file_name;\n  long *file_list;\n  ulong value;\n  long *result;\n  undefined8 error_message;\n  FILE *stream;\n  int *error_code;\n  long *current_file;\n  undefined8 format_message;\n  long *result_entry;\n  byte *byte_ptr;\n  char *string_ptr;\n  undefined **pointer_pointer;\n  long size;\n  byte *byte_ptr2;\n  char *error_message;\n  bool flag1;\n  long *inner_loop_iterator;\n  undefined8 *section;\n  bool flag2;\n  bool flag3;\n  long *result_index;\n  undefined8 current_string;\n  undefined8 file_data;\n  ulong max_string_length;\n  size_t string_length;\n  long result_length;\n  char *error_string;\n  void *section_data;\n  stat file_info;\n  \n  setlocale(6,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00108378 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00108378);\n  current_file = argv;\n  if (argc < 2) goto LAB_00103fa6;\n  max_string_length = 2000;\n  inner_loop_iterator = (long *)0x1;\n  current_string = (long *)0x0;\n  file_list = argv;\n  do {\n    counter = (int)inner_loop_iterator;\n    pointer_pointer = (undefined **)(long)counter;\n    result_index = (long *)((long)pointer_pointer * 8);\n    current_file = file_list;\n    if (*(char *)file_list[(long)pointer_pointer] == '@') {\n      count = (int)max_string_length - 1;\n      max_string_length = (ulong)count;\n      if (count == 0) {\n        file_name = *file_list;\n        string_ptr = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_001044b1;\n      }\n      string_ptr = (char *)file_list[(long)pointer_pointer] + 1;\n      index = stat(string_ptr,&file_info);\n      if (-1 < index) {\n        if ((file_info.st_mode & 0xf000) == 0x4000) {\n          do {\n            file_name = *file_list;\n            string_ptr = \"%s: error: @-file refers to a directory\\n\";\nLAB_001044b1:\n            fprintf(_stderr,string_ptr,file_name);\n            xexit(1);\n          } while( true );\n        }\n        file_stream = fopen(string_ptr,\"r\");\n        if (file_stream != (FILE *)0x0) {\n          index = fseek(file_stream,0,2);\n          if (((index != -1) && (file_size = ftell(file_stream), file_size != 0xffffffffffffffff)) &&\n             (index = fseek(file_stream,0,0), index != -1)) {\n            file_data = (byte *)xmalloc(file_size + 1);\n            bytes_read = fread(file_data,1,file_size,file_stream);\n            if ((file_size == bytes_read) || (index = ferror(file_stream), index == 0)) {\n              file_data[bytes_read] = 0;\n              var3 = *file_data;\n              byte_ptr = file_data;\n              while( true ) {\n                if (var3 == 0) goto LAB_001040fd;\n                if (((&_sch_istable)[(ulong)var3 * 2] & 0x40) == 0) break;\n                var3 = byte_ptr[1];\n                byte_ptr = byte_ptr + 1;\n              }\n              file_size = strlen((char *)file_data);\n              data_ptr = (byte *)xmalloc(file_size + 1);\n              result = (long *)0x0;\n              index = 0;\n              result_length = 0;\n              flag1 = false;\n              flag3 = false;\n              flag2 = false;\n              byte_ptr = file_data;\n              do {\n                while (((&_sch_istable)[(ulong)*byte_ptr * 2] & 0x40) != 0) {\n                  byte_ptr = byte_ptr + 1;\n                }\n                if ((index == 0) || (index + -1 <= (int)result_length)) {\n                  if (result == (long *)0x0) {\n                    index = 8;\n                    result = (long *)xmalloc(0x40);\n                    result_entry = result + result_length;\n                    *result_entry = 0;\n                  }\n                  else {\n                    index = index * 2;\n                    result = (long *)xrealloc(result,(long)index << 3);\n                    result_entry = result + result_length;\n                    *result_entry = 0;\n                  }\n                }\n                else {\n                  result_entry = result + result_length;\n                }\n                var3 = *byte_ptr;\n                byte_ptr2 = data_ptr;\n                while (var3 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)var3 * 2] & 0x40) != 0) &&\n                       (!(bool)(flag3 | flag2 | flag1))) {\n                      flag2 = false;\n                      flag1 = false;\n                      flag3 = false;\n                      goto LAB_00103d4f;\n                    }\n                    if (!flag2) break;\n                    byte_ptr = byte_ptr + 1;\n                    *byte_ptr2 = var3;\n                    byte_ptr2 = byte_ptr2 + 1;\n                    flag2 = false;\n                    var3 = *byte_ptr;\n                    if (var3 == 0) goto LAB_00103d4f;\n                  }\n                  if (var3 == 0x5c) {\n                    flag2 = true;\n                  }\n                  else if (flag3) {\n                    if (var3 == 0x27) {\n                      flag3 = false;\n                    }\n                    else {\nLAB_00103ec8:\n                      *byte_ptr2 = var3;\n                      byte_ptr2 = byte_ptr2 + 1;\n                    }\n                  }\n                  else if (flag1) {\n                    if (var3 != 0x22) goto LAB_00103ec8;\n                    flag1 = false;\n                  }\n                  else if (var3 == 0x27) {\n                    flag3 = true;\n                  }\n                  else {\n                    if (var3 != 0x22) goto LAB_00103ec8;\n                    flag1 = true;\n                  }\n                  ptr1 = byte_ptr + 1;\n                  byte_ptr = byte_ptr + 1;\n                  var3 = *ptr1;\n                }\nLAB_00103d4f:\n                *byte_ptr2 = 0;\n                file_name = xstrdup(data_ptr);\n                *result_entry = file_name;\n                result[result_length + 1] = 0;\n                var3 = *byte_ptr;\n                var2 = (&_sch_istable)[(ulong)var3 * 2];\n                while ((var2 & 0x40) != 0) {\n                  var3 = byte_ptr[1];\n                  byte_ptr = byte_ptr + 1;\n                  var2 = (&_sch_istable)[(ulong)var3 * 2];\n                }\n                result_length = result_length + 1;\n                if (var3 == 0) {\n                  free(data_ptr);\n                  if (file_list == argv) goto LAB_0010411e;\n                  goto LAB_00103dea;\n                }\n              } while( true );\n            }\n            free(file_data);\n          }\n          fclose(file_stream);\n        }\n      }\n    }\n    if (argc <= counter + 1) {\nLAB_00103fa6:\n      DAT_00108373 = 0;\n      file_stream = (FILE *)0x0;\n      DAT_00108372 = 0;\n      pointer_pointer = &PTR_DAT_001081a0;\n      DAT_00108374 = 4;\n      DAT_00108371 = 0;\n      DAT_00108370 = '\\0';\n      DAT_00108368 = (long *)0x0;\n      DAT_00108360 = 's';\n      DAT_00108358 = (long *)0x0;\n      string_ptr = \"adfhHn:wot:e:T:s:U:Vv0123456789\";\nLAB_00103ff6:\n      while( true ) {\n        counter = (int)inner_loop_iterator;\n        index = getopt_long(argc,current_file,string_ptr);\n        if (index == -1) break;\n        file_list = (long *)string_ptr;\n        switch(index) {\n        case 0x3f:\n          goto switchD_00104029_caseD_3f;\n        case 0x48:\n        case 0x68:\nswitchD_00104029_caseD_48:\n          print_usage_001030c0(_stdout,0);\n          goto LAB_001044f5;\n        case 0x54:\nswitchD_00104201_caseD_54:\n          inner_loop_iterator = (long *)&optarg;\n          DAT_00108368 = _optarg;\n          break;\n        case 0x55:\nswitchD_00104201_caseD_55:\n          inner_loop_iterator = _optarg;\n          counter = strcmp((char *)_optarg,\"default\");\n          if ((counter == 0) || (counter = strcmp((char *)inner_loop_iterator,\"d\"), counter == 0)) {\n            DAT_00108350 = 0;\n          }\n          else {\n            counter = strcmp((char *)inner_loop_iterator,\"locale\");\n            if ((counter == 0) || (counter = strcmp((char *)inner_loop_iterator,\"l\"), counter == 0)) {\n              DAT_00108350 = 1;\n            }\n            else {\n              counter = strcmp((char *)inner_loop_iterator,\"escape\");\n              if ((counter == 0) || (counter = strcmp((char *)inner_loop_iterator,\"e\"), counter == 0)) {\n                DAT_00108350 = 2;\n              }\n              else {\n                counter = strcmp((char *)inner_loop_iterator,\"invalid\");\n                if ((counter == 0) || (counter = strcmp((char *)inner_loop_iterator,\"i\"), counter == 0)) {\n                  DAT_00108350 = 5;\n                }\n                else {\n                  counter = strcmp((char *)inner_loop_iterator,\"hex\");\n                  if ((counter == 0) || (counter = strcmp((char *)inner_loop_iterator,\"x\"), counter == 0)) {\n                    DAT_00108350 = 3;\n                  }\n                  else {\n                    counter = strcmp((char *)inner_loop_iterator,\"highlight\");\n                    if ((counter != 0) && (counter = strcmp((char *)inner_loop_iterator,\"h\"), counter != 0)) {\n                      error_message = dcgettext(0,\"invalid argument to -U/--unicode: %s\",5);\n                      handle_error_and_exit_00104a60(error_message);\n                      print_error_message_001038b0();\n                      xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                      halt_baddata();\n                    }\n                    DAT_00108350 = 4;\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_00104029_caseD_56:\n          printf(\"GNU %s %s\\n\",\"strings\",\"(GNU Binutils for Debian) 2.40\");\n          string_ptr = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n          printf(string_ptr);\n          string_ptr = (char *)dcgettext(0,\n                                      \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                      ,5);\n          printf(string_ptr);\n                    \n          exit(0);\n        case 0x61:\n          goto switchD_00104029_caseD_61;\n        case 100:\nswitchD_00104029_caseD_64:\n          DAT_00108370 = '\\x01';\n          break;\n        case 0x65:\n          inner_loop_iterator = (long *)&optarg;\n          counter = 0x109108;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          DAT_00108360 = *(char *)_optarg;\n          index = getopt_long(argc,current_file,string_ptr);\n          if (index == -1) goto LAB_0010407f;\n          switch(index) {\n          case 0x3f:\n            goto switchD_00104029_caseD_3f;\n          case 0x48:\n          case 0x68:\n            goto switchD_00104029_caseD_48;\n          case 0x54:\n            goto switchD_00104201_caseD_54;\n          case 0x55:\n            goto switchD_00104201_caseD_55;\n          case 0x56:\n          case 0x76:\n            goto switchD_00104029_caseD_56;\n          case 0x61:\n            goto switchD_00104029_caseD_61;\n          case 100:\n            goto switchD_00104029_caseD_64;\n          case 0x65:\nswitchD_00104201_caseD_65:\n            if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n            DAT_00108360 = *(char *)_optarg;\n            index = getopt_long(argc,current_file,string_ptr);\n            if (index == -1) goto LAB_0010407f;\n            switch(index) {\n            case 0x3f:\n              goto switchD_00104029_caseD_3f;\n            default:\n              break;\n            case 0x48:\n            case 0x68:\n              goto switchD_00104029_caseD_48;\n            case 0x54:\n              goto switchD_00104201_caseD_54;\n            case 0x55:\n              goto switchD_00104201_caseD_55;\n            case 0x56:\n            case 0x76:\n              goto switchD_00104029_caseD_56;\n            case 0x61:\n              goto switchD_00104029_caseD_61;\n            case 100:\n              goto switchD_00104029_caseD_64;\n            case 0x65:\n              goto switchD_00104201_caseD_65;\n            case 0x66:\n              goto switchD_00104029_caseD_66;\n            case 0x6e:\n              goto switchD_00104201_caseD_6e;\n            case 0x6f:\n              goto switchD_00104029_caseD_6f;\n            case 0x73:\n              goto switchD_00104201_caseD_73;\n            case 0x74:\n              goto switchD_00104201_caseD_74;\n            case 0x77:\n              goto switchD_00104029_caseD_77;\n            }\n          case 0x66:\n            goto switchD_00104029_caseD_66;\n          case 0x6e:\n            goto switchD_00104201_caseD_6e;\n          case 0x6f:\n            goto switchD_00104029_caseD_6f;\n          case 0x73:\n            goto switchD_00104201_caseD_73;\n          case 0x74:\n            goto switchD_00104201_caseD_74;\n          case 0x77:\n            goto switchD_00104029_caseD_77;\n          }\n        default:\n          file_stream = (FILE *)(ulong)_optind;\n          break;\n        case 0x66:\nswitchD_00104029_caseD_66:\n          DAT_00108371 = 1;\n          break;\n        case 0x6e:\nswitchD_00104201_caseD_6e:\n          inner_loop_iterator = (long *)&optarg;\n          value = strtoul((char *)_optarg,&error_string,0);\n          DAT_00108374 = (int)value;\n          if ((error_string != (char *)0x0) && (file_list = _optarg, *error_string != '\\0')) {\nLAB_001042e6:\n            error_message = dcgettext(0,\"invalid integer argument %s\",5);\n            handle_error_and_exit_00104a60(error_message,file_list);\n            goto switchD_00104201_caseD_73;\n          }\n          break;\n        case 0x6f:\nswitchD_00104029_caseD_6f:\n          DAT_00108372 = 1;\n          DAT_00108354 = 8;\n          break;\n        case 0x73:\nswitchD_00104201_caseD_73:\n          inner_loop_iterator = (long *)&optarg;\n          DAT_00108358 = _optarg;\n          string_ptr = (char *)file_list;\n          break;\n        case 0x74:\nswitchD_00104201_caseD_74:\n          inner_loop_iterator = (long *)&optarg;\n          counter = 0x109108;\n          DAT_00108372 = 1;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          var4 = *(char *)_optarg;\n          if (var4 == 'o') {\n            DAT_00108354 = 8;\n          }\n          else if (var4 == 'x') {\n            DAT_00108354 = 0x10;\n          }\n          else {\n            if (var4 != 'd') goto switchD_00104029_caseD_3f;\n            DAT_00108354 = 10;\n          }\n          break;\n        case 0x77:\n          goto switchD_00104029_caseD_77;\n        }\n      }\nLAB_0010407f:\n      if (DAT_00108350 != 0) {\n        DAT_00108360 = 'S';\n      }\n      if ((int)file_stream != 0) {\nLAB_001044f5:\n        string_ptr = (char *)(current_file + (long)(int)file_stream + -1);\n        value = strtoul((char *)(*(long *)string_ptr + 1),&error_string,0);\n        DAT_00108374 = (int)value;\n        if ((error_string != (char *)0x0) && (*error_string != '\\0')) {\n          file_list = (long *)(*(long *)string_ptr + 1);\n          goto LAB_001042e6;\n        }\n      }\n      counter = (int)inner_loop_iterator;\n      if (DAT_00108374 == 0) {\n        error_message = dcgettext(0,\"invalid minimum string length %d\",5);\n        handle_error_and_exit_00104a60(error_message,0);\nswitchD_00104029_caseD_61:\n        DAT_00108370 = '\\0';\n        goto LAB_00103ff6;\n      }\n      if (0x31 < (byte)(DAT_00108360 + 0xbeU)) goto switchD_00104029_caseD_3f;\n      value = 1L << (DAT_00108360 + 0xbeU & 0x3f);\n      if ((value & 0x2000000020000) == 0) {\n        if ((value & 0x401) == 0) {\n          if ((value & 0x40100000000) == 0) goto switchD_00104029_caseD_3f;\n          DAT_0010834c = 2;\n        }\n        else {\n          DAT_0010834c = 4;\n        }\n      }\n      else {\n        DAT_0010834c = 1;\n      }\n      counter = bfd_init();\n      if (counter == 0x118) {\n        string_ptr = \"x86_64-pc-linux-gnu\";\n        count = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n        if ((char)count != '\\0') {\n          pointer_pointer = (undefined **)&optind;\n          if (argc <= (int)_optind) {\n            DAT_00108370 = 0;\n            print_formatted_data_00103240(\"{standard input}\",_stdin,0,0,0);\n            return (FILE *)0x0;\n          }\n          value = 0;\n          file_stream = (FILE *)0x0;\n          file_list = (long *)(ulong)count;\n          count = _optind;\n          result_index = current_file;\n          goto LAB_001043b8;\n        }\n        bfd_error = bfd_get_error();\n        pointer_pointer = (undefined **)bfd_errmsg(bfd_error);\n        error_message = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        handle_error_and_exit_00104a60(error_message,\"x86_64-pc-linux-gnu\",pointer_pointer);\n      }\n      error_message = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n      handle_error_and_exit_00104a60(error_message);\n      file_list = current_file;\nLAB_0010462b:\n      error_message = \"Warning: \\'%s\\' is a directory\";\nLAB_00104637:\n      error_message = dcgettext(0,error_message,5);\n      print_error_message_00103910(error_message,string_ptr);\n      count = 0;\n      do {\n        while( true ) {\n          value = (ulong)file_list & 0xffffffff;\n          file_stream = (FILE *)(ulong)((uint)file_stream | (count ^ 1) & 0xff);\n          while( true ) {\n            counter = (int)value;\n            count = *(uint *)pointer_pointer + 1;\n            *(uint *)pointer_pointer = count;\n            if (argc <= (int)count) {\n              current_file = file_list;\n              if ((char)value != '\\0') {\n                return file_stream;\n              }\n              goto switchD_00104029_caseD_3f;\n            }\nLAB_001043b8:\n            string_ptr = (char *)result_index[(int)count];\n            counter = strcmp(string_ptr,\"-\");\n            if (counter != 0) break;\n            DAT_00108370 = '\\0';\n          }\n          counter = stat(string_ptr,&file_info);\n          if (counter < 0) break;\n          if ((file_info.st_mode & 0xf000) == 0x4000) goto LAB_0010462b;\n          if ((DAT_00108370 == '\\0') ||\n             (current_file = (long *)bfd_openr(string_ptr,DAT_00108368), current_file == (long *)0x0)) {\nLAB_00104416:\n            stream = fopen(string_ptr,\"r\");\n            if (stream != (FILE *)0x0) {\n              print_formatted_data_00103240(string_ptr,stream,0,0,0);\n              counter = fclose(stream);\n              if (counter != -1) goto LAB_00104454;\n            }\n            fprintf(_stderr,\"%s: \",DAT_00108378);\n            perror(string_ptr);\n            count = 0;\n          }\n          else {\n            var4 = bfd_check_format(current_file,1);\n            if (var4 == '\\0') {\n              bfd_close();\n              current_string = current_file;\n              goto LAB_00104416;\n            }\n            section = (undefined8 *)current_file[0x12];\n            current_string = (long *)((ulong)current_file & 0xffffffffffffff00);\n            file_data = (byte *)CONCAT44(file_data._4_4_,argc);\n            for (; section != (undefined8 *)0x0; section = (undefined8 *)section[1]) {\n              var4 = (char)current_string;\n              if (((*(uint *)((long)section + 0x24) & 0x103) == 0x103) &&\n                 (max_string_length = section[8], max_string_length != 0)) {\n                var4 = bfd_malloc_and_get_section(current_file,section,&section_data);\n                if (var4 == '\\0') {\n                  bfd_error = bfd_get_error();\n                  max_string_length = bfd_errmsg(bfd_error);\n                  error_message = *section;\n                  format_message = dcgettext(0,\"%s: Reading section %s failed: %s\",5);\n                  print_error_message_00103910(format_message,string_ptr,error_message);\n                  var4 = (char)current_string;\n                }\n                else {\n                  print_formatted_data_00103240(string_ptr,0,section[0x10],max_string_length,section_data);\n                  free(section_data);\n                }\n              }\n              current_string = (long *)CONCAT71(current_string._1_7_,var4);\n            }\n            file_list = (long *)((ulong)file_list & 0xff);\n            var4 = bfd_close(current_file);\n            if (var4 == '\\0') {\n              counter = bfd_get_error();\n              if (counter == 0) {\n                error_message = dcgettext(0,\"cause of error unknown\",5);\n                fflush(_stdout);\n              }\n              else {\n                error_message = bfd_errmsg();\n                fflush(_stdout);\n              }\n              fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00108378,string_ptr,error_message);\n              goto LAB_00104416;\n            }\n            flag3 = (char)current_string == '\\0';\n            if (flag3) goto LAB_00104416;\nLAB_00104454:\n            count = (uint)file_list;\n          }\n        }\n        error_code = __errno_location();\n        error_message = \"\\'%s\\': No such file\";\n        if (*error_code == 2) goto LAB_00104637;\n        error_message = strerror(*error_code);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00103910(error_message,string_ptr,error_message);\n        count = 0;\n      } while( true );\n    }\n    count = counter + 1;\n    current_string = inner_loop_iterator;\nLAB_00103eac:\n    inner_loop_iterator = (long *)(ulong)count;\n  } while( true );\nswitchD_00104029_caseD_77:\n  DAT_00108373 = 1;\n  goto LAB_00103ff6;\nswitchD_00104029_caseD_3f:\n  print_usage_001030c0(_stderr);\nLAB_001040fd:\n  result = (long *)xmalloc(8);\n  *result = 0;\n  if (current_file == argv) {\nLAB_0010411e:\n    if (*current_file == 0) {\n      index = 0;\n    }\n    else {\n      file_name = 1;\n      do {\n        index = (int)file_name;\n        file_list = current_file + file_name;\n        file_name = file_name + 1;\n      } while (*file_list != 0);\n    }\n    size = 0;\n    file_list = (long *)xmalloc((long)(index + 1) << 3);\n    file_name = *current_file;\n    while (file_name != 0) {\n      error_message = xstrdup();\n      *(undefined8 *)((long)file_list + size) = error_message;\n      size = size + 8;\n      file_name = *(long *)((long)current_file + size);\n    }\n    *(undefined8 *)((long)file_list + size) = 0;\nLAB_00103dea:\n    current_file = file_list;\n    if (*result != 0) {\n      file_name = 0;\n      do {\n        file_name = file_name + 1;\n      } while (result[file_name] != 0);\n      string_length = file_name * 8;\n      index = argc;\n      goto LAB_00103e18;\n    }\n  }\n  file_name = 0;\n  string_length = 0;\n  index = argc;\nLAB_00103e18:\n  free((void *)current_file[(long)pointer_pointer]);\n  file_list = (long *)xrealloc(current_file,(file_name + 1 + (long)index) * 8);\n  argc = index + -1 + (int)file_name;\n  memmove(file_list + (long)((long)pointer_pointer + file_name),(void *)((long)(file_list + 1) + (long)result_index),\n          (long)(index - counter) << 3);\n  memcpy((void *)((long)file_list + (long)result_index),result,string_length);\n  free(result);\n  free(file_data);\n  fclose(file_stream);\n  count = (int)current_string + 1;\n  inner_loop_iterator = result_index;\n  current_file = file_list;\n  result_index = result;\n  if ((int)count < argc) goto LAB_00103eac;\n  goto LAB_00103fa6;\n}\n\n",
            "called": [
                "getopt_long",
                "xstrdup",
                "bfd_openr",
                "bfd_errmsg",
                "FUN_001030c0",
                "FUN_00103240",
                "xmalloc",
                "bfd_malloc_and_get_section",
                "xrealloc",
                "bindtextdomain",
                "fseek",
                "fclose",
                "free",
                "fflush",
                "strtoul",
                "__errno_location",
                "xmalloc_set_program_name",
                "dcgettext",
                "bfd_get_error",
                "fopen",
                "FUN_00104a60",
                "strerror",
                "setlocale",
                "textdomain",
                "memcpy",
                "xexit",
                "perror",
                "exit",
                "bfd_check_format",
                "ferror",
                "ftell",
                "FUN_00103910",
                "bfd_init",
                "strcmp",
                "stat",
                "fprintf",
                "printf",
                "bfd_set_default_target",
                "fread",
                "memmove",
                "bfd_set_error_program_name",
                "bfd_close",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103aa0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "parse_strings_00103aa0"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "call_code_at_memory_address_00102020",
                "undefined": "memoryAddress"
            },
            "code": "\nvoid callCodeAtMemoryAddress_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(memoryAddress *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "call_code_at_memory_address_00102020"
        }
    },
    "used_tokens": 48175,
    "layers": [
        [
            "FUN_00103510",
            "FUN_0010293a",
            "FUN_0010282b",
            "FUN_0010286f",
            "FUN_001038b0",
            "FUN_0010290e",
            "FUN_001030c0",
            "FUN_001028b2",
            "FUN_00102771",
            "FUN_001034fa",
            "FUN_001027e2",
            "FUN_00102020"
        ],
        [
            "FUN_00103910",
            "FUN_00103520",
            "FUN_00104a60",
            "FUN_00103890",
            "FUN_00103810",
            "FUN_00102853"
        ],
        [
            "FUN_00102b11",
            "FUN_001034d5"
        ],
        [
            "FUN_00103240",
            "FUN_0010259a",
            "FUN_00102330"
        ],
        [
            "FUN_00103aa0"
        ]
    ],
    "locked_functions": []
}