{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "set_data_value_00113dfe",
                "param_1": "input_value",
                "param_2": "new_data",
                "lVar1": "result_ptr"
            },
            "code": "\nvoid set_data_value_00113dfe(undefined4 input_value,undefined new_data)\n\n{\n  long result_ptr;\n  \n  result_ptr = FUN_00112904(3,input_value);\n  if (result_ptr != 0) {\n    *(undefined *)(result_ptr + 0x10) = new_data;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "set_data_value_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_string_value_0010ab4d",
                "param_1": "obj_ptr",
                "param_2": "new_value",
                "param_3": "param_ptr",
                "param_4": "param_value",
                "uVar1": "obj_ptr_value",
                "lVar2": "obj_ptr_value2",
                "auVar3": "result",
                "sVar4": "new_value_length",
                "pcVar5": "str_ptr",
                "sVar6": "str_ptr_length",
                "auVar7": "result2"
            },
            "code": "\nundefined  [16] updateStringValue_0010ab4d(long obj_ptr,char *new_value,undefined8 param_ptr,undefined8 param_value)\n\n{\n  ulong obj_ptr_value;\n  long obj_ptr_value2;\n  undefined result [16];\n  size_t new_value_length;\n  char *str_ptr;\n  size_t str_ptr_length;\n  undefined result2 [16];\n  \n  obj_ptr_value = *(ulong *)(obj_ptr + 0x60);\n  if ((obj_ptr_value != 0) && (*(long *)(obj_ptr_value + 0x20) != 0)) {\n    str_ptr = *(char **)(obj_ptr_value + 0x30);\n    new_value_length = strlen(new_value);\n    if (str_ptr == (char *)0x0) {\n      str_ptr = (char *)xmalloc(new_value_length + 3);\n      *str_ptr = '\\0';\n    }\n    else {\n      str_ptr_length = strlen(str_ptr);\n      str_ptr = (char *)xrealloc(str_ptr,new_value_length + 4 + str_ptr_length);\n    }\n    new_value_length = strlen(str_ptr);\n    sprintf(str_ptr + new_value_length,\"%s::\",new_value);\n    obj_ptr_value2 = *(long *)(obj_ptr + 0x60);\n    *(char **)(obj_ptr_value2 + 0x30) = str_ptr;\n    result2._1_7_ = (undefined7)((ulong)obj_ptr_value2 >> 8);\n    result2[0] = 1;\n    result2._8_8_ = param_value;\n    return result2;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = obj_ptr_value;\n  return result << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "sprintf",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_string_value_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "process_debug_name_type_0010c218",
                "param_1": "fileData",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "errorString",
                "lVar2": "debugName",
                "pauVar3": "debugNamePtr",
                "lVar4": "currentFile"
            },
            "code": "\n\n\nlong processDebugNameType_0010c218(long fileData,long param2,long param3)\n\n{\n  undefined8 errorString;\n  long debugName;\n  undefined (*debugNamePtr) [16];\n  long currentFile;\n  \n  if ((param2 != 0) && (param3 != 0)) {\n    if ((*(long *)(fileData + 8) == 0) || (*(long *)(fileData + 0x10) == 0)) {\n      errorString = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",errorString);\n    }\n    else {\n      debugName = FUN_00112904(0x16,0);\n      if (debugName != 0) {\n        debugNamePtr = (undefined (*) [16])xmalloc(0x10);\n        currentFile = *(long *)(fileData + 0x10);\n        *debugNamePtr = ZEXT816(0);\n        *(long *)(*debugNamePtr + 8) = param3;\n        *(undefined (**) [16])(debugName + 0x10) = debugNamePtr;\n        currentFile = FUN_00112925(currentFile + 0x10,param2,0,3);\n        if (currentFile != 0) {\n          *(long *)(currentFile + 0x20) = debugName;\n          *(long *)*debugNamePtr = currentFile;\n          return debugName;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_0010c2d2",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_debug_name_type_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    FUN_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    FUN_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = FUN_00113f20();\n  DAT_001279f0 = FUN_00113f20();\n  DAT_00127a08 = FUN_00113f20();\n  DAT_001279e8 = FUN_00113f20();\n  DAT_001279e0 = FUN_00113f20();\n  DAT_001279d8 = FUN_00113f20();\n  DAT_001279d0 = FUN_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,FUN_00108800,FUN_00108898);\n  DAT_001278c8 = FUN_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = FUN_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = FUN_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        FUN_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        FUN_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        FUN_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        FUN_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          FUN_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        FUN_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    FUN_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    FUN_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = FUN_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = FUN_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = FUN_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = FUN_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)FUN_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  FUN_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = FUN_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = FUN_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)FUN_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        FUN_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    FUN_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = FUN_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        FUN_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    FUN_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = FUN_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    FUN_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          FUN_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    FUN_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    FUN_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    FUN_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = FUN_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    FUN_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = FUN_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = FUN_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            FUN_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            FUN_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = FUN_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = FUN_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,uVar12);\n    lVar17 = FUN_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = FUN_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = FUN_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = FUN_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)FUN_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      FUN_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    FUN_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = FUN_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    FUN_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    FUN_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    FUN_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    FUN_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = FUN_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    FUN_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    FUN_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      FUN_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = FUN_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)FUN_00114190(pcVar32,1,0x80);\n    uVar12 = FUN_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = FUN_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = FUN_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    FUN_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    FUN_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        FUN_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = FUN_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    FUN_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = FUN_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    FUN_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  FUN_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "textdomain",
                "dup",
                "bfd_set_error_program_name",
                "mkstemp",
                "bfd_scan_arch",
                "FUN_00108c86",
                "fclose",
                "bfd_set_default_target",
                "fread",
                "bfd_errmsg",
                "FUN_00114190",
                "fseek",
                "FUN_00108916",
                "free",
                "FUN_0011a390",
                "htab_create_alloc",
                "getopt_long",
                "bfd_get_error",
                "getc",
                "xmalloc_set_program_name",
                "FUN_00119dd0",
                "FUN_00114c80",
                "filename_cmp",
                "strtol",
                "strcasecmp",
                "htab_find_slot",
                "FUN_00114d60",
                "FUN_001054af",
                "setlocale",
                "xstrdup",
                "strncasecmp",
                "FUN_00113f50",
                "FUN_00108800",
                "FUN_00114c20",
                "strtoul",
                "memmove",
                "FUN_00113fb0",
                "free",
                "strcpy",
                "memcpy",
                "FUN_001126c0",
                "FUN_00119940",
                "xmalloc",
                "strncpy",
                "FUN_00108d9a",
                "fprintf",
                "FUN_00119ed0",
                "bindtextdomain",
                "unlink_if_ordinary",
                "FUN_00108a2a",
                "fopen",
                "FUN_00119970",
                "strchr",
                "FUN_0011a480",
                "FUN_00113fe0",
                "ftell",
                "FUN_00114460",
                "strcmp",
                "ferror",
                "FUN_00115970",
                "FUN_00114cf0",
                "bfd_init",
                "htab_elements",
                "strlen",
                "__errno_location",
                "malloc",
                "FUN_001199d0",
                "strerror",
                "xexit",
                "stat",
                "FUN_00114690",
                "FUN_00113f20",
                "xcalloc",
                "xrealloc",
                "FUN_00108898"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_0010be88",
                "param_1": "blockAddress",
                "param_2": "debugFlag",
                "param_3": "unused1",
                "param_4": "unused2",
                "puVar1": "lastBlock",
                "uVar2": "success",
                "puVar3": "newBlock",
                "puVar4": "currentBlock",
                "lVar5": "blockAddressOffset",
                "puVar6": "previousBlock",
                "puVar7": "ptrTemp",
                "bVar8": "flag",
                "auVar9": "retval"
            },
            "code": "\n\n\nundefined  [16] startBlock_0010be88(long blockAddress,undefined8 debugFlag,undefined8 unused1,undefined8 unused2)\n\n{\n  undefined8 *lastBlock;\n  undefined8 success;\n  undefined4 *newBlock;\n  undefined8 *currentBlock;\n  long blockAddressOffset;\n  undefined8 *previousBlock;\n  undefined4 *ptrTemp;\n  byte flag;\n  undefined retval [16];\n  \n  flag = 0;\n  if ((*(long *)(blockAddress + 8) == 0) || (*(long *)(blockAddress + 0x20) == 0)) {\n    success = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",success);\n    success = 0;\n  }\n  else {\n    newBlock = (undefined4 *)xmalloc(0x30);\n    ptrTemp = newBlock;\n    for (blockAddressOffset = 0xc; blockAddressOffset != 0; blockAddressOffset = blockAddressOffset + -1) {\n      *ptrTemp = 0;\n      ptrTemp = ptrTemp + (ulong)flag * -2 + 1;\n    }\n    blockAddressOffset = *(long *)(blockAddress + 0x20);\n    *(undefined8 *)(newBlock + 6) = debugFlag;\n    *(undefined8 *)(newBlock + 8) = 0xffffffffffffffff;\n    *(long *)(newBlock + 2) = blockAddressOffset;\n    lastBlock = *(undefined8 **)(blockAddressOffset + 0x10);\n    previousBlock = (undefined8 *)(blockAddressOffset + 0x10);\n    while (currentBlock = lastBlock, currentBlock != (undefined8 *)0x0) {\n      previousBlock = currentBlock;\n      lastBlock = (undefined8 *)*currentBlock;\n    }\n    *previousBlock = newBlock;\n    success = 1;\n    *(undefined4 **)(blockAddress + 0x20) = newBlock;\n  }\n  retval._8_8_ = unused2;\n  retval._0_8_ = success;\n  return retval;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "start_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010e2f0",
                "FUN_00115dc0",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_00114690",
                "FUN_001083b7"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "build_warning_message_0010ba08",
                "param_1": "parameters",
                "param_2": "field_name",
                "param_3": "field_size",
                "param_4": "field_offset",
                "param_5": "field_type",
                "cVar1": "flag",
                "iVar2": "struct_size",
                "lVar3": "length",
                "__s": "warning_message",
                "sVar4": "param_2_length",
                "sVar5": "field_name_length",
                "sVar6": "warning_message_length",
                "__s_00": "formatted_message",
                "uVar7": "warning_string",
                "uVar8": "return_value",
                "pcVar9": "field_type_string"
            },
            "code": "\nundefined8\nbuild_warning_message_0010ba08(undefined8 *parameters,char *field_name,undefined8 field_size,ulong field_offset,int field_type)\n\n{\n  char flag;\n  int struct_size;\n  long length;\n  char *warning_message;\n  size_t param_2_length;\n  size_t field_name_length;\n  size_t warning_message_length;\n  char *formatted_message;\n  undefined8 warning_string;\n  undefined8 return_value;\n  char *field_type_string;\n  \n  flag = *(char *)(parameters[0xc] + 0x1c);\n  struct_size = *(int *)(parameters[0xc] + 0x18);\n  warning_message = (char *)FUN_00109b2f();\n  if (*(char **)(parameters[0xc] + 0x20) == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    param_2_length = strlen(*(char **)(parameters[0xc] + 0x20));\n    field_name_length = strlen(field_name);\n    warning_message_length = strlen(warning_message);\n    formatted_message = (char *)xmalloc(param_2_length + 0x32 + field_name_length + warning_message_length);\n    if (field_type == 1) {\n      field_type_string = \"/1\";\n    }\n    else {\n      field_type_string = \"/0\";\n      if ((field_type != 2) && (field_type_string = \"\", field_type != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((field_offset == 0) && (field_offset = (ulong)(uint)(struct_size * 8), field_offset == 0)) {\n      return_value = *(undefined8 *)*parameters;\n      warning_string = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      FUN_00119ed0(warning_string,return_value,field_name);\n    }\n    sprintf(formatted_message,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(parameters[0xc] + 0x20),field_name,field_type_string,warning_message,\n            field_size,field_offset);\n    free(*(void **)(parameters[0xc] + 0x20));\n    length = parameters[0xc];\n    *(char **)(length + 0x20) = formatted_message;\n    if (flag != '\\0') {\n      *(undefined *)(length + 0x1c) = 1;\n    }\n    return_value = CONCAT71((int7)((ulong)length >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00119ed0",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "build_warning_message_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "extract_data_0010aa53",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "mode",
                "cVar1": "character",
                "lVar2": "listPointer",
                "cVar3": "flagChar",
                "uVar4": "counter",
                "__s": "string",
                "sVar5": "length",
                "pcVar6": "newString",
                "lVar7": "reallocPointer",
                "uVar8": "result",
                "uVar9": "counterUint",
                "uVar10": "finalCounter"
            },
            "code": "\nundefined8 extractData_0010aa53(long dataPointer,undefined8 value,char flag,int mode)\n\n{\n  char character;\n  long listPointer;\n  char flagChar;\n  uint counter;\n  char *string;\n  size_t length;\n  char *newString;\n  long reallocPointer;\n  undefined8 result;\n  ulong counterUint;\n  ulong finalCounter;\n  \n  character = *(char *)(*(long *)(dataPointer + 0x60) + 0x1c);\n  string = (char *)FUN_00109b2f();\n  length = strlen(string);\n  newString = (char *)xmalloc(length + 0x19);\n  *newString = flag + '0';\n  if (mode == 1) {\n    flagChar = '1';\n  }\n  else {\n    flagChar = '0';\n    if ((mode != 2) && (flagChar = '2', mode != 0)) {\n                    \n      abort();\n    }\n  }\n  newString[1] = flagChar;\n  sprintf(newString + 2,\"%ld,%s;\",value);\n  free(string);\n  listPointer = *(long *)(dataPointer + 0x60);\n  result = 0;\n  if ((listPointer != 0) && (*(long *)(listPointer + 0x20) != 0)) {\n    listPointer = *(long *)(listPointer + 0x28);\n    finalCounter = 0;\n    if (listPointer != 0) {\n      counter = 0;\n      do {\n        counterUint = (ulong)counter;\n        finalCounter = (ulong)counter;\n        counter = counter + 1;\n      } while (*(long *)(listPointer + counterUint * 8) != 0);\n    }\n    reallocPointer = xrealloc(listPointer,(ulong)((int)finalCounter + 2) << 3);\n    *(char **)(reallocPointer + finalCounter * 8) = newString;\n    *(undefined8 *)(reallocPointer + (ulong)((int)finalCounter + 1) * 8) = 0;\n    listPointer = *(long *)(dataPointer + 0x60);\n    *(long *)(listPointer + 0x28) = reallocPointer;\n    if (character != '\\0') {\n      *(undefined *)(listPointer + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "process_binary_0011173a",
                "param_1": "param",
                "param_2": "binaryData",
                "param_3": "code",
                "param_4": "value",
                "param_5": "offset",
                "param_6": "name",
                "cVar1": "char1",
                "bVar2": "byte1",
                "__ptr": "ptr",
                "cVar3": "char2",
                "uVar4": "undefinedVal",
                "iVar5": "intVal",
                "puVar6": "ptrArray",
                "plVar7": "longArray",
                "pcVar8": "charArray",
                "uVar9": "undefined8Val",
                "lVar10": "longVal1",
                "lVar11": "longVal2",
                "lVar12": "longVal3",
                "pplVar13": "longPtrPtrArray",
                "uVar14": "ulongVal1",
                "uVar15": "ulongVal2",
                "pcVar16": "charArray2",
                "uVar17": "uintVal",
                "dVar19": "doubleVal",
                "local_48": "localCharArr1",
                "local_40": "localLongPtrPtrArr"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined processBinary_0011173a(undefined8 param,long *binaryData,int code,int value,ulong offset,\n                      char *name)\n\n{\n  char char1;\n  byte byte1;\n  void *ptr;\n  char char2;\n  undefined undefinedVal;\n  int intVal;\n  undefined8 *ptrArray;\n  long *longArray;\n  char *charArray;\n  undefined8 undefined8Val;\n  long longVal1;\n  long longVal2;\n  long longVal3;\n  long **longPtrPtrArray;\n  ulong ulongVal1;\n  ulong ulongVal2;\n  char *charArray2;\n  uint uintVal;\n  long **pplVar18;\n  double doubleVal;\n  char *localCharArr1;\n  long **localLongPtrPtrArr [2];\n  \n  if (binaryData[4] != 0) {\n    if (((code == 100) && (*name != '\\0')) && (binaryData[5] == offset)) goto LAB_00111a06;\n    char2 = FUN_0010bbd3(param);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)binaryData + 0x44) = 0;\n    *(undefined4 *)(binaryData + 8) = 0;\n    binaryData[9] = binaryData[4];\n    if (*(char *)(binaryData + 1) == '\\0') {\n      binaryData[6] = binaryData[5];\n    }\n    *(undefined4 *)(binaryData + 0x10) = 1;\n    ptrArray = (undefined8 *)xmalloc(8);\n    binaryData[0x11] = (long)ptrArray;\n    *ptrArray = 0;\n    binaryData[4] = 0;\n  }\n  strlen(name);\n  if (code == 0x84) {\nLAB_00111ab7:\n    undefinedVal = FUN_00108f08(param,name);\n    return undefinedVal;\n  }\n  if (code < 0x85) {\n    if (code == 0x3c) {\n      intVal = strcmp(name,\"gcc2_compiled.\");\n      if (intVal == 0) {\n        *(undefined4 *)(binaryData + 8) = 2;\n        return 1;\n      }\n      intVal = strcmp(name,\"gcc_compiled.\");\n      if (intVal == 0) {\n        *(undefined4 *)(binaryData + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)binaryData + 0x44) = 1;\n      return 1;\n    }\n    if (code < 0x3d) {\n      if (code == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(binaryData + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(binaryData + 1) != '\\0') {\n            offset = offset + binaryData[7];\n          }\n          char2 = FUN_0010c1c6(param,binaryData);\n          if (char2 != '\\0') {\n            char2 = FUN_0010be1a(param,offset);\n            if (char2 != '\\0') {\n              *(undefined *)(binaryData + 0xc) = 0;\n              binaryData[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(binaryData + 0xc) != '\\0') &&\n           ((offset < (ulong)binaryData[0xd] || (binaryData[0xd] == 0xffffffffffffffff)))) {\n          binaryData[0xd] = offset;\n        }\n      }\n      else if (code < 0x25) {\n        if (code == 0xc) {\n          return 1;\n        }\n        if (code - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (code == 0x2a) {\n          return 1;\n        }\n        if (code == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (code == 100) {\nLAB_00111a06:\n        if (*(char *)(binaryData + 0xc) != '\\0') {\n          ulongVal1 = offset;\n          if (((*name != '\\0') && (ulongVal2 = binaryData[0xd], ulongVal2 != 0xffffffffffffffff)) &&\n             (ulongVal1 = ulongVal2, offset < ulongVal2)) {\n            ulongVal1 = offset;\n          }\n          char2 = FUN_0010c1c6(param,binaryData);\n          if (char2 == '\\0') {\n            return 0;\n          }\n          char2 = FUN_0010be1a(param,ulongVal1);\n          if (char2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(binaryData + 0xc) = 0;\n          binaryData[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        ptr = (void *)binaryData[4];\n        if (ptr == (void *)0x0) {\n          longVal3 = xstrdup(name);\n          binaryData[4] = longVal3;\n        }\n        else {\n          if (*name == '/') {\n            longVal3 = xstrdup(name);\n          }\n          else {\n            longVal3 = concat(ptr,name,0);\n          }\n          binaryData[4] = longVal3;\n          free(ptr);\n        }\n        binaryData[5] = offset;\n        return 1;\n      }\n      if (code < 0x65) {\n        if (code == 0x44) {\n          longVal3 = 0;\n          if (*(char *)(binaryData + 0xc) != '\\0') {\n            longVal3 = binaryData[7];\n          }\n          undefinedVal = FUN_0010bf86(param,(long)value,longVal3 + offset);\n          return undefinedVal;\n        }\n        if (code == 0x62) {\n          return 1;\n        }\n      }\n      else if (code == 0x82) {\n        longArray = (long *)xmalloc();\n        intVal = *(int *)(binaryData + 0x10);\n        longVal1 = binaryData[10];\n        longVal2 = binaryData[0xb];\n        longArray[5] = 0;\n        longVal3 = binaryData[0x11];\n        *(int *)(longArray + 4) = intVal;\n        uintVal = intVal + 1;\n        *(uint *)(binaryData + 0x10) = uintVal;\n        *longArray = longVal2;\n        longArray[1] = longVal1;\n        longArray[2] = (long)name;\n        longArray[3] = offset;\n        binaryData[10] = (long)longArray;\n        binaryData[0xb] = (long)longArray;\n        longVal3 = xrealloc(longVal3,(ulong)uintVal << 3);\n        uintVal = *(uint *)(longArray + 4);\n        binaryData[0x11] = longVal3;\n        *(undefined8 *)(longVal3 + (ulong)uintVal * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    charArray = strchr(name,0x3a);\n    if ((charArray != (char *)0x0) && ((charArray[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(binaryData + 0xc) != '\\0') {\n        ulongVal1 = binaryData[0xd];\n        ulongVal2 = offset;\n        if ((ulongVal1 != 0xffffffffffffffff) && (ulongVal2 = ulongVal1, offset < ulongVal1)) {\n          ulongVal2 = offset;\n        }\n        char2 = FUN_0010c1c6(param,binaryData);\n        if (char2 == '\\0') {\n          return 0;\n        }\n        char2 = FUN_0010be1a(param,ulongVal2);\n        if (char2 == '\\0') {\n          return 0;\n        }\n        binaryData[0xd] = -1;\n      }\n      if (*(char *)(binaryData + 1) != '\\0') {\n        binaryData[7] = offset;\n      }\n      *(undefined *)(binaryData + 0xc) = 1;\n    }\n    localCharArr1 = strchr(name,0x3a);\n    if (localCharArr1 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localCharArr1[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      char2 = name[1];\n      charArray2 = \"eh_throw\";\n      if (char2 != 'e') {\n        if (char2 < 'f') {\n          if ((char2 != 'X') && (char2 != '_')) {\nLAB_00111d1a:\n            undefined8Val = dcgettext(0,\"unknown C++ encoded name\",5);\n            FUN_00108fe8(name,undefined8Val);\n          }\n        }\n        else {\n          charArray2 = \"this\";\n          if (char2 == 't') goto LAB_00111d62;\n          if (char2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      charArray2 = (char *)0x0;\n      if ((name != localCharArr1) && ((*name != ' ' || (localCharArr1 != name + 1)))) {\n        charArray2 = (char *)FUN_00109a0b(name,(int)localCharArr1 - (int)name);\n      }\n    }\nLAB_00111d62:\n    byte1 = localCharArr1[1];\n    charArray = localCharArr1 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte1 * 2) >> 2) & 1 |\n        (byte1 == 0x2d || byte1 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      undefined8Val = 4;\n      goto LAB_001123e8;\n    }\n    if (byte1 == 0) goto switchD_00111de5_caseD_44;\n    charArray = localCharArr1 + 2;\n    char2 = localCharArr1[1];\n    switch(char2) {\n    case 'C':\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      charArray = \"debug_record_label: not implemented\";\n      if (longVal3 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      char2 = FUN_0010bc80(param,charArray2,longVal3,char2 == 'F',offset);\n      if (char2 != '\\0') {\n        do {\n          if (*localCharArr1 != ';') {\n            return 1;\n          }\n          localCharArr1 = localCharArr1 + 1;\n          longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n        } while (longVal3 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      if (charArray2 == (char *)0x0) goto LAB_0011208f;\n      longVal1 = binaryData[3];\n      longArray = (long *)binaryData[2];\n      char2 = *(char *)(*(long *)(*binaryData + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (code == 0x24) {\n        localCharArr1 = charArray;\n        do {\n          if (*localCharArr1 != ';') {\n            return 1;\n          }\n          localCharArr1 = localCharArr1 + 1;\n          longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n        } while (longVal3 != 0);\n        return 0;\n      }\n    case 'R':\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      undefined8Val = 2;\n      break;\n    case 'S':\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      undefined8Val = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char2 = localCharArr1[2];\n      if (char2 == 't') {\n        charArray = localCharArr1 + 3;\n      }\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,charArray2,&localCharArr1,localLongPtrPtrArr);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      if (charArray2 == (char *)0x0) {\n        return 1;\n      }\n      char1 = *(char *)(binaryData + 0x35);\n      longArray = (long *)FUN_0010c6be(param,charArray2,longVal3);\n      if (longArray == (long *)0x0) {\n        return 0;\n      }\n      if (localLongPtrPtrArr[0] != (long **)0x0) {\n        *localLongPtrPtrArr[0] = longArray;\n      }\n      if (char1 != '\\0') goto LAB_001122f0;\n      longPtrPtrArray = (long **)(binaryData + 0x34);\n      pplVar18 = (long **)binaryData[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      undefined8Val = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      charArray = localCharArr1 + 3;\n      if (((localCharArr1[2] != '\\0') && (charArray = localCharArr1 + 4, localCharArr1[3] == 'n')) &&\n         (charArray = localCharArr1 + 5, charArray2 = localCharArr1 + 4, localCharArr1 = charArray, *charArray2 == '0')) {\n        for (; charArray = localCharArr1, *localCharArr1 != '\\0'; localCharArr1 = localCharArr1 + 1) {\n          if (*localCharArr1 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      undefined8Val = 4;\n      break;\n    case 'c':\n      if (localCharArr1[2] == '=') {\n        charArray = localCharArr1 + 4;\n        char2 = localCharArr1[3];\n        localCharArr1 = charArray;\n        if (char2 == 'i') {\n          longVal3 = strtol(charArray,(char **)0x0,10);\n          if (charArray2 == (char *)0x0) {\n            return 0;\n          }\n          longVal1 = FUN_00112996(param,charArray2,4);\n          if (longVal1 != 0) {\n            *(long *)(longVal1 + 0x20) = (long)(int)longVal3;\n            return 1;\n          }\n          return 0;\n        }\n        if (char2 == 'r') {\n          doubleVal = strtod(charArray,(char **)0x0);\n          if (charArray2 == (char *)0x0) {\n            return 0;\n          }\n          longVal3 = FUN_00112996(param,charArray2,5);\n          if (longVal3 != 0) {\n            *(double *)(longVal3 + 0x20) = doubleVal;\n            return 1;\n          }\n          return 0;\n        }\n        if (char2 == 'e') {\n          longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n          if (longVal3 == 0) {\n            return 0;\n          }\n          charArray = localCharArr1;\n          if (*localCharArr1 == ',') {\n            longVal1 = strtol(localCharArr1,(char **)0x0,10);\n            if (charArray2 == (char *)0x0) {\n              return 0;\n            }\n            longVal2 = FUN_00112996(param,charArray2,6);\n            if (longVal2 != 0) {\n              longArray = (long *)xmalloc(0x10);\n              *longArray = longVal3;\n              longArray[1] = (long)(int)longVal1;\n              *(long **)(longVal2 + 0x20) = longArray;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localCharArr1[2] == 'F') {\n        localCharArr1 = localCharArr1 + 3;\n        longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n        if (longVal3 == 0) {\n          return 0;\n        }\n        undefined8Val = FUN_00113ce0(longVal3,0,0);\n        longVal3 = FUN_00113d3a(undefined8Val);\n      }\n      else {\n        localCharArr1 = charArray;\n        longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      }\n      if (longVal3 == 0) {\n        return 0;\n      }\n      undefined8Val = 1;\n      break;\n    case 'r':\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      undefined8Val = 5;\nLAB_001123e8:\n      char2 = FUN_0010c139(param,binaryData,charArray2,longVal3,undefined8Val,offset);\n      goto joined_r0x001123f8;\n    case 't':\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,charArray2,&localCharArr1,localLongPtrPtrArr);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      if (charArray2 == (char *)0x0) {\n        return 1;\n      }\n      longArray = (long *)FUN_0010c218(param,charArray2,longVal3);\n      if (longArray == (long *)0x0) {\n        return 0;\n      }\n      if (localLongPtrPtrArr[0] == (long **)0x0) {\n        return 1;\n      }\n      *localLongPtrPtrArr[0] = longArray;\n      return 1;\n    case 'v':\n      localCharArr1 = charArray;\n      longVal3 = FUNC_0010ee3f(param,binaryData,0,&localCharArr1,0);\n      if (longVal3 == 0) {\n        return 0;\n      }\n      undefined8Val = 3;\n    }\n    char2 = FUN_0010bd62(param,charArray2,longVal3,undefined8Val,offset);\n    goto joined_r0x001123f8;\n  }\n  if (code == 0xe0) {\n    if ((*(char *)((long)binaryData + 0x44) != '\\0') && (value == 1)) {\n      return 1;\n    }\n    char2 = FUN_0010c1c6(param,binaryData);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    char2 = FUN_0010bf20(param,binaryData[7] + binaryData[6] + offset);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    binaryData = binaryData + 0xe;\n    *(int *)binaryData = *(int *)binaryData + -1;\n    charArray = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)binaryData) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < code) {\n      if (code == 0xe2) {\n        charArray = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        charArray = \"debug_end_common_block: not implemented\";\n        if (code != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined8Val = dcgettext(0,charArray,5);\n      fprintf(_stderr,\"%s\\n\",undefined8Val);\n      return 0;\n    }\n    if (code != 0xc0) {\n      if (code == 0xc2) {\n        intVal = *(int *)(binaryData + 0x10);\n        *(uint *)(binaryData + 0x10) = intVal + 1U;\n        longVal3 = xrealloc(binaryData[0x11],(ulong)(intVal + 1U) << 3);\n        ptrArray = (undefined8 *)binaryData[0xb];\n        binaryData[0x11] = longVal3;\n        while( true ) {\n          if (ptrArray == (undefined8 *)0x0) {\n            undefined8Val = dcgettext(0,\"Undefined N_EXCL\",5);\n            FUN_00108fe8(name,undefined8Val);\n            *(undefined8 *)(binaryData[0x11] + (ulong)(*(int *)(binaryData + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((offset == ptrArray[3]) && (intVal = strcmp((char *)ptrArray[2],name), intVal == 0))\n          break;\n          ptrArray = (undefined8 *)*ptrArray;\n        }\n        *(undefined8 *)(longVal3 + (ulong)(*(int *)(binaryData + 0x10) - 1) * 8) = ptrArray[5];\n        return 1;\n      }\n      if (code == 0xa2) {\n        longVal3 = binaryData[10];\n        if (longVal3 != 0) {\n          longVal1 = *(long *)(longVal3 + 8);\n          uintVal = *(uint *)(longVal3 + 0x20);\n          binaryData[10] = longVal1;\n          if ((uintVal < *(uint *)(binaryData + 0x10)) &&\n             (*(undefined8 *)(longVal3 + 0x28) = *(undefined8 *)(binaryData[0x11] + (ulong)uintVal * 8),\n             longVal1 != 0)) {\n            name = *(char **)(longVal1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)binaryData[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)binaryData + 0x44) != '\\0') && (value == 1)) {\n      return 1;\n    }\n    if (*(char *)(binaryData + 0xc) != '\\0') {\n      char2 = FUN_0010be88(param,binaryData[7] + binaryData[6] + offset);\n      if (char2 == '\\0') {\n        return 0;\n      }\n      char2 = FUN_0010c1c6(param,binaryData);\n      if (char2 != '\\0') {\n        *(int *)(binaryData + 0xe) = *(int *)(binaryData + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    charArray = \"N_LBRAC not within function\\n\";\n  }\n  charArray = (char *)dcgettext(0,charArray,5);\n  fprintf(_stderr,charArray);\n  return 0;\ncode_r0x00111cc7:\n  localCharArr1 = localCharArr1 + 2;\n  localCharArr1 = strchr(localCharArr1,0x3a);\n  if (localCharArr1 == (char *)0x0) {\n    charArray = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localCharArr1 = charArray;\n    FUN_00108fb9(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (char2 != 't') {\n      return 1;\n    }\n    longArray = (long *)FUN_0010c218(param,charArray2,longArray);\n    if (longArray != (long *)0x0) {\n      if (localLongPtrPtrArr[0] == (long **)0x0) {\n        return 1;\n      }\n      *localLongPtrPtrArr[0] = longArray;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *charArray2) &&\n     (intVal = strcmp((char *)pplVar18[1],charArray2), intVal == 0)) {\n    pplVar18[3] = longArray;\n    *longPtrPtrArray = *pplVar18;\n    goto LAB_001122f0;\n  }\n  longPtrPtrArray = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVal1 < 1) {\nLAB_0011208f:\n    undefined8Val = 1;\nLAB_001121c4:\n    char2 = FUN_0010c05d(param,charArray2,longVal3,undefined8Val,offset);\njoined_r0x001123f8:\n    if (char2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  charArray = *(char **)(*longArray + 8);\n  if ((char2 != '\\0') && (char2 == *charArray)) {\n    charArray = charArray + 1;\n  }\n  if ((*charArray == *charArray2) && (intVal = strcmp(charArray,charArray2), intVal == 0)) {\n    offset = *(long *)(*longArray + 0x10) + *(long *)(*(long *)(*longArray + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVal1 = longVal1 + -1;\n  longArray = longArray + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "xmalloc",
                "fprintf",
                "FUN_00108fe8",
                "FUN_0010c139",
                "FUN_00108fb9",
                "strchr",
                "free",
                "FUN_0010bc80",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "strtod",
                "strcmp",
                "FUN_0010bbd3",
                "strtol",
                "FUN_00112996",
                "concat",
                "FUN_0010be88",
                "FUN_00113ce0",
                "FUN_0010ee3f",
                "FUN_0010c6be",
                "FUN_00109a0b",
                "strlen",
                "xstrdup",
                "FUN_0010c1c6",
                "FUN_0010c05d",
                "FUN_0010c218",
                "xrealloc",
                "FUN_0010bf20",
                "FUN_0010bd62",
                "FUN_00108f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "status",
                "iVar2": "errorCode",
                "uVar3": "result",
                "lVar4": "relocUpperBound",
                "puVar5": "relocBuffer",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "outputBuffer",
                "puVar8": "currentOutput",
                "uVar9": "index",
                "uStack_38": "unusedVariable"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char status;\n  int errorCode;\n  undefined8 result;\n  long relocUpperBound;\n  undefined8 *relocBuffer;\n  ulong relocCount;\n  code *jumpTable;\n  undefined8 *outputBuffer;\n  undefined8 *currentOutput;\n  ulong index;\n  undefined8 unusedVariable;\n  \n  status = FUN_00115f50(param1,param2,0);\n  if (status != '\\0') {\n    return;\n  }\n  result = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (relocUpperBound = FUN_00114190(*param2,0,0x100), relocUpperBound == 0)) {\n    relocUpperBound = bfd_get_reloc_upper_bound(param1,param2);\n    if (relocUpperBound < 0) {\n      if ((relocUpperBound != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n        DAT_00127a20 = 1;\n        result = 0;\nLAB_00108315:\n        FUN_001126c0(0,param1,param2,result,unusedVariable);\n        return;\n      }\n    }\n    else if (relocUpperBound != 0) {\n      relocBuffer = (undefined8 *)param2[0xe];\n      if (relocBuffer == (undefined8 *)0x0) {\n        relocBuffer = (undefined8 *)bfd_alloc(param3);\n        if (relocBuffer == (undefined8 *)0x0) {\n          FUN_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(param1,param2,relocBuffer,DAT_001278b0);\n        if ((long)relocCount < 0) {\n          DAT_00127a20 = 1;\n          result = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        outputBuffer = relocBuffer;\n        for (index = 0; index != relocCount; index = index + 1) {\n          currentOutput = outputBuffer;\n          if (((*(long **)relocBuffer[index] != (long *)0x0) &&\n              (relocUpperBound = **(long **)relocBuffer[index], relocUpperBound != 0)) &&\n             (status = FUN_00115d70(*(undefined8 *)(relocUpperBound + 8),DAT_00127a08), status != '\\0')) {\n            currentOutput = outputBuffer + 1;\n            *outputBuffer = relocBuffer[index];\n          }\n          outputBuffer = currentOutput;\n        }\n        *outputBuffer = 0;\n        relocCount = (long)outputBuffer - (long)relocBuffer >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocBuffer = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocBuffer = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(param3,result,relocBuffer,relocCount);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a110",
                "FUN_00114190",
                "xexit",
                "bfd_alloc",
                "FUN_001126c0",
                "FUN_001082df",
                "FUN_00115f50",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "validate_and_process_input_0010d559",
                "param_1": "input_array",
                "param_2": "input_string",
                "param_3": "output_length",
                "bVar1": "first_byte",
                "pbVar2": "current_byte",
                "cVar3": "result",
                "uVar4": "expected_length",
                "iVar5": "comparison_result",
                "ppcVar6": "temp_buffer",
                "sVar7": "string_length",
                "lVar8": "result_length",
                "plVar9": "ptr_list",
                "pcVar10": "temp_string",
                "__s1": "comparison_string",
                "__ptr": "temp_ptr",
                "pbVar11": "temp_byte",
                "uVar12": "zero_or_nine",
                "__nptr": "numeric_string",
                "local_64": "counter",
                "local_40": "output_buffer"
            },
            "code": "\nundefined8 validate_and_process_input_0010d559(undefined8 *input_array,byte **input_string,long *output_length)\n\n{\n  byte first_byte;\n  byte *current_byte;\n  char result;\n  uint expected_length;\n  int comparison_result;\n  char **temp_buffer;\n  size_t string_length;\n  long result_length;\n  long *ptr_list;\n  char *temp_string;\n  char *comparison_string;\n  void *temp_ptr;\n  byte *temp_byte;\n  undefined8 zero_or_nine;\n  byte *numeric_string;\n  int counter;\n  char *output_buffer [2];\n  \n  current_byte = *input_string;\n  first_byte = current_byte[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    counter = (char)first_byte + -0x30;\n    if (current_byte[2] == 0x5f) {\n      *input_string = current_byte + 1;\n    }\n    temp_byte = *input_string + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&_sch_istable)[(ulong)current_byte[2] * 2] & 4) == 0)) ||\n       (current_byte[2] == 0x30)) goto LAB_0010d5d8;\n    numeric_string = current_byte + 2;\n    result_length = strtol((char *)numeric_string,(char **)0x0,10);\n    counter = (int)result_length;\n    while (((&_sch_istable)[(ulong)*numeric_string * 2] & 4) != 0) {\n      numeric_string = numeric_string + 1;\n    }\n    temp_byte = numeric_string + 1;\n    if (*numeric_string != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_string = temp_byte;\n  temp_buffer = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    temp_buffer = output_buffer;\n  }\n  result_length = 0;\n  while( true ) {\n    while( true ) {\n      counter = counter + -1;\n      if (counter == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = result_length;\n        }\n        return 1;\n      }\n      if (**input_string == 0x5f) {\n        *input_string = *input_string + 1;\n      }\n      if (**input_string != 0x74) break;\n      result = FUN_0010d21c(input_array,input_string,temp_buffer);\n      temp_string = output_buffer[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        string_length = strlen(output_buffer[0]);\n        result_length = FUN_0010afd5(*input_array,input_array[1],temp_string,string_length & 0xffffffff,9);\n        free(temp_string);\n        if (result_length == 0) {\n          return 0;\n        }\n      }\n    }\n    expected_length = FUN_00108e76(input_string);\n    string_length = strlen((char *)*input_string);\n    if (string_length < expected_length) break;\n    if (output_length != (long *)0x0) {\n      if ((result_length != 0) && (ptr_list = (long *)FUN_00113b1e(result_length), ptr_list != (long *)0x0)) {\n        temp_string = (char *)FUN_00109a0b(*input_string,expected_length);\n        for (; result_length = *ptr_list, result_length != 0; ptr_list = ptr_list + 1) {\n          result_length = *(long *)(result_length + 8);\n          if (result_length == 0) {\n            free(temp_string);\n            return 0;\n          }\n          comparison_string = (char *)FUN_001129f4(result_length);\n          if ((comparison_string != (char *)0x0) && (comparison_result = strcmp(comparison_string,temp_string), comparison_result == 0)) break;\n        }\n        free(temp_string);\n        if (result_length != 0) goto LAB_0010d7ad;\n      }\n      zero_or_nine = 9;\n      if (counter == 0) {\n        temp_ptr = (void *)FUN_00109a0b(*input_string,expected_length);\n        result_length = FUN_0010914e(*input_array,temp_ptr);\n        free(temp_ptr);\n        if (result_length != 0) goto LAB_0010d7ad;\n        zero_or_nine = 0;\n      }\n      result_length = FUN_0010afd5(*input_array,input_array[1],*input_string,expected_length,zero_or_nine);\n      if (result_length == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_string = *input_string + expected_length;\n  }\nLAB_0010d5d8:\n  FUN_0010911f(current_byte);\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001129f4",
                "FUN_00113b1e",
                "FUN_0010914e",
                "strtol",
                "FUN_0010afd5",
                "free",
                "FUN_0010911f",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strlen",
                "FUN_00108e76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "validate_and_process_input_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "__gnuc_va_list": "argumentList",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,argumentList param_2)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_001275e0);\n  vfprintf(standardError,errorMessage,param_2);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_resources_00108466",
                "param_7": "resourceToFree"
            },
            "code": "\nvoid cleanupAndFreeResources_00108466(void)\n\n{\n  void *resourceToFree;\n  \n  DAT_00127a20 = 1;\n  FUN_001126c0(0);\n  free(resourceToFree);\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_resources_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_integer_00108e76",
                "param_1": "input",
                "bVar1": "currentChar",
                "iVar2": "result"
            },
            "code": "\nint parseInteger_00108e76(byte **input)\n\n{\n  byte currentChar;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    currentChar = **input;\n    if (((&_sch_istable)[(ulong)currentChar * 2] & 4) == 0) break;\n    *input = *input + 1;\n    result = result * 10 + -0x30 + (int)(char)currentChar;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_integer_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_value",
                "param_2": "hash_param_1",
                "param_3": "hash_param_2",
                "lVar1": "hash_value"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_value,undefined8 hash_param_1,undefined8 hash_param_2)\n\n{\n  long hash_value;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(hash_param_1,0x30), input_value != 0)) &&\n     (hash_value = bfd_hash_newfunc(input_value,hash_param_1,hash_param_2), hash_value != 0)) {\n    *(undefined8 *)(hash_value + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_value + 0x18) = 0;\n    *(undefined4 *)(hash_value + 0x28) = 0;\n    return hash_value;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_param_and_call_function_thunk_0010e439",
                "param_1": "base_address",
                "param_2": "param_value"
            },
            "code": "\nvoid set_param_and_call_function_thunk_0010e439(long base_address,undefined8 param_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = param_value;\n  FUN_0010e2f0(base_address,0x84,0,0,param_value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_and_call_function_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "directory_path",
                "param_2": "default_path",
                "iVar1": "access_result",
                "sStack_a8": "file_info"
            },
            "code": "\nchar * check_directory_access_0011283f(char *directory_path,char *default_path)\n\n{\n  int access_result;\n  stat file_info;\n  \n  if ((default_path == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&file_info);\n      if ((access_result == 0) && ((file_info.st_mode & 0xf000) == 0x4000)) {\n        default_path = directory_path;\n      }\n    }\n  }\n  return default_path;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_return_error_code_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errorCodePtr",
                "iVar1": "errorCode"
            },
            "code": "\nundefined8 closeFileAndReturnErrorCode_00108237(void)\n\n{\n  int errorCode;\n  int *errorCodePtr;\n  int fileDescriptor;\n  \n  errorCodePtr = __errno_location();\n  errorCode = *errorCodePtr;\n  close(fileDescriptor);\n  *errorCodePtr = errorCode;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_and_return_error_code_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "fileHandle",
                "param_2": "filename",
                "param_3": "recordSize",
                "param_4": "debugLevel",
                "uVar1": "errorMessage",
                "plVar2": "record",
                "puVar3": "debugData",
                "lVar4": "count",
                "puVar5": "ptr",
                "pcVar6": "emptyString",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long fileHandle,char *filename,long recordSize,uint debugLevel,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 errorMessage;\n  long *record;\n  undefined4 *debugData;\n  long count;\n  undefined4 *ptr;\n  char *emptyString;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  emptyString = \"\";\n  if (filename != (char *)0x0) {\n    emptyString = filename;\n  }\n  if (recordSize != 0) {\n    if (*(long *)(fileHandle + 8) == 0) {\n      errorMessage = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      record = (long *)xmalloc(0x18);\n      *record = recordSize;\n      *(undefined (*) [16])(record + 1) = ZEXT816(0);\n      debugData = (undefined4 *)xmalloc(0x30);\n      *(long **)(fileHandle + 0x18) = record;\n      record[2] = (long)debugData;\n      ptr = debugData;\n      for (count = 0xc; count != 0; count = count + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(fileHandle + 0x20) = debugData;\n      count = *(long *)(fileHandle + 0x10);\n      *(undefined8 *)(debugData + 6) = param_5;\n      *(undefined8 *)(debugData + 8) = 0xffffffffffffffff;\n      count = FUN_00112925(count + 0x10,emptyString,3,(debugLevel & 0xff) + 1);\n      if (count != 0) {\n        *(long **)(count + 0x20) = record;\n        errorMessage = CONCAT71((int7)((ulong)count >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_0010bd56:\n  result._8_8_ = param_6;\n  result._0_8_ = errorMessage;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = FUN_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107880",
                "FUN_001125fa",
                "FUN_00119ed0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "extract_filename_00114cf0",
                "param_1": "path",
                "pcVar1": "last_slash",
                "lVar2": "length",
                "lVar3": "prefix_length",
                "lVar4": "filename_length",
                "pcVar5": "new_filename_ptr",
                "bVar6": "found_slash"
            },
            "code": "\nvoid extract_filename_00114cf0(char *path)\n\n{\n  char *last_slash;\n  long length;\n  long prefix_length;\n  long filename_length;\n  char *new_filename_ptr;\n  byte found_slash;\n  \n  found_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    prefix_length = 0;\n  }\n  else {\n    filename_length = (long)last_slash - (long)path;\n    last_slash = (char *)xmalloc(filename_length + 0xb);\n    prefix_length = filename_length + 1;\n    new_filename_ptr = last_slash;\n    for (length = filename_length; length != 0; length = length + -1) {\n      *new_filename_ptr = *path;\n      path = path + (ulong)found_slash * -2 + 1;\n      new_filename_ptr = new_filename_ptr + (ulong)found_slash * -2 + 1;\n    }\n    last_slash[filename_length] = '/';\n  }\n  *(undefined8 *)(last_slash + prefix_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + prefix_length) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_filename_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "inputStruct",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "flag",
                "cVar1": "flagValue",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "resultString",
                "lVar7": "counter",
                "local_41": "localFlag",
                "iVar2": "value2",
                "iVar3": "value3",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 processData_0010a181(long inputStruct,long startValue,long endValue,byte flag)\n\n{\n  char flagValue;\n  int value2;\n  int value3;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  long counter;\n  byte localFlag;\n  \n  flagValue = *(char *)(*(long *)(inputStruct + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  localFlag = 1;\n  if (flagValue == '\\0') {\n    localFlag = *(byte *)(*(long *)(inputStruct + 0x60) + 0x1c);\n  }\n  value2 = *(int *)(*(long *)(inputStruct + 0x60) + 0x18);\n  string2 = (char *)FUN_00109b2f(inputStruct);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  resultString = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *resultString = '\\0';\n    counter = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    counter = *(long *)(inputStruct + 0x68);\n    *(long *)(inputStruct + 0x68) = counter + 1;\n    sprintf(resultString,\"%ld=@S;\",counter);\n    localFlag = flag;\n  }\n  length1 = strlen(resultString);\n  sprintf(resultString + length1,\"ar%s;%ld;%ld;%s\",string1,startValue,endValue,string2);\n  free(string1);\n  free(string2);\n  value3 = 0;\n  if (startValue <= endValue) {\n    value3 = value2 * (((int)endValue - (int)startValue) + 1);\n  }\n  returnValue = FUN_00109b52(inputStruct,resultString,counter,localFlag,value3);\n  if ((char)returnValue != '\\0') {\n    free(resultString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_0011a480",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_bfd_header_version_001199d0",
                "iVar1": "numColumns",
                "iVar2": "archIndex",
                "iVar3": "archComparison",
                "pcVar4": "headerVersion",
                "sVar5": "headerVersionLength",
                "pcVar6": "tempFilePath",
                "uVar7": "result",
                "piVar8": "errorCode",
                "iVar9": "targetIndex",
                "lVar10": "archIndexLong",
                "lVar11": "tmpIndexLong",
                "ppcVar12": "archTargets",
                "uVar13": "maxArchLength",
                "uVar14": "stringLength",
                "local_70": "tmpIndex"
            },
            "code": "\n\n\nvoid printBFDHeaderVersion_001199d0(void)\n\n{\n  int numColumns;\n  int archIndex;\n  int archComparison;\n  char *headerVersion;\n  size_t headerVersionLength;\n  char *tempFilePath;\n  undefined8 result;\n  int *errorCode;\n  int targetIndex;\n  long archIndexLong;\n  long tmpIndexLong;\n  char **archTargets;\n  uint maxArchLength;\n  ulong stringLength;\n  int tmpIndex;\n  \n  headerVersion = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerVersion,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    headerVersion = getenv(\"TMPDIR\");\n    result = FUN_0011283f(headerVersion,0);\n    headerVersion = getenv(\"TMP\");\n    result = FUN_0011283f(headerVersion,result);\n    headerVersion = getenv(\"TEMP\");\n    result = FUN_0011283f(headerVersion,result);\n    result = FUN_0011283f(&DAT_0011b39a,result);\n    result = FUN_0011283f(\"/var/tmp\",result);\n    headerVersion = (char *)FUN_0011283f(&DAT_00120324,result);\n    if (headerVersion == (char *)0x0) {\n      headerVersion = \".\";\n    }\n    headerVersionLength = strlen(headerVersion);\n    tempFilePath = (char *)xmalloc((int)headerVersionLength + 2);\n    DAT_001278c0 = strcpy(tempFilePath,headerVersion);\n    DAT_001278c0[headerVersionLength & 0xffffffff] = '/';\n    DAT_001278c0[(int)headerVersionLength + 1] = '\\0';\n  }\n  headerVersion = DAT_001278c0;\n  headerVersionLength = strlen(DAT_001278c0);\n  archIndexLong = (long)(int)headerVersionLength;\n  tempFilePath = (char *)xmalloc(archIndexLong + 9);\n  strcpy(tempFilePath,headerVersion);\n  *(undefined2 *)(tempFilePath + archIndexLong) = 0x6363;\n  *(undefined4 *)(tempFilePath + archIndexLong + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilePath + archIndexLong + 2) + 3) = 0x585858;\n  tempFilePath[archIndexLong + 8] = '\\0';\n  archIndex = mkstemps(tempFilePath,0);\n  if (archIndex == -1) {\n    errorCode = __errno_location();\n    tempFilePath = strerror(*errorCode);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerVersion,tempFilePath);\n                    \n    abort();\n  }\n  archIndex = close(archIndex);\n  if (archIndex != 0) {\n                    \n    abort();\n  }\n  maxArchLength = 0;\n  archIndex = 2;\n  bfd_iterate_over_targets(FUN_00119f70);\n  unlink(tempFilePath);\n  free(tempFilePath);\n  tmpIndex = 0;\n  do {\n    headerVersion = (char *)bfd_printable_arch_mach(archIndex);\n    headerVersionLength = strlen(headerVersion);\n    if ((int)maxArchLength < (int)(uint)headerVersionLength) {\n      maxArchLength = (uint)headerVersionLength;\n    }\n    archIndex = archIndex + 1;\n  } while (archIndex != 0x57);\n  headerVersion = getenv(\"COLUMNS\");\n  archIndex = tmpIndex;\n  if (headerVersion != (char *)0x0) {\n    archIndexLong = strtol(headerVersion,(char **)0x0,10);\n    numColumns = (int)archIndexLong;\n    if (numColumns != 0) goto LAB_00119b11;\n  }\n  numColumns = 0x50;\nLAB_00119b11:\n  do {\n    tmpIndex = archIndex;\n    if (-1 < tmpIndex) {\n      return;\n    }\n    tmpIndexLong = (long)tmpIndex;\n    targetIndex = (numColumns - maxArchLength) + -1;\n    archIndexLong = tmpIndexLong;\n    do {\n      archIndex = (int)archIndexLong;\n      if (-1 < archIndex) break;\n      headerVersionLength = strlen(*(char **)(archIndexLong * 0x60));\n      archIndexLong = archIndexLong + 1;\n      targetIndex = (targetIndex - (int)headerVersionLength) + -1;\n    } while (-1 < targetIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchLength + 1),&DAT_0011b4a1);\n    for (archTargets = (char **)(tmpIndexLong * 0x60);\n        ((ulong)(uint)(archIndex - tmpIndex) + tmpIndexLong) * 0x60 - (long)archTargets != 0;\n        archTargets = archTargets + 0xc) {\n      printf(\"%s \",*archTargets);\n    }\n    targetIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerVersion = (char *)bfd_printable_arch_mach(targetIndex,0);\n      archComparison = strcmp(headerVersion,\"UNKNOWN!\");\n      if (archComparison != 0) {\n        result = bfd_printable_arch_mach(targetIndex,0);\n        printf(\"%*s \",(ulong)maxArchLength,result);\n        archTargets = (char **)(tmpIndexLong * 0x60);\n        archComparison = tmpIndex;\n        while (archIndex != archComparison) {\n          if (*(char *)((long)archTargets + (ulong)(targetIndex - 2) + 8) == '\\0') {\n            headerVersionLength = strlen(*archTargets);\n            for (stringLength = headerVersionLength & 0xffffffff; (int)stringLength != 0; stringLength = (ulong)((int)stringLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archTargets,_stdout);\n          }\n          archComparison = archComparison + 1;\n          if (archIndex != archComparison) {\n            putc(0x20,_stdout);\n          }\n          archTargets = archTargets + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      targetIndex = targetIndex + 1;\n    } while (targetIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "FUN_00119f70",
                "xmalloc",
                "bfd_iterate_over_targets",
                "fprintf",
                "abort",
                "unlink",
                "FUN_00104943",
                "strlen",
                "__errno_location",
                "strerror",
                "bfd_printable_arch_mach",
                "free",
                "printf",
                "mkstemps",
                "strcpy",
                "FUN_0011283f",
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_bfd_header_version_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_application_0010847a"
            },
            "code": "\nvoid initialize_application_0010847a(void)\n\n{\n  FUN_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_application_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "extract_string_from_binary_0010d21c",
                "param_2": "binary_ptr",
                "param_3": "output_string",
                "bVar1": "byte_1",
                "pbVar2": "ptr_1",
                "bVar3": "byte_2",
                "cVar4": "char_1",
                "bVar5": "byte_3",
                "uVar6": "result",
                "iVar7": "var_1",
                "uVar8": "var_2",
                "sVar9": "length",
                "pbVar10": "ptr_2",
                "__ptr": "ptr_3",
                "__ptr_00": "ptr_4",
                "__haystack": "string_1",
                "pcVar11": "ptr_5",
                "uVar12": "result_2",
                "pcVar13": "ptr_6",
                "bVar14": "byte_4",
                "pcVar15": "ptr_7",
                "bVar16": "byte_5",
                "bVar17": "byte_6",
                "bVar18": "byte_7",
                "bVar19": "byte_8",
                "uVar20": "counter",
                "uVar21": "str_length",
                "local_3c": "local_array"
            },
            "code": "\nundefined4 extractStringFromBinary_0010d21c(undefined8 param_1,byte **binary_ptr,undefined8 *output_string)\n\n{\n  byte byte_1;\n  byte *ptr_1;\n  byte byte_2;\n  char char_1;\n  byte byte_3;\n  undefined4 result;\n  int var_1;\n  uint var_2;\n  size_t length;\n  byte *ptr_2;\n  void *ptr_3;\n  void *ptr_4;\n  char *string_1;\n  char *ptr_5;\n  undefined8 result_2;\n  char *ptr_6;\n  byte byte_4;\n  char *ptr_7;\n  byte byte_5;\n  byte byte_6;\n  byte byte_7;\n  byte byte_8;\n  uint counter;\n  ulong str_length;\n  uint local_array [3];\n  \n  ptr_1 = *binary_ptr;\n  *binary_ptr = ptr_1 + 1;\n  local_array[0] = FUN_00108e76(binary_ptr);\n  str_length = (ulong)local_array[0];\n  if (local_array[0] != 0) {\n    ptr_2 = *binary_ptr;\n    length = strlen((char *)ptr_2);\n    if (str_length <= length) {\n      *binary_ptr = ptr_2 + str_length;\n      counter = 0;\n      result = FUN_00108ea1(binary_ptr,local_array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (local_array[0] <= counter) {\n          if (output_string == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr_3 = (void *)FUN_00109a0b(ptr_1,(int)*binary_ptr - (int)ptr_1);\n          ptr_4 = (void *)concat(\"NoSuchStrinG__\",ptr_3,0);\n          free(ptr_3);\n          string_1 = (char *)cplus_demangle(ptr_4,2);\n          free(ptr_4);\n          if ((string_1 != (char *)0x0) &&\n             (ptr_5 = strstr(string_1,\"::NoSuchStrinG\"), ptr_6 = string_1,\n             ptr_7 = string_1, ptr_5 != (char *)0x0)) {\n            for (; ptr_6 != ptr_5; ptr_6 = ptr_6 + 1) {\n              if ((*ptr_6 != ' ') ||\n                 (((ptr_6[1] == '>' && (string_1 < ptr_6)) && (ptr_6[-1] == '>')))) {\n                *ptr_7 = *ptr_6;\n                ptr_7 = ptr_7 + 1;\n              }\n            }\n            result_2 = FUN_00109a0b(string_1,(int)ptr_7 - (int)string_1);\n            *output_string = result_2;\n            free(string_1);\n            return result;\n          }\n          FUN_0010911f(ptr_1);\n          free(string_1);\n          return 0;\n        }\n        ptr_2 = *binary_ptr;\n        if (*ptr_2 != 0x5a) {\n          byte_3 = FUN_0010c95e(param_1,binary_ptr,0);\n          if (byte_3 == 0) {\n            return 0;\n          }\n          byte_2 = 0;\n          byte_4 = 0;\n          byte_7 = 0;\n          byte_6 = 0;\n          byte_8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte_5 = byte_2;\n              byte_1 = *ptr_2;\n              if ((byte_4 | byte_1 == 0) != 0) {\n                byte_3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte_2 = byte_3;\n              byte_4 = byte_3;\n            } while ('v' < (char)byte_1);\n            if ((char)byte_1 < 'b') {\n              if ((char)byte_1 < 'U') {\n                if ((char)byte_1 < 'C') goto LAB_0010d2e9;\n                str_length = 1L << (byte_1 + 0xbd & 0x3f);\n                if ((str_length & 0x11409) == 0) {\n                  if ((str_length & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte_1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte_1 + 0xab)) goto LAB_0010d2e9;\n              ptr_2 = ptr_2 + 1;\n              byte_2 = byte_5;\n              byte_4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte_1) {\n            case 0x62:\n              byte_2 = byte_5;\n              byte_7 = byte_3;\n              break;\n            case 99:\n              byte_2 = byte_5;\n              byte_8 = byte_3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte_2 = byte_5;\n              byte_6 = byte_3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *binary_ptr = ptr_2 + 1;\n        char_1 = FUN_0010c95e(param_1,binary_ptr,0);\n        if (char_1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  FUN_0010911f(ptr_1);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte_5 == 0) {\n    if (byte_8 == 0) {\n      if (byte_7 == 0) {\n        if (byte_6 == 0) {\n          if (byte_3 != 0) {\n            var_2 = FUN_00108e76(binary_ptr);\n            if (var_2 == 0) goto LAB_0010d280;\n            *binary_ptr = *binary_ptr + var_2;\n          }\n        }\n        else {\n          if (**binary_ptr == 0x6d) {\n            *binary_ptr = *binary_ptr + 1;\n          }\n          while( true ) {\n            ptr_2 = *binary_ptr;\n            if (((&_sch_istable)[(ulong)*ptr_2 * 2] & 4) == 0) break;\n            *binary_ptr = ptr_2 + 1;\n          }\n          if (*ptr_2 == 0x2e) {\n            do {\n              ptr_2 = ptr_2 + 1;\n              *binary_ptr = ptr_2;\n            } while (((&_sch_istable)[(ulong)*ptr_2 * 2] & 4) != 0);\n          }\n          ptr_2 = *binary_ptr;\n          if (*ptr_2 == 0x65) {\n            do {\n              ptr_2 = ptr_2 + 1;\n              *binary_ptr = ptr_2;\n            } while (((&_sch_istable)[(ulong)*ptr_2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        var_2 = FUN_00108e76(binary_ptr);\n        if (1 < var_2) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**binary_ptr == 0x6d) {\n        *binary_ptr = *binary_ptr + 1;\n      }\n      var_1 = FUN_00108e76(binary_ptr);\n      if (var_1 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**binary_ptr == 0x6d) {\n      *binary_ptr = *binary_ptr + 1;\n    }\n    while (((&_sch_istable)[(ulong)**binary_ptr * 2] & 4) != 0) {\n      *binary_ptr = *binary_ptr + 1;\n    }\n  }\nLAB_0010d2b1:\n  counter = counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "concat",
                "free",
                "cplus_demangle",
                "FUN_0010911f",
                "strstr",
                "abort",
                "FUN_00108ea1",
                "FUN_00109a0b",
                "FUN_00108e76",
                "strlen",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "extract_string_from_binary_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hashtable_001054af",
                "param_1": "unused_param",
                "param_2": "unused_param",
                "in_RAX": "temporary_variable"
            },
            "code": "\nvoid cleanup_hashtable_001054af(undefined8 unused_param,undefined8 unused_param)\n\n{\n  undefined8 temporary_variable;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,unused_param,temporary_variable);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hashtable_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "update_data_0010c139",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "previousValue",
                "cVar2": "charValue",
                "uVar3": "returnValue",
                "puVar4": "newData",
                "in_R10": "registerValue1",
                "unaff_R15": "registerValue2"
            },
            "code": "\nulong updateData_0010c139(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 previousValue;\n  char charValue;\n  ulong returnValue;\n  undefined8 *newData;\n  undefined8 registerValue1;\n  undefined8 registerValue2;\n  \n  charValue = *(char *)(param2 + 0x60);\n  if ((charValue != '\\0') && ((*(int *)(param2 + 0x40) != 0 || (*(char *)(param2 + 0x44) == '\\0')))) {\n    newData = (undefined8 *)xmalloc(0x28);\n    previousValue = *(undefined8 *)(param2 + 0x78);\n    *(undefined8 *)((long)newData + 0x1c) = 0;\n    newData[2] = param4;\n    *(undefined4 *)(newData + 3) = param5;\n    newData[4] = param6;\n    *(undefined8 **)(param2 + 0x78) = newData;\n    *newData = previousValue;\n    newData[1] = param3;\n    return CONCAT71((int7)((ulong)registerValue2 >> 8),charValue) & 0xffffffff;\n  }\n  returnValue = FUN_0010c05d(param1,param3,param4,param5,param6,registerValue1);\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "update_data_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_param_and_call_function_0010e439",
                "param_1": "dataAddress",
                "param_2": "paramValue"
            },
            "code": "\nvoid setParamAndCallFunction_0010e439(long dataAddress,undefined8 paramValue)\n\n{\n  *(undefined8 *)(dataAddress + 0x210) = paramValue;\n  FUN_0010e2f0(dataAddress,0x84,0,0,paramValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "imported": false,
            "current_name": "set_param_and_call_function_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010abdd",
                "FUN_0010a0e9",
                "FUN_0010e842",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109d97",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_0010e918",
                "FUN_0010e5db",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_00109dfe",
                "FUN_0010ee3f",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_001125fa",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010abdd",
                "FUN_0010e2f0",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010e842",
                "FUN_0011378f",
                "FUN_00109bbb",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_00104ad6",
                "FUN_0010c95e",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_00113ede",
                "FUN_0010e5db",
                "FUN_00115530",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_00116b90",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_001199d0",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_001125fa",
                "FUN_0010ba08",
                "FUN_00113fb0",
                "FUN_0010a377",
                "FUN_0011173a",
                "FUN_0010b0fa",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "process_data_00109d3e",
                "param_1": "input",
                "param_2": "size",
                "uVar1": "result"
            },
            "code": "\nvoid processData_00109d3e(undefined8 input,int size)\n\n{\n  undefined8 result;\n  \n  result = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    result = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  FUN_00109cf4(input,result,size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_and_execute_next_00112502",
                "param_1": "data",
                "param_2": "param",
                "param_3": "value",
                "uVar1": "index",
                "puVar2": "ptr",
                "uVar3": "temp",
                "cVar4": "result"
            },
            "code": "\nundefined checkAndExecuteNext_00112502(long data,undefined8 param,ulong value)\n\n{\n  uint index;\n  undefined8 *ptr;\n  undefined8 temp;\n  char result;\n  \n  do {\n    ptr = *(undefined8 **)(data + 0x40);\n    if (ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(data + 0x48), index < 10 && (ptr[(ulong)index + 2] != -1))) {\n      if (value <= (ulong)ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = FUN_0010edb4(param,*(undefined8 *)(ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data + 0x48) = *(int *)(data + 0x48) + 1;\n    }\n    temp = *ptr;\n    *(undefined4 *)(data + 0x48) = 0;\n    *(undefined8 *)(data + 0x40) = temp;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_0011378f",
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "check_and_execute_next_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_line_00104cc1",
                "uVar1": "translatedString",
                "ppbVar2": "hashTableSlot",
                "pbVar3": "currentChar",
                "bVar4": "nextChar",
                "unaff_RBX": "currentLine",
                "pbVar5": "currentLinePtr",
                "unaff_EBP": "lineNumber",
                "in_R10": "lineStart",
                "unaff_R13": "param_7",
                "unaff_R14": "currentLineEnd",
                "unaff_R15": "currentLinePos",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "linePtr"
            },
            "code": "\nvoid processLine_00104cc1(void)\n\n{\n  undefined8 translatedString;\n  byte **hashTableSlot;\n  byte *currentChar;\n  byte nextChar;\n  byte *currentLine;\n  byte *currentLinePtr;\n  int lineNumber;\n  byte *lineStart;\n  undefined8 param_7;\n  byte *currentLineEnd;\n  byte *currentLinePos;\n  undefined8 param7;\n  undefined8 *param8;\n  byte *linePtr;\n  \ncode_r0x00104cc1:\n  linePtr = lineStart;\n  translatedString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  FUN_00119ed0(translatedString,param7,lineNumber);\n  currentLinePtr = currentLine;\n  lineStart = linePtr;\nLAB_00114599:\n  do {\n    *lineStart = 0;\n    if (currentLinePos < lineStart) {\n      hashTableSlot = (byte **)htab_find_slot();\n      *hashTableSlot = currentLinePos;\n    }\n    lineNumber = lineNumber + 1;\n    currentChar = currentLinePtr;\n    if (currentLineEnd[1] == 0) {\n      *param8 = param_7;\n      return;\n    }\n    for (; nextChar = *currentChar, currentLineEnd = currentChar, nextChar != 10; currentChar = currentChar + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          currentLine = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *currentChar = 0;\n          currentLine = currentChar + 1;\n          if (currentChar[1] == 10) {\n            currentLine = currentChar + 2;\n            currentLineEnd = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      currentLineEnd = currentChar + 1;\n      currentLine = currentChar + 2;\n    }\n    else {\n      currentLine = currentChar + 1;\n    }\nLAB_00114553:\n    nextChar = *currentLinePtr;\n    currentLinePos = currentLinePtr;\n    while ((nextChar == 0x20 || (lineStart = currentLinePos, nextChar == 9))) {\n      currentLinePtr = currentLinePos + 1;\n      currentLinePos = currentLinePos + 1;\n      nextChar = *currentLinePtr;\n    }\n    do {\n      currentLinePtr = currentLine;\n      if ((nextChar == 10) || (nextChar == 0xd)) goto LAB_00114676;\n      if (nextChar == 0) goto LAB_00114599;\n      nextChar = lineStart[1];\n      lineStart = lineStart + 1;\n    } while ((nextChar != 0x20) && (nextChar != 9));\n    if ((char)nextChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (nextChar & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    nextChar = lineStart[1];\n    if ((((((nextChar == 9) || (nextChar == 0x20)) && ((nextChar = lineStart[2], nextChar == 9 || (nextChar == 0x20)))\n          ) && ((nextChar = lineStart[3], nextChar == 9 || (nextChar == 0x20)))) &&\n        ((nextChar = lineStart[4], nextChar == 9 || (nextChar == 0x20)))) &&\n       ((nextChar = lineStart[5], nextChar == 9 || (nextChar == 0x20)))) {\n      nextChar = lineStart[6];\n      currentChar = lineStart + 6;\n      if ((nextChar == 9) || (nextChar == 0x20)) {\n        do {\n          do {\n            nextChar = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (nextChar == 0x20);\n        } while (nextChar == 9);\n      }\n    }\n    if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104d1c",
                "htab_find_slot",
                "FUN_00104c36",
                "FUN_00104cc1",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_line_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010e2f0",
                "FUN_00119f70",
                "FUN_00109be3",
                "FUN_0010ab4d",
                "FUN_00116b90",
                "FUN_00109c2e",
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010b6ea",
                "FUN_00114dc7",
                "FUN_0010d7d4",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "allocate_and_store_values_00113bfa",
                "param_1": "value1",
                "param_2": "value2",
                "lVar1": "result",
                "plVar2": "allocated_values"
            },
            "code": "\nlong allocate_and_store_values_00113bfa(long value1,long value2)\n\n{\n  long result;\n  long *allocated_values;\n  \n  if (((value1 != 0) && (value2 != 0)) && (result = FUN_00112904(0x12,0), result != 0)) {\n    allocated_values = (long *)xmalloc(0x10);\n    *allocated_values = value1;\n    allocated_values[1] = value2;\n    *(long **)(result + 0x10) = allocated_values;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_store_values_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_not_coff_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "value1",
                "uVar2": "message",
                "unaff_EBX": "EBX"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 value1;\n  undefined8 message;\n  uint EBX;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    value1 = *param2;\n    EBX = EBX & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(message,value1,param3);\n  }\n  return EBX;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00107880",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_counter_and_print_00109e76",
                "param_1": "dataStructure",
                "param_2": "value",
                "lVar1": "counter",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateCounterAndPrint_00109e76(long dataStructure,uint value)\n\n{\n  long counter;\n  char formattedString [58];\n  \n  counter = *(long *)(dataStructure + 0x68);\n  *(long *)(dataStructure + 0x68) = counter + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",counter,counter,(ulong)value);\n  FUN_00109b52(dataStructure,formattedString,counter,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_counter_and_print_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "timestamp1",
                "param_4": "dataString",
                "iVar1": "currentIndex",
                "lVar2": "previousIndex",
                "lVar3": "entryOffset",
                "uVar4": "duplicatedString"
            },
            "code": "\nulong updateDataEntry_001088ae(undefined4 value1,undefined4 value2,undefined8 timestamp1,undefined8 dataString)\n\n{\n  int currentIndex;\n  long previousIndex;\n  long entryOffset;\n  undefined8 duplicatedString;\n  \n  previousIndex = (long)DAT_001278a0;\n  entryOffset = previousIndex * 0x18;\n  free((void *)(&DAT_00127730)[previousIndex * 3]);\n  *(undefined4 *)(&DAT_00127720 + entryOffset) = value1;\n  *(undefined4 *)(&DAT_00127724 + entryOffset) = value2;\n  *(undefined8 *)(&DAT_00127728 + entryOffset) = timestamp1;\n  duplicatedString = xstrdup(dataString);\n  (&DAT_00127730)[previousIndex * 3] = duplicatedString;\n  currentIndex = DAT_001278a0 + 1;\n  DAT_001278a0 = currentIndex % 0x10;\n  return (long)currentIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_entry_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_and_process_string_0010afd5",
                "param_1": "stringArray",
                "param_2": "structPointer",
                "param_3": "stringPointer",
                "iVar1": "comparisonResult",
                "__s2": "searchString",
                "puVar2": "structPointer1",
                "uVar3": "result",
                "lVar4": "value",
                "puVar5": "structPointer2",
                "puVar6": "undefined4Pointer",
                "bVar7": "falseFlag",
                "auVar8": "resultArray"
            },
            "code": "\nundefined  [16]\nfindAndProcessString_0010afd5(undefined8 *stringArray,long structPointer,undefined8 stringPointer,undefined4 param_4,\n            undefined4 param_5,undefined8 param_6)\n\n{\n  int comparisonResult;\n  char *searchString;\n  undefined8 *structPointer1;\n  undefined8 result;\n  long value;\n  undefined8 *structPointer2;\n  undefined4 *undefined4Pointer;\n  byte falseFlag;\n  undefined resultArray [16];\n  \n  falseFlag = 0;\n  searchString = (char *)FUN_00109a0b(stringPointer,param_4);\n  for (stringArray = (undefined8 *)*stringArray; stringArray != (undefined8 *)0x0;\n      stringArray = (undefined8 *)*stringArray) {\n    for (structPointer1 = (undefined8 *)stringArray[1]; structPointer1 != (undefined8 *)0x0;\n        structPointer1 = (undefined8 *)*structPointer1) {\n      if ((undefined8 *)structPointer1[2] != (undefined8 *)0x0) {\n        for (structPointer2 = *(undefined8 **)(undefined8 *)structPointer1[2]; structPointer2 != (undefined8 *)0x0;\n            structPointer2 = (undefined8 *)*structPointer2) {\n          if ((*(int *)((long)structPointer2 + 0x14) == 1) && (*(char *)structPointer2[1] == *searchString)) {\n            comparisonResult = strcmp((char *)structPointer2[1],searchString);\n            if (comparisonResult == 0) {\n              value = structPointer2[4];\n              if (value == 0) goto LAB_0010b05b;\n              free(searchString);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  structPointer1 = *(undefined8 **)(structPointer + 0x1a0);\n  do {\n    if (structPointer1 == (undefined8 *)0x0) {\n      structPointer1 = (undefined8 *)xmalloc(0x28);\n      result = *(undefined8 *)(structPointer + 0x1a0);\n      undefined4Pointer = (undefined4 *)((long)structPointer1 + 0x14);\n      for (value = 5; value != 0; value = value + -1) {\n        *undefined4Pointer = 0;\n        undefined4Pointer = undefined4Pointer + (ulong)falseFlag * -2 + 1;\n      }\n      *(undefined4 *)(structPointer1 + 2) = param_5;\n      *structPointer1 = result;\n      structPointer1[1] = searchString;\n      result = FUN_00113e23(structPointer1 + 3,searchString);\n      *(undefined8 **)(structPointer + 0x1a0) = structPointer1;\n      structPointer1[4] = result;\nLAB_0010b0e7:\n      value = structPointer1[4];\nLAB_0010b0eb:\n      resultArray._8_8_ = param_6;\n      resultArray._0_8_ = value;\n      return resultArray;\n    }\n    if (*(char *)structPointer1[1] == *searchString) {\n      comparisonResult = strcmp((char *)structPointer1[1],searchString);\n      if (comparisonResult == 0) {\n        if (*(int *)(structPointer1 + 2) == 0) {\n          *(undefined4 *)(structPointer1 + 2) = param_5;\n        }\n        free(searchString);\n        goto LAB_0010b0e7;\n      }\n    }\n    structPointer1 = (undefined8 *)*structPointer1;\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "xmalloc",
                "free",
                "FUN_00113e23",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "find_and_process_string_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = FUN_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)FUN_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = FUN_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)FUN_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)FUN_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)FUN_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              FUN_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)FUN_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)FUN_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = FUN_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = FUN_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)FUN_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)FUN_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)FUN_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = FUN_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = FUN_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = FUN_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        FUN_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)FUN_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)FUN_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)FUN_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            FUN_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)FUN_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = FUN_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          FUN_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)FUN_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = FUN_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = FUN_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)FUN_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)FUN_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)FUN_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                FUN_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = FUN_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                FUN_00108fe8(pbVar27,uVar15);\n                lVar38 = FUN_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)FUN_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)FUN_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)FUN_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)FUN_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)FUN_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)FUN_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)FUN_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)FUN_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          FUN_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = FUN_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = FUN_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = FUN_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)FUN_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)FUN_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = FUN_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            FUN_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  FUN_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                FUN_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = FUN_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)FUN_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        FUN_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        FUN_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = FUN_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                FUN_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              FUN_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)FUN_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  FUN_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  FUN_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = FUN_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = FUN_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              FUN_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)FUN_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)FUN_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)FUN_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)FUN_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              FUN_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = FUN_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = FUN_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    FUN_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          FUN_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = FUN_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = FUN_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                FUN_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = FUN_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = FUN_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  FUN_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = FUN_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      FUN_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      FUN_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = FUN_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = FUN_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                FUN_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = FUN_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  FUN_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)FUN_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)FUN_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          FUN_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        FUN_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)FUN_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  FUN_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_00113c43",
                "FUN_00108fe8",
                "sprintf",
                "FUN_0010d882",
                "FUN_00108fb9",
                "free",
                "FUN_0010b6ea",
                "FUN_0010911f",
                "FUN_00112b6e",
                "FUN_0010d559",
                "strtol",
                "concat",
                "FUN_0010afd5",
                "FUN_00113d6e",
                "cplus_demangle_init_info",
                "FUN_00113ce0",
                "FUN_00109be3",
                "FUN_00109a0b",
                "strncmp",
                "FUN_00113e5e",
                "FUN_00113bfa",
                "FUN_00113fb0",
                "strcpy",
                "FUN_00113dfe",
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_00113b71",
                "strcat",
                "xmalloc",
                "fprintf",
                "FUN_00109ab1",
                "strchr",
                "FUN_00113e17",
                "FUN_00109022",
                "cplus_demangle_mangled_name",
                "FUN_00109a32",
                "strcmp",
                "FUN_00113b4a",
                "strstr",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "strlen",
                "malloc",
                "strspn",
                "FUN_001129f4",
                "FUN_00112904",
                "FUN_00113da9",
                "xrealloc",
                "FUN_00113df2",
                "FUN_00108e76"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00107880",
                "FUN_001199d0",
                "FUN_0010543c",
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_stabs_entries_00108b3e",
                "__format": "format_str",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stab_entry",
                "iVar5": "counter"
            },
            "code": "\n\n\nundefined8 print_stabs_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_str;\n  long stab_name;\n  long index;\n  long offset;\n  int *stab_entry;\n  int counter;\n  \n  format_str = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,format_str);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  counter = DAT_001278a0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stab_entry = (int *)(&DAT_00127720 + offset);\n    if ((&DAT_00127730)[index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stab_name);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127728 + offset));\n      if (*stab_entry != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127730)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278a0 != counter);\n  return param_3;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_get_stab_name",
                "fputc",
                "fwrite",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "initialize_data_0010a083",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a083(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x2a,4,dataPointer + 0x178,dataPointer + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_and_initialize_array_00109c2e",
                "param_1": "arr",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "ptr",
                "param_6": "data",
                "lVar1": "index",
                "plVar2": "ptrToElement",
                "lVar3": "remainingSize",
                "puVar4": "currentElement",
                "uVar5": "currentSize",
                "bVar6": "initialize",
                "auVar7": "result"
            },
            "code": "\nundefined  [16]\nexpandAndInitializeArray_00109c2e(long arr,long value,ulong size,int flag,undefined4 *ptr,\n            undefined8 data)\n\n{\n  long index;\n  long *ptrToElement;\n  long remainingSize;\n  undefined *currentElement;\n  ulong currentSize;\n  byte initialize;\n  undefined result [16];\n  \n  initialize = 0;\n  size = size & 0xffffffff;\n  currentSize = *(ulong *)(arr + 0x1b0);\n  if (currentSize <= size) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= size; currentSize = currentSize * 2) {\n    }\n    index = xrealloc(*(undefined8 *)(arr + 0x1a8),currentSize * 0x18);\n    *(long *)(arr + 0x1a8) = index;\n    currentElement = (undefined *)(*(long *)(arr + 0x1b0) * 0x18 + index);\n    for (remainingSize = (currentSize - *(long *)(arr + 0x1b0)) * 0x18; remainingSize != 0; remainingSize = remainingSize + -1) {\n      *currentElement = 0;\n      currentElement = currentElement + (ulong)initialize * -2 + 1;\n    }\n    *(ulong *)(arr + 0x1b0) = currentSize;\n  }\n  ptrToElement = (long *)(size * 0x18 + *(long *)(arr + 0x1a8));\n  if (*ptrToElement == 0) {\n    index = *(long *)(arr + 0x68);\n    *ptrToElement = index;\n    *(long *)(arr + 0x68) = index + 1;\n    ptrToElement[1] = value;\n    *(int *)(ptrToElement + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(ptrToElement + 2) = 0;\n    *(undefined4 *)((long)ptrToElement + 0x14) = *ptr;\n  }\n  else {\n    *ptr = *(undefined4 *)((long)ptrToElement + 0x14);\n  }\n  result._8_8_ = data;\n  result._0_8_ = *ptrToElement;\n  return result;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "expand_and_initialize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_bad_format_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "retrieveErrorMessage"
            },
            "code": "\nvoid printBadFormatErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "print_bad_format_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "param_1": "file_pointer",
                "uVar1": "localized_string",
                "lVar2": "memory_location",
                "_stderr": "standard_error"
            },
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long file_pointer,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 localized_string;\n  long memory_location;\n  \n  if ((*(long *)(file_pointer + 8) != 0) && (*(long *)(file_pointer + 0x10) != 0)) {\n    memory_location = *(long *)(file_pointer + 0x10) + 0x10;\n    if (*(long *)(file_pointer + 0x20) != 0) {\n      memory_location = *(long *)(file_pointer + 0x20) + 0x28;\n    }\n    localized_string = FUN_00112925(memory_location,param_2,param_3,3);\n    return localized_string;\n  }\n  localized_string = dcgettext(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(standard_error,\"%s\\n\",localized_string);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_to_current_namespace_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "param_1": "class_id",
                "param_2": "class_name",
                "param_3": "type",
                "param_4": "unknown_param",
                "uVar1": "temp",
                "uVar2": "temp2",
                "lVar3": "temp3",
                "piVar4": "ptr_temp",
                "__s1": "ptr_temp2",
                "cVar5": "temp4",
                "iVar6": "index",
                "puVar7": "ptr_temp3",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long class_id,char *class_name,int *type,undefined8 unknown_param)\n\n{\n  undefined8 temp;\n  uint temp2;\n  long temp3;\n  int *ptr_temp;\n  char *ptr_temp2;\n  char temp4;\n  int index;\n  undefined8 *ptr_temp3;\n  undefined result [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  temp3 = *(long *)(type + 4);\n  ptr_temp3 = (undefined8 *)(ulong)*(uint *)(temp3 + 0xc);\n  if (*(uint *)(temp3 + 0xc) <= *(uint *)(class_id + 0x38)) {\n    for (ptr_temp3 = *(undefined8 **)(class_id + 0x50); ptr_temp3 != (undefined8 *)0x0;\n        ptr_temp3 = (undefined8 *)*ptr_temp3) {\n      ptr_temp = (int *)ptr_temp3[1];\n      if (*ptr_temp == *type) {\n        ptr_temp2 = (char *)ptr_temp3[2];\n        if (class_name == (char *)0x0) {\n          if (ptr_temp2 == (char *)0x0) {\nLAB_0010c82c:\n            temp4 = FUN_0010922b(class_id,ptr_temp,type);\n            if (temp4 != '\\0') {\n              temp2 = *(uint *)(*(long *)(ptr_temp3[1] + 0x10) + 0xc);\n              ptr_temp3 = (undefined8 *)(ulong)temp2;\n              *(uint *)(temp3 + 0xc) = temp2;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((ptr_temp2 != (char *)0x0) && (*ptr_temp2 == *class_name)) &&\n                (index = strcmp(ptr_temp2,class_name), index == 0)) goto LAB_0010c82c;\n      }\n    }\n    index = *(int *)(class_id + 0x34) + 1;\n    *(int *)(class_id + 0x34) = index;\n    *(int *)(temp3 + 0xc) = index;\n    ptr_temp3 = (undefined8 *)xmalloc(0x18);\n    temp = *(undefined8 *)(class_id + 0x50);\n    ptr_temp3[2] = class_name;\n    *(undefined8 **)(class_id + 0x50) = ptr_temp3;\n    *ptr_temp3 = temp;\n    ptr_temp3[1] = type;\n  }\nLAB_0010c884:\n  result._1_7_ = (undefined7)((ulong)ptr_temp3 >> 8);\n  result[0] = 1;\n  result._8_8_ = unknown_param;\n  return result;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_0010922b",
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "debug_set_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00113f20",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "uVar1": "type1",
                "uVar2": "type2",
                "pplVar3": "ptr1Children",
                "ppcVar4": "ptr1String1",
                "ppcVar5": "ptr2String1",
                "lVar6": "ptr1Int1",
                "lVar7": "ptr1Int2",
                "lVar8": "ptr2Int2",
                "pcVar9": "ptr1Char1",
                "pcVar10": "ptr2Char1",
                "cVar11": "charResult",
                "bVar12": "boolResult",
                "iVar13": "strcmpResult",
                "uVar14": "cmpResult1",
                "uVar15": "cmpResult2",
                "puVar16": "ptr1ChildrenPtr",
                "puVar17": "ptr1ChildrenIter",
                "plVar18": "ptr1Iter",
                "lVar19": "charIter",
                "plVar20": "ptr2Iter",
                "plVar21": "ptr2Iter",
                "lVar22": "ptr1Iter",
                "local_70": "ptr2Children",
                "local_58": "listNodeIter",
                "plStack_50": "ptr1String2",
                "local_48": "ptr2String2"
            },
            "code": "\nbyte checkEquality_0010922b(long param_1,long *ptr1,long *ptr2)\n\n{\n  uint type1;\n  uint type2;\n  long **ptr1Children;\n  char **ptr1String1;\n  char **ptr2String1;\n  long ptr1Int1;\n  long ptr1Int2;\n  long ptr2Int2;\n  char *ptr1Char1;\n  char *ptr2Char1;\n  char charResult;\n  byte boolResult;\n  int strcmpResult;\n  undefined8 cmpResult1;\n  undefined8 cmpResult2;\n  undefined8 *ptr1ChildrenPtr;\n  undefined8 *ptr1ChildrenIter;\n  long *ptr1Iter;\n  long charIter;\n  long *ptr2Iter;\n  long *ptr2Iter;\n  long ptr1Iter;\n  long *ptr2Children;\n  undefined8 *listNodeIter;\n  long *ptr1String2;\n  long *ptr2String2;\n  \n  ptr1Iter = ptr2;\n  if (ptr1 == (long *)0x0) {\nLAB_00109241:\n    return ptr2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr1Iter == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    type1 = *(uint *)ptr1;\n    if (type1 == 1) goto code_r0x00109263;\n    while (type2 = *(uint *)ptr2, type2 == 1) {\n      ptr2 = **(long ***)ptr2[2];\n      if (ptr2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (ptr1 == ptr2) {\n      return true;\n    }\n    if (type1 != 0x16) break;\n    if (type2 != 0x17) goto LAB_001092cb;\n    ptr1 = *(long **)(ptr1[2] + 8);\n    if (ptr1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((type1 == 0x17) && (type2 == 0x16)) {\n    ptr2 = *(long **)(ptr2[2] + 8);\n    ptr1Iter = ptr2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*ptr1 != *ptr2) {\n    return false;\n  }\n  if (type1 == 3) {\n    return *(char *)(ptr1 + 2) == *(char *)(ptr2 + 2);\n  }\n  if (type1 < 4) {\n    if (type1 == 2) {\n      return true;\n    }\n  }\n  else if (type1 - 4 < 3) {\n    return true;\n  }\n  listNodeIter = *(undefined8 **)(param_1 + 0x58);\n  for (ptr1ChildrenIter = listNodeIter; ptr1ChildrenIter != (undefined8 *)0x0; ptr1ChildrenIter = (undefined8 *)*ptr1ChildrenIter) {\n    if (((long *)ptr1ChildrenIter[1] == ptr1) && ((long *)ptr1ChildrenIter[2] == ptr2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param_1 + 0x58) = &listNodeIter;\n  ptr1String2 = ptr1;\n  ptr2String2 = ptr2;\n  switch(type1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr1Iter = (long *)ptr1[2];\n    ptr1Children = (long **)ptr2[2];\n    if (ptr1Iter == (long *)0x0) {\n      boolResult = ptr1Children == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr1Children == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param_1 + 0x38) < *(uint *)((long)ptr1Iter + 0xc)) &&\n       (*(uint *)((long)ptr1Iter + 0xc) == *(uint *)((long)ptr1Children + 0xc))) goto LAB_001097af;\n    ptr1ChildrenIter = (undefined8 *)*ptr1Iter;\n    ptr2Children = *ptr1Children;\n    if (((ptr1ChildrenIter == (undefined8 *)0x0) == (ptr2Children == (long *)0x0)) &&\n       ((((ptr1Iter[2] == 0) == (ptr1Children[2] == (long *)0x0) &&\n         ((ptr1Iter[3] == 0) == (ptr1Children[3] == (long *)0x0))) &&\n        ((ptr1Iter[4] == 0) == (ptr1Children[4] == (long *)0x0))))) {\n      if (ptr1ChildrenIter == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr1Iter[4] != 0) &&\n           (charResult = checkEquality_0010922b(param_1,ptr1Iter[4],ptr1Children[4]), charResult == '\\0'))\n        goto LAB_00109382;\n        ptr2Iter = (long *)ptr1Iter[2];\n        if (ptr2Iter == (long *)0x0) {\nLAB_00109540:\n          ptr1ChildrenIter = (undefined8 *)ptr1Iter[3];\n          if (ptr1ChildrenIter == (undefined8 *)0x0) goto LAB_001097af;\n          ptr1Iter = ptr1Children[3];\n          while( true ) {\n            ptr2String1 = (char **)*ptr1ChildrenIter;\n            if (ptr2String1 == (char **)0x0) {\n              boolResult = *ptr1Iter == 0;\n              goto LAB_001099c4;\n            }\n            ptr1String1 = (char **)*ptr1Iter;\n            if (ptr1String1 == (char **)0x0) break;\n            if ((**ptr2String1 != **ptr1String1) || (strcmpResult = strcmp(*ptr2String1,*ptr1String1), strcmpResult != 0))\n            break;\n            ptr1Char1 = ptr2String1[1];\n            ptr2Char1 = ptr1String1[1];\n            if ((ptr1Char1 == (char *)0x0) != (ptr2Char1 == (char *)0x0)) break;\n            if (ptr1Char1 != (char *)0x0) {\n              ptr1Iter = 0;\n              while( true ) {\n                ptr2String1 = *(char ***)(ptr1Char1 + ptr1Iter);\n                ptr1String1 = *(char ***)(ptr2Char1 + ptr1Iter);\n                if (ptr2String1 == (char **)0x0) break;\n                if (ptr1String1 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptr2String1 != **ptr1String1) ||\n                     ((((ulong)ptr2String1[2] ^ (ulong)ptr1String1[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr2String1[3] != ptr1String1[3] ||\n                     ((((ptr2String1[4] == (char *)0x0) != (ptr1String1[4] == (char *)0x0) ||\n                       (strcmpResult = strcmp(*ptr2String1,*ptr1String1), strcmpResult != 0)) ||\n                      (charResult = checkEquality_0010922b(param_1,ptr2String1[1],ptr1String1[1]), charResult == '\\0')))))) ||\n                   ((ptr2String1[4] != (char *)0x0 &&\n                    (charResult = checkEquality_0010922b(param_1,ptr2String1[4],ptr1String1[4]), charResult == '\\0'))))\n                goto LAB_00109382;\n                ptr1Iter = ptr1Iter + 8;\n              }\n              if (ptr1String1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr1ChildrenIter = ptr1ChildrenIter + 1;\n            ptr1Iter = ptr1Iter + 1;\n          }\n        }\n        else {\n          ptr2Iter = ptr1Children[2];\n          for (; ptr1ChildrenIter = (undefined8 *)*ptr2Iter, ptr1ChildrenIter != (undefined8 *)0x0;\n              ptr2Iter = ptr2Iter + 1) {\n            ptr1ChildrenPtr = (undefined8 *)*ptr2Iter;\n            if ((((ptr1ChildrenPtr == (undefined8 *)0x0) ||\n                 (((ptr1ChildrenIter[1] ^ ptr1ChildrenPtr[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr1ChildrenIter + 2) != *(int *)(ptr1ChildrenPtr + 2))) ||\n               (charResult = checkEquality_0010922b(param_1,*ptr1ChildrenIter,*ptr1ChildrenPtr), charResult == '\\0'))\n            goto LAB_00109382;\n            ptr2Iter = ptr2Iter + 1;\n          }\n          if (*ptr2Iter == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptr2String1 = (char **)*ptr1ChildrenIter, ptr2String1 != (char **)0x0; ptr1ChildrenIter = ptr1ChildrenIter + 1) {\n          ptr1String1 = (char **)*ptr2Children;\n          if (ptr1String1 == (char **)0x0) goto LAB_00109382;\n          ptr1Char1 = *ptr1String1;\n          ptr2Char1 = *ptr2String1;\n          if ((*ptr2Char1 != *ptr1Char1) ||\n             ((((ulong)ptr2String1[2] ^ (ulong)ptr1String1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptr2String1 + 0x14) == '\\0') {\n            if (ptr2String1[3] == ptr1String1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          strcmpResult = strcmp(ptr2String1[3],ptr1String1[3]);\n          if (strcmpResult != 0) goto LAB_00109382;\nLAB_00109480:\n          strcmpResult = strcmp(ptr2Char1,ptr1Char1);\n          if (((strcmpResult != 0) || (ptr2String1[1] == (char *)0x0)) || (ptr1String1[1] == (char *)0x0))\n          goto LAB_00109382;\n          cmpResult1 = FUN_00112b6e(ptr1String1[1],0);\n          cmpResult2 = FUN_00112b6e(ptr2String1[1],0);\n          charResult = checkEquality_0010922b(param_1,cmpResult2,cmpResult1);\n          if (charResult == '\\0') goto LAB_00109382;\n          ptr2Children = ptr2Children + 1;\n        }\n        if (*ptr2Children == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr1Iter = (long *)ptr1[2];\n    ptr2Iter = (long *)ptr2[2];\n    if (ptr1Iter == (long *)0x0) {\n      boolResult = ptr2Iter == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr2Iter == (long *)0x0) goto LAB_00109382;\n    ptr1Iter = *ptr1Iter;\n    ptr1Int1 = *ptr2Iter;\n    charIter = 0;\n    ptr1Int2 = ptr1Iter[1];\n    ptr2Int2 = ptr2Iter[1];\n    do {\n      ptr1Char1 = *(char **)(ptr1Iter + charIter);\n      if (ptr1Char1 == (char *)0x0) {\n        boolResult = *(long *)(ptr1Int1 + charIter) == 0;\n        goto LAB_001099c1;\n      }\n      ptr2Char1 = *(char **)(ptr1Int1 + charIter);\n      if (((ptr2Char1 == (char *)0x0) || (*ptr1Char1 != *ptr2Char1)) ||\n         (*(long *)(ptr1Int2 + charIter) != *(long *)(ptr2Int2 + charIter))) break;\n      strcmpResult = strcmp(ptr1Char1,ptr2Char1);\n      charIter = charIter + 8;\n    } while (strcmpResult == 0);\nLAB_00109964:\n    boolResult = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    boolResult = checkEquality_0010922b(param_1,ptr1[2],ptr2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)ptr1[2] + 2) == *(char *)((undefined8 *)ptr2[2] + 2)) &&\n       (charResult = checkEquality_0010922b(param_1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]),\n       charResult != '\\0')) {\n      ptr1Iter = *(long **)(ptr1[2] + 8);\n      ptr2Iter = *(long **)(ptr2[2] + 8);\n      if ((ptr1Iter == (long *)0x0) == (ptr2Iter == (long *)0x0)) {\n        if (ptr1Iter == (long *)0x0) goto LAB_001097af;\n        while (((*ptr1Iter != 0 && (*ptr2Iter != 0)) &&\n               (charResult = checkEquality_0010922b(param_1), charResult != '\\0'))) {\n          ptr1Iter = ptr1Iter + 1;\n          ptr2Iter = ptr2Iter + 1;\n        }\nLAB_0010995d:\n        if (*ptr1Iter != 0) goto LAB_00109964;\n        boolResult = *ptr2Iter == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr1ChildrenIter = (undefined8 *)ptr2[2];\n    ptr1ChildrenPtr = (undefined8 *)ptr1[2];\n    boolResult = 0;\n    if ((ptr1ChildrenPtr[1] == ptr1ChildrenIter[1]) && (ptr1ChildrenPtr[2] == ptr1ChildrenIter[2])) {\nLAB_00109862:\n      boolResult = checkEquality_0010922b(param_1,*ptr1ChildrenPtr,*ptr1ChildrenIter);\n    }\n    break;\n  case 0x10:\n    ptr1ChildrenIter = (undefined8 *)ptr2[2];\n    ptr1ChildrenPtr = (undefined8 *)ptr1[2];\n    boolResult = 0;\n    if (((ptr1ChildrenPtr[2] == ptr1ChildrenIter[2]) && (ptr1ChildrenPtr[3] == ptr1ChildrenIter[3])) &&\n       (*(char *)(ptr1ChildrenPtr + 4) == *(char *)(ptr1ChildrenIter + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr1ChildrenIter = (undefined8 *)ptr2[2];\n    ptr1ChildrenPtr = (undefined8 *)ptr1[2];\n    boolResult = 0;\n    if (*(char *)(ptr1ChildrenPtr + 1) == *(char *)(ptr1ChildrenIter + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    charResult = checkEquality_0010922b(param_1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]);\n    boolResult = 0;\n    if (charResult != '\\0') {\n      boolResult = checkEquality_0010922b(param_1,*(undefined8 *)(ptr1[2] + 8),*(undefined8 *)(ptr2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)ptr1[2] + 3) == *(char *)((undefined8 *)ptr2[2] + 3)) &&\n        (charResult = checkEquality_0010922b(param_1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]),\n        charResult != '\\0')) &&\n       (charResult = checkEquality_0010922b(param_1,*(undefined8 *)(ptr1[2] + 8),\n                              *(undefined8 *)(ptr2[2] + 8)), charResult != '\\0')) {\n      ptr1Iter = *(long **)(ptr1[2] + 0x10);\n      ptr2Iter = *(long **)(ptr2[2] + 0x10);\n      if ((ptr1Iter == (long *)0x0) == (ptr2Iter == (long *)0x0)) {\n        if (ptr1Iter != (long *)0x0) {\n          while (((*ptr1Iter != 0 && (*ptr2Iter != 0)) &&\n                 (charResult = checkEquality_0010922b(param_1), charResult != '\\0'))) {\n            ptr1Iter = ptr1Iter + 1;\n            ptr2Iter = ptr2Iter + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        boolResult = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    boolResult = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr1Iter = (long *)ptr2[2];\n    ptr2Iter = (long *)ptr1[2];\n    strcmpResult = strcmp(*(char **)(*ptr2Iter + 8),*(char **)(*ptr1Iter + 8));\n    boolResult = 0;\n    if (strcmpResult == 0) {\n      boolResult = checkEquality_0010922b(param_1,ptr2Iter[1],ptr1Iter[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  boolResult = boolResult & 1;\nLAB_001099c4:\n  *(undefined8 **)(param_1 + 0x58) = listNodeIter;\n  return boolResult;\ncode_r0x00109263:\n  ptr1 = **(long ***)ptr1[2];\n  ptr1Iter = ptr1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "FUN_0010922b",
                "strcmp",
                "FUN_00112b6e",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010922b",
                "FUN_0010c7a0"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archives_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "currentChar",
                "iVar2": "index",
                "iVar3": "statResult",
                "ppcVar4": "tempPaths",
                "lVar5": "bytesRead",
                "uVar6": "formatString",
                "__format": "errorFormat",
                "puVar7": "tempNode",
                "piVar8": "errnoPtr",
                "uVar9": "errorMsg",
                "in_RAX": "inputRAX",
                "pcVar10": "currentPath",
                "ppcVar11": "currentFile",
                "lVar12": "fileSize",
                "pvVar13": "buffer",
                "pcVar14": "closeFunction",
                "lVar15": "chunkSize",
                "pcVar16": "tempChar",
                "psVar17": "statPtr",
                "unaff_R14": "extractedFiles",
                "unaff_R15": "archivedFiles",
                "bVar18": "flag",
                "unaff_retaddr": "returnAddress",
                "in_stack_00000008": "stackParam1",
                "in_stack_00000010": "stackParam2",
                "in_stack_00000018": "stackParam3",
                "in_stack_00000020": "stackParam4",
                "in_stack_00000028": "stackParam5",
                "in_stack_00000030": "stackParam6",
                "in_stack_000000f8": "stackParam7",
                "in_stack_00000110": "stackParam8"
            },
            "code": "\nvoid extractAndCopyArchives_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char currentChar;\n  int index;\n  int statResult;\n  char **tempPaths;\n  long bytesRead;\n  undefined8 formatString;\n  char *errorFormat;\n  undefined8 *tempNode;\n  int *errnoPtr;\n  undefined8 errorMsg;\n  long inputRAX;\n  char *currentPath;\n  char **currentFile;\n  long fileSize;\n  void *buffer;\n  code *closeFunction;\n  long chunkSize;\n  char *tempChar;\n  stat *statPtr;\n  undefined8 *extractedFiles;\n  char **archivedFiles;\n  byte flag;\n  undefined8 returnAddress;\n  undefined8 *stackParam1;\n  long *stackParam2;\n  char *stackParam3;\n  undefined8 *stackParam4;\n  undefined8 stackParam5;\n  undefined8 stackParam6;\n  uint stackParam7;\n  long stackParam8;\n  \n  flag = 0;\n  currentPath = (char *)(inputRAX + 1);\n  do {\n    if (*currentPath == '/') {\n      extractAndCopyArchives_001052a2();\n      return;\n    }\n    while (*currentPath == '\\0') {\n      currentPath = (char *)concat(stackParam3,&DAT_0011b47d);\n      statResult = stat(currentPath,(stat *)&stack0x00000050);\n      tempNode = extractedFiles;\n      if (-1 < statResult) {\n        fileSize = FUN_0011a0e0(currentPath);\n        free(currentPath);\n        if (fileSize == 0) {\n          errnoPtr = __errno_location();\n          currentPath = strerror(*errnoPtr);\n          errorMsg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(errorMsg,currentPath);\n          goto LAB_00104e93;\n        }\n        tempNode = (undefined8 *)xmalloc(0x18);\n        currentPath = *archivedFiles;\n        *tempNode = extractedFiles;\n        tempNode[2] = 0;\n        tempNode[1] = fileSize;\n        currentPath = (char *)concat(fileSize,&DAT_0011b47d,currentPath);\n      }\n      statResult = 0;\n      if (DAT_001279cb != '\\0') {\n        statPtr = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&statPtr->st_dev = 0;\n          statPtr = (stat *)((long)statPtr + (ulong)flag * -8 + 4);\n        }\n        currentFile = (char **)archivedFiles[0x1d];\n        if ((char **)archivedFiles[0x1d] == (char **)0x0) {\n          currentFile = archivedFiles;\n        }\n        statResult = (**(code **)(currentFile[1] + 0x1e8))(archivedFiles,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          tempChar = *archivedFiles;\n          errorMsg = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(errorMsg,tempChar);\n        }\n      }\n      extractedFiles = (undefined8 *)xmalloc(0x18);\n      extractedFiles[1] = currentPath;\n      *extractedFiles = tempNode;\n      extractedFiles[2] = 0;\n      currentChar = bfd_check_format(archivedFiles,1);\n      if (currentChar == '\\0') {\n        errorMsg = dcgettext(0,\"Unable to recognise the format of file\",5);\n        FUN_001126c0(0,archivedFiles,0,errorMsg);\n        currentFile = (char **)bfd_openw(currentPath,stackParam5);\n        if (currentFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        tempPaths = (char **)archivedFiles[0x1d];\n        if ((char **)archivedFiles[0x1d] == (char **)0x0) {\n          tempPaths = archivedFiles;\n        }\n        index = (**(code **)(tempPaths[1] + 0x1e8))(archivedFiles,&stack0x000000e0);\n        fileSize = stackParam8;\n        if (index == 0) {\n          if (stackParam8 < 0) {\n            errorMsg = FUN_001125fa(archivedFiles);\n            formatString = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            FUN_00119ed0(formatString,errorMsg);\n          }\n          else {\n            index = bfd_seek(archivedFiles,0,0);\n            if (index == 0) {\n              if (DAT_001279c9 != '\\0') {\n                tempChar = *currentFile;\n                errorMsg = FUN_001125fa(archivedFiles);\n                errorFormat = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(errorFormat,errorMsg,tempChar);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - chunkSize) {\n                chunkSize = 0x2000;\n                if (fileSize < 0x2001) {\n                  chunkSize = fileSize;\n                }\n                bytesRead = bfd_bread(buffer,chunkSize,archivedFiles);\n                tempPaths = archivedFiles;\n                if ((chunkSize != bytesRead) ||\n                   (bytesRead = bfd_bwrite(buffer,chunkSize,currentFile), tempPaths = currentFile, chunkSize != bytesRead\n                   )) {\n                  FUN_001126c0(0,tempPaths,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*currentFile,stackParam7 | 0x100);\n              free(buffer);\n              currentChar = bfd_close_all_done(currentFile);\n              if (currentChar == '\\0') {\n                FUN_001126c0(currentPath,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorMsg = FUN_001125fa(archivedFiles);\n            FUN_0011a110(errorMsg);\n          }\n        }\n        else {\n          FUN_001126c0(0,archivedFiles,0,0);\n        }\nLAB_00104f00:\n        currentChar = bfd_close_all_done(currentFile);\n        if (currentChar == '\\0') {\n          FUN_001126c0(currentPath,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentPath);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (stackParam6._7_1_ == '\\0') {\n          currentFile = (char **)bfd_openw(currentPath,*(undefined8 *)archivedFiles[1]);\n        }\n        else {\n          currentFile = (char **)bfd_openw(currentPath,stackParam5);\n        }\n        if (currentFile == (char **)0x0) {\nLAB_00104e80:\n          FUN_001126c0(currentPath,0,0,0);\n          goto LAB_00104e93;\n        }\n        currentChar = FUNC_00114e50(archivedFiles,currentFile,returnAddress);\n        if (currentChar == '\\0') {\n          index = bfd_get_arch(archivedFiles);\n          if (index == 0) goto LAB_00104d75;\n          currentChar = bfd_close_all_done(currentFile);\n          if (currentChar == '\\0') {\n            FUN_001126c0(currentPath,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        currentChar = bfd_close(currentFile);\n        if (currentChar == '\\0') {\n          FUN_001126c0(currentPath,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (statResult == 0)) {\n          FUN_0011a350(currentPath,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(currentPath,stackParam5);\n        extractedFiles[2] = fileSize;\n        *stackParam2 = fileSize;\n        stackParam2 = (long *)(fileSize + 0xf0);\n        currentFile = (char **)bfd_openr_next_archived_file(stackParam4,archivedFiles);\n        bfd_close(archivedFiles);\n        archivedFiles = currentFile;\n      }\n      if ((DAT_00127a20 != 0) || (archivedFiles == (char **)0x0)) {\n        *stackParam2 = 0;\n        buffer = (void *)xstrdup(*stackParam1);\n        if (DAT_00127a20 == 0) {\n          closeFunction = bfd_close;\n        }\n        else {\n          closeFunction = bfd_close_all_done;\n        }\n        currentChar = (*closeFunction)(stackParam1);\n        if (currentChar == '\\0') {\n          DAT_00127a20 = 1;\n          FUN_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*stackParam4);\n        currentChar = bfd_close(stackParam4);\n        if (currentChar == '\\0') {\n          DAT_00127a20 = 1;\n          FUN_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      currentPath = *archivedFiles;\n      param3 = currentPath;\n      if (*currentPath == '/') goto LAB_0010527d;\n    }\n    tempChar = currentPath;\n    if ((*currentPath == '.') && (tempChar = currentPath + 1, currentPath[1] == '.')) {\n      tempChar = currentPath + 2;\n      if ((currentPath[2] == '\\0') || (currentPath[2] == '/')) {\nLAB_0010527d:\n        errorMsg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(errorMsg,param3);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (extractedFiles != (undefined8 *)0x0) {\n          if (extractedFiles[2] == 0) {\n            rmdir((char *)extractedFiles[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)extractedFiles[1]);\n          }\n          free((void *)extractedFiles[1]);\n          tempNode = (undefined8 *)*extractedFiles;\n          free(extractedFiles);\n          extractedFiles = tempNode;\n        }\n        rmdir(stackParam3);\n        free(stackParam3);\n        return;\n      }\n    }\n    for (; (currentPath = tempChar, *tempChar != '\\0' && (*tempChar != '/')); tempChar = tempChar + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archives_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "translate_and_send_data_0010e453",
                "param_1": "data_offset",
                "param_2": "source_string",
                "param_3": "target_strings",
                "lVar1": "current_target",
                "cVar2": "result",
                "sVar3": "string_length",
                "__s": "translated_string",
                "uVar4": "return_value",
                "lVar5": "total_length",
                "ppcVar6": "current_target_ptr",
                "lVar7": "target_index"
            },
            "code": "\nundefined8 translate_and_send_data_0010e453(long data_offset,char *source_string,char **target_strings)\n\n{\n  long current_target;\n  char result;\n  size_t string_length;\n  undefined2 *translated_string;\n  undefined8 return_value;\n  long total_length;\n  char **current_target_ptr;\n  long target_index;\n  \n  if (target_strings == (char **)0x0) {\n    if (source_string != (char *)0x0) {\n      string_length = strlen(source_string);\n      translated_string = (undefined2 *)xmalloc(string_length + 10);\n      sprintf((char *)translated_string,\"xe%s:\",source_string);\nLAB_0010e578:\n      result = FUN_00109b52(data_offset,translated_string,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    return_value = 0;\n  }\n  else {\n    total_length = 10;\n    current_target_ptr = target_strings;\n    if (source_string != (char *)0x0) {\n      string_length = strlen(source_string);\n      total_length = string_length + 10;\n    }\n    for (; *current_target_ptr != (char *)0x0; current_target_ptr = current_target_ptr + 1) {\n      string_length = strlen(*current_target_ptr);\n      total_length = total_length + 0x14 + string_length;\n    }\n    translated_string = (undefined2 *)xmalloc(total_length);\n    if (source_string == (char *)0x0) {\n      *translated_string = 0x65;\n      total_length = 0;\n    }\n    else {\n      total_length = *(long *)(data_offset + 0x68);\n      *(long *)(data_offset + 0x68) = total_length + 1;\n      sprintf((char *)translated_string,\"%s:T%ld=e\",source_string,total_length);\n    }\n    target_index = 0;\n    while( true ) {\n      current_target = *(long *)((long)target_strings + target_index);\n      string_length = strlen((char *)translated_string);\n      if (current_target == 0) break;\n      target_index = target_index + 8;\n      sprintf((char *)(undefined2 *)((long)translated_string + string_length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)translated_string + string_length) = 0x3b;\n    if (source_string == (char *)0x0) goto LAB_0010e578;\n    result = FUN_0010e2f0(data_offset,0x80,0,0,translated_string);\n    if ((result == '\\0') || (result = FUN_00109cf4(data_offset,total_length,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(translated_string);\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "translate_and_send_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "check_and_process_data_00109d5c",
                "param_1": "inputData",
                "lVar1": "result",
                "uVar2": "processedData"
            },
            "code": "\nundefined8 checkAndProcessData_00109d5c(undefined8 inputData)\n\n{\n  long result;\n  undefined8 processedData;\n  \n  result = FUN_00109c2e();\n  if (-1 < result) {\n    processedData = FUN_00109cf4(inputData,result,0);\n    return processedData;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_process_data_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_buffer_info_0010ed2c",
                "param_1": "buffer_info",
                "param_2": "new_size",
                "param_3": "input_data",
                "extraout_RDX": "output_data",
                "uVar3": "max_size",
                "in_R10": "unused_var",
                "cVar1": "result",
                "iVar2": "counter",
                "auVar4": "result_buffer"
            },
            "code": "\nundefined  [16] update_buffer_info_0010ed2c(long buffer_info,ulong new_size,undefined8 input_data)\n\n{\n  char result;\n  int counter;\n  undefined8 output_data;\n  ulong max_size;\n  undefined8 unused_var;\n  undefined result_buffer [16];\n  \n  if (*(ulong *)(buffer_info + 0x1f0) < new_size) {\n    *(ulong *)(buffer_info + 0x1f0) = new_size;\n  }\n  if (*(long *)(buffer_info + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(buffer_info + 0x1f8) != 0) {\n      counter = *(int *)(buffer_info + 0x1f8) + -1;\n      max_size = CONCAT71((int7)((ulong)input_data >> 8),1);\n      *(int *)(buffer_info + 0x1f8) = counter;\n      if (counter != 0) {\n        result_buffer = FUN_0010e2f0(buffer_info,0xe0,0,new_size - *(long *)(buffer_info + 0x200),0,unused_var);\n        return result_buffer;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    result = FUN_0010e2f0(buffer_info,0xc0,0,*(long *)(buffer_info + 0x208),0);\n    if (result != '\\0') {\n      *(undefined8 *)(buffer_info + 0x208) = 0xffffffffffffffff;\n      input_data = output_data;\n      goto LAB_0010ed78;\n    }\n  }\n  max_size = 0;\nLAB_0010edae:\n  result_buffer._0_8_ = max_size & 0xffffffff;\n  result_buffer._8_8_ = unused_var;\n  return result_buffer;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_buffer_info_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "find_matching_data_0011a1b0",
                "param_1": "first_data",
                "param_2": "second_data",
                "uVar1": "first_data_size",
                "uVar2": "second_data_size",
                "iVar3": "data_comparison_result",
                "extraout_var": "extra_output_variable",
                "uVar4": "final_result",
                "auVar5": "return_value"
            },
            "code": "\nundefined  [16] find_matching_data_0011a1b0(ulong *first_data,ulong *second_data,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong first_data_size;\n  ulong second_data_size;\n  int data_comparison_result;\n  undefined4 extra_output_variable;\n  ulong final_result;\n  undefined return_value [16];\n  \n  final_result = *first_data;\n  if (*second_data <= *first_data) {\n    final_result = *second_data;\n  }\n  data_comparison_result = memcmp((void *)(first_data[3] + 3),(void *)(second_data[3] + 3),final_result - 3);\n  final_result = CONCAT44(extra_output_variable,data_comparison_result);\n  if (data_comparison_result == 0) {\n    first_data_size = first_data[8];\n    if (first_data_size < second_data[7]) {\n      final_result = 0xffffffff;\n    }\n    else {\n      second_data_size = second_data[8];\n      if (second_data_size < first_data[7]) {\n        final_result = 1;\n      }\n      else {\n        final_result = 0xffffffff;\n        if (second_data[7] <= first_data[7]) {\n          if (second_data_size < first_data_size) {\n            final_result = 1;\n          }\n          else {\n            final_result = 0xffffffff;\n            if (second_data_size <= first_data_size) {\n              if (first_data[2] == 0x100) {\n                final_result = (ulong)-(uint)(second_data[2] != 0x100);\n              }\n              else {\n                final_result = (ulong)(second_data[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = final_result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "find_matching_data_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "process_build_attributes_001163d0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "paramSize",
                "param_4": "outputBuffer",
                "uVar1": "result",
                "uVar2": "section1",
                "uVar3": "section2",
                "bVar4": "flag",
                "puVar5": "ptr",
                "iVar6": "index",
                "uVar7": "errorMsg",
                "lVar8": "length",
                "__ptr": "buffer",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "__ptr_00": "outputBuffer2",
                "uVar13": "temp5",
                "uVar14": "temp6",
                "uVar15": "temp7",
                "uVar16": "temp8",
                "puVar17": "p",
                "puVar18": "pDesc",
                "cVar19": "version",
                "puVar20": "pName",
                "iVar21": "loopIndex",
                "puVar22": "pCurrent",
                "puVar23": "pAttributes",
                "puVar25": "pPrev",
                "uVar24": "size",
                "__nmemb": "numElements"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong processBuildAttributes_001163d0(undefined8 *param1,undefined8 *param2,ulong paramSize,undefined *outputBuffer)\n\n{\n  ulong result;\n  undefined8 section1;\n  undefined8 section2;\n  bool flag;\n  ulong *ptr;\n  int index;\n  undefined8 errorMsg;\n  long length;\n  void *buffer;\n  ulong temp1;\n  ulong temp2;\n  ulong temp3;\n  ulong temp4;\n  undefined *outputBuffer2;\n  ulong temp5;\n  ulong temp6;\n  ulong temp7;\n  ulong temp8;\n  ulong *p;\n  undefined *pDesc;\n  char version;\n  undefined *pName;\n  int loopIndex;\n  undefined *pCurrent;\n  ulong *pAttributes;\n  ulong size;\n  size_t numElements;\n  ulong *pPrev;\n  byte bVar26;\n  ulong local_88;\n  ulong uStack_80;\n  ulong local_70;\n  ulong local_68;\n  ulong *local_60;\n  \n  bVar26 = 0;\n  length = bfd_get_reloc_upper_bound();\n  local_68 = paramSize;\n  if (0 < length) {\n    buffer = (void *)xmalloc(length);\n    length = bfd_canonicalize_reloc(param1,param2,buffer,DAT_001278b0);\n    free(buffer);\n    if (length != 0) {\n      if (_DAT_00127a24 == 0) {\n        section1 = *param1;\n        section2 = *param2;\n        errorMsg = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        FUN_00119ed0(errorMsg,section1,section2);\n      }\n      local_60 = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  local_60 = (ulong *)xcalloc(paramSize / 0xc,0x48,paramSize % 0xc);\n  local_88 = 0;\n  local_70 = 0;\n  temp8 = paramSize;\n  temp7 = 0;\n  pAttributes = local_60;\n  temp6 = 0;\n  pCurrent = outputBuffer;\n  while (0xb < temp8) {\n    temp2 = (**(code **)(param1[1] + 0x40))(pCurrent);\n    *pAttributes = temp2;\n    temp2 = (**(code **)(param1[1] + 0x40))(pCurrent + 4);\n    pAttributes[1] = temp2;\n    temp3 = (**(code **)(param1[1] + 0x40))(pCurrent + 8);\n    temp2 = *pAttributes;\n    pAttributes[2] = temp3;\n    temp4 = pAttributes[1];\n    temp5 = temp2 + 3 & 0xfffffffffffffffc;\n    pAttributes[6] = temp5;\n    if (temp4 != (temp4 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp3 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = temp5 + temp4 + 0xc;\n    if (temp8 < result) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp2 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    pAttributes[3] = (ulong)(pCurrent + 0xc);\n    pAttributes[4] = (ulong)(pCurrent + temp5 + 0xc);\n    temp8 = temp8 + (-0xc - (temp5 + temp4));\n    if (temp2 != 2) {\n      if (pCurrent[0xc] == '$') {\n        if ((pCurrent[0xd] == '\\x01') && (pCurrent[0xe] == '1')) {\n          temp8 = FUN_00116490();\n          return temp8;\n        }\n      }\n      else if ((((4 < temp2) && (pCurrent[0xc] == 'G')) && (pCurrent[0xd] == 'A')) &&\n              ((pCurrent[0xe] == '$' && (pCurrent[0xf] == '\\x01')))) {\n        if (pCurrent[0x10] == '2') {\n          temp8 = FUN_00116490();\n          return temp8;\n        }\n        if (pCurrent[0x10] == '3') {\n          temp8 = FUN_00116490();\n          return temp8;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp1 = temp7;\n    size = temp6;\n    if (temp4 == 0) {\n      if (temp3 == 0x100) {\n        pAttributes[7] = local_88;\nLAB_001164af:\n        temp4 = temp6;\n        size = temp6;\n      }\n      else {\n        pAttributes[7] = local_70;\nLAB_0011669e:\n        temp1 = temp7;\n        temp4 = temp7;\n      }\n    }\n    else {\n      if (temp4 != 0x10) {\n        if (temp4 < 0x11) {\n          if (temp4 == 4) {\n            temp3 = (**(code **)(param1[1] + 0x40))();\n            temp4 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp4 == 8) {\n            temp8 = FUN_001086af();\n            return temp8;\n          }\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      temp3 = (**(code **)(param1[1] + 0x28))(pCurrent + temp5 + 0xc);\n      temp4 = (**(code **)(param1[1] + 0x28))();\n      if (temp4 < temp3) {\n        temp3 = temp4;\n      }\nLAB_00116631:\n      if (pAttributes[2] == 0x100) {\n        if (temp3 == 0) {\n          temp3 = local_88;\n        }\n        temp2 = *pAttributes;\n        pAttributes[7] = temp3;\n        size = temp4;\n        local_88 = temp3;\n        if (temp4 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp3 == 0) {\n          temp3 = local_70;\n        }\n        temp2 = *pAttributes;\n        pAttributes[7] = temp3;\n        temp1 = temp4;\n        local_70 = temp3;\n        if (temp4 == 0) goto LAB_0011669e;\n      }\n    }\n    pAttributes[8] = temp4;\n    if (*(char *)((pAttributes[3] - 1) + temp2) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    pAttributes = pAttributes + 9;\n    temp7 = temp1;\n    temp6 = size;\n    pCurrent = pCurrent + result;\n  }\n  if (temp8 == 0) {\n    section1 = *param1;\n    section2 = *param2;\n    errorMsg = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    FUN_00119ed0(errorMsg,section1,section2);\n    numElements = ((long)pAttributes - (long)local_60 >> 3) * -0x71c71c71c71c71c7;\n    qsort(local_60,numElements,0x48,FUN_0011a1b0);\n    for (p = local_60; p < pAttributes; p = p + 9) {\n      temp8 = p[2];\n      if (temp8 != 0) {\n        temp7 = p[7];\n        temp6 = p[8];\n        pPrev = p;\n        loopIndex = 0;\n        if (temp7 == temp6) {\n          p[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr = pPrev;\n              pPrev = ptr + -9;\n              if (pPrev < local_60) goto LAB_001167f5;\n              temp2 = ptr[-7];\n            } while (temp2 == 0);\n            if ((*pPrev != *p) ||\n               (index = memcmp((void *)ptr[-6],(void *)p[3],*p), index != 0)) break;\n            temp4 = ptr[-2];\n            temp3 = ptr[-1];\n            if (temp7 == temp4) {\n              if (temp6 == temp3) {\n                p[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (temp6 <= temp3) {\n                p[2] = 0;\n                break;\n              }\n              if (temp3 < temp7) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < temp3) || (temp7 <= (temp3 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n              }\nLAB_001167b8:\n              if ((temp8 == 0x101) == (temp2 == 0x101)) {\n                if (temp3 <= temp6) {\n                  temp3 = temp6;\n                }\n                if (temp4 < temp7) {\n                  temp7 = temp4;\n                }\n                ptr[-1] = temp3;\n                ptr[-2] = temp7;\n                p[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp4 <= temp7) goto LAB_001167a6;\n              if (temp3 < temp7) goto LAB_0010852c;\n              if (temp6 < temp7) {\n                if ((0xfffffffffffffff0 < temp6) || (temp4 <= (temp6 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n                goto LAB_001167b8;\n              }\n              if (temp6 != temp3) goto LAB_001167b8;\n            }\nFUN_00116852:\n            flag = loopIndex < 0x11;\n            loopIndex = loopIndex + 1;\n          } while (flag);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(local_60,numElements,0x48,FUN_0011a250);\n    outputBuffer2 = (undefined *)xmalloc(paramSize * 2);\n    uStack_80 = 0;\n    local_70 = 0;\n    pCurrent = outputBuffer2;\n    for (p = local_60; p < pAttributes; p = p + 9) {\n      if (p[2] != 0) {\n        pDesc = pCurrent + 0xc;\n        if ((p[7] == local_70) && (p[8] == uStack_80)) {\n          (**(code **)(param1[1] + 0x50))(*p,pCurrent);\n          (**(code **)(param1[1] + 0x50))(0,pCurrent + 4);\n          (**(code **)(param1[1] + 0x50))(p[2],pCurrent + 8);\n          temp7 = p[6];\n          temp8 = *p;\n          pCurrent = (undefined *)p[3];\n          pName = pDesc;\n          for (temp6 = temp8; temp6 != 0; temp6 = temp6 - 1) {\n            *pName = *pCurrent;\n            pCurrent = pCurrent + (ulong)bVar26 * -2 + 1;\n            pName = pName + (ulong)bVar26 * -2 + 1;\n          }\n          if (temp8 < temp7) {\n            for (length = temp7 - temp8; length != 0; length = length + -1) {\n              *pName = 0;\n              pName = pName + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          pCurrent = pDesc + temp7;\n        }\n        else {\n          (**(code **)(param1[1] + 0x50))();\n          if (*(int *)(param1[1] + 8) == 5) {\n            version = (*(char *)(param1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            version = '\\b';\n          }\n          (**(code **)(param1[1] + 0x50))(version,pCurrent + 4);\n          (**(code **)(param1[1] + 0x50))(p[2],pCurrent + 8);\n          temp8 = *p;\n          pCurrent = (undefined *)p[3];\n          pName = pDesc;\n          for (temp7 = temp8; temp7 != 0; temp7 = temp7 - 1) {\n            *pName = *pCurrent;\n            pCurrent = pCurrent + (ulong)bVar26 * -2 + 1;\n            pName = pName + (ulong)bVar26 * -2 + 1;\n          }\n          temp7 = p[6];\n          if (temp8 < temp7) {\n            for (length = temp7 - temp8; length != 0; length = length + -1) {\n              *pName = 0;\n              pName = pName + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          length = param1[1];\n          pDesc = pDesc + temp7;\n          pCurrent = pDesc + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(param1[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(p[7],pDesc);\n            (**(code **)(param1[1] + 0x38))(p[8],pCurrent);\n            pCurrent = pDesc + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(p[7],pDesc);\n            (**(code **)(param1[1] + 0x50))(p[8],pDesc + 4);\n          }\n          local_70 = p[7];\n          uStack_80 = p[8];\n        }\n      }\n    }\n    temp7 = (long)pCurrent - (long)outputBuffer2;\n    temp8 = temp7;\n    pCurrent = outputBuffer2;\n    local_68 = paramSize;\n    if (temp7 < paramSize) {\n      for (; local_68 = temp7, temp8 != 0; temp8 = temp8 - 1) {\n        *outputBuffer = *pCurrent;\n        pCurrent = pCurrent + (ulong)bVar26 * -2 + 1;\n        outputBuffer = outputBuffer + (ulong)bVar26 * -2 + 1;\n      }\n    }\n    free(outputBuffer2);\n  }\n  else {\n    length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      bfd_set_error(0x11);\n      FUN_001126c0(0,param1,param2,length);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(local_60);\n  return local_68;\n}\n\n",
            "called": [
                "xcalloc",
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_build_attributes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_and_exit_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsageAndExit_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,message,programName);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  FUN_00104a35(DAT_001275e0,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "exit",
                "FUN_00104a35"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_and_exit_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "decompile_binary_00108c86",
                "param_1": "input_ptr",
                "cVar1": "is_bsdrv",
                "iVar2": "comparison_result",
                "sVar3": "string_length",
                "puVar4": "allocated_buffer",
                "lVar5": "input_value",
                "__s": "input_string",
                "__s1": "architecture",
                "puVar6": "buffer_pointer",
                "uVar7": "return_value",
                "bVar8": "byte_value"
            },
            "code": "\nundefined8 decompile_binary_00108c86(long *input_ptr)\n\n{\n  char is_bsdrv;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *allocated_buffer;\n  long input_value;\n  char *input_string;\n  char *architecture;\n  undefined2 *buffer_pointer;\n  undefined8 return_value;\n  byte byte_value;\n  \n  byte_value = 0;\n  input_value = *input_ptr;\n  input_string = (char *)(input_value + 4);\n  is_bsdrv = FUN_00113fb0(input_string,&DAT_0011b73b);\n  if (is_bsdrv == '\\0') {\n    is_bsdrv = FUN_00113fb0(input_string,\"bsdrv-\");\n    if (is_bsdrv == '\\0') {\n      is_bsdrv = FUN_00113fb0(input_string,\"rtdrv-\");\n      if (is_bsdrv == '\\0') {\n        return 0xffffffff;\n      }\n      input_string = (char *)(input_value + 6);\n      return_value = 0xc;\n    }\n    else {\n      input_string = (char *)(input_value + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(input_string);\n  allocated_buffer = (undefined2 *)xmalloc(string_length + 8);\n  architecture = input_string + 4;\n  buffer_pointer = allocated_buffer;\n  for (input_value = string_length + 1; input_value != 0; input_value = input_value + -1) {\n    *(char *)buffer_pointer = *input_string;\n    input_string = input_string + (ulong)byte_value * -2 + 1;\n    buffer_pointer = (undefined2 *)((long)buffer_pointer + (ulong)byte_value * -2 + 1);\n  }\n  *(undefined *)(allocated_buffer + 1) = 0x69;\n  *allocated_buffer = 0x6570;\n  comparison_result = strcmp(architecture,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)allocated_buffer + 7) = 0x36;\n    *(undefined2 *)((long)allocated_buffer + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(architecture,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)allocated_buffer + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(architecture,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)allocated_buffer + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_ptr = (long)allocated_buffer;\n  return return_value;\n}\n\n",
            "called": [
                "strcmp",
                "xmalloc",
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "decompile_binary_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "message",
                "__format": "errorFormatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 message)\n\n{\n  char *errorFormatString;\n  \n  errorFormatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,errorFormatString,message);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "initialize_process_001053d5",
                "unaff_R12": "parameter1",
                "unaff_R14": "parameter2",
                "bfd_close_all_done": "closeAll"
            },
            "code": "\nundefined4 initializeProcess_001053d5(void)\n\n{\n  long parameter1;\n  undefined8 *parameter2;\n  \n  FUN_0011a110(*parameter2);\n  *(undefined4 *)(parameter1 + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(parameter1 + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "initialize_process_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "in_EAX": "eaxValue",
                "uVar1": "errorMessage",
                "unaff_EBP": "ebpValue",
                "unaff_R14": "r14Value"
            },
            "code": "\nvoid checkAndSetFlags_00104bba(void)\n\n{\n  uint eaxValue;\n  undefined8 errorMessage;\n  uint ebpValue;\n  long r14Value;\n  \n  if ((eaxValue & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  if ((((eaxValue & 8) == 0) || ((ebpValue & 0x10) == 0)) && ((ebpValue & 0x18) != 0x18)) {\n    if ((((eaxValue & 0x20) == 0) || ((ebpValue & 0x40) == 0)) && ((ebpValue & 0x60) != 0x60)) {\n      *(uint *)(r14Value + 0x14) = eaxValue | ebpValue;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "counter",
                "puVar3": "destIndex",
                "bVar4": "increment"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long counter;\n  undefined *destIndex;\n  byte increment;\n  \n  increment = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destIndex = destination;\n  for (counter = (long)length; counter != 0; counter = counter + -1) {\n    *destIndex = *source;\n    source = source + (ulong)increment * -2 + 1;\n    destIndex = destIndex + (ulong)increment * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0010d559",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slot_array_ptr",
                "param_2": "slot_index",
                "param_4": "destination",
                "uVar1": "message",
                "plVar2": "new_slot_ptr",
                "lVar3": "offset",
                "lVar4": "counter",
                "uVar5": "remaining_slots",
                "bVar6": "flag",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_array_ptr,ulong slot_index,undefined8 param_3,undefined8 destination)\n\n{\n  undefined8 message;\n  long *new_slot_ptr;\n  long offset;\n  long counter;\n  ulong remaining_slots;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_array_ptr == (long *)0x0) {\n        new_slot_ptr = (long *)xmalloc(0x88);\n        *slot_array_ptr = new_slot_ptr;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)new_slot_ptr = 0;\n          new_slot_ptr = (long *)((long)new_slot_ptr + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_array_ptr = (long **)*slot_array_ptr;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*slot_array_ptr == (long *)0x0) {\n      new_slot_ptr = (long *)xmalloc(0x88);\n      *slot_array_ptr = new_slot_ptr;\n      for (counter = 0x22; counter != 0; counter = counter + -1) {\n        *(undefined4 *)new_slot_ptr = 0;\n        new_slot_ptr = (long *)((long)new_slot_ptr + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = destination;\n    result._0_8_ = *slot_array_ptr + slot_index + offset + 1;\n    return result;\n  }\n  message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  FUN_00119dd0(message,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_memory_00112894",
                "param_1": "dataPtr",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2",
                "puVar1": "memoryPtr",
                "puVar2": "dynamicMemoryPtr",
                "lVar3": "loopCounter",
                "bVar4": "byteValue"
            },
            "code": "\nundefined8 *\ninitializeMemory_00112894(undefined8 dataPtr,undefined value,undefined8 param1,undefined8 param2)\n\n{\n  undefined8 *memoryPtr;\n  undefined8 *dynamicMemoryPtr;\n  long loopCounter;\n  byte byteValue;\n  \n  byteValue = 0;\n  memoryPtr = (undefined8 *)xmalloc(0x1b0);\n  dynamicMemoryPtr = memoryPtr;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)dynamicMemoryPtr = 0;\n    dynamicMemoryPtr = (undefined8 *)((long)dynamicMemoryPtr + (ulong)byteValue * -8 + 4);\n  }\n  *memoryPtr = dataPtr;\n  *(undefined *)(memoryPtr + 1) = value;\n  memoryPtr[2] = param1;\n  memoryPtr[3] = param2;\n  *(undefined4 *)(memoryPtr + 0x10) = 1;\n  dynamicMemoryPtr = (undefined8 *)xmalloc(8);\n  memoryPtr[0xd] = 0xffffffffffffffff;\n  memoryPtr[0x11] = dynamicMemoryPtr;\n  *dynamicMemoryPtr = 0;\n  return memoryPtr;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_next_pointer_00109b2f",
                "param_1": "inputParam",
                "__ptr": "currentPointer",
                "puVar1": "outputPointer"
            },
            "code": "\nundefined8 * extractNextPointer_00109b2f(long inputParam)\n\n{\n  undefined8 *currentPointer;\n  undefined8 *outputPointer;\n  \n  currentPointer = *(undefined8 **)(inputParam + 0x60);\n  if (currentPointer != (undefined8 *)0x0) {\n    outputPointer = (undefined8 *)currentPointer[1];\n    *(undefined8 *)(inputParam + 0x60) = *currentPointer;\n    free(currentPointer);\n    return outputPointer;\n  }\n  return currentPointer;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010e918",
                "FUN_0010a0e9",
                "FUN_0010e5db",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010a424",
                "FUN_0010a2b9",
                "FUN_0010e7c2",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010eafe",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_0010a83e"
            ],
            "imported": false,
            "current_name": "extract_next_pointer_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_and_define_symbol_00108d9a",
                "param_1": "outputFileName",
                "param_2": "sourceFileName",
                "param_3": "symbolName",
                "param_4": "returnValue",
                "ppcVar1": "symbolArray",
                "pcVar2": "sourceFileNameCopy",
                "lVar3": "symbolIndex",
                "uVar4": "errorMessage",
                "plVar5": "symbolSlot"
            },
            "code": "\nundefined8 checkAndDefineSymbol_00108d9a(undefined8 outputFileName,char *sourceFileName,char *symbolName,undefined8 returnValue)\n\n{\n  char **symbolArray;\n  char *sourceFileNameCopy;\n  long symbolIndex;\n  undefined8 errorMessage;\n  long *symbolSlot;\n  \n  symbolArray = (char **)xmalloc(0x10);\n  sourceFileNameCopy = strdup(sourceFileName);\n  *symbolArray = sourceFileNameCopy;\n  sourceFileNameCopy = strdup(symbolName);\n  errorMessage = DAT_001278d0;\n  symbolArray[1] = sourceFileNameCopy;\n  symbolIndex = htab_find(errorMessage,symbolArray);\n  if (symbolIndex != 0) {\n    errorMessage = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    FUN_00119dd0(errorMessage,outputFileName,sourceFileName);\n  }\n  symbolIndex = htab_find(DAT_001278c8,symbolName);\n  if (symbolIndex != 0) {\n    errorMessage = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    FUN_00119dd0(errorMessage,outputFileName,symbolName);\n  }\n  symbolSlot = (long *)htab_find_slot(DAT_001278d0,symbolArray,1);\n  errorMessage = DAT_001278c8;\n  *symbolSlot = (long)symbolArray;\n  sourceFileNameCopy = symbolArray[1];\n  symbolArray = (char **)htab_find_slot(errorMessage,sourceFileNameCopy,1);\n  *symbolArray = sourceFileNameCopy;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "strdup",
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_define_symbol_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "generate_formatted_string_0010e9a0",
                "param_1": "data",
                "param_2": "prefix",
                "param_3": "formatOption",
                "param_4": "param",
                "lVar1": "counter",
                "uVar2": "result",
                "__s": "formattedString",
                "__s_00": "tempString",
                "sVar3": "prefixLength",
                "sVar4": "formattedStringLength",
                "__s_01": "completeString",
                "pcVar5": "formatSymbol",
                "uVar6": "formatValue"
            },
            "code": "\nundefined4 generateFormattedString_0010e9a0(long data,char *prefix,undefined4 formatOption,undefined8 param)\n\n{\n  long counter;\n  undefined4 result;\n  byte *formattedString;\n  byte *tempString;\n  size_t prefixLength;\n  size_t formattedStringLength;\n  char *completeString;\n  char *formatSymbol;\n  undefined8 formatValue;\n  \n  formattedString = (byte *)FUN_00109b2f();\n  switch(formatOption) {\n  case 1:\n    formatSymbol = \"G\";\n    formatValue = 0x20;\n    break;\n  case 2:\n    formatSymbol = \"S\";\n    formatValue = 0x26;\n    break;\n  case 3:\n    formatSymbol = \"V\";\n    formatValue = 0x26;\n    break;\n  case 4:\n    formatSymbol = \"\";\n    formatValue = 0x80;\n    if (((&_sch_istable)[(ulong)*formattedString * 2] & 4) == 0) {\n      counter = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = counter + 1;\n      prefixLength = strlen((char *)formattedString);\n      tempString = (byte *)xmalloc(prefixLength + 0x14);\n      sprintf((char *)tempString,\"%ld=%s\",counter,formattedString);\n      free(formattedString);\n      formattedString = tempString;\n    }\n    break;\n  case 5:\n    formatSymbol = \"r\";\n    formatValue = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  prefixLength = strlen(prefix);\n  formattedStringLength = strlen((char *)formattedString);\n  completeString = (char *)xmalloc(prefixLength + 3 + formattedStringLength);\n  sprintf(completeString,\"%s:%s%s\",prefix,formatSymbol,formattedString);\n  free(formattedString);\n  result = FUN_0010e2f0(data,formatValue,0,param,completeString);\n  if ((char)result != '\\0') {\n    free(completeString);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_section_error_0010827b",
                "unaff_RBX": "sectionPointer",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printSectionError_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_section_error_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "check_number_validity_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedMessage"
            },
            "code": "\nvoid checkNumberValidity_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "check_number_validity_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_string_hash_table_00113f20",
                "htab_create_alloc": "createStringHashTable",
                "htab_hash_string": "stringHashFunction",
                "htab_eq_string": "stringEqualsFunction",
                "xcalloc": "allocateMemory",
                "free": "dealocateMemory"
            },
            "code": "\nvoid initializeStringHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,stringEqualsFunction,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string",
                "xcalloc",
                "htab_eq_string",
                "free",
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_string_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00108d9a",
                "FUN_00104cc1",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_001126c0",
                "FUN_00119e70"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "lVar1": "errorMessage",
                "lVar2": "arg1",
                "cVar3": "result",
                "lVar4": "errorString",
                "lVar5": "returnValue",
                "unaff_RBX": "inputParam1",
                "unaff_RBP": "inputParam2",
                "unaff_R12": "inputParam3",
                "unaff_R14B": "flag",
                "unaff_R15": "inputParam4"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long errorMessage;\n  long arg1;\n  char result;\n  long errorString;\n  long returnValue;\n  long inputParam1;\n  long inputParam2;\n  long inputParam3;\n  char flag;\n  long inputParam4;\n  \n  errorString = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(inputParam4 + 0xb4) = *(undefined4 *)(inputParam1 + 0xb4);\n  *(byte *)(inputParam4 + 0x28) =\n       *(byte *)(inputParam4 + 0x28) & 0xcf | *(byte *)(inputParam1 + 0x28) & 0x30;\n  *(long *)(inputParam1 + 0x60) = inputParam4;\n  *(undefined8 *)(inputParam1 + 0x58) = 0;\n  if ((*(byte *)(inputParam1 + 0x27) & 2) != 0) {\n    errorMessage = *(long *)(inputParam1 + 0xd0);\n    returnValue = FUN_00115d00(errorMessage,*(undefined8 *)(inputParam1 + 0xe0));\n    if ((returnValue != 0) &&\n       (arg1 = *(long *)(inputParam3 + 8), *(uint *)(returnValue + 0x18) = *(uint *)(returnValue + 0x18) | 0x20,\n       *(int *)(arg1 + 8) == 5)) {\n      *(long *)(errorMessage + 0xb0) = returnValue;\n      result = (**(code **)(*(long *)(inputParam2 + 8) + 0x158))();\n      if (result == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(inputParam2 + 8) + 0x158))();\n  if (result == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(inputParam4 + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00115d00",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "extract_and_print_type_info_00109022",
                "param_1": "fileManager",
                "param_2": "typeIndices",
                "uVar1": "typeIndex",
                "pcVar2": "errorStr",
                "plVar3": "typeInfo",
                "lVar4": "iterator",
                "uVar5": "fileIndex",
                "pplVar6": "typeHierarchy",
                "bVar7": "counter",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16] extractAndPrintTypeInfo_00109022(long fileManager,uint *typeIndices,undefined8 param_3,undefined8 param_4)\n\n{\n  uint typeIndex;\n  char *errorStr;\n  long *typeInfo;\n  long iterator;\n  uint fileIndex;\n  long **typeHierarchy;\n  byte counter;\n  undefined result [16];\n  \n  counter = 0;\n  fileIndex = *typeIndices;\n  typeIndex = typeIndices[1];\n  if (((int)fileIndex < 0) || (*(uint *)(fileManager + 0x80) <= fileIndex)) {\n    errorStr = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorStr,(ulong)fileIndex);\n  }\n  else {\n    if (-1 < (int)typeIndex) {\n      typeHierarchy = (long **)(*(long *)(fileManager + 0x88) + (long)(int)fileIndex * 8);\n      for (fileIndex = typeIndex; 0xf < (int)fileIndex; fileIndex = fileIndex - 0x10) {\n        if (*typeHierarchy == (long *)0x0) {\n          typeInfo = (long *)xmalloc(0x88);\n          *typeHierarchy = typeInfo;\n          for (iterator = 0x22; iterator != 0; iterator = iterator + -1) {\n            *(undefined4 *)typeInfo = 0;\n            typeInfo = (long *)((long)typeInfo + (ulong)counter * -8 + 4);\n          }\n        }\n        typeHierarchy = (long **)*typeHierarchy;\n      }\n      if (*typeHierarchy == (long *)0x0) {\n        typeInfo = (long *)xmalloc(0x88);\n        *typeHierarchy = typeInfo;\n        for (iterator = 0x22; iterator != 0; iterator = iterator + -1) {\n          *(undefined4 *)typeInfo = 0;\n          typeInfo = (long *)((long)typeInfo + (ulong)counter * -8 + 4);\n        }\n      }\n      typeInfo = *typeHierarchy + (long)(int)((typeIndex >> 4) * -0x10 + typeIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorStr = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorStr,(ulong)typeIndex);\n  }\n  typeInfo = (long *)0x0;\nLAB_00109117:\n  result._8_8_ = param_4;\n  result._0_8_ = typeInfo;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_and_print_type_info_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "file",
                "param_2": "variable",
                "param_3": "value",
                "param_4": "type",
                "param_5": "debug_msg",
                "param_6": "result",
                "auVar1": "result",
                "uVar2": "status",
                "piVar3": "ptr",
                "cVar4": "flag",
                "lVar5": "count",
                "lVar6": "record",
                "piVar7": "ptr2",
                "bVar8": "flag2",
                "auVar9": "output",
                "dcgettext": "get_debug_msg",
                "_stderr": "error_stream",
                "fprintf": "print_error",
                "xmalloc": "allocate_mem"
            },
            "code": "\n\n\nundefined  [16]\nrecord_variable_0010c05d(long file,long variable,ulong value,int type,undefined8 debug_msg,\n            undefined8 result)\n\n{\n  undefined result [16];\n  undefined8 status;\n  int *ptr;\n  char flag;\n  long count;\n  long record;\n  int *ptr2;\n  byte flag2;\n  undefined output [16];\n  \n  flag2 = 0;\n  if (variable == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = value;\n    return result << 0x40;\n  }\n  if (value != 0) {\n    if ((*(long *)(file + 8) == 0) || (record = *(long *)(file + 0x10), record == 0)) {\n      status = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(error_stream,\"%s\\n\",status);\n    }\n    else {\n      if (type - 1U < 2) {\n        record = record + 0x10;\n        flag = (type == 1) + '\\x01';\n      }\n      else if (*(long *)(file + 0x20) == 0) {\n        record = record + 0x10;\n        flag = '\\0';\n      }\n      else {\n        record = *(long *)(file + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      record = FUN_00112925(record,variable,2,flag);\n      if (record != 0) {\n        ptr = (int *)xmalloc(0x18);\n        ptr2 = ptr + 1;\n        for (count = 5; count != 0; count = count + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)flag2 * -2 + 1;\n        }\n        *ptr = type;\n        status = 1;\n        *(ulong *)(ptr + 2) = value;\n        *(undefined8 *)(ptr + 4) = debug_msg;\n        *(int **)(record + 0x20) = ptr;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  status = 0;\nLAB_0010c12e:\n  output._8_8_ = result;\n  output._0_8_ = status;\n  return output;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "process_parameter_00109d97",
                "param_1": "input",
                "lVar1": "value",
                "local_40": "outputString"
            },
            "code": "\nvoid processParameter_00109d97(long input)\n\n{\n  long value;\n  char outputString [40];\n  \n  if (*(long *)(input + 0x70) != 0) {\n    FUN_00109cf4(input,*(long *)(input + 0x70),0);\n    return;\n  }\n  value = *(long *)(input + 0x68);\n  *(long *)(input + 0x68) = value + 1;\n  sprintf(outputString,\"%ld=%ld\",value,value);\n  FUN_00109b52(input,outputString,value,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "process_parameter_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "analyze_build_attributes_001086af",
                "uVar1": "result",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "condition",
                "puVar5": "pointer1",
                "iVar6": "index",
                "lVar7": "size",
                "uVar8": "var8",
                "uVar9": "value1",
                "uVar10": "value2",
                "uVar11": "value3",
                "__ptr": "ptr",
                "in_RCX": "input1",
                "uVar12": "value4",
                "uVar13": "var13",
                "uVar14": "var14",
                "unaff_RBX": "unaff_reg1",
                "unaff_RBP": "unaff_reg2",
                "puVar15": "pointer2",
                "puVar16": "pointer3",
                "cVar17": "character",
                "puVar18": "pointer4",
                "puVar19": "pointer5",
                "unaff_R12": "unaff_reg3",
                "unaff_R13": "unaff_reg4",
                "uVar20": "var20",
                "__nmemb": "nmemb",
                "unaff_R14": "unaff_reg5",
                "puVar21": "pointer6",
                "bVar22": "byteVar",
                "iVar23": "iVar",
                "param_7": "param1",
                "param_8": "param2",
                "param_9": "param3",
                "param_10": "param4",
                "param_11": "param5",
                "in_stack_00000030": "stack_param1",
                "in_stack_00000038": "stack_param2",
                "param_13": "param6",
                "param_14": "param7"
            },
            "code": "\nulong analyze_build_attributes_001086af(void)\n\n{\n  ulong result;\n  undefined8 var2;\n  undefined8 var3;\n  bool condition;\n  ulong *pointer1;\n  int index;\n  long size;\n  undefined8 var8;\n  ulong value1;\n  ulong value2;\n  ulong value3;\n  undefined *ptr;\n  ulong input1;\n  ulong value4;\n  ulong var13;\n  ulong var14;\n  ulong unaff_reg1;\n  ulong unaff_reg2;\n  ulong *pointer2;\n  undefined *pointer3;\n  char character;\n  undefined *pointer4;\n  undefined *pointer5;\n  ulong *unaff_reg3;\n  ulong unaff_reg4;\n  ulong var20;\n  size_t nmemb;\n  undefined8 *unaff_reg5;\n  ulong *pointer6;\n  byte byteVar;\n  int iVar;\n  ulong unaff_retaddr;\n  ulong param1;\n  uint param2;\n  ulong param3;\n  ulong param4;\n  ulong *param5;\n  undefined *stack_param1;\n  uint stack_param2;\n  uint param6;\n  undefined8 *param7;\n  \n  byteVar = 0;\n  param1 = input1;\n  value1 = (**(code **)(unaff_reg5[1] + 0x40))();\n  value2 = (**(code **)(unaff_reg5[1] + 0x40))(unaff_reg3[4] + 4);\nLAB_0011662a:\n  var13 = unaff_reg2;\n  var20 = unaff_reg4;\n  if (value2 < value1) {\n    value1 = value2;\n  }\n  do {\n    value3 = param1;\n    value4 = param1;\n    pointer2 = unaff_reg3;\n    if (unaff_reg3[2] == 0x100) {\n      if (value1 == 0) {\n        value1 = unaff_retaddr;\n      }\n      var14 = *unaff_reg3;\n      unaff_reg3[7] = value1;\n      unaff_reg2 = var13;\n      unaff_reg4 = value2;\n      unaff_retaddr = value1;\n      if (value2 == 0) goto LAB_001164af;\n    }\n    else {\n      if (value1 == 0) {\n        value1 = param3;\n      }\n      var14 = *unaff_reg3;\n      unaff_reg3[7] = value1;\n      unaff_reg2 = value2;\n      unaff_reg4 = var20;\n      param3 = value1;\n      if (value2 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    pointer2[8] = value2;\n    if (*(char *)((pointer2[3] - 1) + var14) != '\\0') {\n      size = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_reg3 = pointer2 + 9;\n    if (unaff_reg1 < 0xc) {\n      if (unaff_reg1 != 0) {\n        size = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stack_param2 | param6 | param2) != 0) {\n        if (((param6 | param2) == 0) || (stack_param2 == 0)) {\n          if (param6 == 0) {\n            if (param2 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param2 == 0) goto LAB_001166f8;\n        }\n        size = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      var2 = *unaff_reg5;\n      var3 = *param7;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(var8,var2,var3);\nLAB_0011671b:\n      nmemb = ((long)unaff_reg3 - (long)param5 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param5,nmemb,0x48,FUN_0011a1b0);\n      pointer2 = param5;\n      goto LAB_001167f9;\n    }\n    value2 = (**(code **)(unaff_reg5[1] + 0x40))(value4);\n    *unaff_reg3 = value2;\n    value2 = (**(code **)(unaff_reg5[1] + 0x40))(value4 + 4);\n    pointer2[10] = value2;\n    value1 = (**(code **)(unaff_reg5[1] + 0x40))(value4 + 8);\n    var14 = *unaff_reg3;\n    pointer2[0xb] = value1;\n    value2 = pointer2[10];\n    var13 = var14 + 3 & 0xfffffffffffffffc;\n    pointer2[0xf] = var13;\n    if (value2 != (value2 + 3 & 0xfffffffffffffffc)) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < value1 - 0x100) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    value3 = var13 + value2 + 0xc;\n    if (unaff_reg1 < value3) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var14 < 2) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    pointer2[0xc] = value4 + 0xc;\n    result = value4 + 0xc + var13;\n    pointer2[0xd] = result;\n    unaff_reg1 = unaff_reg1 + (-0xc - (var13 + value2));\n    value3 = value4 + value3;\n    if (var14 != 2) {\n      if (*(char *)(value4 + 0xc) == '$') {\n        if ((*(char *)(value4 + 0xd) == '\\x01') && (*(char *)(value4 + 0xe) == '1')) {\n          value2 = FUN_00116490();\n          return value2;\n        }\n      }\n      else if ((((4 < var14) && (*(char *)(value4 + 0xc) == 'G')) &&\n               (*(char *)(value4 + 0xd) == 'A')) &&\n              ((*(char *)(value4 + 0xe) == '$' && (*(char *)(value4 + 0xf) == '\\x01')))) {\n        if (*(char *)(value4 + 0x10) == '2') {\n          value2 = FUN_00116490();\n          return value2;\n        }\n        if (*(char *)(value4 + 0x10) == '3') {\n          value2 = FUN_00116490();\n          return value2;\n        }\n        size = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var13 = unaff_reg2;\n    var20 = unaff_reg4;\n    if (value2 == 0) {\n      if (value1 == 0x100) {\n        pointer2[0x10] = unaff_retaddr;\nLAB_001164af:\n        value4 = value3;\n        value2 = var20;\n        pointer2 = unaff_reg3;\n        unaff_reg4 = var20;\n      }\n      else {\n        pointer2[0x10] = param3;\nLAB_0011669e:\n        unaff_reg2 = var13;\n        value4 = value3;\n        value2 = var13;\n        pointer2 = unaff_reg3;\n        unaff_reg4 = var20;\n      }\n      goto LAB_001164bb;\n    }\n    if (value2 == 0x10) break;\n    if (0x10 < value2) {\nLAB_00116679:\n      size = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (size != 0) {\n        bfd_set_error(0x11);\n        FUN_001126c0(0,unaff_reg5,param7,size);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (value2 != 4) {\n      if (value2 == 8) {\n        value2 = analyze_build_attributes_001086af();\n        return value2;\n      }\n      goto LAB_00116679;\n    }\n    param1 = value3;\n    value1 = (**(code **)(unaff_reg5[1] + 0x40))();\n    value2 = 0xffffffffffffffff;\n  } while( true );\n  param1 = value3;\n  value1 = (**(code **)(unaff_reg5[1] + 0x28))(result);\n  value2 = (**(code **)(unaff_reg5[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_reg3 <= pointer2) {\n    qsort(param5,nmemb,0x48,FUN_0011a250);\n    ptr = (undefined *)xmalloc(param4 * 2);\n    param1 = 0;\n    param3 = 0;\n    pointer5 = ptr;\n    for (pointer2 = param5; pointer2 < unaff_reg3; pointer2 = pointer2 + 9) {\n      if (pointer2[2] != 0) {\n        pointer4 = pointer5 + 4;\n        pointer3 = pointer5 + 0xc;\n        if ((pointer2[7] == param3) && (pointer2[8] == param1)) {\n          (**(code **)(unaff_reg5[1] + 0x50))(*pointer2,pointer5);\n          (**(code **)(unaff_reg5[1] + 0x50))(0,pointer4);\n          (**(code **)(unaff_reg5[1] + 0x50))(pointer2[2],pointer5 + 8);\n          value1 = pointer2[6];\n          value2 = *pointer2;\n          pointer5 = (undefined *)pointer2[3];\n          pointer4 = pointer3;\n          for (var13 = value2; var13 != 0; var13 = var13 - 1) {\n            *pointer4 = *pointer5;\n            pointer5 = pointer5 + (ulong)byteVar * -2 + 1;\n            pointer4 = pointer4 + (ulong)byteVar * -2 + 1;\n          }\n          if (value2 < value1) {\n            for (size = value1 - value2; size != 0; size = size + -1) {\n              *pointer4 = 0;\n              pointer4 = pointer4 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          pointer5 = pointer3 + value1;\n        }\n        else {\n          (**(code **)(unaff_reg5[1] + 0x50))();\n          if (*(int *)(unaff_reg5[1] + 8) == 5) {\n            character = (*(char *)(unaff_reg5[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            character = '\\b';\n          }\n          (**(code **)(unaff_reg5[1] + 0x50))(character,pointer4);\n          (**(code **)(unaff_reg5[1] + 0x50))(pointer2[2],pointer5 + 8);\n          value2 = *pointer2;\n          pointer5 = (undefined *)pointer2[3];\n          pointer4 = pointer3;\n          for (value1 = value2; value1 != 0; value1 = value1 - 1) {\n            *pointer4 = *pointer5;\n            pointer5 = pointer5 + (ulong)byteVar * -2 + 1;\n            pointer4 = pointer4 + (ulong)byteVar * -2 + 1;\n          }\n          value1 = pointer2[6];\n          if (value2 < value1) {\n            for (size = value1 - value2; size != 0; size = size + -1) {\n              *pointer4 = 0;\n              pointer4 = pointer4 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          size = unaff_reg5[1];\n          pointer3 = pointer3 + value1;\n          pointer5 = pointer3 + 8;\n          if ((*(int *)(size + 8) == 5) && (*(char *)(unaff_reg5[0x22] + 4) == '\\x02')) {\n            (**(code **)(size + 0x38))(pointer2[7],pointer3);\n            (**(code **)(unaff_reg5[1] + 0x38))(pointer2[8],pointer5);\n            pointer5 = pointer3 + 0x10;\n          }\n          else {\n            (**(code **)(size + 0x50))(pointer2[7],pointer3);\n            (**(code **)(unaff_reg5[1] + 0x50))(pointer2[8],pointer3 + 4);\n          }\n          param3 = pointer2[7];\n          param1 = pointer2[8];\n        }\n      }\n    }\n    value1 = (long)pointer5 - (long)ptr;\n    value2 = value1;\n    pointer5 = ptr;\n    if (value1 < param4) {\n      for (; param4 = value1, value2 != 0; value2 = value2 - 1) {\n        *stack_param1 = *pointer5;\n        pointer5 = pointer5 + (ulong)byteVar * -2 + 1;\n        stack_param1 = stack_param1 + (ulong)byteVar * -2 + 1;\n      }\n    }\n    free(ptr);\nLAB_001166f8:\n    free(param5);\n    return param4;\n  }\n  if (pointer2[2] != 0) {\n    value2 = pointer2[7];\n    value1 = pointer2[8];\n    var13 = pointer2[2];\n    pointer6 = pointer2;\n    iVar = 0;\n    if (value2 == value1) {\n      pointer2[2] = 0;\n    }\n    else {\n      do {\n        do {\n          pointer1 = pointer6;\n          pointer6 = pointer1 + -9;\n          if (pointer6 < param5) goto LAB_001167f5;\n          var20 = pointer1[-7];\n        } while (var20 == 0);\n        param1 = var13;\n        if ((*pointer6 != *pointer2) ||\n           (index = memcmp((void *)pointer1[-6],(void *)pointer2[3],*pointer2), index != 0)) break;\n        var13 = pointer1[-2];\n        value3 = pointer1[-1];\n        if (value2 == var13) {\n          if (value1 == value3) {\n            pointer2[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (value1 <= value3) {\n            pointer2[2] = 0;\n            break;\n          }\n          if (value3 < value2) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < value3) || (value2 <= (value3 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n          }\nLAB_001167b8:\n          if ((param1 == 0x101) == (var20 == 0x101)) {\n            if (value3 <= value1) {\n              value3 = value1;\n            }\n            if (var13 < value2) {\n              value2 = var13;\n            }\n            pointer1[-1] = value3;\n            pointer1[-2] = value2;\n            pointer2[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (var13 <= value2) goto LAB_001167a6;\n          if (value3 < value2) goto LAB_0010852c;\n          if (value1 < value2) {\n            if ((0xfffffffffffffff0 < value1) || (var13 <= (value1 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n            goto LAB_001167b8;\n          }\n          if (value1 != value3) goto LAB_001167b8;\n        }\nFUN_00116852:\n        condition = iVar < 0x11;\n        var13 = param1;\n        iVar = iVar + 1;\n      } while (condition);\n    }\n  }\nLAB_001167f5:\n  pointer2 = pointer2 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "FUN_00116490",
                "qsort",
                "FUN_00119ed0",
                "FUN_0010847a",
                "bfd_set_error",
                "FUN_0011a1b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "analyze_build_attributes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_application_0010add5"
            },
            "code": "\nvoid initializeApplication_0010add5(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_application_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_function_00113e17"
            },
            "code": "\nvoid initializeFunction_00113e17(void)\n\n{\n  FUN_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_function_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "create_new_entry_00109b52",
                "param_1": "entry_list",
                "param_2": "source_string",
                "param_3": "context",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "old_entry",
                "puVar2": "new_entry",
                "uVar3": "duplicated_string"
            },
            "code": "\nundefined create_new_entry_00109b52(long entry_list,undefined8 source_string,undefined8 context,undefined flag,\n                      undefined4 value)\n\n{\n  undefined8 old_entry;\n  undefined8 *new_entry;\n  undefined8 duplicated_string;\n  \n  new_entry = (undefined8 *)xmalloc(0x40);\n  duplicated_string = xstrdup(source_string);\n  new_entry[2] = context;\n  *(undefined (*) [16])(new_entry + 4) = ZEXT816(0);\n  *(undefined (*) [16])(new_entry + 6) = ZEXT816(0);\n  old_entry = *(undefined8 *)(entry_list + 0x60);\n  *(undefined *)((long)new_entry + 0x1c) = flag;\n  *(undefined4 *)(new_entry + 3) = value;\n  *(undefined8 **)(entry_list + 0x60) = new_entry;\n  *new_entry = old_entry;\n  new_entry[1] = duplicated_string;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010a0e9",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010a181",
                "FUN_00109dfe",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010a2b9",
                "FUN_00109d97",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010a377",
                "FUN_0010a77a"
            ],
            "imported": false,
            "current_name": "create_new_entry_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "param_1": "string",
                "param_2": "error_flag",
                "param_3": "end_of_string",
                "param_4": "unused_param",
                "param_5": "result",
                "__nptr": "current_char",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_msg",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **string,undefined *error_flag,char *end_of_string,undefined8 unused_param,undefined8 result)\n\n{\n  char *current_char;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_msg;\n  undefined return_value [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  current_char = *string;\n  if ((current_char < end_of_string) && (*current_char != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_char,string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag == (undefined *)0x0) {\n      error_msg = dcgettext(0,\"numeric overflow\",5);\n      FUN_00108fe8(current_char,error_msg);\n    }\n    else {\n      *error_flag = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  return_value._8_8_ = result;\n  return_value._0_8_ = parsed_value;\n  return return_value;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "strtoul",
                "FUN_00108fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_numeric_string_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "process_debug_tag_0010c6be",
                "param_1": "fileMetadata",
                "param_2": "tagName",
                "param_3": "tagData",
                "iVar1": "tagComparisonResult",
                "piVar3": "newTagData",
                "pauVar4": "newTagInfo",
                "lVar5": "filePointer",
                "pcVar6": "errorMessage",
                "uVar2": "translatedMessage"
            },
            "code": "\n\n\nint * processDebugTag_0010c6be(long fileMetadata,char *tagName,int *tagData)\n\n{\n  int tagComparisonResult;\n  undefined8 translatedMessage;\n  int *newTagData;\n  undefined (*newTagInfo) [16];\n  long filePointer;\n  char *errorMessage;\n  \n  if ((tagName != (char *)0x0) && (tagData != (int *)0x0)) {\n    if (*(long *)(fileMetadata + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tagData != 0x17) {\n        newTagData = (int *)FUN_00112904(0x17,0);\n        if (newTagData == (int *)0x0) {\n          return (int *)0x0;\n        }\n        newTagInfo = (undefined (*) [16])xmalloc(0x10);\n        filePointer = *(long *)(fileMetadata + 0x10);\n        *newTagInfo = ZEXT816(0);\n        *(int **)(*newTagInfo + 8) = tagData;\n        *(undefined (**) [16])(newTagData + 4) = newTagInfo;\n        filePointer = FUN_00112925(filePointer + 0x10,tagName,1,3);\n        if (filePointer == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(filePointer + 0x20) = newTagData;\n        *(long *)*newTagInfo = filePointer;\n        return newTagData;\n      }\n      tagComparisonResult = strcmp(*(char **)(**(long **)(tagData + 4) + 8),tagName);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (tagComparisonResult == 0) {\n        return tagData;\n      }\n    }\n    translatedMessage = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translatedMessage);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "strcmp",
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_00112a33",
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_debug_tag_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00119970"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "process_arglist_0010b6ea",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "__ptr": "result_ptr",
                "__format": "error_format",
                "lVar1": "temp_result",
                "uVar2": "result_count",
                "uVar3": "result_size",
                "uVar4": "new_result_count",
                "local_39": "temp_buffer"
            },
            "code": "\n\n\nvoid * process_arglist_0010b6ea(undefined8 input_1,undefined8 input_2,int *arglist,undefined *error_flag)\n\n{\n  void *result_ptr;\n  char *error_format;\n  long temp_result;\n  ulong result_count;\n  ulong result_size;\n  uint new_result_count;\n  char temp_buffer [9];\n  \n  result_size = 10;\n  result_count = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_format);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    temp_result = FUN_0010b0fa(input_1,input_2,*(long *)(arglist + 4),0,temp_buffer);\n    if (temp_result == 0) {\n      if (temp_buffer[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      new_result_count = (int)result_count + 1;\n      if ((uint)result_size <= new_result_count) {\n        result_size = (ulong)((uint)result_size + 10);\n        result_ptr = (void *)xrealloc(result_ptr,result_size << 3);\n      }\n      *(long *)((long)result_ptr + result_count * 8) = temp_result;\n      result_count = (ulong)new_result_count;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + result_count * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "fprintf",
                "xrealloc",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "process_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "copy_function_data_0011a2e0",
                "param_1": "function_data_source",
                "param_2": "binary_data",
                "uVar1": "section_data",
                "uVar2": "error_message",
                "lVar3": "function_data_dest",
                "lVar4": "section_data_value"
            },
            "code": "\nlong copy_function_data_0011a2e0(long function_data_source,long binary_data)\n\n{\n  undefined8 section_data;\n  undefined8 error_message;\n  long function_data_dest;\n  long section_data_value;\n  \n  function_data_dest = (**(code **)(*(long *)(binary_data + 8) + 0x208))(binary_data);\n  section_data_value = *(long *)(function_data_source + 0x20);\n  *(undefined8 *)(function_data_dest + 8) = *(undefined8 *)(function_data_source + 8);\n  *(undefined8 *)(function_data_dest + 0x10) = *(undefined8 *)(function_data_source + 0x10);\n  *(undefined4 *)(function_data_dest + 0x18) = *(undefined4 *)(function_data_source + 0x18);\n  if (section_data_value == 0) {\n    section_data_value = 0x128598;\n  }\n  else {\n    section_data_value = bfd_get_section_by_name(binary_data);\n    if (section_data_value == 0) {\n      section_data = *(undefined8 *)(function_data_source + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      FUN_00119dd0(error_message,section_data);\n    }\n  }\n  *(long *)(function_data_dest + 0x20) = section_data_value;\n  return function_data_dest;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "copy_function_data_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "format_and_send_data_0010e8a9",
                "param_1": "firstParam",
                "param_2": "secondParam",
                "param_3": "data",
                "uVar1": "result",
                "sVar2": "dataLength",
                "__s": "formattedData"
            },
            "code": "\nundefined4 formatAndSendData_0010e8a9(undefined8 firstParam,undefined8 secondParam,char *data)\n\n{\n  undefined4 result;\n  size_t dataLength;\n  char *formattedData;\n  \n  dataLength = strlen(data);\n  formattedData = (char *)xmalloc(dataLength + 0x14);\n  sprintf(formattedData,\"%s:c=f%g\",firstParam,data);\n  result = FUN_0010e2f0(secondParam,0x80,0,0,formattedData);\n  if ((char)result != '\\0') {\n    free(formattedData);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "unaff_RBP": "currentFlag",
                "__s": "sectionName",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "supportedFlags",
                "auVar6": "result",
                "unaff_retaddr": "returnAddr",
                "pcVar3": "commaIndex",
                "sVar4": "sectionNameLength",
                "iVar1": "comparisonResult",
                "iVar5": "length",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined  [16] parseSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 errorMessage;\n  char *commaIndex;\n  char *currentFlag;\n  char *sectionName;\n  size_t sectionNameLength;\n  int length;\n  uint sectionFlags;\n  char *supportedFlags;\n  undefined result [16];\n  undefined8 returnAddr;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    sectionName = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionName == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = sectionFlags;\n                result._8_8_ = returnAddr;\n                return result;\n              }\n              commaIndex = strchr(sectionName,0x2c);\n              if (commaIndex == (char *)0x0) {\n                sectionNameLength = strlen(sectionName);\n                length = (int)sectionNameLength;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = commaIndex + 1;\n                length = (int)commaIndex - (int)sectionName;\n              }\n              sectionNameLength = (size_t)length;\n              comparisonResult = strncasecmp(supportedFlags,sectionName,sectionNameLength);\n              if (comparisonResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              sectionName = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionName,sectionNameLength);\n            if (comparisonResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            sectionName = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionName,sectionNameLength);\n          if (comparisonResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          sectionName = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionName,sectionNameLength);\n        if (comparisonResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        sectionName = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionName,sectionNameLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionName,sectionNameLength);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        sectionName = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionName,sectionNameLength);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          sectionName = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionName,sectionNameLength);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            sectionName = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionName,sectionNameLength);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              sectionName = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionName,sectionNameLength);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                sectionName = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionName,sectionNameLength);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  sectionName = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionName,sectionNameLength);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    sectionName = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionName,sectionNameLength);\n                    if (comparisonResult != 0) {\n                      commaIndex = (char *)xmalloc((long)(length + 1));\n                      strncpy(commaIndex,sectionName,sectionNameLength);\n                      commaIndex[sectionNameLength] = '\\0';\n                      errorMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      FUN_00119ed0(errorMessage,commaIndex);\n                      errorMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      FUN_00119dd0(errorMessage,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    sectionName = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "strncasecmp",
                "FUN_00119dd0",
                "strchr",
                "xmalloc",
                "strncpy",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_equals100_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXEquals100_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_rax_equals100_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_0010bbd3",
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "binary",
                "param_2": "typeName",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "currentCompilationUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errorString",
                "puVar4": "nodePtr",
                "lVar5": "loopVar",
                "puVar6": "unitPtr",
                "auVar7": "returnValue"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long binary,char *typeName,undefined8 param3,undefined8 param4)\n\n{\n  long currentCompilationUnit;\n  int comparisonResult;\n  undefined8 errorString;\n  undefined8 *nodePtr;\n  long loopVar;\n  undefined8 *unitPtr;\n  undefined returnValue [16];\n  \n  currentCompilationUnit = *(long *)(binary + 8);\n  if (currentCompilationUnit == 0) {\n    errorString = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorString);\n  }\n  else {\n    for (loopVar = *(long *)(binary + 0x20); loopVar != 0; loopVar = *(long *)(loopVar + 8)) {\n      if (*(undefined8 **)(loopVar + 0x28) != (undefined8 *)0x0) {\n        for (nodePtr = (undefined8 *)**(undefined8 **)(loopVar + 0x28); nodePtr != (undefined8 *)0x0;\n            nodePtr = (undefined8 *)*nodePtr) {\n          if (*(int *)((long)nodePtr + 0x14) == 0) {\n            if (*(char *)nodePtr[1] == *typeName) {\n              comparisonResult = strcmp((char *)nodePtr[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (unitPtr = *(undefined8 **)(currentCompilationUnit + 8); unitPtr != (undefined8 *)0x0;\n        unitPtr = (undefined8 *)*unitPtr) {\n      if ((undefined8 *)unitPtr[2] != (undefined8 *)0x0) {\n        for (nodePtr = *(undefined8 **)(undefined8 *)unitPtr[2]; nodePtr != (undefined8 *)0x0;\n            nodePtr = (undefined8 *)*nodePtr) {\n          if (*(int *)((long)nodePtr + 0x14) == 0) {\n            if (*(char *)nodePtr[1] == *typeName) {\n              comparisonResult = strcmp((char *)nodePtr[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorString = 0;\nLAB_00109223:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = errorString;\n  return returnValue;\nLAB_00109216:\n  errorString = nodePtr[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_parameter_0010829e",
                "unaff_EBP": "parameter",
                "uVar1": "result"
            },
            "code": "\nundefined8 checkParameter_0010829e(void)\n\n{\n  undefined8 result;\n  int parameter;\n  \n  if (parameter == 5) {\n    result = FUN_00113ede();\n    return result;\n  }\n  if ((parameter != 4) && (parameter == 6)) {\n    result = FUN_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_parameter_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010edb4",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_architectures_00104943",
                "in_RAX": "inputString",
                "lVar3": "convertedValue",
                "iVar1": "defaultLength",
                "iVar9": "currentLength",
                "uStack000000000000000c": "indentationLevel",
                "param_7": "maxStringLength",
                "unaff_R15D": "currentArchitecture",
                "uVar10": "strLength",
                "uVar11": "archIndex",
                "param_11": "archMachines",
                "param_13": "architecturesArray",
                "iVar2": "cmpResult",
                "pcVar5": "archString",
                "lVar8": "startIndex"
            },
            "code": "\n\n\nvoid printArchitectures_00104943(void)\n\n{\n  int defaultLength;\n  int cmpResult;\n  char *inputString;\n  long convertedValue;\n  size_t sVar4;\n  char *archString;\n  undefined8 uVar6;\n  int iVar7;\n  long startIndex;\n  int currentLength;\n  uint currentArchitecture;\n  ulong strLength;\n  uint archIndex;\n  int maxStringLength;\n  uint indentationLevel;\n  undefined8 archMachines;\n  long architecturesArray;\n  \n  convertedValue = strtol(inputString,(char **)0x0,10);\n  defaultLength = (int)convertedValue;\n  currentLength = maxStringLength;\n  indentationLevel = currentArchitecture;\n  if (defaultLength == 0) {\n    defaultLength = 0x50;\n  }\n  do {\n    maxStringLength = currentLength;\n    if (archMachines._4_4_ <= maxStringLength) {\n      return;\n    }\n    startIndex = (long)maxStringLength;\n    iVar7 = (defaultLength - indentationLevel) + -1;\n    convertedValue = startIndex;\n    do {\n      currentLength = (int)convertedValue;\n      if (archMachines._4_4_ <= currentLength) break;\n      sVar4 = strlen(*(char **)(architecturesArray + convertedValue * 0x60));\n      convertedValue = convertedValue + 1;\n      iVar7 = (iVar7 - (int)sVar4) + -1;\n    } while (-1 < iVar7);\n    printf(\"\\n%*s\",(ulong)(indentationLevel + 1),&DAT_0011b4a1);\n    for (convertedValue = startIndex * 0x60; ((ulong)(uint)(currentLength - maxStringLength) + startIndex) * 0x60 - convertedValue != 0;\n        convertedValue = convertedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(architecturesArray + convertedValue));\n    }\n    iVar7 = 2;\n    putc(10,_stdout);\n    do {\n      archString = (char *)bfd_printable_arch_mach(iVar7,0);\n      cmpResult = strcmp(archString,\"UNKNOWN!\");\n      if (cmpResult != 0) {\n        uVar6 = bfd_printable_arch_mach(iVar7,0);\n        printf(\"%*s \",(ulong)indentationLevel,uVar6);\n        archIndex = iVar7 - 2;\n        convertedValue = startIndex * 0x60;\n        cmpResult = maxStringLength;\n        while (currentLength != cmpResult) {\n          archString = *(char **)(architecturesArray + convertedValue);\n          if (*(char *)((long)(char **)(architecturesArray + convertedValue) + (ulong)archIndex + 8) == '\\0') {\n            sVar4 = strlen(archString);\n            for (strLength = sVar4 & 0xffffffff; (int)strLength != 0; strLength = (ulong)((int)strLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archString,_stdout);\n          }\n          cmpResult = cmpResult + 1;\n          if (currentLength != cmpResult) {\n            putc(0x20,_stdout);\n          }\n          convertedValue = convertedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      iVar7 = iVar7 + 1;\n    } while (iVar7 != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "fputs",
                "bfd_printable_arch_mach",
                "strtol",
                "printf",
                "putc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_architectures_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_or_update_data_entry_00113e23",
                "param_1": "data1",
                "param_2": "data2",
                "lVar1": "entryAddress",
                "puVar2": "newEntry"
            },
            "code": "\nlong createOrUpdateDataEntry_00113e23(undefined8 data1,undefined8 data2)\n\n{\n  long entryAddress;\n  undefined8 *newEntry;\n  \n  entryAddress = FUN_00112904(1,0);\n  if (entryAddress != 0) {\n    newEntry = (undefined8 *)xmalloc(0x10);\n    *newEntry = data1;\n    newEntry[1] = data2;\n    *(undefined8 **)(entryAddress + 0x10) = newEntry;\n  }\n  return entryAddress;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010afd5",
                "FUN_0010c2d2"
            ],
            "imported": false,
            "current_name": "create_or_update_data_entry_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00108b3e",
                "FUN_0011256b",
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStab_00108fb9(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_bad_stab_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "iVar1": "current_digit",
                "pbVar2": "current_ptr",
                "pbVar3": "next_ptr",
                "uVar4": "result"
            },
            "code": "\nulong parse_number_00108ea1(byte **input_ptr,int *output_ptr)\n\n{\n  int current_digit;\n  byte *current_ptr;\n  byte *next_ptr;\n  ulong result;\n  \n  current_ptr = *input_ptr;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_ptr * 2] & 4) != 0) {\n    next_ptr = current_ptr + 1;\n    current_digit = (char)*current_ptr + -0x30;\n    *output_ptr = current_digit;\n    *input_ptr = next_ptr;\n    if (((&_sch_istable)[(ulong)current_ptr[1] * 2] & 4) != 0) {\n      do {\n        current_ptr = next_ptr;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*current_ptr;\n        next_ptr = current_ptr + 1;\n      } while (((&_sch_istable)[(ulong)current_ptr[1] * 2] & 4) != 0);\n      if (current_ptr[1] == 0x5f) {\n        next_ptr = current_ptr + 2;\n        *input_ptr = next_ptr;\n        *output_ptr = current_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_ptr >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010d882",
                "FUN_0010d21c",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "initialize_memory_layout_00108072",
                "unaff_RBX": "memoryLayout",
                "unaff_RBP": "basePointer",
                "unaff_R12": "register12",
                "unaff_R14B": "flag",
                "unaff_R15": "register15",
                "dcgettext": "getTranslatedString",
                "lVar5": "errorString",
                "lVar6": "tempVariable1",
                "lVar7": "tempVariable2",
                "lVar8": "tempVariable3",
                "uVar2": "tempVariable4",
                "uVar4": "tempVariable5",
                "cVar3": "charVariable",
                "bVar1": "byteVariable"
            },
            "code": "\n\n\nvoid initializeMemoryLayout_00108072(void)\n\n{\n  byte byteVariable;\n  undefined8 tempVariable4;\n  char charVariable;\n  uint tempVariable5;\n  long errorString;\n  long tempVariable1;\n  long tempVariable2;\n  undefined8 *memoryLayout;\n  long basePointer;\n  long register12;\n  long tempVariable3;\n  char flag;\n  long register15;\n  \n  errorString = dcgettext(0,\"failed to set size\",5);\n  tempVariable3 = memoryLayout[6];\n  tempVariable1 = FUN_00114190(*memoryLayout,0,0x18);\n  if (tempVariable1 == 0) {\n    *(byte *)(register15 + 0x28) = *(byte *)(register15 + 0x28) | 1;\n    tempVariable4 = *memoryLayout;\n    tempVariable3 = tempVariable3 + _DAT_00127990;\n    *(long *)(register15 + 0x30) = tempVariable3;\n    *(long *)(register15 + 0x38) = tempVariable3;\n    tempVariable3 = memoryLayout[7];\n    tempVariable1 = FUN_00114190(tempVariable4,0,0x60);\n    if (tempVariable1 == 0) goto LAB_00115695;\nLAB_00115860:\n    tempVariable2 = *(long *)(tempVariable1 + 0x20);\n    if ((*(byte *)(tempVariable1 + 0x14) & 0x40) != 0) {\n      tempVariable2 = tempVariable2 + tempVariable3;\n    }\n    *(long *)(register15 + 0x38) = tempVariable2;\n    tempVariable3 = FUN_00114190(*memoryLayout,0,0x200);\n    if (tempVariable3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    tempVariable5 = *(uint *)((long)memoryLayout + 0x7c);\n    if (tempVariable5 < 0x3f) goto LAB_001156c4;\n    errorString = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(register15 + 0xb4) = *(undefined4 *)((long)memoryLayout + 0xb4);\n    *(byte *)(register15 + 0x28) =\n         *(byte *)(register15 + 0x28) & 0xcf | *(byte *)(memoryLayout + 5) & 0x30;\n    memoryLayout[0xc] = register15;\n    memoryLayout[0xb] = 0;\n    byteVariable = *(byte *)((long)memoryLayout + 0x27);\n  }\n  else {\n    tempVariable2 = *(long *)(tempVariable1 + 0x18);\n    if ((*(byte *)(tempVariable1 + 0x14) & 8) == 0) {\n      tempVariable2 = tempVariable2 + tempVariable3;\n    }\n    *(byte *)(register15 + 0x28) = *(byte *)(register15 + 0x28) | 1;\n    tempVariable4 = *memoryLayout;\n    *(long *)(register15 + 0x30) = tempVariable2;\n    *(long *)(register15 + 0x38) = tempVariable2;\n    tempVariable3 = memoryLayout[7];\n    tempVariable1 = FUN_00114190(tempVariable4,0,0x60);\n    if (tempVariable1 != 0) goto LAB_00115860;\nLAB_00115695:\n    tempVariable4 = *memoryLayout;\n    *(long *)(register15 + 0x38) = tempVariable3 + _DAT_00127990;\n    tempVariable3 = FUN_00114190(tempVariable4,0,0x200);\n    if (tempVariable3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    tempVariable5 = *(uint *)(tempVariable3 + 0x2c);\n    if (0x3e < tempVariable5) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(register15 + 0x7c) = tempVariable5;\n    *(undefined4 *)(register15 + 0xb4) = *(undefined4 *)((long)memoryLayout + 0xb4);\n    *(byte *)(register15 + 0x28) =\n         *(byte *)(register15 + 0x28) & 0xcf | *(byte *)(memoryLayout + 5) & 0x30;\n    memoryLayout[0xc] = register15;\n    memoryLayout[0xb] = 0;\n    byteVariable = *(byte *)((long)memoryLayout + 0x27);\n  }\n  if ((byteVariable & 2) != 0) {\n    tempVariable3 = memoryLayout[0x1a];\n    tempVariable1 = FUN_00115d00(tempVariable3,memoryLayout[0x1c]);\n    if ((tempVariable1 != 0) &&\n       (tempVariable2 = *(long *)(register12 + 8), *(uint *)(tempVariable1 + 0x18) = *(uint *)(tempVariable1 + 0x18) | 0x20,\n       *(int *)(tempVariable2 + 8) == 5)) {\n      *(long *)(tempVariable3 + 0xb0) = tempVariable1;\n      charVariable = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (charVariable == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVariable = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (charVariable == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(register15 + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00114190",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "initialize_memory_layout_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "extract_and_format_data_0010a2b9",
                "param_1": "data_pointer",
                "param_2": "flag",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "cVar1": "char_value",
                "__s": "str",
                "sVar2": "str_len",
                "__s_00": "new_str",
                "lVar3": "counter",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16] extract_and_format_data_0010a2b9(long data_pointer,char flag,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  char char_value;\n  char *str;\n  size_t str_len;\n  char *new_str;\n  long counter;\n  undefined return_value [16];\n  \n  char_value = *(char *)(*(long *)(data_pointer + 0x60) + 0x1c);\n  str = (char *)FUN_00109b2f();\n  str_len = strlen(str);\n  new_str = (char *)xmalloc(str_len + 0x1e);\n  if (flag == '\\0') {\n    *new_str = '\\0';\n    counter = 0;\n    flag = char_value;\n  }\n  else {\n    counter = *(long *)(data_pointer + 0x68);\n    *(long *)(data_pointer + 0x68) = counter + 1;\n    sprintf(new_str,\"%ld=@S;\",counter);\n  }\n  str_len = strlen(new_str);\n  sprintf(new_str + str_len,\"S%s\",str);\n  free(str);\n  return_value._0_4_ = FUN_00109b52(data_pointer,new_str,counter,flag,0);\n  return_value._4_4_ = 0;\n  if ((char)return_value._0_4_ != '\\0') {\n    free(new_str);\n  }\n  return_value._8_8_ = unused_param_2;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_format_data_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_and_calculate_offset_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "address1",
                "param_4": "address2",
                "param_5": "address3",
                "param_6": "address4",
                "iVar1": "count",
                "cVar2": "result"
            },
            "code": "\nundefined updateAndCalculateOffset_0010ec73(long *data,long value,undefined8 address1,undefined8 address2,\n                      undefined8 address3,undefined8 address4)\n\n{\n  int count;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  count = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = count + 1;\n  if (count == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = FUN_0010e2f0(data,0xc0,0,data[0x41],0,address4,address2), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_and_calculate_offset_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_message_00114e00",
                "param_1": "endianness"
            },
            "code": "\nvoid getEndiannessMessage_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "get_endianness_message_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_unlink_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "flags",
                "param_4": "mode",
                "param_5": "shouldReverse",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errnoPtr",
                "pcVar3": "errorStr",
                "uVar4": "errorMessage",
                "uVar5": "unlinkResult",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndUnlinkFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 flags,undefined8 mode,char shouldReverse,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errnoPtr;\n  char *errorStr;\n  undefined8 errorMessage;\n  ulong unlinkResult;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    unlinkResult = 0;\n  }\n  else {\n    copyResult = FUN_00115a90(flags,destinationFilePath,mode);\n    unlinkResult = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoPtr = __errno_location();\n      errorStr = strerror(*errnoPtr);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00119ed0(errorMessage,destinationFilePath,errorStr);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldReverse != '\\0') {\n    FUN_0011a350(destinationFilePath,mode);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = unlinkResult;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_application_0010adf2"
            },
            "code": "\nvoid initialize_application_0010adf2(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_application_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "process_data_0010d7d4",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "outputParam1",
                "param_4": "outputParam2",
                "param_5": "outputParam3",
                "uVar1": "inputValue",
                "cVar2": "conditionResult",
                "uVar3": "functionResult",
                "lVar4": "currentValue",
                "plVar5": "tempArray",
                "local_40": "localArray"
            },
            "code": "\nundefined4\nprocessData_0010d7d4(undefined8 inputParam1,undefined8 *inputParam2,long *outputParam1,uint *outputParam2,uint *outputParam3)\n\n{\n  undefined8 inputValue;\n  char conditionResult;\n  undefined4 functionResult;\n  long currentValue;\n  long *tempArray;\n  uint uVar6;\n  long localArray [2];\n  \n  inputValue = *inputParam2;\n  tempArray = localArray;\n  if (outputParam1 == (long *)0x0) {\n    tempArray = (long *)0x0;\n  }\n  conditionResult = FUN_0010c95e(inputParam1,inputParam2,tempArray);\n  if ((conditionResult != '\\0') &&\n     (functionResult = FUN_00109be3(inputParam1,inputValue,(int)*inputParam2 - (int)inputValue), (char)functionResult != '\\0')) {\n    if (outputParam1 == (long *)0x0) {\n      return functionResult;\n    }\n    if (localArray[0] != 0) {\n      if (*outputParam3 <= *outputParam2 + 1) {\n        uVar6 = *outputParam3 + 10;\n        currentValue = *outputParam1;\n        *outputParam3 = uVar6;\n        currentValue = xrealloc(currentValue,(ulong)uVar6 << 3);\n        *outputParam1 = currentValue;\n      }\n      uVar6 = *outputParam2;\n      *(long *)(*outputParam1 + (ulong)uVar6 * 8) = localArray[0];\n      *outputParam2 = uVar6 + 1;\n      return functionResult;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109be3",
                "xrealloc",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "process_data_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "filename",
                "iVar1": "status",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong checkFile_00113f50(char *filename)\n\n{\n  int status;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStat;\n  \n  if (filename != (char *)0x0) {\n    status = stat(filename,&fileStat);\n    if (status < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00119ed0(errorMessage,filename);\n      }\n      else {\n        errorReason = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00119ed0(errorMessage,filename,errorReason);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00119ed0(errorMessage,filename);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00119ed0(errorMessage,filename);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00119ed0(errorMessage,filename);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "stat",
                "FUN_00119ed0",
                "FUN_00104966"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd"
            },
            "code": "\nundefined8 initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formats",
                "uVar1": "formatMessage",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formats)\n\n{\n  undefined8 formatMessage;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  formatMessage = DAT_001275e0;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,formatMessage);\n  for (currentFormat = formats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "fflush",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_001126c0",
                "FUN_0010871c",
                "FUN_00119e70",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "extract_binary_data_0011378f",
                "param_1": "output_buffer",
                "param_2": "stats",
                "param_3": "result",
                "param_4": "hash_value",
                "param_5": "strings",
                "param_6": "output_length",
                "auVar1": "temp_array",
                "cVar2": "result_char",
                "uVar3": "error_code",
                "uVar4": "error_msg",
                "puVar5": "temp_ptr",
                "sVar6": "string_length",
                "lVar7": "loop_counter",
                "puVar8": "temp_ptr_2",
                "puVar9": "array_ptr",
                "__dest": "destination",
                "puVar10": "temp_ptr_3",
                "plVar11": "temp_ptr_4",
                "bVar12": "flag",
                "local_258": "input_buffer",
                "local_250": "dynamic_memory",
                "local_248": "value_1",
                "uStack_244": "value_2",
                "uStack_240": "value_3",
                "uStack_23c": "value_4",
                "local_238": "temp_value",
                "local_228": "constant_1",
                "local_220": "hash_table_1",
                "local_1f8": "constant_2",
                "local_1f0": "constant_3",
                "local_1e8": "array_1",
                "local_a0": "array_2",
                "local_78": "constant_4",
                "uStack_70": "array_3",
                "local_68": "value_5",
                "local_60": "value_6",
                "local_58": "value_7",
                "uStack_54": "value_8",
                "uStack_50": "value_9",
                "uStack_4c": "value_10"
            },
            "code": "\nundefined4\nextract_binary_data_0011378f(undefined8 *output_buffer,undefined8 *stats,long *result,undefined8 *hash_value,\n            undefined8 *strings,undefined8 *output_length)\n\n{\n  undefined temp_array [16];\n  char result_char;\n  undefined4 error_code;\n  undefined8 error_msg;\n  undefined *temp_ptr;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *temp_ptr_2;\n  undefined4 *array_ptr;\n  char *destination;\n  undefined8 *temp_ptr_3;\n  long *temp_ptr_4;\n  byte flag;\n  undefined8 *input_buffer;\n  long dynamic_memory;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  undefined temp_value [16];\n  undefined8 constant_1;\n  undefined hash_table_1 [40];\n  undefined8 constant_2;\n  undefined8 constant_3;\n  undefined4 array_1 [82];\n  undefined array_2 [40];\n  undefined constant_4 [8];\n  undefined8 array_3;\n  undefined8 value_5;\n  undefined4 value_6;\n  undefined4 value_7;\n  undefined4 value_8;\n  undefined4 value_9;\n  undefined4 value_10;\n  \n  flag = 0;\n  value_1 = 0;\n  value_2 = 0;\n  value_3 = 500;\n  value_4 = 0;\n  input_buffer = output_buffer;\n  dynamic_memory = xmalloc(500);\n  constant_1 = 1;\n  temp_value = ZEXT816(0);\n  result_char = bfd_hash_table_init(hash_table_1,FUN_0010bb52,0x30);\n  if ((result_char == '\\0') || (result_char = bfd_hash_table_init(array_2,FUN_0010bb52,0x30), result_char == '\\0')) {\n    error_code = bfd_get_error();\n    error_msg = bfd_errmsg(error_code);\n    FUN_00119ed0(\"bfd_hash_table_init_failed: %s\",error_msg);\n  }\n  else {\n    constant_2 = 0;\n    unique0x100000e9 = 0xffffffff;\n    constant_4 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    array_ptr = array_1;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *array_ptr = 0;\n      array_ptr = array_ptr + (ulong)flag * -2 + 1;\n    }\n    value_5 = 0;\n    value_6 = 0;\n    constant_3 = 1;\n    value_7 = 0;\n    value_8 = 0;\n    value_9 = 0xffffffff;\n    value_10 = 0xffffffff;\n    result_char = FUN_0010e2f0(&input_buffer,0,0,0,0);\n    temp_array = _constant_4;\n    if (result_char != '\\0') {\n      constant_4._4_4_ = value_2;\n      constant_4._0_4_ = value_1;\n      array_3 = temp_array._8_8_;\n      result_char = FUN_0010e2f0(&input_buffer,100,0,0,*output_buffer);\n      if (result_char != '\\0') {\n        *(int *)(stats + 6) = *(int *)(stats + 6) + 1;\n        stats[10] = 0;\n        temp_ptr_3 = (undefined8 *)*stats;\n        *(undefined4 *)(stats + 7) = *(undefined4 *)((long)stats + 0x34);\n        for (; temp_ptr_3 != (undefined8 *)0x0; temp_ptr_3 = (undefined8 *)*temp_ptr_3) {\n          stats[8] = temp_ptr_3[2];\n          *(undefined4 *)(stats + 9) = 0;\n          result_char = thunk_FUN_0010e439(&input_buffer,*(undefined8 *)(temp_ptr_3[1] + 8));\n          if (result_char == '\\0') {\n            return 0;\n          }\n          temp_ptr_4 = (long *)temp_ptr_3[1];\n          if (temp_ptr_4 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)temp_ptr_4[2] != (undefined8 *)0x0) {\n                for (temp_ptr_2 = *(undefined8 **)(undefined8 *)temp_ptr_4[2]; temp_ptr_2 != (undefined8 *)0x0;\n                    temp_ptr_2 = (undefined8 *)*temp_ptr_2) {\n                  result_char = FUN_001135a5(stats,&input_buffer);\n                  if (result_char == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              temp_ptr_4 = (long *)*temp_ptr_4;\n              if (temp_ptr_4 == (long *)0x0) break;\n              result_char = FUN_0010e439(&input_buffer,temp_ptr_4[1]);\n              if (result_char == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result_char = FUN_00112502(stats,&input_buffer,0xffffffffffffffff);\n          if (result_char == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(value_10,value_9) == -1) &&\n           (error_code = FUN_0010e2f0(&input_buffer,100,0,value_5,0), (char)error_code != '\\0')) {\n          (**(code **)(output_buffer[1] + 0x50))(constant_1,dynamic_memory + 8);\n          *result = dynamic_memory;\n          *hash_value = CONCAT44(value_2,value_1);\n          *output_length = constant_1;\n          temp_ptr = (undefined *)xmalloc();\n          *temp_ptr = 0;\n          destination = temp_ptr + 1;\n          *strings = temp_ptr;\n          for (loop_counter = temp_value._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(destination,*(char **)(loop_counter + 8));\n            string_length = strlen(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010bb52",
                "FUN_00112502",
                "FUN_0010e2f0",
                "FUN_0010e439",
                "FUN_001135a5",
                "xmalloc",
                "FUN_00119ed0",
                "bfd_hash_table_init",
                "strlen",
                "bfd_errmsg",
                "strcpy",
                "thunk_FUN_0010e439",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_binary_data_0011378f"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "print_warning_00104966",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 printWarning_00104966(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00119ed0(errorMessage);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00119ed0(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "print_warning_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "initialize_data_0010a0a0",
                "param_1": "dataAddress"
            },
            "code": "\nvoid initializeData_0010a0a0(long dataAddress)\n\n{\n  FUN_00109ed3(dataAddress,0x26,4,dataAddress + 0x198,dataAddress + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "process_data_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "constant",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "param2_copy",
                "local_a8": "param3_copy",
                "local_a0": "param4_copy",
                "local_98": "param5_copy",
                "local_90": "param6_copy",
                "local_88": "input1_copy",
                "local_78": "input2_copy",
                "local_68": "input3_copy",
                "local_58": "input4_copy",
                "local_48": "input5_copy",
                "local_38": "input6_copy",
                "local_28": "input7_copy",
                "local_18": "input8_copy"
            },
            "code": "\nvoid processData_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 constant;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined temporaryBuffer [8];\n  undefined8 param2_copy;\n  undefined8 param3_copy;\n  undefined8 param4_copy;\n  undefined8 param5_copy;\n  undefined8 param6_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (condition != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  localBuffer = temporaryBuffer;\n  constant = 0x30;\n  param2_copy = param2;\n  param3_copy = param3;\n  param4_copy = param4;\n  param5_copy = param5;\n  param6_copy = param6;\n  FUN_00119e70(param1,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00107880",
                "FUN_0010e2f0",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00104cc1",
                "FUN_0010e6a8",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_0010b800",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_00113f50",
                "FUN_00114e50",
                "FUN_001152b6",
                "FUN_0010ba08",
                "FUN_00108375",
                "FUN_00114690",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00105828",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "process_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "process_data_00112c1f",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "plVar1": "ptrToLongVar1",
                "lVar2": "longVar2",
                "puVar3": "ptrToUndefined8Var3",
                "puVar4": "ptrToUndefined8Var4",
                "cVar5": "charVar5",
                "piVar6": "ptrToIntVar6"
            },
            "code": "\n\n\nundefined8 processData_00112c1f(ulong param1,undefined8 param2,int *param3,long param4)\n\n{\n  long *ptrToLongVar1;\n  long longVar2;\n  undefined8 *ptrToUndefined8Var3;\n  undefined8 *ptrToUndefined8Var4;\n  char charVar5;\n  int *ptrToIntVar6;\n  undefined8 uVar7;\n  undefined8 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined8 uVar11;\n  ulong uVar12;\n  uint uVar13;\n  bool bVar14;\n  uint local_3c;\n  \n  uVar12 = param1;\nLAB_00112c39:\n  if (param3 != (int *)0x0) {\n    iVar9 = *param3;\n    if (iVar9 - 0x16U < 2) {\n      do {\n        ptrToLongVar1 = *(long **)(param3 + 4);\n        uVar13 = *(uint *)(param1 + 0x30);\n        uVar12 = (ulong)uVar13;\n        longVar2 = *ptrToLongVar1;\n        if (*(uint *)(longVar2 + 0x10) == uVar13) {\n          if (iVar9 == 0x16) {\n            uVar7 = FUN_0010bba1(param2,*(undefined8 *)(longVar2 + 8));\n            return uVar7;\n          }\nLAB_00112c94:\n          ptrToIntVar6 = (int *)FUN_00112b6e(param3,0);\n          if (ptrToIntVar6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptrToIntVar6 - 7U < 4) && (*(long *)(ptrToIntVar6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptrToIntVar6 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n               (charVar5 = FUN_0010c7a0(param1,*(undefined8 *)(**(long **)(param3 + 4) + 8),ptrToIntVar6),\n               charVar5 == '\\0')) {\n              return 0;\n            }\n            uVar13 = *(uint *)(*(long *)(ptrToIntVar6 + 4) + 0xc);\n          }\n          else {\n            uVar13 = 0;\n          }\n          iVar9 = *ptrToIntVar6;\n          uVar7 = *(undefined8 *)(**(long **)(param3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (iVar9 == 0x17) {\n          if (longVar2 != param4) goto LAB_00112c94;\n          *(uint *)(param4 + 0x10) = uVar13;\n          param4 = *ptrToLongVar1;\n          param3 = (int *)ptrToLongVar1[1];\n          goto LAB_00112c39;\n        }\n        if (param4 != 0) {\n          *(uint *)(param4 + 0x10) = uVar13;\n        }\n        param3 = (int *)ptrToLongVar1[1];\n        if (param3 == (int *)0x0) goto LAB_00112dd6;\n        iVar9 = *param3;\n        param4 = 0;\n      } while (iVar9 - 0x16U < 2);\nLAB_00112d74:\n      uVar7 = 0;\n    }\n    else {\n      if (param4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param4 + 0x10) = *(undefined4 *)(param1 + 0x30);\n      if (*(int *)(param4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      uVar7 = *(undefined8 *)(param4 + 8);\n    }\n    switch(iVar9) {\n    case 0:\n      uVar7 = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",uVar7);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      uVar7 = FUN_00109dfe(param2);\n      return uVar7;\n    case 3:\n      uVar7 = FUN_0010b800(param2,param3[1],*(undefined *)(param3 + 4));\n      return uVar7;\n    case 4:\n      uVar7 = FUN_0010b948(param2,param3[1]);\n      return uVar7;\n    case 5:\n      uVar7 = FUN_00109e76(param2,param3[1]);\n      return uVar7;\n    case 6:\n      uVar7 = FUN_00109d3e(param2,param3[1]);\n      return uVar7;\n    case 7:\n    case 8:\n      if (*(long *)(param3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (charVar5 = FUN_0010c7a0(param1,uVar7,param3), charVar5 == '\\0')) {\n          return 0;\n        }\n        longVar2 = *(long *)(param3 + 4);\n        if (*(int *)(param1 + 0x30) == *(int *)(longVar2 + 8)) {\n          uVar13 = *(uint *)(longVar2 + 0xc);\n          if (uVar13 <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          iVar9 = *param3;\nLAB_00112ed2:\n          uVar7 = FUN_00109d5c(param2,uVar7,uVar13,iVar9);\n          return uVar7;\n        }\n        *(int *)(longVar2 + 8) = *(int *)(param1 + 0x30);\n      }\n      uVar10 = 0;\n      if (*(long *)(param3 + 4) != 0) {\n        uVar10 = *(undefined4 *)(*(long *)(param3 + 4) + 0xc);\n      }\n      charVar5 = FUN_0010a69a(param2,uVar7,uVar10,*param3 == 7,param3[1]);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param3 + 4) != (long *)0x0) && (uVar12 = 0, **(long **)(param3 + 4) != 0)) {\n        while( true ) {\n          ptrToUndefined8Var4 = *(undefined8 **)(**(long **)(param3 + 4) + uVar12 * 8);\n          if (ptrToUndefined8Var4 == (undefined8 *)0x0) break;\n          charVar5 = processData_00112c1f(param1,param2,ptrToUndefined8Var4[1],0);\n          if (charVar5 == '\\0') {\n            return 0;\n          }\n          charVar5 = FUN_0010ba08(param2,*ptrToUndefined8Var4,*(undefined4 *)(ptrToUndefined8Var4 + 3),\n                               *(undefined4 *)((long)ptrToUndefined8Var4 + 0x1c),*(undefined4 *)(ptrToUndefined8Var4 + 2));\n          if (charVar5 == '\\0') {\n            return 0;\n          }\n          uVar12 = (ulong)((int)uVar12 + 1);\n        }\n      }\n      uVar7 = FUN_0010a77a(param2);\n      return uVar7;\n    case 9:\n    case 10:\n      if (*(long *)(param3 + 4) == 0) {\n        uVar13 = 0;\n        ptrToIntVar6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (uVar12 = param1, charVar5 = FUN_0010c7a0(param1,uVar7,param3), charVar5 == '\\0')) {\n          return 0;\n        }\n        longVar2 = *(long *)(param3 + 4);\n        uVar13 = *(uint *)(longVar2 + 0xc);\n        if (*(int *)(param1 + 0x30) == *(int *)(longVar2 + 8)) {\n          if (uVar13 <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          iVar9 = *param3;\n          goto LAB_00112ed2;\n        }\n        ptrToIntVar6 = *(int **)(longVar2 + 0x20);\n        *(int *)(longVar2 + 8) = *(int *)(param1 + 0x30);\n        if (((ptrToIntVar6 != (int *)0x0) && (param3 != ptrToIntVar6)) &&\n           (uVar12 = param1, charVar5 = processData_00112c1f(param1,param2,ptrToIntVar6,0), charVar5 == '\\0')) {\n          return 0;\n        }\n      }\n      charVar5 = FUN_0010a83e(param2,uVar7,uVar13,*param3 == 9,param3[1],ptrToIntVar6 != (int *)0x0,\n                           param3 == ptrToIntVar6,uVar12);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param3 + 4) != (long *)0x0) {\n        uVar13 = 0;\n        if (**(long **)(param3 + 4) != 0) {\n          while (ptrToUndefined8Var4 = *(undefined8 **)(**(long **)(param3 + 4) + (ulong)uVar13 * 8),\n                ptrToUndefined8Var4 != (undefined8 *)0x0) {\n            charVar5 = processData_00112c1f(param1,param2,ptrToUndefined8Var4[1],0);\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptrToUndefined8Var4 + 0x14) == '\\0') {\n              charVar5 = FUN_0010ba08(param2,*ptrToUndefined8Var4,*(undefined4 *)(ptrToUndefined8Var4 + 3));\n            }\n            else {\n              charVar5 = FUN_0010a94e(param2,*ptrToUndefined8Var4,ptrToUndefined8Var4[3]);\n            }\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = uVar13 + 1;\n          }\n        }\n        uVar13 = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x10) != 0) {\n          while (ptrToUndefined8Var4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x10) + (ulong)uVar13 * 8),\n                ptrToUndefined8Var4 != (undefined8 *)0x0) {\n            charVar5 = processData_00112c1f(param1,param2,*ptrToUndefined8Var4,0);\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            charVar5 = FUN_0010aa53(param2,*(undefined4 *)(ptrToUndefined8Var4 + 1),\n                                 *(undefined *)((long)ptrToUndefined8Var4 + 0xc));\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = uVar13 + 1;\n          }\n        }\n        local_3c = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x18) != 0) {\n          while (ptrToUndefined8Var4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x18) + (ulong)local_3c * 8),\n                ptrToUndefined8Var4 != (undefined8 *)0x0) {\n            charVar5 = FUN_0010ab4d(param2,*ptrToUndefined8Var4);\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = 0;\n            while (ptrToUndefined8Var3 = *(undefined8 **)(ptrToUndefined8Var4[1] + (ulong)uVar13 * 8),\n                  ptrToUndefined8Var3 != (undefined8 *)0x0) {\n              if ((ptrToUndefined8Var3[4] != 0) &&\n                 (charVar5 = processData_00112c1f(param1,param2,ptrToUndefined8Var3[4],0), charVar5 == '\\0')) {\n                return 0;\n              }\n              charVar5 = processData_00112c1f(param1,param2,ptrToUndefined8Var3[1],0);\n              if (charVar5 == '\\0') {\n                return 0;\n              }\n              if (ptrToUndefined8Var3[3] == -1) {\n                charVar5 = FUN_0010adf2(param2,*ptrToUndefined8Var3,*(undefined4 *)(ptrToUndefined8Var3 + 2),\n                                     *(undefined *)((long)ptrToUndefined8Var3 + 0x14),\n                                     *(undefined *)((long)ptrToUndefined8Var3 + 0x15));\n              }\n              else {\n                charVar5 = FUN_0010add5(param2);\n              }\n              if (charVar5 == '\\0') {\n                return 0;\n              }\n              uVar13 = uVar13 + 1;\n            }\n            charVar5 = FUN_00109bbb(param2);\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            local_3c = local_3c + 1;\n          }\n        }\n      }\n      uVar7 = FUN_0010ae0e(param2);\n      return uVar7;\n    case 0xb:\n      ptrToUndefined8Var4 = *(undefined8 **)(param3 + 4);\n      if (ptrToUndefined8Var4 == (undefined8 *)0x0) {\n        uVar8 = 0;\n        uVar11 = 0;\n      }\n      else {\n        uVar8 = ptrToUndefined8Var4[1];\n        uVar11 = *ptrToUndefined8Var4;\n      }\n      uVar7 = FUN_0010e453(param2,uVar7,uVar11,uVar8);\n      return uVar7;\n    case 0xc:\n      charVar5 = processData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = FUN_0010a083(param2);\n      return uVar7;\n    case 0xd:\n      charVar5 = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 8) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (longVar2 = *(long *)(*(long *)(*(long *)(param3 + 4) + 8) + uVar12 * 8), longVar2 != 0) {\n          uVar12 = uVar12 + 1;\n          charVar5 = processData_00112c1f(param1,param2,longVar2,0);\n          if (charVar5 == '\\0') {\n            return 0;\n          }\n        }\n        uVar12 = uVar12 & 0xffffffff;\n      }\n      uVar7 = FUN_0010e5db(param2,uVar12,*(undefined *)(*(long *)(param3 + 4) + 0x10));\n      return uVar7;\n    case 0xe:\n      charVar5 = processData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = FUN_0010a0a0(param2);\n      return uVar7;\n    case 0xf:\n      charVar5 = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = FUN_0010a0e9(param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),\n                           *(undefined8 *)(*(long *)(param3 + 4) + 0x10));\n      return uVar7;\n    case 0x10:\n      charVar5 = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      charVar5 = processData_00112c1f(param1,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      longVar2 = *(long *)(param3 + 4);\n      uVar7 = FUN_0010a181(param2,*(undefined8 *)(longVar2 + 0x10),*(undefined8 *)(longVar2 + 0x18),\n                           *(undefined *)(longVar2 + 0x20));\n      return uVar7;\n    case 0x11:\n      charVar5 = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = FUN_0010a2b9(param2,*(undefined *)(*(long *)(param3 + 4) + 8));\n      return uVar7;\n    case 0x12:\n      charVar5 = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      charVar5 = processData_00112c1f(param1,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = FUN_0010a377(param2);\n      return uVar7;\n    case 0x13:\n      charVar5 = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 0x10) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (longVar2 = *(long *)(*(long *)(*(long *)(param3 + 4) + 0x10) + uVar12 * 8), longVar2 != 0)\n        {\n          uVar12 = uVar12 + 1;\n          charVar5 = processData_00112c1f(param1,param2,longVar2,0);\n          if (charVar5 == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param3 + 4) + 8) != 0) &&\n         (charVar5 = processData_00112c1f(param1,param2,*(long *)(*(long *)(param3 + 4) + 8),0),\n         charVar5 == '\\0')) {\n        return 0;\n      }\n      uVar7 = FUN_0010a424(param2,*(long *)(*(long *)(param3 + 4) + 8) != 0,uVar12 & 0xffffffff,\n                           *(undefined *)(*(long *)(param3 + 4) + 0x18));\n      return uVar7;\n    case 0x14:\n      charVar5 = processData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = FUNC_0010a0bd(param2);\n      return uVar7;\n    case 0x15:\n      charVar5 = processData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = FUN_0010a0d3(param2);\n      return uVar7;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bVar14 = *(int **)**(undefined8 **)(param3 + 4) == param3;\n  param3 = *(int **)**(undefined8 **)(param3 + 4);\n  if (bVar14) {\nLAB_00112dd6:\n    uVar7 = FUN_00109d97(param2);\n    return uVar7;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "FUN_0010a69a",
                "dcgettext",
                "FUN_0010bba1",
                "FUN_0010a0e9",
                "FUN_0010adf2",
                "FUN_0010a0d3",
                "fprintf",
                "FUN_00109d5c",
                "FUN_0010a083",
                "FUN_00109bbb",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010a0bd",
                "FUN_0010e453",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_00112b6e",
                "FUN_0010e5db",
                "FUN_0010b948",
                "FUN_00109e76",
                "FUN_0010ab4d",
                "FUN_0010a94e",
                "FUN_0010a0a0",
                "abort",
                "FUN_0010a181",
                "__assert_fail",
                "FUN_00109dfe",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_0010add5",
                "FUN_0010c7a0",
                "FUN_00112c1f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isPrivateDataCopy",
                "unaff_R15": "dataPointer",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char isPrivateDataCopy;\n  long dataPointer;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isPrivateDataCopy != '\\0') {\n    *(undefined4 *)(*(long *)(dataPointer + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "fileName",
                "param_2": "errorMessage",
                "in_RAX": "unusedVariable",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 fileName,undefined8 errorMessage)\n\n{\n  undefined8 unusedVariable;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,errorMessage,fileName,unusedVariable);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_00109a32",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "identify_file_architecture_00105828",
                "iVar1": "architecture",
                "uVar2": "machine",
                "uVar3": "inputFile",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 identifyFileArchitecture_00105828(void)\n\n{\n  int architecture;\n  undefined4 machine;\n  undefined8 inputFile;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    inputFile = FUN_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    FUN_00119ed0(errorMessage,inputFile);\n  }\n  else {\n    inputFile = bfd_get_mach();\n    machine = bfd_get_arch();\n    inputFile = bfd_printable_arch_mach(machine,inputFile);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    FUN_00119ed0(errorMessage,inputFile);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_printable_arch_mach",
                "bfd_get_mach",
                "FUN_001125fa",
                "FUN_00119ed0",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "identify_file_architecture_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00116b90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temporary_directory_0011a0e0",
                "__template": "templatePath",
                "pcVar1": "temporaryDirectoryPath"
            },
            "code": "\nchar * createTemporaryDirectory_0011a0e0(void)\n\n{\n  char *templatePath;\n  char *temporaryDirectoryPath;\n  \n  templatePath = (char *)FUN_00114cf0();\n  temporaryDirectoryPath = mkdtemp(templatePath);\n  if (temporaryDirectoryPath == (char *)0x0) {\n    free(templatePath);\n  }\n  return temporaryDirectoryPath;\n}\n\n",
            "called": [
                "FUN_001081e9",
                "FUN_00114cf0",
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temporary_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_execute_function_0010bba1",
                "param_1": "binary_hash",
                "param_2": "input_param",
                "lVar1": "hash_lookup_result",
                "uVar2": "function_result"
            },
            "code": "\nundefined8 lookup_and_execute_function_0010bba1(long binary_hash,undefined8 input_param)\n\n{\n  long hash_lookup_result;\n  undefined8 function_result;\n  \n  hash_lookup_result = bfd_hash_lookup(binary_hash + 0x1b8,input_param,0,0);\n  if ((hash_lookup_result != 0) && (0 < *(long *)(hash_lookup_result + 0x20))) {\n    function_result = FUN_00109cf4(binary_hash,*(long *)(hash_lookup_result + 0x20),*(undefined4 *)(hash_lookup_result + 0x28));\n    return function_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_execute_function_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "convert_param_to_string_0010e6a8",
                "param_1": "fileDescriptor",
                "param_2": "inputString",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "convertedString",
                "sVar3": "inputLength",
                "sVar4": "convertedLength",
                "__s_00": "concatenatedString",
                "lVar5": "lookupResult",
                "lVar8": "count",
                "uVar1": "returnCode",
                "uVar2": "errorCode",
                "uVar6": "errorMsg",
                "uVar7": "errMsgFmt",
                "uVar9": "returnValue",
                "auVar10": "resultStruct"
            },
            "code": "\nundefined  [16] convertParamToString_0010e6a8(long fileDescriptor,char *inputString,undefined8 param3,undefined8 param4)\n\n{\n  uint returnCode;\n  undefined4 errorCode;\n  char *convertedString;\n  size_t inputLength;\n  size_t convertedLength;\n  char *concatenatedString;\n  long lookupResult;\n  undefined8 errorMsg;\n  undefined8 errMsgFmt;\n  long count;\n  ulong returnValue;\n  undefined resultStruct [16];\n  \n  count = *(long *)(*(long *)(fileDescriptor + 0x60) + 0x10);\n  errorCode = *(undefined4 *)(*(long *)(fileDescriptor + 0x60) + 0x18);\n  convertedString = (char *)FUN_00109b2f();\n  inputLength = strlen(inputString);\n  convertedLength = strlen(convertedString);\n  concatenatedString = (char *)xmalloc(inputLength + 0x14 + convertedLength);\n  if (count < 1) {\n    count = *(long *)(fileDescriptor + 0x68);\n    *(long *)(fileDescriptor + 0x68) = count + 1;\n    sprintf(concatenatedString,\"%s:t%ld=%s\",inputString,count,convertedString);\n  }\n  else {\n    sprintf(concatenatedString,\"%s:t%s\",inputString,convertedString);\n  }\n  free(convertedString);\n  returnCode = FUN_0010e2f0(fileDescriptor,0x80,0,0,concatenatedString);\n  returnValue = (ulong)returnCode;\n  if ((char)returnCode != '\\0') {\n    free(concatenatedString);\n    lookupResult = bfd_hash_lookup(fileDescriptor + 0x1b8,inputString,1,0);\n    if (lookupResult != 0) {\n      *(long *)(lookupResult + 0x20) = count;\n      *(undefined4 *)(lookupResult + 0x28) = errorCode;\n      goto LAB_0010e7b3;\n    }\n    errorCode = bfd_get_error();\n    errorMsg = bfd_errmsg(errorCode);\n    errMsgFmt = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    FUN_00119ed0(errMsgFmt,errorMsg);\n  }\n  returnValue = 0;\nLAB_0010e7b3:\n  resultStruct._8_8_ = param4;\n  resultStruct._0_8_ = returnValue;\n  return resultStruct;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00119ed0",
                "sprintf",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "convert_param_to_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "combine_and_send_0010e7c2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "__s": "string1",
                "sVar1": "length1",
                "sVar2": "length2",
                "__s_00": "combinedString",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] combineAndSend_0010e7c2(undefined8 input1,char *input2,undefined8 input3,undefined8 input4)\n\n{\n  char *string1;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  undefined result [16];\n  \n  string1 = (char *)FUN_00109b2f();\n  length1 = strlen(input2);\n  length2 = strlen(string1);\n  combinedString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(combinedString,\"%s:T%s\",input2,string1);\n  free(string1);\n  result._0_4_ = FUN_0010e2f0(input1,0x80,0,0,combinedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(combinedString);\n  }\n  result._8_8_ = input4;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "combine_and_send_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "initialize_and_exit_00119dd0",
                "param_1": "configParam1",
                "param_2": "configParam2",
                "param_3": "configParam3",
                "param_4": "configParam4",
                "param_5": "configParam5",
                "param_6": "configParam6",
                "param_7": "configParam7",
                "param_8": "configParam8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "inputFlag",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "outputBuffer",
                "local_b0": "param2",
                "local_a8": "param3",
                "local_a0": "param4",
                "local_98": "param5",
                "local_90": "param6",
                "local_88": "configParam1Copy",
                "local_78": "configParam2Copy",
                "local_68": "configParam3Copy",
                "local_58": "configParam4Copy",
                "local_48": "configParam5Copy",
                "local_38": "configParam6Copy",
                "local_28": "configParam7Copy",
                "local_18": "configParam8Copy"
            },
            "code": "\nvoid initializeAndExit_00119dd0(undefined4 configParam1,undefined4 configParam2,undefined4 configParam3,undefined4 configParam4,\n                 undefined4 configParam5,undefined4 configParam6,undefined4 configParam7,undefined4 configParam8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char inputFlag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined outputBuffer [8];\n  undefined8 param2;\n  undefined8 param3;\n  undefined8 param4;\n  undefined8 param5;\n  undefined8 param6;\n  undefined4 configParam1Copy;\n  undefined4 configParam2Copy;\n  undefined4 configParam3Copy;\n  undefined4 configParam4Copy;\n  undefined4 configParam5Copy;\n  undefined4 configParam6Copy;\n  undefined4 configParam7Copy;\n  undefined4 configParam8Copy;\n  \n  if (inputFlag != '\\0') {\n    configParam1Copy = configParam1;\n    configParam2Copy = configParam2;\n    configParam3Copy = configParam3;\n    configParam4Copy = configParam4;\n    configParam5Copy = configParam5;\n    configParam6Copy = configParam6;\n    configParam7Copy = configParam7;\n    configParam8Copy = configParam8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  localBuffer = outputBuffer;\n  length = 0x30;\n  param2 = param2;\n  param3 = param3;\n  param4 = param4;\n  param5 = param5;\n  param6 = param6;\n  FUN_00119e70(param1,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00104920",
                "FUN_0010da0b",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_00116b90",
                "FUN_0010827b",
                "FUN_00115b70",
                "FUN_001083de",
                "FUN_00114190",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_001053b5",
                "FUN_00114dc7",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "initialize_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00107880",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdErrorCode",
                "unaff_RBP": "pointerArray",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int bfdErrorCode;\n  undefined8 *pointerArray;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    bfdErrorCode = bfd_get_error();\n    if (bfdErrorCode == 5) {\n      return returnAddress;\n    }\n  }\n  FUN_0011a110(*pointerArray);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "xexit",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "find_and_process_matches_00116852",
                "in_RCX": "inputArray",
                "unaff_RBP": "patternArray",
                "unaff_R13": "patternArrayEnd",
                "unaff_R14": "currentPattern",
                "unaff_R15": "maxPatternLength",
                "unaff_RBX": "maxPatternOffset",
                "param_10": "outputSize",
                "param_11": "inputArrayEnd",
                "param_12": "outputArray",
                "param_14": "inputSize",
                "sVar1": "patternSize",
                "uVar4": "currentIndex",
                "uVar5": "minPatternOffset",
                "uVar6": "maxPatternOffset",
                "lVar7": "loopCount",
                "uVar8": "currentPatternOffset",
                "puVar9": "outputArrayPtr",
                "cVar10": "tempChar",
                "__ptr": "dynamicMemory",
                "puVar11": "outputArrayPtr2",
                "puVar12": "currentPatternOffset2",
                "pcVar2": "patternMatchFunction",
                "iVar3": "memcmpResult",
                "bVar14": "tempBool"
            },
            "code": "\nulong findAndProcessMatches_00116852(void)\n\n{\n  size_t patternSize;\n  code *patternMatchFunction;\n  int memcmpResult;\n  uint currentIndex;\n  undefined *dynamicMemory;\n  size_t *inputArray;\n  ulong minPatternOffset;\n  ulong maxPatternOffset;\n  long loopCount;\n  ulong currentPatternOffset;\n  size_t maxPatternOffset;\n  size_t *patternArray;\n  undefined *outputArrayPtr;\n  char tempChar;\n  undefined *outputArrayPtr2;\n  ulong in_R10;\n  undefined *currentPatternOffset2;\n  size_t in_R11;\n  size_t *patternArrayEnd;\n  size_t *currentPattern;\n  size_t maxPatternLength;\n  size_t *ppatternSize3;\n  byte tempBool;\n  size_t param_7;\n  size_t param_9;\n  ulong outputSize;\n  size_t *inputArrayEnd;\n  undefined *outputArray;\n  long param_13;\n  size_t inputSize;\n  \n  tempBool = 0;\ncode_r0x00116852:\n  currentIndex = (int)in_R10 + 1;\n  if (0x10 < (int)in_R10) goto LAB_001167f5;\nLAB_00116863:\n  currentPattern = currentPattern + -9;\n  do {\n    if (patternArrayEnd <= currentPattern) {\n      patternSize = currentPattern[2];\n      if (patternSize == 0) goto LAB_00116863;\n      currentPatternOffset = (ulong)currentIndex;\n      if ((*currentPattern == *patternArray) &&\n         (memcmpResult = memcmp((void *)currentPattern[3],(void *)patternArray[3],*patternArray), memcmpResult == 0)) {\n        maxPatternOffset = currentPattern[7];\n        minPatternOffset = currentPattern[8];\n        in_R10 = currentPatternOffset & 0xffffffff;\n        if (maxPatternLength == maxPatternOffset) {\n          if (maxPatternOffset != minPatternOffset) goto LAB_001167a6;\n          patternArray[2] = 0;\n        }\n        else {\n          if (maxPatternLength < maxPatternOffset) {\n            if (minPatternOffset < maxPatternLength) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < minPatternOffset) || (maxPatternLength <= (minPatternOffset + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (maxPatternOffset < maxPatternLength) {\n              if ((0xfffffffffffffff0 < maxPatternOffset) ||\n                 (maxPatternOffset <= (maxPatternOffset + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (maxPatternOffset == minPatternOffset) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (maxPatternOffset <= minPatternOffset) {\n              patternArray[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (minPatternOffset < maxPatternLength) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (patternSize == 0x101)) goto code_r0x00116852;\n          if (minPatternOffset <= maxPatternOffset) {\n            minPatternOffset = maxPatternOffset;\n          }\n          if (maxPatternOffset < maxPatternLength) {\n            maxPatternLength = maxPatternOffset;\n          }\n          currentPattern[8] = minPatternOffset;\n          currentPattern[7] = maxPatternLength;\n          patternArray[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        currentPattern = patternArray;\n        patternArray = currentPattern + 9;\n        if (inputArray <= patternArray) {\n          qsort(inputArrayEnd,inputSize,0x48,FUN_0011a250);\n          dynamicMemory = (undefined *)xmalloc(outputSize * 2);\n          param_7 = 0;\n          currentPatternOffset2 = dynamicMemory;\n          for (ppatternSize3 = inputArrayEnd; ppatternSize3 < inputArray; ppatternSize3 = ppatternSize3 + 9) {\n            if (ppatternSize3[2] != 0) {\n              outputArrayPtr2 = currentPatternOffset2 + 4;\n              outputArrayPtr = currentPatternOffset2 + 0xc;\n              patternMatchFunction = *(code **)(*(long *)(param_13 + 8) + 0x50);\n              if ((ppatternSize3[7] == param_9) && (ppatternSize3[8] == param_7)) {\n                (*patternMatchFunction)(*ppatternSize3,currentPatternOffset2);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(0,outputArrayPtr2);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(ppatternSize3[2],currentPatternOffset2 + 8);\n                maxPatternOffset = ppatternSize3[6];\n                currentPatternOffset = *ppatternSize3;\n                currentPatternOffset2 = (undefined *)ppatternSize3[3];\n                outputArrayPtr2 = outputArrayPtr;\n                for (minPatternOffset = currentPatternOffset; minPatternOffset != 0; minPatternOffset = minPatternOffset - 1) {\n                  *outputArrayPtr2 = *currentPatternOffset2;\n                  currentPatternOffset2 = currentPatternOffset2 + (ulong)tempBool * -2 + 1;\n                  outputArrayPtr2 = outputArrayPtr2 + (ulong)tempBool * -2 + 1;\n                }\n                if (currentPatternOffset < maxPatternOffset) {\n                  for (loopCount = maxPatternOffset - currentPatternOffset; loopCount != 0; loopCount = loopCount + -1) {\n                    *outputArrayPtr2 = 0;\n                    outputArrayPtr2 = outputArrayPtr2 + (ulong)tempBool * -2 + 1;\n                  }\n                }\n                currentPatternOffset2 = outputArrayPtr + maxPatternOffset;\n              }\n              else {\n                (*patternMatchFunction)();\n                if (*(int *)(*(long *)(param_13 + 8) + 8) == 5) {\n                  tempChar = (*(char *)(*(long *)(param_13 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  tempChar = '\\b';\n                }\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(tempChar,outputArrayPtr2);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(ppatternSize3[2],currentPatternOffset2 + 8);\n                currentPatternOffset = *ppatternSize3;\n                currentPatternOffset2 = (undefined *)ppatternSize3[3];\n                outputArrayPtr2 = outputArrayPtr;\n                for (maxPatternOffset = currentPatternOffset; maxPatternOffset != 0; maxPatternOffset = maxPatternOffset - 1) {\n                  *outputArrayPtr2 = *currentPatternOffset2;\n                  currentPatternOffset2 = currentPatternOffset2 + (ulong)tempBool * -2 + 1;\n                  outputArrayPtr2 = outputArrayPtr2 + (ulong)tempBool * -2 + 1;\n                }\n                maxPatternOffset = ppatternSize3[6];\n                if (currentPatternOffset < maxPatternOffset) {\n                  for (loopCount = maxPatternOffset - currentPatternOffset; loopCount != 0; loopCount = loopCount + -1) {\n                    *outputArrayPtr2 = 0;\n                    outputArrayPtr2 = outputArrayPtr2 + (ulong)tempBool * -2 + 1;\n                  }\n                }\n                loopCount = *(long *)(param_13 + 8);\n                outputArrayPtr = outputArrayPtr + maxPatternOffset;\n                currentPatternOffset2 = outputArrayPtr + 8;\n                if ((*(int *)(loopCount + 8) == 5) &&\n                   (*(char *)(*(long *)(param_13 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopCount + 0x38))(ppatternSize3[7],outputArrayPtr);\n                  (**(code **)(*(long *)(param_13 + 8) + 0x38))(ppatternSize3[8],currentPatternOffset2);\n                  currentPatternOffset2 = outputArrayPtr + 0x10;\n                }\n                else {\n                  (**(code **)(loopCount + 0x50))(ppatternSize3[7],outputArrayPtr);\n                  (**(code **)(*(long *)(param_13 + 8) + 0x50))(ppatternSize3[8],outputArrayPtr + 4);\n                }\n                param_9 = ppatternSize3[7];\n                param_7 = ppatternSize3[8];\n              }\n            }\n          }\n          maxPatternOffset = (long)currentPatternOffset2 - (long)dynamicMemory;\n          currentPatternOffset = maxPatternOffset;\n          currentPatternOffset2 = dynamicMemory;\n          if (maxPatternOffset < outputSize) {\n            for (; outputSize = maxPatternOffset, currentPatternOffset != 0; currentPatternOffset = currentPatternOffset - 1) {\n              *outputArray = *currentPatternOffset2;\n              currentPatternOffset2 = currentPatternOffset2 + (ulong)tempBool * -2 + 1;\n              outputArray = outputArray + (ulong)tempBool * -2 + 1;\n            }\n          }\n          free(dynamicMemory);\n          free(inputArrayEnd);\n          return outputSize;\n        }\n        in_R11 = currentPattern[0xb];\n      } while (in_R11 == 0);\n      maxPatternLength = currentPattern[0x10];\n      maxPatternOffset = currentPattern[0x11];\n      currentIndex = 0;\n      if (maxPatternLength != maxPatternOffset) break;\n      currentPattern[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116852",
                "memcmp",
                "xmalloc",
                "qsort",
                "free",
                "FUN_0011a250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "find_and_process_matches_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_pointer_00113d3a",
                "param_1": "pointer",
                "lVar1": "newPointer"
            },
            "code": "\nlong initializePointer_00113d3a(long pointer)\n\n{\n  long newPointer;\n  \n  if (pointer != 0) {\n    newPointer = *(long *)(pointer + 8);\n    if (newPointer == 0) {\n      newPointer = FUN_00112904(0xc,0);\n      if (newPointer == 0) {\n        newPointer = 0;\n      }\n      else {\n        *(long *)(newPointer + 0x10) = pointer;\n        *(long *)(pointer + 8) = newPointer;\n      }\n    }\n    return newPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010bba1",
                "FUN_0010e2f0",
                "FUN_0010e6a8"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "execute_function_0010a0d3",
                "param_1": "input"
            },
            "code": "\nvoid execute_function_0010a0d3(long input)\n\n{\n  FUN_00109ed3(input,0x42,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_function_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "create_output_section_00115530",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "index",
                "pcVar2": "strPtr",
                "ppcVar3": "ptrPtrPtr",
                "cVar4": "result",
                "iVar5": "cmpResult",
                "uVar6": "tmpVar",
                "sVar7": "strLength1",
                "sVar8": "strLength2",
                "lVar9": "tmp",
                "pcVar10": "strPtr1",
                "pcVar11": "strPtr2",
                "pcVar12": "strPtr3",
                "uVar13": "flags",
                "bVar14": "flag",
                "local_50": "errorMessage",
                "local_48": "strPtr1_2",
                "local_40": "sizeBuffer"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid createOutputSection_00115530(long param1,char **param2,long param3)\n\n{\n  long index;\n  char *strPtr;\n  char **ptrPtrPtr;\n  char result;\n  int cmpResult;\n  uint tmpVar;\n  size_t strLength1;\n  size_t strLength2;\n  long tmp;\n  char *strPtr1;\n  char *strPtr2;\n  char *strPtr3;\n  uint flags;\n  bool flag;\n  long errorMessage;\n  char *strPtr1_2;\n  long sizeBuffer [2];\n  \n  result = FUN_001159d0(param2);\n  if (result != '\\0') {\n    return;\n  }\n  strPtr1 = *param2;\n  flags = *(uint *)((long)param2 + 0x24);\n  strPtr1_2 = strPtr1;\n  ptrPtrPtr = DAT_001278d8;\n  if (*(int *)(*(long *)(param1 + 8) + 8) != *(int *)(*(long *)(param3 + 8) + 8)) {\n    flags = flags & *(uint *)(*(long *)(param1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param3 + 8) + 0x18);\n  }\n  for (; ptrPtrPtr != (char **)0x0; ptrPtrPtr = (char **)ptrPtrPtr[3]) {\n    cmpResult = strcmp(*ptrPtrPtr,strPtr1);\n    if (cmpResult == 0) {\n      if (*(uint *)(ptrPtrPtr + 2) != 0xffffffff) {\n        flags = *(uint *)(ptrPtrPtr + 2);\n      }\n      if (strPtr1 != ptrPtrPtr[1]) {\n        strPtr1_2 = ptrPtrPtr[1];\n        flags = FUN_00115f30(flags,param3);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (strPtr1 = DAT_001278f8, (*(byte *)((long)param2 + 0x24) & 1) != 0)) ||\n     (strPtr1 = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    strLength1 = strlen(strPtr1);\n    strLength2 = strlen(strPtr1_2);\n    strPtr3 = (char *)xmalloc(strLength1 + 1 + strLength2);\n    strPtr1 = strcpy(strPtr3,strPtr1);\n    strPtr1_2 = strcat(strPtr1,strPtr1_2);\n  }\n  tmp = FUN_00114190(*param2,0,0x80);\n  flag = false;\n  if (tmp == 0) {\n    if ((DAT_00127a2c == 4) && ((flags & 0x2000001) != 0)) {\n      cmpResult = *(int *)(*(long *)(param1 + 8) + 8);\n      if (cmpResult == 5) {\n        if (*(int *)(param2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n            flag = (flags & 0x2000000) == 0;\n            tmpVar = ~((-(uint)((flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param2 + 0x24) = *(uint *)((long)param2 + 0x24) & tmpVar;\n          }\n          else {\n            tmpVar = 0xfdfffefd;\n          }\n          flags = flags & tmpVar;\n        }\n      }\n      else if ((cmpResult != 2) || (cmpResult = strcmp(*param2,\".buildid\"), cmpResult != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    flags = FUN_00115f30(flags & 0x104 | *(uint *)(tmp + 0x28),param3,*param2);\n  }\n  result = bfd_convert_section_setup(param1,param2,param3,&strPtr1_2,sizeBuffer);\n  if (result == '\\0') {\n    strPtr1 = (char *)0x0;\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  strPtr1 = (char *)bfd_make_section_anyway_with_flags(param3,strPtr1_2,flags);\n  if (strPtr1 == (char *)0x0) {\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      sizeBuffer[0] = 0;\n      goto LAB_001158e7;\n    }\n    result = bfd_set_section_size(strPtr1,sizeBuffer[0]);\n    if (result == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  else {\n    sizeBuffer[0] = ((((long)DAT_00127a1c - 1U) + sizeBuffer[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    result = bfd_set_section_size(strPtr1);\n    if (result == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  errorMessage = 0;\n  strPtr3 = param2[6];\n  tmp = FUN_00114190(*param2,0,0x18);\n  if (tmp == 0) {\n    strPtr1[0x28] = strPtr1[0x28] | 1;\n    strPtr2 = *param2;\n    strPtr3 = strPtr3 + _DAT_00127990;\n    *(char **)(strPtr1 + 0x30) = strPtr3;\n    *(char **)(strPtr1 + 0x38) = strPtr3;\n    strPtr3 = param2[7];\n    tmp = FUN_00114190(strPtr2,0,0x60);\n    if (tmp == 0) goto LAB_00115695;\nLAB_00115860:\n    strPtr2 = *(char **)(tmp + 0x20);\n    if ((*(byte *)(tmp + 0x14) & 0x40) != 0) {\n      strPtr2 = strPtr2 + (long)strPtr3;\n    }\n    *(char **)(strPtr1 + 0x38) = strPtr2;\n    tmp = FUN_00114190(*param2,0,0x200);\n    if (tmp != 0) goto LAB_00115889;\nLAB_001156b8:\n    flags = *(uint *)((long)param2 + 0x7c);\n    if (flags < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(strPtr1 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    strPtr1[0x28] = strPtr1[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = strPtr1;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    result = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,strPtr1);\n    if (result == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  else {\n    strPtr2 = *(char **)(tmp + 0x18);\n    if ((*(byte *)(tmp + 0x14) & 8) == 0) {\n      strPtr2 = strPtr2 + (long)strPtr3;\n    }\n    strPtr1[0x28] = strPtr1[0x28] | 1;\n    strPtr = *param2;\n    *(char **)(strPtr1 + 0x30) = strPtr2;\n    *(char **)(strPtr1 + 0x38) = strPtr2;\n    strPtr3 = param2[7];\n    tmp = FUN_00114190(strPtr,0,0x60);\n    if (tmp != 0) goto LAB_00115860;\nLAB_00115695:\n    strPtr2 = *param2;\n    *(char **)(strPtr1 + 0x38) = strPtr3 + _DAT_00127990;\n    tmp = FUN_00114190(strPtr2,0,0x200);\n    if (tmp == 0) goto LAB_001156b8;\nLAB_00115889:\n    flags = *(uint *)(tmp + 0x2c);\n    if (0x3e < flags) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(strPtr1 + 0x7c) = flags;\n    *(undefined4 *)(strPtr1 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    strPtr1[0x28] = strPtr1[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = strPtr1;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    strPtr3 = param2[0x1a];\n    tmp = FUN_00115d00(strPtr3,param2[0x1c]);\n    if ((tmp == 0) ||\n       (index = *(long *)(param1 + 8), *(uint *)(tmp + 0x18) = *(uint *)(tmp + 0x18) | 0x20,\n       *(int *)(index + 8) != 5)) goto LAB_00115700;\n    *(long *)(strPtr3 + 0xb0) = tmp;\n    result = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,strPtr1);\n    if (result == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  if (flag) {\n    *(undefined4 *)(*(long *)(strPtr1 + 0xd0) + 4) = 8;\n  }\n  if (errorMessage == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  FUN_001126c0(0,param3,strPtr1,errorMessage);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "bfd_convert_section_setup",
                "strcat",
                "FUN_00115f30",
                "bfd_set_section_size",
                "xmalloc",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "strlen",
                "FUN_001159d0",
                "FUN_00114190",
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "FUNC_0010a0bd"
            },
            "code": "\nvoid FUNC_0010a0bd(long param_1)\n\n{\n  FUN_00109ed3(param_1,0x6b,*(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "FUNC_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "process_input_00113e5e",
                "param_1": "output",
                "param_2": "input",
                "param_3": "length",
                "cVar1": "result"
            },
            "code": "\nundefined8 process_input_00113e5e(undefined8 output,char **input,long length)\n\n{\n  char result;\n  char *local_20 [2];\n  \n  local_20[0] = *input;\n  *input = (char *)(length + 2);\n  if ((((long)(char *)(length + 2) - (long)local_20[0] < 5) ||\n      (result = FUN_00113fb0(local_20[0],\"type\"), result == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  result = FUN_0010c95e(output,local_20,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_input_00113e5e"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "data_ptr",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "ptr1",
                "pcVar2": "ptr2",
                "bVar3": "byteVal",
                "pcVar4": "ptr3",
                "__s": "ptr4",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result",
                "cVar10": "charVar1",
                "cVar11": "charVar2",
                "local_52": "localByte"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long data_ptr,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr1;\n  char *ptr2;\n  byte byteVal;\n  char *ptr3;\n  char *ptr4;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char charVar1;\n  char charVar2;\n  byte localByte;\n  \n  ptr4 = (char *)0x0;\n  localByte = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  ptr3 = (char *)FUN_00109b2f();\n  if (flag4 != '\\0') {\n    byteVal = 1;\n    if (localByte == 0) {\n      byteVal = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    }\n    localByte = byteVal & 1;\n    ptr4 = (char *)FUN_00109b2f(data_ptr);\n  }\n  ptr1 = *(long *)(data_ptr + 0x60);\n  if ((ptr1 == 0) || (ptr2 = *(char **)(ptr1 + 0x30), ptr2 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVar1 = '?';\n    if (flag1 == '\\0') {\n      charVar1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(ptr2);\n    len2 = strlen(ptr3);\n    len3 = strlen(string1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(ptr4);\n    }\n    result = xrealloc(ptr2,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(ptr1 + 0x30) = result;\n    ptr2 = *(char **)(*(long *)(data_ptr + 0x60) + 0x30);\n    len1 = strlen(ptr2);\n    sprintf(ptr2 + len1,\"%s:%s;%c%c%c\",ptr3,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)charVar2,(ulong)(uint)(int)charVar1,len1);\n    free(ptr3);\n    if (flag4 != '\\0') {\n      ptr3 = *(char **)(*(long *)(data_ptr + 0x60) + 0x30);\n      len1 = strlen(ptr3);\n      sprintf(ptr3 + len1,\"%ld;%s;\",value,ptr4);\n      free(ptr4);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010adf2",
                "FUN_0010add5"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_00115f30",
                "param_1": "inputFlag",
                "param_2": "parameters",
                "param_3": "outputFormat",
                "uVar1": "localVar1",
                "uVar2": "localVar2"
            },
            "code": "\nuint removeShareFlag_00115f30(uint inputFlag,undefined8 *parameters,undefined8 outputFormat)\n\n{\n  undefined8 localVar1;\n  undefined8 localVar2;\n  \n  if (((inputFlag & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    localVar1 = *parameters;\n    inputFlag = inputFlag & 0xf7ffffff;\n    localVar2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(localVar2,localVar1,outputFormat);\n  }\n  return inputFlag;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "remove_share_flag_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputArray",
                "puVar1": "ptrToInputArrayPlus4",
                "piVar2": "ptrToValueInOuterArray"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputArray)\n\n{\n  undefined8 *ptrToInputArrayPlus4;\n  int *ptrToValueInOuterArray;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    ptrToInputArrayPlus4 = (undefined8 *)(inputArray + 4);\n    ptrToValueInOuterArray = **(int ***)(undefined8 *)*ptrToInputArrayPlus4;\n  } while ((inputArray != ptrToValueInOuterArray) && (inputArray = ptrToValueInOuterArray, ptrToValueInOuterArray != (int *)0x0));\n  return ((undefined8 *)*ptrToInputArrayPlus4)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_001129f4",
                "FUN_00112b6e",
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "check_bitwise_inversion_001082b3",
                "uVar1": "result"
            },
            "code": "\nuint check_bitwise_inversion_001082b3(void)\n\n{\n  uint result;\n  \n  result = FUN_00113ede();\n  return result ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_bitwise_inversion_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "improved_extract_and_copy_archive_00114690",
                "param_1": "input_file",
                "param_2": "output_file",
                "param_3": "file_descriptor",
                "param_4": "stat_buffer",
                "param_5": "file_format",
                "param_6": "temp_dir",
                "param_7": "debug_symbol",
                "bVar1": "byte_var",
                "cVar2": "char_var",
                "cVar3": "char_var_2",
                "iVar4": "int_var",
                "iVar5": "int_var_2",
                "ppcVar6": "string_ptr_ptr",
                "pvVar7": "void_ptr",
                "lVar8": "long_var",
                "puVar9": "undefined8_ptr",
                "piVar10": "int_ptr",
                "uVar11": "undefined8_var",
                "uVar12": "undefined8_var_2",
                "lVar13": "long_var_2",
                "puVar14": "bfd_ptr",
                "pcVar15": "temp_dir_path",
                "ppcVar16": "bfd_file_ptr_ptr",
                "pcVar17": "file_name",
                "pcVar18": "file_name_concat",
                "__ptr": "ptr_ptr",
                "ppcVar19": "string_ptr_ptr_2",
                "pcVar20": "close_func",
                "lVar21": "long_var_3",
                "uVar22": "uint_var",
                "pcVar23": "string_var",
                "psVar24": "stat_ptr",
                "bVar25": "bool_var",
                "bVar26": "byte_var_2",
                "local_1a0": "output_file_ptr",
                "local_198": "long_ptr",
                "local_158": "stat_buffer_2",
                "local_c8": "void_ptr_array",
                "uStack_b0": "uint_var_2",
                "lStack_98": "long_var_4"
            },
            "code": "\n\n\nvoid improved_extract_and_copy_archive_00114690(undefined8 input_file,undefined8 output_file,int file_descriptor,undefined8 stat_buffer,\n                 undefined8 file_format,long temp_dir,undefined8 debug_symbol)\n\n{\n  byte byte_var;\n  char char_var;\n  char char_var_2;\n  int int_var;\n  int int_var_2;\n  char **string_ptr_ptr;\n  void *void_ptr;\n  long long_var;\n  undefined8 *undefined8_ptr;\n  int *int_ptr;\n  undefined8 undefined8_var;\n  undefined8 undefined8_var_2;\n  long long_var_2;\n  undefined8 *bfd_ptr;\n  char *temp_dir_path;\n  char **bfd_file_ptr_ptr;\n  char *file_name;\n  char *file_name_concat;\n  undefined8 *ptr_ptr;\n  char **string_ptr_ptr_2;\n  code *close_func;\n  long long_var_3;\n  uint uint_var;\n  char *string_var;\n  stat *stat_ptr;\n  bool bool_var;\n  byte byte_var_2;\n  undefined8 *output_file_ptr;\n  long *long_ptr;\n  stat stat_buffer_2;\n  void *void_ptr_array [3];\n  uint uint_var_2;\n  long long_var_4;\n  \n  byte_var_2 = 0;\n  long_var_2 = FUN_00113f50();\n  if (long_var_2 < 1) {\n    if (long_var_2 == 0) {\n      undefined8_var_2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      FUN_00119ed0(undefined8_var_2,input_file);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  bfd_ptr = (undefined8 *)bfd_openr(input_file,file_format);\n  if ((bfd_ptr == (undefined8 *)0x0) || (int_var_2 = bfd_stat(bfd_ptr,stat_buffer), int_var_2 != 0)) {\n    FUN_001126c0(input_file,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfd_ptr + 0x44) = *(uint *)((long)bfd_ptr + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfd_ptr + 0x44) = *(uint *)((long)bfd_ptr + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfd_ptr + 0x44) = *(uint *)((long)bfd_ptr + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfd_ptr + 0x44) = *(uint *)((long)bfd_ptr + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)bfd_ptr + 0x44) = *(uint *)((long)bfd_ptr + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)bfd_ptr + 0x44) = *(uint *)((long)bfd_ptr + 0x44) | 0x40000;\n  }\n  char_var = bfd_check_format(bfd_ptr,2);\n  if (char_var != '\\0') {\n    if (temp_dir == 0) {\n      char_var = '\\0';\n      temp_dir = *(long *)bfd_ptr[1];\n    }\n    if (file_descriptor < 0) {\n      output_file_ptr = (undefined8 *)bfd_openw(output_file,temp_dir);\n    }\n    else {\n      output_file_ptr = (undefined8 *)bfd_fdopenw(output_file,temp_dir,file_descriptor);\n    }\n    if (output_file_ptr != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        undefined8_var_2 = *bfd_ptr;\n        undefined8_var = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        FUN_00119ed0(undefined8_var,undefined8_var_2);\n        DAT_00127a10 = 0;\n      }\n      FUN_00114d50(output_file_ptr,bfd_ptr,DAT_001264b4);\n      long_ptr = output_file_ptr + 0x1f;\n      if ((*(byte *)((long)bfd_ptr + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        undefined8_var_2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        FUN_001126c0(0,bfd_ptr,0,undefined8_var_2);\n        return;\n      }\n      temp_dir_path = (char *)FUN_0011a0e0(*output_file_ptr);\n      if (temp_dir_path == (char *)0x0) {\n        int_ptr = __errno_location();\n        temp_dir_path = strerror(*int_ptr);\n        undefined8_var_2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        FUN_00119dd0(undefined8_var_2,temp_dir_path);\n      }\n      if (DAT_00127a2c == 7) {\n        byte_var = *(byte *)((long)bfd_ptr + 0x49);\n        uint_var = 0;\n      }\n      else {\n        byte_var = *(byte *)((long)bfd_ptr + 0x49);\n        uint_var = byte_var >> 3 & 1;\n      }\n      bool_var = _DAT_001264b0 != 0;\n      *(byte *)((long)output_file_ptr + 0x49) =\n           byte_var & 0x10 | (byte)(uint_var << 3) | *(byte *)((long)output_file_ptr + 0x49) & 0xe7;\n      if (bool_var) {\n        *(uint *)((long)output_file_ptr + 0x44) = *(uint *)((long)output_file_ptr + 0x44) | 0x2000;\n      }\n      ptr_ptr = (undefined8 *)0x0;\n      bfd_file_ptr_ptr = (char **)bfd_openr_next_archived_file(bfd_ptr,0);\n      char_var_2 = bfd_set_format(output_file_ptr,*(byte *)(bfd_ptr + 9) & 7);\n      if (char_var_2 == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(0,output_file_ptr,0,0);\n        FUN_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (bfd_file_ptr_ptr != (char **)0x0))) {\n        file_name_concat = *bfd_file_ptr_ptr;\n        file_name = file_name_concat;\n        if (*file_name_concat == '/') {\nLAB_0010527d:\n          undefined8_var_2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          FUN_00119ed0(undefined8_var_2,file_name_concat);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*file_name != '\\0') {\n          string_var = file_name;\n          if ((*file_name == '.') && (string_var = file_name + 1, file_name[1] == '.')) {\n            string_var = file_name + 2;\n            if ((file_name[2] == '\\0') || (file_name[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*string_var != '\\0' && (*string_var != '/')); string_var = string_var + 1) {\n          }\n          file_name = string_var;\n          if (*string_var == '/') {\n            FUN_001052a2();\n            return;\n          }\n        }\n        file_name_concat = (char *)concat(temp_dir_path,&DAT_0011b47d);\n        int_var_2 = stat(file_name_concat,&stat_buffer_2);\n        undefined8_ptr = ptr_ptr;\n        if (-1 < int_var_2) {\n          long_var_2 = FUN_0011a0e0(file_name_concat);\n          free(file_name_concat);\n          if (long_var_2 == 0) {\n            int_ptr = __errno_location();\n            file_name_concat = strerror(*int_ptr);\n            undefined8_var_2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            FUN_00119ed0(undefined8_var_2,file_name_concat);\n            goto LAB_00104e93;\n          }\n          undefined8_ptr = (undefined8 *)xmalloc(0x18);\n          file_name_concat = *bfd_file_ptr_ptr;\n          *undefined8_ptr = ptr_ptr;\n          undefined8_ptr[2] = 0;\n          undefined8_ptr[1] = long_var_2;\n          file_name_concat = (char *)concat(long_var_2,&DAT_0011b47d,file_name_concat);\n        }\n        int_var_2 = 0;\n        if (DAT_001279cb != '\\0') {\n          stat_ptr = &stat_buffer_2;\n          for (long_var_2 = 0x24; long_var_2 != 0; long_var_2 = long_var_2 + -1) {\n            *(undefined4 *)&stat_ptr->st_dev = 0;\n            stat_ptr = (stat *)((long)stat_ptr + (ulong)byte_var_2 * -8 + 4);\n          }\n          string_ptr_ptr_2 = (char **)bfd_file_ptr_ptr[0x1d];\n          if ((char **)bfd_file_ptr_ptr[0x1d] == (char **)0x0) {\n            string_ptr_ptr_2 = bfd_file_ptr_ptr;\n          }\n          int_var_2 = (**(code **)(string_ptr_ptr_2[1] + 0x1e8))(bfd_file_ptr_ptr,&stat_buffer_2);\n          if (int_var_2 != 0) {\n            file_name = *bfd_file_ptr_ptr;\n            undefined8_var_2 = dcgettext(0,\"internal stat error on %s\",5);\n            FUN_00119ed0(undefined8_var_2,file_name);\n          }\n        }\n        ptr_ptr = (undefined8 *)xmalloc(0x18);\n        ptr_ptr[1] = file_name_concat;\n        *ptr_ptr = undefined8_ptr;\n        ptr_ptr[2] = 0;\n        char_var_2 = bfd_check_format(bfd_file_ptr_ptr,1);\n        if (char_var_2 == '\\0') {\n          undefined8_var_2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          FUN_001126c0(0,bfd_file_ptr_ptr,0,undefined8_var_2);\n          string_ptr_ptr_2 = (char **)bfd_openw(file_name_concat,temp_dir);\n          if (string_ptr_ptr_2 == (char **)0x0) {\nLAB_00104e80:\n            FUN_001126c0(file_name_concat,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          string_ptr_ptr = (char **)bfd_file_ptr_ptr[0x1d];\n          if ((char **)bfd_file_ptr_ptr[0x1d] == (char **)0x0) {\n            string_ptr_ptr = bfd_file_ptr_ptr;\n          }\n          int_var = (**(code **)(string_ptr_ptr[1] + 0x1e8))(bfd_file_ptr_ptr);\n          long_var_2 = long_var_4;\n          if (int_var == 0) {\n            if (long_var_4 < 0) {\n              FUN_001125fa(bfd_file_ptr_ptr);\n              undefined8_var_2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              FUN_00119ed0(undefined8_var_2);\n            }\n            else {\n              int_var = bfd_seek(bfd_file_ptr_ptr,0,0);\n              if (int_var == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  file_name = *string_ptr_ptr_2;\n                  undefined8_var_2 = FUN_001125fa(bfd_file_ptr_ptr);\n                  string_var = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(string_var,undefined8_var_2,file_name);\n                }\n                void_ptr = (void *)xmalloc(0x2000);\n                for (; long_var_2 != 0; long_var_2 = long_var_2 - long_var_3) {\n                  long_var_3 = 0x2000;\n                  if (long_var_2 < 0x2001) {\n                    long_var_3 = long_var_2;\n                  }\n                  long_var = bfd_bread(void_ptr,long_var_3,bfd_file_ptr_ptr);\n                  string_ptr_ptr = bfd_file_ptr_ptr;\n                  if ((long_var_3 != long_var) ||\n                     (long_var = bfd_bwrite(void_ptr,long_var_3,string_ptr_ptr_2), string_ptr_ptr = string_ptr_ptr_2,\n                     long_var_3 != long_var)) {\n                    FUN_001126c0(0,string_ptr_ptr,0,0);\n                    free(void_ptr);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*string_ptr_ptr_2,uint_var_2 | 0x100);\n                free(void_ptr);\n                char_var_2 = bfd_close_all_done(string_ptr_ptr_2);\n                if (char_var_2 == '\\0') {\n                  FUN_001126c0(file_name_concat,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefined8_var_2 = FUN_001125fa(bfd_file_ptr_ptr);\n              FUN_0011a110(undefined8_var_2);\n            }\n          }\n          else {\n            FUN_001126c0(0,bfd_file_ptr_ptr,0,0);\n          }\nLAB_00104f00:\n          char_var_2 = bfd_close_all_done(string_ptr_ptr_2);\n          if (char_var_2 == '\\0') {\n            FUN_001126c0(file_name_concat,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(file_name_concat);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (char_var == '\\0') {\n            string_ptr_ptr_2 = (char **)bfd_openw(file_name_concat,*(undefined8 *)bfd_file_ptr_ptr[1]);\n          }\n          else {\n            string_ptr_ptr_2 = (char **)bfd_openw(file_name_concat,temp_dir);\n          }\n          if (string_ptr_ptr_2 == (char **)0x0) goto LAB_00104e80;\n          char_var_2 = FUNC_00114e50(bfd_file_ptr_ptr,string_ptr_ptr_2,debug_symbol);\n          if (char_var_2 == '\\0') {\n            int_var = bfd_get_arch(bfd_file_ptr_ptr);\n            if (int_var == 0) goto LAB_00104d75;\n            char_var_2 = bfd_close_all_done(string_ptr_ptr_2);\n            if (char_var_2 == '\\0') {\n              FUN_001126c0(file_name_concat,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          char_var_2 = bfd_close(string_ptr_ptr_2);\n          if (char_var_2 == '\\0') {\n            FUN_001126c0(file_name_concat,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (int_var_2 == 0)) {\n            FUN_0011a350(file_name_concat,&stat_buffer_2);\n          }\n          long_var_2 = bfd_openr(file_name_concat,temp_dir);\n          ptr_ptr[2] = long_var_2;\n          *long_ptr = long_var_2;\n          long_ptr = (long *)(long_var_2 + 0xf0);\n          string_ptr_ptr_2 = (char **)bfd_openr_next_archived_file(bfd_ptr);\n          bfd_close(bfd_file_ptr_ptr);\n          bfd_file_ptr_ptr = string_ptr_ptr_2;\n        }\n      }\n      *long_ptr = 0;\n      void_ptr = (void *)xstrdup(*output_file_ptr);\n      if (DAT_00127a20 == 0) {\n        close_func = bfd_close;\n      }\n      else {\n        close_func = bfd_close_all_done;\n      }\n      char_var = (*close_func)(output_file_ptr);\n      if (char_var == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(void_ptr,0,0,0);\n      }\n      free(void_ptr);\n      void_ptr = (void *)xstrdup(*bfd_ptr);\n      char_var = bfd_close(bfd_ptr);\n      if (char_var == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(void_ptr,0,0,0);\n      }\n      free(void_ptr);\nLAB_00114b4b:\n      while (ptr_ptr != (undefined8 *)0x0) {\n        if (ptr_ptr[2] == 0) {\n          rmdir((char *)ptr_ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)ptr_ptr[1]);\n        }\n        free((void *)ptr_ptr[1]);\n        bfd_ptr = (undefined8 *)*ptr_ptr;\n        free(ptr_ptr);\n        ptr_ptr = bfd_ptr;\n      }\n      rmdir(temp_dir_path);\n      free(temp_dir_path);\n      return;\n    }\nLAB_00105231:\n    close(file_descriptor);\n    FUN_001126c0(output_file,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  char_var = bfd_check_format_matches(bfd_ptr,1,void_ptr_array);\n  if (char_var == '\\0') {\n    int_var_2 = bfd_get_error();\n    char_var = bfd_check_format_matches(bfd_ptr,3,&stat_buffer_2);\n    if (char_var == '\\0') {\n      int_var = bfd_get_error();\n      if (int_var_2 != int_var) {\n        bfd_set_error(int_var_2);\n      }\n      FUN_001126c0(input_file,0,0,0);\n      if (int_var_2 == 0xd) {\n        FUN_0011256b(void_ptr_array[0]);\n      }\n      if (int_var != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      FUN_0011256b(stat_buffer_2.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (int_var_2 == 0xd) {\n      free(void_ptr_array[0]);\n    }\n  }\n  if (temp_dir == 0) {\n    temp_dir = *(long *)bfd_ptr[1];\n  }\n  if (file_descriptor < 0) {\n    long_var_2 = bfd_openw(output_file,temp_dir);\n  }\n  else {\n    long_var_2 = bfd_fdopenw(output_file,temp_dir,file_descriptor);\n  }\n  if (long_var_2 == 0) goto LAB_00105231;\n  FUN_00114d50(long_var_2,bfd_ptr,DAT_001264b4);\n  char_var = FUNC_00114e50(bfd_ptr,long_var_2,debug_symbol);\n  if (char_var == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    char_var = bfd_close(long_var_2);\n    goto LAB_001147d5;\n  }\n  char_var = bfd_close_all_done(long_var_2);\nLAB_001147d5:\n  if (char_var != '\\x01') {\n    DAT_00127a20 = 1;\n    FUN_001126c0(output_file,0,0,0);\n    return;\n  }\n  char_var = bfd_close(bfd_ptr);\n  if (char_var == '\\0') {\n    DAT_00127a20 = 1;\n    FUN_001126c0(input_file,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "FUN_00119ed0",
                "FUN_00114e50",
                "bfd_check_format_matches",
                "bfd_check_format",
                "bfd_set_format",
                "free",
                "FUN_00114d50",
                "bfd_close",
                "bfd_close_all_done",
                "bfd_get_error",
                "bfd_fdopenw",
                "FUN_00104d25",
                "FUN_00119dd0",
                "bfd_set_error",
                "bfd_openr",
                "bfd_openw",
                "__errno_location",
                "FUN_00113f50",
                "strerror",
                "bfd_stat",
                "FUN_0011a0e0",
                "FUN_0011256b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "improved_extract_and_copy_archive_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_data_0010b800",
                "param_1": "data_ptr",
                "param_2": "size",
                "param_3": "is_foo",
                "plVar1": "ptr",
                "uVar2": "result",
                "sVar3": "str_len",
                "lVar4": "value",
                "lVar5": "bit_mask",
                "local_8c": "output_str",
                "auStack_8a": "temp_array"
            },
            "code": "\nundefined8 processData_0010b800(long data_ptr,int size,char is_foo)\n\n{\n  long *ptr;\n  undefined8 result;\n  size_t str_len;\n  long value;\n  long bit_mask;\n  undefined2 output_str;\n  undefined4 temp_array [24];\n  \n  if (size - 1U < 8) {\n    value = data_ptr + 0xb8;\n    if (is_foo != '\\0') {\n      value = data_ptr + 0x78;\n    }\n    ptr = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *ptr;\n    if (value != 0) {\n      result = FUN_00109cf4(data_ptr,value,size);\n      return result;\n    }\n    value = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = value + 1;\n    *ptr = value;\n    sprintf((char *)&output_str,\"%ld=r%ld;\",value,value);\n    if (is_foo == '\\0') {\n      bit_mask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      str_len = strlen((char *)&output_str);\n      sprintf((char *)((long)&output_str + str_len),\"%ld;%ld;\",-bit_mask,bit_mask + -1);\n    }\n    else {\n      str_len = strlen((char *)&output_str);\n      *(undefined2 *)((long)&output_str + str_len) = 0x3b30;\n      *(undefined *)((long)&output_str + str_len + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&output_str + str_len + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&output_str + str_len + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = FUN_00109b52(data_ptr,&output_str,value,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    FUN_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00109b52",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "print_and_update_data_00109ed3",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "data_array",
                "param_5": "size_array",
                "uVar1": "current_size",
                "uVar2": "new_size",
                "cVar3": "condition",
                "pcVar4": "formatted_string",
                "sVar5": "string_length",
                "__s": "dynamic_string",
                "lVar6": "counter",
                "__ptr": "temp_ptr",
                "uVar7": "result",
                "uVar8": "flag",
                "lVar9": "loop_counter",
                "uVar10": "original_size",
                "puVar11": "fill_ptr",
                "bVar12": "byte_var"
            },
            "code": "\nundefined8 print_and_update_data_00109ed3(long param1,uint param2,undefined4 param3,long *data_array,ulong *size_array)\n\n{\n  ulong current_size;\n  ulong new_size;\n  char condition;\n  char *formatted_string;\n  size_t string_length;\n  char *dynamic_string;\n  long counter;\n  void *temp_ptr;\n  undefined8 result;\n  undefined flag;\n  long loop_counter;\n  ulong original_size;\n  undefined *fill_ptr;\n  byte byte_var;\n  \n  byte_var = 0;\n  counter = *(long *)(param1 + 0x60);\n  if (counter != 0) {\n    current_size = *(ulong *)(counter + 0x10);\n    if (((long)current_size < 1) || (data_array == (long *)0x0)) {\n      flag = *(undefined *)(counter + 0x1c);\n      formatted_string = (char *)FUN_00109b2f(param1);\n      string_length = strlen(formatted_string);\n      dynamic_string = (char *)xmalloc(string_length + 2);\n      sprintf(dynamic_string,\"%c%s\",(ulong)param2,formatted_string);\n      free(formatted_string);\n      counter = 0;\n    }\n    else {\n      original_size = *size_array;\n      if (original_size <= current_size) {\n        if (original_size == 0) {\n          original_size = 10;\n        }\n        for (; original_size <= current_size; original_size = original_size * 2) {\n        }\n        counter = xrealloc(*data_array,original_size * 8);\n        new_size = *size_array;\n        *data_array = counter;\n        fill_ptr = (undefined *)(counter + new_size * 8);\n        for (loop_counter = (original_size - new_size) * 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *fill_ptr = 0;\n          fill_ptr = fill_ptr + (ulong)byte_var * -2 + 1;\n        }\n        *size_array = original_size;\n      }\n      counter = *(long *)(*data_array + current_size * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(param1 + 0x60) + 0x1c) == '\\0')) {\n        temp_ptr = (void *)FUN_00109b2f(param1);\n        free(temp_ptr);\n        result = FUN_00109cf4(param1,counter,param3);\n        return result;\n      }\n      counter = *(long *)(param1 + 0x68);\n      *(long *)(param1 + 0x68) = counter + 1;\n      formatted_string = (char *)FUN_00109b2f(param1);\n      string_length = strlen(formatted_string);\n      dynamic_string = (char *)xmalloc(string_length + 0x14);\n      sprintf(dynamic_string,\"%ld=%c%s\",counter,(ulong)param2,formatted_string);\n      free(formatted_string);\n      flag = 1;\n      *(long *)(*data_array + current_size * 8) = counter;\n    }\n    condition = FUN_00109b52(param1,dynamic_string,counter,flag,param3);\n    if (condition != '\\0') {\n      free(dynamic_string);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "xrealloc",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010a0bd",
                "FUN_0010a0d3",
                "FUN_0010e5db",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "print_and_update_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_00113c43",
                "FUN_0010d882",
                "FUN_00108c86",
                "FUN_0010e842",
                "FUN_00114190",
                "FUN_0010aa53",
                "FUN_0010b6ea",
                "FUN_0010e453",
                "FUN_001163d0",
                "FUN_0010a83e",
                "FUN_00104ad6",
                "FUN_0010bbd3",
                "FUN_0010e918",
                "FUN_00114c80",
                "FUN_00116852",
                "FUN_0010da0b",
                "FUN_0010afd5",
                "FUN_0010e5db",
                "FUN_00113d6e",
                "FUN_00115530",
                "FUN_00113ce0",
                "FUN_0010ab4d",
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_0010a424",
                "FUN_00109a0b",
                "FUN_00112894",
                "FUN_0010e7c2",
                "FUN_001125fa",
                "FUN_00113bfa",
                "FUN_00109b52",
                "FUN_0010c218",
                "FUN_0010c7a0",
                "FUN_0010bd62",
                "FUN_00113b98",
                "FUN_0011173a",
                "FUN_00113e23",
                "FUN_00107880",
                "FUN_0010a69a",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_0010c139",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010a2b9",
                "FUN_00112925",
                "FUN_0010ae0e",
                "FUN_0011a480",
                "FUN_00109ed3",
                "FUN_0010bc80",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00116030",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_0010be88",
                "FUN_00116110",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_00114cf0",
                "FUN_0010ebb0",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_00112904",
                "FUN_0010eafe",
                "FUN_0010c05d",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_00113da9",
                "FUN_00108f08",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_data_structures_0010bbd3",
                "param_1": "dataStruct",
                "param_2": "filename",
                "param_3": "param1",
                "param_4": "param2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "lVar4": "loopCount",
                "puVar5": "ptr4",
                "pcVar6": "fileStr",
                "bVar7": "byteVar",
                "auVar8": "returnVal"
            },
            "code": "\nundefined  [16] initializeDataStructures_0010bbd3(long *dataStruct,char *filename,undefined8 param1,undefined8 param2)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long loopCount;\n  undefined4 *ptr4;\n  char *fileStr;\n  byte byteVar;\n  undefined returnVal [16];\n  \n  byteVar = 0;\n  fileStr = \"\";\n  if (filename != (char *)0x0) {\n    fileStr = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (loopCount = 6; loopCount != 0; loopCount = loopCount + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = fileStr;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  dataStruct[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (loopCount = 6; loopCount != 0; loopCount = loopCount + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n  }\n  ptr1 = (undefined8 *)dataStruct[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*dataStruct != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *dataStruct = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  dataStruct[1] = (long)ptr3;\n  dataStruct[5] = 0;\n  *(undefined (*) [16])(dataStruct + 3) = ZEXT816(0);\n  returnVal._8_8_ = param2;\n  returnVal._0_8_ = 1;\n  return returnVal;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    FUN_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = FUN_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = FUN_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = FUN_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,FUN_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = FUN_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = FUN_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUN_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)FUN_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUN_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = FUN_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          FUN_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUN_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar35 != 0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = FUN_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = FUN_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = FUN_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = FUN_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = FUN_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = FUN_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = FUN_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = FUN_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = FUN_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = FUN_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = FUN_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = FUN_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUN_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,FUN_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,FUN_00115dc0,param_2);\n    bfd_map_over_sections(param_1,FUN_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = FUN_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = FUN_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "bfd_set_format",
                "FUN_001125fa",
                "FUN_00119ed0",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "param_1": "inputParam",
                "param_2": "dataParam",
                "uVar1": "value",
                "lVar2": "result"
            },
            "code": "\nlong findMatchingValue_00115d00(long inputParam,long dataParam)\n\n{\n  uint value;\n  long result;\n  \n  result = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(dataParam + 8) + 8) == 5) {\n      if (*(int *)(inputParam + 0x28) == *(int *)(*(long *)(dataParam + 0x110) + 0xd40)) {\n        value = *(uint *)(inputParam + 0x2c);\n        if (value == 0) {\n          result = 0;\n        }\n        else if ((ulong)value <\n                 *(ulong *)(*(long *)(dataParam + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(dataParam + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278b0 + (ulong)(value - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "find_matching_value_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "allocate_memory_and_initialize_struct_00113c43",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "lVar1": "allocation_result",
                "plVar2": "allocated_struct_ptr",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\nallocate_memory_and_initialize_struct_00113c43(long input_param_1,long input_param_2,long input_param_3,long input_param_4,undefined input_param_5,\n            undefined8 input_param_6)\n\n{\n  long allocation_result;\n  long *allocated_struct_ptr;\n  undefined result [16];\n  \n  if ((input_param_1 != 0) && (input_param_2 != 0)) {\n    allocation_result = FUN_00112904(0x10,0);\n    if (allocation_result != 0) {\n      allocated_struct_ptr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocated_struct_ptr + 0x21) = 0;\n      *allocated_struct_ptr = input_param_1;\n      *(undefined4 *)((long)allocated_struct_ptr + 0x24) = 0;\n      allocated_struct_ptr[1] = input_param_2;\n      allocated_struct_ptr[2] = input_param_3;\n      allocated_struct_ptr[3] = input_param_4;\n      *(undefined *)(allocated_struct_ptr + 4) = input_param_5;\n      *(long **)(allocation_result + 0x10) = allocated_struct_ptr;\n      goto LAB_00113caa;\n    }\n  }\n  allocation_result = 0;\nLAB_00113caa:\n  result._8_8_ = input_param_6;\n  result._0_8_ = allocation_result;\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_initialize_struct_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "handle_operation_00112a33",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "operation",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "flags",
                "uVar1": "result",
                "lVar2": "value",
                "plVar3": "resultPtr"
            },
            "code": "\nbool handleOperation_00112a33(undefined8 param1,long param2,undefined8 param3,byte operation,undefined8 param5\n                 ,undefined8 param6,uint flags)\n\n{\n  undefined result;\n  long value;\n  long *resultPtr;\n  \n  if (operation < 0x12) {\n    if (operation != 0) {\n      switch(operation) {\n      case 1:\n        result = FUN_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,4,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = FUN_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,(flags & 0xff) + 2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = FUN_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,5,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = FUN_0010bd62(param5,*(undefined8 *)(param2 + 8),param6,1,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        value = FUN_0010c6be(param5,*(undefined8 *)(param2 + 8));\n        if (value == 0) {\n          return false;\n        }\n        resultPtr = (long *)FUN_0010da0b(param1,param3);\n        *resultPtr = value;\n        break;\n      case 0xd:\n        value = FUN_0010c218(param5,*(undefined8 *)(param2 + 8));\n        return value != 0;\n      case 0x11:\n        result = FUN_0010bd62(param5,*(undefined8 *)(param2 + 8),param6,2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (operation == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = FUN_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,1,\n                         *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010da0b",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bd62",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "handle_operation_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_type_information_0010c2d2",
                "param_1": "param_size",
                "param_2": "type_info_ptr",
                "param_3": "type_idx_ptr",
                "uVar1": "type_idx",
                "pcVar2": "type_string",
                "uVar3": "type_signature",
                "lVar4": "result",
                "plVar5": "type_ptr",
                "uVar6": "complement_type_idx"
            },
            "code": "\n\n\nlong getTypeInformation_0010c2d2(undefined8 param_size,long type_info_ptr,int *type_idx_ptr)\n\n{\n  uint type_idx;\n  char *type_string;\n  undefined8 type_signature;\n  long result;\n  long *type_ptr;\n  uint complement_type_idx;\n  \n  if ((*type_idx_ptr == 0) && (type_idx = type_idx_ptr[1], (int)type_idx < 0)) {\n    complement_type_idx = ~type_idx;\n    if (complement_type_idx < 0x22) {\n      result = *(long *)(type_info_ptr + 0x90 + (ulong)complement_type_idx * 8);\n      if (result == 0) {\n        switch(complement_type_idx) {\n        case 1:\n          type_signature = FUN_00113dfe(1,0);\n          type_string = \"char\";\n          break;\n        case 2:\n          type_signature = FUN_00113dfe(2,0);\n          type_string = \"short\";\n          break;\n        case 3:\n          type_signature = FUN_00113dfe(4,0);\n          type_string = \"long\";\n          break;\n        case 4:\n          type_signature = FUN_00113dfe(1,1);\n          type_string = \"unsigned char\";\n          break;\n        case 5:\n          type_signature = FUN_00113dfe(1,0);\n          type_string = \"signed char\";\n          break;\n        case 6:\n          type_signature = FUN_00113dfe(2,1);\n          type_string = \"unsigned short\";\n          break;\n        case 7:\n          type_signature = FUN_00113dfe(4,1);\n          type_string = \"unsigned int\";\n          break;\n        case 8:\n          type_signature = FUN_00113dfe(4,1);\n          type_string = \"unsigned\";\n          break;\n        case 9:\n          type_signature = FUN_00113dfe(4,1);\n          type_string = \"unsigned long\";\n          break;\n        case 10:\n          type_signature = FUN_00113e17();\n          type_string = \"void\";\n          break;\n        case 0xb:\n          type_signature = FUN_00113df2(4);\n          type_string = \"float\";\n          break;\n        case 0xc:\n          type_signature = FUN_00113df2(8);\n          type_string = \"double\";\n          break;\n        case 0xd:\n          type_signature = FUN_00113df2(8);\n          type_string = \"long double\";\n          break;\n        case 0xe:\n          type_signature = FUN_00113dfe(4,0);\n          type_string = \"integer\";\n          break;\n        case 0xf:\n          type_signature = FUN_00112904(6,4);\n          type_string = \"boolean\";\n          break;\n        case 0x10:\n          type_signature = FUN_00113df2(4);\n          type_string = \"short real\";\n          break;\n        case 0x11:\n          type_signature = FUN_00113df2(8);\n          type_string = \"real\";\n          break;\n        case 0x12:\n          type_string = \"stringptr\";\n          type_signature = 0;\n          break;\n        case 0x13:\n          type_signature = FUN_00113dfe(1,1);\n          type_string = \"character\";\n          break;\n        case 0x14:\n          type_signature = FUN_00112904(6,1);\n          type_string = \"logical*1\";\n          break;\n        case 0x15:\n          type_signature = FUN_00112904(6,2);\n          type_string = \"logical*2\";\n          break;\n        case 0x16:\n          type_signature = FUN_00112904(6,4);\n          type_string = \"logical*4\";\n          break;\n        case 0x17:\n          type_signature = FUN_00112904(6,4);\n          type_string = \"logical\";\n          break;\n        case 0x18:\n          type_signature = FUN_00112904(5,8);\n          type_string = \"complex\";\n          break;\n        case 0x19:\n          type_signature = FUN_00112904(5,0x10);\n          type_string = \"double complex\";\n          break;\n        case 0x1a:\n          type_signature = FUN_00113dfe(1,0);\n          type_string = \"integer*1\";\n          break;\n        case 0x1b:\n          type_signature = FUN_00113dfe(2,0);\n          type_string = \"integer*2\";\n          break;\n        case 0x1c:\n          type_signature = FUN_00113dfe(4,0);\n          type_string = \"integer*4\";\n          break;\n        case 0x1d:\n          type_signature = FUN_00113dfe(2,0);\n          type_string = \"wchar\";\n          break;\n        case 0x1e:\n          type_signature = FUN_00113dfe(8,0);\n          type_string = \"long long\";\n          break;\n        case 0x1f:\n          type_signature = FUN_00113dfe(8,1);\n          type_string = \"unsigned long long\";\n          break;\n        case 0x20:\n          type_signature = FUN_00112904(6,8);\n          type_string = \"logical*8\";\n          break;\n        case 0x21:\n          type_signature = FUN_00113dfe(8,0);\n          type_string = \"integer*8\";\n          break;\n        default:\n          type_signature = FUN_00113dfe(4,0);\n          type_string = \"int\";\n        }\n        result = FUN_0010c218(param_size,type_string,type_signature);\n        *(long *)(type_info_ptr + 0x90 + (ulong)complement_type_idx * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    type_string = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,type_string,(ulong)type_idx);\n  }\n  else {\n    type_ptr = (long *)FUN_00109022(type_info_ptr);\n    if (type_ptr != (long *)0x0) {\n      if (*type_ptr == 0) {\n        result = FUN_00113e23(type_ptr,0);\n        return result;\n      }\n      return *type_ptr;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112904",
                "fprintf",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00109022",
                "FUN_00113df2",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_type_information_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "extract_symbols_0010e07c",
                "param_1": "inputFile",
                "param_2": "symbolTable",
                "param_3": "outputFile",
                "param_4": "fileType",
                "param_5": "coffHeader",
                "param_6": "errorMessage",
                "lVar1": "symbolTableSize",
                "lVar2": "symbolTableEntry",
                "lVar3": "numSymbols",
                "cVar4": "result",
                "uVar5": "errorType",
                "__ptr": "extractedSymbols",
                "uVar6": "symbolValue",
                "uVar7": "stringTable",
                "puVar8": "symbolEntry",
                "pcVar9": "errorString",
                "puVar10": "auxEntry",
                "uVar11": "auxValue",
                "lVar12": "symbolCount",
                "iVar13": "symbolOffset",
                "iVar14": "symbolCapacity",
                "local_a8": "symbolEntry0",
                "uStack_a4": "highPart",
                "uStack_a0": "symbolEntry1",
                "uStack_9c": "highPartEntry1",
                "local_88": "symbolName",
                "local_6a": "symbolType",
                "local_68": "symbolClass",
                "local_67": "symbolAuxPresent",
                "local_60": "auxData",
                "local_56": "noOfAuxEntries"
            },
            "code": "\nundefined8\nextractSymbols_0010e07c(undefined8 inputFile,long *symbolTable,undefined8 outputFile,int fileType,long coffHeader,\n            undefined8 errorMessage)\n\n{\n  long symbolTableSize;\n  long symbolTableEntry;\n  long numSymbols;\n  char result;\n  undefined4 errorType;\n  void *extractedSymbols;\n  undefined8 symbolValue;\n  undefined8 stringTable;\n  undefined4 *symbolEntry;\n  char *errorString;\n  undefined *auxEntry;\n  uint auxValue;\n  long symbolCount;\n  int symbolOffset;\n  int symbolCapacity;\n  undefined4 symbolEntry0;\n  undefined4 highPart;\n  undefined4 symbolEntry1;\n  undefined4 highPartEntry1;\n  undefined symbolName [30];\n  undefined2 symbolType;\n  byte symbolClass;\n  byte symbolAuxPresent;\n  undefined auxData [10];\n  ushort noOfAuxEntries;\n  \n  symbolCapacity = 10;\n  symbolCount = 0;\n  symbolTableSize = *(long *)(coffHeader + 0x18);\n  extractedSymbols = (void *)xmalloc(0x50);\n  while ((symbolTable[3] < symbolTableSize && (symbolTable[2] < symbolTable[1]))) {\n    symbolTableEntry = *(long *)(*symbolTable + symbolTable[2] * 8);\n    result = bfd_coff_get_syment(inputFile,symbolTableEntry,symbolName);\n    if (result == '\\0') {\n      errorType = bfd_get_error();\n      symbolValue = bfd_errmsg(errorType);\n      errorString = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      stringTable = dcgettext(0,errorString,5);\n      FUN_00119ed0(stringTable,symbolValue);\n      free(extractedSymbols);\n      return 0;\n    }\n    numSymbols = symbolTable[3];\n    auxEntry = (undefined *)0x0;\n    symbolTable[2] = symbolTable[2] + 1;\n    symbolTable[3] = numSymbols + 1 + (ulong)symbolAuxPresent;\n    if (symbolAuxPresent != 0) {\n      auxEntry = auxData;\n      result = bfd_coff_get_auxent(inputFile,symbolTableEntry,0,auxEntry);\n      if (result == '\\0') {\n        errorType = bfd_get_error();\n        symbolValue = bfd_errmsg(errorType);\n        errorString = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbolClass == 0x12) {\n      auxValue = (uint)noOfAuxEntries;\n      symbolOffset = (int)*(undefined8 *)(symbolTableEntry + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbolTableEntry + 0x20) + 0x30);\n    }\n    else {\n      if (symbolClass < 0x13) {\n        if ((symbolClass == 8) || (symbolClass == 0xb)) {\n          auxValue = 0;\n          symbolOffset = ((int)*(undefined8 *)(symbolTableEntry + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbolTableEntry + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbolClass == 0x66) break;\n      auxValue = 0;\n      symbolOffset = 0;\n    }\nLAB_0010e214:\n    stringTable = FUN_0010dac0(inputFile,symbolTable,outputFile,numSymbols,symbolType,auxEntry,1);\n    symbolValue = *(undefined8 *)(symbolTableEntry + 8);\n    symbolEntry = (undefined4 *)xmalloc(0x20);\n    symbolEntry0 = (undefined4)symbolValue;\n    highPart = (undefined4)((ulong)symbolValue >> 0x20);\n    symbolEntry1 = (undefined4)stringTable;\n    highPartEntry1 = (undefined4)((ulong)stringTable >> 0x20);\n    *(undefined8 *)(symbolEntry + 5) = 0;\n    symbolEntry[6] = symbolOffset;\n    symbolEntry[7] = auxValue;\n    symbolEntry[4] = 0;\n    *symbolEntry = symbolEntry0;\n    symbolEntry[1] = highPart;\n    symbolEntry[2] = symbolEntry1;\n    symbolEntry[3] = highPartEntry1;\n    if (symbolCapacity <= (int)symbolCount + 1) {\n      symbolCapacity = symbolCapacity + 10;\n      extractedSymbols = (void *)xrealloc(extractedSymbols,(long)symbolCapacity << 3,symbolEntry,0,errorMessage);\n    }\n    *(undefined4 **)((long)extractedSymbols + symbolCount * 8) = symbolEntry;\n    symbolCount = symbolCount + 1;\n  }\n  *(undefined8 *)((long)extractedSymbols + (long)(int)symbolCount * 8) = 0;\n  symbolValue = FUN_00113da9(fileType == 8,*(undefined2 *)(coffHeader + 10),extractedSymbols);\n  return symbolValue;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "FUN_00113da9",
                "xrealloc",
                "bfd_coff_get_auxent",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "extract_symbols_0010e07c"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_return_value_001082c3",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t getReturnValue_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "get_return_value_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_store_file_contents_00114460",
                "param_1": "fileName",
                "param_2": "hashTable",
                "param_3": "fileContentsPtr",
                "iVar1": "lineNumber",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMessage",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "hashTableSlot",
                "pbVar7": "currentChar",
                "bVar8": "currentByte",
                "pbVar9": "nextByte",
                "pbVar10": "currentPtr",
                "pbVar11": "checkPtr",
                "pbVar12": "tempPtr"
            },
            "code": "\nvoid readAndStoreFileContents_00114460(char *fileName,undefined8 hashTable,byte **fileContentsPtr)\n\n{\n  int lineNumber;\n  int *errorNumberPtr;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **hashTableSlot;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextByte;\n  byte *currentPtr;\n  byte *checkPtr;\n  byte *tempPtr;\n  \n  fileSize = FUN_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(fileName,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errorNumberPtr = __errno_location();\n      errorMessage = strerror(*errorNumberPtr);\n      translatedMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      FUN_00119dd0(translatedMessage,fileName,errorMessage);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (lineNumber = ferror(fileStream), lineNumber != 0)) {\n      translatedMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(translatedMessage,fileName);\n    }\n    lineNumber = 1;\n    fclose(fileStream);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    currentByte = *fileBuffer;\n    tempPtr = fileBuffer;\n    while (currentPtr = tempPtr, currentByte != 0) {\n      for (; currentByte = *currentPtr, checkPtr = currentPtr, currentByte != 10; currentPtr = currentPtr + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextByte = currentPtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentPtr = 0;\n            nextByte = currentPtr + 1;\n            if (currentPtr[1] == 10) {\n              nextByte = currentPtr + 2;\n              checkPtr = currentPtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            FUN_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentPtr = 0;\n      if (currentPtr[1] == 0xd) {\n        checkPtr = currentPtr + 1;\n        nextByte = currentPtr + 2;\n      }\n      else {\n        nextByte = currentPtr + 1;\n      }\nLAB_00114553:\n      currentByte = *tempPtr;\n      while ((currentByte == 0x20 || (currentPtr = tempPtr, currentByte == 9))) {\n        currentPtr = tempPtr + 1;\n        tempPtr = tempPtr + 1;\n        currentByte = *currentPtr;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentPtr[1];\n        currentPtr = currentPtr + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentPtr[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentPtr[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentPtr[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentPtr[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentPtr[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentPtr[6];\n          currentChar = currentPtr + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentChar[1];\n                currentChar = currentChar + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          translatedMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          FUN_00119ed0(translatedMessage,fileName,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentPtr = 0;\n      if (tempPtr < currentPtr) {\n        hashTableSlot = (byte **)htab_find_slot(hashTable,tempPtr,1);\n        *hashTableSlot = tempPtr;\n      }\n      lineNumber = lineNumber + 1;\n      tempPtr = nextByte;\n      currentByte = checkPtr[1];\n    }\n    *fileContentsPtr = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "fread",
                "FUN_00113f50",
                "strerror",
                "FUN_00119dd0",
                "fopen",
                "xmalloc",
                "ferror",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_store_file_contents_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "construct_query_string_0010a94e",
                "param_1": "param_ptr",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "flag",
                "cVar1": "flag_value",
                "lVar2": "struct_ptr",
                "__s": "string_1",
                "sVar3": "length_1",
                "sVar4": "length_2",
                "sVar5": "length_3",
                "sVar6": "length_4",
                "pcVar7": "result_string",
                "uVar8": "return_value",
                "pcVar9": "flag_suffix"
            },
            "code": "\nundefined8 constructQueryString_0010a94e(long param_ptr,char *input_1,char *input_2,int flag)\n\n{\n  char flag_value;\n  long struct_ptr;\n  char *string_1;\n  size_t length_1;\n  size_t length_2;\n  size_t length_3;\n  size_t length_4;\n  char *result_string;\n  undefined8 return_value;\n  char *flag_suffix;\n  \n  flag_value = *(char *)(*(long *)(param_ptr + 0x60) + 0x1c);\n  string_1 = (char *)FUN_00109b2f();\n  result_string = *(char **)(*(long *)(param_ptr + 0x60) + 0x20);\n  if (result_string == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    length_1 = strlen(result_string);\n    length_2 = strlen(input_1);\n    length_3 = strlen(string_1);\n    length_4 = strlen(input_2);\n    result_string = (char *)xmalloc(length_1 + 10 + length_2 + length_3 + length_4);\n    if (flag == 1) {\n      flag_suffix = \"/1\";\n    }\n    else {\n      flag_suffix = \"/0\";\n      if ((flag != 2) && (flag_suffix = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(result_string,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(param_ptr + 0x60) + 0x20),input_1,flag_suffix,\n            string_1,input_2,*(long *)(param_ptr + 0x60));\n    free(*(void **)(*(long *)(param_ptr + 0x60) + 0x20));\n    struct_ptr = *(long *)(param_ptr + 0x60);\n    *(char **)(struct_ptr + 0x20) = result_string;\n    if (flag_value != '\\0') {\n      *(undefined *)(struct_ptr + 0x1c) = 1;\n    }\n    return_value = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_query_string_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_data_00113b1e",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "output_param",
                "auVar1": "auVar_input",
                "piVar2": "ptr_piVar",
                "uVar3": "data_value",
                "auVar4": "auVar_output"
            },
            "code": "\nundefined  [16] extract_data_00113b1e(long input_param,undefined8 unused_param,ulong default_value,undefined8 output_param)\n\n{\n  undefined auVar_input [16];\n  int *ptr_piVar;\n  undefined8 data_value;\n  undefined auVar_output [16];\n  \n  if (input_param != 0) {\n    ptr_piVar = (int *)FUN_00112b6e(input_param,0);\n    if ((ptr_piVar == (int *)0x0) || (3 < *ptr_piVar - 7U)) {\n      data_value = 0;\n    }\n    else {\n      data_value = **(undefined8 **)(ptr_piVar + 4);\n    }\n    auVar_output._8_8_ = output_param;\n    auVar_output._0_8_ = data_value;\n    return auVar_output;\n  }\n  auVar_input._8_8_ = 0;\n  auVar_input._0_8_ = default_value;\n  return auVar_input << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_data_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "execute_command_0010a0e9",
                "param_1": "commandHandler",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "byteValue",
                "uVar2": "returnValue",
                "__s": "command",
                "sVar3": "commandLength",
                "__s_00": "formattedCommand"
            },
            "code": "\nundefined4 executeCommand_0010a0e9(long commandHandler,undefined8 value1,undefined8 value2)\n\n{\n  undefined byteValue;\n  undefined4 returnValue;\n  char *command;\n  size_t commandLength;\n  char *formattedCommand;\n  \n  byteValue = *(undefined *)(*(long *)(commandHandler + 0x60) + 0x1c);\n  returnValue = *(undefined4 *)(*(long *)(commandHandler + 0x60) + 0x18);\n  command = (char *)FUN_00109b2f();\n  commandLength = strlen(command);\n  formattedCommand = (char *)xmalloc(commandLength + 100);\n  sprintf(formattedCommand,\"r%s;%ld;%ld;\",command,value1,value2);\n  free(command);\n  returnValue = FUN_00109b52(commandHandler,formattedCommand,0,byteValue,returnValue);\n  if ((char)returnValue != '\\0') {\n    free(formattedCommand);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_command_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "initialize_function_00114c20",
                "param_1": "inputParameter",
                "cVar1": "flag",
                "pcVar2": "charPointer"
            },
            "code": "\nvoid initializeFunction_00114c20(long inputParameter)\n\n{\n  char flag;\n  char *charPointer;\n  \n  FUN_00114190(inputParameter,1,1);\n  flag = FUN_00113fb0(inputParameter,&DAT_0011b499);\n  if (flag != '\\0') {\n    charPointer = (char *)(inputParameter + 5);\n    if (*(char *)(inputParameter + 4) != 'a') {\n      charPointer = (char *)(inputParameter + 4);\n    }\n    if (*charPointer != '\\0') {\n      FUN_00114190(charPointer,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_function_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_string_duplicates_00115f50",
                "param_1": "pointerToStruct",
                "param_2": "stringArray",
                "param_3": "flag",
                "__s1": "currentString",
                "uVar1": "stringComparisonResult",
                "uVar2": "extraOutput",
                "plVar3": "pointerToLong",
                "auVar4": "temporaryArray"
            },
            "code": "\nuint checkStringDuplicates_00115f50(long pointerToStruct,char **stringArray,char flag)\n\n{\n  char *currentString;\n  uint stringComparisonResult;\n  undefined4 extraOutput;\n  undefined4 extraout_EDX;\n  long *pointerToLong;\n  undefined temporaryArray [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  temporaryArray = FUN_001159d0(stringArray);\n  if (temporaryArray[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      currentString = *stringArray;\n      pointerToLong = DAT_001279b8;\n      do {\n        stringComparisonResult = strcmp(currentString,(char *)pointerToLong[1]);\n        temporaryArray._4_4_ = 0;\n        temporaryArray._0_4_ = stringComparisonResult;\n        temporaryArray._8_4_ = extraout_EDX;\n        if (stringComparisonResult == 0) {\n          return 1;\n        }\n        pointerToLong = (long *)*pointerToLong;\n      } while (pointerToLong != (long *)0x0);\n    }\n    extraOutput = temporaryArray._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (temporaryArray._8_4_ = extraOutput, temporaryArray._0_8_ = *(long *)(pointerToStruct + 8),\n         *(int *)(*(long *)(pointerToStruct + 8) + 8) != 5)) ||\n        ((temporaryArray._0_8_ = (ulong)stringArray[0x1a], *(int *)(stringArray[0x1a] + 4) != 7 ||\n         (temporaryArray = FUN_00113fb0(*stringArray,\".gnu.build.attributes\"), temporaryArray[0] == '\\0')))) &&\n       ((*(byte *)((long)stringArray + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(temporaryArray._1_7_,stringArray[8] == (char *)0x0) |\n             CONCAT31(temporaryArray._9_3_,stringArray[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001159d0",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "check_string_duplicates_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "reverse_bytes_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "length",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid reverseBytes_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 length;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  FUN_00119dd0(errorMessage,sectionValue,length);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "reverse_bytes_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "lVar1": "temp_value",
                "cVar2": "char_result",
                "__ptr": "temp_ptr",
                "uVar3": "ulong_value",
                "uVar4": "size_minus_one",
                "local_5a": "formatted_string"
            },
            "code": "\nvoid processData_0010b948(long data_ptr,uint data_size)\n\n{\n  long temp_value;\n  char char_result;\n  void *temp_ptr;\n  ulong ulong_value;\n  uint size_minus_one;\n  char formatted_string [50];\n  \n  size_minus_one = data_size - 1;\n  ulong_value = (ulong)data_size;\n  if ((size_minus_one < 0x10) && (temp_value = *(long *)(data_ptr + 0xf8 + (ulong)size_minus_one * 8), temp_value != 0)) {\n    FUN_00109cf4(data_ptr,temp_value,ulong_value);\n    return;\n  }\n  char_result = FUN_0010b800(data_ptr,4,0);\n  if (char_result != '\\0') {\n    temp_ptr = (void *)FUN_00109b2f(data_ptr);\n    temp_value = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = temp_value + 1;\n    if (size_minus_one < 0x10) {\n      *(long *)(data_ptr + 0xf8 + (ulong)size_minus_one * 8) = temp_value;\n    }\n    sprintf(formatted_string,\"%ld=r%s;%u;0;\",temp_value,temp_ptr,ulong_value);\n    free(temp_ptr);\n    FUN_00109b52(data_ptr,formatted_string,temp_value,1,ulong_value);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010b800",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_0010914e",
                "FUN_00108072",
                "FUN_00119f70",
                "FUN_00108fe8",
                "FUN_0010882c",
                "FUN_00115b70",
                "FUN_00114e50",
                "FUN_00114190",
                "FUN_00108fb9",
                "FUN_00108916",
                "FUN_0010543c",
                "FUN_0010551d",
                "FUN_0010b6ea",
                "FUN_0010911f",
                "FUN_001053b5",
                "FUN_00114dc7",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00105828",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_00104a35",
                "FUN_00112b6e",
                "FUN_0010da0b",
                "FUN_00112996",
                "FUN_00115530",
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_001083de",
                "FUN_0010b800",
                "FUN_00113f50",
                "FUN_001152b6",
                "FUN_00108179",
                "FUN_0010c218",
                "FUN_0010c2d2",
                "FUN_0010bd62",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0011173a",
                "FUN_0010808f",
                "FUN_0010b0fa",
                "FUN_00107880",
                "FUN_00104920",
                "FUN_0010e2f0",
                "FUN_00115dc0",
                "FUN_001126c0",
                "FUN_00114e00",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_00107976",
                "FUN_00108a2a",
                "FUN_0010e07c",
                "FUN_00116490",
                "FUN_00119970",
                "FUN_0010bc80",
                "FUN_0010871c",
                "FUN_00108375",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00109a32",
                "FUN_0010c892",
                "FUN_00104ea2",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_0010e6a8",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_0010827b",
                "FUN_001086af",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010ba08",
                "FUN_00114690",
                "FUN_0010bf20",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00107880",
                "FUN_00114e50",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_real_type_00112b6e",
                "param_1": "input_array",
                "param_2": "debug_info",
                "iVar1": "first_element",
                "uVar2": "error_message",
                "__format": "format_string",
                "piVar3": "result",
                "plVar4": "current_element",
                "bVar5": "is_circular",
                "local_18": "visited_elements",
                "local_10": "current_array"
            },
            "code": "\n\n\nint * find_real_type_00112b6e(int *input_array,long *debug_info)\n\n{\n  int first_element;\n  undefined8 error_message;\n  char *format_string;\n  int *result;\n  long *current_element;\n  bool is_circular;\n  long *visited_elements;\n  int *current_array;\n  \n  first_element = *input_array;\n  if ((first_element != 1) && (1 < first_element - 0x16U)) {\n    return input_array;\n  }\n  current_element = debug_info;\n  while (current_element != (long *)0x0) {\n    if ((input_array == (int *)current_element[1]) ||\n       (is_circular = current_element == (long *)*current_element, current_element = (long *)*current_element, is_circular)) {\n      error_message = FUN_001129f4(input_array,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,error_message);\n      return (int *)0x0;\n    }\n  }\n  visited_elements = debug_info;\n  current_array = input_array;\n  if (first_element - 0x16U < 2) {\n    result = (int *)find_real_type_00112b6e((*(undefined8 **)(input_array + 4))[1],&visited_elements);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result) {\n    return input_array;\n  }\n  if (result == (int *)0x0) {\n    return input_array;\n  }\n  result = (int *)find_real_type_00112b6e(result,&visited_elements);\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001129f4",
                "FUN_00112b6e",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010922b",
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "size1",
                "param_4": "param4",
                "param_5": "size2",
                "param_6": "flag1",
                "param_7": "flag2",
                "uVar1": "result",
                "__s": "string1",
                "__s_00": "string2",
                "sVar2": "stringLength",
                "cVar3": "charVar"
            },
            "code": "\nundefined4\nprocessData_0010a83e(long input,undefined8 param2,ulong size1,undefined param4,ulong size2,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t stringLength;\n  char charVar;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    string1 = (char *)0x0;\n    charVar = '\\0';\n  }\n  else {\n    charVar = *(char *)(*(long *)(input + 0x60) + 0x1c);\n    string1 = (char *)FUN_00109b2f();\n    size2 = size2 & 0xffffffff;\n    size1 = size1 & 0xffffffff;\n  }\n  result = FUN_0010a69a(input,param2,size1,param4,size2);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      stringLength = strlen(string1);\n      string2 = (char *)xmalloc(stringLength + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (charVar != '\\0') {\n        *(undefined *)(*(long *)(input + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(input + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(input + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(input + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010a69a",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_and_store_data_00113d6e",
                "param_1": "data1",
                "param_2": "data2",
                "lVar1": "result",
                "puVar2": "allocated_data"
            },
            "code": "\nlong allocate_and_store_data_00113d6e(undefined8 data1,undefined8 data2)\n\n{\n  long result;\n  undefined8 *allocated_data;\n  \n  result = FUN_00112904(0xb,0);\n  if (result != 0) {\n    allocated_data = (undefined8 *)xmalloc(0x10);\n    *allocated_data = data1;\n    allocated_data[1] = data2;\n    *(undefined8 **)(result + 0x10) = allocated_data;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_store_data_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_0010e842",
                "FUN_0010aa53",
                "FUN_0010551d",
                "FUN_0010b6ea",
                "FUN_0010e453",
                "FUN_00108863",
                "FUN_001163d0",
                "FUN_0010a83e",
                "FUN_00104a35",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_00116852",
                "FUN_0010afd5",
                "FUN_0010e5db",
                "FUN_00116b90",
                "FUN_0010a424",
                "FUN_0010c1c6",
                "FUN_0010e7c2",
                "FUN_001125fa",
                "FUN_0011256b",
                "FUN_0011173a",
                "FUN_0010b0fa",
                "FUN_00107880",
                "FUN_0010abdd",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_001088ae",
                "FUN_0010e07c",
                "FUN_0010a2b9",
                "FUN_001081e9",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_00116030",
                "FUN_0010c95e",
                "FUN_00114b84",
                "FUN_00104ea2",
                "FUN_0010b948",
                "FUN_00116110",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_00109b2f",
                "FUN_0010eafe",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_00114690",
                "FUN_00108466",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "param_1": "functionPointer1",
                "param_2": "functionPointer2",
                "param_3": "value"
            },
            "code": "\nvoid executeFunction_00114d50(long functionPointer1,long functionPointer2,uint value)\n\n{\n  if (*(int *)(*(long *)(functionPointer1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((value == 2) && (*(int *)(*(long *)(functionPointer2 + 8) + 8) == 2)) {\n    value = (uint)*(byte *)(*(long *)(*(long *)(functionPointer2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(functionPointer1 + 8) + 0x380) + 0x78))(functionPointer1,value != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_function_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00107880",
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00113f50",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_message_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "usageString",
                "pcVar2": "translatedString"
            },
            "code": "\nvoid printUsageMessage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 usageString;\n  char *translatedString;\n  \n  usageString = DAT_001275e0;\n  translatedString = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,translatedString,usageString);\n  translatedString = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,translatedString);\n  translatedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,translatedString);\n  FUN_00104a35(DAT_001275e0,outputFile);\n  if (exitCode == 0) {\n    translatedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,translatedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "exit",
                "FUN_00104a35"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_message_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorType",
                "param_2": "errorSource",
                "param_3": "errorCause",
                "param_4": "errorDetail1",
                "param_5": "errorDetail2",
                "param_6": "errorDetail3",
                "param_7": "errorDetail4",
                "param_8": "errorDetail5",
                "param_9": "errorMessage",
                "param_10": "errorCode",
                "param_11": "errorArray",
                "param_12": "errorFormat",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "isError",
                "iVar1": "bfdError",
                "uVar2": "errorText",
                "local_100": "bufferSize1",
                "local_fc": "bufferSize2",
                "local_f8": "stackPointer1",
                "local_f0": "localBuffer",
                "local_e8": "extraBuffer",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "param1Copy",
                "local_a8": "param2Copy",
                "local_98": "param3Copy",
                "local_88": "param4Copy",
                "local_78": "param5Copy",
                "local_68": "param6Copy",
                "local_58": "param7Copy",
                "local_48": "param8Copy"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorType,undefined4 errorSource,undefined4 errorCause,undefined4 errorDetail1,\n                 undefined4 errorDetail2,undefined4 errorDetail3,undefined4 errorDetail4,undefined4 errorDetail5,\n                 long errorMessage,long errorCode,long *errorArray,char *errorFormat,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char isError;\n  int bfdError;\n  undefined8 errorText;\n  undefined4 bufferSize1;\n  undefined4 bufferSize2;\n  undefined *stackPointer1;\n  undefined *localBuffer;\n  undefined extraBuffer [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  undefined4 param5Copy;\n  undefined4 param6Copy;\n  undefined4 param7Copy;\n  undefined4 param8Copy;\n  \n  if (isError != '\\0') {\n    param1Copy = errorType;\n    param2Copy = errorSource;\n    param3Copy = errorCause;\n    param4Copy = errorDetail1;\n    param5Copy = errorDetail2;\n    param6Copy = errorDetail3;\n    param7Copy = errorDetail4;\n    param8Copy = errorDetail5;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorText = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorText = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_001275e0,_stderr);\n  if (errorCode != 0) {\n    if (errorMessage == 0) {\n      errorMessage = FUN_001125fa(errorCode);\n    }\n    if ((errorArray != (long *)0x0) && (*errorArray != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMessage);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMessage);\nLAB_001127c1:\n  if (errorFormat != (char *)0x0) {\n    stackPointer1 = &stack0x00000008;\n    localBuffer = extraBuffer;\n    bufferSize1 = 0x20;\n    bufferSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,errorFormat,&bufferSize1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorText);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "fputs",
                "fwrite",
                "fflush",
                "FUN_001125fa",
                "vfprintf",
                "fprintf",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00107880",
                "FUN_00104d25",
                "FUN_00115dc0",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_0010551d",
                "FUN_00114690",
                "FUN_0010808f",
                "FUN_00108466"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00109b52",
                "FUN_00116b90",
                "FUN_001088ae",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_data_structure_00113b4a",
                "param_1": "inputValue",
                "lVar1": "dataStructurePointer"
            },
            "code": "\nlong initializeDataStructure_00113b4a(long inputValue)\n\n{\n  long dataStructurePointer;\n  \n  if (inputValue != 0) {\n    dataStructurePointer = FUN_00112904(0x15,0);\n    if (dataStructurePointer == 0) {\n      dataStructurePointer = 0;\n    }\n    else {\n      *(long *)(dataStructurePointer + 0x10) = inputValue;\n    }\n    return dataStructurePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_metadata_0010edb4",
                "param_1": "file_info",
                "param_2": "new_filename",
                "param_3": "file_type",
                "param_4": "file_size",
                "cVar1": "success_flag",
                "iVar2": "filename_comparison_result",
                "uVar3": "updated_metadata_result",
                "in_R10": "unused_variable"
            },
            "code": "\nundefined8 update_file_metadata_0010edb4(long file_info,undefined8 new_filename,undefined4 file_type,ulong file_size)\n\n{\n  char success_flag;\n  int filename_comparison_result;\n  undefined8 updated_metadata_result;\n  undefined8 unused_variable;\n  \n  if (*(long *)(file_info + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_info + 0x1f0) < file_size) {\n    *(ulong *)(file_info + 0x1f0) = file_size;\n  }\n  filename_comparison_result = filename_cmp(new_filename);\n  if (filename_comparison_result != 0) {\n    success_flag = FUN_0010e2f0(file_info,0x84,0,file_size,new_filename);\n    if (success_flag == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_info + 0x210) = new_filename;\n  }\n  updated_metadata_result = FUN_0010e2f0(file_info,0x44,file_type,file_size - *(long *)(file_info + 0x200),0,unused_variable);\n  return updated_metadata_result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_metadata_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0010914e",
                "FUN_001126c0",
                "FUN_0010554f",
                "FUN_00108fe8",
                "FUN_00119e70",
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00108fb9",
                "FUN_0010b6ea",
                "FUN_0010bc80",
                "FUN_0010871c",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00104a35",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_00112996",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_00116b90",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bf20",
                "FUN_0010c2d2",
                "FUN_0010bd62",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "dataPointer",
                "param_2": "numIterations",
                "cVar1": "successFlag",
                "__ptr": "bufferPtr",
                "__s": "stringPtr",
                "sVar2": "stringLength",
                "__s_00": "modifiedStringPtr",
                "in_R10": "constantValue",
                "iVar3": "iterationCount",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] processData_0010e5db(long dataPointer,int numIterations)\n\n{\n  char successFlag;\n  void *bufferPtr;\n  char *stringPtr;\n  size_t stringLength;\n  char *modifiedStringPtr;\n  ulong constantValue;\n  int iterationCount;\n  undefined returnValue [16];\n  \n  iterationCount = 0;\n  do {\n    if (numIterations <= iterationCount) {\n      returnValue = FUN_00109ed3(dataPointer,0x66,0,dataPointer + 0x188,dataPointer + 400,constantValue);\n      return returnValue;\n    }\n    if (*(char *)(*(long *)(dataPointer + 0x60) + 0x1c) == '\\0') {\n      bufferPtr = (void *)FUN_00109b2f(dataPointer);\n      free(bufferPtr);\n    }\n    else {\n      stringPtr = (char *)FUN_00109b2f(dataPointer);\n      stringLength = strlen(stringPtr);\n      modifiedStringPtr = (char *)xmalloc(stringLength + 3);\n      sprintf(modifiedStringPtr,\":t%s\",stringPtr);\n      free(stringPtr);\n      successFlag = FUN_0010e2f0(dataPointer,0x80,0,0,modifiedStringPtr);\n      if (successFlag == '\\0') {\n        returnValue._8_8_ = 0;\n        returnValue._0_8_ = constantValue;\n        return returnValue << 0x40;\n      }\n      free(modifiedStringPtr);\n    }\n    iterationCount = iterationCount + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109ed3",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "initialize_application_00104d25",
                "param_7": "param"
            },
            "code": "\nvoid initializeApplication_00104d25(void)\n\n{\n  undefined8 param;\n  \n  DAT_00127a20 = 1;\n  FUN_001126c0(0,param,0,0);\n  FUN_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "FUN_00114b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "initialize_application_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "merge_debugging_information_0010551d",
                "puVar1": "ptr",
                "bVar2": "byte",
                "puVar3": "ptr0",
                "pcVar4": "functionPointer",
                "puVar5": "ptr1",
                "uVar6": "ulong0",
                "uVar7": "ulong1",
                "__s": "string1",
                "cVar8": "char0",
                "cVar9": "char1",
                "uVar10": "uint0",
                "iVar11": "int0",
                "uVar12": "uint1",
                "uVar13": "uint2",
                "iVar14": "int1",
                "plVar15": "pointer0",
                "uVar16": "ulong2",
                "uVar17": "ulong3",
                "sVar18": "size0",
                "pcVar19": "string2",
                "pcVar28": "string5",
                "sVar26": "size1",
                "pcVar33": "string6",
                "puVar29": "ptr2",
                "lVar21": "long0",
                "uVar20": "ulong4",
                "lVar27": "long1",
                "lVar25": "long2",
                "unaff_RBX": "pointer1",
                "unaff_R13": "pointer2",
                "pvVar36": "pointer3",
                "ppuVar37": "pointer4",
                "bVar38": "bool0",
                "bVar39": "byte0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong mergeDebuggingInformation_0010551d(void)\n\n{\n  uint *ptr;\n  byte byte;\n  undefined *ptr0;\n  code *functionPointer;\n  undefined8 *ptr1;\n  ulong ulong0;\n  ulong ulong1;\n  char *string1;\n  char char0;\n  char char1;\n  uint uint0;\n  int int0;\n  uint uint1;\n  undefined4 uint2;\n  int int1;\n  long *pointer0;\n  undefined8 ulong2;\n  undefined8 ulong3;\n  size_t size0;\n  char *string2;\n  void *__ptr;\n  void *__ptr_00;\n  ulong ulong4;\n  long long0;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long long2;\n  FILE *string1_00;\n  size_t size1;\n  long long1;\n  long *pointer1;\n  char *string5;\n  undefined8 *ptr2;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *string6;\n  undefined4 *ptr04;\n  char **ppcVar35;\n  long *pointer2;\n  void *pointer3;\n  undefined8 *unaff_R14;\n  undefined **pointer4;\n  bool bool0;\n  byte byte0;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  byte0 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  FUN_001126c0(0);\n  free(pointer1);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  ptr2 = DAT_001279b0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (char1 = FUN_00113fb0(), char1 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (long2 = *(long *)(unaff_RBP + 0x40), long2 == 0))))\n    goto LAB_001151a2;\n    pointer1 = (long *)xmalloc(0x20);\n    pointer1[1] = 0;\n    char1 = bfd_get_full_section_contents();\n    if (char1 != '\\0') {\n      long1 = FUN_001163d0();\n      pointer1[2] = long1;\n      if ((long1 == long2) || (char1 = bfd_set_section_size(), char1 != '\\0')) {\n        pointer1[3] = (long)pointer2;\n        *pointer1 = unaff_RBP;\n        pointer2 = pointer1;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)pointer1[1]);\n        free(pointer1);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (long2 = *(long *)(unaff_RBP + 8); long2 != 0; long2 = *(long *)(long2 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    long2 = bfd_get_section_by_name();\n    if (long2 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(long2 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      size0 = *(size_t *)(long2 + 0x40);\n      string1_00 = fopen((char *)ptr2[2],\"w\");\n      if (string1_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(ptr2[2],0,0);\n      }\n      else {\n        char1 = bfd_malloc_and_get_section();\n        if (char1 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((size0 != 0) &&\n                (size1 = fwrite(in_stack_00000140,1,size0,string1_00), size1 != size0)) {\n          piVar23 = __errno_location();\n          string6 = strerror(*piVar23);\n          ulong3 = ptr2[2];\n          ulong2 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(ulong2,ulong3,string6);\n          free(in_stack_00000140);\n          fclose(string1_00);\n          return 0;\n        }\n        fclose(string1_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    long2 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (long2 != 0) {\n      ulong3 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(ulong3);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    long2 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      ulong3 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,ulong3,long2);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      ulong4 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = ulong4;\n        ulong0 = uVar24;\n        ulong1 = ulong4;\n        if (uVar22 != 0) {\n          while ((uVar30 = ulong0, ulong1 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(ulong4 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            ulong0 = ulong4;\n            ulong1 = uVar22;\n          }\n        }\n        ulong4 = uVar30;\n      }\nLAB_00107db8:\n      if (ulong4 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        ulong4 = *(long *)(ulong4 + 0x40) + *(long *)(ulong4 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (ulong4 < 0xfffffffffffff001) {\n          uVar24 = ulong4 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  plVar32 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = FUN_0010554f();\n    return uVar24;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pointer4 = &PTR_sstring1tab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    ptr04 = puStack0000000000000020;\n    for (long2 = 0x18; long2 != 0; long2 = long2 + -1) {\n      *ptr04 = 0;\n      ptr04 = ptr04 + (ulong)byte0 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      ptr0 = *pointer4;\n      long2 = bfd_get_section_by_name();\n      long1 = bfd_get_section_by_name();\n      if ((long2 != 0) && (long1 != 0)) {\n        long2 = *(long *)(long2 + 0x40);\n        __ptr = (void *)xmalloc(long2);\n        char1 = bfd_get_section_contents();\n        if (char1 == '\\0') {\n          uint2 = bfd_get_error();\n          bfd_errmsg(uint2);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(long1 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uint2 = bfd_get_error();\n            bfd_errmsg(uint2);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pointer3 = __ptr; pointer3 <= (void *)((long)__ptr + long2 + -0xc);\n                  pointer3 = (void *)((long)pointer3 + 0xc)) {\n                ulong4 = (**(code **)(unaff_R14[1] + 0x40))(pointer3);\n                byte = *(byte *)((long)pointer3 + 4);\n                uint2 = (**(code **)(unaff_R14[1] + 0x58))((long)pointer3 + 6);\n                long1 = (**(code **)(unaff_R14[1] + 0x40))((long)pointer3 + 8);\n                if (byte == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + long1;\n                }\n                else {\n                  uVar22 = (ulong4 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    string6 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      size0 = strlen(string6);\n                      if (((size0 == 0) || (string5 = string6 + (size0 - 1), *string5 != '\\')) ||\n                         ((ulong)((long)__ptr + long2) < (long)pointer3 + 0x10U)) goto LAB_001077fb;\n                      *string5 = '\\0';\n                      pointer3 = (void *)((long)pointer3 + 0xc);\n                      int0 = (**(code **)(unaff_R14[1] + 0x40))(pointer3);\n                      ulong4 = (ulong)(uint)(int0 + (int)lStack0000000000000088);\n                      if (uVar24 <= ulong4) break;\n                      string6 = (char *)concat(string6,(long)__ptr_00 + ulong4,0);\n                      *string5 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = string6;\n                    }\n                    ulong3 = *unaff_R14;\n                    string5 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,string5,ulong3,ptr0,((long)pointer3 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)byte,uint2,long1,string6);\n                    char1 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,byte);\n                    if (char1 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulong3 = *unaff_R14;\n                    string6 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,string6,ulong3,ptr0,((long)pointer3 - (long)__ptr) / 0xc,\n                            ulong4 & 0xffffffff,(ulong)byte,((long)pointer3 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pointer4 = pointer4 + 2;\n    } while (pointer4 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (char1 = FUN_0010c892(), char1 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      long2 = 0;\n      for (pointer0 = plVar32; pointer0 < plVar32 + in_stack_00000010; pointer0 = pointer0 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((long2 != 0) || (long2 = FUN_00112894(), long2 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            string6 = (char *)0x0;\n            string5 = in_stack_00000150;\n            while (((*string5 != '\\0' && (size0 = strlen(string5), string5[size0 - 1] == '\\')) &&\n                   (pointer0 + 1 < plVar32 + in_stack_00000010))) {\n              string2 = (char *)xstrdup(string5);\n              size0 = strlen(string2);\n              string2[size0 - 1] = '\\0';\n              string5 = (char *)concat(string2,*(undefined8 *)(pointer0[1] + 8),0);\n              free(string2);\n              free(string6);\n              pointer0 = pointer0 + 1;\n              string6 = string5;\n            }\n            FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         string5);\n            in_stack_00000018 = FUN_0011173a(puStack0000000000000020,long2,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            FUN_00108b3e();\n            FUN_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      FUN_00108863();\n      if ((long2 != 0) && (char1 = FUN_0010c892(), char1 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        string6 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      ptr2 = (undefined8 *)&stack0x00000148;\n      for (long2 = 0x22; long2 != 0; long2 = long2 + -1) {\n        *(undefined4 *)ptr2 = 0;\n        ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte0 * -8 + 4);\n      }\n      char1 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        long2 = plVar32[in_stack_000000d0];\n        char0 = bfd_coff_get_syment();\n        long1 = in_stack_000000d8;\n        if (char0 == '\\0') {\n          uint2 = bfd_get_error();\n          bfd_errmsg(uint2);\n          string6 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulong3 = dcgettext(0,string6,5);\n          FUN_00119ed0(ulong3);\n          goto LAB_00105981;\n        }\n        string6 = *(char **)(long2 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (char0 = bfd_coff_get_auxent(), char0 == '\\0')) {\n          uint2 = bfd_get_error();\n          bfd_errmsg(uint2);\n          string6 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)long1) {\n          if (bStack0000000000000100 != 0x67) {\n            char0 = FUN_0010bbd3(puStack0000000000000020);\n            if (char0 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          char0 = FUN_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = string6;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              int0 = strcmp(string6,\".bb\");\n              if (int0 == 0) {\n                char0 = FUN_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              int0 = strcmp(string6,\".eb\");\n              if (int0 == 0) {\n                char0 = FUN_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              int0 = strcmp(string6,\".bf\");\n              if (int0 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  long1 = FUN_0010dac0();\n                  if ((long1 == 0) ||\n                     (char1 = FUN_0010bc80(puStack0000000000000020), char1 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    int0 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      int0 = in_stack_00000118 - 1;\n                    }\n                    long2 = *(long *)(*(long *)(long2 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      char0 = FUN_0010bf86(puStack0000000000000020,int0 + iVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + long2);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (char0 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                string6 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                int0 = strcmp(string6,\".ef\");\n                if (int0 != 0) goto switchD_00106e1a_caseD_68;\n                if (char1 != '\\0') {\n                  char1 = FUN_0010be1a(puStack0000000000000020);\n                  if (char1 == '\\0') goto LAB_00105981;\n                  char1 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                string6 = \"%ld: unexpected .ef\\n\";\n              }\n              ulong3 = dcgettext(0,string6,5);\n              FUN_00119ed0(ulong3);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          long0 = FUN_0010dac0();\n          if (long0 == 0) goto LAB_00105981;\n          char0 = FUN_00112a33(&stack0x00000140,long2,long1);\n        }\njoined_r0x00107247:\n        if (char0 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = DAT_001278b0 + in_stack_00000010;\n        pointer0 = DAT_001278b0;\n        do {\n          uint0 = *(uint *)(*pointer0 + 0x18);\n          if ((uint0 & 0x1000000) != 0) {\n            *(uint *)(*pointer0 + 0x18) = uint0 & 0xfeffffff;\n          }\n          pointer0 = pointer0 + 1;\n        } while (plVar32 != pointer0);\n      }\n    }\n    else {\n      for (long2 = *(long *)(in_stack_00000008 + 0x90); long2 != 0; long2 = *(long *)(long2 + 8)\n          ) {\n        if (*(long *)(long2 + 0xe8) != 0) {\n          ptr = (uint *)(*(long *)(long2 + 0xe8) + 0x18);\n          *ptr = *ptr | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      int0 = bfd_get_error();\n      if (int0 != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    long2 = xmalloc();\n    plVar32 = DAT_001278b0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278a8 = long2;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        int0 = DAT_001279a0;\n        pointer0 = (long *)plVar32[_in_stack_00000018];\n        functionPointer = (code *)pointer0[4];\n        uint0 = *(uint *)(pointer0 + 3);\n        string6 = (char *)pointer0[1];\n        string5 = string6;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          ptr2 = DAT_001279a8;\n          while( true ) {\n            if ((int0 <= iVar31) || (string2 = (char *)ptr2[5], string2 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (string2 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          int1 = strcmp(string2,string6);\n          if (int1 != 0) {\n            ptr2 = (undefined8 *)*ptr2;\n            goto LAB_0010750b;\n          }\n          free(string2);\n          ulong4 = uVar24 + 1;\n          ptr2[5] = \"\";\n          ulong2 = FUN_0011a2e0(ptr2);\n          ulong3 = DAT_001278d0;\n          *(undefined8 *)(long2 + uVar24 * 8) = ulong2;\n          long1 = htab_elements(ulong3);\n          if ((long1 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          char1 = *string6;\n          if (char1 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          string6 = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            long1 = unaff_R14[1];\n            char1 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        long1 = htab_elements(DAT_001278d0);\n        ulong4 = uVar24;\n        if ((long1 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (string6 != (char *)0x0) {\nLAB_001064eb:\n          if (((*string6 == '_') && (string6[1] == '_')) &&\n             (int0 = strcmp(string6 + (string6[2] == '_'),\"__gnu_lto_slim\"), int0 == 0)) {\n            ulong3 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            FUN_00119dd0(ulong3);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = string6;\n        long1 = htab_find(DAT_001278d0);\n        if (((long1 == 0) || (string5 = *(char **)(long1 + 8), string6 == string5)) &&\n           (string5 = string6, ppcVar35 = DAT_001278d8, (uint0 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            int0 = strcmp(*ppcVar35,string6);\n            if (int0 == 0) {\n              string5 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        pointer0[1] = (long)string5;\n        char1 = *string5;\n        if (char1 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        string6 = DAT_00127908;\n        long1 = unaff_R14[1];\n        if (*(char *)(long1 + 0x1c) == char1) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((uint0 & 0x82) == 0 && (functionPointer != bfd_map_over_sections)) &&\n                ((*(byte *)(pointer0[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            string5 = string5 + 1;\n            pointer0[1] = (long)string5;\n            goto joined_r0x00106565;\n          }\n          char1 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (char1 == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            string5 = string5 + 1;\n            pointer0[1] = (long)string5;\n            size0 = strlen(string5);\n            long1 = size0 + 2;\n            goto LAB_001066bc;\n          }\n          *string5 = char1;\n          pointer0[1] = (long)string5;\n          uVar24 = ulong4;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = ulong4;\n            if (string6 == (char *)0x0) goto LAB_00105b32;\n            size0 = strlen(string5);\n            size1 = strlen(string6);\n            string6 = (char *)xmalloc(size1 + size0 + 1);\n            string2 = string6;\n          }\n          else {\nLAB_0010668d:\n            string6 = DAT_00127908;\n            if ((*(char *)(long1 + 0x1c) != '\\0') && (char1 != *(char *)(long1 + 0x1c)))\n            goto joined_r0x00106565;\n            size0 = strlen(string5);\n            long1 = size0 + 2;\n            if (string6 == (char *)0x0) {\n              string2 = (char *)xmalloc(long1);\n            }\n            else {\nLAB_001066bc:\n              size0 = strlen(string6);\n              string2 = (char *)xmalloc(size0 + long1);\n            }\n            string6 = string2 + 1;\n            *string2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          string1 = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(string6,DAT_00127908);\n            size0 = strlen(string1);\n            string6 = string6 + size0;\n          }\n          strcpy(string6,string5);\n          pointer0[1] = (long)string2;\n          string5 = string2;\n          uVar24 = ulong4;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((uint0 & 0x20) == 0) &&\n           (((uint0 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(pointer0[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uint0 & 0x82) != 0 || ((*(byte *)(pointer0[4] + 0x25) & 0x10) != 0)))) ||\n             (int0 = bfd_decode_symclass(pointer0), int0 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              long1 = htab_find();\n              if (long1 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = string5;\n              htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uint0 & 0x82) == 0) && (functionPointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(pointer0[4] + 0x25) & 0x10) == 0)) {\n            if ((uint0 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (long1 = *(long *)(pointer0[4] + 0xd0), long1 == 0)) ||\n                 (*(long *)(long1 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  char1 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            char1 = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (char1 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          long1 = htab_find();\n          if (long1 != 0) {\nLAB_0010687f:\n            ulong3 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            FUN_00119ed0(ulong3);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = string5;\n          htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uint0 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = string5;\n            htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          long1 = htab_find();\n          if (long1 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((uint0 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            long1 = htab_find();\n            if (long1 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = string5;\n            htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          char1 = FUN_001159d0(pointer0[4]);\n          if (char1 == '\\0') {\n            if (((uint0 & 0x800002) == 0) && (functionPointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uint0 & 0x82) != 0) {\n                char1 = FUN_00115d70(string5);\n                if ((char1 == '\\0') &&\n                   ((long1 = htab_elements(DAT_001279d8), long1 == 0 ||\n                    (char1 = FUN_00115d70(string5), char1 != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (uint1 = *(uint *)(pointer0 + 3), (uint1 & 0x200000) != 0)) ||\n                       (long1 = *pointer0, long1 == 0)) ||\n                      ((*(int *)(*(long *)(long1 + 8) + 8) != 5 || (*(long *)(long1 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)pointer0 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uint1 = *(uint *)(pointer0 + 3);\n                }\n                *(uint *)(pointer0 + 3) = uint1 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uint0 & 1) != 0) && (char1 = FUN_00115d70(string5), char1 != '\\0')) {\n                *(uint *)(pointer0 + 3) = *(uint *)(pointer0 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (char1 = FUN_00115d70(string5), char1 != '\\0')) {\n                *(uint *)(pointer0 + 3) = *(uint *)(pointer0 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (functionPointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(long2 + uVar24 * 8) = pointer0;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      ptr2 = DAT_001279a8;\n      int0 = DAT_001279a0;\n      for (long1 = 0; long1 < int0; long1 = long1 + 1) {\n        string6 = (char *)ptr2[5];\n        if (string6 == (char *)0x0) {\n          long0 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          ulong3 = FUN_0011a2e0(ptr2,in_stack_00000008);\n          *(undefined8 *)(long2 + long0) = ulong3;\n          int0 = DAT_001279a0;\n        }\n        else if (string6 != \"\") {\n          ulong3 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          FUN_00119dd0(ulong3,string6);\n        }\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    bool0 = DAT_00127980 != '\\0';\n    *(undefined8 *)(long2 + uVar24 * 8) = 0;\n    if ((bool0) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      int0 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((int0 != 5) && (int0 != 2)) {\n        ulong3 = **(undefined8 **)(in_stack_00000008 + 8);\n        ulong2 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,in_stack_00000008,0,ulong2,ulong3);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      char1 = FUN_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (char1 == '\\0') goto LAB_00105d8c;\n      long2 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      long1 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((long2 == 0) || (long1 == 0)) ||\n          (char1 = bfd_set_section_size(long2,in_stack_00000110), char1 == '\\0')) ||\n         (char1 = bfd_set_section_size(long1,in_stack_00000140), char1 == '\\0')) {\n        string6 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulong3 = dcgettext(0,string6,5);\n        FUN_001126c0(0,in_stack_00000008,0,ulong3);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(long2 + 0x7c) = 2;\n      *(undefined4 *)(long1 + 0x7c) = 0;\n      char1 = bfd_set_section_contents\n                        (in_stack_00000008,long2,in_stack_000000c0,0,in_stack_00000110);\n      if ((char1 == '\\0') ||\n         (char1 = bfd_set_section_contents\n                            (in_stack_00000008,long1,in_stack_000000e0,0,in_stack_00000140),\n         char1 == '\\0')) {\n        string6 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    long2 = htab_elements(DAT_001279f8);\n    if (((long2 != 0) ||\n        (((((((long2 = htab_elements(DAT_00127a08), long2 != 0 ||\n              (long2 = htab_elements(DAT_001279e8), long2 != 0)) ||\n             (long2 = htab_elements(DAT_001279e0), long2 != 0)) ||\n            ((long2 = htab_elements(DAT_001279d8), long2 != 0 ||\n             (long2 = htab_elements(DAT_001279d0), long2 != 0)))) ||\n           (long2 = htab_elements(DAT_001278d0), long2 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278a8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,FUN_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,FUN_00116110,in_stack_00000008);\n  for (ptr2 = DAT_001279c0; ptr1 = DAT_001279b8, ptr2 != (undefined8 *)0x0;\n      ptr2 = (undefined8 *)*ptr2) {\n    char1 = bfd_set_section_contents(in_stack_00000008,ptr2[5],ptr2[4],0,ptr2[3]);\n    if (char1 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,ptr2[5],0);\n      return 0;\n    }\n  }\n  for (; ptr1 != (undefined8 *)0x0; ptr1 = (undefined8 *)*ptr1) {\n    ulong3 = *(undefined8 *)(ptr1[5] + 0x60);\n    char1 = bfd_set_section_contents(in_stack_00000008,ulong3,ptr1[4],0,ptr1[3]);\n    if (char1 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,ulong3,0);\n      return 0;\n    }\n  }\n  if (pointer2 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      ulong3 = *unaff_R14;\n      ulong2 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      FUN_00119ed0(ulong2,ulong3);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (char1 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       long2 = DAT_00127a10, char1 != '\\0')) {\n      uint0 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)uint0;\n      if ((char)uint0 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar24;\n        }\n        char1 = bfd_alt_mach_code(in_stack_00000008,DAT_00127910 & 0xffffffff);\n        ulong4 = DAT_00127910;\n        if (char1 != '\\0') {\n          return uVar24;\n        }\n        ulong3 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        FUN_00119ed0(ulong3,ulong4);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          ulong3 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(ulong3);\n          return uVar24;\n        }\n        ulong3 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        FUN_00119ed0(ulong3);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return uVar24;\n      }\n      ulong3 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,in_stack_00000008,0,ulong3);\n    }\n    else {\n      ulong3 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,ulong3,long2);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  ptr2 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (ptr2 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)pointer2[3];\n        free((void *)pointer2[1]);\n        free(pointer2);\n        pointer2 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(ptr2[0x1a] + 4) == 7)) &&\n       (char1 = FUN_00113fb0(*ptr2,\".gnu.build.attributes\"), char1 != '\\0')) {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = pointer2;\n      }\n      pointer0 = pointer2;\n      if (*(undefined8 **)(*plVar32 + 0x60) == ptr2) {\nLAB_0010625f:\n        string6 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          char1 = bfd_set_section_contents(in_stack_00000008,ptr2,plVar32[1],0,plVar32[2]);\n          if (char1 == '\\0') {\n            ulong3 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            FUN_001126c0(0,in_stack_00000008,ptr2,ulong3);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = pointer0;\n          if (*(undefined8 **)(*pointer0 + 0x60) == ptr2) goto LAB_0010625f;\n          plVar32 = (long *)pointer0[3];\n          pointer0 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        string6 = \"error: failed to locate merged notes\";\n      }\n      ulong3 = dcgettext(0,string6,5);\n      FUN_001126c0(0,in_stack_00000008,ptr2,ulong3);\n    }\nLAB_001061be:\n    ptr2 = (undefined8 *)ptr2[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_debugging_information_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00105828",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "input_string"
            },
            "code": "\nvoid hash_string_00108800(undefined8 *input_string)\n\n{\n  htab_hash_string_00108800(*input_string);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "reverse_and_free_linked_list_0010c1c6",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "puVar1": "next_node",
                "cVar2": "success",
                "__ptr": "current_node"
            },
            "code": "\nundefined reverse_and_free_linked_list_0010c1c6(undefined8 arg1,long arg2,undefined8 arg3,undefined8 arg4,\n                      undefined8 arg5,undefined8 arg6)\n\n{\n  undefined8 *next_node;\n  char success;\n  undefined8 *current_node;\n  \n  current_node = *(undefined8 **)(arg2 + 0x78);\n  while( true ) {\n    if (current_node == (undefined8 *)0x0) {\n      *(undefined8 *)(arg2 + 0x78) = 0;\n      return 1;\n    }\n    success = FUN_0010c05d(arg1,current_node[1],current_node[2],*(undefined4 *)(current_node + 3),current_node[4],arg6,\n                         arg5);\n    if (success == '\\0') break;\n    next_node = (undefined8 *)*current_node;\n    free(current_node);\n    current_node = next_node;\n  }\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "reverse_and_free_linked_list_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "uVar1": "count",
                "lVar2": "value",
                "cVar3": "result",
                "unaff_RBX": "dataPtr",
                "puVar4": "outputPtr",
                "puVar5": "currentOutputPtr",
                "unaff_RBP": "basePtr",
                "uVar6": "index",
                "unaff_R13": "inputPtr"
            },
            "code": "\nvoid processData_001082df(void)\n\n{\n  uint count;\n  long value;\n  char result;\n  long dataPtr;\n  undefined8 *outputPtr;\n  undefined8 *currentOutputPtr;\n  long basePtr;\n  ulong index;\n  undefined8 *inputPtr;\n  \n  count = *(uint *)(dataPtr + 0x78);\n  if (DAT_00127a2c == 7) {\n    outputPtr = inputPtr;\n    for (index = 0; index != count; index = index + 1) {\n      currentOutputPtr = outputPtr;\n      if (((*(long **)inputPtr[index] != (long *)0x0) &&\n          (value = **(long **)inputPtr[index], value != 0)) &&\n         (result = FUN_00115d70(*(undefined8 *)(value + 8),DAT_00127a08), result != '\\0')) {\n        currentOutputPtr = outputPtr + 1;\n        *outputPtr = inputPtr[index];\n      }\n      outputPtr = currentOutputPtr;\n    }\n    *outputPtr = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(basePtr + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_data_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "open_and_read_file_00114d60",
                "param_1": "filePath",
                "iVar1": "isEOF",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMessage",
                "__stream": "fileStream",
                "uVar5": "allocatedMemory",
                "__errno_location": "getErrnoLocation",
                "strerror": "getErrorString",
                "dcgettext": "getTranslatedMessage",
                "lVar7": "bytesRead",
                "lVar8": "bufferSize",
                "sVar6": "readSize"
            },
            "code": "\nvoid openAndReadFile_00114d60(long filePath)\n\n{\n  int isEOF;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  FILE *fileStream;\n  undefined8 allocatedMemory;\n  size_t readSize;\n  long bytesRead;\n  long bufferSize;\n  \n  fileStream = fopen(*(char **)(filePath + 0x10),\"r\");\n  if (fileStream == (FILE *)0x0) {\n    errnoLocation = __errno_location();\n    errorMessage = strerror(*errnoLocation);\n    allocatedMemory = *(undefined8 *)(filePath + 0x10);\n    translatedMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    FUN_00119dd0(translatedMessage,allocatedMemory,errorMessage);\n  }\n  bufferSize = 0x1000;\n  bytesRead = 0;\n  allocatedMemory = xmalloc(0x1000);\n  *(undefined8 *)(filePath + 0x20) = allocatedMemory;\n  while( true ) {\n    isEOF = feof(fileStream);\n    if (isEOF != 0) {\n      *(long *)(filePath + 0x18) = bytesRead;\n      fclose(fileStream);\n      return;\n    }\n    if (bytesRead == bufferSize) {\n      bufferSize = bytesRead * 2;\n      allocatedMemory = xrealloc(*(undefined8 *)(filePath + 0x20),bufferSize);\n      *(undefined8 *)(filePath + 0x20) = allocatedMemory;\n    }\n    readSize = fread((void *)(*(long *)(filePath + 0x20) + bytesRead),1,bufferSize - bytesRead,fileStream);\n    isEOF = ferror(fileStream);\n    if (isEOF != 0) break;\n    bytesRead = bytesRead + readSize;\n  }\n  allocatedMemory = *(undefined8 *)(filePath + 0x10);\n  translatedMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n  FUN_00119dd0(translatedMessage,allocatedMemory);\n}\n\n",
            "called": [
                "fopen",
                "FUN_0010543c",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "open_and_read_file_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_section_and_print_00108808",
                "unaff_RBP": "basePointer",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid findSectionAndPrint_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  long basePointer;\n  \n  sectionAddress = *(undefined8 *)(basePointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionAddress);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "find_section_and_print_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "ppbVar2": "htab_entry",
                "pbVar3": "line_ptr",
                "bVar4": "current_char",
                "pbVar5": "next_char",
                "unaff_EBP": "line_count",
                "pbVar6": "ws_ptr",
                "unaff_R13": "dcgettext_param",
                "pbVar7": "end_of_line",
                "unaff_R14": "line_ptr",
                "unaff_R15": "current_line",
                "in_stack_00000008": "format_string",
                "in_stack_00000010": "return_value"
            },
            "code": "\nvoid process_lines_00104d1c(void)\n\n{\n  undefined8 uVar1;\n  byte **htab_entry;\n  byte *line_ptr;\n  byte current_char;\n  byte *next_char;\n  int line_count;\n  byte *ws_ptr;\n  undefined8 dcgettext_param;\n  byte *end_of_line;\n  byte *line_ptr;\n  byte *current_line;\n  undefined8 format_string;\n  undefined8 *return_value;\n  \n  *line_ptr = 0;\nLAB_00114520:\n  line_ptr = line_ptr + 1;\n  do {\n    current_char = *line_ptr;\n    end_of_line = line_ptr;\n    if (current_char == 10) {\n      *line_ptr = 0;\n      if (line_ptr[1] == 0xd) {\n        end_of_line = line_ptr + 1;\n        next_char = line_ptr + 2;\n      }\n      else {\n        next_char = line_ptr + 1;\n      }\n    }\n    else if ((char)current_char < '\\v') {\n      if (current_char != 0) goto LAB_00114520;\n      next_char = line_ptr + 1;\n    }\n    else {\n      if (current_char != 0xd) break;\n      *line_ptr = 0;\n      next_char = line_ptr + 1;\n      if (line_ptr[1] == 10) {\n        next_char = line_ptr + 2;\n        end_of_line = line_ptr + 1;\n      }\n    }\n    current_char = *current_line;\n    while ((current_char == 0x20 || (ws_ptr = current_line, current_char == 9))) {\n      ws_ptr = current_line + 1;\n      current_line = current_line + 1;\n      current_char = *ws_ptr;\n    }\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = ws_ptr[1];\n      ws_ptr = ws_ptr + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_char = ws_ptr[1];\n      if ((((((current_char == 9) || (current_char == 0x20)) &&\n            ((current_char = ws_ptr[2], current_char == 9 || (current_char == 0x20)))) &&\n           ((current_char = ws_ptr[3], current_char == 9 || (current_char == 0x20)))) &&\n          ((current_char = ws_ptr[4], current_char == 9 || (current_char == 0x20)))) &&\n         ((current_char = ws_ptr[5], current_char == 9 || (current_char == 0x20)))) {\n        current_char = ws_ptr[6];\n        line_ptr = ws_ptr + 6;\n        if ((current_char == 9) || (current_char == 0x20)) {\n          do {\n            do {\n              current_char = line_ptr[1];\n              line_ptr = line_ptr + 1;\n            } while (current_char == 0x20);\n          } while (current_char == 9);\n        }\n      }\n      if ((0xd < current_char) || ((-0x2402L >> (current_char & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(uVar1,format_string,line_count);\n      }\n    }\nLAB_00114599:\n    *ws_ptr = 0;\n    if (current_line < ws_ptr) {\n      htab_entry = (byte **)htab_find_slot();\n      *htab_entry = current_line;\n    }\n    line_count = line_count + 1;\n    line_ptr = next_char;\n    current_line = next_char;\n    if (end_of_line[1] == 0) {\n      *return_value = dcgettext_param;\n      return;\n    }\n  } while( true );\n  if (current_char == 0x23) {\n    process_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_process_binary_00119940",
                "param_1": "binaryAddress",
                "param_2": "errorMessage",
                "uVar1": "errorString",
                "local_20": "scanResult"
            },
            "code": "\nvoid checkAndProcessBinary_00119940(undefined8 binaryAddress,undefined8 errorMessage)\n\n{\n  undefined8 errorString;\n  char *scanResult [2];\n  \n  bfd_scan_vma(binaryAddress,scanResult,0);\n  if (*scanResult[0] == '\\0') {\n    return;\n  }\n  errorString = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorString,errorMessage,binaryAddress);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_process_binary_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_with_condition_0010540e",
                "param_1": "undefinedParam",
                "param_2": "address",
                "param_3": "condition"
            },
            "code": "\nvoid executeFunctionWithCondition_0010540e(undefined8 undefinedParam,long address,uint condition)\n\n{\n  long in_RAX;\n  \n  if ((condition == 2) && (*(int *)(*(long *)(address + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(address + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(in_RAX + 0x380) + 0x78))(undefinedParam,condition != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_with_condition_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "execute_recursive_00113a4d",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "cVar1": "result",
                "uVar2": "returnValue",
                "puVar3": "ptr",
                "auVar4": "auxiliaryVar"
            },
            "code": "\nundefined8\nexecute_recursive_00113a4d(undefined8 param1,undefined8 param2,long param3,undefined8 param4,\n            undefined8 param5)\n\n{\n  char result;\n  undefined8 returnValue;\n  undefined8 *ptr;\n  undefined auxiliaryVar [16];\n  \n  result = FUN_00112502(param1,param2,*(undefined8 *)(param3 + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(param3 + 0x28) == 0 && (*(long *)(param3 + 8) != 0)) ||\n      (result = FUN_0010ec73(param2,*(undefined8 *)(param3 + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(param3 + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(param3 + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = FUN_001135a5(param1,param2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(param3 + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = execute_recursive_00113a4d(param1,param2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    auxiliaryVar = FUN_00112502(param1,param2,*(undefined8 *)(param3 + 0x20));\n    if (auxiliaryVar[0] != '\\0') {\n      if ((*(long *)(param3 + 0x28) == 0) && (*(long *)(param3 + 8) != 0)) {\n        return auxiliaryVar._0_8_;\n      }\n      returnValue = FUN_0010ed2c(param2,*(undefined8 *)(param3 + 0x20),auxiliaryVar._8_8_,param5);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112502",
                "FUN_0010ec73",
                "FUN_001135a5",
                "FUN_0010ed2c",
                "FUN_00113a4d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "execute_recursive_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryBlock"
            },
            "code": "\nundefined8 freeMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryBlock;\n  undefined8 param_7;\n  \n  param_7 = returnValue;\n  free(memoryBlock);\n  return param_7;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "free_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_0010922b",
                "FUN_0010abdd",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_001135a5",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010a94e",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_pointer_00113b71",
                "param_1": "inputValue",
                "lVar1": "pointer"
            },
            "code": "\nlong initializePointer_00113b71(long inputValue)\n\n{\n  long pointer;\n  \n  if (inputValue != 0) {\n    pointer = FUN_00112904(0x14,0);\n    if (pointer == 0) {\n      pointer = 0;\n    }\n    else {\n      *(long *)(pointer + 0x10) = inputValue;\n    }\n    return pointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "format_and_print_value_00109dfe",
                "param_1": "inputValue",
                "lVar1": "currentValue",
                "local_40": "outputString"
            },
            "code": "\nvoid formatAndPrintValue_00109dfe(long inputValue)\n\n{\n  long currentValue;\n  char outputString [40];\n  \n  if (*(long *)(inputValue + 0x70) != 0) {\n    FUN_00109cf4(inputValue,*(long *)(inputValue + 0x70),0);\n    return;\n  }\n  currentValue = *(long *)(inputValue + 0x68);\n  *(long *)(inputValue + 0x68) = currentValue + 1;\n  *(long *)(inputValue + 0x70) = currentValue;\n  sprintf(outputString,\"%ld=%ld\",currentValue,currentValue);\n  FUN_00109b52(inputValue,outputString,currentValue,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_and_print_value_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_string_00109bbb",
                "param_1": "inputPointer",
                "__s": "stringPtr",
                "sVar1": "stringLength"
            },
            "code": "\nbool appendSemicolonToString_00109bbb(long inputPointer)\n\n{\n  char *stringPtr;\n  size_t stringLength;\n  \n  if (*(long *)(inputPointer + 0x60) != 0) {\n    stringPtr = *(char **)(*(long *)(inputPointer + 0x60) + 0x30);\n    if (stringPtr != (char *)0x0) {\n      stringLength = strlen(stringPtr);\n      *(undefined2 *)(stringPtr + stringLength) = 0x3b;\n    }\n    return stringPtr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_semicolon_to_string_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "reconstruct_string_0010ae0e",
                "param_1": "input_ptr",
                "lVar1": "struct_ptr",
                "lVar2": "str_ptr",
                "__ptr": "temp_ptr",
                "pcVar3": "temp_str",
                "sVar4": "len_1",
                "sVar5": "len_2",
                "pcVar6": "result_str",
                "uVar7": "retval",
                "lVar8": "result_len",
                "uVar9": "count",
                "uVar10": "temp_count"
            },
            "code": "\nundefined8 reconstruct_string_0010ae0e(long input_ptr)\n\n{\n  long struct_ptr;\n  long str_ptr;\n  void *temp_ptr;\n  char *temp_str;\n  size_t len_1;\n  size_t len_2;\n  char *result_str;\n  undefined8 retval;\n  long result_len;\n  uint count;\n  ulong temp_count;\n  \n  retval = 0;\n  struct_ptr = *(long *)(input_ptr + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (result_str = *(char **)(struct_ptr + 0x20), result_str != (char *)0x0)) {\n    len_1 = strlen(*(char **)(struct_ptr + 8));\n    len_2 = strlen(result_str);\n    str_ptr = *(long *)(struct_ptr + 0x28);\n    if (str_ptr == 0) {\n      result_len = len_1 + len_2 + 10;\n      temp_count = 0;\n    }\n    else {\n      result_len = len_1 + len_2 + 0x1e;\n      temp_count = 0;\n      while( true ) {\n        result_str = *(char **)(str_ptr + temp_count * 8);\n        if (result_str == (char *)0x0) break;\n        len_1 = strlen(result_str);\n        temp_count = (ulong)((int)temp_count + 1);\n        result_len = result_len + len_1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      len_1 = strlen(*(char **)(struct_ptr + 0x30));\n      result_len = result_len + len_1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      len_1 = strlen(*(char **)(struct_ptr + 0x38));\n      result_len = result_len + len_1;\n    }\n    result_str = (char *)xmalloc(result_len);\n    struct_ptr = *(long *)(input_ptr + 0x60);\n    strcpy(result_str,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      count = 0;\n      len_1 = strlen(result_str);\n      sprintf(result_str + len_1,\"!%u,\",temp_count);\n      while( true ) {\n        struct_ptr = *(long *)(input_ptr + 0x60);\n        temp_count = (ulong)count;\n        temp_ptr = *(void **)(struct_ptr + 0x28);\n        temp_str = *(char **)((long)temp_ptr + temp_count * 8);\n        if (temp_str == (char *)0x0) break;\n        count = count + 1;\n        strcat(result_str,temp_str);\n        free(*(void **)(*(long *)(struct_ptr + 0x28) + temp_count * 8));\n      }\n      free(temp_ptr);\n      *(undefined8 *)(*(long *)(input_ptr + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input_ptr + 0x60);\n    strcat(result_str,*(char **)(struct_ptr + 0x20));\n    free(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input_ptr + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(result_str,*(char **)(struct_ptr + 0x30));\n      free(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input_ptr + 0x60) + 0x30) = 0;\n    }\n    len_1 = strlen(result_str);\n    struct_ptr = *(long *)(input_ptr + 0x60);\n    *(undefined2 *)(result_str + len_1) = 0x3b;\n    temp_str = *(char **)(struct_ptr + 0x38);\n    if (temp_str != (char *)0x0) {\n      strcpy(result_str + len_1 + 1,temp_str);\n      free(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input_ptr + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input_ptr + 0x60) + 8));\n    struct_ptr = *(long *)(input_ptr + 0x60);\n    *(char **)(struct_ptr + 8) = result_str;\n    retval = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return retval;\n}\n\n",
            "called": [
                "strcat",
                "xmalloc",
                "free",
                "sprintf",
                "strcpy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reconstruct_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "iVar1": "counter",
                "cVar2": "result",
                "uVar3": "output",
                "puVar4": "currentNode",
                "puVar5": "parentNode"
            },
            "code": "\nundefined8 processData_001135a5(undefined8 input1,undefined8 input2,long data)\n\n{\n  int counter;\n  char result;\n  undefined8 output;\n  undefined8 *currentNode;\n  undefined8 *parentNode;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    result = FUN_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = FUN_0010e6a8(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 1:\n    result = FUN_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = FUN_0010e7c2(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 2:\n    result = FUN_00112c1f(input1,input2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (result != '\\0') {\n      output = FUN_0010e9a0(input2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return output;\n    }\n    break;\n  case 3:\n    parentNode = *(undefined8 **)(data + 0x20);\n    counter = *(int *)(data + 0x18);\n    output = *(undefined8 *)(data + 8);\n    result = FUN_00112502(input1,input2,*(undefined8 *)(parentNode[2] + 0x18));\n    if (((result != '\\0') && (result = FUN_00112c1f(input1,input2,*parentNode,0), result != '\\0')) &&\n       (result = FUN_0010eafe(input2,output,counter == 2), result != '\\0')) {\n      for (currentNode = (undefined8 *)parentNode[1]; currentNode != (undefined8 *)0x0;\n          currentNode = (undefined8 *)*currentNode) {\n        result = FUN_00112c1f(input1,input2,currentNode[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = FUN_0010ebb0(input2,currentNode[1],*(undefined4 *)(currentNode + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      parentNode = (undefined8 *)parentNode[2];\n      while( true ) {\n        if (parentNode == (undefined8 *)0x0) {\n          output = FUN_00108f05(input2);\n          return output;\n        }\n        result = FUN_00113a4d(input1,input2,parentNode);\n        if (result == '\\0') break;\n        parentNode = (undefined8 *)*parentNode;\n      }\n    }\n    break;\n  case 4:\n    output = FUN_0010e842(input2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return output;\n  case 5:\n    output = FUN_0010e8a9(*(undefined8 *)(data + 0x20),input2,*(undefined8 *)(data + 8));\n    return output;\n  case 6:\n    result = FUN_00112c1f(input1,input2,**(undefined8 **)(data + 0x20),0);\n    if (result != '\\0') {\n      output = FUN_0010e918(input2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112502",
                "FUN_0010e918",
                "FUN_0010e6a8",
                "abort",
                "FUN_0010ebb0",
                "FUN_0010e842",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_00108f05",
                "FUN_0010e9a0",
                "FUN_00112c1f",
                "FUN_00113a4d",
                "FUN_0010e8a9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_0011378f",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = FUN_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = FUN_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = FUN_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = FUN_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUN_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = FUN_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar28 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = FUN_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = FUN_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              FUN_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = FUN_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001152b6",
                "bfd_get_mach",
                "bfd_set_file_flags",
                "FUN_001125fa",
                "printf",
                "bfd_get_arch",
                "bfd_set_start_address"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104ea2",
                "FUN_00119970",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_0010ae0e",
                "FUN_00115530",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "parse_demangled_type_0010b0fa",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "paramArray",
                "param_4": "paramSize",
                "param_5": "errorFlag",
                "uVar1": "value",
                "iVar2": "cmpResult",
                "pcVar3": "result",
                "plVar4": "arrayPtr",
                "pcVar5": "message",
                "sVar6": "length",
                "__ptr": "ptr",
                "lVar7": "returnValue",
                "local_40": "localBuffer"
            },
            "code": "\n\n\nchar * parseDemangledType_0010b0fa(undefined8 arg1,undefined8 arg2,uint *paramArray,long paramSize,\n                   undefined *errorFlag)\n\n{\n  uint value;\n  int cmpResult;\n  char *result;\n  long *arrayPtr;\n  char *message;\n  size_t length;\n  void *ptr;\n  long returnValue;\n  undefined localBuffer [16];\n  \n  if (errorFlag != (undefined *)0x0) {\n    *errorFlag = 0;\n  }\n  while( true ) {\n    value = *paramArray;\n    if (0x29 < value) break;\n    if (0x17 < value) {\n      switch(value) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)parseDemangledType_0010b0fa(arg1,arg2,*(undefined8 *)(paramArray + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*paramArray) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)FUN_00113b4a(result);\n            return result;\n          case 0x1b:\n            result = (char *)FUN_00113b71(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)FUN_00113d3a(result);\n            return result;\n          case 0x23:\n            result = (char *)FUN_00113cb9(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,paramArray,0x14,localBuffer);\n        if (result == (char *)0x0) {\n          message = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        cmpResult = strcmp(result,\"signed char\");\n        if (cmpResult == 0) {\nLAB_0010b406:\n          message = (char *)FUN_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"bool\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"char\");\n        if (cmpResult == 0) goto LAB_0010b406;\n        cmpResult = strcmp(result,\"double\");\n        if ((cmpResult == 0) || (cmpResult = strcmp(result,\"long double\"), cmpResult == 0)) {\n          message = (char *)FUN_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"float\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"__float128\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"unsigned char\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"int\");\n        if (cmpResult == 0) {\nLAB_0010b504:\n          message = (char *)FUN_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"unsigned int\");\n        if (cmpResult == 0) {\nLAB_0010b528:\n          message = (char *)FUN_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"long\");\n        if (cmpResult == 0) goto LAB_0010b504;\n        cmpResult = strcmp(result,\"unsigned long\");\n        if (cmpResult == 0) goto LAB_0010b528;\n        cmpResult = strcmp(result,\"__int128\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"unsigned __int128\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"short\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"unsigned short\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"void\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00113e17();\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"wchar_t\");\n        if (cmpResult == 0) goto LAB_0010b528;\n        cmpResult = strcmp(result,\"long long\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"unsigned long long\");\n        if (cmpResult == 0) {\n          message = (char *)FUN_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        cmpResult = strcmp(result,\"...\");\n        if (cmpResult == 0) {\n          message = \"Unexpected demangled varargs\\n\";\n          if (errorFlag == (undefined *)0x0) goto LAB_0010b6a9;\n          *errorFlag = 1;\n        }\n        else {\n          message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          message = (char *)dcgettext(0,message,5);\n          fprintf(_stderr,message);\n        }\n        message = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return message;\n      case 0x29:\n        if (*(long *)(paramArray + 4) == 0) {\n          ptr = (void *)FUN_00113e17();\n        }\n        else {\n          ptr = (void *)parseDemangledType_0010b0fa(arg1,arg2,*(long *)(paramArray + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          returnValue = FUN_0010b6ea(arg1,arg2,*(undefined8 *)(paramArray + 6),localBuffer);\n          if (returnValue != 0) {\n            result = (char *)FUN_00113ce0(ptr,returnValue,localBuffer[0]);\n            return result;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (value != 1) {\n      if (value == 4) {\n        result = (char *)cplus_demangle_print(3,paramArray,0x14,localBuffer);\n        message = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          length = strlen(result);\n          message = (char *)FUN_0010afd5(arg1,arg2,result,length & 0xffffffff,9);\n          free(result);\n          return message;\n        }\nLAB_0010b3d3:\n        message = (char *)dcgettext(0,message,5);\n        fprintf(_stderr,message);\n        return result;\n      }\n      if (value == 0) {\n        if ((paramSize == 0) || (arrayPtr = (long *)FUN_00113b1e(paramSize), arrayPtr == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    paramSize = parseDemangledType_0010b0fa(arg1,arg2,*(undefined8 *)(paramArray + 4),paramSize,0);\n    if (paramSize == 0) goto LAB_0010b38c;\n    paramArray = *(uint **)(paramArray + 6);\n    errorFlag = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)value);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*arrayPtr == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)FUN_0010afd5(arg1,arg2,*(undefined8 *)(paramArray + 4),paramArray[6],0);\n    return result;\n  }\n  result = *(char **)(*arrayPtr + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  message = (char *)FUN_001129f4(result);\n  if (message != (char *)0x0) {\n    length = strlen(message);\n    if ((paramArray[6] == (uint)length) &&\n       (cmpResult = strncmp(message,*(char **)(paramArray + 4),(long)(int)paramArray[6]), cmpResult == 0)) {\n      return result;\n    }\n  }\n  arrayPtr = arrayPtr + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010afd5",
                "FUN_00113b4a",
                "fprintf",
                "FUN_00113ce0",
                "abort",
                "strlen",
                "cplus_demangle_print",
                "FUN_00113b1e",
                "FUN_001129f4",
                "strncmp",
                "FUN_00112904",
                "FUN_0010b6ea",
                "free",
                "FUN_00113e17",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b6ea",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "parse_demangled_type_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "parse_and_store_data_00104c36",
                "unaff_RBX": "dataPtr",
                "unaff_EBP": "lineNumber",
                "unaff_R13": "fileName",
                "unaff_R14": "currentLinePtr",
                "unaff_R15": "currentCharPtr",
                "in_stack_00000008": "dcgettextArg1",
                "in_stack_00000010": "inStackArg",
                "uVar1": "translation",
                "ppbVar2": "hashTableSlot",
                "pbVar3": "nextCharPtr",
                "pbVar5": "tempCharPtr",
                "in_CL": "currentChar",
                "bVar4": "nextChar"
            },
            "code": "\nvoid parseAndStoreData_00104c36(void)\n\n{\n  undefined8 translation;\n  byte **hashTableSlot;\n  byte *nextCharPtr;\n  byte currentChar;\n  byte nextChar;\n  byte *dataPtr;\n  int lineNumber;\n  byte *tempCharPtr;\n  undefined8 fileName;\n  byte *currentLinePtr;\n  byte *currentCharPtr;\n  undefined8 dcgettextArg1;\n  undefined8 *inStackArg;\n  \n  do {\n    tempCharPtr = currentCharPtr;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = tempCharPtr[1];\n      tempCharPtr = tempCharPtr + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextChar = tempCharPtr[1];\n      if ((((((nextChar == 9) || (nextChar == 0x20)) &&\n            ((nextChar = tempCharPtr[2], nextChar == 9 || (nextChar == 0x20)))) &&\n           ((nextChar = tempCharPtr[3], nextChar == 9 || (nextChar == 0x20)))) &&\n          ((nextChar = tempCharPtr[4], nextChar == 9 || (nextChar == 0x20)))) &&\n         ((nextChar = tempCharPtr[5], nextChar == 9 || (nextChar == 0x20)))) {\n        nextChar = tempCharPtr[6];\n        nextCharPtr = tempCharPtr + 6;\n        if ((nextChar == 9) || (nextChar == 0x20)) {\n          do {\n            do {\n              nextChar = nextCharPtr[1];\n              nextCharPtr = nextCharPtr + 1;\n            } while (nextChar == 0x20);\n          } while (nextChar == 9);\n        }\n      }\n      if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) {\n        translation = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(translation,dcgettextArg1,lineNumber);\n      }\n    }\nLAB_00114599:\n    *tempCharPtr = 0;\n    if (currentCharPtr < tempCharPtr) {\n      hashTableSlot = (byte **)htab_find_slot();\n      *hashTableSlot = currentCharPtr;\n    }\n    lineNumber = lineNumber + 1;\n    tempCharPtr = dataPtr;\n    if (currentLinePtr[1] == 0) {\n      *inStackArg = fileName;\n      return;\n    }\n    for (; nextChar = *tempCharPtr, currentLinePtr = tempCharPtr, nextChar != 10; tempCharPtr = tempCharPtr + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          nextCharPtr = tempCharPtr + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *tempCharPtr = 0;\n          nextCharPtr = tempCharPtr + 1;\n          if (tempCharPtr[1] == 10) {\n            nextCharPtr = tempCharPtr + 2;\n            currentLinePtr = tempCharPtr + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *tempCharPtr = 0;\n    if (tempCharPtr[1] == 0xd) {\n      currentLinePtr = tempCharPtr + 1;\n      nextCharPtr = tempCharPtr + 2;\n    }\n    else {\n      nextCharPtr = tempCharPtr + 1;\n    }\nLAB_00114553:\n    currentChar = *dataPtr;\n    currentCharPtr = dataPtr;\n    while (dataPtr = nextCharPtr, currentChar == 0x20) {\nLAB_00104c3f:\n      tempCharPtr = currentCharPtr + 1;\n      currentCharPtr = currentCharPtr + 1;\n      nextCharPtr = dataPtr;\n      currentChar = *tempCharPtr;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_and_store_data_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "improve_debugging_information_0010554f",
                "param_7": "bfdHandler",
                "param_8": "numSections",
                "param_9": "discard"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 improveDebuggingInformation_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long bfdHandler;\n  ulong numSections;\n  char discard;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *param_14;\n  uint param_15;\n  long *param_17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    param_12 = 0;\n    param_14 = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    param_17 = (long *)xmalloc(lVar14);\n    param_40 = param_17;\n    bfd_map_over_sections(bfdHandler,FUN_0010870e,&stack0x00000140);\n    qsort(param_17,(ulong)in_stack_00000068._4_4_,8,FUN_0010875d);\n    param_14 = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127978 != '\\0';\n    puVar33 = param_14;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(param_14 + uVar29 * 8);\n        plVar28 = param_17 + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(bfdHandler,*plVar28);\n          uVar13 = bfd_octets_per_byte(bfdHandler);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            FUN_001126c0(0,bfdHandler,*plVar28);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (DAT_00127969 != '\\0') {\n      uVar12 = bfd_octets_per_byte(bfdHandler);\n      lVar14 = param_17[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127970 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          FUN_001126c0(0,bfdHandler,param_17[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(param_14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          discard = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (discard == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)FUN_00112894(unaff_R14,1,plVar28), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = FUN_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + numSections; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((lVar14 == 0) && (lVar14 = FUN_00112894(unaff_R14,0,plVar28), lVar14 == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < plVar28 + numSections))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          FUN_001088ae(param_43,(int)param_44,param_40,pcVar22);\n          discard = FUN_0011173a(__ptr_02,lVar14,param_43);\n          if (discard == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar14 != 0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (discard == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (numSections != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = plVar28;\n        param_32 = 0;\n        param_31 = numSections;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)numSections <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = FUN_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = FUN_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = FUN_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = FUN_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = FUN_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = FUN_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = FUN_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = FUN_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        FUN_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(bfdHandler + 0x44) & 0x42) != 0) && ((*(uint *)(bfdHandler + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(bfdHandler + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (numSections != 0) {\n        plVar28 = DAT_001278b0 + numSections;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(bfdHandler + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = DAT_001278b0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = lVar14;\n      if (numSections == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _discard = 0;\n        do {\n          iVar10 = DAT_001279a0;\n          plVar15 = (long *)plVar28[_discard];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279a8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = FUN_0011a2e0(puVar26);\n                  uVar17 = DAT_001278d0;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278d0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(DAT_001278d0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278d8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(bfdHandler + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127908;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(bfdHandler + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(bfdHandler + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127908;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(bfdHandler + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127908);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar17);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = FUN_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = FUN_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279d8), lVar37 == 0 ||\n                      (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _discard = _discard + 1;\n        } while (numSections != _discard);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279a8;\n        iVar10 = DAT_001279a0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = FUN_0011a2e0(puVar26,bfdHandler);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279a0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_00127980 == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        numSections = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(bfdHandler + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = FUN_0011378f(bfdHandler,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(bfdHandler,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(bfdHandler,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(bfdHandler,lVar14,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(bfdHandler,lVar37,param_33,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,bfdHandler,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(bfdHandler + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,bfdHandler,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,FUN_00116030,DAT_001278b0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_001279f8);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a08), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_001279e8), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_001279e0), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279d8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279d0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278d0), lVar14 != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(bfdHandler,DAT_001278a8,numSections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,bfdHandler);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,bfdHandler);\n    for (puVar26 = DAT_001279c0; puVar4 = DAT_001279b8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(bfdHandler,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,bfdHandler,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(bfdHandler,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,bfdHandler,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(bfdHandler + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(bfdHandler + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = FUN_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(bfdHandler,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,bfdHandler,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,bfdHandler,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(bfdHandler,param_21), lVar14 = DAT_00127a10,\n       cVar7 != '\\0')) {\n      if (param_14 != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        uVar5 = DAT_00127979;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(param_14 + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(bfdHandler,*param_17,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                FUN_001126c0(0,bfdHandler,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(param_14);\n      }\n      uVar9 = (**(code **)(*(long *)(bfdHandler + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(bfdHandler,DAT_00127910 & 0xffffffff);\n        uVar29 = DAT_00127910;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(bfdHandler + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar17);\n            *(short *)(*(long *)(bfdHandler + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,bfdHandler,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,bfdHandler,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_map_over_sections",
                "bfd_is_local_label",
                "bfd_errmsg",
                "free",
                "FUN_0011a170",
                "bfd_get_section_by_name",
                "FUN_0010875d",
                "FUN_00108863",
                "bfd_get_error",
                "FUN_00112a33",
                "FUN_0010bbd3",
                "FUN_00119dd0",
                "bfd_set_section_size",
                "concat",
                "bfd_set_error",
                "bfd_make_section_with_flags",
                "FUN_001159d0",
                "xstrdup",
                "bfd_decode_symclass",
                "bfd_octets_per_byte",
                "FUN_00112894",
                "FUN_00113fb0",
                "strcpy",
                "bfd_set_section_contents",
                "FUN_0011173a",
                "htab_traverse",
                "FUN_00115d70",
                "bfd_get_section_contents",
                "FUN_00115dc0",
                "FUN_001126c0",
                "xmalloc",
                "qsort",
                "fprintf",
                "FUN_00119ed0",
                "FUN_001088ae",
                "bfd_coff_get_auxent",
                "FUN_0011378f",
                "FUN_0011a2e0",
                "FUN_0010bc80",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00116030",
                "strcmp",
                "FUN_0010c892",
                "bfd_map_over_sections",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_00116110",
                "htab_find",
                "bfd_fill_in_gnu_debuglink_section",
                "bfd_alt_mach_code",
                "htab_elements",
                "strlen",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "FUN_0010870e",
                "FUN_0010bf20",
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improve_debugging_information_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "format_and_call_function_00109cf4",
                "param_1": "functionPointer",
                "param_2": "value",
                "param_3": "flag",
                "local_3c": "formattedValue"
            },
            "code": "\nvoid formatAndCallFunction_00109cf4(undefined8 functionPointer,undefined8 value,undefined4 flag)\n\n{\n  char formattedValue [28];\n  \n  sprintf(formattedValue,\"%ld\",value);\n  FUN_00109b52(functionPointer,formattedValue,value,0,flag);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010b800",
                "FUN_0010bba1",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "format_and_call_function_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_function_arguments_00109ab1",
                "param_1": "input_string",
                "param_2": "output_values",
                "uVar1": "result_1",
                "pcVar2": "current_char",
                "uVar3": "result_2",
                "auVar4": "result",
                "param_2[1]": "output_value_2"
            },
            "code": "\nundefined  [16]\nparse_function_arguments_00109ab1(char **input_string,undefined4 *output_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 result_1;\n  char *current_char;\n  undefined8 result_2;\n  undefined result [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    result_1 = FUN_00109a32(input_string,0);\n    *output_values = result_1;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      result_1 = FUN_00109a32(input_string,0,param_3);\n      output_value_2 = result_1;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    FUN_00108fb9(current_char);\n    result_2 = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)FUN_00109a32(input_string,0);\n    output_value_2 = (int)current_char;\nLAB_00109b25:\n    result_2 = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  result._8_8_ = param_5;\n  result._0_8_ = result_2;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_function_arguments_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_data_validity_001159d0",
                "param_1": "dataAddress",
                "uVar1": "result",
                "cVar2": "isValid",
                "uVar3": "returnValue",
                "lVar4": "pointer1",
                "lVar5": "pointer2"
            },
            "code": "\nundefined4 checkDataValidity_001159d0(long dataAddress)\n\n{\n  undefined8 result;\n  char isValid;\n  undefined4 returnValue;\n  long pointer1;\n  long pointer2;\n  \n  returnValue = FUN_00115b70();\n  if ((char)returnValue == '\\0') {\n    if ((*(byte *)(dataAddress + 0x27) & 2) == 0) {\n      return returnValue;\n    }\n    pointer1 = FUN_00115d00(*(undefined8 *)(dataAddress + 0xd0),*(undefined8 *)(dataAddress + 0xe0));\n    if ((pointer1 != 0) &&\n       (((result = *(undefined8 *)(pointer1 + 8), DAT_00127a2c != 7 ||\n         (isValid = FUN_00115d70(result,DAT_00127a08), isValid != '\\0')) &&\n        (isValid = FUN_00115d70(result,DAT_001279f8), isValid == '\\0')))) {\n      pointer1 = *(long *)(*(long *)(dataAddress + 0xd0) + 0xc0);\n      pointer2 = pointer1;\n      do {\n        if (pointer2 == 0) {\n          return 1;\n        }\n        isValid = FUN_00115b70(pointer2);\n        if (isValid == '\\0') {\n          return returnValue;\n        }\n        pointer2 = *(long *)(*(long *)(pointer2 + 0xd0) + 0xc0);\n      } while (pointer1 != pointer2);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115b70",
                "FUN_00115d70",
                "FUN_00115d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00115f50"
            ],
            "imported": false,
            "current_name": "check_data_validity_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "param_1": "inputValue",
                "__s": "strPointer",
                "uVar4": "returnValue",
                "uVar1": "byteValue",
                "uVar3": "longValue",
                "__s_00": "firstString",
                "sVar5": "firstStringLength",
                "sVar6": "secondStringLength",
                "__s_01": "combinedString",
                "lVar2": "structPointer"
            },
            "code": "\nundefined4 processData_0010a77a(long inputValue)\n\n{\n  undefined byteValue;\n  long structPointer;\n  char *strPointer;\n  undefined8 longValue;\n  undefined4 returnValue;\n  char *firstString;\n  size_t firstStringLength;\n  size_t secondStringLength;\n  char *combinedString;\n  \n  structPointer = *(long *)(inputValue + 0x60);\n  if ((structPointer != 0) && (strPointer = *(char **)(structPointer + 0x20), strPointer != (char *)0x0)) {\n    returnValue = *(undefined4 *)(structPointer + 0x18);\n    byteValue = *(undefined *)(structPointer + 0x1c);\n    longValue = *(undefined8 *)(structPointer + 0x10);\n    firstString = (char *)FUN_00109b2f();\n    firstStringLength = strlen(firstString);\n    secondStringLength = strlen(strPointer);\n    combinedString = (char *)xmalloc(firstStringLength + 2 + secondStringLength);\n    sprintf(combinedString,\"%s%s;\",firstString,strPointer);\n    free(firstString);\n    free(strPointer);\n    returnValue = FUN_00109b52(inputValue,combinedString,longValue,byteValue,returnValue);\n    if ((char)returnValue != '\\0') {\n      free(combinedString);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "print_open_error_0010543c",
                "unaff_RBP": "stackBase",
                "piVar2": "errnoPtr",
                "pcVar3": "errorMsg",
                "uVar1": "fileDescriptor",
                "uVar4": "errorText"
            },
            "code": "\nvoid printOpenError_0010543c(void)\n\n{\n  undefined8 fileDescriptor;\n  int *errnoPtr;\n  char *errorMsg;\n  undefined8 errorText;\n  long stackBase;\n  \n  errnoPtr = __errno_location();\n  errorMsg = strerror(*errnoPtr);\n  fileDescriptor = *(undefined8 *)(stackBase + 0x10);\n  errorText = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  FUN_00119dd0(errorText,fileDescriptor,errorMsg);\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119dd0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "print_open_error_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "construct_message_0010a424",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "isLast",
                "cVar1": "result",
                "bVar2": "tempByte",
                "iVar3": "tempInt",
                "uVar4": "returnValue",
                "pcVar5": "prefix",
                "__ptr": "buffer",
                "uVar6": "temp",
                "__s": "suffix",
                "sVar7": "prefixLength",
                "sVar8": "suffixLength",
                "__s_00": "message",
                "lVar9": "index",
                "bVar10": "tempByte2",
                "lVar11": "loopIndex",
                "uVar12": "flag2"
            },
            "code": "\nundefined4 constructMessage_0010a424(long data,char flag,int count,char isLast)\n\n{\n  char result;\n  byte tempByte;\n  int tempInt;\n  undefined4 returnValue;\n  char *prefix;\n  undefined8 *buffer;\n  undefined8 temp;\n  char *suffix;\n  size_t prefixLength;\n  size_t suffixLength;\n  char *message;\n  long index;\n  byte tempByte2;\n  long loopIndex;\n  undefined flag2;\n  \n  if ((flag == '\\0') && (result = FUN_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  tempByte2 = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  prefix = (char *)FUN_00109b2f(data);\n  if (count < 0) {\n    buffer = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    flag2 = 1;\n    if (tempByte2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      tempInt = count + 1;\n      buffer = (undefined8 *)xmalloc((long)tempInt * 8);\n      index = (long)(count + -1);\n      do {\n        tempByte = 1;\n        if (tempByte2 == 0) {\n          tempByte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        temp = FUN_00109b2f(data);\n        tempByte2 = tempByte & 1;\n        buffer[index] = temp;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (isLast == '\\0') {\n        result = FUN_00109d97(data);\n        if (result == '\\0') {\n          return 0;\n        }\n        tempByte = 1;\n        if (tempByte2 == 0) {\n          tempByte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        tempByte2 = tempByte & 1;\n        temp = FUN_00109b2f(data);\n        buffer[(long)tempInt + -1] = temp;\n        count = tempInt;\n      }\n      goto LAB_0010a582;\n    }\n    buffer = (undefined8 *)0x0;\n    if (isLast != '\\0') goto LAB_0010a582;\n    buffer = (undefined8 *)xmalloc(8);\n    result = FUN_00109d97(data);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((tempByte2 != 0) || (*(char *)(*(long *)(data + 0x60) + 0x1c) != '\\0')) {\n      temp = FUN_00109b2f(data);\n      count = 1;\n      flag2 = 1;\n      *buffer = temp;\n      goto LAB_0010a596;\n    }\n    temp = FUN_00109b2f(data);\n    count = 1;\n    *buffer = temp;\n  }\n  flag2 = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\nLAB_0010a596:\n  suffix = (char *)FUN_00109b2f(data);\n  prefixLength = strlen(prefix);\n  suffixLength = strlen(suffix);\n  index = prefixLength + 10 + suffixLength;\n  for (loopIndex = 0; (int)loopIndex < count; loopIndex = loopIndex + 1) {\n    prefixLength = strlen((char *)buffer[loopIndex]);\n    index = index + prefixLength;\n  }\n  message = (char *)xmalloc(index);\n  sprintf(message,\"#%s,%s\",prefix,suffix);\n  index = 0;\n  free(prefix);\n  free(suffix);\n  while( true ) {\n    prefixLength = strlen(message);\n    if (count <= (int)index) break;\n    *(undefined2 *)(message + prefixLength) = 0x2c;\n    prefix = (char *)buffer[index];\n    index = index + 1;\n    strcpy(message + prefixLength + 1,prefix);\n    free(prefix);\n  }\n  *(undefined2 *)(message + prefixLength) = 0x3b;\n  free(buffer);\n  returnValue = FUN_00109b52(data,message,0,flag2,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(message);\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00109d97",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strcpy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_message_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "display_message_00119970",
                "param_1": "version",
                "pcVar1": "message"
            },
            "code": "\nvoid displayMessage_00119970(undefined8 version)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "display_message_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_query_string_00114c80",
                "param_1": "queryString",
                "param_2": "defaultValue",
                "param_3": "errorContext",
                "param_4": "userData",
                "pcVar1": "equalSignPos",
                "uVar2": "errorMessage",
                "auVar3": "parsedQuery",
                "xmalloc": "allocateMemory",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nundefined  [16] parseQueryString_00114c80(char *queryString,undefined8 defaultValue,undefined8 errorContext,undefined8 userData)\n\n{\n  char *equalSignPos;\n  undefined8 errorMessage;\n  undefined parsedQuery [16];\n  \n  equalSignPos = strchr(queryString,0x3d);\n  if (equalSignPos != (char *)0x0) {\n    parsedQuery._0_8_ = (undefined8 *)xmalloc(0x30);\n    errorMessage = FUN_0011a480(queryString,(long)equalSignPos - (long)queryString);\n    parsedQuery._0_8_[2] = equalSignPos + 1;\n    parsedQuery._0_8_[1] = errorMessage;\n    parsedQuery._0_8_[4] = 0;\n    parsedQuery._0_8_[3] = 0;\n    *parsedQuery._0_8_ = defaultValue;\n    parsedQuery._8_8_ = userData;\n    return parsedQuery;\n  }\n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(errorMessage,errorContext);\n}\n\n",
            "called": [
                "xmalloc",
                "strchr",
                "FUN_0011a480",
                "FUN_001053b5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_query_string_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_and_value_0010870e",
                "param_1": "pointerToValue",
                "param_2": "newValue",
                "param_3": "pointerToPointer",
                "puVar1": "currentPointer"
            },
            "code": "\nvoid updatePointerAndValue_0010870e(undefined8 pointerToValue,undefined8 newValue,long *pointerToPointer)\n\n{\n  undefined8 *currentPointer;\n  \n  currentPointer = (undefined8 *)*pointerToPointer;\n  *currentPointer = newValue;\n  *pointerToPointer = (long)(currentPointer + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_and_value_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_file",
                "param_2": "symbol_table",
                "param_3": "type_section",
                "param_4": "arch",
                "param_5": "type",
                "param_6": "aux_vector",
                "param_7": "is_unsigned",
                "param_8": "dgettext",
                "lVar1": "result",
                "cVar2": "success",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "lVar5": "retval",
                "uVar6": "error_message",
                "plVar7": "ptr",
                "__ptr": "block1",
                "__ptr_00": "block2",
                "bVar8": "shift",
                "iVar9": "index",
                "pcVar10": "type_name",
                "uVar11": "mask",
                "lVar12": "counter",
                "uVar13": "shifted_type",
                "uVar14": "size"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_file,long *symbol_table,long type_section,undefined8 arch,uint type,\n                 long *aux_vector,char is_unsigned,undefined8 dgettext)\n\n{\n  long result;\n  char success;\n  undefined4 error_code;\n  undefined8 error_message;\n  long retval;\n  undefined8 error_message;\n  long *ptr;\n  void *block1;\n  void *block2;\n  byte shift;\n  int index;\n  char *type_name;\n  ulong mask;\n  long counter;\n  uint shifted_type;\n  uint size;\n  undefined8 uVar15;\n  undefined local_68 [32];\n  char local_48;\n  byte local_47;\n  \n  retval = *(long *)(coff_file + 0x110);\n  if ((~*(uint *)(retval + 0x38) & type) != 0) {\n    shifted_type = (int)type >> ((byte)*(undefined4 *)(retval + 0x44) & 0x1f);\n    mask = (ulong)(type & *(uint *)(retval + 0x40));\n    shift = (byte)*(undefined4 *)(retval + 0x3c);\n    shifted_type = (shifted_type ^ type) & *(uint *)(retval + 0x38) ^ shifted_type;\n    if (mask == 1L << (shift & 0x3f)) {\n      error_message = parse_coff_type_0010dac0(coff_file,symbol_table,type_section,arch,shifted_type,aux_vector,is_unsigned,dgettext);\n      retval = FUN_00113d3a(error_message);\n      return retval;\n    }\n    if (mask != 2L << (shift & 0x3f)) {\n      if (mask != 3L << (shift & 0x3f)) {\n        error_message = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(retval + 0x3c),\n                          shifted_type);\n        FUN_00119ed0(error_message,type);\n        return 0;\n      }\n      size = 0;\n      if (aux_vector != (long *)0x0) {\n        size = (uint)*(ushort *)(aux_vector + 2);\n        ptr = aux_vector + 2;\n        for (index = 0; (*(short *)ptr != 0 && (index != 3)); index = index + 1) {\n          *(short *)ptr = *(short *)((long)ptr + 2);\n          ptr = (long *)((long)ptr + 2);\n        }\n        *(short *)ptr = 0;\n      }\n      uVar15 = 0;\n      error_message = dgettext;\n      error_message = parse_coff_type_0010dac0(coff_file,symbol_table,type_section,arch,shifted_type,aux_vector,0);\n      retval = *(long *)(type_section + 0x28);\n      if (retval == 0) {\n        error_message = FUN_00113dfe(4,0,uVar15,error_message);\n        retval = FUN_0010c218(dgettext,\"int\",error_message);\n        *(long *)(type_section + 0x28) = retval;\n      }\n      retval = FUN_00113c43(error_message,retval,0,(long)(int)(size - 1),0);\n      return retval;\n    }\n    error_message = parse_coff_type_0010dac0(coff_file,symbol_table,type_section,arch,shifted_type,aux_vector,is_unsigned,dgettext);\n    retval = FUN_00113ce0(error_message,0,0);\n    return retval;\n  }\n  if ((aux_vector != (long *)0x0) && (0 < *aux_vector)) {\n    ptr = (long *)FUN_0010da0b(type_section);\n    if (*ptr != 0) {\n      return *ptr;\n    }\n    retval = FUN_00113e23(ptr,0);\n    return retval;\n  }\n  if (is_unsigned == '\\0') {\n    aux_vector = (long *)0x0;\n  }\n  if (0x10 < type) {\n    retval = FUN_00113e17();\n    return retval;\n  }\n  retval = *(long *)(type_section + 8 + (long)(int)type * 8);\n  if (retval != 0) {\n    return retval;\n  }\n  switch(type) {\n  default:\n    error_message = FUN_00113e17();\n    type_name = \"void\";\n    break;\n  case 2:\n    error_message = FUN_00113dfe(1,0);\n    type_name = \"char\";\n    break;\n  case 3:\n    error_message = FUN_00113dfe(2,0);\n    type_name = \"short\";\n    break;\n  case 4:\n    error_message = FUN_00113dfe(4,0);\n    type_name = \"int\";\n    break;\n  case 5:\n    error_message = FUN_00113dfe(4,0);\n    type_name = \"long\";\n    break;\n  case 6:\n    error_message = FUN_00113df2(4);\n    type_name = \"float\";\n    break;\n  case 7:\n    error_message = FUN_00113df2(8);\n    type_name = \"double\";\n    break;\n  case 8:\n    if (aux_vector == (long *)0x0) {\n      retval = FUN_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    error_message = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (aux_vector == (long *)0x0) {\n      retval = FUN_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    error_message = 9;\nLAB_0010de7a:\n    retval = FUN_0010e07c(coff_file,symbol_table,type_section,error_message,aux_vector,dgettext);\nLAB_0010e046:\n    ptr = (long *)FUN_0010da0b(type_section,arch);\n    *ptr = retval;\n    return retval;\n  case 10:\n    if (aux_vector == (long *)0x0) {\n      retval = FUN_00113d6e(0,0);\n    }\n    else {\n      retval = aux_vector[3];\n      block1 = (void *)xmalloc(0x50);\n      block2 = (void *)xmalloc(0x50);\n      counter = 0;\n      do {\n        while( true ) {\n          if ((retval <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          index = (int)counter;\n          result = *(long *)(*symbol_table + symbol_table[2] * 8);\n          success = bfd_coff_get_syment(coff_file,result,local_68);\n          counter = (long)index;\n          if (success == '\\0') {\n            error_code = bfd_get_error();\n            error_message = bfd_errmsg(error_code);\n            error_message = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            FUN_00119ed0(error_message,error_message);\n            free(block1);\n            free(block2);\n            retval = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)local_47 + 1 + symbol_table[3];\n          if (local_48 != '\\x10') break;\n          if ((int)type <= index + 1) {\n            type = type + 10;\n            block1 = (void *)xrealloc(block1);\n            block2 = (void *)xrealloc(block2,(long)(int)type << 3);\n          }\n          counter = *(long *)(result + 0x20);\n          *(undefined8 *)((long)block1 + (long)index * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)block2 + (long)index * 8) =\n               *(long *)(result + 0x10) + *(long *)(counter + 0x30);\n          counter = (long)(index + 1);\n        }\n      } while (local_48 != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)block1 + counter * 8) = 0;\n      retval = FUN_00113d6e(block1,block2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    retval = FUN_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    error_message = FUN_00113dfe(1,1);\n    type_name = \"unsigned char\";\n    break;\n  case 0xd:\n    error_message = FUN_00113dfe(2,1);\n    type_name = \"unsigned short\";\n    break;\n  case 0xe:\n    error_message = FUN_00113dfe(4,1);\n    type_name = \"unsigned int\";\n    break;\n  case 0xf:\n    error_message = FUN_00113dfe(4,1);\n    type_name = \"unsigned long\";\n    break;\n  case 0x10:\n    error_message = FUN_00113df2(0xc);\n    type_name = \"long double\";\n  }\n  retval = FUN_0010c218(dgettext,type_name,error_message);\nLAB_0010e065:\n  *(long *)(type_section + 8 + (long)(int)type * 8) = retval;\n  return retval;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_0010da0b",
                "xmalloc",
                "FUN_00113d6e",
                "FUN_00119ed0",
                "FUN_00113ce0",
                "FUN_0010dac0",
                "bfd_errmsg",
                "FUN_0010e07c",
                "bfd_coff_get_syment",
                "free",
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "xrealloc",
                "FUN_00113df2",
                "bfd_get_error",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "str1",
                "param_2": "str2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnAddress",
                "__n": "stringLength",
                "extraout_var": "extraVar",
                "auVar2": "comparisonData"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *str1,char *str2)\n\n{\n  int comparisonResult;\n  undefined8 returnAddress;\n  size_t stringLength;\n  undefined4 extraVar;\n  undefined comparisonData [16];\n  \n  stringLength = strlen(str2);\n  comparisonResult = strncmp(str1,str2,stringLength);\n  comparisonData._1_7_ = (undefined7)(CONCAT44(extraVar,comparisonResult) >> 8);\n  comparisonData[0] = comparisonResult == 0;\n  comparisonData._8_8_ = returnAddress;\n  return comparisonData;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00107880",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00116b90",
                "FUN_00115f50",
                "FUN_0010ee3f",
                "FUN_00108c86"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_error_message_0010882c",
                "piVar1": "errorCode",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printErrorMessage_0010882c(void)\n\n{\n  int *errorCode;\n  undefined8 errorMessage;\n  \n  errorCode = __errno_location();\n  strerror(*errorCode);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00119ed0(errorMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "strerror",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_error_message_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "format_and_send_data_0010ebb0",
                "param_1": "input_param",
                "param_2": "str_input",
                "param_3": "str_length",
                "param_4": "output_param",
                "__s": "dynamic_string",
                "cVar1": "character",
                "sVar4": "input_length",
                "sVar5": "dynamic_length",
                "__s_00": "formatted_data"
            },
            "code": "\nundefined4 formatAndSendData_0010ebb0(undefined8 input_param,char *str_input,int str_length,undefined8 output_param)\n\n{\n  char character;\n  uint uVar2;\n  undefined4 uVar3;\n  char *dynamic_string;\n  size_t input_length;\n  size_t dynamic_length;\n  char *formatted_data;\n  \n  dynamic_string = (char *)FUN_00109b2f();\n  uVar2 = str_length - 1;\n  if (uVar2 < 4) {\n    uVar3 = *(undefined4 *)(&DAT_00121340 + (ulong)uVar2 * 4);\n    character = (&DAT_00121334)[uVar2];\n    input_length = strlen(str_input);\n    dynamic_length = strlen(dynamic_string);\n    formatted_data = (char *)xmalloc(input_length + 3 + dynamic_length);\n    sprintf(formatted_data,\"%s:%c%s\",str_input,(ulong)(uint)(int)character,dynamic_string);\n    free(dynamic_string);\n    uVar3 = FUN_0010e2f0(input_param,uVar3,0,output_param,formatted_data);\n    if ((char)uVar3 != '\\0') {\n      free(formatted_data);\n    }\n    return uVar3;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "allocate_and_initialize_struct_00113b98",
                "param_1": "input_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "lVar1": "allocated_struct_address",
                "plVar2": "new_struct_pointer"
            },
            "code": "\nlong allocate_and_initialize_struct_00113b98(long input_param,long second_param,long third_param,undefined fourth_param)\n\n{\n  long allocated_struct_address;\n  long *new_struct_pointer;\n  \n  if ((input_param != 0) && (allocated_struct_address = FUN_00112904(0x13,0), allocated_struct_address != 0)) {\n    new_struct_pointer = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)new_struct_pointer + 0x19) = 0;\n    *new_struct_pointer = input_param;\n    *(undefined4 *)((long)new_struct_pointer + 0x1c) = 0;\n    new_struct_pointer[1] = second_param;\n    new_struct_pointer[2] = third_param;\n    *(undefined *)(new_struct_pointer + 3) = fourth_param;\n    *(long **)(allocated_struct_address + 0x10) = new_struct_pointer;\n    return allocated_struct_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_struct_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_value_in_table_00115d70",
                "param_1": "key",
                "param_2": "table",
                "lVar1": "result",
                "local_18": "key_copy",
                "local_10": "is_found"
            },
            "code": "\nundefined check_value_in_table_00115d70(undefined8 key,undefined8 table)\n\n{\n  long result;\n  undefined8 key_copy;\n  undefined is_found;\n  \n  if (DAT_001279ca == '\\0') {\n    result = htab_find(table,key);\n    is_found = result != 0;\n  }\n  else {\n    is_found = 0;\n    key_copy = key;\n    htab_traverse(table,FUN_0011a170,&key_copy);\n  }\n  return is_found;\n}\n\n",
            "called": [
                "FUN_0011a170",
                "htab_find",
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001159d0",
                "FUN_0010554f",
                "FUN_001082df"
            ],
            "imported": false,
            "current_name": "check_value_in_table_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "append_to_data_list_00109be3",
                "param_1": "dataList",
                "param_2": "element",
                "param_3": "value",
                "uVar1": "reallocResult",
                "puVar2": "dataPointer",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 appendToDataList_00109be3(long dataList,undefined8 element,undefined4 value)\n\n{\n  undefined8 reallocResult;\n  undefined8 *dataPointer;\n  uint currentSize;\n  \n  if (*(uint *)(dataList + 0x2c) <= *(uint *)(dataList + 0x28)) {\n    currentSize = *(uint *)(dataList + 0x2c) + 10;\n    *(uint *)(dataList + 0x2c) = currentSize;\n    reallocResult = xrealloc(*(undefined8 *)(dataList + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(dataList + 0x20) = reallocResult;\n  }\n  currentSize = *(uint *)(dataList + 0x28);\n  dataPointer = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(dataList + 0x20));\n  *dataPointer = element;\n  *(undefined4 *)(dataPointer + 1) = value;\n  *(uint *)(dataList + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)dataPointer >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "append_to_data_list_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_with_null_terminator_0011a480",
                "param_1": "sourceString",
                "param_2": "maxLength",
                "__n": "length",
                "__dest": "destinationBuffer"
            },
            "code": "\nvoid copyStringWithNullTerminator_0011a480(char *sourceString,size_t maxLength)\n\n{\n  size_t length;\n  void *destinationBuffer;\n  \n  length = strnlen(sourceString,maxLength);\n  destinationBuffer = (void *)xmalloc(length + 1);\n  *(undefined *)((long)destinationBuffer + length) = 0;\n  memcpy(destinationBuffer,sourceString,length);\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strnlen",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_string_with_null_terminator_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "send_data_to_server_0010e918",
                "param_1": "socket",
                "param_2": "data",
                "param_3": "length",
                "__s": "timestamp",
                "sVar2": "dataLength",
                "sVar3": "timestampLength",
                "__s_00": "formattedData"
            },
            "code": "\nundefined4 sendDataToServer_0010e918(undefined8 socket,char *data,undefined8 length)\n\n{\n  undefined4 uVar1;\n  char *timestamp;\n  size_t dataLength;\n  size_t timestampLength;\n  char *formattedData;\n  \n  timestamp = (char *)FUN_00109b2f();\n  dataLength = strlen(data);\n  timestampLength = strlen(timestamp);\n  formattedData = (char *)xmalloc(dataLength + 0x14 + timestampLength);\n  sprintf(formattedData,\"%s:c=e%s,%ld\",data,timestamp,length);\n  free(timestamp);\n  uVar1 = FUN_0010e2f0(socket,0x80,0,0,formattedData);\n  if ((char)uVar1 != '\\0') {\n    free(formattedData);\n  }\n  return uVar1;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "send_data_to_server_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_0010ae0e",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_section_contents_00116110",
                "param_1": "inputBinary",
                "param_2": "sectionHeaders",
                "param_3": "outputBinary",
                "uVar1": "tempByte",
                "uVar2": "tempValue",
                "lVar3": "sectionHeaderOffset",
                "iVar4": "halfNumIterations",
                "iVar5": "remainder",
                "cVar6": "result",
                "uVar7": "errorMessage",
                "__ptr": "bufferPtr",
                "lVar8": "innerLoopIndex",
                "uVar9": "innerLoopCounter",
                "iVar10": "sectionAlignment",
                "uVar11": "sourceOffset",
                "puVar12": "sourceBytePtr",
                "lVar13": "bytesWritten",
                "puVar14": "alignedBufferPtr",
                "puVar15": "bufferPtrWithOffset",
                "pvVar16": "destinationPtr",
                "uVar17": "destinationOffset",
                "uVar18": "alignmentFactor",
                "uVar19": "tempCounter",
                "bVar20": "paddingByte",
                "local_38": "sectionSize",
                "local_30": "sectionContents"
            },
            "code": "\nvoid reverseSectionContents_00116110(undefined8 inputBinary,undefined8 *sectionHeaders,undefined8 outputBinary)\n\n{\n  undefined tempByte;\n  undefined8 tempValue;\n  long sectionHeaderOffset;\n  int halfNumIterations;\n  int remainder;\n  char result;\n  undefined8 errorMessage;\n  undefined8 *bufferPtr;\n  long innerLoopIndex;\n  ulong innerLoopCounter;\n  int sectionAlignment;\n  ulong sourceOffset;\n  undefined *sourceBytePtr;\n  long bytesWritten;\n  undefined8 *alignedBufferPtr;\n  undefined8 *bufferPtrWithOffset;\n  void *destinationPtr;\n  ulong destinationOffset;\n  ulong alignmentFactor;\n  ulong tempCounter;\n  byte paddingByte;\n  ulong sectionSize;\n  void *sectionContents;\n  \n  paddingByte = 0;\n  result = FUN_00115f50(inputBinary,sectionHeaders,1);\n  if (result != '\\0') {\n    return;\n  }\n  sectionSize = sectionHeaders[8];\n  sectionHeaderOffset = sectionHeaders[0xc];\n  if (((*(byte *)((long)sectionHeaders + 0x25) & 1) == 0) || ((*(byte *)(sectionHeaderOffset + 0x25) & 1) == 0)) {\n    bytesWritten = FUN_00114190(*sectionHeaders,0,0x80);\n    if (bytesWritten == 0) {\n      return;\n    }\n    if ((*(byte *)(bytesWritten + 0x29) & 1) == 0) {\n      return;\n    }\n    bufferPtr = (undefined8 *)xmalloc(sectionSize);\n    bufferPtrWithOffset = bufferPtr;\n    if (7 < sectionSize) {\n      for (alignmentFactor = sectionSize >> 3; alignmentFactor != 0; alignmentFactor = alignmentFactor - 1) {\n        *bufferPtrWithOffset = 0;\n        bufferPtrWithOffset = bufferPtrWithOffset + (ulong)paddingByte * -2 + 1;\n      }\n    }\n    alignedBufferPtr = bufferPtrWithOffset;\n    if ((sectionSize & 4) != 0) {\n      alignedBufferPtr = (undefined8 *)((long)bufferPtrWithOffset + (ulong)paddingByte * -8 + 4);\n      *(undefined4 *)bufferPtrWithOffset = 0;\n    }\n    bufferPtrWithOffset = alignedBufferPtr;\n    if ((sectionSize & 2) != 0) {\n      bufferPtrWithOffset = (undefined8 *)((long)alignedBufferPtr + (ulong)paddingByte * -4 + 2);\n      *(undefined2 *)alignedBufferPtr = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)bufferPtrWithOffset = 0;\n    }\n    result = bfd_set_section_contents(outputBinary,sectionHeaderOffset,bufferPtr,0);\n    if (result != '\\0') {\n      free(bufferPtr);\n      return;\n    }\n    DAT_00127a20 = 1;\n    FUN_001126c0(0,outputBinary,sectionHeaderOffset,0);\n    free(bufferPtr);\n    return;\n  }\n  sectionContents = (void *)0x0;\n  result = bfd_get_full_section_contents(inputBinary,sectionHeaders,&sectionContents);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(inputBinary,sectionHeaders,outputBinary,&sectionContents,&sectionSize),\n     sectionAlignment = DAT_001278e8, result == '\\0')) {\n    bfd_set_section_size(sectionHeaderOffset,0);\n    DAT_00127a20 = 1;\n    FUN_001126c0(0,inputBinary,sectionHeaders,0);\n    free(sectionContents);\n    return;\n  }\n  halfNumIterations = DAT_001264b8;\n  remainder = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    alignmentFactor = (ulong)DAT_001278e8;\n    if (sectionSize % alignmentFactor != 0) {\n      tempValue = *sectionHeaders;\n      errorMessage = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      FUN_00119dd0(errorMessage,tempValue,sectionAlignment);\n    }\n    sectionAlignment = DAT_001278e8 / 2;\n    sourceOffset = 0;\n    while (tempCounter = sourceOffset, halfNumIterations = DAT_001264b8, remainder = DAT_001264bc, tempCounter < sectionSize) {\n      sourceOffset = alignmentFactor + tempCounter;\n      destinationOffset = sourceOffset;\n      for (innerLoopCounter = 0; innerLoopCounter < (ulong)(long)sectionAlignment; innerLoopCounter = innerLoopCounter + 1) {\n        destinationOffset = destinationOffset - 1;\n        sourceBytePtr = (undefined *)(tempCounter + innerLoopCounter + (long)sectionContents);\n        tempByte = *sourceBytePtr;\n        *sourceBytePtr = *(undefined *)((long)sectionContents + destinationOffset);\n        *(undefined *)((long)sectionContents + destinationOffset) = tempByte;\n      }\n    }\n  }\n  DAT_001264b8 = halfNumIterations;\n  DAT_001264bc = remainder;\n  if (-1 < remainder) {\n    alignmentFactor = (ulong)DAT_00127a1c;\n    sectionAlignment = (int)((ulong)sectionHeaders[7] % alignmentFactor);\n    sourceOffset = ((long)remainder - (long)sectionAlignment) + (long)sectionContents;\n    if (remainder < sectionAlignment) {\n      sourceOffset = sourceOffset + alignmentFactor;\n    }\n    bytesWritten = (sectionSize + (long)sectionContents) - sourceOffset;\n    destinationPtr = sectionContents;\n    for (; sourceOffset < sectionSize + (long)sectionContents; sourceOffset = sourceOffset + alignmentFactor) {\n      for (innerLoopIndex = 0; ((int)innerLoopIndex < halfNumIterations && (innerLoopIndex != bytesWritten)); innerLoopIndex = innerLoopIndex + 1) {\n        *(undefined *)((long)destinationPtr + innerLoopIndex) = *(undefined *)(sourceOffset + innerLoopIndex);\n      }\n      destinationPtr = (void *)((long)destinationPtr + innerLoopIndex);\n      bytesWritten = bytesWritten - alignmentFactor;\n    }\n    sectionSize = ((((alignmentFactor - 1) + sectionSize) - (long)remainder) / alignmentFactor) * (long)halfNumIterations;\n    alignmentFactor = *(ulong *)(sectionHeaderOffset + 0x38) / alignmentFactor;\n    *(ulong *)(sectionHeaderOffset + 0x38) = alignmentFactor;\n    if (remainder < sectionAlignment) {\n      *(ulong *)(sectionHeaderOffset + 0x38) = alignmentFactor + 1;\n      result = bfd_set_section_contents(outputBinary,sectionHeaderOffset,sectionContents,0,sectionSize);\n      if (result == '\\0') {\n        FUN_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(outputBinary,sectionHeaderOffset,sectionContents,0,sectionSize);\n  if (result == '\\0') {\n    FUN_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionContents);\n  return;\n}\n\n",
            "called": [
                "FUN_001083de",
                "FUN_00114190",
                "FUN_001126c0",
                "bfd_get_full_section_contents",
                "xmalloc",
                "bfd_set_section_size",
                "free",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "FUN_00115f50",
                "FUN_00108466"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_section_contents_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "end_block_debugging_0010bf20",
                "param_1": "blockPtr",
                "param_2": "endAddr",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "lVar1": "currentBlockPtr",
                "uVar2": "errorString",
                "pcVar3": "errorMessage",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endBlockDebugging_0010bf20(long blockPtr,undefined8 endAddr,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  long currentBlockPtr;\n  undefined8 errorString;\n  char *errorMessage;\n  undefined returnValue [16];\n  \n  if ((*(long *)(blockPtr + 8) == 0) || (currentBlockPtr = *(long *)(blockPtr + 0x20), currentBlockPtr == 0)) {\n    errorMessage = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlockPtr + 8) != 0) {\n      *(undefined8 *)(currentBlockPtr + 0x20) = endAddr;\n      errorString = CONCAT71((int7)((ulong)currentBlockPtr >> 8),1);\n      *(long *)(blockPtr + 0x20) = *(long *)(currentBlockPtr + 8);\n      goto LAB_0010bf84;\n    }\n    errorMessage = \"debug_end_block: attempt to close top level block\";\n  }\n  errorString = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",errorString);\n  errorString = 0;\nLAB_0010bf84:\n  returnValue._8_8_ = unusedParam2;\n  returnValue._0_8_ = errorString;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "end_block_debugging_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_data_0010c95e",
                "param_1": "input_data",
                "param_2": "curr_byte",
                "param_3": "result",
                "bVar1": "current_byte",
                "bVar2": "next_byte",
                "pbVar3": "curr_byte_ptr",
                "bVar4": "is_signed",
                "bVar5": "is_unsigned",
                "bVar6": "is_float",
                "cVar7": "return_value",
                "uVar8": "byte_count",
                "pbVar9": "next_byte_ptr",
                "lVar10": "temp_long",
                "uVar11": "return_value",
                "pcVar12": "temp_char_ptr",
                "sVar13": "str_length",
                "uVar14": "temp_ulong",
                "__ptr": "temp_ptr",
                "lVar15": "temp_long",
                "pcVar19": "temp_char_ptr",
                "local_49": "temp_undefined",
                "local_48": "temp_ulong",
                "local_40": "temp_char_array"
            },
            "code": "\nundefined8 parse_data_0010c95e(undefined8 *input_data,byte **curr_byte,long *result)\n\n{\n  byte current_byte;\n  byte next_byte;\n  byte *curr_byte_ptr;\n  bool is_signed;\n  bool is_unsigned;\n  bool is_float;\n  char return_value;\n  uint byte_count;\n  byte *next_byte_ptr;\n  long temp_long;\n  undefined8 return_value;\n  char *temp_char_ptr;\n  size_t str_length;\n  ulong temp_ulong;\n  void *temp_ptr;\n  long temp_long;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **ppcVar18;\n  char *temp_char_ptr;\n  byte *pnext_byte0;\n  undefined temp_undefined;\n  ulong temp_ulong;\n  char *temp_char_array [2];\n  \n  while( true ) {\n    pnext_byte0 = *curr_byte;\n    current_byte = *pnext_byte0;\n    if ('T' < (char)current_byte) break;\n    if ((char)current_byte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(current_byte) {\n    case 0x41:\n      temp_long = 0;\n      curr_byte_ptr = pnext_byte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *curr_byte = pnext_byte0 + 1;\n      return_value = parse_data_0010c95e(input_data,curr_byte,result);\n      if (return_value == '\\0') {\n        return 0;\n      }\n      if (result == (long *)0x0) {\n        return 1;\n      }\n      temp_long = FUN_00113b71(*result);\n      *result = temp_long;\n      return 1;\n    case 0x46:\n      *curr_byte = pnext_byte0 + 1;\n      if (result == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        ppcVar18 = (char **)0x0;\n      }\n      else {\n        puVar16 = &temp_ulong;\n        ppcVar18 = temp_char_array;\n      }\n      return_value = FUN_0010d882(input_data,curr_byte,ppcVar18,puVar16);\n      if (return_value == '\\0') {\n        return 0;\n      }\n      if (**curr_byte == 0x5f) {\n        *curr_byte = *curr_byte + 1;\n        return_value = parse_data_0010c95e(input_data,curr_byte,result);\n        if (return_value == '\\0') {\n          return 0;\n        }\n        if (result == (long *)0x0) {\n          return 1;\n        }\n        temp_long = FUN_00113ce0(*result,temp_char_array[0],temp_ulong & 0xff);\n        *result = temp_long;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *curr_byte = pnext_byte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      temp_undefined = 0;\n      temp_char_array[0] = (char *)0x0;\n      temp_ulong = 0;\n      *curr_byte = pnext_byte0 + 1;\n      if (((&_sch_istable)[(ulong)pnext_byte0[1] * 2] & 4) == 0) {\n        if (pnext_byte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        ppcVar18 = temp_char_array;\n        if (result == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        return_value = FUN_0010d559(input_data,curr_byte,ppcVar18);\n        if (return_value == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        byte_count = FUN_00108e76(curr_byte);\n        curr_byte_ptr = *curr_byte;\n        str_length = strlen((char *)curr_byte_ptr);\n        if (str_length < byte_count) goto switchD_0010cdf9_caseD_60;\n        *curr_byte = curr_byte_ptr + byte_count;\n        if ((result != (long *)0x0) &&\n           (temp_char_array[0] = (char *)FUN_0010afd5(*input_data,input_data[1],curr_byte_ptr,byte_count,9),\n           temp_char_array[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **curr_byte;\n      if (current_byte == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *curr_byte = *curr_byte + 1;\n        }\n        if (**curr_byte != 0x46) goto switchD_0010cdf9_caseD_60;\n        *curr_byte = *curr_byte + 1;\n        if (result == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &temp_undefined;\n          puVar16 = &temp_ulong;\n        }\n        return_value = FUN_0010d882(input_data,curr_byte,puVar16,puVar17);\n        if (return_value == '\\0') {\n          return 0;\n        }\n      }\n      if (**curr_byte == 0x5f) {\n        *curr_byte = *curr_byte + 1;\n        return_value = parse_data_0010c95e(input_data,curr_byte,result);\n        if (return_value == '\\0') {\n          return 0;\n        }\n        if (result == (long *)0x0) {\n          return 1;\n        }\n        if (current_byte != 0x4d) {\n          temp_long = FUN_00113bfa(temp_char_array[0],*result);\n          *result = temp_long;\n          return 1;\n        }\n        temp_long = FUN_00113b98(*result,temp_char_array[0],temp_ulong,temp_undefined);\n        *result = temp_long;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      return_value = FUN_0010d559(input_data,curr_byte,result);\n      return return_value;\n    case 0x52:\n      *curr_byte = pnext_byte0 + 1;\n      return_value = parse_data_0010c95e(input_data,curr_byte,result);\n      if (return_value == '\\0') {\n        return 0;\n      }\n      if (result == (long *)0x0) {\n        return 1;\n      }\n      temp_long = FUN_00113cb9(*result);\n      *result = temp_long;\n      return 1;\n    case 0x54:\n      *curr_byte = pnext_byte0 + 1;\n      return_value = FUN_00108ea1(curr_byte,&temp_ulong);\n      if (return_value != '\\0') {\n        if ((uint)temp_ulong < *(uint *)(input_data + 5)) {\n          temp_char_array[0] = *(char **)((temp_ulong & 0xffffffff) * 0x10 + input_data[4]);\n          return_value = parse_data_0010c95e(input_data,temp_char_array,result);\n          if (return_value == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (current_byte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *curr_byte = pnext_byte0 + 1;\n    return_value = parse_data_0010c95e(input_data,curr_byte,result);\n    if (return_value == '\\0') {\n      return 0;\n    }\n    if (result == (long *)0x0) {\n      return 1;\n    }\n    temp_long = FUN_00113d3a(*result);\n    *result = temp_long;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  is_float = false;\n  is_signed = false;\n  return_value = '\\0';\n  is_unsigned = false;\n  do {\n    curr_byte_ptr = *curr_byte;\n    current_byte = *curr_byte_ptr;\n    if (current_byte == 0x55) {\n      return_value = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)current_byte) {\n      if (current_byte == 0x56) {\n        is_float = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)current_byte) goto switchD_0010cdf9_caseD_60;\n      if ((char)current_byte < '_') goto LAB_0010cdfb;\n      switch(current_byte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (result == (long *)0x0) {\nLAB_0010d0aa:\n          *curr_byte = curr_byte_ptr + 1;\n          return 1;\n        }\n        temp_long = FUN_0010914e(*input_data,&DAT_00120436);\n        *result = temp_long;\n        if (temp_long == 0) {\n          temp_long = FUN_00112904(6,4);\n          *result = temp_long;\n          *curr_byte = *curr_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        temp_char_ptr = \"unsigned char\";\n        if ((return_value == '\\0') && (temp_char_ptr = \"char\", is_signed)) {\n          temp_char_ptr = \"signed char\";\n        }\n        temp_long = FUN_0010914e(*input_data,temp_char_ptr);\n        *result = temp_long;\n        if (temp_long == 0) {\n          temp_long = FUN_00113dfe(1,return_value);\n          *result = temp_long;\n          *curr_byte = *curr_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        temp_char_ptr = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        temp_long = FUN_0010914e(*input_data,\"float\");\n        *result = temp_long;\n        if (temp_long == 0) {\n          temp_long = FUN_00113df2(4);\n          *result = temp_long;\n          *curr_byte = *curr_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        temp_char_ptr = \"unsigned int\";\n        temp_char_ptr = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        temp_char_ptr = \"long unsigned int\";\n        temp_char_ptr = \"long int\";\nLAB_0010ced2:\n        if (return_value == '\\0') {\n          temp_char_ptr = temp_char_ptr;\n        }\n        temp_long = FUN_0010914e(*input_data,temp_char_ptr);\n        *result = temp_long;\n        if (temp_long == 0) {\n          temp_long = FUN_00113dfe(4,return_value);\n          *result = temp_long;\n          *curr_byte = *curr_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        temp_char_ptr = \"long double\";\n        if (result == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        temp_long = FUN_0010914e(*input_data,temp_char_ptr);\n        *result = temp_long;\n        if (temp_long == 0) {\n          temp_long = FUN_00113df2(8);\n          *result = temp_long;\n          *curr_byte = *curr_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        temp_char_ptr = \"short unsigned int\";\n        if (return_value == '\\0') {\n          temp_char_ptr = \"short int\";\n        }\n        temp_long = FUN_0010914e(*input_data,temp_char_ptr);\n        *result = temp_long;\n        if (temp_long == 0) {\n          temp_long = FUN_00113dfe(2,return_value);\n          *result = temp_long;\n          *curr_byte = *curr_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        ppcVar18 = temp_char_array;\n        if (result == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        return_value = FUN_0010d21c(input_data,curr_byte,ppcVar18);\n        if (return_value == '\\0') {\n          return 0;\n        }\n        if (result == (long *)0x0) {\n          return 1;\n        }\n        str_length = strlen(temp_char_array[0]);\n        temp_long = FUN_0010afd5(*input_data,input_data[1],temp_char_array[0],str_length & 0xffffffff,9);\n        *result = temp_long;\n        free(temp_char_array[0]);\n        temp_long = *result;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        temp_long = FUN_0010914e(*input_data,&DAT_00120495);\n        *result = temp_long;\n        if (temp_long == 0) {\n          temp_long = FUN_00113e17();\n          *result = temp_long;\n          *curr_byte = *curr_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        temp_long = FUN_0010914e(*input_data,\"__wchar_t\");\n        *result = temp_long;\n        if (temp_long == 0) {\n          temp_long = FUN_00113dfe(2,1);\n          *result = temp_long;\n          *curr_byte = *curr_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        temp_char_ptr = \"long long unsigned int\";\n        if (return_value == '\\0') {\n          temp_char_ptr = \"long long int\";\n        }\n        temp_long = FUN_0010914e(*input_data,temp_char_ptr);\n        *result = temp_long;\n        if (temp_long == 0) {\n          temp_long = FUN_00113dfe(8,return_value);\n          *result = temp_long;\n        }\n      }\n      *curr_byte = *curr_byte + 1;\n      goto LAB_0010d1de;\n    }\n    if (current_byte == 0x43) {\n      is_unsigned = true;\n      goto LAB_0010cd84;\n    }\n    if (current_byte != 0x53) goto LAB_0010cdc5;\n    is_signed = true;\nLAB_0010cd84:\n    *curr_byte = curr_byte_ptr + 1;\n  } while( true );\nLAB_0010ca26:\n  next_byte_ptr = curr_byte_ptr + 1;\n  *curr_byte = next_byte_ptr;\n  current_byte = *next_byte_ptr;\n  if (current_byte == 0) goto switchD_0010cdf9_caseD_60;\n  if (current_byte == 0x5f) {\n    *curr_byte = curr_byte_ptr + 2;\n    return_value = parse_data_0010c95e(input_data,curr_byte,result);\n    if (return_value == '\\0') {\n      return 0;\n    }\n    if (result == (long *)0x0) {\n      return 1;\n    }\n    temp_long = FUN_0010914e(*input_data,\"int\");\n    if (temp_long == 0) {\n      temp_long = FUN_00113dfe(4,0);\n    }\n    temp_long = FUN_00113c43(*result,temp_long,0,temp_long,0);\n    *result = temp_long;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  temp_long = temp_long * 10 + (long)((char)current_byte + -0x30);\n  curr_byte_ptr = next_byte_ptr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)current_byte < ':') {\n    if ((char)current_byte < '0') {\n      if (current_byte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      FUN_0010911f(pnext_byte0);\n      if (result == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((current_byte != 0x47) || (*curr_byte = curr_byte_ptr + 1, ((&_sch_istable)[(ulong)curr_byte_ptr[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnext_byte0 = *curr_byte;\n  byte_count = FUN_00108e76(curr_byte);\n  curr_byte_ptr = *curr_byte;\n  str_length = strlen((char *)curr_byte_ptr);\n  temp_ulong = (ulong)byte_count;\n  if (temp_ulong <= str_length) {\n    *curr_byte = curr_byte_ptr + temp_ulong;\n    if (result == (long *)0x0) {\n      return 1;\n    }\n    temp_ptr = (void *)FUN_00109a0b(curr_byte_ptr,temp_ulong);\n    temp_long = FUN_0010914e(*input_data,temp_ptr);\n    *result = temp_long;\n    free(temp_ptr);\n    if (*result == 0) {\n      temp_long = FUN_0010afd5(*input_data,input_data[1],curr_byte_ptr,(int)*curr_byte - (int)curr_byte_ptr,0);\n      *result = temp_long;\njoined_r0x0010d1d8:\n      if (temp_long == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_unsigned) {\n      temp_long = FUN_00113b71(*result);\n      *result = temp_long;\n    }\n    if (is_float) {\n      temp_long = FUN_00113b4a(*result);\n      *result = temp_long;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  FUN_0010911f(pnext_byte0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_0010d559",
                "FUN_00113c43",
                "FUN_0010afd5",
                "FUN_00113b4a",
                "FUN_00113ce0",
                "FUN_0010d882",
                "FUN_0010d21c",
                "strlen",
                "FUN_00109a0b",
                "FUN_00112904",
                "free",
                "FUN_00113bfa",
                "FUN_0010911f",
                "FUN_00113e17",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_00108ea1",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_0010c95e",
                "FUN_00108e76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_00113e5e",
                "FUN_0010d7d4",
                "FUN_0010d21c",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_data_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUN_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = FUN_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_map_over_sections",
                "FUN_001126c0",
                "xmalloc",
                "FUN_00115f30",
                "FUN_0010554f",
                "FUN_00119ed0",
                "fclose",
                "fopen",
                "FUN_00114190",
                "fwrite",
                "bfd_get_full_section_contents",
                "FUN_0010551d",
                "free",
                "bfd_set_format",
                "bfd_get_section_by_name",
                "FUN_001163d0",
                "FUN_00105828",
                "bfd_set_section_size",
                "FUN_00115530",
                "bfd_get_arch",
                "bfd_make_section_with_flags",
                "__errno_location",
                "strerror",
                "bfd_create_gnu_debuglink_section",
                "FUN_00113fb0",
                "bfd_malloc_and_get_section"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoLocation",
                "pcVar3": "errMsg",
                "uVar4": "translatedErr",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoLocation;\n  char *errMsg;\n  undefined8 translatedErr;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  timeSpec1 = *(undefined4 *)(fileInfo + 0x48);\n  timeSpec2 = *(undefined4 *)(fileInfo + 0x4c);\n  timeSpec3 = *(undefined4 *)(fileInfo + 0x50);\n  timeSpec4 = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timeSpec1,0);\n  if (result != 0) {\n    errnoLocation = __errno_location();\n    errMsg = strerror(*errnoLocation);\n    translatedErr = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00119ed0(translatedErr,filePath,errMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorCode",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorCode)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0,errorCode,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_0010871c",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00115dc0",
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "parse_and_store_string_0010e2f0",
                "param_1": "hashTable",
                "param_2": "flag",
                "param_3": "intParameter",
                "param_4": "charParameter",
                "param_5": "stringParameter",
                "lVar1": "tempLong1",
                "uVar2": "errorCode",
                "lVar3": "tempLong2",
                "uVar4": "errorMsg",
                "uVar5": "translatedErrorMsg",
                "sVar6": "stringLength",
                "lVar7": "storedStringPtr",
                "local_44": "localVariable1",
                "uStack_40": "uStackVariable1",
                "uStack_3f": "uStackVariable2",
                "uStack_3e": "uStackVariable3",
                "local_3c": "localArray",
                "xrealloc": "expandAndReallocateMemory"
            },
            "code": "\nundefined8\nparseAndStoreString_0010e2f0(long *hashTable,undefined flag,int intParameter,undefined8 charParameter,char *stringParameter)\n\n{\n  long tempLong1;\n  undefined4 errorCode;\n  long tempLong2;\n  undefined8 errorMsg;\n  undefined8 translatedErrorMsg;\n  size_t stringLength;\n  long storedStringPtr;\n  undefined4 localVariable1;\n  undefined uStackVariable1;\n  undefined uStackVariable2;\n  undefined2 uStackVariable3;\n  undefined4 localArray [3];\n  \n  if (stringParameter == (char *)0x0) {\n    storedStringPtr = 0;\n  }\n  else {\n    tempLong2 = bfd_hash_lookup(hashTable + 7,stringParameter,1,1);\n    if (tempLong2 == 0) {\n      errorCode = bfd_get_error();\n      errorMsg = bfd_errmsg(errorCode);\n      translatedErrorMsg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      FUN_00119ed0(translatedErrorMsg,errorMsg);\n      return 0;\n    }\n    storedStringPtr = *(long *)(tempLong2 + 0x20);\n    if (storedStringPtr == -1) {\n      storedStringPtr = hashTable[6];\n      tempLong1 = hashTable[5];\n      *(long *)(tempLong2 + 0x20) = storedStringPtr;\n      if (tempLong1 == 0) {\n        hashTable[4] = tempLong2;\n      }\n      else {\n        *(long *)(tempLong1 + 0x18) = tempLong2;\n      }\n      hashTable[5] = tempLong2;\n      stringLength = strlen(stringParameter);\n      hashTable[6] = storedStringPtr + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*hashTable + 8) + 0x50))(storedStringPtr,&localVariable1);\n  uStackVariable2 = 0;\n  uStackVariable1 = flag;\n  (**(code **)(*(long *)(*hashTable + 8) + 0x68))((long)intParameter,&uStackVariable3);\n  (**(code **)(*(long *)(*hashTable + 8) + 0x50))(charParameter,localArray);\n  if ((ulong)hashTable[3] < hashTable[2] + 0xcU) {\n    hashTable[3] = hashTable[3] * 2;\n    storedStringPtr = xrealloc(hashTable[1]);\n    hashTable[1] = storedStringPtr;\n  }\n  storedStringPtr = hashTable[2];\n  tempLong2 = hashTable[1];\n  *(ulong *)(tempLong2 + storedStringPtr) = CONCAT26(uStackVariable3,CONCAT15(uStackVariable2,CONCAT14(uStackVariable1,localVariable1)));\n  *(undefined4 *)(tempLong2 + 8 + storedStringPtr) = localArray[0];\n  hashTable[2] = hashTable[2] + 0xc;\n  return CONCAT71((int7)((ulong)storedStringPtr >> 8),1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "FUN_00119ed0",
                "xrealloc",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e918",
                "FUN_0010e439",
                "FUN_0010e5db",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_0010edb4",
                "FUN_0010ed2c",
                "FUN_0010e842",
                "FUN_0011378f",
                "FUN_0010e7c2",
                "FUN_0010ec73",
                "FUN_0010eafe",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "parse_and_store_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "flagsString",
                "pcVar3": "delimiter",
                "pcVar4": "sectionStart",
                "sVar5": "sectionLength",
                "iVar6": "sectionNameLength",
                "uVar7": "result",
                "auVar8": "outputSectionFlags",
                "iVar1": "comparisonResult",
                "uVar2": "errorString"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *flagsString,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  int comparisonResult;\n  undefined8 errorString;\n  char *delimiter;\n  char *sectionStart;\n  size_t sectionLength;\n  int sectionNameLength;\n  uint result;\n  undefined outputSectionFlags [16];\n  \n  result = 0;\n  do {\n    delimiter = strchr(flagsString,0x2c);\n    if (delimiter == (char *)0x0) {\n      sectionLength = strlen(flagsString);\n      sectionNameLength = (int)sectionLength;\n      sectionStart = (char *)0x0;\n    }\n    else {\n      sectionStart = delimiter + 1;\n      sectionNameLength = (int)delimiter - (int)flagsString;\n    }\n    sectionLength = (size_t)sectionNameLength;\n    comparisonResult = strncasecmp(\"alloc\",flagsString,sectionLength);\n    if (comparisonResult == 0) {\n      result = result | 1;\n    }\n    else {\n      comparisonResult = strncasecmp(\"load\",flagsString,sectionLength);\n      if (comparisonResult == 0) {\n        result = result | 2;\n      }\n      else {\n        comparisonResult = strncasecmp(\"noload\",flagsString,sectionLength);\n        if (comparisonResult == 0) {\n          result = result | 0x200;\n        }\n        else {\n          comparisonResult = strncasecmp(\"readonly\",flagsString,sectionLength);\n          if (comparisonResult == 0) {\n            result = result | 8;\n          }\n          else {\n            comparisonResult = strncasecmp(\"debug\",flagsString,sectionLength);\n            if (comparisonResult == 0) {\n              result = result | 0x2000;\n            }\n            else {\n              comparisonResult = strncasecmp(\"code\",flagsString,sectionLength);\n              if (comparisonResult == 0) {\n                result = result | 0x10;\n              }\n              else {\n                comparisonResult = strncasecmp(\"data\",flagsString,sectionLength);\n                if (comparisonResult == 0) {\n                  result = result | 0x20;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"rom\",flagsString,sectionLength);\n                  if (comparisonResult == 0) {\n                    result = result | 0x40;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"exclude\",flagsString,sectionLength);\n                    if (comparisonResult == 0) {\n                      result = result | 0x8000;\n                    }\n                    else {\n                      comparisonResult = strncasecmp(\"share\",flagsString,sectionLength);\n                      if (comparisonResult == 0) {\n                        result = result | 0x8000000;\n                      }\n                      else {\n                        comparisonResult = strncasecmp(\"contents\",flagsString,sectionLength);\n                        if (comparisonResult == 0) {\n                          result = result | 0x100;\n                        }\n                        else {\n                          comparisonResult = strncasecmp(\"merge\",flagsString,sectionLength);\n                          if (comparisonResult == 0) {\n                            result = result | 0x800000;\n                          }\n                          else {\n                            comparisonResult = strncasecmp(\"strings\",flagsString,sectionLength);\n                            if (comparisonResult != 0) {\n                              delimiter = (char *)xmalloc((long)(sectionNameLength + 1));\n                              strncpy(delimiter,flagsString,sectionLength);\n                              delimiter[sectionLength] = '\\0';\n                              errorString = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              FUN_00119ed0(errorString,delimiter);\n                              errorString = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              FUN_00119dd0(errorString,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            result = result | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    flagsString = sectionStart;\n  } while (sectionStart != (char *)0x0);\n  outputSectionFlags._4_4_ = 0;\n  outputSectionFlags._0_4_ = result;\n  outputSectionFlags._8_8_ = param_4;\n  return outputSectionFlags;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_modified_file_path_001125fa",
                "param_1": "params",
                "ppcVar2": "ptrToChar",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s": "modifiedFilePath",
                "uVar1": "totalLength"
            },
            "code": "\nchar * getModifiedFilePath_001125fa(char **params)\n\n{\n  ulong totalLength;\n  char **ptrToChar;\n  size_t length1;\n  size_t length2;\n  char *modifiedFilePath;\n  \n  if (params == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  ptrToChar = (char **)params[0x1d];\n  modifiedFilePath = *params;\n  if ((ptrToChar != (char **)0x0) && ((*(byte *)((long)ptrToChar + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*ptrToChar);\n    length2 = strlen(modifiedFilePath);\n    totalLength = length1 + 3 + length2;\n    if (DAT_00127a38 < totalLength) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (totalLength >> 1) + totalLength;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)params[0x1d],*params);\n    modifiedFilePath = DAT_00127a30;\n  }\n  return modifiedFilePath;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "sprintf",
                "__assert_fail",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_001152b6",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "get_modified_file_path_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_return_value_00108f05"
            },
            "code": "\nundefined getReturnValue_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_return_value_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "free_memory_blocks_00108863",
                "puVar1": "pointer",
                "puVar2": "nextPointer"
            },
            "code": "\nvoid freeMemoryBlocks_00108863(void)\n\n{\n  undefined4 *pointer;\n  undefined4 *nextPointer;\n  \n  pointer = (undefined4 *)&DAT_00127720;\n  do {\n    nextPointer = pointer + 6;\n    free(*(void **)(pointer + 4));\n    *(undefined8 *)(pointer + 4) = 0;\n    pointer = nextPointer;\n  } while (nextPointer != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "free_memory_blocks_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_function_from_pointer_00104020"
            },
            "code": "\nvoid executeFunctionFromPointer_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_from_pointer_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "source_debug_start_00108f08",
                "param_1": "debug_handle",
                "param_2": "filename",
                "iVar1": "comparison_result",
                "uVar2": "result",
                "puVar3": "current_element",
                "puVar4": "previous_element",
                "lVar5": "loop_counter",
                "puVar6": "head_element",
                "pcVar7": "file_name",
                "puVar8": "new_element",
                "bVar9": "dummy_byte"
            },
            "code": "\n\n\nundefined8 source_debug_start_00108f08(long debug_handle,char *filename)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined8 *current_element;\n  undefined8 *previous_element;\n  long loop_counter;\n  undefined8 *head_element;\n  char *file_name;\n  undefined8 *new_element;\n  byte dummy_byte;\n  \n  dummy_byte = 0;\n  file_name = \"\";\n  if (filename != (char *)0x0) {\n    file_name = filename;\n  }\n  if (*(long *)(debug_handle + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_element = *(undefined8 **)(*(long *)(debug_handle + 8) + 8); current_element != (undefined8 *)0x0;\n        current_element = (undefined8 *)*current_element) {\n      comparison_result = filename_cmp(current_element[1],file_name);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_element = (undefined8 *)xmalloc(0x18);\n    head_element = *(undefined8 **)(debug_handle + 0x10);\n    new_element = current_element;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)new_element = 0;\n      new_element = (undefined8 *)((long)new_element + (ulong)dummy_byte * -8 + 4);\n    }\n    current_element[1] = file_name;\n    new_element = (undefined8 *)*head_element;\n    while (previous_element = new_element, previous_element != (undefined8 *)0x0) {\n      head_element = previous_element;\n      new_element = (undefined8 *)*previous_element;\n    }\n    *head_element = current_element;\nLAB_00108fad:\n    *(undefined8 **)(debug_handle + 0x10) = current_element;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "filename_cmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "source_debug_start_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_and_free_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeAndFreeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_and_free_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "update_permission_00114190",
                "param_1": "permissionList",
                "param_2": "isPattern",
                "param_3": "permissionFlags",
                "uVar1": "flag",
                "plVar2": "pattern",
                "pplVar3": "nextPermission",
                "iVar4": "comparisonResult",
                "uVar5": "errorMsg",
                "pplVar6": "currentPermission",
                "pplVar7": "permission",
                "pplVar8": "nextPtr"
            },
            "code": "\nlong ** updatePermission_00114190(long *permissionList,char isPattern,uint permissionFlags)\n\n{\n  uint flag;\n  long *pattern;\n  long **nextPermission;\n  int comparisonResult;\n  undefined8 errorMsg;\n  long **currentPermission;\n  long **permission;\n  long **nextPtr;\n  \n  permission = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (isPattern == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (isPattern == '\\0') {\n    if ((permissionFlags & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      currentPermission = (long **)*permission;\n      if (currentPermission == (long **)0x0) {\n        return (long **)0x0;\n      }\n      permission = (long **)0x0;\n    }\n    else {\n      pattern = DAT_001278e0[1];\n      if (*(char *)pattern == '!') {\n        comparisonResult = fnmatch((char *)((long)pattern + 1),(char *)permissionList,0);\n        currentPermission = permission;\n        if (comparisonResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparisonResult = fnmatch((char *)pattern,(char *)permissionList,0);\n      if (comparisonResult != 0) goto LAB_001141e5;\n      currentPermission = (long **)*permission;\n      if (currentPermission == (long **)0x0) goto LAB_00114245;\n    }\n    if ((permissionFlags & *(uint *)((long)currentPermission + 0x14)) != 0) {\n      pattern = currentPermission[1];\n      if (*(char *)pattern == '!') {\n        comparisonResult = fnmatch((char *)((long)pattern + 1),(char *)permissionList,0);\n        if (comparisonResult == 0) {\nLAB_0011438e:\n          *(undefined *)(currentPermission + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparisonResult = fnmatch((char *)pattern,(char *)permissionList,0);\n        if ((permission == (long **)0x0) && (comparisonResult == 0)) {\n          nextPtr = (long **)*currentPermission;\n          permission = currentPermission;\n          if (nextPtr == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextPtr = (long **)*currentPermission;\n    currentPermission = permission;\n    if (nextPtr != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparisonResult = strcmp((char *)DAT_001278e0[1],(char *)permissionList);\n    if (comparisonResult == 0) {\nLAB_001143cd:\n      flag = *(uint *)((long)permission + 0x14);\n      if ((((flag & 1) != 0) && ((permissionFlags & 2) != 0)) ||\n         (((permissionFlags & 1) != 0 && ((flag & 2) != 0)))) {\n        errorMsg = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        FUN_00119dd0(errorMsg,permissionList);\n      }\n      if ((((flag & 8) != 0) && ((permissionFlags & 0x10) != 0)) || ((permissionFlags & 0x18) == 0x18)) {\n        errorMsg = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        FUN_00119dd0(errorMsg,permissionList);\n      }\n      if ((((flag & 0x20) == 0) || ((permissionFlags & 0x40) == 0)) && ((permissionFlags & 0x60) != 0x60)) {\n        *(uint *)((long)permission + 0x14) = flag | permissionFlags;\n        return permission;\n      }\n      errorMsg = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      FUN_00119dd0(errorMsg,permissionList);\n    }\n    permission = (long **)*permission;\n    if (permission == (long **)0x0) goto LAB_001142a9;\n    comparisonResult = strcmp((char *)permission[1],(char *)permissionList);\n    if (comparisonResult == 0) goto LAB_001143cd;\n    nextPtr = (long **)*permission;\n    currentPermission = (long **)0x0;\n    if (nextPtr == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      permission = currentPermission;\n      if (isPattern == '\\0') {\n        while (currentPermission = nextPtr, nextPermission = permission, nextPtr = currentPermission,\n              (permissionFlags & *(uint *)((long)currentPermission + 0x14)) != 0) {\n          pattern = currentPermission[1];\n          if (*(char *)pattern == '!') {\n            comparisonResult = fnmatch((char *)((long)pattern + 1),(char *)permissionList,0);\n            if (comparisonResult == 0) goto LAB_0011438e;\n            nextPtr = (long **)*currentPermission;\n            if ((long **)*currentPermission == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparisonResult = fnmatch((char *)pattern,(char *)permissionList,0);\n            if ((permission == (long **)0x0) && (comparisonResult == 0)) {\n              permission = currentPermission;\n              nextPtr = (long **)*currentPermission;\n              if ((long **)*currentPermission == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextPtr = (long **)*currentPermission;\n              if ((long **)*currentPermission == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparisonResult = strcmp((char *)nextPtr[1],(char *)permissionList);\n        nextPermission = currentPermission;\n        permission = nextPtr;\n        if (comparisonResult == 0) goto LAB_001143cd;\n      }\n      currentPermission = nextPermission;\n      nextPtr = (long **)*nextPtr;\n      permission = currentPermission;\n    } while (nextPtr != (long **)0x0);\nLAB_001142a1:\n    if (isPattern != '\\0') {\nLAB_001142a9:\n      currentPermission = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(currentPermission + 3) = (undefined  [16])0x0;\n      *(undefined *)(currentPermission + 2) = 0;\n      *(uint *)((long)currentPermission + 0x14) = permissionFlags;\n      currentPermission[5] = (long *)0x0;\n      permission = currentPermission;\n      *currentPermission = (long *)DAT_001278e0;\n      DAT_001278e0 = permission;\n      currentPermission[1] = permissionList;\n      return currentPermission;\n    }\n  }\nLAB_00114212:\n  if (permission == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(permission + 2) = 1;\n  return permission;\n}\n\n",
            "called": [
                "fnmatch",
                "dcgettext",
                "strcmp",
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00104bba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115b70",
                "FUN_00107880",
                "FUN_00115dc0",
                "FUN_00108072",
                "FUN_00114c20",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "update_permission_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "process_build_attribute_notes_00116490",
                "param_1": "param1",
                "param_2": "attributeNoteType",
                "param_3": "attributeNoteName",
                "param_4": "noteDescription",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "var4",
                "puVar5": "pointerVar5",
                "iVar6": "var6",
                "lVar7": "var7",
                "uVar8": "var8",
                "in_RAX": "inputRAX",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr": "ptr",
                "uVar13": "var13",
                "unaff_RBX": "register_BX",
                "unaff_RBP": "register_BP",
                "puVar14": "pointerVar14",
                "puVar15": "pointerVar15",
                "cVar16": "var16",
                "puVar17": "pointerVar17",
                "puVar18": "pointerVar18",
                "in_R11": "register_R11",
                "unaff_R12": "register_R12",
                "puVar19": "pointerVar19",
                "unaff_R13": "register_R13",
                "__nmemb": "nmemb",
                "unaff_R14": "register_R14",
                "puVar20": "pointerVar20",
                "bVar21": "var21",
                "iVar22": "var22",
                "unaff_retaddr": "returnAddress",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "in_stack_00000020": "stackVar1",
                "in_stack_00000028": "stackVar2",
                "in_stack_00000030": "stackVar3",
                "in_stack_00000038": "stackVar4",
                "in_stack_00000040": "stackVar5",
                "in_stack_00000048": "stackVar6"
            },
            "code": "\nulong processBuildAttributeNotes_00116490(undefined8 param1,ulong attributeNoteType,ulong attributeNoteName,long noteDescription)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool var4;\n  ulong *pointerVar5;\n  int var6;\n  long var7;\n  undefined8 var8;\n  ulong inputRAX;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr;\n  ulong var13;\n  ulong register_BX;\n  ulong register_BP;\n  ulong *pointerVar14;\n  undefined *pointerVar15;\n  char var16;\n  undefined *pointerVar17;\n  undefined *pointerVar18;\n  ulong register_R11;\n  ulong *register_R12;\n  ulong *pointerVar19;\n  ulong register_R13;\n  size_t nmemb;\n  undefined8 *register_R14;\n  ulong *pointerVar20;\n  byte var21;\n  int var22;\n  ulong returnAddress;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong stackVar1;\n  ulong *stackVar2;\n  undefined *stackVar3;\n  uint stackVar4;\n  uint stackVar5;\n  undefined8 *stackVar6;\n  \n  var21 = 0;\ncode_r0x00116490:\n  var7 = noteDescription;\n  var10 = register_BP;\n  var13 = register_R13;\n  if (inputRAX == 0) {\n    if (attributeNoteType == 0x100) {\n      register_R12[7] = returnAddress;\n      var11 = returnAddress;\nLAB_001164af:\n      var9 = register_R13;\n      var13 = register_R13;\n      returnAddress = var11;\n    }\n    else {\n      register_R12[7] = param9;\nLAB_0011669e:\n      var10 = register_BP;\n      var9 = register_BP;\n    }\nLAB_001164bb:\n    register_R12[8] = var9;\n    if (*(char *)((register_R12[3] - 1) + attributeNoteName) != '\\0') {\n      var7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    pointerVar19 = register_R12 + 9;\n    if (0xb < register_BX) {\n      var9 = (**(code **)(register_R14[1] + 0x40))(var7);\n      *pointerVar19 = var9;\n      var9 = (**(code **)(register_R14[1] + 0x40))(var7 + 4);\n      register_R12[10] = var9;\n      attributeNoteType = (**(code **)(register_R14[1] + 0x40))(var7 + 8);\n      attributeNoteName = *pointerVar19;\n      register_R12[0xb] = attributeNoteType;\n      inputRAX = register_R12[10];\n      var9 = attributeNoteName + 3 & 0xfffffffffffffffc;\n      register_R12[0xf] = var9;\n      if (inputRAX != (inputRAX + 3 & 0xfffffffffffffffc)) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < attributeNoteType - 0x100) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + inputRAX + 0xc;\n      if (register_BX < var11) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (attributeNoteName < 2) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      register_R12[0xc] = var7 + 0xc;\n      register_R11 = var7 + 0xc + var9;\n      register_R12[0xd] = register_R11;\n      register_BX = register_BX + (-0xc - (var9 + inputRAX));\n      noteDescription = var7 + var11;\n      register_BP = var10;\n      register_R12 = pointerVar19;\n      register_R13 = var13;\n      if (attributeNoteName != 2) {\n        if (*(char *)(var7 + 0xc) == '$') {\n          if ((*(char *)(var7 + 0xd) == '\\x01') && (*(char *)(var7 + 0xe) == '1')) {\n            var10 = processBuildAttributeNotes_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < attributeNoteName) && (*(char *)(var7 + 0xc) == 'G')) &&\n                 (*(char *)(var7 + 0xd) == 'A')) &&\n                ((*(char *)(var7 + 0xe) == '$' && (*(char *)(var7 + 0xf) == '\\x01')))) {\n          if (*(char *)(var7 + 0x10) == '2') {\n            var10 = processBuildAttributeNotes_00116490();\n            return var10;\n          }\n          if (*(char *)(var7 + 0x10) == '3') {\n            var10 = processBuildAttributeNotes_00116490();\n            return var10;\n          }\n          var7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (register_BX != 0) {\n      var7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stackVar4 | stackVar5 | param8) == 0) {\n      var1 = *register_R14;\n      var2 = *stackVar6;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(var8,var1,var2);\nLAB_0011671b:\n      nmemb = ((long)pointerVar19 - (long)stackVar2 >> 3) * -0x71c71c71c71c71c7;\n      qsort(stackVar2,nmemb,0x48,FUN_0011a1b0);\n      for (pointerVar14 = stackVar2; pointerVar14 < pointerVar19; pointerVar14 = pointerVar14 + 9) {\n        var10 = pointerVar14[2];\n        if (var10 != 0) {\n          var13 = pointerVar14[7];\n          var9 = pointerVar14[8];\n          pointerVar20 = pointerVar14;\n          var22 = 0;\n          if (var13 == var9) {\n            pointerVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                pointerVar5 = pointerVar20;\n                pointerVar20 = pointerVar5 + -9;\n                if (pointerVar20 < stackVar2) goto LAB_001167f5;\n                var11 = pointerVar5[-7];\n              } while (var11 == 0);\n              if ((*pointerVar20 != *pointerVar14) ||\n                 (var6 = memcmp((void *)pointerVar5[-6],(void *)pointerVar14[3],*pointerVar14), var6 != 0))\n              break;\n              var3 = pointerVar5[-2];\n              var12 = pointerVar5[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  pointerVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  pointerVar14[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto FUN_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  pointerVar5[-1] = var12;\n                  pointerVar5[-2] = var13;\n                  pointerVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto FUN_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nFUN_00116852:\n              var4 = var22 < 0x11;\n              var22 = var22 + 1;\n            } while (var4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(stackVar2,nmemb,0x48,FUN_0011a250);\n      ptr = (undefined *)xmalloc(stackVar1 * 2);\n      param7 = 0;\n      param9 = 0;\n      pointerVar18 = ptr;\n      for (pointerVar14 = stackVar2; pointerVar14 < pointerVar19; pointerVar14 = pointerVar14 + 9) {\n        if (pointerVar14[2] != 0) {\n          pointerVar17 = pointerVar18 + 4;\n          pointerVar15 = pointerVar18 + 0xc;\n          if ((pointerVar14[7] == param9) && (pointerVar14[8] == param7)) {\n            (**(code **)(register_R14[1] + 0x50))(*pointerVar14,pointerVar18);\n            (**(code **)(register_R14[1] + 0x50))(0,pointerVar17);\n            (**(code **)(register_R14[1] + 0x50))(pointerVar14[2],pointerVar18 + 8);\n            var13 = pointerVar14[6];\n            var10 = *pointerVar14;\n            pointerVar18 = (undefined *)pointerVar14[3];\n            pointerVar17 = pointerVar15;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *pointerVar17 = *pointerVar18;\n              pointerVar18 = pointerVar18 + (ulong)var21 * -2 + 1;\n              pointerVar17 = pointerVar17 + (ulong)var21 * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (var7 = var13 - var10; var7 != 0; var7 = var7 + -1) {\n                *pointerVar17 = 0;\n                pointerVar17 = pointerVar17 + (ulong)var21 * -2 + 1;\n              }\n            }\n            pointerVar18 = pointerVar15 + var13;\n          }\n          else {\n            (**(code **)(register_R14[1] + 0x50))();\n            if (*(int *)(register_R14[1] + 8) == 5) {\n              var16 = (*(char *)(register_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              var16 = '\\b';\n            }\n            (**(code **)(register_R14[1] + 0x50))(var16,pointerVar17);\n            (**(code **)(register_R14[1] + 0x50))(pointerVar14[2],pointerVar18 + 8);\n            var10 = *pointerVar14;\n            pointerVar18 = (undefined *)pointerVar14[3];\n            pointerVar17 = pointerVar15;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *pointerVar17 = *pointerVar18;\n              pointerVar18 = pointerVar18 + (ulong)var21 * -2 + 1;\n              pointerVar17 = pointerVar17 + (ulong)var21 * -2 + 1;\n            }\n            var13 = pointerVar14[6];\n            if (var10 < var13) {\n              for (var7 = var13 - var10; var7 != 0; var7 = var7 + -1) {\n                *pointerVar17 = 0;\n                pointerVar17 = pointerVar17 + (ulong)var21 * -2 + 1;\n              }\n            }\n            var7 = register_R14[1];\n            pointerVar15 = pointerVar15 + var13;\n            pointerVar18 = pointerVar15 + 8;\n            if ((*(int *)(var7 + 8) == 5) && (*(char *)(register_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(var7 + 0x38))(pointerVar14[7],pointerVar15);\n              (**(code **)(register_R14[1] + 0x38))(pointerVar14[8],pointerVar18);\n              pointerVar18 = pointerVar15 + 0x10;\n            }\n            else {\n              (**(code **)(var7 + 0x50))(pointerVar14[7],pointerVar15);\n              (**(code **)(register_R14[1] + 0x50))(pointerVar14[8],pointerVar15 + 4);\n            }\n            param9 = pointerVar14[7];\n            param7 = pointerVar14[8];\n          }\n        }\n      }\n      var13 = (long)pointerVar18 - (long)ptr;\n      var10 = var13;\n      pointerVar18 = ptr;\n      if (var13 < stackVar1) {\n        for (; stackVar1 = var13, var10 != 0; var10 = var10 - 1) {\n          *stackVar3 = *pointerVar18;\n          pointerVar18 = pointerVar18 + (ulong)var21 * -2 + 1;\n          stackVar3 = stackVar3 + (ulong)var21 * -2 + 1;\n        }\n      }\n      free(ptr);\nLAB_001166f8:\n      free(stackVar2);\n      return stackVar1;\n    }\n    if (((stackVar5 | param8) == 0) || (stackVar4 == 0)) {\n      if (stackVar5 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    var7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (inputRAX == 0x10) {\n      var11 = (**(code **)(register_R14[1] + 0x28))(register_R11);\n      var9 = (**(code **)(register_R14[1] + 0x28))(register_R12[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (register_R12[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = returnAddress;\n        }\n        attributeNoteName = *register_R12;\n        register_R12[7] = var11;\n        var13 = var9;\n        returnAddress = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param9;\n        }\n        attributeNoteName = *register_R12;\n        register_R12[7] = var11;\n        var10 = var9;\n        param9 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (inputRAX < 0x11) {\n      if (inputRAX == 4) {\n        var11 = (**(code **)(register_R14[1] + 0x40))(register_R11);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (inputRAX == 8) {\n        var10 = FUN_001086af();\n        return var10;\n      }\n    }\n    var7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (var7 != 0) {\n    bfd_set_error(0x11);\n    FUN_001126c0(0,register_R14,stackVar6,var7);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "process_build_attribute_notes_00116490"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "targetName",
                "param_2": "outputFile",
                "lVar1": "target",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "targetPtr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long targetName,FILE *outputFile)\n\n{\n  long target;\n  char *message;\n  long *targetList;\n  long *targetPtr;\n  \n  if (targetName == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,targetName);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtr = targetList;\n  while( true ) {\n    target = *targetPtr;\n    targetPtr = targetPtr + 1;\n    if (target == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "free",
                "fprintf",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "param_1": "function_ptr",
                "param_2": "new_context",
                "param_3": "undefined_param_3",
                "param_4": "original_result",
                "lVar1": "current_block_ptr",
                "uVar2": "translated_message",
                "pcVar3": "error_message",
                "auVar4": "output",
                "_stderr": "file_stream"
            },
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_ptr,undefined8 new_context,undefined8 undefined_param_3,undefined8 original_result)\n\n{\n  long current_block_ptr;\n  undefined8 translated_message;\n  char *error_message;\n  undefined output [16];\n  \n  if (((*(long *)(function_ptr + 8) == 0) || (current_block_ptr = *(long *)(function_ptr + 0x20), current_block_ptr == 0)) ||\n     (*(long *)(function_ptr + 0x18) == 0)) {\n    error_message = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(current_block_ptr + 8) == 0) {\n      *(undefined8 *)(current_block_ptr + 0x20) = new_context;\n      translated_message = CONCAT71((int7)((ulong)current_block_ptr >> 8),1);\n      *(undefined (*) [16])(function_ptr + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_message = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  translated_message = dcgettext(0,error_message,5);\n  fprintf(file_stream,\"%s\\n\",translated_message);\n  translated_message = 0;\nLAB_0010be86:\n  output._8_8_ = original_result;\n  output._0_8_ = translated_message;\n  return output;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_end_function_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_00115dc0",
                "FUN_001163d0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00119dd0",
                "FUN_00115dc0",
                "FUN_00116b90",
                "FUN_001083b7",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_memory_00113da9",
                "param_1": "byteOffset",
                "param_2": "param2",
                "param_3": "dataPointer",
                "param_4": "auxiliaryData",
                "puVar1": "memoryBlock",
                "lVar2": "loopCounter",
                "puVar3": "currentPointer",
                "bVar4": "byteOffset2",
                "auVar5": "returnValue"
            },
            "code": "\nundefined  [16] initializeMemory_00113da9(byte byteOffset,undefined8 param2,undefined8 dataPointer,undefined8 auxiliaryData)\n\n{\n  undefined8 *memoryBlock;\n  long loopCounter;\n  undefined8 *currentPointer;\n  byte byteOffset2;\n  undefined returnValue [16];\n  \n  byteOffset2 = 0;\n  returnValue._0_8_ = FUN_00112904(8 - (uint)byteOffset);\n  if (returnValue._0_8_ != 0) {\n    memoryBlock = (undefined8 *)xmalloc(0x28);\n    currentPointer = memoryBlock + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)currentPointer = 0;\n      currentPointer = (undefined8 *)((long)currentPointer + (ulong)byteOffset2 * -8 + 4);\n    }\n    *memoryBlock = dataPointer;\n    *(undefined8 **)(returnValue._0_8_ + 0x10) = memoryBlock;\n  }\n  returnValue._8_8_ = auxiliaryData;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record_1",
                "param_2": "record_2",
                "uVar1": "record_1_type"
            },
            "code": "\nint compareRecords_0011a250(ulong *record_1,ulong *record_2)\n\n{\n  ulong record_1_type;\n  \n  record_1_type = record_1[2];\n  if (record_1_type == record_2[2]) {\n    if (record_2[7] <= record_1[7]) {\n      if (record_1[7] <= record_2[7]) {\n        if (record_2[8] < record_1[8]) {\n          return -1;\n        }\n        if (record_2[8] <= record_1[8]) {\n          if ((4 < *record_1) && (4 < *record_2)) {\n            if (*(char *)(record_1[3] + 3) != *(char *)(record_2[3] + 3)) {\n              return (int)*(char *)(record_1[3] + 3) - (int)*(char *)(record_2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record_1_type == 0) || ((record_1_type != 0x100 && (record_2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "convert_number_to_string_0010a69a",
                "param_1": "inputData",
                "param_2": "dataPointer",
                "param_3": "flag",
                "param_4": "character",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "convertedNumber",
                "sVar3": "stringLength",
                "uVar4": "allocatedMemory",
                "uVar5": "hasNumber",
                "local_60": "outputString"
            },
            "code": "\nundefined4 convertNumberToString_0010a69a(long inputData,undefined8 dataPointer,int flag,char character,uint value)\n\n{\n  undefined4 result;\n  long convertedNumber;\n  size_t stringLength;\n  undefined8 allocatedMemory;\n  undefined hasNumber;\n  char outputString [48];\n  \n  if (flag == 0) {\n    outputString[0] = '\\0';\n    hasNumber = 0;\n    convertedNumber = 0;\n  }\n  else {\n    convertedNumber = FUN_00109c2e();\n    if (convertedNumber < 0) {\n      return 0;\n    }\n    hasNumber = 1;\n    sprintf(outputString,\"%ld=\",convertedNumber);\n  }\n  stringLength = strlen(outputString);\n  sprintf(outputString + stringLength,\"%c%u\",(ulong)((-(uint)(character == '\\0') & 2) + 0x73),(ulong)value);\n  result = FUN_00109b52(inputData,outputString,convertedNumber,hasNumber,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  convertedNumber = *(long *)(inputData + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(convertedNumber + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(inputData + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109c2e",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "convert_number_to_string_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "validate_section_options_00115b70",
                "param_1": "section_names",
                "pcVar1": "current_section",
                "iVar2": "comparison_result",
                "iVar3": "option_value",
                "lVar4": "result_1",
                "lVar5": "result_2",
                "uVar6": "return_value",
                "plVar7": "matched_sections"
            },
            "code": "\nundefined8 validate_section_options_00115b70(char **section_names)\n\n{\n  char *current_section;\n  int comparison_result;\n  int option_value;\n  long result_1;\n  long result_2;\n  undefined8 return_value;\n  long *matched_sections;\n  \n  result_1 = FUN_00114190(*section_names,0,4);\n  if (result_1 == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      result_1 = FUN_00114190(*section_names,0,1);\n      result_2 = FUN_00114190(*section_names,0,2);\n      if (result_1 != 0) {\n        if (result_2 != 0) {\n          current_section = *section_names;\n          return_value = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          FUN_00119dd0(return_value,current_section);\n        }\n        if (result_1 != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_names;\n          matched_sections = DAT_001279b8;\n          do {\n            option_value = strcmp(current_section,(char *)matched_sections[1]);\n            if (option_value == 0) {\n              return_value = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              FUN_00119dd0(return_value,current_section);\n            }\n            matched_sections = (long *)*matched_sections;\n          } while (matched_sections != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (result_2 == 0)) {\n        return 1;\n      }\n    }\n    option_value = DAT_00127a2c;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        current_section = *section_names;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          option_value = strcmp(current_section,\".reloc\");\n          if (option_value != 0) {\n            return 1;\n          }\n          return_value = FUN_0010829e();\n          return return_value;\n        }\n      }\n      if (option_value == 5) {\n        return_value = FUN_00113ede(section_names);\n        return return_value;\n      }\n      if (option_value == 4) {\n        return 0;\n      }\n    }\n    if (option_value == 6) {\n      return_value = FUN_001082b3();\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "FUN_00114190",
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "validate_section_options_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_00115dc0",
                "FUN_001163d0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_binary_file_00116030",
                "param_1": "filePointer",
                "param_2": "fileSize",
                "plVar1": "pointer",
                "lVar2": "value",
                "lVar3": "valA",
                "lVar4": "valB",
                "iVar5": "error",
                "in_RAX": "returnValue",
                "lVar6": "upperBound",
                "__ptr": "relocPtr",
                "lVar7": "relocSize",
                "extraout_RAX": "result",
                "lVar8": "index",
                "uStack_28": "stackVar"
            },
            "code": "\n\n\nundefined8 processBinaryFile_00116030(undefined8 *filePointer,long fileSize)\n\n{\n  long *pointer;\n  long value;\n  long valA;\n  long valB;\n  int error;\n  undefined8 returnValue;\n  long upperBound;\n  void *relocPtr;\n  long relocSize;\n  undefined8 result;\n  long index;\n  undefined8 stackVar;\n  \n  if (*(long *)(fileSize + 0x60) == 0) {\n    return returnValue;\n  }\n  upperBound = bfd_get_reloc_upper_bound();\n  if (upperBound < 0) {\n    if ((upperBound != -1) || (error = bfd_get_error(), error != 5)) {\n      FUN_0011a110(*filePointer);\n                    \n      xexit(1);\n    }\n  }\n  else if (upperBound != 0) {\n    relocPtr = (void *)xmalloc();\n    relocSize = bfd_canonicalize_reloc(filePointer,fileSize,relocPtr);\n    valB = _DAT_00128680;\n    valA = _DAT_00128568;\n    upperBound = _fwrite;\n    if (relocSize < 0) {\n      FUN_0011a110(*filePointer);\n                    \n      xexit(1);\n    }\n    if (relocSize != 0) {\n      index = 0;\n      do {\n        pointer = **(long ***)((long)relocPtr + index * 8);\n        if ((((pointer != (long *)0x0) && (value = *pointer, value != 0)) && (value != upperBound)) &&\n           ((value != valB && (value != valA)))) {\n          *(uint *)(value + 0x18) = *(uint *)(value + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (relocSize != index);\n    }\n    free(relocPtr);\n    return result;\n  }\n  return stackVar;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "xexit",
                "xmalloc",
                "free",
                "FUN_001083b7",
                "fwrite",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_file_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "param_1": "string_array",
                "__s": "string_ptr",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_string_length_00113ede(char **string_array)\n\n{\n  char *string_ptr;\n  size_t string_length;\n  undefined8 result;\n  \n  if (string_array == (char **)0x0) {\n    return 0;\n  }\n  string_ptr = *string_array;\n  if (string_ptr != (char *)0x0) {\n    string_length = strlen(string_ptr);\n    if (4 < (int)string_length) {\n      result = FUN_00113fb0(string_ptr + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_string_length_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "record1Val",
                "lVar2": "record2Val",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long record1Val;\n  long record2Val;\n  int result;\n  uint flag;\n  \n  record1Val = *record1;\n  record2Val = *record2;\n  flag = *(uint *)(record2Val + 0x24) & 0x102;\n  if ((*(uint *)(record1Val + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1Val + 0x38) <= *(ulong *)(record2Val + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2Val + 0x38) <= *(ulong *)(record1Val + 0x38)) {\n      if (*(ulong *)(record2Val + 0x40) < *(ulong *)(record1Val + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2Val + 0x40) <= *(ulong *)(record1Val + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1Val + 0x18) <= *(uint *)(record2Val + 0x18)) {\n            return -(uint)(*(uint *)(record1Val + 0x18) < *(uint *)(record2Val + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_data_0010c892",
                "param_1": "input",
                "param_2": "dataPointer",
                "cVar1": "flag",
                "lVar2": "result",
                "lVar3": "value",
                "uVar4": "returnValue",
                "puVar5": "ptr",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processData_0010c892(undefined8 input,long dataPointer)\n\n{\n  char flag;\n  long result;\n  long value;\n  undefined8 returnValue;\n  undefined8 *ptr;\n  int kind;\n  \n  if (*(char *)(dataPointer + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr = *(undefined8 **)(dataPointer + 0x1a0); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      kind = *(int *)(ptr + 2);\n      value = ptr[1];\n      if (kind != 0) {\n        if (value != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          returnValue = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",returnValue);\n        }\nLAB_0010c910:\n        ptr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (value == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      result = FUN_00112904(kind,0);\n      if (result == 0) goto LAB_0010c910;\n      value = FUN_0010c6be(input,value,result);\n      ptr[3] = value;\n      if (value == 0) goto LAB_0010c916;\n    }\n    returnValue = 1;\n  }\n  else {\n    flag = FUN_0010c1c6();\n    if (flag != '\\0') {\n      flag = FUN_0010be1a(input,*(undefined8 *)(dataPointer + 0x68));\n      if (flag != '\\0') {\n        *(undefined *)(dataPointer + 0x60) = 0;\n        *(undefined8 *)(dataPointer + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c1c6",
                "FUN_00112904",
                "fprintf",
                "FUN_0010be1a",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "allocate_and_initialize_data_00112904",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "dataPointer"
            },
            "code": "\nvoid allocateAndInitializeData_00112904(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 *dataPointer;\n  \n  dataPointer = (undefined4 *)xmalloc(0x18);\n  *dataPointer = input1;\n  dataPointer[1] = input2;\n  *(undefined (*) [16])(dataPointer + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010c892",
                "FUN_00113c43",
                "FUN_00113b4a",
                "FUN_00113d6e",
                "FUN_00113ce0",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_00113bfa",
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "auVar2": "output"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined output [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  output._1_7_ = 0;\n  output[0] = comparisonResult == 0;\n  output._8_8_ = returnValue;\n  return output;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00107880",
                "FUN_00109a32",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_0010914e",
                "FUN_0010d559",
                "FUN_0010afd5",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010c6be",
                "FUN_00115f50",
                "FUN_0010ee3f",
                "FUN_00108c86",
                "FUN_00115b70",
                "FUN_0010922b",
                "FUN_00114190",
                "FUN_0010c7a0",
                "FUN_00108898",
                "FUN_0011173a",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_functions_0011a390",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionListPtr",
                "uVar5": "functionCount"
            },
            "code": "\nvoid executeFunctions_0011a390(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *functionListPtr;\n  uint functionCount;\n  \n  functionListPtr = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      functionCount = *(int *)(functionListPtr + 1) - 1;\n      if (-1 < (int)functionCount) {\n        index = (long)(int)functionCount;\n        functionCount = functionCount & 7;\n        (*(code *)functionListPtr[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (functionCount != 0) {\n            if (functionCount != 1) {\n              if (functionCount != 2) {\n                if (functionCount != 3) {\n                  if (functionCount != 4) {\n                    if (functionCount != 5) {\n                      if (functionCount != 6) {\n                        (*(code *)functionListPtr[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)functionListPtr[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionListPtr[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionListPtr[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionListPtr[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionListPtr[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionListPtr[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionListPtr[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionListPtr[tempIndex + 1])();\n            (*(code *)functionListPtr[tempIndex])();\n            (*(code *)functionListPtr[index])();\n            (*(code *)functionListPtr[tempIndex + -2])();\n            (*(code *)functionListPtr[tempIndex + -3])();\n            (*(code *)functionListPtr[tempIndex + -4])();\n            (*(code *)functionListPtr[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionListPtr = (long *)*functionListPtr;\n    } while (functionListPtr != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_functions_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "format_data_0010e842",
                "param_1": "input",
                "param_2": "string",
                "param_3": "value",
                "param_4": "output",
                "__s": "formattedString",
                "sVar1": "stringLength",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] formatData_0010e842(undefined8 input,char *string,undefined8 value,undefined8 output)\n\n{\n  size_t stringLength;\n  char *formattedString;\n  undefined result [16];\n  \n  stringLength = strlen(string);\n  formattedString = (char *)xmalloc(stringLength + 0x14);\n  sprintf(formattedString,\"%s:c=i%ld\",string,value);\n  result._0_4_ = FUN_0010e2f0(input,0x80,0,0,formattedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = output;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_data_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_data_00113cb9",
                "param_1": "inputValue",
                "lVar1": "allocatedMemory"
            },
            "code": "\nlong initializeData_00113cb9(long inputValue)\n\n{\n  long allocatedMemory;\n  \n  if (inputValue != 0) {\n    allocatedMemory = FUN_00112904(0xe,0);\n    if (allocatedMemory == 0) {\n      allocatedMemory = 0;\n    }\n    else {\n      *(long *)(allocatedMemory + 0x10) = inputValue;\n    }\n    return allocatedMemory;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_data_0010eafe",
                "param_1": "context",
                "param_2": "input",
                "param_3": "flag",
                "__s": "string1",
                "sVar2": "inputLength",
                "sVar3": "string1Length",
                "__s_00": "result",
                "uVar1": "returnValue"
            },
            "code": "\nundefined4 processData_0010eafe(long context,char *input,char flag)\n\n{\n  undefined4 returnValue;\n  char *string1;\n  size_t inputLength;\n  size_t string1Length;\n  char *result;\n  \n  if ((*(int *)(context + 0x1f8) == 0) && (*(long *)(context + 0x1e8) == -1)) {\n    string1 = (char *)FUN_00109b2f();\n    inputLength = strlen(input);\n    string1Length = strlen(string1);\n    result = (char *)xmalloc(inputLength + 3 + string1Length);\n    sprintf(result,\"%s:%c%s\",input,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),string1);\n    *(undefined8 *)(context + 0x1e8) = *(undefined8 *)(context + 0x10);\n    returnValue = FUN_0010e2f0(context,0x24,0,0,result);\n    if ((char)returnValue != '\\0') {\n      free(result);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_data_00113df2",
                "param_1": "inputData"
            },
            "code": "\nvoid initializeData_00113df2(undefined4 inputData)\n\n{\n  FUN_00112904(4,inputData);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "reverse_and_format_string_0010a377",
                "param_1": "input",
                "cVar1": "char1",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "formatted_string",
                "uVar2": "result",
                "uVar5": "use_char1"
            },
            "code": "\nundefined4 reverse_and_format_string_0010a377(long input)\n\n{\n  char char1;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *formatted_string;\n  undefined use_char1;\n  \n  use_char1 = 1;\n  char1 = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  if (char1 == '\\0') {\n    use_char1 = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\n  }\n  string2 = (char *)FUN_00109b2f(input);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  formatted_string = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(formatted_string,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = FUN_00109b52(input,formatted_string,0,use_char1,0);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reverse_and_format_string_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "parse_input_data_0010d882",
                "param_1": "input_data",
                "param_2": "input_string",
                "param_3": "output_data",
                "param_4": "flag",
                "iVar1": "iteration",
                "pcVar2": "current_char",
                "cVar3": "current_char",
                "lVar4": "allocated_memory",
                "pcVar5": "current_string",
                "uVar6": "index",
                "bVar7": "loop_condition",
                "local_50": "index",
                "local_4c": "temp_var",
                "local_48": "size",
                "local_44": "loop_counter"
            },
            "code": "\nundefined8 parse_input_data_0010d882(long input_data,char **input_string,long *output_data,undefined *flag)\n\n{\n  int iteration;\n  char *current_char;\n  char current_char;\n  long allocated_memory;\n  char *current_string;\n  ulong index;\n  bool loop_condition;\n  uint index;\n  undefined4 temp_var;\n  uint size;\n  int loop_counter;\n  undefined8 local_40 [2];\n  \n  current_char = *input_string;\n  temp_var = 10;\n  if (output_data != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_data = allocated_memory;\n    *flag = 0;\n  }\n  index = 0;\n  while( true ) {\n    current_string = *input_string;\n    current_char = *current_string;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *input_string = current_string + 1;\n      if (current_char == 'T') {\n        loop_counter = 1;\n      }\n      else {\n        current_char = FUN_00108ea1(input_string,&loop_counter);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = FUN_00108ea1(input_string,&size);\n      if ((current_char == '\\0') || (*(uint *)(input_data + 0x28) <= size)) {\nLAB_0010d958:\n        FUN_0010911f(current_char);\n        return 0;\n      }\n      index = (ulong)size;\n      while (iteration = loop_counter + -1, loop_condition = loop_counter != 0, loop_counter = iteration, loop_condition) {\n        local_40[0] = *(undefined8 *)(*(long *)(input_data + 0x20) + index * 0x10);\n        current_char = FUN_0010d7d4(input_data,local_40,output_data,&index,&temp_var);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = FUN_0010d7d4(input_data,input_string,output_data,&index,&temp_var);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_data == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_data + (ulong)index * 8) = 0;\n    if (*current_string != 'e') goto LAB_0010d9fa;\n    *flag = 1;\n  }\n  current_string = current_string + 1;\n  *input_string = current_string;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_string >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010911f",
                "FUN_0010d7d4",
                "FUN_00108ea1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_input_data_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00109a32",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_data_structure_00112925",
                "param_1": "dataStructure",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "allocatedMemory",
                "pauVar2": "array",
                "lVar3": "loopCounter",
                "puVar4": "pointer",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeDataStructure_00112925(undefined (**dataStructure) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *allocatedMemory;\n  undefined (*array) [16];\n  long loopCounter;\n  undefined4 *pointer;\n  byte byteValue;\n  \n  byteValue = 0;\n  allocatedMemory = (undefined4 *)xmalloc(0x28);\n  pointer = allocatedMemory;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *pointer = 0;\n    pointer = pointer + (ulong)byteValue * -2 + 1;\n  }\n  array = *dataStructure;\n  *(undefined8 *)(allocatedMemory + 2) = value;\n  allocatedMemory[5] = param3;\n  allocatedMemory[6] = param4;\n  if (array == (undefined (*) [16])0x0) {\n    array = (undefined (*) [16])xmalloc(0x10);\n    *array = ZEXT816(0);\n    *dataStructure = array;\n    *(undefined (**) [16])(*array + 8) = array;\n  }\n  **(undefined8 **)(*array + 8) = allocatedMemory;\n  *(undefined4 **)(*array + 8) = allocatedMemory;\n  return allocatedMemory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_00112996",
                "FUN_0010bc80",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010c6be"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_debug_record_line_0010bf86",
                "param_1": "record_ptr",
                "param_2": "line_num",
                "param_3": "unit_ptr",
                "uVar1": "error_message",
                "puVar2": "current_unit",
                "uVar3": "i",
                "puVar4": "new_record",
                "lVar5": "index",
                "puVar6": "ptr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 update_debug_record_line_0010bf86(long record_ptr,undefined8 line_num,undefined8 unit_ptr)\n\n{\n  undefined8 error_message;\n  undefined8 *current_unit;\n  ulong i;\n  undefined4 *new_record;\n  long index;\n  undefined4 *ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record_ptr + 8) == 0) {\n    error_message = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n    error_message = 0;\n  }\n  else {\n    index = *(long *)(record_ptr + 0x28);\n    if ((index != 0) && (*(long *)(index + 8) == *(long *)(record_ptr + 0x10))) {\n      i = 0;\n      do {\n        if (*(long *)(index + 0x10 + i * 8) == -1) {\n          current_unit = (undefined8 *)(i & 0xffffffff);\n          *(undefined8 *)(index + 0x10 + (long)current_unit * 8) = line_num;\n          *(undefined8 *)(index + 0x60 + (long)current_unit * 8) = unit_ptr;\n          goto LAB_0010c056;\n        }\n        i = i + 1;\n      } while (i != 10);\n    }\n    new_record = (undefined4 *)xmalloc(0xb0);\n    ptr = new_record;\n    for (index = 0x2c; index != 0; index = index + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    error_message = *(undefined8 *)(record_ptr + 0x10);\n    *(undefined8 *)(new_record + 4) = line_num;\n    *(undefined8 *)(new_record + 2) = error_message;\n    *(undefined8 *)(new_record + 0x18) = unit_ptr;\n    ptr = new_record + 6;\n    for (index = 0x48; index != 0; index = index + -1) {\n      *(undefined *)ptr = 0xff;\n      ptr = (undefined4 *)((long)ptr + (ulong)flag * -2 + 1);\n    }\n    current_unit = *(undefined8 **)(record_ptr + 0x28);\n    if (current_unit == (undefined8 *)0x0) {\n      current_unit = *(undefined8 **)(record_ptr + 8);\n      current_unit[2] = new_record;\n    }\n    else {\n      *current_unit = new_record;\n    }\n    *(undefined4 **)(record_ptr + 0x28) = new_record;\nLAB_0010c056:\n    error_message = CONCAT71((int7)((ulong)current_unit >> 8),1);\n  }\n  return error_message;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "update_debug_record_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_00116852",
                "FUN_0010554f",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "perform_pattern_matching_0011a170",
                "param_1": "patternList",
                "param_2": "targetList",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint performPatternMatching_0011a170(char **patternList,char **targetList)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *patternList;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*targetList,0);\n    if (matchResult == 0) {\n      *(undefined *)(targetList + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*targetList,0);\n    if (matchResult == 0) {\n      *(undefined *)(targetList + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "perform_pattern_matching_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "functionPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "lastElement",
                "uVar2": "errorMessage",
                "puVar3": "record",
                "puVar4": "nextElement",
                "puVar6": "currentElement",
                "puVar7": "tempRecord",
                "bVar8": "flag",
                "lVar5": "loopCounter"
            },
            "code": "\n\n\nundefined8\nrecordParameter_0010bd62(long functionPointer,long param2,long param3,undefined4 param4,undefined8 param5)\n\n{\n  undefined8 *lastElement;\n  undefined8 errorMessage;\n  undefined4 *record;\n  undefined8 *nextElement;\n  long loopCounter;\n  undefined8 *currentElement;\n  undefined4 *tempRecord;\n  byte flag;\n  \n  flag = 0;\n  if (param2 == 0) {\n    return 0;\n  }\n  if (param3 != 0) {\n    if ((*(long *)(functionPointer + 8) != 0) && (*(long *)(functionPointer + 0x18) != 0)) {\n      record = (undefined4 *)xmalloc(0x28);\n      tempRecord = record;\n      for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *tempRecord = 0;\n        tempRecord = tempRecord + (ulong)flag * -2 + 1;\n      }\n      loopCounter = *(long *)(functionPointer + 0x18);\n      *(long *)(record + 2) = param2;\n      *(long *)(record + 4) = param3;\n      record[6] = param4;\n      lastElement = *(undefined8 **)(loopCounter + 8);\n      *(undefined8 *)(record + 8) = param5;\n      currentElement = (undefined8 *)(loopCounter + 8);\n      while (nextElement = lastElement, nextElement != (undefined8 *)0x0) {\n        currentElement = nextElement;\n        lastElement = (undefined8 *)*nextElement;\n      }\n      *currentElement = record;\n      return 1;\n    }\n    errorMessage = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_archive_files_00104ea2",
                "unaff_R12": "archivePath",
                "param_11": "mode",
                "ppcVar6": "outputFile",
                "unaff_R15": "inputFile",
                "ppcVar3": "tempFile",
                "unaff_RBP": "fileStats",
                "lVar12": "fileSize",
                "unaff_EBX": "statError",
                "pcVar10": "errorMessage",
                "uVar11": "translation",
                "piVar9": "errorNumber",
                "lVar14": "readSize",
                "pvVar4": "buffer"
            },
            "code": "\nvoid extractAndCopyArchiveFiles_00104ea2(void)\n\n{\n  char cVar1;\n  int iVar2;\n  char **tempFile;\n  void *buffer;\n  long lVar5;\n  char **outputFile;\n  char *pcVar7;\n  undefined8 *puVar8;\n  int *errorNumber;\n  char *errorMessage;\n  undefined8 translation;\n  long fileSize;\n  code *pcVar13;\n  long readSize;\n  int statError;\n  stat *fileStats;\n  char *pcVar15;\n  stat *psVar16;\n  char *archivePath;\n  undefined8 *unaff_R13;\n  char **inputFile;\n  byte bVar17;\n  undefined8 unaff_retaddr;\n  undefined8 *param_7;\n  long *param_8;\n  char *param_9;\n  undefined8 *param_10;\n  undefined8 mode;\n  undefined8 in_stack_00000030;\n  uint param_18;\n  long param_19;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  outputFile = (char **)bfd_openw(archivePath,mode);\n  if (outputFile == (char **)0x0) {\nLAB_00104e80:\n    FUN_001126c0(archivePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    cVar1 = FUNC_00114e50(inputFile,outputFile,unaff_retaddr);\n    if (cVar1 == '\\0') {\n      iVar2 = bfd_get_arch(inputFile);\n      if (iVar2 == 0) goto LAB_00104d75;\n      cVar1 = bfd_close_all_done(outputFile);\n      if (cVar1 != '\\0') goto LAB_00104ec9;\n      FUN_001126c0(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    cVar1 = bfd_close(outputFile);\n    outputFile = inputFile;\n    if (cVar1 == '\\0') {\n      FUN_001126c0(archivePath,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (statError == 0)) {\n      FUN_0011a350(archivePath,fileStats);\n    }\n    fileSize = bfd_openr(archivePath,mode);\n    unaff_R13[2] = fileSize;\n    *param_8 = fileSize;\n    param_8 = (long *)(fileSize + 0xf0);\n    inputFile = (char **)bfd_openr_next_archived_file(param_10,outputFile);\n    bfd_close(outputFile);\n    while ((DAT_00127a20 == 0 && (inputFile != (char **)0x0))) {\n      errorMessage = *inputFile;\n      pcVar7 = errorMessage;\n      if (*errorMessage == '/') {\nLAB_0010527d:\n        translation = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(translation,errorMessage);\n        goto LAB_00104e93;\n      }\n      while (*pcVar7 != '\\0') {\n        pcVar15 = pcVar7;\n        if ((*pcVar7 == '.') && (pcVar15 = pcVar7 + 1, pcVar7[1] == '.')) {\n          pcVar15 = pcVar7 + 2;\n          if ((pcVar7[2] == '\\0') || (pcVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pcVar15 != '\\0' && (*pcVar15 != '/')); pcVar15 = pcVar15 + 1) {\n        }\n        pcVar7 = pcVar15;\n        if (*pcVar15 == '/') {\n          FUN_001052a2();\n          return;\n        }\n      }\n      fileStats = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(param_9,&DAT_0011b47d);\n      iVar2 = stat(archivePath,fileStats);\n      puVar8 = unaff_R13;\n      if (-1 < iVar2) {\n        fileSize = FUN_0011a0e0(archivePath);\n        free(archivePath);\n        if (fileSize == 0) {\n          errorNumber = __errno_location();\n          errorMessage = strerror(*errorNumber);\n          translation = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(translation,errorMessage);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        errorMessage = *inputFile;\n        *puVar8 = unaff_R13;\n        puVar8[2] = 0;\n        puVar8[1] = fileSize;\n        archivePath = (char *)concat(fileSize,&DAT_0011b47d,errorMessage);\n      }\n      statError = 0;\n      if (DAT_001279cb != '\\0') {\n        psVar16 = fileStats;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)bVar17 * -8 + 4);\n        }\n        outputFile = (char **)inputFile[0x1d];\n        if ((char **)inputFile[0x1d] == (char **)0x0) {\n          outputFile = inputFile;\n        }\n        statError = (**(code **)(outputFile[1] + 0x1e8))(inputFile,fileStats);\n        if (statError != 0) {\n          errorMessage = *inputFile;\n          translation = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(translation,errorMessage);\n        }\n      }\n      unaff_R13 = (undefined8 *)xmalloc(0x18);\n      unaff_R13[1] = archivePath;\n      *unaff_R13 = puVar8;\n      unaff_R13[2] = 0;\n      cVar1 = bfd_check_format(inputFile,1);\n      if (cVar1 != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        outputFile = (char **)bfd_openw(archivePath,*(undefined8 *)inputFile[1]);\n        if (outputFile == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      translation = dcgettext(0,\"Unable to recognise the format of file\",5);\n      FUN_001126c0(0,inputFile,0,translation);\n      outputFile = (char **)bfd_openw(archivePath,mode);\n      if (outputFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      tempFile = (char **)inputFile[0x1d];\n      if ((char **)inputFile[0x1d] == (char **)0x0) {\n        tempFile = inputFile;\n      }\n      iVar2 = (**(code **)(tempFile[1] + 0x1e8))(inputFile);\n      fileSize = param_19;\n      if (iVar2 == 0) {\n        if (param_19 < 0) {\n          FUN_001125fa(inputFile);\n          translation = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          FUN_00119ed0(translation);\n        }\n        else {\n          iVar2 = bfd_seek(inputFile,0,0);\n          if (iVar2 == 0) {\n            if (DAT_001279c9 != '\\0') {\n              errorMessage = *outputFile;\n              translation = FUN_001125fa(inputFile);\n              pcVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pcVar7,translation,errorMessage);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (fileSize == 0) {\n                chmod(*outputFile,param_18 | 0x100);\n                free(buffer);\n                cVar1 = bfd_close_all_done(outputFile);\n                outputFile = inputFile;\n                if (cVar1 == '\\0') {\n                  FUN_001126c0(archivePath,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              readSize = 0x2000;\n              if (fileSize < 0x2001) {\n                readSize = fileSize;\n              }\n              lVar5 = bfd_bread(buffer,readSize,inputFile);\n              tempFile = inputFile;\n              if ((readSize != lVar5) ||\n                 (lVar5 = bfd_bwrite(buffer,readSize,outputFile), tempFile = outputFile, readSize != lVar5))\n              break;\n              fileSize = fileSize - readSize;\n            }\n            FUN_001126c0(0,tempFile,0,0);\n            free(buffer);\n          }\n          else {\n            translation = FUN_001125fa(inputFile);\n            FUN_0011a110(translation);\n          }\n        }\n      }\n      else {\n        FUN_001126c0(0,inputFile,0,0);\n      }\n      cVar1 = bfd_close_all_done(outputFile);\n      if (cVar1 == '\\0') {\n        FUN_001126c0(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      DAT_00127a20 = 1;\n    }\n    *param_8 = 0;\n    buffer = (void *)xstrdup(*param_7);\n    if (DAT_00127a20 == 0) {\n      pcVar13 = bfd_close;\n    }\n    else {\n      pcVar13 = bfd_close_all_done;\n    }\n    cVar1 = (*pcVar13)(param_7);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*param_10);\n    cVar1 = bfd_close(param_10);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (unaff_R13 != (undefined8 *)0x0) {\n    if (unaff_R13[2] == 0) {\n      rmdir((char *)unaff_R13[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)unaff_R13[1]);\n    }\n    free((void *)unaff_R13[1]);\n    puVar8 = (undefined8 *)*unaff_R13;\n    free(unaff_R13);\n    unaff_R13 = puVar8;\n  }\n  rmdir(param_9);\n  free(param_9);\n  return;\n}\n\n",
            "called": [
                "bfd_bread",
                "dcgettext",
                "bfd_seek",
                "bfd_bwrite",
                "FUN_001126c0",
                "FUN_0011a350",
                "xmalloc",
                "bfd_openr_next_archived_file",
                "FUN_00119ed0",
                "bfd_close",
                "FUN_00114e50",
                "rmdir",
                "bfd_check_format",
                "free",
                "printf",
                "bfd_close",
                "bfd_close_all_done",
                "FUN_00114b84",
                "bfd_close_all_done",
                "FUN_00104ea2",
                "concat",
                "chmod",
                "FUN_001052a2",
                "bfd_get_arch",
                "bfd_openr",
                "unlink",
                "bfd_openw",
                "xstrdup",
                "__errno_location",
                "FUN_0011a110",
                "strerror",
                "stat",
                "FUN_001125fa",
                "FUN_0011a0e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_files_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0011a110",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010e2f0",
                "FUN_001126c0",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00107880",
                "FUN_001126c0",
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_and_assign_pointers_00113ce0",
                "param_1": "input_ptr",
                "param_5": "output_ptr",
                "lVar1": "allocation_result",
                "plVar2": "allocated_ptr",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nallocate_and_assign_pointers_00113ce0(long input_ptr,long param_2,undefined param_3,undefined8 param_4,undefined8 output_ptr)\n\n{\n  long allocation_result;\n  long *allocated_ptr;\n  undefined return_value [16];\n  \n  if (input_ptr != 0) {\n    allocation_result = FUN_00112904(0xd,0);\n    if (allocation_result != 0) {\n      allocated_ptr = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_ptr + 0x11) = 0;\n      *allocated_ptr = input_ptr;\n      *(undefined4 *)((long)allocated_ptr + 0x14) = 0;\n      allocated_ptr[1] = param_2;\n      *(undefined *)(allocated_ptr + 2) = param_3;\n      *(long **)(allocation_result + 0x10) = allocated_ptr;\n      goto LAB_00113d2f;\n    }\n  }\n  allocation_result = 0;\nLAB_00113d2f:\n  return_value._8_8_ = output_ptr;\n  return_value._0_8_ = allocation_result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "allocate_and_assign_pointers_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_data_00114dc7",
                "unaff_RBX": "filePointer",
                "unaff_RBP": "bufferPointer",
                "unaff_R12": "startOffset",
                "unaff_R14": "endOffset"
            },
            "code": "\nvoid readAndResizeData_00114dc7(void)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  size_t sVar4;\n  FILE *filePointer;\n  long bufferPointer;\n  long startOffset;\n  long endOffset;\n  \n  while( true ) {\n    sVar4 = fread((void *)(*(long *)(bufferPointer + 0x20) + startOffset),1,endOffset - startOffset,\n                  filePointer);\n    iVar1 = ferror(filePointer);\n    if (iVar1 != 0) {\n      uVar3 = *(undefined8 *)(bufferPointer + 0x10);\n      uVar2 = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(uVar2,uVar3);\n    }\n    startOffset = startOffset + sVar4;\n    iVar1 = feof(filePointer);\n    if (iVar1 != 0) break;\n    if (startOffset == endOffset) {\n      endOffset = startOffset * 2;\n      uVar3 = xrealloc(*(undefined8 *)(bufferPointer + 0x20),endOffset);\n      *(undefined8 *)(bufferPointer + 0x20) = uVar3;\n    }\n  }\n  *(long *)(bufferPointer + 0x18) = startOffset;\n  fclose(filePointer);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fread",
                "FUN_00119dd0",
                "ferror",
                "FUN_00114dc7",
                "xrealloc",
                "feof",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_data_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_binary_00119f70",
                "param_1": "headerData",
                "param_2": "binaryData",
                "uVar1": "formatValue",
                "cVar2": "flag",
                "iVar3": "counter",
                "uVar4": "headerFormat",
                "uVar5": "dataFormat",
                "__format": "formatString",
                "lVar6": "bufferSize",
                "uVar7": "headerValue",
                "lVar8": "allocatedSize"
            },
            "code": "\nundefined4 processBinary_00119f70(undefined8 *headerData,undefined8 *binaryData)\n\n{\n  undefined4 formatValue;\n  char flag;\n  int counter;\n  undefined8 headerFormat;\n  undefined8 dataFormat;\n  char *formatString;\n  long bufferSize;\n  undefined8 headerValue;\n  long allocatedSize;\n  \n  counter = *(int *)((long)binaryData + 0xc) + 1;\n  *(int *)((long)binaryData + 0xc) = counter;\n  if ((ulong)binaryData[2] < (ulong)((long)counter * 0x60)) {\n    bufferSize = 0x3000;\n    if (0x3f < counter) {\n      bufferSize = (long)counter * 0xc0;\n    }\n    allocatedSize = xrealloc(binaryData[3]);\n    binaryData[3] = allocatedSize;\n    memset((void *)(allocatedSize + binaryData[2]),0,bufferSize - binaryData[2]);\n    binaryData[2] = bufferSize;\n  }\n  formatValue = *(undefined4 *)((long)headerData + 0xc);\n  *(undefined8 *)((long)*(int *)((long)binaryData + 0xc) * 0x60 + binaryData[3] + -0x60) = *headerData;\n  headerFormat = FUN_00114e00(formatValue);\n  dataFormat = FUN_00114e00(*(undefined4 *)(headerData + 2));\n  headerValue = *headerData;\n  formatString = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatString,headerValue,dataFormat,headerFormat);\n  bufferSize = bfd_openw(*binaryData,*headerData);\n  if (bufferSize == 0) {\n    FUN_0011a110(*binaryData);\n    *(undefined4 *)(binaryData + 1) = 1;\n  }\n  else {\n    counter = 2;\n    flag = bfd_set_format(bufferSize,1);\n    if (flag == '\\0') {\n      counter = bfd_get_error();\n      if (counter != 5) {\n        FUN_0011a110(*headerData);\n        *(undefined4 *)(binaryData + 1) = 1;\n      }\n    }\n    else {\n      do {\n        flag = (**(code **)(*(long *)(bufferSize + 8) + 0x2a0))(bufferSize,counter,0);\n        if (flag != '\\0') {\n          headerValue = bfd_printable_arch_mach(counter,0);\n          printf(\"  %s\\n\",headerValue);\n          *(undefined *)\n           ((long)*(int *)((long)binaryData + 0xc) * 0x60 + binaryData[3] + -0x58 + (ulong)(counter - 2)) =\n               1;\n        }\n        counter = counter + 1;\n      } while (counter != 0x57);\n    }\n    bfd_close_all_done(bufferSize);\n  }\n  return *(undefined4 *)(binaryData + 1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a110",
                "bfd_printable_arch_mach",
                "FUN_00114e00",
                "bfd_set_format",
                "printf",
                "xrealloc",
                "FUN_001053d5",
                "memset",
                "bfd_close_all_done",
                "bfd_openw",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_binary_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "param_3": "fileStats",
                "iVar1": "errnoValue",
                "__fd": "destinationFileDescriptor",
                "iVar2": "bytesRead",
                "_Var3": "seekResult",
                "uVar4": "returnValue",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPointer",
                "local_2038": "buffer"
            },
            "code": "\nulong copyFile_00115a90(int sourceFileDescriptor,char *destinationFilePath,long fileStats)\n\n{\n  int errnoValue;\n  int destinationFileDescriptor;\n  int bytesRead;\n  __off_t seekResult;\n  ulong returnValue;\n  size_t bytesWritten;\n  int *errnoPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (seekResult = lseek(sourceFileDescriptor,0,0), seekResult == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      returnValue = FUN_00108237();\n      return returnValue;\n    }\n    do {\n      returnValue = read(sourceFileDescriptor,buffer,0x2000);\n      bytesRead = (int)returnValue;\n      if (bytesRead < 1) {\n        errnoPointer = __errno_location();\n        errnoValue = *errnoPointer;\n        fchmod(destinationFileDescriptor,*(__mode_t *)(fileStats + 0x18));\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (bytesRead != 0) {\n          *errnoPointer = errnoValue;\n          return 0xffffffff;\n        }\n        return returnValue & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)bytesRead);\n    } while (bytesWritten == (long)bytesRead);\n    errnoPointer = __errno_location();\n    bytesRead = *errnoPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPointer = bytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "FUN_00108237",
                "close",
                "fchmod",
                "write",
                "read",
                "open",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_and_unlink_file_00108200",
                "unaff_RBP": "sourceFilePath",
                "unaff_R12B": "performUnlink",
                "unaff_R13": "fileStatus",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoPtr",
                "auVar3": "returnValue",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined  [16] copyAndUnlinkFile_00108200(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *sourceFilePath;\n  char performUnlink;\n  ulong fileStatus;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00119ed0(errorMessage);\n  unlink(sourceFilePath);\n  if (performUnlink != '\\0') {\n    FUN_0011a350();\n  }\n  returnValue._0_8_ = fileStatus & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_0011a350",
                "FUN_00119ed0",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 274055,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "thunk_FUN_0010e439",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010847a",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00104cc1",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_0010922b",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_001163d0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00108179",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_001086af",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_0010829e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00108072",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_00112c1f",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_00115530",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_00114690",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_00114460",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_00112b6e",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_00113a4d",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_0010b0fa",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_0010dac0",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_00116110",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0010c95e",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00116490",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00115b70",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00104ea2",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ]
    ],
    "locked_functions": []
}