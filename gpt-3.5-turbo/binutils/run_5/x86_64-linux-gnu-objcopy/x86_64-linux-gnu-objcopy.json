{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_data_structure_00113dfe",
                "param_1": "dataStructureIndex",
                "param_2": "newValue",
                "lVar1": "dsPointer"
            },
            "code": "\nvoid updateDataStructure_00113dfe(undefined4 dataStructureIndex,undefined newValue)\n\n{\n  long dsPointer;\n  \n  dsPointer = initialize_data_structure_00112904(3,dataStructureIndex);\n  if (dsPointer != 0) {\n    *(undefined *)(dsPointer + 0x10) = newValue;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "update_data_structure_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_string_with_prefix_0010ab4d",
                "param_1": "dataAddress",
                "param_2": "prefixString",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "dataValue",
                "lVar2": "dataPointer",
                "auVar3": "result",
                "sVar4": "prefixLength",
                "pcVar5": "existingString",
                "sVar6": "existingStringLength",
                "auVar7": "updatedResult"
            },
            "code": "\nundefined  [16] updateStringWithPrefix_0010ab4d(long dataAddress,char *prefixString,undefined8 param3,undefined8 param4)\n\n{\n  ulong dataValue;\n  long dataPointer;\n  undefined result [16];\n  size_t prefixLength;\n  char *existingString;\n  size_t existingStringLength;\n  undefined updatedResult [16];\n  \n  dataValue = *(ulong *)(dataAddress + 0x60);\n  if ((dataValue != 0) && (*(long *)(dataValue + 0x20) != 0)) {\n    existingString = *(char **)(dataValue + 0x30);\n    prefixLength = strlen(prefixString);\n    if (existingString == (char *)0x0) {\n      existingString = (char *)xmalloc(prefixLength + 3);\n      *existingString = '\\0';\n    }\n    else {\n      existingStringLength = strlen(existingString);\n      existingString = (char *)xrealloc(existingString,prefixLength + 4 + existingStringLength);\n    }\n    prefixLength = strlen(existingString);\n    sprintf(existingString + prefixLength,\"%s::\",prefixString);\n    dataPointer = *(long *)(dataAddress + 0x60);\n    *(char **)(dataPointer + 0x30) = existingString;\n    updatedResult._1_7_ = (undefined7)((ulong)dataPointer >> 8);\n    updatedResult[0] = 1;\n    updatedResult._8_8_ = param4;\n    return updatedResult;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = dataValue;\n  return result << 0x40;\n}\n\n",
            "called": [
                "xrealloc",
                "strlen",
                "xmalloc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_string_with_prefix_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "initialize_debug_info_0010c218",
                "param_1": "file_info",
                "param_2": "data_size",
                "param_3": "current_address",
                "uVar1": "error_message",
                "lVar2": "data_structure",
                "pauVar3": "pointer_array",
                "lVar4": "memory_address"
            },
            "code": "\n\n\nlong initialize_debug_info_0010c218(long file_info,long data_size,long current_address)\n\n{\n  undefined8 error_message;\n  long data_structure;\n  undefined (*pointer_array) [16];\n  long memory_address;\n  \n  if ((data_size != 0) && (current_address != 0)) {\n    if ((*(long *)(file_info + 8) == 0) || (*(long *)(file_info + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      data_structure = initialize_data_structure_00112904(0x16,0);\n      if (data_structure != 0) {\n        pointer_array = (undefined (*) [16])xmalloc(0x10);\n        memory_address = *(long *)(file_info + 0x10);\n        *pointer_array = ZEXT816(0);\n        *(long *)(*pointer_array + 8) = current_address;\n        *(undefined (**) [16])(data_structure + 0x10) = pointer_array;\n        memory_address = initialize_memory_00112925(memory_address + 0x10,data_size,0,3);\n        if (memory_address != 0) {\n          *(long *)(memory_address + 0x20) = data_structure;\n          *(long *)*pointer_array = memory_address;\n          return data_structure;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "dcgettext",
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c2d2",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_and_exit_error_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_and_exit_error_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = initialize_hashtable_00113f20();\n  DAT_001279f0 = initialize_hashtable_00113f20();\n  DAT_00127a08 = initialize_hashtable_00113f20();\n  DAT_001279e8 = initialize_hashtable_00113f20();\n  DAT_001279e0 = initialize_hashtable_00113f20();\n  DAT_001279d8 = initialize_hashtable_00113f20();\n  DAT_001279d0 = initialize_hashtable_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,hash_string_00108800,compare_strings_00108898);\n  DAT_001278c8 = initialize_hashtable_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = execute_function_chain_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hash_table_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        set_permissions_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        update_permissions_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        update_permissions_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version_info_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    print_improved_bfd_header_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version_info_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = string_comparison_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = parse_driver_name_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = string_comparison_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = parse_driver_name_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)create_file_path_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  process_binary_file_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_delete_file_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = get_file_info_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)create_file_path_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_error_message_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    process_binary_file_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_delete_file_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_redefinitions_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_and_exit_error_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_redefinitions_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_and_exit_error_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_usage_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_and_exit_error_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_usage_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    set_permissions_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    update_permissions_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = extract_key_value_pair_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    read_and_store_file_contents_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_and_exit_error_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_string_with_length_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_string_with_length_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_and_exit_error_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_string_with_length_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = check_and_print_error_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_and_exit_error_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = update_permissions_00114190(pcVar32,1,uVar12);\n    lVar17 = check_and_print_error_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = check_and_print_error_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = extract_key_value_pair_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = check_and_print_error_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)check_and_print_error_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    read_and_process_file_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = check_and_print_error_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    read_and_process_file_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    update_permissions_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    read_and_process_file_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    read_and_process_file_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = check_and_print_error_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_and_exit_error_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_redefinitions_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_and_exit_error_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    update_permissions_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = check_and_print_error_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_and_exit_error_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)update_permissions_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = update_permissions_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = check_and_print_error_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = check_and_print_error_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    read_and_process_file_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    read_and_process_file_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_and_exit_error_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = extract_key_value_pair_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    read_and_store_file_contents_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = check_and_print_error_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    read_and_process_file_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_and_exit_error_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "setlocale",
                "strncpy",
                "FUN_001054af",
                "FUN_00119940",
                "strcasecmp",
                "htab_create_alloc",
                "fopen",
                "FUN_00114cf0",
                "FUN_00114d60",
                "__errno_location",
                "FUN_00108800",
                "strchr",
                "FUN_00114c20",
                "FUN_00108d9a",
                "strerror",
                "textdomain",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_0011a480",
                "FUN_00114c80",
                "xexit",
                "strcmp",
                "FUN_00113fb0",
                "FUN_00114460",
                "strlen",
                "fprintf",
                "FUN_00108c86",
                "htab_elements",
                "FUN_00108a2a",
                "FUN_00113fe0",
                "xstrdup",
                "unlink_if_ordinary",
                "memcpy",
                "FUN_00114690",
                "strtoul",
                "xcalloc",
                "FUN_00119970",
                "stat",
                "bfd_set_error_program_name",
                "getc",
                "FUN_00113f50",
                "close",
                "free",
                "xmalloc",
                "bfd_set_default_target",
                "malloc",
                "htab_find_slot",
                "FUN_00108916",
                "strncasecmp",
                "memmove",
                "fclose",
                "ftell",
                "xrealloc",
                "FUN_00113f20",
                "getopt_long",
                "FUN_00119ed0",
                "FUN_001199d0",
                "strcpy",
                "FUN_00119dd0",
                "ferror",
                "bfd_errmsg",
                "dcgettext",
                "FUN_00115970",
                "mkstemp",
                "xmalloc_set_program_name",
                "bfd_init",
                "strtol",
                "dup",
                "bfd_scan_arch",
                "bindtextdomain",
                "free",
                "FUN_00108898",
                "FUN_0011a390",
                "filename_cmp",
                "bfd_get_error",
                "fread",
                "fseek"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_debug_block_0010be88",
                "param_1": "blockInfo",
                "param_2": "blockStart",
                "puVar1": "currPtr",
                "uVar2": "result",
                "puVar3": "newBlockInfo",
                "puVar4": "tempPtr",
                "puVar6": "lastPtr",
                "puVar7": "tempPtr2",
                "bVar8": "zero",
                "lVar5": "offset",
                "auVar9": "output"
            },
            "code": "\n\n\nundefined  [16] startDebugBlock_0010be88(long blockInfo,undefined8 blockStart,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *currPtr;\n  undefined8 result;\n  undefined4 *newBlockInfo;\n  undefined8 *tempPtr;\n  long offset;\n  undefined8 *lastPtr;\n  undefined4 *tempPtr2;\n  byte zero;\n  undefined output [16];\n  \n  zero = 0;\n  if ((*(long *)(blockInfo + 8) == 0) || (*(long *)(blockInfo + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    newBlockInfo = (undefined4 *)xmalloc(0x30);\n    tempPtr2 = newBlockInfo;\n    for (offset = 0xc; offset != 0; offset = offset + -1) {\n      *tempPtr2 = 0;\n      tempPtr2 = tempPtr2 + (ulong)zero * -2 + 1;\n    }\n    offset = *(long *)(blockInfo + 0x20);\n    *(undefined8 *)(newBlockInfo + 6) = blockStart;\n    *(undefined8 *)(newBlockInfo + 8) = 0xffffffffffffffff;\n    *(long *)(newBlockInfo + 2) = offset;\n    currPtr = *(undefined8 **)(offset + 0x10);\n    lastPtr = (undefined8 *)(offset + 0x10);\n    while (tempPtr = currPtr, tempPtr != (undefined8 *)0x0) {\n      lastPtr = tempPtr;\n      currPtr = (undefined8 *)*tempPtr;\n    }\n    *lastPtr = newBlockInfo;\n    result = 1;\n    *(undefined4 **)(blockInfo + 0x20) = newBlockInfo;\n  }\n  output._8_8_ = param_4;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_debug_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_00115dc0",
                "FUN_0011378f",
                "FUN_001083b7",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_0010dac0",
                "FUN_0011a110",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_001126c0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_field_string_0010ba08",
                "param_1": "output",
                "param_2": "fieldName",
                "param_3": "param3Value",
                "param_4": "fieldSize",
                "param_5": "flag",
                "cVar1": "flagChar",
                "iVar2": "structSize",
                "lVar3": "temp",
                "__s": "extractedString",
                "sVar4": "fieldStrLen",
                "sVar5": "fieldNameLen",
                "sVar6": "extractedStrLen",
                "__s_00": "fieldInfoStr",
                "uVar7": "warningStr",
                "uVar8": "returnValue",
                "pcVar9": "flagSuffix",
                "print_error_message_00119ed0": "printErrorMessage",
                "dcgettext": "getText"
            },
            "code": "\nundefined8\ngenerateFieldString_0010ba08(undefined8 *output,char *fieldName,undefined8 param3Value,ulong fieldSize,int flag)\n\n{\n  char flagChar;\n  int structSize;\n  long temp;\n  char *extractedString;\n  size_t fieldStrLen;\n  size_t fieldNameLen;\n  size_t extractedStrLen;\n  char *fieldInfoStr;\n  undefined8 warningStr;\n  undefined8 returnValue;\n  char *flagSuffix;\n  \n  flagChar = *(char *)(output[0xc] + 0x1c);\n  structSize = *(int *)(output[0xc] + 0x18);\n  extractedString = (char *)extract_and_free_next_item_00109b2f();\n  if (*(char **)(output[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    fieldStrLen = strlen(*(char **)(output[0xc] + 0x20));\n    fieldNameLen = strlen(fieldName);\n    extractedStrLen = strlen(extractedString);\n    fieldInfoStr = (char *)xmalloc(fieldStrLen + 0x32 + fieldNameLen + extractedStrLen);\n    if (flag == 1) {\n      flagSuffix = \"/1\";\n    }\n    else {\n      flagSuffix = \"/0\";\n      if ((flag != 2) && (flagSuffix = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(structSize * 8), fieldSize == 0)) {\n      returnValue = *(undefined8 *)*output;\n      warningStr = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      printErrorMessage(warningStr,returnValue,fieldName);\n    }\n    sprintf(fieldInfoStr,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(output[0xc] + 0x20),fieldName,flagSuffix,extractedString,\n            param3Value,fieldSize);\n    free(*(void **)(output[0xc] + 0x20));\n    temp = output[0xc];\n    *(char **)(temp + 0x20) = fieldInfoStr;\n    if (flagChar != '\\0') {\n      *(undefined *)(temp + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)temp >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "dcgettext",
                "xmalloc",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_field_string_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "param_1": "dataPtr",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "option",
                "cVar1": "charValue",
                "__s": "extractedStr",
                "sVar5": "strLength",
                "pcVar6": "allocatedStr",
                "lVar2": "ptrStruct",
                "cVar3": "flag2",
                "uVar4": "counter",
                "lVar7": "reallocPtr",
                "uVar8": "result",
                "uVar9": "tempCounter",
                "uVar10": "tempCounter2"
            },
            "code": "\nundefined8 processData_0010aa53(long dataPtr,undefined8 value,char flag,int option)\n\n{\n  char charValue;\n  long ptrStruct;\n  char flag2;\n  uint counter;\n  char *extractedStr;\n  size_t strLength;\n  char *allocatedStr;\n  long reallocPtr;\n  undefined8 result;\n  ulong tempCounter;\n  ulong tempCounter2;\n  \n  charValue = *(char *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  extractedStr = (char *)extract_and_free_next_item_00109b2f();\n  strLength = strlen(extractedStr);\n  allocatedStr = (char *)xmalloc(strLength + 0x19);\n  *allocatedStr = flag + '0';\n  if (option == 1) {\n    flag2 = '1';\n  }\n  else {\n    flag2 = '0';\n    if ((option != 2) && (flag2 = '2', option != 0)) {\n                    \n      abort();\n    }\n  }\n  allocatedStr[1] = flag2;\n  sprintf(allocatedStr + 2,\"%ld,%s;\",value);\n  free(extractedStr);\n  ptrStruct = *(long *)(dataPtr + 0x60);\n  result = 0;\n  if ((ptrStruct != 0) && (*(long *)(ptrStruct + 0x20) != 0)) {\n    ptrStruct = *(long *)(ptrStruct + 0x28);\n    tempCounter2 = 0;\n    if (ptrStruct != 0) {\n      counter = 0;\n      do {\n        tempCounter = (ulong)counter;\n        tempCounter2 = (ulong)counter;\n        counter = counter + 1;\n      } while (*(long *)(ptrStruct + tempCounter * 8) != 0);\n    }\n    reallocPtr = xrealloc(ptrStruct,(ulong)((int)tempCounter2 + 2) << 3);\n    *(char **)(reallocPtr + tempCounter2 * 8) = allocatedStr;\n    *(undefined8 *)(reallocPtr + (ulong)((int)tempCounter2 + 1) * 8) = 0;\n    ptrStruct = *(long *)(dataPtr + 0x60);\n    *(long *)(ptrStruct + 0x28) = reallocPtr;\n    if (charValue != '\\0') {\n      *(undefined *)(ptrStruct + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xrealloc",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "FUNC_0011173a"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined FUNC_0011173a(undefined8 param_1,long *param_2,int param_3,int param_4,ulong param_5,\n                      char *param_6)\n\n{\n  char cVar1;\n  byte bVar2;\n  void *__ptr;\n  char cVar3;\n  undefined uVar4;\n  int iVar5;\n  undefined8 *puVar6;\n  long *plVar7;\n  char *pcVar8;\n  undefined8 uVar9;\n  long lVar10;\n  long lVar11;\n  long lVar12;\n  long **pplVar13;\n  ulong uVar14;\n  ulong uVar15;\n  char *pcVar16;\n  uint uVar17;\n  long **pplVar18;\n  double dVar19;\n  char *local_48;\n  long **local_40 [2];\n  \n  if (param_2[4] != 0) {\n    if (((param_3 == 100) && (*param_6 != '\\0')) && (param_2[5] == param_5)) goto LAB_00111a06;\n    cVar3 = initialize_memory_0010bbd3(param_1);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param_2 + 0x44) = 0;\n    *(undefined4 *)(param_2 + 8) = 0;\n    param_2[9] = param_2[4];\n    if (*(char *)(param_2 + 1) == '\\0') {\n      param_2[6] = param_2[5];\n    }\n    *(undefined4 *)(param_2 + 0x10) = 1;\n    puVar6 = (undefined8 *)xmalloc(8);\n    param_2[0x11] = (long)puVar6;\n    *puVar6 = 0;\n    param_2[4] = 0;\n  }\n  strlen(param_6);\n  if (param_3 == 0x84) {\nLAB_00111ab7:\n    uVar4 = debug_start_source_00108f08(param_1,param_6);\n    return uVar4;\n  }\n  if (param_3 < 0x85) {\n    if (param_3 == 0x3c) {\n      iVar5 = strcmp(param_6,\"gcc2_compiled.\");\n      if (iVar5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 2;\n        return 1;\n      }\n      iVar5 = strcmp(param_6,\"gcc_compiled.\");\n      if (iVar5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param_2 + 0x44) = 1;\n      return 1;\n    }\n    if (param_3 < 0x3d) {\n      if (param_3 == 0x24) {\n        if (*param_6 == '\\0') {\n          if (*(char *)(param_2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param_2 + 1) != '\\0') {\n            param_5 = param_5 + param_2[7];\n          }\n          cVar3 = deallocate_memory_0010c1c6(param_1,param_2);\n          if (cVar3 != '\\0') {\n            cVar3 = end_debug_function_0010be1a(param_1,param_5);\n            if (cVar3 != '\\0') {\n              *(undefined *)(param_2 + 0xc) = 0;\n              param_2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param_2 + 0xc) != '\\0') &&\n           ((param_5 < (ulong)param_2[0xd] || (param_2[0xd] == 0xffffffffffffffff)))) {\n          param_2[0xd] = param_5;\n        }\n      }\n      else if (param_3 < 0x25) {\n        if (param_3 == 0xc) {\n          return 1;\n        }\n        if (param_3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param_3 == 0x2a) {\n          return 1;\n        }\n        if (param_3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param_3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param_2 + 0xc) != '\\0') {\n          uVar14 = param_5;\n          if (((*param_6 != '\\0') && (uVar15 = param_2[0xd], uVar15 != 0xffffffffffffffff)) &&\n             (uVar14 = uVar15, param_5 < uVar15)) {\n            uVar14 = param_5;\n          }\n          cVar3 = deallocate_memory_0010c1c6(param_1,param_2);\n          if (cVar3 == '\\0') {\n            return 0;\n          }\n          cVar3 = end_debug_function_0010be1a(param_1,uVar14);\n          if (cVar3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param_2 + 0xc) = 0;\n          param_2[0xd] = -1;\n        }\n        if (*param_6 == '\\0') {\n          return 1;\n        }\n        __ptr = (void *)param_2[4];\n        if (__ptr == (void *)0x0) {\n          lVar12 = xstrdup(param_6);\n          param_2[4] = lVar12;\n        }\n        else {\n          if (*param_6 == '/') {\n            lVar12 = xstrdup(param_6);\n          }\n          else {\n            lVar12 = concat(__ptr,param_6,0);\n          }\n          param_2[4] = lVar12;\n          free(__ptr);\n        }\n        param_2[5] = param_5;\n        return 1;\n      }\n      if (param_3 < 0x65) {\n        if (param_3 == 0x44) {\n          lVar12 = 0;\n          if (*(char *)(param_2 + 0xc) != '\\0') {\n            lVar12 = param_2[7];\n          }\n          uVar4 = record_line_debug_info_0010bf86(param_1,(long)param_4,lVar12 + param_5);\n          return uVar4;\n        }\n        if (param_3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param_3 == 0x82) {\n        plVar7 = (long *)xmalloc();\n        iVar5 = *(int *)(param_2 + 0x10);\n        lVar10 = param_2[10];\n        lVar11 = param_2[0xb];\n        plVar7[5] = 0;\n        lVar12 = param_2[0x11];\n        *(int *)(plVar7 + 4) = iVar5;\n        uVar17 = iVar5 + 1;\n        *(uint *)(param_2 + 0x10) = uVar17;\n        *plVar7 = lVar11;\n        plVar7[1] = lVar10;\n        plVar7[2] = (long)param_6;\n        plVar7[3] = param_5;\n        param_2[10] = (long)plVar7;\n        param_2[0xb] = (long)plVar7;\n        lVar12 = xrealloc(lVar12,(ulong)uVar17 << 3);\n        uVar17 = *(uint *)(plVar7 + 4);\n        param_2[0x11] = lVar12;\n        *(undefined8 *)(lVar12 + (ulong)uVar17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    pcVar8 = strchr(param_6,0x3a);\n    if ((pcVar8 != (char *)0x0) && ((pcVar8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param_2 + 0xc) != '\\0') {\n        uVar14 = param_2[0xd];\n        uVar15 = param_5;\n        if ((uVar14 != 0xffffffffffffffff) && (uVar15 = uVar14, param_5 < uVar14)) {\n          uVar15 = param_5;\n        }\n        cVar3 = deallocate_memory_0010c1c6(param_1,param_2);\n        if (cVar3 == '\\0') {\n          return 0;\n        }\n        cVar3 = end_debug_function_0010be1a(param_1,uVar15);\n        if (cVar3 == '\\0') {\n          return 0;\n        }\n        param_2[0xd] = -1;\n      }\n      if (*(char *)(param_2 + 1) != '\\0') {\n        param_2[7] = param_5;\n      }\n      *(undefined *)(param_2 + 0xc) = 1;\n    }\n    local_48 = strchr(param_6,0x3a);\n    if (local_48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_48[1] == ':') goto code_r0x00111cc7;\n    if (*param_6 == '$') {\n      cVar3 = param_6[1];\n      pcVar16 = \"eh_throw\";\n      if (cVar3 != 'e') {\n        if (cVar3 < 'f') {\n          if ((cVar3 != 'X') && (cVar3 != '_')) {\nLAB_00111d1a:\n            uVar9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning_00108fe8(param_6,uVar9);\n          }\n        }\n        else {\n          pcVar16 = \"this\";\n          if (cVar3 == 't') goto LAB_00111d62;\n          if (cVar3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      pcVar16 = (char *)0x0;\n      if ((param_6 != local_48) && ((*param_6 != ' ' || (local_48 != param_6 + 1)))) {\n        pcVar16 = (char *)copy_and_terminate_string_00109a0b(param_6,(int)local_48 - (int)param_6);\n      }\n    }\nLAB_00111d62:\n    bVar2 = local_48[1];\n    pcVar8 = local_48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)bVar2 * 2) >> 2) & 1 |\n        (bVar2 == 0x2d || bVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 4;\n      goto LAB_001123e8;\n    }\n    if (bVar2 == 0) goto switchD_00111de5_caseD_44;\n    pcVar8 = local_48 + 2;\n    cVar3 = local_48[1];\n    switch(cVar3) {\n    case 'C':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      pcVar8 = \"debug_record_label: not implemented\";\n      if (lVar12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      cVar3 = debug_record_function_0010bc80(param_1,pcVar16,lVar12,cVar3 == 'F',param_5);\n      if (cVar3 != '\\0') {\n        do {\n          if (*local_48 != ';') {\n            return 1;\n          }\n          local_48 = local_48 + 1;\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        } while (lVar12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) goto LAB_0011208f;\n      lVar10 = param_2[3];\n      plVar7 = (long *)param_2[2];\n      cVar3 = *(char *)(*(long *)(*param_2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param_3 == 0x24) {\n        local_48 = pcVar8;\n        do {\n          if (*local_48 != ';') {\n            return 1;\n          }\n          local_48 = local_48 + 1;\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        } while (lVar12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 2;\n      break;\n    case 'S':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      cVar3 = local_48[2];\n      if (cVar3 == 't') {\n        pcVar8 = local_48 + 3;\n      }\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,pcVar16,&local_48,local_40);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) {\n        return 1;\n      }\n      cVar1 = *(char *)(param_2 + 0x35);\n      plVar7 = (long *)debug_tag_type_0010c6be(param_1,pcVar16,lVar12);\n      if (plVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_40[0] != (long **)0x0) {\n        *local_40[0] = plVar7;\n      }\n      if (cVar1 != '\\0') goto LAB_001122f0;\n      pplVar13 = (long **)(param_2 + 0x34);\n      pplVar18 = (long **)param_2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      pcVar8 = local_48 + 3;\n      if (((local_48[2] != '\\0') && (pcVar8 = local_48 + 4, local_48[3] == 'n')) &&\n         (pcVar8 = local_48 + 5, pcVar16 = local_48 + 4, local_48 = pcVar8, *pcVar16 == '0')) {\n        for (; pcVar8 = local_48, *local_48 != '\\0'; local_48 = local_48 + 1) {\n          if (*local_48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 4;\n      break;\n    case 'c':\n      if (local_48[2] == '=') {\n        pcVar8 = local_48 + 4;\n        cVar3 = local_48[3];\n        local_48 = pcVar8;\n        if (cVar3 == 'i') {\n          lVar12 = strtol(pcVar8,(char **)0x0,10);\n          if (pcVar16 == (char *)0x0) {\n            return 0;\n          }\n          lVar10 = initialize_memory_00112996(param_1,pcVar16,4);\n          if (lVar10 != 0) {\n            *(long *)(lVar10 + 0x20) = (long)(int)lVar12;\n            return 1;\n          }\n          return 0;\n        }\n        if (cVar3 == 'r') {\n          dVar19 = strtod(pcVar8,(char **)0x0);\n          if (pcVar16 == (char *)0x0) {\n            return 0;\n          }\n          lVar12 = initialize_memory_00112996(param_1,pcVar16,5);\n          if (lVar12 != 0) {\n            *(double *)(lVar12 + 0x20) = dVar19;\n            return 1;\n          }\n          return 0;\n        }\n        if (cVar3 == 'e') {\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n          if (lVar12 == 0) {\n            return 0;\n          }\n          pcVar8 = local_48;\n          if (*local_48 == ',') {\n            lVar10 = strtol(local_48,(char **)0x0,10);\n            if (pcVar16 == (char *)0x0) {\n              return 0;\n            }\n            lVar11 = initialize_memory_00112996(param_1,pcVar16,6);\n            if (lVar11 != 0) {\n              plVar7 = (long *)xmalloc(0x10);\n              *plVar7 = lVar12;\n              plVar7[1] = (long)(int)lVar10;\n              *(long **)(lVar11 + 0x20) = plVar7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_48[2] == 'F') {\n        local_48 = local_48 + 3;\n        lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        if (lVar12 == 0) {\n          return 0;\n        }\n        uVar9 = initialize_data_structure_00113ce0(lVar12,0,0);\n        lVar12 = initialize_or_get_data_structure_00113d3a(uVar9);\n      }\n      else {\n        local_48 = pcVar8;\n        lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      }\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 1;\n      break;\n    case 'r':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 5;\nLAB_001123e8:\n      cVar3 = allocate_and_initialize_0010c139(param_1,param_2,pcVar16,lVar12,uVar9,param_5);\n      goto joined_r0x001123f8;\n    case 't':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,pcVar16,&local_48,local_40);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) {\n        return 1;\n      }\n      plVar7 = (long *)initialize_debug_info_0010c218(param_1,pcVar16,lVar12);\n      if (plVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_40[0] = plVar7;\n      return 1;\n    case 'v':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 3;\n    }\n    cVar3 = record_parameter_debug_0010bd62(param_1,pcVar16,lVar12,uVar9,param_5);\n    goto joined_r0x001123f8;\n  }\n  if (param_3 == 0xe0) {\n    if ((*(char *)((long)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    cVar3 = deallocate_memory_0010c1c6(param_1,param_2);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    cVar3 = end_debug_block_0010bf20(param_1,param_2[7] + param_2[6] + param_5);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    param_2 = param_2 + 0xe;\n    *(int *)param_2 = *(int *)param_2 + -1;\n    pcVar8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param_2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param_3) {\n      if (param_3 == 0xe2) {\n        pcVar8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        pcVar8 = \"debug_end_common_block: not implemented\";\n        if (param_3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      uVar9 = dcgettext(0,pcVar8,5);\n      fprintf(_stderr,\"%s\\n\",uVar9);\n      return 0;\n    }\n    if (param_3 != 0xc0) {\n      if (param_3 == 0xc2) {\n        iVar5 = *(int *)(param_2 + 0x10);\n        *(uint *)(param_2 + 0x10) = iVar5 + 1U;\n        lVar12 = xrealloc(param_2[0x11],(ulong)(iVar5 + 1U) << 3);\n        puVar6 = (undefined8 *)param_2[0xb];\n        param_2[0x11] = lVar12;\n        while( true ) {\n          if (puVar6 == (undefined8 *)0x0) {\n            uVar9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning_00108fe8(param_6,uVar9);\n            *(undefined8 *)(param_2[0x11] + (ulong)(*(int *)(param_2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param_5 == puVar6[3]) && (iVar5 = strcmp((char *)puVar6[2],param_6), iVar5 == 0))\n          break;\n          puVar6 = (undefined8 *)*puVar6;\n        }\n        *(undefined8 *)(lVar12 + (ulong)(*(int *)(param_2 + 0x10) - 1) * 8) = puVar6[5];\n        return 1;\n      }\n      if (param_3 == 0xa2) {\n        lVar12 = param_2[10];\n        if (lVar12 != 0) {\n          lVar10 = *(long *)(lVar12 + 8);\n          uVar17 = *(uint *)(lVar12 + 0x20);\n          param_2[10] = lVar10;\n          if ((uVar17 < *(uint *)(param_2 + 0x10)) &&\n             (*(undefined8 *)(lVar12 + 0x28) = *(undefined8 *)(param_2[0x11] + (ulong)uVar17 * 8),\n             lVar10 != 0)) {\n            param_6 = *(char **)(lVar10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param_6 = (char *)param_2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param_2 + 0xc) != '\\0') {\n      cVar3 = start_debug_block_0010be88(param_1,param_2[7] + param_2[6] + param_5);\n      if (cVar3 == '\\0') {\n        return 0;\n      }\n      cVar3 = deallocate_memory_0010c1c6(param_1,param_2);\n      if (cVar3 != '\\0') {\n        *(int *)(param_2 + 0xe) = *(int *)(param_2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    pcVar8 = \"N_LBRAC not within function\\n\";\n  }\n  pcVar8 = (char *)dcgettext(0,pcVar8,5);\n  fprintf(_stderr,pcVar8);\n  return 0;\ncode_r0x00111cc7:\n  local_48 = local_48 + 2;\n  local_48 = strchr(local_48,0x3a);\n  if (local_48 == (char *)0x0) {\n    pcVar8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_48 = pcVar8;\n    print_bad_stab_00108fb9(param_6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (cVar3 != 't') {\n      return 1;\n    }\n    plVar7 = (long *)initialize_debug_info_0010c218(param_1,pcVar16,plVar7);\n    if (plVar7 != (long *)0x0) {\n      if (local_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_40[0] = plVar7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *pcVar16) &&\n     (iVar5 = strcmp((char *)pplVar18[1],pcVar16), iVar5 == 0)) {\n    pplVar18[3] = plVar7;\n    *pplVar13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  pplVar13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (lVar10 < 1) {\nLAB_0011208f:\n    uVar9 = 1;\nLAB_001121c4:\n    cVar3 = initialize_variable_debug_0010c05d(param_1,pcVar16,lVar12,uVar9,param_5);\njoined_r0x001123f8:\n    if (cVar3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  pcVar8 = *(char **)(*plVar7 + 8);\n  if ((cVar3 != '\\0') && (cVar3 == *pcVar8)) {\n    pcVar8 = pcVar8 + 1;\n  }\n  if ((*pcVar8 == *pcVar16) && (iVar5 = strcmp(pcVar8,pcVar16), iVar5 == 0)) {\n    param_5 = *(long *)(*plVar7 + 0x10) + *(long *)(*(long *)(*plVar7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  lVar10 = lVar10 + -1;\n  plVar7 = plVar7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "strtod",
                "FUN_0010be88",
                "FUN_00108fe8",
                "FUN_0010bbd3",
                "FUN_0010bf86",
                "FUN_00113d3a",
                "xmalloc",
                "FUN_00112996",
                "FUN_0010bf20",
                "xrealloc",
                "strchr",
                "FUN_0010c1c6",
                "concat",
                "FUN_0010c05d",
                "strcmp",
                "FUN_00108f08",
                "strlen",
                "fprintf",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_0010be1a",
                "FUN_00108fb9",
                "FUN_0010c139",
                "strtol",
                "FUN_00109a0b",
                "xstrdup",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "free",
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010bc80"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUNC_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "hasPermission",
                "iVar2": "error",
                "uVar3": "relocSize",
                "lVar4": "updateResult",
                "puVar5": "relocData",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "puVar7": "newRelocData",
                "puVar8": "updatedRelocData",
                "uVar9": "index",
                "uStack_38": "stackVariable"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char hasPermission;\n  int error;\n  undefined8 relocSize;\n  long updateResult;\n  undefined8 *relocData;\n  ulong relocCount;\n  code *jumptable;\n  undefined8 *newRelocData;\n  undefined8 *updatedRelocData;\n  ulong index;\n  undefined8 stackVariable;\n  \n  hasPermission = check_permissions_and_patterns_00115f50(param1,param2,0);\n  if (hasPermission != '\\0') {\n    return;\n  }\n  relocSize = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (updateResult = update_permissions_00114190(*param2,0,0x100), updateResult == 0)) {\n    updateResult = bfd_get_reloc_upper_bound(param1,param2);\n    if (updateResult < 0) {\n      if ((updateResult != -1) || (error = bfd_get_error(), error != 5)) {\n        DAT_00127a20 = 1;\n        relocSize = 0;\nLAB_00108315:\n        print_error_message_001126c0(0,param1,param2,relocSize,stackVariable);\n        return;\n      }\n    }\n    else if (updateResult != 0) {\n      relocData = (undefined8 *)param2[0xe];\n      if (relocData == (undefined8 *)0x0) {\n        relocData = (undefined8 *)bfd_alloc(param3);\n        if (relocData == (undefined8 *)0x0) {\n          print_error_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(param1,param2,relocData,DAT_001278b0);\n        if ((long)relocCount < 0) {\n          DAT_00127a20 = 1;\n          relocSize = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        newRelocData = relocData;\n        for (index = 0; index != relocCount; index = index + 1) {\n          updatedRelocData = newRelocData;\n          if (((*(long **)relocData[index] != (long *)0x0) &&\n              (updateResult = **(long **)relocData[index], updateResult != 0)) &&\n             (hasPermission = check_pattern_00115d70(*(undefined8 *)(updateResult + 8),DAT_00127a08), hasPermission != '\\0')) {\n            updatedRelocData = newRelocData + 1;\n            *newRelocData = relocData[index];\n          }\n          newRelocData = updatedRelocData;\n        }\n        *newRelocData = 0;\n        relocCount = (long)newRelocData - (long)relocData >> 3;\n      }\n      jumptable = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocData = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocData = (undefined8 *)0x0;\n  jumptable = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)(param3,relocSize,relocData,relocCount);\n  return;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_canonicalize_reloc",
                "FUN_001082df",
                "bfd_alloc",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error",
                "FUN_00115f50",
                "FUN_001126c0",
                "FUN_00114190",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00104ea2",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "decode_and_extract_data_0010d559",
                "param_1": "data_array",
                "param_2": "byte_pointer",
                "param_3": "output_length",
                "bVar1": "second_byte",
                "pbVar2": "byte_array",
                "cVar3": "character",
                "uVar4": "extracted_integer",
                "iVar5": "comparison_result",
                "ppcVar6": "debug_info_array",
                "sVar7": "string_length",
                "lVar8": "string_entry",
                "plVar9": "debug_info",
                "pcVar10": "extracted_string",
                "__s1": "return_string",
                "__ptr": "temporary_string",
                "pbVar11": "updated_byte_array",
                "uVar12": "named_type",
                "local_64": "remaining_iterations",
                "local_40": "temporary_string_array"
            },
            "code": "\nundefined8 decode_and_extract_data_0010d559(undefined8 *data_array,byte **byte_pointer,long *output_length)\n\n{\n  byte second_byte;\n  byte *byte_array;\n  char character;\n  uint extracted_integer;\n  int comparison_result;\n  char **debug_info_array;\n  size_t string_length;\n  long string_entry;\n  long *debug_info;\n  char *extracted_string;\n  char *return_string;\n  void *temporary_string;\n  byte *updated_byte_array;\n  undefined8 named_type;\n  byte *__nptr;\n  int remaining_iterations;\n  char *temporary_string_array [2];\n  \n  byte_array = *byte_pointer;\n  second_byte = byte_array[1];\n  if ((char)second_byte < ':') {\n    if ((char)second_byte < '1') goto LAB_0010d5d8;\n    remaining_iterations = (char)second_byte + -0x30;\n    if (byte_array[2] == 0x5f) {\n      *byte_pointer = byte_array + 1;\n    }\n    updated_byte_array = *byte_pointer + 2;\n  }\n  else {\n    if (((second_byte != 0x5f) || (((&_sch_istable)[(ulong)byte_array[2] * 2] & 4) == 0)) ||\n       (byte_array[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = byte_array + 2;\n    string_entry = strtol((char *)__nptr,(char **)0x0,10);\n    remaining_iterations = (int)string_entry;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    updated_byte_array = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *byte_pointer = updated_byte_array;\n  debug_info_array = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    debug_info_array = temporary_string_array;\n  }\n  string_entry = 0;\n  while( true ) {\n    while( true ) {\n      remaining_iterations = remaining_iterations + -1;\n      if (remaining_iterations == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = string_entry;\n        }\n        return 1;\n      }\n      if (**byte_pointer == 0x5f) {\n        *byte_pointer = *byte_pointer + 1;\n      }\n      if (**byte_pointer != 0x74) break;\n      character = parse_and_extract_data_0010d21c(data_array,byte_pointer,debug_info_array);\n      extracted_string = temporary_string_array[0];\n      if (character == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        string_length = strlen(temporary_string_array[0]);\n        string_entry = find_string_entry_0010afd5(*data_array,data_array[1],extracted_string,string_length & 0xffffffff,9);\n        free(extracted_string);\n        if (string_entry == 0) {\n          return 0;\n        }\n      }\n    }\n    extracted_integer = extract_integer_from_byte_array_00108e76(byte_pointer);\n    string_length = strlen((char *)*byte_pointer);\n    if (string_length < extracted_integer) break;\n    if (output_length != (long *)0x0) {\n      if ((string_entry != 0) && (debug_info = (long *)extract_debug_info_00113b1e(string_entry), debug_info != (long *)0x0)) {\n        extracted_string = (char *)copy_and_terminate_string_00109a0b(*byte_pointer,extracted_integer);\n        for (; string_entry = *debug_info, string_entry != 0; debug_info = debug_info + 1) {\n          string_entry = *(long *)(string_entry + 8);\n          if (string_entry == 0) {\n            free(extracted_string);\n            return 0;\n          }\n          return_string = (char *)get_return_value_001129f4(string_entry);\n          if ((return_string != (char *)0x0) && (comparison_result = strcmp(return_string,extracted_string), comparison_result == 0)) break;\n        }\n        free(extracted_string);\n        if (string_entry != 0) goto LAB_0010d7ad;\n      }\n      named_type = 9;\n      if (remaining_iterations == 0) {\n        temporary_string = (void *)copy_and_terminate_string_00109a0b(*byte_pointer,extracted_integer);\n        string_entry = find_named_type_0010914e(*data_array,temporary_string);\n        free(temporary_string);\n        if (string_entry != 0) goto LAB_0010d7ad;\n        named_type = 0;\n      }\n      string_entry = find_string_entry_0010afd5(*data_array,data_array[1],*byte_pointer,extracted_integer,named_type);\n      if (string_entry == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *byte_pointer = *byte_pointer + extracted_integer;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(byte_array);\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00108e76",
                "strlen",
                "FUN_00113b1e",
                "free",
                "FUN_001129f4",
                "FUN_0010914e",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strtol",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "decode_and_extract_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "message",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *message,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_001275e0);\n  vfprintf(standardError,message,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_print_error_message_00108466",
                "param_7": "pointerToFree",
                "print_error_message_001126c0": "printErrorMessage",
                "free": "releaseMemory"
            },
            "code": "\nvoid cleanupAndPrintErrorMessage_00108466(void)\n\n{\n  void *pointerToFree;\n  \n  DAT_00127a20 = 1;\n  printErrorMessage(0);\n  free(pointerToFree);\n  return;\n}\n\n",
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_message_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_integer_from_byte_array_00108e76",
                "param_1": "byte_array",
                "bVar1": "current_byte",
                "iVar2": "extracted_integer"
            },
            "code": "\nint extract_integer_from_byte_array_00108e76(byte **byte_array)\n\n{\n  byte current_byte;\n  int extracted_integer;\n  \n  extracted_integer = 0;\n  while( true ) {\n    current_byte = **byte_array;\n    if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) break;\n    *byte_array = *byte_array + 1;\n    extracted_integer = extracted_integer * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return extracted_integer;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "extract_integer_from_byte_array_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_param",
                "param_2": "ptr_1",
                "param_3": "ptr_2",
                "lVar1": "hash_ptr"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_param,undefined8 ptr_1,undefined8 ptr_2)\n\n{\n  long hash_ptr;\n  \n  if (((input_param != 0) || (input_param = bfd_hash_allocate(ptr_1,0x30), input_param != 0)) &&\n     (hash_ptr = bfd_hash_newfunc(input_param,ptr_1,ptr_2), hash_ptr != 0)) {\n    *(undefined8 *)(hash_ptr + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_ptr + 0x18) = 0;\n    *(undefined4 *)(hash_ptr + 0x28) = 0;\n    return hash_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "update_hash_table_with_param_thunk_0010e439",
                "param_1": "base_address",
                "param_2": "value",
                "update_hash_table_0010e2f0": "update_hash_table"
            },
            "code": "\nvoid update_hash_table_with_param_thunk_0010e439(long base_address,undefined8 value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = value;\n  update_hash_table(base_address,0x84,0,0,value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "update_hash_table_with_param_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "path",
                "param_2": "original_directory",
                "iVar1": "access_result",
                "sStack_a8": "stat_buffer"
            },
            "code": "\nchar * check_directory_access_0011283f(char *path,char *original_directory)\n\n{\n  int access_result;\n  stat stat_buffer;\n  \n  if ((original_directory == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&stat_buffer);\n      if ((access_result == 0) && ((stat_buffer.st_mode & 0xf000) == 0x4000)) {\n        original_directory = path;\n      }\n    }\n  }\n  return original_directory;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_handle_and_return_error_00108237",
                "unaff_R12D": "handle",
                "piVar2": "errorPtr",
                "iVar1": "savedErrorValue"
            },
            "code": "\nundefined8 closeHandleAndReturnError_00108237(void)\n\n{\n  int savedErrorValue;\n  int *errorPtr;\n  int handle;\n  \n  errorPtr = __errno_location();\n  savedErrorValue = *errorPtr;\n  close(handle);\n  *errorPtr = savedErrorValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_handle_and_return_error_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_0011a170",
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "param_1": "record_data",
                "param_2": "filename",
                "param_3": "size",
                "param_4": "flag",
                "uVar1": "result",
                "plVar2": "record",
                "puVar3": "buffer",
                "lVar4": "count",
                "puVar5": "ptr",
                "pcVar6": "default_filename",
                "bVar7": "is_null",
                "auVar8": "return_value",
                "_stderr": "standard_error"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long record_data,char *filename,long size,uint flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 result;\n  long *record;\n  undefined4 *buffer;\n  long count;\n  undefined4 *ptr;\n  char *default_filename;\n  byte is_null;\n  undefined return_value [16];\n  \n  is_null = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (size != 0) {\n    if (*(long *)(record_data + 8) == 0) {\n      result = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(standard_error,\"%s\\n\",result);\n    }\n    else {\n      record = (long *)xmalloc(0x18);\n      *record = size;\n      *(undefined (*) [16])(record + 1) = ZEXT816(0);\n      buffer = (undefined4 *)xmalloc(0x30);\n      *(long **)(record_data + 0x18) = record;\n      record[2] = (long)buffer;\n      ptr = buffer;\n      for (count = 0xc; count != 0; count = count + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)is_null * -2 + 1;\n      }\n      *(undefined4 **)(record_data + 0x20) = buffer;\n      count = *(long *)(record_data + 0x10);\n      *(undefined8 *)(buffer + 6) = param_5;\n      *(undefined8 *)(buffer + 8) = 0xffffffffffffffff;\n      count = initialize_memory_00112925(count + 0x10,default_filename,3,(flag & 0xff) + 1);\n      if (count != 0) {\n        *(long **)(count + 0x20) = record;\n        result = CONCAT71((int7)((ulong)count >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  result = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_record_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = get_modified_filename_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_modified_filename_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = update_permissions_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = update_permissions_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = update_permissions_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = improve_debugging_information_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUNC_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUNC_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_memory_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_memory_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_and_initialize_data_structure_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = initialize_or_record_debug_info_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_debug_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_and_initialize_data_structure_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debug_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = initialize_section_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_and_exit_error_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_permissions_and_patterns_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = initialize_section_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_and_exit_error_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = process_binary_data_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)extract_build_attributes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001125fa",
                "FUN_00107880"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "create_file_path_00114cf0",
                "param_1": "filePath",
                "pcVar1": "lastSlash",
                "lVar2": "length",
                "lVar3": "offset",
                "lVar4": "slashIndex",
                "pcVar5": "newFilePath",
                "bVar6": "foundSlash"
            },
            "code": "\nvoid createFilePath_00114cf0(char *filePath)\n\n{\n  char *lastSlash;\n  long length;\n  long offset;\n  long slashIndex;\n  char *newFilePath;\n  byte foundSlash;\n  \n  foundSlash = 0;\n  lastSlash = strrchr(filePath,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    offset = 0;\n  }\n  else {\n    slashIndex = (long)lastSlash - (long)filePath;\n    lastSlash = (char *)xmalloc(slashIndex + 0xb);\n    offset = slashIndex + 1;\n    newFilePath = lastSlash;\n    for (length = slashIndex; length != 0; length = length + -1) {\n      *newFilePath = *filePath;\n      filePath = filePath + (ulong)foundSlash * -2 + 1;\n      newFilePath = newFilePath + (ulong)foundSlash * -2 + 1;\n    }\n    lastSlash[slashIndex] = '/';\n  }\n  *(undefined8 *)(lastSlash + offset) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + offset) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "create_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "dataPointer",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "cVar1": "tempChar",
                "iVar2": "size",
                "iVar3": "result",
                "uVar4": "returnValue",
                "__s": "item1",
                "__s_00": "item2",
                "sVar5": "len1",
                "sVar6": "len2",
                "__s_01": "concatenatedString",
                "lVar7": "counter",
                "local_41": "tempByte"
            },
            "code": "\nundefined4 processData_0010a181(long dataPointer,long start,long end,byte flag)\n\n{\n  char tempChar;\n  int size;\n  int result;\n  undefined4 returnValue;\n  char *item1;\n  char *item2;\n  size_t len1;\n  size_t len2;\n  char *concatenatedString;\n  long counter;\n  byte tempByte;\n  \n  tempChar = *(char *)(*(long *)(dataPointer + 0x60) + 0x1c);\n  item1 = (char *)extract_and_free_next_item_00109b2f();\n  tempByte = 1;\n  if (tempChar == '\\0') {\n    tempByte = *(byte *)(*(long *)(dataPointer + 0x60) + 0x1c);\n  }\n  size = *(int *)(*(long *)(dataPointer + 0x60) + 0x18);\n  item2 = (char *)extract_and_free_next_item_00109b2f(dataPointer);\n  len1 = strlen(item1);\n  len2 = strlen(item2);\n  concatenatedString = (char *)xmalloc(len1 + 100 + len2);\n  if (flag == 0) {\n    *concatenatedString = '\\0';\n    counter = 0;\n    tempByte = tempByte & 1;\n  }\n  else {\n    counter = *(long *)(dataPointer + 0x68);\n    *(long *)(dataPointer + 0x68) = counter + 1;\n    sprintf(concatenatedString,\"%ld=@S;\",counter);\n    tempByte = flag;\n  }\n  len1 = strlen(concatenatedString);\n  sprintf(concatenatedString + len1,\"ar%s;%ld;%ld;%s\",item1,start,end,item2);\n  free(item1);\n  free(item2);\n  result = 0;\n  if (start <= end) {\n    result = size * (((int)end - (int)start) + 1);\n  }\n  returnValue = initialize_data_structure_00109b52(dataPointer,concatenatedString,counter,tempByte,result);\n  if ((char)returnValue != '\\0') {\n    free(concatenatedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_improved_bfd_header_001199d0",
                "iVar1": "columnWidth",
                "iVar2": "targetIndex",
                "iVar3": "compareResult",
                "pcVar4": "headerString",
                "sVar5": "headerLength",
                "pcVar6": "tempFilePath",
                "uVar7": "accessResult",
                "piVar8": "errnoLocation",
                "iVar9": "loopIndex",
                "lVar10": "loopIndex2",
                "lVar11": "loopIndex3",
                "ppcVar12": "archMachPointer",
                "uVar13": "maxLength",
                "uVar14": "strlenResult",
                "local_70": "loopCounter"
            },
            "code": "\n\n\nvoid printImprovedBFDHeader_001199d0(void)\n\n{\n  int columnWidth;\n  int targetIndex;\n  int compareResult;\n  char *headerString;\n  size_t headerLength;\n  char *tempFilePath;\n  undefined8 accessResult;\n  int *errnoLocation;\n  int loopIndex;\n  long loopIndex2;\n  long loopIndex3;\n  char **archMachPointer;\n  uint maxLength;\n  ulong strlenResult;\n  int loopCounter;\n  \n  headerString = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerString,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    headerString = getenv(\"TMPDIR\");\n    accessResult = check_directory_access_0011283f(headerString,0);\n    headerString = getenv(\"TMP\");\n    accessResult = check_directory_access_0011283f(headerString,accessResult);\n    headerString = getenv(\"TEMP\");\n    accessResult = check_directory_access_0011283f(headerString,accessResult);\n    accessResult = check_directory_access_0011283f(&DAT_0011b39a,accessResult);\n    accessResult = check_directory_access_0011283f(\"/var/tmp\",accessResult);\n    headerString = (char *)check_directory_access_0011283f(&DAT_00120324,accessResult);\n    if (headerString == (char *)0x0) {\n      headerString = \".\";\n    }\n    headerLength = strlen(headerString);\n    tempFilePath = (char *)xmalloc((int)headerLength + 2);\n    DAT_001278c0 = strcpy(tempFilePath,headerString);\n    DAT_001278c0[headerLength & 0xffffffff] = '/';\n    DAT_001278c0[(int)headerLength + 1] = '\\0';\n  }\n  headerString = DAT_001278c0;\n  headerLength = strlen(DAT_001278c0);\n  loopIndex2 = (long)(int)headerLength;\n  tempFilePath = (char *)xmalloc(loopIndex2 + 9);\n  strcpy(tempFilePath,headerString);\n  *(undefined2 *)(tempFilePath + loopIndex2) = 0x6363;\n  *(undefined4 *)(tempFilePath + loopIndex2 + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilePath + loopIndex2 + 2) + 3) = 0x585858;\n  tempFilePath[loopIndex2 + 8] = '\\0';\n  targetIndex = mkstemps(tempFilePath,0);\n  if (targetIndex == -1) {\n    errnoLocation = __errno_location();\n    tempFilePath = strerror(*errnoLocation);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerString,tempFilePath);\n                    \n    abort();\n  }\n  targetIndex = close(targetIndex);\n  if (targetIndex != 0) {\n                    \n    abort();\n  }\n  maxLength = 0;\n  targetIndex = 2;\n  bfd_iterate_over_targets(improve_and_print_bfd_header_00119f70);\n  unlink(tempFilePath);\n  free(tempFilePath);\n  loopCounter = 0;\n  do {\n    headerString = (char *)bfd_printable_arch_mach(targetIndex);\n    headerLength = strlen(headerString);\n    if ((int)maxLength < (int)(uint)headerLength) {\n      maxLength = (uint)headerLength;\n    }\n    targetIndex = targetIndex + 1;\n  } while (targetIndex != 0x57);\n  headerString = getenv(\"COLUMNS\");\n  targetIndex = loopCounter;\n  if (headerString != (char *)0x0) {\n    loopIndex2 = strtol(headerString,(char **)0x0,10);\n    columnWidth = (int)loopIndex2;\n    if (columnWidth != 0) goto LAB_00119b11;\n  }\n  columnWidth = 0x50;\nLAB_00119b11:\n  do {\n    loopCounter = targetIndex;\n    if (-1 < loopCounter) {\n      return;\n    }\n    loopIndex3 = (long)loopCounter;\n    loopIndex = (columnWidth - maxLength) + -1;\n    loopIndex2 = loopIndex3;\n    do {\n      targetIndex = (int)loopIndex2;\n      if (-1 < targetIndex) break;\n      headerLength = strlen(*(char **)(loopIndex2 * 0x60));\n      loopIndex2 = loopIndex2 + 1;\n      loopIndex = (loopIndex - (int)headerLength) + -1;\n    } while (-1 < loopIndex);\n    printf(\"\\n%*s\",(ulong)(maxLength + 1),&DAT_0011b4a1);\n    for (archMachPointer = (char **)(loopIndex3 * 0x60);\n        ((ulong)(uint)(targetIndex - loopCounter) + loopIndex3) * 0x60 - (long)archMachPointer != 0;\n        archMachPointer = archMachPointer + 0xc) {\n      printf(\"%s \",*archMachPointer);\n    }\n    loopIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerString = (char *)bfd_printable_arch_mach(loopIndex,0);\n      compareResult = strcmp(headerString,\"UNKNOWN!\");\n      if (compareResult != 0) {\n        accessResult = bfd_printable_arch_mach(loopIndex,0);\n        printf(\"%*s \",(ulong)maxLength,accessResult);\n        archMachPointer = (char **)(loopIndex3 * 0x60);\n        compareResult = loopCounter;\n        while (targetIndex != compareResult) {\n          if (*(char *)((long)archMachPointer + (ulong)(loopIndex - 2) + 8) == '\\0') {\n            headerLength = strlen(*archMachPointer);\n            for (strlenResult = headerLength & 0xffffffff; (int)strlenResult != 0; strlenResult = (ulong)((int)strlenResult - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachPointer,_stdout);\n          }\n          compareResult = compareResult + 1;\n          if (targetIndex != compareResult) {\n            putc(0x20,_stdout);\n          }\n          archMachPointer = archMachPointer + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      loopIndex = loopIndex + 1;\n    } while (loopIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "close",
                "abort",
                "getenv",
                "strlen",
                "fprintf",
                "bfd_printable_arch_mach",
                "xmalloc",
                "dcgettext",
                "FUN_00104943",
                "FUN_00119f70",
                "__errno_location",
                "unlink",
                "FUN_0011283f",
                "free",
                "strerror",
                "mkstemps",
                "bfd_iterate_over_targets",
                "strcpy",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_improved_bfd_header_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "code": "\nvoid initializeSystem_0010847a(void)\n\n{\n  extract_build_attributes_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_system_0010847a",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "parse_and_extract_data_0010d21c",
                "param_1": "input_data",
                "param_2": "byte_array",
                "param_3": "output_string",
                "bVar1": "current_byte",
                "pbVar2": "byte_ptr",
                "bVar3": "temp_byte",
                "cVar4": "temp_char",
                "bVar5": "byte_result",
                "uVar6": "return_value",
                "iVar7": "integer_result",
                "uVar8": "unsigned_result",
                "sVar9": "string_length",
                "pbVar10": "temp_byte_ptr",
                "__ptr": "temp_void_ptr",
                "__ptr_00": "temp_void_ptr_2",
                "__haystack": "search_string",
                "pcVar11": "temp_char_ptr",
                "uVar12": "temp_unsigned",
                "pcVar13": "temp_char_ptr_2",
                "bVar14": "byte_flag_1",
                "pcVar15": "temp_char_ptr_3",
                "bVar16": "byte_flag_2",
                "bVar17": "byte_flag_3",
                "bVar18": "byte_flag_4",
                "bVar19": "byte_flag_5",
                "uVar20": "count",
                "uVar21": "unsigned_long",
                "local_3c": "int_array"
            },
            "code": "\nundefined4 parseAndExtractData_0010d21c(undefined8 input_data,byte **byte_array,undefined8 *output_string)\n\n{\n  byte current_byte;\n  byte *byte_ptr;\n  byte temp_byte;\n  char temp_char;\n  byte byte_result;\n  undefined4 return_value;\n  int integer_result;\n  uint unsigned_result;\n  size_t string_length;\n  byte *temp_byte_ptr;\n  void *temp_void_ptr;\n  void *temp_void_ptr_2;\n  char *search_string;\n  char *temp_char_ptr;\n  undefined8 temp_unsigned;\n  char *temp_char_ptr_2;\n  byte byte_flag_1;\n  char *temp_char_ptr_3;\n  byte byte_flag_2;\n  byte byte_flag_3;\n  byte byte_flag_4;\n  byte byte_flag_5;\n  uint count;\n  ulong unsigned_long;\n  uint int_array [3];\n  \n  byte_ptr = *byte_array;\n  *byte_array = byte_ptr + 1;\n  int_array[0] = extract_integer_from_byte_array_00108e76(byte_array);\n  unsigned_long = (ulong)int_array[0];\n  if (int_array[0] != 0) {\n    temp_byte_ptr = *byte_array;\n    string_length = strlen((char *)temp_byte_ptr);\n    if (unsigned_long <= string_length) {\n      *byte_array = temp_byte_ptr + unsigned_long;\n      count = 0;\n      return_value = parse_integer_from_string_00108ea1(byte_array,int_array);\n      if ((char)return_value != '\\0') {\nLAB_0010d2b4:\n        if (int_array[0] <= count) {\n          if (output_string == (undefined8 *)0x0) {\n            return return_value;\n          }\n          temp_void_ptr = (void *)copy_and_terminate_string_00109a0b(byte_ptr,(int)*byte_array - (int)byte_ptr);\n          temp_void_ptr_2 = (void *)concat(\"NoSuchStrinG__\",temp_void_ptr,0);\n          free(temp_void_ptr);\n          search_string = (char *)cplus_demangle(temp_void_ptr_2,2);\n          free(temp_void_ptr_2);\n          if ((search_string != (char *)0x0) &&\n             (temp_char_ptr = strstr(search_string,\"::NoSuchStrinG\"), temp_char_ptr_2 = search_string,\n             temp_char_ptr_3 = search_string, temp_char_ptr != (char *)0x0)) {\n            for (; temp_char_ptr_2 != temp_char_ptr; temp_char_ptr_2 = temp_char_ptr_2 + 1) {\n              if ((*temp_char_ptr_2 != ' ') ||\n                 (((temp_char_ptr_2[1] == '>' && (search_string < temp_char_ptr_2)) && (temp_char_ptr_2[-1] == '>')))) {\n                *temp_char_ptr_3 = *temp_char_ptr_2;\n                temp_char_ptr_3 = temp_char_ptr_3 + 1;\n              }\n            }\n            temp_unsigned = copy_and_terminate_string_00109a0b(search_string,(int)temp_char_ptr_3 - (int)search_string);\n            *output_string = temp_unsigned;\n            free(search_string);\n            return return_value;\n          }\n          print_error_message_0010911f(byte_ptr);\n          free(search_string);\n          return 0;\n        }\n        temp_byte_ptr = *byte_array;\n        if (*temp_byte_ptr != 0x5a) {\n          byte_result = parse_binary_data_0010c95e(input_data,byte_array,0);\n          if (byte_result == 0) {\n            return 0;\n          }\n          temp_byte = 0;\n          byte_flag_1 = 0;\n          byte_flag_4 = 0;\n          byte_flag_3 = 0;\n          byte_flag_5 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte_flag_2 = temp_byte;\n              current_byte = *temp_byte_ptr;\n              if ((byte_flag_1 | current_byte == 0) != 0) {\n                byte_result = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              temp_byte = byte_result;\n              byte_flag_1 = byte_result;\n            } while ('v' < (char)current_byte);\n            if ((char)current_byte < 'b') {\n              if ((char)current_byte < 'U') {\n                if ((char)current_byte < 'C') goto LAB_0010d2e9;\n                unsigned_long = 1L << (current_byte + 0xbd & 0x3f);\n                if ((unsigned_long & 0x11409) == 0) {\n                  if ((unsigned_long & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (current_byte == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(current_byte + 0xab)) goto LAB_0010d2e9;\n              temp_byte_ptr = temp_byte_ptr + 1;\n              temp_byte = byte_flag_2;\n              byte_flag_1 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(current_byte) {\n            case 0x62:\n              temp_byte = byte_flag_2;\n              byte_flag_4 = byte_result;\n              break;\n            case 99:\n              temp_byte = byte_flag_2;\n              byte_flag_5 = byte_result;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              temp_byte = byte_flag_2;\n              byte_flag_3 = byte_result;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *byte_array = temp_byte_ptr + 1;\n        temp_char = parse_binary_data_0010c95e(input_data,byte_array,0);\n        if (temp_char == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(byte_ptr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte_flag_2 == 0) {\n    if (byte_flag_5 == 0) {\n      if (byte_flag_4 == 0) {\n        if (byte_flag_3 == 0) {\n          if (byte_result != 0) {\n            unsigned_result = extract_integer_from_byte_array_00108e76(byte_array);\n            if (unsigned_result == 0) goto LAB_0010d280;\n            *byte_array = *byte_array + unsigned_result;\n          }\n        }\n        else {\n          if (**byte_array == 0x6d) {\n            *byte_array = *byte_array + 1;\n          }\n          while( true ) {\n            temp_byte_ptr = *byte_array;\n            if (((&_sch_istable)[(ulong)*temp_byte_ptr * 2] & 4) == 0) break;\n            *byte_array = temp_byte_ptr + 1;\n          }\n          if (*temp_byte_ptr == 0x2e) {\n            do {\n              temp_byte_ptr = temp_byte_ptr + 1;\n              *byte_array = temp_byte_ptr;\n            } while (((&_sch_istable)[(ulong)*temp_byte_ptr * 2] & 4) != 0);\n          }\n          temp_byte_ptr = *byte_array;\n          if (*temp_byte_ptr == 0x65) {\n            do {\n              temp_byte_ptr = temp_byte_ptr + 1;\n              *byte_array = temp_byte_ptr;\n            } while (((&_sch_istable)[(ulong)*temp_byte_ptr * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        unsigned_result = extract_integer_from_byte_array_00108e76(byte_array);\n        if (1 < unsigned_result) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**byte_array == 0x6d) {\n        *byte_array = *byte_array + 1;\n      }\n      integer_result = extract_integer_from_byte_array_00108e76(byte_array);\n      if (integer_result == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**byte_array == 0x6d) {\n      *byte_array = *byte_array + 1;\n    }\n    while (((&_sch_istable)[(ulong)**byte_array * 2] & 4) != 0) {\n      *byte_array = *byte_array + 1;\n    }\n  }\nLAB_0010d2b1:\n  count = count + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "FUN_00108e76",
                "abort",
                "FUN_0010c95e",
                "strlen",
                "free",
                "cplus_demangle",
                "FUN_00109a0b",
                "FUN_00108ea1",
                "concat",
                "strstr",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_extract_data_0010d21c",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = extract_integer_from_byte_array_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = parse_integer_from_string_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_terminate_string_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_terminate_string_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = extract_integer_from_byte_array_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = extract_integer_from_byte_array_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = extract_integer_from_byte_array_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "temp"
            },
            "code": "\nvoid cleanupHashTable_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 temp;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,unusedParam2,temp);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hash_table_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_and_initialize_0010c139",
                "param_1": "pointer",
                "param_2": "structAddress",
                "param_3": "data1",
                "param_4": "data2",
                "param_5": "data3",
                "param_6": "data4",
                "uVar1": "previousPointer",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "allocatedPointer",
                "in_R10": "register10",
                "unaff_R15": "register15"
            },
            "code": "\nulong allocateAndInitialize_0010c139(undefined8 pointer,long structAddress,undefined8 data1,undefined8 data2,\n                  undefined4 data3,undefined8 data4)\n\n{\n  undefined8 previousPointer;\n  char flag;\n  ulong result;\n  undefined8 *allocatedPointer;\n  undefined8 register10;\n  undefined8 register15;\n  \n  flag = *(char *)(structAddress + 0x60);\n  if ((flag != '\\0') && ((*(int *)(structAddress + 0x40) != 0 || (*(char *)(structAddress + 0x44) == '\\0')))) {\n    allocatedPointer = (undefined8 *)xmalloc(0x28);\n    previousPointer = *(undefined8 *)(structAddress + 0x78);\n    *(undefined8 *)((long)allocatedPointer + 0x1c) = 0;\n    allocatedPointer[2] = data2;\n    *(undefined4 *)(allocatedPointer + 3) = data3;\n    allocatedPointer[4] = data4;\n    *(undefined8 **)(structAddress + 0x78) = allocatedPointer;\n    *allocatedPointer = previousPointer;\n    allocatedPointer[1] = data1;\n    return CONCAT71((int7)((ulong)register15 >> 8),flag) & 0xffffffff;\n  }\n  result = initialize_variable_debug_0010c05d(pointer,data1,data2,data3,data4,register10);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "update_hash_table_0010e439",
                "param_1": "hashTableAddress",
                "param_2": "newValue",
                "update_hash_table_0010e2f0": "updateHashTable"
            },
            "code": "\nvoid updateHashTable_0010e439(long hashTableAddress,undefined8 newValue)\n\n{\n  *(undefined8 *)(hashTableAddress + 0x210) = newValue;\n  updateHashTable_0010e439(hashTableAddress,0x84,0,0,newValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "thunk_FUN_0010e439",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "update_hash_table_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_00109cf4",
                "FUN_0010e5db",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_00109d97",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010ee3f",
                "FUN_00109dfe",
                "FUN_0010a69a",
                "FUN_001125fa",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_0010554f",
                "FUN_00113ede",
                "FUN_0010e5db",
                "FUN_00104ad6",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_0010c95e",
                "FUN_00104943",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010a77a",
                "FUN_0011173a",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010a2b9",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_00115530",
                "FUN_00113fb0",
                "FUN_00109bbb",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_00108c86",
                "FUN_0010d21c",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010b0fa",
                "FUN_001125fa",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "initialize_and_assign_data_00109d3e",
                "param_1": "dataStructure",
                "param_2": "numElements",
                "uVar1": "assignedValue"
            },
            "code": "\nvoid initializeAndAssignData_00109d3e(undefined8 dataStructure,int numElements)\n\n{\n  undefined8 assignedValue;\n  \n  assignedValue = 0xfffffffffffffff0;\n  if (numElements - 1U < 8) {\n    assignedValue = *(undefined8 *)(&DAT_00121360 + (ulong)(numElements - 1U) * 8);\n  }\n  initialize_data_structure_00109cf4(dataStructure,assignedValue,numElements);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_and_assign_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_files_and_update_00112502",
                "param_1": "file_info_ptr",
                "param_2": "file_ptr",
                "param_3": "file_size",
                "uVar1": "counter",
                "puVar2": "file_info_array_ptr",
                "uVar3": "temp",
                "cVar4": "update_result"
            },
            "code": "\nundefined check_files_and_update_00112502(long file_info_ptr,undefined8 file_ptr,ulong file_size)\n\n{\n  uint counter;\n  undefined8 *file_info_array_ptr;\n  undefined8 temp;\n  char update_result;\n  \n  do {\n    file_info_array_ptr = *(undefined8 **)(file_info_ptr + 0x40);\n    if (file_info_array_ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((counter = *(uint *)(file_info_ptr + 0x48), counter < 10 && (file_info_array_ptr[(ulong)counter + 2] != -1))) {\n      if (file_size <= (ulong)file_info_array_ptr[(ulong)counter + 0xc]) {\n        return 1;\n      }\n      update_result = update_file_information_0010edb4(file_ptr,*(undefined8 *)(file_info_array_ptr[1] + 8));\n      if (update_result == '\\0') {\n        return 0;\n      }\n      *(int *)(file_info_ptr + 0x48) = *(int *)(file_info_ptr + 0x48) + 1;\n    }\n    temp = *file_info_array_ptr;\n    *(undefined4 *)(file_info_ptr + 0x48) = 0;\n    *(undefined8 *)(file_info_ptr + 0x40) = temp;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "check_files_and_update_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "parse_and_process_lines_00104cc1",
                "param_7": "message",
                "param_8": "result",
                "param_9": "line",
                "uVar1": "errorString",
                "ppbVar2": "slotPtr",
                "bVar4": "currentByte",
                "unaff_RBX": "linePtr",
                "pbVar5": "currentLine",
                "unaff_EBP": "lineNumber",
                "in_R10": "lineStart",
                "unaff_R13": "error",
                "unaff_R14": "currentLineStart",
                "unaff_R15": "currentLineEnd"
            },
            "code": "\nvoid parseAndProcessLines_00104cc1(void)\n\n{\n  undefined8 errorString;\n  byte **slotPtr;\n  byte *pbVar3;\n  byte currentByte;\n  byte *linePtr;\n  byte *currentLine;\n  int lineNumber;\n  byte *lineStart;\n  undefined8 error;\n  byte *currentLineStart;\n  byte *currentLineEnd;\n  undefined8 message;\n  undefined8 *result;\n  byte *line;\n  \ncode_r0x00104cc1:\n  line = lineStart;\n  errorString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_message_00119ed0(errorString,message,lineNumber);\n  currentLine = linePtr;\n  lineStart = line;\nLAB_00114599:\n  do {\n    *lineStart = 0;\n    if (currentLineEnd < lineStart) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = currentLineEnd;\n    }\n    lineNumber = lineNumber + 1;\n    pbVar3 = currentLine;\n    if (currentLineStart[1] == 0) {\n      *result = error;\n      return;\n    }\n    for (; currentByte = *pbVar3, currentLineStart = pbVar3, currentByte != 10; pbVar3 = pbVar3 + 1) {\n      if ((char)currentByte < '\\v') {\n        if (currentByte == 0) {\n          linePtr = pbVar3 + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (currentByte == 0xd) {\n          *pbVar3 = 0;\n          linePtr = pbVar3 + 1;\n          if (pbVar3[1] == 10) {\n            linePtr = pbVar3 + 2;\n            currentLineStart = pbVar3 + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (currentByte == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *pbVar3 = 0;\n    if (pbVar3[1] == 0xd) {\n      currentLineStart = pbVar3 + 1;\n      linePtr = pbVar3 + 2;\n    }\n    else {\n      linePtr = pbVar3 + 1;\n    }\nLAB_00114553:\n    currentByte = *currentLine;\n    currentLineEnd = currentLine;\n    while ((currentByte == 0x20 || (lineStart = currentLineEnd, currentByte == 9))) {\n      currentLine = currentLineEnd + 1;\n      currentLineEnd = currentLineEnd + 1;\n      currentByte = *currentLine;\n    }\n    do {\n      currentLine = linePtr;\n      if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n      if (currentByte == 0) goto LAB_00114599;\n      currentByte = lineStart[1];\n      lineStart = lineStart + 1;\n    } while ((currentByte != 0x20) && (currentByte != 9));\n    if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentByte & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    currentByte = lineStart[1];\n    if ((((((currentByte == 9) || (currentByte == 0x20)) && ((currentByte = lineStart[2], currentByte == 9 || (currentByte == 0x20)))\n          ) && ((currentByte = lineStart[3], currentByte == 9 || (currentByte == 0x20)))) &&\n        ((currentByte = lineStart[4], currentByte == 9 || (currentByte == 0x20)))) &&\n       ((currentByte = lineStart[5], currentByte == 9 || (currentByte == 0x20)))) {\n      currentByte = lineStart[6];\n      pbVar3 = lineStart + 6;\n      if ((currentByte == 9) || (currentByte == 0x20)) {\n        do {\n          do {\n            currentByte = pbVar3[1];\n            pbVar3 = pbVar3 + 1;\n          } while (currentByte == 0x20);\n        } while (currentByte == 9);\n      }\n    }\n    if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "dcgettext",
                "FUN_00104c36",
                "FUN_00119ed0",
                "htab_find_slot",
                "FUN_00104d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_and_process_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00109c2e",
                "FUN_0010ab4d",
                "FUN_0010e07c",
                "FUN_00114dc7",
                "FUN_0010abdd",
                "FUN_0010d7d4",
                "FUN_00119f70",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_0010b6ea",
                "FUN_0010ee3f",
                "FUN_00109be3",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_data_structure_00113bfa",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "lVar1": "data_structure_ptr",
                "plVar2": "dynamic_array_ptr"
            },
            "code": "\nlong create_data_structure_00113bfa(long input_param_1,long input_param_2)\n\n{\n  long data_structure_ptr;\n  long *dynamic_array_ptr;\n  \n  if (((input_param_1 != 0) && (input_param_2 != 0)) && (data_structure_ptr = initialize_data_structure_00112904(0x12,0), data_structure_ptr != 0)) {\n    dynamic_array_ptr = (long *)xmalloc(0x10);\n    *dynamic_array_ptr = input_param_1;\n    dynamic_array_ptr[1] = input_param_2;\n    *(long **)(data_structure_ptr + 0x10) = dynamic_array_ptr;\n    return data_structure_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "verify_output_format_00108375",
                "param_2": "input_params",
                "uVar1": "first_param_value",
                "uVar2": "error_message",
                "unaff_EBX": "modified_EBX"
            },
            "code": "\nuint verify_output_format_00108375(undefined8 param_1,undefined8 *input_params,undefined8 param_3)\n\n{\n  undefined8 first_param_value;\n  undefined8 error_message;\n  uint modified_EBX;\n  \n  if (*(int *)(input_params[1] + 8) != 2) {\n    first_param_value = *input_params;\n    modified_EBX = modified_EBX & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(error_message,first_param_value,param_3);\n  }\n  return modified_EBX;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "verify_output_format_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00104ea2",
                "FUN_00107976",
                "FUN_00105828",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_data_structure_00109e76",
                "param_1": "dataStructure",
                "param_2": "value",
                "lVar1": "currentValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateDataStructure_00109e76(long dataStructure,uint value)\n\n{\n  long currentValue;\n  char formattedString [58];\n  \n  currentValue = *(long *)(dataStructure + 0x68);\n  *(long *)(dataStructure + 0x68) = currentValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",currentValue,currentValue,(ulong)value);\n  initialize_data_structure_00109b52(dataStructure,formattedString,currentValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_data_structure_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "index",
                "lVar2": "currentEntry",
                "lVar3": "entryOffset",
                "uVar4": "duplicatedString"
            },
            "code": "\nulong updateDataEntry_001088ae(undefined4 value1,undefined4 value2,undefined8 value3,undefined8 value4)\n\n{\n  int index;\n  long currentEntry;\n  long entryOffset;\n  undefined8 duplicatedString;\n  \n  currentEntry = (long)DAT_001278a0;\n  entryOffset = currentEntry * 0x18;\n  free((void *)(&DAT_00127730)[currentEntry * 3]);\n  *(undefined4 *)(&DAT_00127720 + entryOffset) = value1;\n  *(undefined4 *)(&DAT_00127724 + entryOffset) = value2;\n  *(undefined8 *)(&DAT_00127728 + entryOffset) = value3;\n  duplicatedString = xstrdup(value4);\n  (&DAT_00127730)[currentEntry * 3] = duplicatedString;\n  index = DAT_001278a0 + 1;\n  DAT_001278a0 = index % 0x10;\n  return (long)index / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_entry_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_entry_0010afd5",
                "param_1": "entry_list",
                "param_2": "binary_data",
                "param_3": "search_string",
                "param_4": "string_length",
                "param_5": "data_type",
                "param_6": "output_data",
                "iVar1": "comparison_result",
                "__s2": "search_string_copy",
                "puVar2": "entry",
                "uVar3": "temporary_variable",
                "lVar4": "data_value",
                "puVar5": "data_entry",
                "puVar6": "data_type_entry",
                "bVar7": "iteration_variable",
                "auVar8": "result"
            },
            "code": "\nundefined  [16]\nfind_string_entry_0010afd5(undefined8 *entry_list,long binary_data,undefined8 search_string,undefined4 string_length,\n            undefined4 data_type,undefined8 output_data)\n\n{\n  int comparison_result;\n  char *search_string_copy;\n  undefined8 *entry;\n  undefined8 temporary_variable;\n  long data_value;\n  undefined8 *data_entry;\n  undefined4 *data_type_entry;\n  byte iteration_variable;\n  undefined result [16];\n  \n  iteration_variable = 0;\n  search_string_copy = (char *)copy_and_terminate_string_00109a0b(search_string,string_length);\n  for (entry_list = (undefined8 *)*entry_list; entry_list != (undefined8 *)0x0;\n      entry_list = (undefined8 *)*entry_list) {\n    for (entry = (undefined8 *)entry_list[1]; entry != (undefined8 *)0x0;\n        entry = (undefined8 *)*entry) {\n      if ((undefined8 *)entry[2] != (undefined8 *)0x0) {\n        for (data_entry = *(undefined8 **)(undefined8 *)entry[2]; data_entry != (undefined8 *)0x0;\n            data_entry = (undefined8 *)*data_entry) {\n          if ((*(int *)((long)data_entry + 0x14) == 1) && (*(char *)data_entry[1] == *search_string_copy)) {\n            comparison_result = strcmp((char *)data_entry[1],search_string_copy);\n            if (comparison_result == 0) {\n              data_value = data_entry[4];\n              if (data_value == 0) goto LAB_0010b05b;\n              free(search_string_copy);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  entry = *(undefined8 **)(binary_data + 0x1a0);\n  do {\n    if (entry == (undefined8 *)0x0) {\n      entry = (undefined8 *)xmalloc(0x28);\n      temporary_variable = *(undefined8 *)(binary_data + 0x1a0);\n      data_type_entry = (undefined4 *)((long)entry + 0x14);\n      for (data_value = 5; data_value != 0; data_value = data_value + -1) {\n        *data_type_entry = 0;\n        data_type_entry = data_type_entry + (ulong)iteration_variable * -2 + 1;\n      }\n      *(undefined4 *)(entry + 2) = data_type;\n      *entry = temporary_variable;\n      entry[1] = search_string_copy;\n      temporary_variable = create_data_structure_00113e23(entry + 3,search_string_copy);\n      *(undefined8 **)(binary_data + 0x1a0) = entry;\n      entry[4] = temporary_variable;\nLAB_0010b0e7:\n      data_value = entry[4];\nLAB_0010b0eb:\n      result._8_8_ = output_data;\n      result._0_8_ = data_value;\n      return result;\n    }\n    if (*(char *)entry[1] == *search_string_copy) {\n      comparison_result = strcmp((char *)entry[1],search_string_copy);\n      if (comparison_result == 0) {\n        if (*(int *)(entry + 2) == 0) {\n          *(undefined4 *)(entry + 2) = data_type;\n        }\n        free(search_string_copy);\n        goto LAB_0010b0e7;\n      }\n    }\n    entry = (undefined8 *)*entry;\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "free",
                "xmalloc",
                "FUN_00113e23",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "find_string_entry_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = validate_string_to_ulong_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)process_data_type_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = process_file_number_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)create_data_structure_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = validate_string_to_ulong_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_data_structure_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)process_file_number_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)process_file_number_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)initialize_and_store_data_structure_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_bad_stab_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)process_debug_info_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)initialize_and_store_data_structure_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_data_structure_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_or_get_data_structure_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_data_structure_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_data_structure_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_data_structure_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_structure_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = validate_string_to_ulong_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = update_data_structure_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_bad_stab_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)initialize_and_store_data_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)update_data_structure_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_data_structure_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_bad_stab_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_terminate_string_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_bad_stab_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)create_data_structure_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_structure_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_structure_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = validate_string_to_ulong_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = validate_and_convert_string_to_ulong_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = validate_and_convert_string_to_ulong_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)update_data_structure_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)update_data_structure_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_data_structure_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_bad_stab_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = process_data_type_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_00108fe8(pbVar27,uVar15);\n                lVar38 = update_data_structure_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_data_structure_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)update_data_structure_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_data_structure_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)update_data_structure_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)update_data_structure_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)update_data_structure_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)update_data_structure_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)update_data_structure_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = string_comparison_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = string_comparison_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = string_comparison_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)update_data_structure_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)update_data_structure_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_bad_stab_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)get_return_value_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_bad_stab_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_bad_stab_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_terminate_string_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_bad_stab_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_bad_stab_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_terminate_string_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_terminate_string_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_terminate_string_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)process_debug_info_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)process_debug_info_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_terminate_string_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = process_data_type_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)process_debug_info_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = string_comparison_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = demangle_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = decode_and_extract_data_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = expand_and_add_to_data_array_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_and_extract_data_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = expand_and_add_to_data_array_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = extract_integer_from_byte_array_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = expand_and_add_to_data_array_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = parse_and_add_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = parse_and_add_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = parse_and_add_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = parse_and_add_data_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)initialize_and_store_data_structure_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = validate_type_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = validate_type_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = string_comparison_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = string_comparison_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)initialize_and_store_data_structure_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = validate_and_convert_string_to_ulong_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = validate_string_to_ulong_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_bad_stab_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_data_structure_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_data_structure_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_bad_stab_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_string_entry_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)process_file_number_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_bad_stab_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "cplus_demangle_init_info",
                "FUN_00108fe8",
                "FUN_00113d3a",
                "FUN_00108e76",
                "strchr",
                "concat",
                "FUN_00113fb0",
                "strcmp",
                "FUN_00113b98",
                "strlen",
                "fprintf",
                "FUN_001129f4",
                "FUN_00109ab1",
                "FUN_00113ce0",
                "FUN_00113c43",
                "FUN_00108fb9",
                "FUN_00109022",
                "FUN_00113b71",
                "FUN_0010911f",
                "FUN_0010d559",
                "strncmp",
                "FUN_0010ee3f",
                "FUN_00112b6e",
                "FUN_00109be3",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113cb9",
                "strstr",
                "FUN_00112904",
                "FUN_0010c2d2",
                "xmalloc",
                "malloc",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "xrealloc",
                "strspn",
                "FUN_0010afd5",
                "sprintf",
                "FUN_00109a32",
                "cplus_demangle_mangled_name",
                "strcpy",
                "dcgettext",
                "FUN_0010914e",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strtol",
                "FUN_00113b4a",
                "FUN_0010b6ea",
                "strcat",
                "FUN_0010d882",
                "free",
                "FUN_00113df2",
                "FUN_00113e5e"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_001199d0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "param_1": "data",
                "param_2": "error_message",
                "param_3": "return_value",
                "__format": "format_string",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "ptr_stab",
                "iVar5": "iteration_count"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 data,undefined8 error_message,undefined8 return_value)\n\n{\n  char *format_string;\n  long stab_name;\n  long index;\n  long offset;\n  int *ptr_stab;\n  int iteration_count;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  iteration_count = DAT_001278a0;\n  do {\n    index = (long)iteration_count;\n    offset = index * 0x18;\n    ptr_stab = (int *)(&DAT_00127720 + offset);\n    if ((&DAT_00127730)[index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*ptr_stab);\n      if (stab_name == 0) {\n        if (*ptr_stab == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stab_name);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127728 + offset));\n      if (*ptr_stab != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127730)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    iteration_count = (iteration_count + 1) % 0x10;\n  } while (DAT_001278a0 != iteration_count);\n  return return_value;\n}\n\n",
            "called": [
                "fputc",
                "fprintf",
                "dcgettext",
                "fwrite",
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "process_data_0010a083",
                "param_1": "input"
            },
            "code": "\nvoid process_data_0010a083(long input)\n\n{\n  process_data_0010a083_00109ed3(input,0x2a,4,input + 0x178,input + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "param_1": "arrayPtr",
                "param_2": "newValue",
                "param_3": "arraySize",
                "param_4": "flag",
                "param_5": "resultPtr",
                "param_6": "inputValue",
                "lVar1": "currentValue",
                "plVar2": "newPtr",
                "lVar3": "offset",
                "puVar4": "initPtr",
                "uVar5": "maxSize",
                "bVar6": "initFlag",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nresizeAndInitializeArray_00109c2e(long arrayPtr,long newValue,ulong arraySize,int flag,undefined4 *resultPtr,\n            undefined8 inputValue)\n\n{\n  long currentValue;\n  long *newPtr;\n  long offset;\n  undefined *initPtr;\n  ulong maxSize;\n  byte initFlag;\n  undefined returnValue [16];\n  \n  initFlag = 0;\n  arraySize = arraySize & 0xffffffff;\n  maxSize = *(ulong *)(arrayPtr + 0x1b0);\n  if (maxSize <= arraySize) {\n    if (maxSize == 0) {\n      maxSize = 10;\n    }\n    for (; maxSize <= arraySize; maxSize = maxSize * 2) {\n    }\n    currentValue = xrealloc(*(undefined8 *)(arrayPtr + 0x1a8),maxSize * 0x18);\n    *(long *)(arrayPtr + 0x1a8) = currentValue;\n    initPtr = (undefined *)(*(long *)(arrayPtr + 0x1b0) * 0x18 + currentValue);\n    for (offset = (maxSize - *(long *)(arrayPtr + 0x1b0)) * 0x18; offset != 0; offset = offset + -1) {\n      *initPtr = 0;\n      initPtr = initPtr + (ulong)initFlag * -2 + 1;\n    }\n    *(ulong *)(arrayPtr + 0x1b0) = maxSize;\n  }\n  newPtr = (long *)(arraySize * 0x18 + *(long *)(arrayPtr + 0x1a8));\n  if (*newPtr == 0) {\n    currentValue = *(long *)(arrayPtr + 0x68);\n    *newPtr = currentValue;\n    *(long *)(arrayPtr + 0x68) = currentValue + 1;\n    newPtr[1] = newValue;\n    *(int *)(newPtr + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(newPtr + 2) = 0;\n    *(undefined4 *)((long)newPtr + 0x14) = *resultPtr;\n  }\n  else {\n    *resultPtr = *(undefined4 *)((long)newPtr + 0x14);\n  }\n  returnValue._8_8_ = inputValue;\n  returnValue._0_8_ = *newPtr;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_00109d5c",
                "FUN_0010a69a"
            ],
            "imported": false,
            "current_name": "resize_and_initialize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "format_error_and_exit_001053b5",
                "uVar1": "errorString"
            },
            "code": "\nvoid formatErrorAndExit_001053b5(void)\n\n{\n  undefined8 errorString;\n  \n  errorString = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_and_exit_error_00119dd0(errorString);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "format_error_and_exit_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "initialize_memory_00112996",
                "param_1": "memoryBlock",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "address",
                "initialize_memory_00112925": "initializeMemoryHelper",
                "dcgettext": "getErrorMessage",
                "_stderr": "errorOutput"
            },
            "code": "\n\n\nundefined8 initializeMemory_00112996(long memoryBlock,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long address;\n  \n  if ((*(long *)(memoryBlock + 8) != 0) && (*(long *)(memoryBlock + 0x10) != 0)) {\n    address = *(long *)(memoryBlock + 0x10) + 0x10;\n    if (*(long *)(memoryBlock + 0x20) != 0) {\n      address = *(long *)(memoryBlock + 0x20) + 0x28;\n    }\n    result = initializeMemory_00112996Helper(address,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(errorOutput,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "result",
                "uVar2": "num",
                "lVar3": "ptr",
                "piVar4": "ptr1",
                "__s1": "str1",
                "cVar5": "result2",
                "iVar6": "var",
                "puVar7": "ptr2",
                "auVar8": "result3"
            },
            "code": "\nundefined  [16] setClassId_0010c7a0(long arg1,char *arg2,int *arg3,undefined8 arg4)\n\n{\n  undefined8 result;\n  uint num;\n  long ptr;\n  int *ptr1;\n  char *str1;\n  char result2;\n  int var;\n  undefined8 *ptr2;\n  undefined result3 [16];\n  \n  if (3 < *arg3 - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  ptr = *(long *)(arg3 + 4);\n  ptr2 = (undefined8 *)(ulong)*(uint *)(ptr + 0xc);\n  if (*(uint *)(ptr + 0xc) <= *(uint *)(arg1 + 0x38)) {\n    for (ptr2 = *(undefined8 **)(arg1 + 0x50); ptr2 != (undefined8 *)0x0;\n        ptr2 = (undefined8 *)*ptr2) {\n      ptr1 = (int *)ptr2[1];\n      if (*ptr1 == *arg3) {\n        str1 = (char *)ptr2[2];\n        if (arg2 == (char *)0x0) {\n          if (str1 == (char *)0x0) {\nLAB_0010c82c:\n            result2 = check_equality_0010922b(arg1,ptr1,arg3);\n            if (result2 != '\\0') {\n              num = *(uint *)(*(long *)(ptr2[1] + 0x10) + 0xc);\n              ptr2 = (undefined8 *)(ulong)num;\n              *(uint *)(ptr + 0xc) = num;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((str1 != (char *)0x0) && (*str1 == *arg2)) &&\n                (var = strcmp(str1,arg2), var == 0)) goto LAB_0010c82c;\n      }\n    }\n    var = *(int *)(arg1 + 0x34) + 1;\n    *(int *)(arg1 + 0x34) = var;\n    *(int *)(ptr + 0xc) = var;\n    ptr2 = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(arg1 + 0x50);\n    ptr2[2] = arg2;\n    *(undefined8 **)(arg1 + 0x50) = ptr2;\n    *ptr2 = result;\n    ptr2[1] = arg3;\n  }\nLAB_0010c884:\n  result3._1_7_ = (undefined7)((ulong)ptr2 >> 8);\n  result3[0] = 1;\n  result3._8_8_ = arg4;\n  return result3;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_0010922b",
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "set_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "param1",
                "param_2": "list1",
                "param_3": "list2",
                "uVar1": "type1",
                "uVar2": "type2",
                "pplVar3": "ptrList1",
                "ppcVar4": "ptrCharPtr1",
                "ppcVar5": "ptrCharPtr2",
                "lVar6": "length1",
                "lVar7": "length2",
                "lVar8": "length3",
                "pcVar9": "charPtr1",
                "pcVar10": "charPtr2",
                "cVar11": "result",
                "bVar12": "isEqual",
                "iVar13": "comparisonResult",
                "uVar14": "debugInfo1",
                "uVar15": "debugInfo2",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "plVar18": "ptrList1",
                "lVar19": "offset",
                "plVar20": "ptrList2",
                "plVar21": "ptrList1",
                "lVar22": "baseAddress",
                "local_70": "localList",
                "local_58": "debugInfoList",
                "plStack_50": "ptrStack",
                "local_48": "localList2"
            },
            "code": "\nbyte checkEquality_0010922b(long param1,long *list1,long *list2)\n\n{\n  uint type1;\n  uint type2;\n  long **ptrList1;\n  char **ptrCharPtr1;\n  char **ptrCharPtr2;\n  long length1;\n  long length2;\n  long length3;\n  char *charPtr1;\n  char *charPtr2;\n  char result;\n  byte isEqual;\n  int comparisonResult;\n  undefined8 debugInfo1;\n  undefined8 debugInfo2;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *ptrList1;\n  long offset;\n  long *ptrList2;\n  long *ptrList1;\n  long baseAddress;\n  long *localList;\n  undefined8 *debugInfoList;\n  long *ptrStack;\n  long *localList2;\n  \n  ptrList1 = list2;\n  if (list1 == (long *)0x0) {\nLAB_00109241:\n    return list2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptrList1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    type1 = *(uint *)list1;\n    if (type1 == 1) goto code_r0x00109263;\n    while (type2 = *(uint *)list2, type2 == 1) {\n      list2 = **(long ***)list2[2];\n      if (list2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (list1 == list2) {\n      return true;\n    }\n    if (type1 != 0x16) break;\n    if (type2 != 0x17) goto LAB_001092cb;\n    list1 = *(long **)(list1[2] + 8);\n    if (list1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((type1 == 0x17) && (type2 == 0x16)) {\n    list2 = *(long **)(list2[2] + 8);\n    ptrList1 = list2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*list1 != *list2) {\n    return false;\n  }\n  if (type1 == 3) {\n    return *(char *)(list1 + 2) == *(char *)(list2 + 2);\n  }\n  if (type1 < 4) {\n    if (type1 == 2) {\n      return true;\n    }\n  }\n  else if (type1 - 4 < 3) {\n    return true;\n  }\n  debugInfoList = *(undefined8 **)(param1 + 0x58);\n  for (ptr2 = debugInfoList; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == list1) && ((long *)ptr2[2] == list2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &debugInfoList;\n  ptrStack = list1;\n  localList2 = list2;\n  switch(type1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptrList1 = (long *)list1[2];\n    ptrList1 = (long **)list2[2];\n    if (ptrList1 == (long *)0x0) {\n      isEqual = ptrList1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrList1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)ptrList1 + 0xc)) &&\n       (*(uint *)((long)ptrList1 + 0xc) == *(uint *)((long)ptrList1 + 0xc))) goto LAB_001097af;\n    ptr2 = (undefined8 *)*ptrList1;\n    localList = *ptrList1;\n    if (((ptr2 == (undefined8 *)0x0) == (localList == (long *)0x0)) &&\n       ((((ptrList1[2] == 0) == (ptrList1[2] == (long *)0x0) &&\n         ((ptrList1[3] == 0) == (ptrList1[3] == (long *)0x0))) &&\n        ((ptrList1[4] == 0) == (ptrList1[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptrList1[4] != 0) &&\n           (result = checkEquality_0010922b(param1,ptrList1[4],ptrList1[4]), result == '\\0'))\n        goto LAB_00109382;\n        ptrList1 = (long *)ptrList1[2];\n        if (ptrList1 == (long *)0x0) {\nLAB_00109540:\n          ptr2 = (undefined8 *)ptrList1[3];\n          if (ptr2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptrList1 = ptrList1[3];\n          while( true ) {\n            ptrCharPtr2 = (char **)*ptr2;\n            if (ptrCharPtr2 == (char **)0x0) {\n              isEqual = *ptrList1 == 0;\n              goto LAB_001099c4;\n            }\n            ptrCharPtr1 = (char **)*ptrList1;\n            if (ptrCharPtr1 == (char **)0x0) break;\n            if ((**ptrCharPtr2 != **ptrCharPtr1) || (comparisonResult = strcmp(*ptrCharPtr2,*ptrCharPtr1), comparisonResult != 0))\n            break;\n            charPtr1 = ptrCharPtr2[1];\n            charPtr2 = ptrCharPtr1[1];\n            if ((charPtr1 == (char *)0x0) != (charPtr2 == (char *)0x0)) break;\n            if (charPtr1 != (char *)0x0) {\n              baseAddress = 0;\n              while( true ) {\n                ptrCharPtr2 = *(char ***)(charPtr1 + baseAddress);\n                ptrCharPtr1 = *(char ***)(charPtr2 + baseAddress);\n                if (ptrCharPtr2 == (char **)0x0) break;\n                if (ptrCharPtr1 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptrCharPtr2 != **ptrCharPtr1) ||\n                     ((((ulong)ptrCharPtr2[2] ^ (ulong)ptrCharPtr1[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptrCharPtr2[3] != ptrCharPtr1[3] ||\n                     ((((ptrCharPtr2[4] == (char *)0x0) != (ptrCharPtr1[4] == (char *)0x0) ||\n                       (comparisonResult = strcmp(*ptrCharPtr2,*ptrCharPtr1), comparisonResult != 0)) ||\n                      (result = checkEquality_0010922b(param1,ptrCharPtr2[1],ptrCharPtr1[1]), result == '\\0')))))) ||\n                   ((ptrCharPtr2[4] != (char *)0x0 &&\n                    (result = checkEquality_0010922b(param1,ptrCharPtr2[4],ptrCharPtr1[4]), result == '\\0'))))\n                goto LAB_00109382;\n                baseAddress = baseAddress + 8;\n              }\n              if (ptrCharPtr1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr2 = ptr2 + 1;\n            ptrList1 = ptrList1 + 1;\n          }\n        }\n        else {\n          ptrList2 = ptrList1[2];\n          for (; ptr2 = (undefined8 *)*ptrList1, ptr2 != (undefined8 *)0x0;\n              ptrList1 = ptrList1 + 1) {\n            ptr1 = (undefined8 *)*ptrList2;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (result = checkEquality_0010922b(param1,*ptr2,*ptr1), result == '\\0'))\n            goto LAB_00109382;\n            ptrList2 = ptrList2 + 1;\n          }\n          if (*ptrList2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptrCharPtr2 = (char **)*ptr2, ptrCharPtr2 != (char **)0x0; ptr2 = ptr2 + 1) {\n          ptrCharPtr1 = (char **)*localList;\n          if (ptrCharPtr1 == (char **)0x0) goto LAB_00109382;\n          charPtr1 = *ptrCharPtr1;\n          charPtr2 = *ptrCharPtr2;\n          if ((*charPtr2 != *charPtr1) ||\n             ((((ulong)ptrCharPtr2[2] ^ (ulong)ptrCharPtr1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptrCharPtr2 + 0x14) == '\\0') {\n            if (ptrCharPtr2[3] == ptrCharPtr1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparisonResult = strcmp(ptrCharPtr2[3],ptrCharPtr1[3]);\n          if (comparisonResult != 0) goto LAB_00109382;\nLAB_00109480:\n          comparisonResult = strcmp(charPtr2,charPtr1);\n          if (((comparisonResult != 0) || (ptrCharPtr2[1] == (char *)0x0)) || (ptrCharPtr1[1] == (char *)0x0))\n          goto LAB_00109382;\n          debugInfo1 = process_debug_info_00112b6e(ptrCharPtr1[1],0);\n          debugInfo2 = process_debug_info_00112b6e(ptrCharPtr2[1],0);\n          result = checkEquality_0010922b(param1,debugInfo2,debugInfo1);\n          if (result == '\\0') goto LAB_00109382;\n          localList = localList + 1;\n        }\n        if (*localList == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptrList1 = (long *)list1[2];\n    ptrList1 = (long *)list2[2];\n    if (ptrList1 == (long *)0x0) {\n      isEqual = ptrList1 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrList1 == (long *)0x0) goto LAB_00109382;\n    baseAddress = *ptrList1;\n    length1 = *ptrList1;\n    offset = 0;\n    length2 = ptrList1[1];\n    length3 = ptrList1[1];\n    do {\n      charPtr1 = *(char **)(baseAddress + offset);\n      if (charPtr1 == (char *)0x0) {\n        isEqual = *(long *)(length1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      charPtr2 = *(char **)(length1 + offset);\n      if (((charPtr2 == (char *)0x0) || (*charPtr1 != *charPtr2)) ||\n         (*(long *)(length2 + offset) != *(long *)(length3 + offset))) break;\n      comparisonResult = strcmp(charPtr1,charPtr2);\n      offset = offset + 8;\n    } while (comparisonResult == 0);\nLAB_00109964:\n    isEqual = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    isEqual = checkEquality_0010922b(param1,list1[2],list2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)list1[2] + 2) == *(char *)((undefined8 *)list2[2] + 2)) &&\n       (result = checkEquality_0010922b(param1,*(undefined8 *)list1[2],*(undefined8 *)list2[2]),\n       result != '\\0')) {\n      ptrList1 = *(long **)(list1[2] + 8);\n      ptrList1 = *(long **)(list2[2] + 8);\n      if ((ptrList1 == (long *)0x0) == (ptrList1 == (long *)0x0)) {\n        if (ptrList1 == (long *)0x0) goto LAB_001097af;\n        while (((*ptrList1 != 0 && (*ptrList1 != 0)) &&\n               (result = checkEquality_0010922b(param1), result != '\\0'))) {\n          ptrList1 = ptrList1 + 1;\n          ptrList1 = ptrList1 + 1;\n        }\nLAB_0010995d:\n        if (*ptrList1 != 0) goto LAB_00109964;\n        isEqual = *ptrList1 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr2 = (undefined8 *)list2[2];\n    ptr1 = (undefined8 *)list1[2];\n    isEqual = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nLAB_00109862:\n      isEqual = checkEquality_0010922b(param1,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)list2[2];\n    ptr1 = (undefined8 *)list1[2];\n    isEqual = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)list2[2];\n    ptr1 = (undefined8 *)list1[2];\n    isEqual = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = checkEquality_0010922b(param1,*(undefined8 *)list1[2],*(undefined8 *)list2[2]);\n    isEqual = 0;\n    if (result != '\\0') {\n      isEqual = checkEquality_0010922b(param1,*(undefined8 *)(list1[2] + 8),*(undefined8 *)(list2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)list1[2] + 3) == *(char *)((undefined8 *)list2[2] + 3)) &&\n        (result = checkEquality_0010922b(param1,*(undefined8 *)list1[2],*(undefined8 *)list2[2]),\n        result != '\\0')) &&\n       (result = checkEquality_0010922b(param1,*(undefined8 *)(list1[2] + 8),\n                              *(undefined8 *)(list2[2] + 8)), result != '\\0')) {\n      ptrList1 = *(long **)(list1[2] + 0x10);\n      ptrList1 = *(long **)(list2[2] + 0x10);\n      if ((ptrList1 == (long *)0x0) == (ptrList1 == (long *)0x0)) {\n        if (ptrList1 != (long *)0x0) {\n          while (((*ptrList1 != 0 && (*ptrList1 != 0)) &&\n                 (result = checkEquality_0010922b(param1), result != '\\0'))) {\n            ptrList1 = ptrList1 + 1;\n            ptrList1 = ptrList1 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        isEqual = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    isEqual = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptrList1 = (long *)list2[2];\n    ptrList1 = (long *)list1[2];\n    comparisonResult = strcmp(*(char **)(*ptrList1 + 8),*(char **)(*ptrList1 + 8));\n    isEqual = 0;\n    if (comparisonResult == 0) {\n      isEqual = checkEquality_0010922b(param1,ptrList1[1],ptrList1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  isEqual = isEqual & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = debugInfoList;\n  return isEqual;\ncode_r0x00109263:\n  list1 = **(long ***)list1[2];\n  ptrList1 = list1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_0010922b",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archived_files_001052a2",
                "cVar1": "flag",
                "iVar2": "result",
                "iVar3": "statResult",
                "ppcVar4": "fileNames",
                "lVar5": "bytesRead",
                "uVar6": "formatString",
                "__format": "errorFormatString",
                "puVar7": "tempDirInfo",
                "piVar8": "errorNumber",
                "uVar9": "errorMessage",
                "in_RAX": "fileLength",
                "pcVar10": "fileName",
                "ppcVar11": "archivedFiles",
                "lVar12": "fileSize",
                "pvVar13": "buffer",
                "pcVar14": "closeFunction",
                "lVar15": "bytesToRead",
                "pcVar16": "currentChar",
                "psVar17": "statBuffer",
                "unaff_R14": "tempDirResult",
                "unaff_R15": "archivedFileResult",
                "bVar18": "tempFlag",
                "unaff_retaddr": "returnAddress",
                "in_stack_00000008": "srcFilePath",
                "in_stack_00000010": "fileDescriptor",
                "in_stack_00000018": "tempDirPath",
                "in_stack_00000020": "archivedFile",
                "in_stack_00000028": "copyFlag",
                "in_stack_00000030": "useCopyFlag",
                "in_stack_000000f8": "permissionFlag",
                "in_stack_00000110": "totalFileSize"
            },
            "code": "\nvoid extractAndCopyArchivedFiles_001052a2(undefined8 param_1,undefined8 param_2,char *param_3)\n\n{\n  char flag;\n  int result;\n  int statResult;\n  char **fileNames;\n  long bytesRead;\n  undefined8 formatString;\n  char *errorFormatString;\n  undefined8 *tempDirInfo;\n  int *errorNumber;\n  undefined8 errorMessage;\n  long fileLength;\n  char *fileName;\n  char **archivedFiles;\n  long fileSize;\n  void *buffer;\n  code *closeFunction;\n  long bytesToRead;\n  char *currentChar;\n  stat *statBuffer;\n  undefined8 *tempDirResult;\n  char **archivedFileResult;\n  byte tempFlag;\n  undefined8 returnAddress;\n  undefined8 *srcFilePath;\n  long *fileDescriptor;\n  char *tempDirPath;\n  undefined8 *archivedFile;\n  undefined8 copyFlag;\n  undefined8 useCopyFlag;\n  uint permissionFlag;\n  long totalFileSize;\n  \n  tempFlag = 0;\n  fileName = (char *)(fileLength + 1);\n  do {\n    if (*fileName == '/') {\n      extractAndCopyArchivedFiles_001052a2();\n      return;\n    }\n    while (*fileName == '\\0') {\n      fileName = (char *)concat(tempDirPath,&DAT_0011b47d);\n      statResult = stat(fileName,(stat *)&stack0x00000050);\n      tempDirInfo = tempDirResult;\n      if (-1 < statResult) {\n        fileSize = create_temp_directory_0011a0e0(fileName);\n        free(fileName);\n        if (fileSize == 0) {\n          errorNumber = __errno_location();\n          fileName = strerror(*errorNumber);\n          errorMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(errorMessage,fileName);\n          goto LAB_00104e93;\n        }\n        tempDirInfo = (undefined8 *)xmalloc(0x18);\n        fileName = *archivedFileResult;\n        *tempDirInfo = tempDirResult;\n        tempDirInfo[2] = 0;\n        tempDirInfo[1] = fileSize;\n        fileName = (char *)concat(fileSize,&DAT_0011b47d,fileName);\n      }\n      statResult = 0;\n      if (DAT_001279cb != '\\0') {\n        statBuffer = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&statBuffer->st_dev = 0;\n          statBuffer = (stat *)((long)statBuffer + (ulong)tempFlag * -8 + 4);\n        }\n        archivedFiles = (char **)archivedFileResult[0x1d];\n        if ((char **)archivedFileResult[0x1d] == (char **)0x0) {\n          archivedFiles = archivedFileResult;\n        }\n        statResult = (**(code **)(archivedFiles[1] + 0x1e8))(archivedFileResult,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          currentChar = *archivedFileResult;\n          errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(errorMessage,currentChar);\n        }\n      }\n      tempDirResult = (undefined8 *)xmalloc(0x18);\n      tempDirResult[1] = fileName;\n      *tempDirResult = tempDirInfo;\n      tempDirResult[2] = 0;\n      flag = bfd_check_format(archivedFileResult,1);\n      if (flag == '\\0') {\n        errorMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_error_message_001126c0(0,archivedFileResult,0,errorMessage);\n        archivedFiles = (char **)bfd_openw(fileName,copyFlag);\n        if (archivedFiles == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        fileNames = (char **)archivedFileResult[0x1d];\n        if ((char **)archivedFileResult[0x1d] == (char **)0x0) {\n          fileNames = archivedFileResult;\n        }\n        result = (**(code **)(fileNames[1] + 0x1e8))(archivedFileResult,&stack0x000000e0);\n        fileSize = totalFileSize;\n        if (result == 0) {\n          if (totalFileSize < 0) {\n            errorMessage = get_modified_filename_001125fa(archivedFileResult);\n            formatString = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_message_00119ed0(formatString,errorMessage);\n          }\n          else {\n            result = bfd_seek(archivedFileResult,0,0);\n            if (result == 0) {\n              if (DAT_001279c9 != '\\0') {\n                currentChar = *archivedFiles;\n                errorMessage = get_modified_filename_001125fa(archivedFileResult);\n                errorFormatString = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(errorFormatString,errorMessage,currentChar);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - bytesToRead) {\n                bytesToRead = 0x2000;\n                if (fileSize < 0x2001) {\n                  bytesToRead = fileSize;\n                }\n                bytesRead = bfd_bread(buffer,bytesToRead,archivedFileResult);\n                fileNames = archivedFileResult;\n                if ((bytesToRead != bytesRead) ||\n                   (bytesRead = bfd_bwrite(buffer,bytesToRead,archivedFiles), fileNames = archivedFiles, bytesToRead != bytesRead\n                   )) {\n                  print_error_message_001126c0(0,fileNames,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*archivedFiles,permissionFlag | 0x100);\n              free(buffer);\n              flag = bfd_close_all_done(archivedFiles);\n              if (flag == '\\0') {\n                print_error_message_001126c0(fileName,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorMessage = get_modified_filename_001125fa(archivedFileResult);\n            print_error_0011a110(errorMessage);\n          }\n        }\n        else {\n          print_error_message_001126c0(0,archivedFileResult,0,0);\n        }\nLAB_00104f00:\n        flag = bfd_close_all_done(archivedFiles);\n        if (flag == '\\0') {\n          print_error_message_001126c0(fileName,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(fileName);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (useCopyFlag._7_1_ == '\\0') {\n          archivedFiles = (char **)bfd_openw(fileName,*(undefined8 *)archivedFileResult[1]);\n        }\n        else {\n          archivedFiles = (char **)bfd_openw(fileName,copyFlag);\n        }\n        if (archivedFiles == (char **)0x0) {\nLAB_00104e80:\n          print_error_message_001126c0(fileName,0,0,0);\n          goto LAB_00104e93;\n        }\n        flag = FUNC_00114e50(archivedFileResult,archivedFiles,returnAddress);\n        if (flag == '\\0') {\n          result = bfd_get_arch(archivedFileResult);\n          if (result == 0) goto LAB_00104d75;\n          flag = bfd_close_all_done(archivedFiles);\n          if (flag == '\\0') {\n            print_error_message_001126c0(fileName,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        flag = bfd_close(archivedFiles);\n        if (flag == '\\0') {\n          print_error_message_001126c0(fileName,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (statResult == 0)) {\n          set_time_0011a350(fileName,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(fileName,copyFlag);\n        tempDirResult[2] = fileSize;\n        *fileDescriptor = fileSize;\n        fileDescriptor = (long *)(fileSize + 0xf0);\n        archivedFiles = (char **)bfd_openr_next_archived_file(archivedFile,archivedFileResult);\n        bfd_close(archivedFileResult);\n        archivedFileResult = archivedFiles;\n      }\n      if ((DAT_00127a20 != 0) || (archivedFileResult == (char **)0x0)) {\n        *fileDescriptor = 0;\n        buffer = (void *)xstrdup(*srcFilePath);\n        if (DAT_00127a20 == 0) {\n          closeFunction = bfd_close;\n        }\n        else {\n          closeFunction = bfd_close_all_done;\n        }\n        flag = (*closeFunction)(srcFilePath);\n        if (flag == '\\0') {\n          DAT_00127a20 = 1;\n          print_error_message_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*archivedFile);\n        flag = bfd_close(archivedFile);\n        if (flag == '\\0') {\n          DAT_00127a20 = 1;\n          print_error_message_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      fileName = *archivedFileResult;\n      param_3 = fileName;\n      if (*fileName == '/') goto LAB_0010527d;\n    }\n    currentChar = fileName;\n    if ((*fileName == '.') && (currentChar = fileName + 1, fileName[1] == '.')) {\n      currentChar = fileName + 2;\n      if ((fileName[2] == '\\0') || (fileName[2] == '/')) {\nLAB_0010527d:\n        errorMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(errorMessage,param_3);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (tempDirResult != (undefined8 *)0x0) {\n          if (tempDirResult[2] == 0) {\n            rmdir((char *)tempDirResult[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)tempDirResult[1]);\n          }\n          free((void *)tempDirResult[1]);\n          tempDirInfo = (undefined8 *)*tempDirResult;\n          free(tempDirResult);\n          tempDirResult = tempDirInfo;\n        }\n        rmdir(tempDirPath);\n        free(tempDirPath);\n        return;\n      }\n    }\n    for (; (fileName = currentChar, *currentChar != '\\0' && (*currentChar != '/')); currentChar = currentChar + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archived_files_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "initialize_and_update_data_0010e453",
                "param_1": "data_structure",
                "param_2": "input",
                "param_3": "input_list",
                "lVar1": "temp",
                "cVar2": "result",
                "sVar3": "length",
                "__s": "formatted_string",
                "uVar4": "return_value",
                "lVar5": "counter",
                "ppcVar6": "input_ptr",
                "lVar7": "offset"
            },
            "code": "\nundefined8 initialize_and_update_data_0010e453(long data_structure,char *input,char **input_list)\n\n{\n  long temp;\n  char result;\n  size_t length;\n  undefined2 *formatted_string;\n  undefined8 return_value;\n  long counter;\n  char **input_ptr;\n  long offset;\n  \n  if (input_list == (char **)0x0) {\n    if (input != (char *)0x0) {\n      length = strlen(input);\n      formatted_string = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)formatted_string,\"xe%s:\",input);\nLAB_0010e578:\n      result = initialize_data_structure_00109b52(data_structure,formatted_string,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    return_value = 0;\n  }\n  else {\n    counter = 10;\n    input_ptr = input_list;\n    if (input != (char *)0x0) {\n      length = strlen(input);\n      counter = length + 10;\n    }\n    for (; *input_ptr != (char *)0x0; input_ptr = input_ptr + 1) {\n      length = strlen(*input_ptr);\n      counter = counter + 0x14 + length;\n    }\n    formatted_string = (undefined2 *)xmalloc(counter);\n    if (input == (char *)0x0) {\n      *formatted_string = 0x65;\n      counter = 0;\n    }\n    else {\n      counter = *(long *)(data_structure + 0x68);\n      *(long *)(data_structure + 0x68) = counter + 1;\n      sprintf((char *)formatted_string,\"%s:T%ld=e\",input,counter);\n    }\n    offset = 0;\n    while( true ) {\n      temp = *(long *)((long)input_list + offset);\n      length = strlen((char *)formatted_string);\n      if (temp == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formatted_string + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_string + length) = 0x3b;\n    if (input == (char *)0x0) goto LAB_0010e578;\n    result = update_hash_table_0010e2f0(data_structure,0x80,0,0,formatted_string);\n    if ((result == '\\0') || (result = initialize_data_structure_00109cf4(data_structure,counter,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formatted_string);\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b52",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_and_update_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "initialize_data_structure_00109d5c",
                "param_1": "inputData",
                "lVar1": "arraySize",
                "uVar2": "result"
            },
            "code": "\nundefined8 initializeDataStructure_00109d5c(undefined8 inputData)\n\n{\n  long arraySize;\n  undefined8 result;\n  \n  arraySize = resize_and_initialize_array_00109c2e();\n  if (-1 < arraySize) {\n    result = initialize_data_structure_00109cf4(inputData,arraySize,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "FUN_00109c2e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_hash_table_0010ed2c",
                "param_1": "hash_table",
                "param_2": "new_value",
                "param_3": "remainder",
                "cVar1": "success",
                "iVar2": "count",
                "uVar3": "result",
                "in_R10": "pointer",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16] update_hash_table_0010ed2c(long hash_table,ulong new_value,undefined8 remainder)\n\n{\n  char success;\n  int count;\n  undefined8 extraout_RDX;\n  ulong result;\n  undefined8 pointer;\n  undefined return_value [16];\n  \n  if (*(ulong *)(hash_table + 0x1f0) < new_value) {\n    *(ulong *)(hash_table + 0x1f0) = new_value;\n  }\n  if (*(long *)(hash_table + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(hash_table + 0x1f8) != 0) {\n      count = *(int *)(hash_table + 0x1f8) + -1;\n      result = CONCAT71((int7)((ulong)remainder >> 8),1);\n      *(int *)(hash_table + 0x1f8) = count;\n      if (count != 0) {\n        return_value = update_hash_table_0010ed2c_0010e2f0(hash_table,0xe0,0,new_value - *(long *)(hash_table + 0x200),0,pointer);\n        return return_value;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    success = update_hash_table_0010ed2c_0010e2f0(hash_table,0xc0,0,*(long *)(hash_table + 0x208),0);\n    if (success != '\\0') {\n      *(undefined8 *)(hash_table + 0x208) = 0xffffffffffffffff;\n      remainder = extraout_RDX;\n      goto LAB_0010ed78;\n    }\n  }\n  result = 0;\nLAB_0010edae:\n  return_value._0_8_ = result & 0xffffffff;\n  return_value._8_8_ = pointer;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_hash_table_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_segments_0011a1b0",
                "param_1": "segment_a",
                "param_2": "segment_b",
                "uVar1": "segment_a_length",
                "uVar2": "segment_b_length",
                "iVar3": "memcmp_result",
                "extraout_var": "extra_out_var",
                "uVar4": "result",
                "auVar5": "output"
            },
            "code": "\nundefined  [16] compareMemorySegments_0011a1b0(ulong *segment_a,ulong *segment_b,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong segment_a_length;\n  ulong segment_b_length;\n  int memcmp_result;\n  undefined4 extra_out_var;\n  ulong result;\n  undefined output [16];\n  \n  result = *segment_a;\n  if (*segment_b <= *segment_a) {\n    result = *segment_b;\n  }\n  memcmp_result = memcmp((void *)(segment_a[3] + 3),(void *)(segment_b[3] + 3),result - 3);\n  result = CONCAT44(extra_out_var,memcmp_result);\n  if (memcmp_result == 0) {\n    segment_a_length = segment_a[8];\n    if (segment_a_length < segment_b[7]) {\n      result = 0xffffffff;\n    }\n    else {\n      segment_b_length = segment_b[8];\n      if (segment_b_length < segment_a[7]) {\n        result = 1;\n      }\n      else {\n        result = 0xffffffff;\n        if (segment_b[7] <= segment_a[7]) {\n          if (segment_b_length < segment_a_length) {\n            result = 1;\n          }\n          else {\n            result = 0xffffffff;\n            if (segment_b_length <= segment_a_length) {\n              if (segment_a[2] == 0x100) {\n                result = (ulong)-(uint)(segment_b[2] != 0x100);\n              }\n              else {\n                result = (ulong)(segment_b[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  output._8_8_ = param_4;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_segments_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "extract_build_attributes_001163d0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "var1",
                "uVar3": "var2",
                "bVar4": "flag",
                "puVar5": "ptr1",
                "iVar6": "var6",
                "uVar7": "var3",
                "lVar8": "size",
                "__ptr": "ptr",
                "uVar9": "var4",
                "uVar10": "var5",
                "uVar11": "var6",
                "uVar12": "var7",
                "uVar13": "var8",
                "uVar14": "var9",
                "uVar15": "var10",
                "uVar16": "var11",
                "puVar17": "ptr2",
                "puVar18": "ptr3",
                "cVar19": "ch",
                "puVar20": "ptr4",
                "iVar21": "var12",
                "puVar22": "ptr5",
                "puVar23": "ptr6",
                "uVar24": "var13",
                "__nmemb": "count",
                "puVar25": "ptr7",
                "bVar26": "flag2",
                "local_88": "localVar1",
                "uStack_80": "localVar2",
                "local_70": "localVar3",
                "local_68": "localVar4",
                "local_60": "localArray"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong extract_build_attributes_001163d0(undefined8 *param1,undefined8 *param2,ulong param3,undefined *param4)\n\n{\n  ulong result;\n  undefined8 var1;\n  undefined8 var2;\n  bool flag;\n  ulong *ptr1;\n  int var6;\n  undefined8 var3;\n  long size;\n  void *ptr;\n  ulong var4;\n  ulong var5;\n  ulong var6;\n  ulong var7;\n  undefined *ptr_00;\n  ulong var8;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong *ptr2;\n  undefined *ptr3;\n  char ch;\n  undefined *ptr4;\n  int var12;\n  undefined *ptr5;\n  ulong *ptr6;\n  ulong var13;\n  size_t count;\n  ulong *ptr7;\n  byte flag2;\n  ulong localVar1;\n  ulong localVar2;\n  ulong localVar3;\n  ulong localVar4;\n  ulong *localArray;\n  \n  flag2 = 0;\n  size = bfd_get_reloc_upper_bound();\n  localVar4 = param3;\n  if (0 < size) {\n    ptr = (void *)xmalloc(size);\n    size = bfd_canonicalize_reloc(param1,param2,ptr,DAT_001278b0);\n    free(ptr);\n    if (size != 0) {\n      if (_DAT_00127a24 == 0) {\n        var1 = *param1;\n        var2 = *param2;\n        var3 = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message_00119ed0(var3,var1,var2);\n      }\n      localArray = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  localArray = (ulong *)xcalloc(param3 / 0xc,0x48,param3 % 0xc);\n  localVar1 = 0;\n  localVar3 = 0;\n  var11 = param3;\n  var10 = 0;\n  ptr6 = localArray;\n  var9 = 0;\n  ptr5 = param4;\n  while (0xb < var11) {\n    var5 = (**(code **)(param1[1] + 0x40))(ptr5);\n    *ptr6 = var5;\n    var5 = (**(code **)(param1[1] + 0x40))(ptr5 + 4);\n    ptr6[1] = var5;\n    var6 = (**(code **)(param1[1] + 0x40))(ptr5 + 8);\n    var5 = *ptr6;\n    ptr6[2] = var6;\n    var7 = ptr6[1];\n    var8 = var5 + 3 & 0xfffffffffffffffc;\n    ptr6[6] = var8;\n    if (var7 != (var7 + 3 & 0xfffffffffffffffc)) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var6 - 0x100) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var8 + var7 + 0xc;\n    if (var11 < result) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var5 < 2) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr6[3] = (ulong)(ptr5 + 0xc);\n    ptr6[4] = (ulong)(ptr5 + var8 + 0xc);\n    var11 = var11 + (-0xc - (var8 + var7));\n    if (var5 != 2) {\n      if (ptr5[0xc] == '$') {\n        if ((ptr5[0xd] == '\\x01') && (ptr5[0xe] == '1')) {\n          var11 = extract_build_attributes_001163d0_00116490();\n          return var11;\n        }\n      }\n      else if ((((4 < var5) && (ptr5[0xc] == 'G')) && (ptr5[0xd] == 'A')) &&\n              ((ptr5[0xe] == '$' && (ptr5[0xf] == '\\x01')))) {\n        if (ptr5[0x10] == '2') {\n          var11 = extract_build_attributes_001163d0_00116490();\n          return var11;\n        }\n        if (ptr5[0x10] == '3') {\n          var11 = extract_build_attributes_001163d0_00116490();\n          return var11;\n        }\n        size = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var4 = var10;\n    var13 = var9;\n    if (var7 == 0) {\n      if (var6 == 0x100) {\n        ptr6[7] = localVar1;\nLAB_001164af:\n        var7 = var9;\n        var13 = var9;\n      }\n      else {\n        ptr6[7] = localVar3;\nLAB_0011669e:\n        var4 = var10;\n        var7 = var10;\n      }\n    }\n    else {\n      if (var7 != 0x10) {\n        if (var7 < 0x11) {\n          if (var7 == 4) {\n            var6 = (**(code **)(param1[1] + 0x40))();\n            var7 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var7 == 8) {\n            var11 = extract_build_attributes_001163d0_001086af();\n            return var11;\n          }\n        }\n        size = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var6 = (**(code **)(param1[1] + 0x28))(ptr5 + var8 + 0xc);\n      var7 = (**(code **)(param1[1] + 0x28))();\n      if (var7 < var6) {\n        var6 = var7;\n      }\nLAB_00116631:\n      if (ptr6[2] == 0x100) {\n        if (var6 == 0) {\n          var6 = localVar1;\n        }\n        var5 = *ptr6;\n        ptr6[7] = var6;\n        var13 = var7;\n        localVar1 = var6;\n        if (var7 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var6 == 0) {\n          var6 = localVar3;\n        }\n        var5 = *ptr6;\n        ptr6[7] = var6;\n        var4 = var7;\n        localVar3 = var6;\n        if (var7 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr6[8] = var7;\n    if (*(char *)((ptr6[3] - 1) + var5) != '\\0') {\n      size = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr6 = ptr6 + 9;\n    var10 = var4;\n    var9 = var13;\n    ptr5 = ptr5 + result;\n  }\n  if (var11 == 0) {\n    var1 = *param1;\n    var2 = *param2;\n    var3 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message_00119ed0(var3,var1,var2);\n    count = ((long)ptr6 - (long)localArray >> 3) * -0x71c71c71c71c71c7;\n    qsort(localArray,count,0x48,compare_memory_segments_0011a1b0);\n    for (ptr2 = localArray; ptr2 < ptr6; ptr2 = ptr2 + 9) {\n      var11 = ptr2[2];\n      if (var11 != 0) {\n        var10 = ptr2[7];\n        var9 = ptr2[8];\n        ptr7 = ptr2;\n        var12 = 0;\n        if (var10 == var9) {\n          ptr2[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr1 = ptr7;\n              ptr7 = ptr1 + -9;\n              if (ptr7 < localArray) goto LAB_001167f5;\n              var5 = ptr1[-7];\n            } while (var5 == 0);\n            if ((*ptr7 != *ptr2) ||\n               (var6 = memcmp((void *)ptr1[-6],(void *)ptr2[3],*ptr2), var6 != 0)) break;\n            var7 = ptr1[-2];\n            var6 = ptr1[-1];\n            if (var10 == var7) {\n              if (var9 == var6) {\n                ptr2[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var9 <= var6) {\n                ptr2[2] = 0;\n                break;\n              }\n              if (var6 < var10) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var6) || (var10 <= (var6 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n              }\nLAB_001167b8:\n              if ((var11 == 0x101) == (var5 == 0x101)) {\n                if (var6 <= var9) {\n                  var6 = var9;\n                }\n                if (var7 < var10) {\n                  var10 = var7;\n                }\n                ptr1[-1] = var6;\n                ptr1[-2] = var10;\n                ptr2[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var7 <= var10) goto LAB_001167a6;\n              if (var6 < var10) goto LAB_0010852c;\n              if (var9 < var10) {\n                if ((0xfffffffffffffff0 < var9) || (var7 <= (var9 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n                goto LAB_001167b8;\n              }\n              if (var9 != var6) goto LAB_001167b8;\n            }\nprocess_records_00116852:\n            flag = var12 < 0x11;\n            var12 = var12 + 1;\n          } while (flag);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(localArray,count,0x48,compare_records_0011a250);\n    ptr_00 = (undefined *)xmalloc(param3 * 2);\n    localVar2 = 0;\n    localVar3 = 0;\n    ptr5 = ptr_00;\n    for (ptr2 = localArray; ptr2 < ptr6; ptr2 = ptr2 + 9) {\n      if (ptr2[2] != 0) {\n        ptr3 = ptr5 + 0xc;\n        if ((ptr2[7] == localVar3) && (ptr2[8] == localVar2)) {\n          (**(code **)(param1[1] + 0x50))(*ptr2,ptr5);\n          (**(code **)(param1[1] + 0x50))(0,ptr5 + 4);\n          (**(code **)(param1[1] + 0x50))(ptr2[2],ptr5 + 8);\n          var10 = ptr2[6];\n          var11 = *ptr2;\n          ptr5 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (var9 = var11; var9 != 0; var9 = var9 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)flag2 * -2 + 1;\n            ptr4 = ptr4 + (ulong)flag2 * -2 + 1;\n          }\n          if (var11 < var10) {\n            for (size = var10 - var11; size != 0; size = size + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)flag2 * -2 + 1;\n            }\n          }\n          ptr5 = ptr3 + var10;\n        }\n        else {\n          (**(code **)(param1[1] + 0x50))();\n          if (*(int *)(param1[1] + 8) == 5) {\n            ch = (*(char *)(param1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            ch = '\\b';\n          }\n          (**(code **)(param1[1] + 0x50))(ch,ptr5 + 4);\n          (**(code **)(param1[1] + 0x50))(ptr2[2],ptr5 + 8);\n          var11 = *ptr2;\n          ptr5 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (var10 = var11; var10 != 0; var10 = var10 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)flag2 * -2 + 1;\n            ptr4 = ptr4 + (ulong)flag2 * -2 + 1;\n          }\n          var10 = ptr2[6];\n          if (var11 < var10) {\n            for (size = var10 - var11; size != 0; size = size + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)flag2 * -2 + 1;\n            }\n          }\n          size = param1[1];\n          ptr3 = ptr3 + var10;\n          ptr5 = ptr3 + 8;\n          if ((*(int *)(size + 8) == 5) && (*(char *)(param1[0x22] + 4) == '\\x02')) {\n            (**(code **)(size + 0x38))(ptr2[7],ptr3);\n            (**(code **)(param1[1] + 0x38))(ptr2[8],ptr5);\n            ptr5 = ptr3 + 0x10;\n          }\n          else {\n            (**(code **)(size + 0x50))(ptr2[7],ptr3);\n            (**(code **)(param1[1] + 0x50))(ptr2[8],ptr3 + 4);\n          }\n          localVar3 = ptr2[7];\n          localVar2 = ptr2[8];\n        }\n      }\n    }\n    var10 = (long)ptr5 - (long)ptr_00;\n    var11 = var10;\n    ptr5 = ptr_00;\n    localVar4 = param3;\n    if (var10 < param3) {\n      for (; localVar4 = var10, var11 != 0; var11 = var11 - 1) {\n        *param4 = *ptr5;\n        ptr5 = ptr5 + (ulong)flag2 * -2 + 1;\n        param4 = param4 + (ulong)flag2 * -2 + 1;\n      }\n    }\n    free(ptr_00);\n  }\n  else {\n    size = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (size != 0) {\n      bfd_set_error(0x11);\n      print_error_message_001126c0(0,param1,param2,size);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(localArray);\n  return localVar4;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc",
                "xcalloc",
                "free",
                "xmalloc",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_build_attributes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "output_file",
                "param_2": "exit_code",
                "uVar1": "usage_str",
                "pcVar2": "message"
            },
            "code": "\nvoid print_usage_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 usage_str;\n  char *message;\n  \n  usage_str = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(output_file,message,usage_str);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  print_supported_targets_00104a35(DAT_001275e0,output_file);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exit_code);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "FUN_00104a35",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "parse_driver_name_00108c86",
                "param_1": "driverName",
                "cVar1": "result",
                "iVar2": "comparisonResult",
                "sVar3": "nameLength",
                "__s": "name",
                "__s1": "arch",
                "puVar4": "parsedName",
                "lVar5": "addressOffset",
                "puVar6": "parsedPtr",
                "uVar7": "returnVal",
                "bVar8": "isNegativeOffset"
            },
            "code": "\nundefined8 parseDriverName_00108c86(long *driverName)\n\n{\n  char result;\n  int comparisonResult;\n  size_t nameLength;\n  undefined2 *parsedName;\n  long addressOffset;\n  char *name;\n  char *arch;\n  undefined2 *parsedPtr;\n  undefined8 returnVal;\n  byte isNegativeOffset;\n  \n  isNegativeOffset = 0;\n  addressOffset = *driverName;\n  name = (char *)(addressOffset + 4);\n  result = string_comparison_00113fb0(name,&DAT_0011b73b);\n  if (result == '\\0') {\n    result = string_comparison_00113fb0(name,\"bsdrv-\");\n    if (result == '\\0') {\n      result = string_comparison_00113fb0(name,\"rtdrv-\");\n      if (result == '\\0') {\n        return 0xffffffff;\n      }\n      name = (char *)(addressOffset + 6);\n      returnVal = 0xc;\n    }\n    else {\n      name = (char *)(addressOffset + 6);\n      returnVal = 0xb;\n    }\n  }\n  else {\n    returnVal = 10;\n  }\n  nameLength = strlen(name);\n  parsedName = (undefined2 *)xmalloc(nameLength + 8);\n  arch = name + 4;\n  parsedPtr = parsedName;\n  for (addressOffset = nameLength + 1; addressOffset != 0; addressOffset = addressOffset + -1) {\n    *(char *)parsedPtr = *name;\n    name = name + (ulong)isNegativeOffset * -2 + 1;\n    parsedPtr = (undefined2 *)((long)parsedPtr + (ulong)isNegativeOffset * -2 + 1);\n  }\n  *(undefined *)(parsedName + 1) = 0x69;\n  *parsedName = 0x6570;\n  comparisonResult = strcmp(arch,\"ia32\");\n  if (comparisonResult == 0) {\n    *(undefined *)((long)parsedName + 7) = 0x36;\n    *(undefined2 *)((long)parsedName + 5) = 0x3833;\n  }\n  else {\n    comparisonResult = strcmp(arch,\"x86_64\");\n    if (comparisonResult == 0) {\n      *(undefined *)((long)parsedName + 7) = 0x2d;\n    }\n    else {\n      comparisonResult = strcmp(arch,\"aarch64\");\n      if (comparisonResult == 0) {\n        *(undefined8 *)((long)parsedName + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *driverName = (long)parsedName;\n  return returnVal;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00113fb0",
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_driver_name_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "print_and_return_value_001053d5",
                "unaff_R12": "fileDescriptor",
                "unaff_R14": "errorMsgPtr"
            },
            "code": "\nundefined4 printAndReturnValue_001053d5(void)\n\n{\n  long fileDescriptor;\n  undefined8 *errorMsgPtr;\n  \n  print_error_0011a110(*errorMsgPtr);\n  *(undefined4 *)(fileDescriptor + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(fileDescriptor + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "print_and_return_value_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_handle_errors_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMessage",
                "unaff_EBP": "registerEBP",
                "unaff_R14": "registerR14"
            },
            "code": "\nvoid checkAndHandleErrors_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMessage;\n  uint registerEBP;\n  long registerR14;\n  \n  if ((flags & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_and_exit_error_00119dd0(errorMessage);\n  }\n  if ((((flags & 8) == 0) || ((registerEBP & 0x10) == 0)) && ((registerEBP & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((registerEBP & 0x40) == 0)) && ((registerEBP & 0x60) != 0x60)) {\n      *(uint *)(registerR14 + 0x14) = flags | registerEBP;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_and_exit_error_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_and_exit_error_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_and_handle_errors_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_terminate_string_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "newString",
                "lVar2": "i",
                "puVar3": "newStringPtr",
                "bVar4": "increment"
            },
            "code": "\nvoid copyAndTerminateString_00109a0b(undefined *source,int length)\n\n{\n  undefined *newString;\n  long i;\n  undefined *newStringPtr;\n  byte increment;\n  \n  increment = 0;\n  newString = (undefined *)xmalloc((long)(length + 1));\n  newStringPtr = newString;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *newStringPtr = *source;\n    source = source + (ulong)increment * -2 + 1;\n    newStringPtr = newStringPtr + (ulong)increment * -2 + 1;\n  }\n  newString[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010afd5",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "copy_and_terminate_string_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_populate_slots_0010da0b",
                "param_1": "slots",
                "param_2": "num_slots",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "uVar1": "errorMsg",
                "plVar2": "newSlot",
                "lVar3": "offset",
                "lVar4": "tempOffset",
                "uVar5": "remainingSlots",
                "bVar6": "byteVal",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocate_and_populate_slots_0010da0b(long **slots,ulong num_slots,undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  undefined8 errorMsg;\n  long *newSlot;\n  long offset;\n  long tempOffset;\n  ulong remainingSlots;\n  byte byteVal;\n  undefined result [16];\n  \n  byteVal = 0;\n  remainingSlots = num_slots;\n  if ((long)num_slots < 0x3e90) {\n    for (; 0xf < (long)remainingSlots; remainingSlots = remainingSlots - 0x10) {\n      if (*slots == (long *)0x0) {\n        newSlot = (long *)xmalloc(0x88);\n        *slots = newSlot;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)newSlot = 0;\n          newSlot = (long *)((long)newSlot + (ulong)byteVal * -8 + 4);\n        }\n      }\n      slots = (long **)*slots;\n    }\n    offset = (num_slots >> 4) * -0x10;\n    if ((long)num_slots < 0) {\n      offset = 0;\n    }\n    if (*slots == (long *)0x0) {\n      newSlot = (long *)xmalloc(0x88);\n      *slots = newSlot;\n      for (tempOffset = 0x22; tempOffset != 0; tempOffset = tempOffset + -1) {\n        *(undefined4 *)newSlot = 0;\n        newSlot = (long *)((long)newSlot + (ulong)byteVal * -8 + 4);\n      }\n    }\n    result._8_8_ = unused_param2;\n    result._0_8_ = *slots + num_slots + offset + 1;\n    return result;\n  }\n  errorMsg = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_and_exit_error_00119dd0(errorMsg,num_slots);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_00112a33",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_and_populate_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "allocatedMemory",
                "puVar2": "tempPtr",
                "lVar3": "loopCounter",
                "bVar4": "byteValue"
            },
            "code": "\nundefined8 *\ninitializeDataStructure_00112894(undefined8 input1,undefined input2,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *allocatedMemory;\n  undefined8 *tempPtr;\n  long loopCounter;\n  byte byteValue;\n  \n  byteValue = 0;\n  allocatedMemory = (undefined8 *)xmalloc(0x1b0);\n  tempPtr = allocatedMemory;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)tempPtr = 0;\n    tempPtr = (undefined8 *)((long)tempPtr + (ulong)byteValue * -8 + 4);\n  }\n  *allocatedMemory = input1;\n  *(undefined *)(allocatedMemory + 1) = input2;\n  allocatedMemory[2] = input3;\n  allocatedMemory[3] = input4;\n  *(undefined4 *)(allocatedMemory + 0x10) = 1;\n  tempPtr = (undefined8 *)xmalloc(8);\n  allocatedMemory[0xd] = 0xffffffffffffffff;\n  allocatedMemory[0x11] = tempPtr;\n  *tempPtr = 0;\n  return allocatedMemory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_next_item_00109b2f",
                "param_1": "input",
                "__ptr": "currentItem",
                "puVar1": "nextItem"
            },
            "code": "\nundefined8 * extractAndFreeNextItem_00109b2f(long input)\n\n{\n  undefined8 *currentItem;\n  undefined8 *nextItem;\n  \n  currentItem = *(undefined8 **)(input + 0x60);\n  if (currentItem != (undefined8 *)0x0) {\n    nextItem = (undefined8 *)currentItem[1];\n    *(undefined8 *)(input + 0x60) = *currentItem;\n    free(currentItem);\n    return nextItem;\n  }\n  return currentItem;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a94e",
                "FUN_0010a0e9",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a77a",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_0010eafe",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "extract_and_free_next_item_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_redefinitions_00108d9a",
                "param_1": "msg",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "ppcVar1": "symbol_entry",
                "pcVar2": "symbol_name_copy",
                "lVar3": "symbol_entry_found",
                "uVar4": "translation",
                "plVar5": "slot_ptr"
            },
            "code": "\nundefined8 check_redefinitions_00108d9a(undefined8 msg,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_entry;\n  char *symbol_name_copy;\n  long symbol_entry_found;\n  undefined8 translation;\n  long *slot_ptr;\n  \n  symbol_entry = (char **)xmalloc(0x10);\n  symbol_name_copy = strdup(symbol_name);\n  *symbol_entry = symbol_name_copy;\n  symbol_name_copy = strdup(target_symbol);\n  translation = DAT_001278d0;\n  symbol_entry[1] = symbol_name_copy;\n  symbol_entry_found = htab_find(translation,symbol_entry);\n  if (symbol_entry_found != 0) {\n    translation = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_and_exit_error_00119dd0(translation,msg,symbol_name);\n  }\n  symbol_entry_found = htab_find(DAT_001278c8,target_symbol);\n  if (symbol_entry_found != 0) {\n    translation = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_and_exit_error_00119dd0(translation,msg,target_symbol);\n  }\n  slot_ptr = (long *)htab_find_slot(DAT_001278d0,symbol_entry,1);\n  translation = DAT_001278c8;\n  *slot_ptr = (long)symbol_entry;\n  symbol_name_copy = symbol_entry[1];\n  symbol_entry = (char **)htab_find_slot(translation,symbol_name_copy,1);\n  *symbol_entry = symbol_name_copy;\n  return result;\n}\n\n",
            "called": [
                "htab_find",
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext",
                "strdup",
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_redefinitions_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "format_string_and_hash_0010e9a0",
                "param_1": "hashTable",
                "param_2": "originalString",
                "param_3": "mode",
                "lVar1": "count",
                "uVar2": "result",
                "__s": "extractedString",
                "__s_00": "formattedString",
                "__s_01": "finalString",
                "pcVar5": "prefix",
                "uVar6": "hashValue",
                "sVar3": "originalLength",
                "sVar4": "extractedLength"
            },
            "code": "\nundefined4 formatStringAndHash_0010e9a0(long hashTable,char *originalString,undefined4 mode,undefined8 param_4)\n\n{\n  long count;\n  undefined4 result;\n  byte *extractedString;\n  byte *formattedString;\n  size_t originalLength;\n  size_t extractedLength;\n  char *finalString;\n  char *prefix;\n  undefined8 hashValue;\n  \n  extractedString = (byte *)extract_and_free_next_item_00109b2f();\n  switch(mode) {\n  case 1:\n    prefix = \"G\";\n    hashValue = 0x20;\n    break;\n  case 2:\n    prefix = \"S\";\n    hashValue = 0x26;\n    break;\n  case 3:\n    prefix = \"V\";\n    hashValue = 0x26;\n    break;\n  case 4:\n    prefix = \"\";\n    hashValue = 0x80;\n    if (((&_sch_istable)[(ulong)*extractedString * 2] & 4) == 0) {\n      count = *(long *)(hashTable + 0x68);\n      *(long *)(hashTable + 0x68) = count + 1;\n      originalLength = strlen((char *)extractedString);\n      formattedString = (byte *)xmalloc(originalLength + 0x14);\n      sprintf((char *)formattedString,\"%ld=%s\",count,extractedString);\n      free(extractedString);\n      extractedString = formattedString;\n    }\n    break;\n  case 5:\n    prefix = \"r\";\n    hashValue = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  originalLength = strlen(originalString);\n  extractedLength = strlen((char *)extractedString);\n  finalString = (char *)xmalloc(originalLength + 3 + extractedLength);\n  sprintf(finalString,\"%s:%s%s\",originalString,prefix,extractedString);\n  free(extractedString);\n  result = update_hash_table_0010e2f0(hashTable,hashValue,0,param_4,finalString);\n  if ((char)result != '\\0') {\n    free(finalString);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_string_and_hash_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_error_and_exit_0010827b",
                "unaff_RBX": "sectionPtr",
                "uVar1": "section",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printErrorAndExit_0010827b(void)\n\n{\n  undefined8 section;\n  undefined8 errorMessage;\n  undefined8 *sectionPtr;\n  \n  section = *sectionPtr;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  print_and_exit_error_00119dd0(errorMessage,section);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "print_error_message_00104920",
                "uVar1": "errorMessageFormat",
                "dcgettext": "getLocalizedMessage",
                "print_and_exit_error_00119dd0": "printAndExitError"
            },
            "code": "\nvoid printErrorMessage_00104920(void)\n\n{\n  undefined8 errorMessageFormat;\n  \n  errorMessageFormat = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  printAndExitError(errorMessageFormat);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "print_error_message_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hashtable_00113f20",
                "htab_create_alloc": "createHashtable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "compareStrings",
                "xcalloc": "allocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid initializeHashtable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,compareStrings,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_eq_string",
                "free",
                "htab_hash_string",
                "htab_create_alloc",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hashtable_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "lVar1": "alignment_string",
                "lVar2": "value",
                "cVar3": "result",
                "lVar4": "error_message",
                "lVar5": "found_value",
                "unaff_RBX": "data_struct1",
                "unaff_RBP": "data_struct2",
                "unaff_R12": "data_struct3",
                "unaff_R14B": "flag",
                "unaff_R15": "data_struct4"
            },
            "code": "\nvoid set_alignment_00108179(void)\n\n{\n  long alignment_string;\n  long value;\n  char result;\n  long error_message;\n  long found_value;\n  long data_struct1;\n  long data_struct2;\n  long data_struct3;\n  char flag;\n  long data_struct4;\n  \n  error_message = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(data_struct4 + 0xb4) = *(undefined4 *)(data_struct1 + 0xb4);\n  *(byte *)(data_struct4 + 0x28) =\n       *(byte *)(data_struct4 + 0x28) & 0xcf | *(byte *)(data_struct1 + 0x28) & 0x30;\n  *(long *)(data_struct1 + 0x60) = data_struct4;\n  *(undefined8 *)(data_struct1 + 0x58) = 0;\n  if ((*(byte *)(data_struct1 + 0x27) & 2) != 0) {\n    alignment_string = *(long *)(data_struct1 + 0xd0);\n    found_value = find_value_00115d00(alignment_string,*(undefined8 *)(data_struct1 + 0xe0));\n    if ((found_value != 0) &&\n       (value = *(long *)(data_struct3 + 8), *(uint *)(found_value + 0x18) = *(uint *)(found_value + 0x18) | 0x20,\n       *(int *)(value + 8) == 5)) {\n      *(long *)(alignment_string + 0xb0) = found_value;\n      result = (**(code **)(*(long *)(data_struct2 + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(data_struct2 + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(data_struct4 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "dcgettext",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "process_file_number_00109022",
                "param_1": "fileListPtr",
                "param_2": "fileIndicesPtr",
                "param_3": "var1",
                "param_4": "var2",
                "uVar1": "fileIndex",
                "pcVar2": "errorString",
                "plVar3": "fileDataPtr",
                "lVar4": "loopCounter",
                "uVar5": "fileNumber",
                "pplVar6": "filePtrPtr",
                "bVar7": "tempByte",
                "auVar8": "returnData"
            },
            "code": "\n\n\nundefined  [16] processFileNumber_00109022(long fileListPtr,uint *fileIndicesPtr,undefined8 var1,undefined8 var2)\n\n{\n  uint fileIndex;\n  char *errorString;\n  long *fileDataPtr;\n  long loopCounter;\n  uint fileNumber;\n  long **filePtrPtr;\n  byte tempByte;\n  undefined returnData [16];\n  \n  tempByte = 0;\n  fileNumber = *fileIndicesPtr;\n  fileIndex = fileIndicesPtr[1];\n  if (((int)fileNumber < 0) || (*(uint *)(fileListPtr + 0x80) <= fileNumber)) {\n    errorString = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorString,(ulong)fileNumber);\n  }\n  else {\n    if (-1 < (int)fileIndex) {\n      filePtrPtr = (long **)(*(long *)(fileListPtr + 0x88) + (long)(int)fileNumber * 8);\n      for (fileNumber = fileIndex; 0xf < (int)fileNumber; fileNumber = fileNumber - 0x10) {\n        if (*filePtrPtr == (long *)0x0) {\n          fileDataPtr = (long *)xmalloc(0x88);\n          *filePtrPtr = fileDataPtr;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)fileDataPtr = 0;\n            fileDataPtr = (long *)((long)fileDataPtr + (ulong)tempByte * -8 + 4);\n          }\n        }\n        filePtrPtr = (long **)*filePtrPtr;\n      }\n      if (*filePtrPtr == (long *)0x0) {\n        fileDataPtr = (long *)xmalloc(0x88);\n        *filePtrPtr = fileDataPtr;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)fileDataPtr = 0;\n          fileDataPtr = (long *)((long)fileDataPtr + (ulong)tempByte * -8 + 4);\n        }\n      }\n      fileDataPtr = *filePtrPtr + (long)(int)((fileIndex >> 4) * -0x10 + fileIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorString = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorString,(ulong)fileIndex);\n  }\n  fileDataPtr = (long *)0x0;\nLAB_00109117:\n  returnData._8_8_ = var2;\n  returnData._0_8_ = fileDataPtr;\n  return returnData;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_file_number_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "initialize_variable_debug_0010c05d",
                "param_1": "file_ptr",
                "param_2": "memory_size",
                "param_3": "parameter",
                "param_4": "option",
                "auVar1": "result",
                "uVar2": "return_value",
                "piVar3": "int_ptr",
                "cVar4": "flag",
                "lVar5": "loop_counter",
                "lVar6": "file_info",
                "piVar7": "int_ptr2",
                "bVar8": "byte_var",
                "auVar9": "result2"
            },
            "code": "\n\n\nundefined  [16]\ninitialize_variable_debug_0010c05d(long file_ptr,long memory_size,ulong parameter,int option,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined result [16];\n  undefined8 return_value;\n  int *int_ptr;\n  char flag;\n  long loop_counter;\n  long file_info;\n  int *int_ptr2;\n  byte byte_var;\n  undefined result2 [16];\n  \n  byte_var = 0;\n  if (memory_size == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = parameter;\n    return result << 0x40;\n  }\n  if (parameter != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (file_info = *(long *)(file_ptr + 0x10), file_info == 0)) {\n      return_value = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",return_value);\n    }\n    else {\n      if (option - 1U < 2) {\n        file_info = file_info + 0x10;\n        flag = (option == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        file_info = file_info + 0x10;\n        flag = '\\0';\n      }\n      else {\n        file_info = *(long *)(file_ptr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      file_info = initialize_memory_00112925(file_info,memory_size,2,flag);\n      if (file_info != 0) {\n        int_ptr = (int *)xmalloc(0x18);\n        int_ptr2 = int_ptr + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *int_ptr2 = 0;\n          int_ptr2 = int_ptr2 + (ulong)byte_var * -2 + 1;\n        }\n        *int_ptr = option;\n        return_value = 1;\n        *(ulong *)(int_ptr + 2) = parameter;\n        *(undefined8 *)(int_ptr + 4) = param_5;\n        *(int **)(file_info + 0x20) = int_ptr;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  return_value = 0;\nLAB_0010c12e:\n  result2._8_8_ = param_6;\n  result2._0_8_ = return_value;\n  return result2;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c139",
                "FUN_0010c1c6"
            ],
            "imported": false,
            "current_name": "initialize_variable_debug_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "initialize_or_increment_value_00109d97",
                "param_1": "input_param",
                "lVar1": "current_value",
                "local_40": "formatted_string"
            },
            "code": "\nvoid initialize_or_increment_value_00109d97(long input_param)\n\n{\n  long current_value;\n  char formatted_string [40];\n  \n  if (*(long *)(input_param + 0x70) != 0) {\n    initialize_data_structure_00109cf4(input_param,*(long *)(input_param + 0x70),0);\n    return;\n  }\n  current_value = *(long *)(input_param + 0x68);\n  *(long *)(input_param + 0x68) = current_value + 1;\n  sprintf(formatted_string,\"%ld=%ld\",current_value,current_value);\n  initialize_data_structure_00109b52(input_param,formatted_string,current_value,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "initialize_or_increment_value_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "extract_build_attributes_001086af",
                "unaff_R14": "function_pointers",
                "unaff_R13": "initial_result",
                "unaff_R12": "attribute_data",
                "unaff_RBX": "remaining_data",
                "unaff_RBP": "current_result",
                "unaff_retaddr": "return_address",
                "in_stack_00000030": "buffer",
                "in_stack_00000038": "flags",
                "param_13": "version_flag",
                "param_8": "version_note_flag",
                "param_14": "note_string",
                "param_11": "record_data",
                "param_10": "record_data_size",
                "param_9": "note_type",
                "param_7": "note_offset",
                "uVar1": "minimum_length",
                "uVar2": "message_1",
                "uVar3": "message_2",
                "bVar4": "condition",
                "puVar5": "temp_pointer",
                "iVar6": "comparison_result",
                "lVar7": "message_length",
                "uVar8": "warning_message",
                "uVar9": "note_size",
                "uVar10": "note_description_size",
                "uVar11": "note_description",
                "uVar12": "loop_counter",
                "uVar13": "temp_result",
                "uVar14": "attribute_note_offset",
                "uVar15": "pointer_offset",
                "uVar16": "attribute_data_offset",
                "uVar18": "version_number",
                "cVar17": "version_flag",
                "puVar18": "description_pointer_1",
                "puVar19": "description_pointer_2",
                "puVar21": "target_data_pointer"
            },
            "code": "\nulong extract_build_attributes_001086af(void)\n\n{\n  ulong minimum_length;\n  undefined8 message_1;\n  undefined8 message_2;\n  bool condition;\n  ulong *temp_pointer;\n  int comparison_result;\n  long message_length;\n  undefined8 warning_message;\n  ulong note_size;\n  ulong note_description_size;\n  ulong note_description;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong loop_counter;\n  ulong temp_result;\n  ulong attribute_note_offset;\n  ulong remaining_data;\n  ulong current_result;\n  ulong *ppointer_offset;\n  undefined *pattribute_data_offset;\n  char version_flag;\n  undefined *description_pointer_1;\n  undefined *description_pointer_2;\n  ulong *attribute_data;\n  ulong initial_result;\n  ulong message_10;\n  size_t __nmemb;\n  undefined8 *function_pointers;\n  ulong *target_data_pointer;\n  byte bVar22;\n  int iVar23;\n  ulong return_address;\n  ulong note_offset;\n  uint version_note_flag;\n  ulong note_type;\n  ulong record_data_size;\n  ulong *record_data;\n  undefined *buffer;\n  uint flags;\n  uint version_flag;\n  undefined8 *note_string;\n  \n  bVar22 = 0;\n  note_offset = in_RCX;\n  note_size = (**(code **)(function_pointers[1] + 0x40))();\n  note_description_size = (**(code **)(function_pointers[1] + 0x40))(attribute_data[4] + 4);\nLAB_0011662a:\n  temp_result = current_result;\n  message_10 = initial_result;\n  if (note_description_size < note_size) {\n    note_size = note_description_size;\n  }\n  do {\n    note_description = note_offset;\n    loop_counter = note_offset;\n    ppointer_offset = attribute_data;\n    if (attribute_data[2] == 0x100) {\n      if (note_size == 0) {\n        note_size = return_address;\n      }\n      attribute_note_offset = *attribute_data;\n      attribute_data[7] = note_size;\n      current_result = temp_result;\n      initial_result = note_description_size;\n      return_address = note_size;\n      if (note_description_size == 0) goto LAB_001164af;\n    }\n    else {\n      if (note_size == 0) {\n        note_size = note_type;\n      }\n      attribute_note_offset = *attribute_data;\n      attribute_data[7] = note_size;\n      current_result = note_description_size;\n      initial_result = message_10;\n      note_type = note_size;\n      if (note_description_size == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    ppointer_offset[8] = note_description_size;\n    if (*(char *)((ppointer_offset[3] - 1) + attribute_note_offset) != '\\0') {\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    attribute_data = ppointer_offset + 9;\n    if (remaining_data < 0xc) {\n      if (remaining_data != 0) {\n        message_length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((flags | version_flag | version_note_flag) != 0) {\n        if (((version_flag | version_note_flag) == 0) || (flags == 0)) {\n          if (version_flag == 0) {\n            if (version_note_flag != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (version_note_flag == 0) goto LAB_001166f8;\n        }\n        message_length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      message_1 = *function_pointers;\n      message_2 = *note_string;\n      warning_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(warning_message,message_1,message_2);\nLAB_0011671b:\n      __nmemb = ((long)attribute_data - (long)record_data >> 3) * -0x71c71c71c71c71c7;\n      qsort(record_data,__nmemb,0x48,compare_memory_segments_0011a1b0);\n      ppointer_offset = record_data;\n      goto LAB_001167f9;\n    }\n    note_description_size = (**(code **)(function_pointers[1] + 0x40))(loop_counter);\n    *attribute_data = note_description_size;\n    note_description_size = (**(code **)(function_pointers[1] + 0x40))(loop_counter + 4);\n    ppointer_offset[10] = note_description_size;\n    note_size = (**(code **)(function_pointers[1] + 0x40))(loop_counter + 8);\n    attribute_note_offset = *attribute_data;\n    ppointer_offset[0xb] = note_size;\n    note_description_size = ppointer_offset[10];\n    temp_result = attribute_note_offset + 3 & 0xfffffffffffffffc;\n    ppointer_offset[0xf] = temp_result;\n    if (note_description_size != (note_description_size + 3 & 0xfffffffffffffffc)) {\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note_size - 0x100) {\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    note_description = temp_result + note_description_size + 0xc;\n    if (remaining_data < note_description) {\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (attribute_note_offset < 2) {\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ppointer_offset[0xc] = loop_counter + 0xc;\n    minimum_length = loop_counter + 0xc + temp_result;\n    ppointer_offset[0xd] = minimum_length;\n    remaining_data = remaining_data + (-0xc - (temp_result + note_description_size));\n    note_description = loop_counter + note_description;\n    if (attribute_note_offset != 2) {\n      if (*(char *)(loop_counter + 0xc) == '$') {\n        if ((*(char *)(loop_counter + 0xd) == '\\x01') && (*(char *)(loop_counter + 0xe) == '1')) {\n          note_description_size = extract_build_attributes_001086af_00116490();\n          return note_description_size;\n        }\n      }\n      else if ((((4 < attribute_note_offset) && (*(char *)(loop_counter + 0xc) == 'G')) &&\n               (*(char *)(loop_counter + 0xd) == 'A')) &&\n              ((*(char *)(loop_counter + 0xe) == '$' && (*(char *)(loop_counter + 0xf) == '\\x01')))) {\n        if (*(char *)(loop_counter + 0x10) == '2') {\n          note_description_size = extract_build_attributes_001086af_00116490();\n          return note_description_size;\n        }\n        if (*(char *)(loop_counter + 0x10) == '3') {\n          note_description_size = extract_build_attributes_001086af_00116490();\n          return note_description_size;\n        }\n        message_length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp_result = current_result;\n    message_10 = initial_result;\n    if (note_description_size == 0) {\n      if (note_size == 0x100) {\n        ppointer_offset[0x10] = return_address;\nLAB_001164af:\n        loop_counter = note_description;\n        note_description_size = message_10;\n        ppointer_offset = attribute_data;\n        initial_result = message_10;\n      }\n      else {\n        ppointer_offset[0x10] = note_type;\nLAB_0011669e:\n        current_result = temp_result;\n        loop_counter = note_description;\n        note_description_size = temp_result;\n        ppointer_offset = attribute_data;\n        initial_result = message_10;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_description_size == 0x10) break;\n    if (0x10 < note_description_size) {\nLAB_00116679:\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (message_length != 0) {\n        bfd_set_error(0x11);\n        print_error_message_001126c0(0,function_pointers,note_string,message_length);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (note_description_size != 4) {\n      if (note_description_size == 8) {\n        note_description_size = extract_build_attributes_001086af();\n        return note_description_size;\n      }\n      goto LAB_00116679;\n    }\n    note_offset = note_description;\n    note_size = (**(code **)(function_pointers[1] + 0x40))();\n    note_description_size = 0xffffffffffffffff;\n  } while( true );\n  note_offset = note_description;\n  note_size = (**(code **)(function_pointers[1] + 0x28))(minimum_length);\n  note_description_size = (**(code **)(function_pointers[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (attribute_data <= ppointer_offset) {\n    qsort(record_data,__nmemb,0x48,compare_records_0011a250);\n    __ptr = (undefined *)xmalloc(record_data_size * 2);\n    note_offset = 0;\n    note_type = 0;\n    description_pointer_2 = __ptr;\n    for (ppointer_offset = record_data; ppointer_offset < attribute_data; ppointer_offset = ppointer_offset + 9) {\n      if (ppointer_offset[2] != 0) {\n        description_pointer_1 = description_pointer_2 + 4;\n        pattribute_data_offset = description_pointer_2 + 0xc;\n        if ((ppointer_offset[7] == note_type) && (ppointer_offset[8] == note_offset)) {\n          (**(code **)(function_pointers[1] + 0x50))(*ppointer_offset,description_pointer_2);\n          (**(code **)(function_pointers[1] + 0x50))(0,description_pointer_1);\n          (**(code **)(function_pointers[1] + 0x50))(ppointer_offset[2],description_pointer_2 + 8);\n          note_size = ppointer_offset[6];\n          note_description_size = *ppointer_offset;\n          description_pointer_2 = (undefined *)ppointer_offset[3];\n          description_pointer_1 = pattribute_data_offset;\n          for (temp_result = note_description_size; temp_result != 0; temp_result = temp_result - 1) {\n            *description_pointer_1 = *description_pointer_2;\n            description_pointer_2 = description_pointer_2 + (ulong)bVar22 * -2 + 1;\n            description_pointer_1 = description_pointer_1 + (ulong)bVar22 * -2 + 1;\n          }\n          if (note_description_size < note_size) {\n            for (message_length = note_size - note_description_size; message_length != 0; message_length = message_length + -1) {\n              *description_pointer_1 = 0;\n              description_pointer_1 = description_pointer_1 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          description_pointer_2 = pattribute_data_offset + note_size;\n        }\n        else {\n          (**(code **)(function_pointers[1] + 0x50))();\n          if (*(int *)(function_pointers[1] + 8) == 5) {\n            version_flag = (*(char *)(function_pointers[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            version_flag = '\\b';\n          }\n          (**(code **)(function_pointers[1] + 0x50))(version_flag,description_pointer_1);\n          (**(code **)(function_pointers[1] + 0x50))(ppointer_offset[2],description_pointer_2 + 8);\n          note_description_size = *ppointer_offset;\n          description_pointer_2 = (undefined *)ppointer_offset[3];\n          description_pointer_1 = pattribute_data_offset;\n          for (note_size = note_description_size; note_size != 0; note_size = note_size - 1) {\n            *description_pointer_1 = *description_pointer_2;\n            description_pointer_2 = description_pointer_2 + (ulong)bVar22 * -2 + 1;\n            description_pointer_1 = description_pointer_1 + (ulong)bVar22 * -2 + 1;\n          }\n          note_size = ppointer_offset[6];\n          if (note_description_size < note_size) {\n            for (message_length = note_size - note_description_size; message_length != 0; message_length = message_length + -1) {\n              *description_pointer_1 = 0;\n              description_pointer_1 = description_pointer_1 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          message_length = function_pointers[1];\n          pattribute_data_offset = pattribute_data_offset + note_size;\n          description_pointer_2 = pattribute_data_offset + 8;\n          if ((*(int *)(message_length + 8) == 5) && (*(char *)(function_pointers[0x22] + 4) == '\\x02')) {\n            (**(code **)(message_length + 0x38))(ppointer_offset[7],pattribute_data_offset);\n            (**(code **)(function_pointers[1] + 0x38))(ppointer_offset[8],description_pointer_2);\n            description_pointer_2 = pattribute_data_offset + 0x10;\n          }\n          else {\n            (**(code **)(message_length + 0x50))(ppointer_offset[7],pattribute_data_offset);\n            (**(code **)(function_pointers[1] + 0x50))(ppointer_offset[8],pattribute_data_offset + 4);\n          }\n          note_type = ppointer_offset[7];\n          note_offset = ppointer_offset[8];\n        }\n      }\n    }\n    note_size = (long)description_pointer_2 - (long)__ptr;\n    note_description_size = note_size;\n    description_pointer_2 = __ptr;\n    if (note_size < record_data_size) {\n      for (; record_data_size = note_size, note_description_size != 0; note_description_size = note_description_size - 1) {\n        *buffer = *description_pointer_2;\n        description_pointer_2 = description_pointer_2 + (ulong)bVar22 * -2 + 1;\n        buffer = buffer + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(record_data);\n    return record_data_size;\n  }\n  if (ppointer_offset[2] != 0) {\n    note_description_size = ppointer_offset[7];\n    note_size = ppointer_offset[8];\n    temp_result = ppointer_offset[2];\n    target_data_pointer = ppointer_offset;\n    iVar23 = 0;\n    if (note_description_size == note_size) {\n      ppointer_offset[2] = 0;\n    }\n    else {\n      do {\n        do {\n          temp_pointer = target_data_pointer;\n          target_data_pointer = temp_pointer + -9;\n          if (target_data_pointer < record_data) goto LAB_001167f5;\n          message_10 = temp_pointer[-7];\n        } while (message_10 == 0);\n        note_offset = temp_result;\n        if ((*target_data_pointer != *ppointer_offset) ||\n           (comparison_result = memcmp((void *)temp_pointer[-6],(void *)ppointer_offset[3],*ppointer_offset), comparison_result != 0)) break;\n        temp_result = temp_pointer[-2];\n        note_description = temp_pointer[-1];\n        if (note_description_size == temp_result) {\n          if (note_size == note_description) {\n            ppointer_offset[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (note_size <= note_description) {\n            ppointer_offset[2] = 0;\n            break;\n          }\n          if (note_description < note_description_size) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < note_description) || (note_description_size <= (note_description + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n          }\nLAB_001167b8:\n          if ((note_offset == 0x101) == (message_10 == 0x101)) {\n            if (note_description <= note_size) {\n              note_description = note_size;\n            }\n            if (temp_result < note_description_size) {\n              note_description_size = temp_result;\n            }\n            temp_pointer[-1] = note_description;\n            temp_pointer[-2] = note_description_size;\n            ppointer_offset[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (temp_result <= note_description_size) goto LAB_001167a6;\n          if (note_description < note_description_size) goto LAB_0010852c;\n          if (note_size < note_description_size) {\n            if ((0xfffffffffffffff0 < note_size) || (temp_result <= (note_size + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n            goto LAB_001167b8;\n          }\n          if (note_size != note_description) goto LAB_001167b8;\n        }\nprocess_records_00116852:\n        condition = iVar23 < 0x11;\n        temp_result = note_offset;\n        iVar23 = iVar23 + 1;\n      } while (condition);\n    }\n  }\nLAB_001167f5:\n  ppointer_offset = ppointer_offset + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "FUN_0011a1b0",
                "qsort",
                "FUN_00116490",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001126c0",
                "FUN_0010847a",
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "extract_build_attributes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "process_data_0010add5"
            },
            "code": "\nvoid process_data_0010add5(void)\n\n{\n  process_data_0010add5_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_data_structure_00113e17",
                "initialize_data_structure_00112904": "initializeDataStructureHelper"
            },
            "code": "\nvoid initializeDataStructure_00113e17(void)\n\n{\n  initializeDataStructure_00113e17Helper(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "ptrToStructure",
                "param_2": "stringParam",
                "param_3": "ptrParam",
                "param_4": "flag",
                "param_5": "intParam",
                "uVar1": "originalPtr",
                "puVar2": "newPtr",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long ptrToStructure,undefined8 stringParam,undefined8 ptrParam,undefined flag,\n                      undefined4 intParam)\n\n{\n  undefined8 originalPtr;\n  undefined8 *newPtr;\n  undefined8 duplicatedString;\n  \n  newPtr = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(stringParam);\n  newPtr[2] = ptrParam;\n  *(undefined (*) [16])(newPtr + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newPtr + 6) = ZEXT816(0);\n  originalPtr = *(undefined8 *)(ptrToStructure + 0x60);\n  *(undefined *)((long)newPtr + 0x1c) = flag;\n  *(undefined4 *)(newPtr + 3) = intParam;\n  *(undefined8 **)(ptrToStructure + 0x60) = newPtr;\n  *newPtr = originalPtr;\n  newPtr[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_00109cf4",
                "FUN_0010a0e9",
                "FUN_0010a181",
                "FUN_00109d97",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109dfe",
                "FUN_0010a69a",
                "FUN_0010a2b9",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "validate_and_convert_string_to_ulong_00109a32",
                "param_1": "string_ptr",
                "param_2": "error_flag_ptr",
                "param_3": "string_end",
                "__nptr": "current_char",
                "piVar1": "errno_ptr",
                "uVar2": "converted_value",
                "uVar3": "error_message",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nvalidate_and_convert_string_to_ulong_00109a32(char **string_ptr,undefined *error_flag_ptr,char *string_end,undefined8 param_4,undefined8 param_5)\n\n{\n  char *current_char;\n  int *errno_ptr;\n  ulong converted_value;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  if (error_flag_ptr != (undefined *)0x0) {\n    *error_flag_ptr = 0;\n  }\n  current_char = *string_ptr;\n  if ((current_char < string_end) && (*current_char != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    converted_value = strtoul(current_char,string_ptr,0);\n    if ((converted_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag_ptr == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      print_warning_00108fe8(current_char,error_message);\n    }\n    else {\n      *error_flag_ptr = 1;\n    }\n  }\n  converted_value = 0;\nLAB_00109aa9:\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = converted_value;\n  return return_value;\n}\n\n",
            "called": [
                "__errno_location",
                "FUN_00108fe8",
                "dcgettext",
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "validate_and_convert_string_to_ulong_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "debug_tag_type_0010c6be",
                "param_1": "debug_info_ptr",
                "param_2": "file_name",
                "param_3": "current_tag",
                "iVar1": "comparison_result",
                "uVar2": "translated_string",
                "piVar3": "data_structure_ptr",
                "pauVar4": "memory_block_ptr",
                "lVar5": "offset",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * debug_tag_type_0010c6be(long debug_info_ptr,char *file_name,int *current_tag)\n\n{\n  int comparison_result;\n  undefined8 translated_string;\n  int *data_structure_ptr;\n  undefined (*memory_block_ptr) [16];\n  long offset;\n  char *error_message;\n  \n  if ((file_name != (char *)0x0) && (current_tag != (int *)0x0)) {\n    if (*(long *)(debug_info_ptr + 0x10) == 0) {\n      error_message = \"debug_tag_type_0010c6be: no current file\";\n    }\n    else {\n      if (*current_tag != 0x17) {\n        data_structure_ptr = (int *)initialize_data_structure_00112904(0x17,0);\n        if (data_structure_ptr == (int *)0x0) {\n          return (int *)0x0;\n        }\n        memory_block_ptr = (undefined (*) [16])xmalloc(0x10);\n        offset = *(long *)(debug_info_ptr + 0x10);\n        *memory_block_ptr = ZEXT816(0);\n        *(int **)(*memory_block_ptr + 8) = current_tag;\n        *(undefined (**) [16])(data_structure_ptr + 4) = memory_block_ptr;\n        offset = initialize_memory_00112925(offset + 0x10,file_name,1,3);\n        if (offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(offset + 0x20) = data_structure_ptr;\n        *(long *)*memory_block_ptr = offset;\n        return data_structure_ptr;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(current_tag + 4) + 8),file_name);\n      error_message = \"debug_tag_type_0010c6be: extra tag attempted\";\n      if (comparison_result == 0) {\n        return current_tag;\n      }\n    }\n    translated_string = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",translated_string);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00112925",
                "fprintf",
                "dcgettext",
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "debug_tag_type_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00119970",
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "type_ptr",
                "param_4": "error_flag_ptr",
                "__ptr": "result",
                "__format": "error_msg",
                "lVar1": "result_data",
                "uVar2": "result_count",
                "uVar3": "result_capacity",
                "uVar4": "temp_count",
                "local_39": "temp_buffer"
            },
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *type_ptr,undefined *error_flag_ptr)\n\n{\n  void *result;\n  char *error_msg;\n  long result_data;\n  ulong result_count;\n  ulong result_capacity;\n  uint temp_count;\n  char temp_buffer [9];\n  \n  result_capacity = 10;\n  result_count = 0;\n  result = (void *)xmalloc(0x50);\n  *error_flag_ptr = 0;\n  for (; type_ptr != (int *)0x0; type_ptr = *(int **)(type_ptr + 6)) {\n    if (*type_ptr != 0x2e) {\n      error_msg = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_msg);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(type_ptr + 4) == 0) break;\n    result_data = FUNC_0010b0fa(arg1,arg2,*(long *)(type_ptr + 4),0,temp_buffer);\n    if (result_data == 0) {\n      if (temp_buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *error_flag_ptr = 1;\n    }\n    else {\n      temp_count = (int)result_count + 1;\n      if ((uint)result_capacity <= temp_count) {\n        result_capacity = (ulong)((uint)result_capacity + 10);\n        result = (void *)xrealloc(result,result_capacity << 3);\n      }\n      *(long *)((long)result + result_count * 8) = result_data;\n      result_count = (ulong)temp_count;\n    }\n  }\n  *(undefined8 *)((long)result + result_count * 8) = 0;\n  return result;\n}\n\n",
            "called": [
                "xrealloc",
                "fprintf",
                "free",
                "dcgettext",
                "FUN_0010b0fa",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "initialize_section_0011a2e0",
                "param_1": "sourceData",
                "param_2": "binaryData",
                "uVar1": "sectionPointer",
                "uVar2": "errorMessage",
                "lVar3": "sectionData",
                "lVar4": "sectionOffset"
            },
            "code": "\nlong initializeSection_0011a2e0(long sourceData,long binaryData)\n\n{\n  undefined8 sectionPointer;\n  undefined8 errorMessage;\n  long sectionData;\n  long sectionOffset;\n  \n  sectionData = (**(code **)(*(long *)(binaryData + 8) + 0x208))(binaryData);\n  sectionOffset = *(long *)(sourceData + 0x20);\n  *(undefined8 *)(sectionData + 8) = *(undefined8 *)(sourceData + 8);\n  *(undefined8 *)(sectionData + 0x10) = *(undefined8 *)(sourceData + 0x10);\n  *(undefined4 *)(sectionData + 0x18) = *(undefined4 *)(sourceData + 0x18);\n  if (sectionOffset == 0) {\n    sectionOffset = 0x128598;\n  }\n  else {\n    sectionOffset = bfd_get_section_by_name(binaryData);\n    if (sectionOffset == 0) {\n      sectionPointer = *(undefined8 *)(sourceData + 0x20);\n      errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_and_exit_error_00119dd0(errorMessage,sectionPointer);\n    }\n  }\n  *(long *)(sectionData + 0x20) = sectionOffset;\n  return sectionData;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_section_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "update_hash_table_0010e8a9",
                "param_1": "input_str",
                "param_2": "hash_table",
                "param_3": "data",
                "__s": "formatted_str",
                "uVar1": "result",
                "sVar2": "data_length"
            },
            "code": "\nundefined4 update_hash_table_0010e8a9(undefined8 input_str,undefined8 hash_table,char *data)\n\n{\n  undefined4 result;\n  size_t data_length;\n  char *formatted_str;\n  \n  data_length = strlen(data);\n  formatted_str = (char *)xmalloc(data_length + 0x14);\n  sprintf(formatted_str,\"%s:c=f%g\",input_str,data);\n  result = update_hash_table_0010e8a9_0010e2f0(hash_table,0x80,0,0,formatted_str);\n  if ((char)result != '\\0') {\n    free(formatted_str);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "update_hash_table_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "unaff_RBP": "currentToken",
                "__s": "remainingString",
                "sVar4": "stringLength",
                "iVar5": "intLength",
                "pcVar3": "commaPosition",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "sectionName",
                "auVar6": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] parseSectionFlags_00104ad6(void)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *currentToken;\n  char *remainingString;\n  size_t stringLength;\n  int intLength;\n  uint sectionFlags;\n  char *sectionName;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    remainingString = currentToken;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (remainingString == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = sectionFlags;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              commaPosition = strchr(remainingString,0x2c);\n              if (commaPosition == (char *)0x0) {\n                stringLength = strlen(remainingString);\n                intLength = (int)stringLength;\n                currentToken = (char *)0x0;\n              }\n              else {\n                currentToken = commaPosition + 1;\n                intLength = (int)commaPosition - (int)remainingString;\n              }\n              stringLength = (size_t)intLength;\n              iVar1 = strncasecmp(sectionName,remainingString,stringLength);\n              if (iVar1 != 0) break;\n              sectionFlags = sectionFlags | 1;\n              remainingString = currentToken;\n            }\n            iVar1 = strncasecmp(\"load\",remainingString,stringLength);\n            if (iVar1 != 0) break;\n            sectionFlags = sectionFlags | 2;\n            remainingString = currentToken;\n          }\n          iVar1 = strncasecmp(\"noload\",remainingString,stringLength);\n          if (iVar1 != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          remainingString = currentToken;\n        }\n        iVar1 = strncasecmp(\"readonly\",remainingString,stringLength);\n        if (iVar1 != 0) break;\n        sectionFlags = sectionFlags | 8;\n        remainingString = currentToken;\n      }\n      iVar1 = strncasecmp(\"debug\",remainingString,stringLength);\n      if (iVar1 == 0) break;\n      iVar1 = strncasecmp(\"code\",remainingString,stringLength);\n      if (iVar1 == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        remainingString = currentToken;\n      }\n      else {\n        iVar1 = strncasecmp(\"data\",remainingString,stringLength);\n        if (iVar1 == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          remainingString = currentToken;\n        }\n        else {\n          iVar1 = strncasecmp(\"rom\",remainingString,stringLength);\n          if (iVar1 == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            remainingString = currentToken;\n          }\n          else {\n            iVar1 = strncasecmp(\"exclude\",remainingString,stringLength);\n            if (iVar1 == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              remainingString = currentToken;\n            }\n            else {\n              iVar1 = strncasecmp(\"share\",remainingString,stringLength);\n              if (iVar1 == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                remainingString = currentToken;\n              }\n              else {\n                iVar1 = strncasecmp(\"contents\",remainingString,stringLength);\n                if (iVar1 == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  remainingString = currentToken;\n                }\n                else {\n                  iVar1 = strncasecmp(\"merge\",remainingString,stringLength);\n                  if (iVar1 == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    remainingString = currentToken;\n                  }\n                  else {\n                    iVar1 = strncasecmp(\"strings\",remainingString,stringLength);\n                    if (iVar1 != 0) {\n                      commaPosition = (char *)xmalloc((long)(intLength + 1));\n                      strncpy(commaPosition,remainingString,stringLength);\n                      commaPosition[stringLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_00119ed0(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_and_exit_error_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    remainingString = currentToken;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strncasecmp",
                "FUN_00104ad6",
                "FUN_00119dd0",
                "strncpy",
                "strlen",
                "dcgettext",
                "strchr",
                "xmalloc",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "in_RAX": "RAXValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkRAXValue_001087da(void)\n\n{\n  long RAXValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = RAXValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_rax_value_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f",
                "FUN_001125fa"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilationUnit",
                "param_2": "typeName",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "currentCompilationUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errorString",
                "puVar4": "currentType",
                "lVar5": "currentUnit",
                "auVar7": "returnValue"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long compilationUnit,char *typeName,undefined8 param3,undefined8 param4)\n\n{\n  long currentCompilationUnit;\n  int comparisonResult;\n  undefined8 errorString;\n  undefined8 *currentType;\n  long currentUnit;\n  undefined8 *puVar6;\n  undefined returnValue [16];\n  \n  currentCompilationUnit = *(long *)(compilationUnit + 8);\n  if (currentCompilationUnit == 0) {\n    errorString = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorString);\n  }\n  else {\n    for (currentUnit = *(long *)(compilationUnit + 0x20); currentUnit != 0; currentUnit = *(long *)(currentUnit + 8)) {\n      if (*(undefined8 **)(currentUnit + 0x28) != (undefined8 *)0x0) {\n        for (currentType = (undefined8 *)**(undefined8 **)(currentUnit + 0x28); currentType != (undefined8 *)0x0;\n            currentType = (undefined8 *)*currentType) {\n          if (*(int *)((long)currentType + 0x14) == 0) {\n            if (*(char *)currentType[1] == *typeName) {\n              comparisonResult = strcmp((char *)currentType[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (puVar6 = *(undefined8 **)(currentCompilationUnit + 8); puVar6 != (undefined8 *)0x0;\n        puVar6 = (undefined8 *)*puVar6) {\n      if ((undefined8 *)puVar6[2] != (undefined8 *)0x0) {\n        for (currentType = *(undefined8 **)(undefined8 *)puVar6[2]; currentType != (undefined8 *)0x0;\n            currentType = (undefined8 *)*currentType) {\n          if (*(int *)((long)currentType + 0x14) == 0) {\n            if (*(char *)currentType[1] == *typeName) {\n              comparisonResult = strcmp((char *)currentType[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorString = 0;\nLAB_00109223:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = errorString;\n  return returnValue;\nLAB_00109216:\n  errorString = currentType[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "strcmp",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "handle_input_conditions_0010829e",
                "unaff_EBP": "inputCode",
                "uVar1": "result"
            },
            "code": "\nundefined8 handleInputConditions_0010829e(void)\n\n{\n  undefined8 result;\n  int inputCode;\n  \n  if (inputCode == 5) {\n    result = check_string_length_00113ede();\n    return result;\n  }\n  if ((inputCode != 4) && (inputCode == 6)) {\n    result = check_and_invert_length_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "handle_input_conditions_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_architecture_info_00104943",
                "in_RAX": "inputString",
                "lVar3": "convertedValue",
                "iVar1": "defaultLength",
                "iVar9": "currentLength",
                "uStack000000000000000c": "indentationLevel",
                "unaff_R15D": "paramValue",
                "param_7": "maxLength",
                "param_11": "architecture",
                "param_13": "dataStructure",
                "iVar2": "comparisonResult",
                "sVar4": "strLen",
                "pcVar5": "archMach",
                "uVar6": "bfdPrintable",
                "iVar7": "i",
                "lVar8": "startIndex",
                "uVar10": "loopCounter",
                "uVar11": "archIndex"
            },
            "code": "\n\n\nvoid printArchitectureInfo_00104943(void)\n\n{\n  int defaultLength;\n  int comparisonResult;\n  char *inputString;\n  long convertedValue;\n  size_t strLen;\n  char *archMach;\n  undefined8 bfdPrintable;\n  int i;\n  long startIndex;\n  int currentLength;\n  uint paramValue;\n  ulong loopCounter;\n  uint archIndex;\n  int maxLength;\n  uint indentationLevel;\n  undefined8 architecture;\n  long dataStructure;\n  \n  convertedValue = strtol(inputString,(char **)0x0,10);\n  defaultLength = (int)convertedValue;\n  currentLength = maxLength;\n  indentationLevel = paramValue;\n  if (defaultLength == 0) {\n    defaultLength = 0x50;\n  }\n  do {\n    maxLength = currentLength;\n    if (architecture._4_4_ <= maxLength) {\n      return;\n    }\n    startIndex = (long)maxLength;\n    i = (defaultLength - indentationLevel) + -1;\n    convertedValue = startIndex;\n    do {\n      currentLength = (int)convertedValue;\n      if (architecture._4_4_ <= currentLength) break;\n      strLen = strlen(*(char **)(dataStructure + convertedValue * 0x60));\n      convertedValue = convertedValue + 1;\n      i = (i - (int)strLen) + -1;\n    } while (-1 < i);\n    printf(\"\\n%*s\",(ulong)(indentationLevel + 1),&DAT_0011b4a1);\n    for (convertedValue = startIndex * 0x60; ((ulong)(uint)(currentLength - maxLength) + startIndex) * 0x60 - convertedValue != 0;\n        convertedValue = convertedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(dataStructure + convertedValue));\n    }\n    i = 2;\n    putc(10,_stdout);\n    do {\n      archMach = (char *)bfd_printable_arch_mach(i,0);\n      comparisonResult = strcmp(archMach,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        bfdPrintable = bfd_printable_arch_mach(i,0);\n        printf(\"%*s \",(ulong)indentationLevel,bfdPrintable);\n        archIndex = i - 2;\n        convertedValue = startIndex * 0x60;\n        comparisonResult = maxLength;\n        while (currentLength != comparisonResult) {\n          archMach = *(char **)(dataStructure + convertedValue);\n          if (*(char *)((long)(char **)(dataStructure + convertedValue) + (ulong)archIndex + 8) == '\\0') {\n            strLen = strlen(archMach);\n            for (loopCounter = strLen & 0xffffffff; (int)loopCounter != 0; loopCounter = (ulong)((int)loopCounter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archMach,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (currentLength != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          convertedValue = convertedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      i = i + 1;\n    } while (i != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "fputs",
                "strlen",
                "bfd_printable_arch_mach",
                "strtol",
                "printf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_architecture_info_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_data_structure_00113e23",
                "param_1": "initialValue",
                "param_2": "paramValue",
                "lVar1": "dataStructure",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong createDataStructure_00113e23(undefined8 initialValue,undefined8 paramValue)\n\n{\n  long dataStructure;\n  undefined8 *allocatedMemory;\n  \n  dataStructure = initialize_data_structure_00112904(1,0);\n  if (dataStructure != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = initialValue;\n    allocatedMemory[1] = paramValue;\n    *(undefined8 **)(dataStructure + 0x10) = allocatedMemory;\n  }\n  return dataStructure;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00108b3e",
                "FUN_0011256b",
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "param_1": "stabMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStab_00108fb9(undefined8 stabMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,stabMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "print_bad_stab_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_integer_from_string_00108ea1",
                "iVar1": "current_value",
                "pbVar2": "string",
                "pbVar3": "next_char",
                "uVar4": "return_value"
            },
            "code": "\nulong parse_integer_from_string_00108ea1(byte **param_1,int *param_2)\n\n{\n  int current_value;\n  byte *string;\n  byte *next_char;\n  ulong return_value;\n  \n  string = *param_1;\n  return_value = 0;\n  if (((&_sch_istable)[(ulong)*string * 2] & 4) != 0) {\n    next_char = string + 1;\n    current_value = (char)*string + -0x30;\n    *param_2 = current_value;\n    *param_1 = next_char;\n    if (((&_sch_istable)[(ulong)string[1] * 2] & 4) != 0) {\n      do {\n        string = next_char;\n        current_value = current_value * 10 + -0x30 + (int)(char)*string;\n        next_char = string + 1;\n      } while (((&_sch_istable)[(ulong)string[1] * 2] & 4) != 0);\n      if (string[1] == 0x5f) {\n        next_char = string + 2;\n        *param_1 = next_char;\n        *param_2 = current_value;\n      }\n    }\n    return_value = CONCAT71((int7)((ulong)next_char >> 8),1);\n  }\n  return return_value & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_integer_from_string_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "update_file_permissions_00108072",
                "unaff_RBX": "fileData",
                "unaff_RBP": "basePointer",
                "unaff_R12": "temporaryVar1",
                "unaff_R14B": "flag1",
                "unaff_R15": "temporaryVar2",
                "lVar5": "errorMessage",
                "lVar6": "permissions1",
                "lVar7": "permissions2",
                "lVar8": "offset",
                "uVar2": "filePointer",
                "uVar4": "alignment",
                "bVar1": "byteVar",
                "dcgettext": "getText",
                "update_permissions_00114190": "updatePermissions",
                "set_alignment_00108179": "setAlignment",
                "find_value_00115d00": "findValue",
                "copy_private_data_0010808f": "copyPrivateData",
                "print_error_message_001126c0": "printErrorMessage"
            },
            "code": "\n\n\nvoid updateFilePermissions_00108072(void)\n\n{\n  byte byteVar;\n  undefined8 filePointer;\n  char cVar3;\n  uint alignment;\n  long errorMessage;\n  long permissions1;\n  long permissions2;\n  undefined8 *fileData;\n  long basePointer;\n  long temporaryVar1;\n  long offset;\n  char flag1;\n  long temporaryVar2;\n  \n  errorMessage = dcgettext(0,\"failed to set size\",5);\n  offset = fileData[6];\n  permissions1 = updatePermissions(*fileData,0,0x18);\n  if (permissions1 == 0) {\n    *(byte *)(temporaryVar2 + 0x28) = *(byte *)(temporaryVar2 + 0x28) | 1;\n    filePointer = *fileData;\n    offset = offset + _DAT_00127990;\n    *(long *)(temporaryVar2 + 0x30) = offset;\n    *(long *)(temporaryVar2 + 0x38) = offset;\n    offset = fileData[7];\n    permissions1 = updatePermissions(filePointer,0,0x60);\n    if (permissions1 == 0) goto LAB_00115695;\nLAB_00115860:\n    permissions2 = *(long *)(permissions1 + 0x20);\n    if ((*(byte *)(permissions1 + 0x14) & 0x40) != 0) {\n      permissions2 = permissions2 + offset;\n    }\n    *(long *)(temporaryVar2 + 0x38) = permissions2;\n    offset = updatePermissions(*fileData,0,0x200);\n    if (offset != 0) goto LAB_00115889;\nLAB_001156b8:\n    alignment = *(uint *)((long)fileData + 0x7c);\n    if (alignment < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(temporaryVar2 + 0xb4) = *(undefined4 *)((long)fileData + 0xb4);\n    *(byte *)(temporaryVar2 + 0x28) =\n         *(byte *)(temporaryVar2 + 0x28) & 0xcf | *(byte *)(fileData + 5) & 0x30;\n    fileData[0xc] = temporaryVar2;\n    fileData[0xb] = 0;\n    byteVar = *(byte *)((long)fileData + 0x27);\n  }\n  else {\n    permissions2 = *(long *)(permissions1 + 0x18);\n    if ((*(byte *)(permissions1 + 0x14) & 8) == 0) {\n      permissions2 = permissions2 + offset;\n    }\n    *(byte *)(temporaryVar2 + 0x28) = *(byte *)(temporaryVar2 + 0x28) | 1;\n    filePointer = *fileData;\n    *(long *)(temporaryVar2 + 0x30) = permissions2;\n    *(long *)(temporaryVar2 + 0x38) = permissions2;\n    offset = fileData[7];\n    permissions1 = updatePermissions(filePointer,0,0x60);\n    if (permissions1 != 0) goto LAB_00115860;\nLAB_00115695:\n    filePointer = *fileData;\n    *(long *)(temporaryVar2 + 0x38) = offset + _DAT_00127990;\n    offset = updatePermissions(filePointer,0,0x200);\n    if (offset == 0) goto LAB_001156b8;\nLAB_00115889:\n    alignment = *(uint *)(offset + 0x2c);\n    if (0x3e < alignment) {\n      setAlignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(temporaryVar2 + 0x7c) = alignment;\n    *(undefined4 *)(temporaryVar2 + 0xb4) = *(undefined4 *)((long)fileData + 0xb4);\n    *(byte *)(temporaryVar2 + 0x28) =\n         *(byte *)(temporaryVar2 + 0x28) & 0xcf | *(byte *)(fileData + 5) & 0x30;\n    fileData[0xc] = temporaryVar2;\n    fileData[0xb] = 0;\n    byteVar = *(byte *)((long)fileData + 0x27);\n  }\n  if ((byteVar & 2) != 0) {\n    offset = fileData[0x1a];\n    permissions1 = findValue(offset,fileData[0x1c]);\n    if ((permissions1 != 0) &&\n       (permissions2 = *(long *)(temporaryVar1 + 8), *(uint *)(permissions1 + 0x18) = *(uint *)(permissions1 + 0x18) | 0x20,\n       *(int *)(permissions2 + 8) == 5)) {\n      *(long *)(offset + 0xb0) = permissions1;\n      cVar3 = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (cVar3 == '\\0') {\n        copyPrivateData();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  cVar3 = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (cVar3 == '\\0') {\n    copyPrivateData();\n    return;\n  }\nLAB_0011571e:\n  if (flag1 != '\\0') {\n    *(undefined4 *)(*(long *)(temporaryVar2 + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    printErrorMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00108179",
                "dcgettext",
                "FUN_00114190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "update_file_permissions_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "extract_and_initialize_data_structure_0010a2b9",
                "param_1": "structure_address",
                "param_2": "is_null",
                "cVar1": "item",
                "__s": "extracted_item",
                "sVar2": "item_length",
                "__s_00": "modified_item",
                "lVar3": "count",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] extract_and_initialize_data_structure_0010a2b9(long structure_address,char is_null,undefined8 param_3,undefined8 param_4)\n\n{\n  char item;\n  char *extracted_item;\n  size_t item_length;\n  char *modified_item;\n  long count;\n  undefined result [16];\n  \n  item = *(char *)(*(long *)(structure_address + 0x60) + 0x1c);\n  extracted_item = (char *)extract_and_free_next_item_00109b2f();\n  item_length = strlen(extracted_item);\n  modified_item = (char *)xmalloc(item_length + 0x1e);\n  if (is_null == '\\0') {\n    *modified_item = '\\0';\n    count = 0;\n    is_null = item;\n  }\n  else {\n    count = *(long *)(structure_address + 0x68);\n    *(long *)(structure_address + 0x68) = count + 1;\n    sprintf(modified_item,\"%ld=@S;\",count);\n  }\n  item_length = strlen(modified_item);\n  sprintf(modified_item + item_length,\"S%s\",extracted_item);\n  free(extracted_item);\n  result._0_4_ = initialize_data_structure_00109b52(structure_address,modified_item,count,is_null,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(modified_item);\n  }\n  result._8_8_ = param_4;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_initialize_data_structure_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_and_hash_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "arg3",
                "param_6": "arg4",
                "iVar1": "counter",
                "cVar2": "result"
            },
            "code": "\nundefined updateAndHash_0010ec73(long *data,long value,undefined8 arg1,undefined8 arg2,\n                      undefined8 arg3,undefined8 arg4)\n\n{\n  int counter;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  counter = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = update_hash_table_0010e2f0(data,0xc0,0,data[0x41],0,arg4,arg2), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_and_hash_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "determine_endianness_00114e00",
                "param_1": "endiannessValue"
            },
            "code": "\nvoid determineEndianness_00114e00(int endiannessValue)\n\n{\n  if (endiannessValue == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessValue == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "determine_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_delete_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "permissions",
                "param_4": "fileSize",
                "param_5": "setTimeFlag",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errorCodePtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "uVar5": "bytesCopied",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndDeleteFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 permissions,undefined8 fileSize,char setTimeFlag,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errorCodePtr;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  ulong bytesCopied;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    bytesCopied = 0;\n  }\n  else {\n    copyResult = copy_file_contents_00115a90(permissions,destinationFilePath,fileSize);\n    bytesCopied = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorCodePtr = __errno_location();\n      errorMessage = strerror(*errorCodePtr);\n      translatedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00119ed0(translatedErrorMessage,destinationFilePath,errorMessage);\n    }\n    unlink(sourceFilePath);\n  }\n  if (setTimeFlag != '\\0') {\n    set_time_0011a350(destinationFilePath,fileSize);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = bytesCopied;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "process_data_0010adf2"
            },
            "code": "\nvoid process_data_0010adf2(void)\n\n{\n  process_data_0010adf2_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "parse_and_add_data_0010d7d4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "start_address",
                "cVar2": "result",
                "uVar3": "expanded_data",
                "lVar4": "data_array",
                "plVar5": "local_data_array",
                "uVar6": "data_count",
                "local_40": "temp_data"
            },
            "code": "\nundefined4\nparse_and_add_data_0010d7d4(undefined8 param1,undefined8 *param2,long *param3,uint *param4,uint *param5)\n\n{\n  undefined8 start_address;\n  char result;\n  undefined4 expanded_data;\n  long data_array;\n  long *local_data_array;\n  uint data_count;\n  long temp_data [2];\n  \n  start_address = *param2;\n  local_data_array = temp_data;\n  if (param3 == (long *)0x0) {\n    local_data_array = (long *)0x0;\n  }\n  result = parse_binary_data_0010c95e(param1,param2,local_data_array);\n  if ((result != '\\0') &&\n     (expanded_data = expand_and_add_to_data_array_00109be3(param1,start_address,(int)*param2 - (int)start_address), (char)expanded_data != '\\0')) {\n    if (param3 == (long *)0x0) {\n      return expanded_data;\n    }\n    if (temp_data[0] != 0) {\n      if (*param5 <= *param4 + 1) {\n        data_count = *param5 + 10;\n        data_array = *param3;\n        *param5 = data_count;\n        data_array = xrealloc(data_array,(ulong)data_count << 3);\n        *param3 = data_array;\n      }\n      data_count = *param4;\n      *(long *)(*param3 + (ulong)data_count * 8) = temp_data[0];\n      *param4 = data_count + 1;\n      return expanded_data;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c95e",
                "xrealloc",
                "FUN_00109be3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "parse_and_add_data_0010d7d4",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = expand_and_add_to_data_array_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "get_file_info_00113f50",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "error_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stat"
            },
            "code": "\nlong get_file_info_00113f50(char *file_path)\n\n{\n  int status;\n  int *error_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stat);\n    if (status < 0) {\n      error_ptr = __errno_location();\n      if (*error_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00119ed0(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*error_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00119ed0(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stat.st_size) {\n        return file_stat.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_00104966",
                "stat",
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "get_file_info_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "get_zero_001087fd",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t getZero_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "get_zero_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "uVar1": "data",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 data;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  data = DAT_001275e0;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,data);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fflush",
                "free",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0010871c",
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "process_binary_data_0011378f",
                "param_1": "binary_data_ptr",
                "param_2": "output_data_ptr",
                "param_3": "output_size_ptr",
                "param_4": "hash_value_ptr",
                "param_5": "file_names_ptr",
                "param_6": "status_ptr",
                "auVar1": "temp_array",
                "cVar2": "char_var",
                "uVar3": "return_value",
                "uVar4": "error_message",
                "puVar5": "pointer_var",
                "sVar6": "string_length",
                "lVar7": "loop_var",
                "puVar8": "pointer_var_2",
                "puVar9": "pointer_var_3",
                "__dest": "destination_ptr",
                "puVar10": "pointer_var_4",
                "plVar11": "long_var_ptr",
                "bVar12": "byte_var",
                "local_258": "param_1_copy",
                "local_250": "memory_size",
                "local_248": "local_var_1",
                "uStack_244": "local_var_2",
                "uStack_240": "local_var_3",
                "uStack_23c": "local_var_4",
                "local_238": "local_var_5",
                "local_228": "local_var_6",
                "local_220": "local_var_7",
                "local_1f8": "local_var_8",
                "local_1f0": "local_var_9",
                "local_1e8": "local_array",
                "local_a0": "local_var_10",
                "local_78": "local_var_11",
                "uStack_70": "local_var_12",
                "local_68": "local_var_13",
                "local_60": "local_var_14",
                "local_58": "local_var_15",
                "uStack_54": "local_var_16",
                "uStack_50": "local_var_17",
                "uStack_4c": "local_var_18"
            },
            "code": "\nundefined4\nprocess_binary_data_0011378f(undefined8 *binary_data_ptr,undefined8 *output_data_ptr,long *output_size_ptr,undefined8 *hash_value_ptr,\n            undefined8 *file_names_ptr,undefined8 *status_ptr)\n\n{\n  undefined temp_array [16];\n  char char_var;\n  undefined4 return_value;\n  undefined8 error_message;\n  undefined *pointer_var;\n  size_t string_length;\n  long loop_var;\n  undefined8 *pointer_var_2;\n  undefined4 *pointer_var_3;\n  char *destination_ptr;\n  undefined8 *pointer_var_4;\n  long *long_var_ptr;\n  byte byte_var;\n  undefined8 *param_1_copy;\n  long memory_size;\n  undefined4 local_var_1;\n  undefined4 local_var_2;\n  undefined4 local_var_3;\n  undefined4 local_var_4;\n  undefined local_var_5 [16];\n  undefined8 local_var_6;\n  undefined local_var_7 [40];\n  undefined8 local_var_8;\n  undefined8 local_var_9;\n  undefined4 local_array [82];\n  undefined local_var_10 [40];\n  undefined local_var_11 [8];\n  undefined8 local_var_12;\n  undefined8 local_var_13;\n  undefined4 local_var_14;\n  undefined4 local_var_15;\n  undefined4 local_var_16;\n  undefined4 local_var_17;\n  undefined4 local_var_18;\n  \n  byte_var = 0;\n  local_var_1 = 0;\n  local_var_2 = 0;\n  local_var_3 = 500;\n  local_var_4 = 0;\n  param_1_copy = binary_data_ptr;\n  memory_size = xmalloc(500);\n  local_var_6 = 1;\n  local_var_5 = ZEXT816(0);\n  char_var = bfd_hash_table_init(local_var_7,allocate_and_initialize_hash_0010bb52,0x30);\n  if ((char_var == '\\0') || (char_var = bfd_hash_table_init(local_var_10,allocate_and_initialize_hash_0010bb52,0x30), char_var == '\\0')) {\n    return_value = bfd_get_error();\n    error_message = bfd_errmsg(return_value);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    local_var_8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_var_11 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    pointer_var_3 = local_array;\n    for (loop_var = 0x52; loop_var != 0; loop_var = loop_var + -1) {\n      *pointer_var_3 = 0;\n      pointer_var_3 = pointer_var_3 + (ulong)byte_var * -2 + 1;\n    }\n    local_var_13 = 0;\n    local_var_14 = 0;\n    local_var_9 = 1;\n    local_var_15 = 0;\n    local_var_16 = 0;\n    local_var_17 = 0xffffffff;\n    local_var_18 = 0xffffffff;\n    char_var = update_hash_table_0010e2f0(&param_1_copy,0,0,0,0);\n    temp_array = _local_var_11;\n    if (char_var != '\\0') {\n      local_var_11._4_4_ = local_var_2;\n      local_var_11._0_4_ = local_var_1;\n      local_var_12 = temp_array._8_8_;\n      char_var = update_hash_table_0010e2f0(&param_1_copy,100,0,0,*binary_data_ptr);\n      if (char_var != '\\0') {\n        *(int *)(output_data_ptr + 6) = *(int *)(output_data_ptr + 6) + 1;\n        output_data_ptr[10] = 0;\n        pointer_var_4 = (undefined8 *)*output_data_ptr;\n        *(undefined4 *)(output_data_ptr + 7) = *(undefined4 *)((long)output_data_ptr + 0x34);\n        for (; pointer_var_4 != (undefined8 *)0x0; pointer_var_4 = (undefined8 *)*pointer_var_4) {\n          output_data_ptr[8] = pointer_var_4[2];\n          *(undefined4 *)(output_data_ptr + 9) = 0;\n          char_var = thunk_update_hash_table_0010e439(&param_1_copy,*(undefined8 *)(pointer_var_4[1] + 8));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          long_var_ptr = (long *)pointer_var_4[1];\n          if (long_var_ptr != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)long_var_ptr[2] != (undefined8 *)0x0) {\n                for (pointer_var_2 = *(undefined8 **)(undefined8 *)long_var_ptr[2]; pointer_var_2 != (undefined8 *)0x0;\n                    pointer_var_2 = (undefined8 *)*pointer_var_2) {\n                  char_var = process_debug_data_001135a5(output_data_ptr,&param_1_copy);\n                  if (char_var == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              long_var_ptr = (long *)*long_var_ptr;\n              if (long_var_ptr == (long *)0x0) break;\n              char_var = update_hash_table_0010e439(&param_1_copy,long_var_ptr[1]);\n              if (char_var == '\\0') {\n                return 0;\n              }\n            }\n          }\n          char_var = check_files_and_update_00112502(output_data_ptr,&param_1_copy,0xffffffffffffffff);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(local_var_18,local_var_17) == -1) &&\n           (return_value = update_hash_table_0010e2f0(&param_1_copy,100,0,local_var_13,0), (char)return_value != '\\0')) {\n          (**(code **)(binary_data_ptr[1] + 0x50))(local_var_6,memory_size + 8);\n          *output_size_ptr = memory_size;\n          *hash_value_ptr = CONCAT44(local_var_2,local_var_1);\n          *status_ptr = local_var_6;\n          pointer_var = (undefined *)xmalloc();\n          *pointer_var = 0;\n          destination_ptr = pointer_var + 1;\n          *file_names_ptr = pointer_var;\n          for (loop_var = local_var_5._0_8_; loop_var != 0; loop_var = *(long *)(loop_var + 0x18)) {\n            strcpy(destination_ptr,*(char **)(loop_var + 8));\n            string_length = strlen(destination_ptr);\n            destination_ptr = destination_ptr + string_length + 1;\n          }\n          return return_value;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_0010e439",
                "thunk_FUN_0010e439",
                "bfd_errmsg",
                "bfd_hash_table_init",
                "strlen",
                "xmalloc",
                "FUN_0010bb52",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_00112502",
                "strcpy",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_data_0011378f",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,allocate_and_initialize_hash_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,allocate_and_initialize_hash_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = update_hash_table_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = update_hash_table_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = thunk_update_hash_table_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = update_hash_table_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = check_files_and_update_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = update_hash_table_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_not_found_error_00104966",
                "piVar1": "errorPtr",
                "uVar2": "errorMessage",
                "__errno_location": "getErrnoLocation",
                "dcgettext": "getMessage",
                "print_error_message_00119ed0": "printErrorMessage",
                "strerror": "getErrorString"
            },
            "code": "\nundefined8 handleFileNotFoundError_00104966(void)\n\n{\n  int *errorPtr;\n  undefined8 errorMessage;\n  \n  errorPtr = __errno_location();\n  if (*errorPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    printErrorMessage(errorMessage);\n  }\n  else {\n    strerror(*errorPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    printErrorMessage(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_not_found_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "data"
            },
            "code": "\nvoid process_data_0010a0a0(long data)\n\n{\n  process_data_0010a0a0_00109ed3(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "print_error_message_00119ed0",
                "param_1": "err_code",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "param_8": "param7",
                "param_9": "error_message",
                "param_10": "param8",
                "param_11": "param9",
                "param_12": "param10",
                "param_13": "param11",
                "param_14": "param12",
                "in_AL": "input_flag",
                "local_d8": "buffer_size",
                "local_d4": "local_var1",
                "local_d0": "stack_ptr",
                "local_c8": "buffer_ptr",
                "local_b8": "buffer",
                "local_b0": "local_var2",
                "local_a8": "local_var3",
                "local_a0": "local_var4",
                "local_98": "local_var5",
                "local_90": "local_var6",
                "local_88": "local_param1",
                "local_78": "local_param2",
                "local_68": "local_param3",
                "local_58": "local_param4",
                "local_48": "local_param5",
                "local_38": "local_param6",
                "local_28": "local_param7",
                "local_18": "local_param8"
            },
            "code": "\nvoid print_error_message_00119ed0(undefined4 err_code,undefined4 param1,undefined4 param2,undefined4 param3,\n                 undefined4 param4,undefined4 param5,undefined4 param6,undefined4 param7,\n                 undefined8 error_message,undefined8 param8,undefined8 param9,undefined8 param10,\n                 undefined8 param11,undefined8 param12)\n\n{\n  char input_flag;\n  undefined4 buffer_size;\n  undefined4 local_var1;\n  undefined *stack_ptr;\n  undefined *buffer_ptr;\n  undefined buffer [8];\n  undefined8 local_var2;\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  undefined8 local_var6;\n  undefined4 local_param1;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 local_param4;\n  undefined4 local_param5;\n  undefined4 local_param6;\n  undefined4 local_param7;\n  undefined4 local_param8;\n  \n  if (input_flag != '\\0') {\n    local_param1 = err_code;\n    local_param2 = param1;\n    local_param3 = param2;\n    local_param4 = param3;\n    local_param5 = param4;\n    local_param6 = param5;\n    local_param7 = param6;\n    local_param8 = param7;\n  }\n  stack_ptr = &stack0x00000008;\n  buffer_size = 8;\n  buffer_ptr = buffer;\n  local_var1 = 0x30;\n  local_var2 = param8;\n  local_var3 = param9;\n  local_var4 = param10;\n  local_var5 = param11;\n  local_var6 = param12;\n  print_error_message_00119ed0_00119e70(error_message,&buffer_size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104966",
                "FUN_0010554f",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00104ad6",
                "FUN_00113f50",
                "FUN_0010e07c",
                "FUN_001152b6",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_001163d0",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00108375",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_00105828",
                "FUN_0010b800",
                "FUN_00107880",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "process_debug_data_00112c1f",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "plVar1": "dataPtr",
                "lVar2": "data",
                "puVar3": "ptr1",
                "puVar4": "ptr2",
                "cVar5": "flag",
                "piVar6": "intPtr",
                "uVar7": "result",
                "uVar8": "value",
                "iVar9": "index",
                "uVar10": "dataIndex",
                "uVar11": "result2",
                "uVar12": "value2",
                "uVar13": "index2",
                "bVar14": "boolVar",
                "local_3c": "localVar"
            },
            "code": "\n\n\nundefined8 processDebugData_00112c1f(ulong param1,undefined8 param2,int *param3,long param4)\n\n{\n  long *dataPtr;\n  long data;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  char flag;\n  int *intPtr;\n  undefined8 result;\n  undefined8 value;\n  int index;\n  undefined4 dataIndex;\n  undefined8 result2;\n  ulong value2;\n  uint index2;\n  bool boolVar;\n  uint localVar;\n  \n  value2 = param1;\nLAB_00112c39:\n  if (param3 != (int *)0x0) {\n    index = *param3;\n    if (index - 0x16U < 2) {\n      do {\n        dataPtr = *(long **)(param3 + 4);\n        index2 = *(uint *)(param1 + 0x30);\n        value2 = (ulong)index2;\n        data = *dataPtr;\n        if (*(uint *)(data + 0x10) == index2) {\n          if (index == 0x16) {\n            result = find_matching_data_0010bba1(param2,*(undefined8 *)(data + 8));\n            return result;\n          }\nLAB_00112c94:\n          intPtr = (int *)process_debug_info_00112b6e(param3,0);\n          if (intPtr == (int *)0x0) goto LAB_00112dd6;\n          if ((*intPtr - 7U < 4) && (*(long *)(intPtr + 4) != 0)) {\n            if ((*(uint *)(*(long *)(intPtr + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n               (flag = set_class_id_0010c7a0(param1,*(undefined8 *)(**(long **)(param3 + 4) + 8),intPtr),\n               flag == '\\0')) {\n              return 0;\n            }\n            index2 = *(uint *)(*(long *)(intPtr + 4) + 0xc);\n          }\n          else {\n            index2 = 0;\n          }\n          index = *intPtr;\n          result = *(undefined8 *)(**(long **)(param3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (index == 0x17) {\n          if (data != param4) goto LAB_00112c94;\n          *(uint *)(param4 + 0x10) = index2;\n          param4 = *dataPtr;\n          param3 = (int *)dataPtr[1];\n          goto LAB_00112c39;\n        }\n        if (param4 != 0) {\n          *(uint *)(param4 + 0x10) = index2;\n        }\n        param3 = (int *)dataPtr[1];\n        if (param3 == (int *)0x0) goto LAB_00112dd6;\n        index = *param3;\n        param4 = 0;\n      } while (index - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (param4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param4 + 0x10) = *(undefined4 *)(param1 + 0x30);\n      if (*(int *)(param4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(param4 + 8);\n    }\n    switch(index) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = initialize_or_increment_data_structure_00109dfe(param2);\n      return result;\n    case 3:\n      result = initialize_data_structure_0010b800(param2,param3[1],*(undefined *)(param3 + 4));\n      return result;\n    case 4:\n      result = initialize_data_structure_0010b948(param2,param3[1]);\n      return result;\n    case 5:\n      result = update_data_structure_00109e76(param2,param3[1]);\n      return result;\n    case 6:\n      result = initialize_and_assign_data_00109d3e(param2,param3[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(param3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (flag = set_class_id_0010c7a0(param1,result,param3), flag == '\\0')) {\n          return 0;\n        }\n        data = *(long *)(param3 + 4);\n        if (*(int *)(param1 + 0x30) == *(int *)(data + 8)) {\n          index2 = *(uint *)(data + 0xc);\n          if (index2 <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          index = *param3;\nLAB_00112ed2:\n          result = initialize_data_structure_00109d5c(param2,result,index2,index);\n          return result;\n        }\n        *(int *)(data + 8) = *(int *)(param1 + 0x30);\n      }\n      dataIndex = 0;\n      if (*(long *)(param3 + 4) != 0) {\n        dataIndex = *(undefined4 *)(*(long *)(param3 + 4) + 0xc);\n      }\n      flag = initialize_data_structure_0010a69a(param2,result,dataIndex,*param3 == 7,param3[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param3 + 4) != (long *)0x0) && (value2 = 0, **(long **)(param3 + 4) != 0)) {\n        while( true ) {\n          ptr2 = *(undefined8 **)(**(long **)(param3 + 4) + value2 * 8);\n          if (ptr2 == (undefined8 *)0x0) break;\n          flag = processDebugData_00112c1f(param1,param2,ptr2[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = generate_field_string_0010ba08(param2,*ptr2,*(undefined4 *)(ptr2 + 3),\n                               *(undefined4 *)((long)ptr2 + 0x1c),*(undefined4 *)(ptr2 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          value2 = (ulong)((int)value2 + 1);\n        }\n      }\n      result = process_data_0010a77a(param2);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(param3 + 4) == 0) {\n        index2 = 0;\n        intPtr = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (value2 = param1, flag = set_class_id_0010c7a0(param1,result,param3), flag == '\\0')) {\n          return 0;\n        }\n        data = *(long *)(param3 + 4);\n        index2 = *(uint *)(data + 0xc);\n        if (*(int *)(param1 + 0x30) == *(int *)(data + 8)) {\n          if (index2 <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          index = *param3;\n          goto LAB_00112ed2;\n        }\n        intPtr = *(int **)(data + 0x20);\n        *(int *)(data + 8) = *(int *)(param1 + 0x30);\n        if (((intPtr != (int *)0x0) && (param3 != intPtr)) &&\n           (value2 = param1, flag = processDebugData_00112c1f(param1,param2,intPtr,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = process_data_0010a83e(param2,result,index2,*param3 == 9,param3[1],intPtr != (int *)0x0,\n                           param3 == intPtr,value2);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param3 + 4) != (long *)0x0) {\n        index2 = 0;\n        if (**(long **)(param3 + 4) != 0) {\n          while (ptr2 = *(undefined8 **)(**(long **)(param3 + 4) + (ulong)index2 * 8),\n                ptr2 != (undefined8 *)0x0) {\n            flag = processDebugData_00112c1f(param1,param2,ptr2[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr2 + 0x14) == '\\0') {\n              flag = generate_field_string_0010ba08(param2,*ptr2,*(undefined4 *)(ptr2 + 3));\n            }\n            else {\n              flag = create_formatted_string_0010a94e(param2,*ptr2,ptr2[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            index2 = index2 + 1;\n          }\n        }\n        index2 = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x10) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x10) + (ulong)index2 * 8),\n                ptr2 != (undefined8 *)0x0) {\n            flag = processDebugData_00112c1f(param1,param2,*ptr2,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = process_data_0010aa53(param2,*(undefined4 *)(ptr2 + 1),\n                                 *(undefined *)((long)ptr2 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            index2 = index2 + 1;\n          }\n        }\n        localVar = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x18) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x18) + (ulong)localVar * 8),\n                ptr2 != (undefined8 *)0x0) {\n            flag = update_string_with_prefix_0010ab4d(param2,*ptr2);\n            if (flag == '\\0') {\n              return 0;\n            }\n            index2 = 0;\n            while (ptr1 = *(undefined8 **)(ptr2[1] + (ulong)index2 * 8),\n                  ptr1 != (undefined8 *)0x0) {\n              if ((ptr1[4] != 0) &&\n                 (flag = processDebugData_00112c1f(param1,param2,ptr1[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = processDebugData_00112c1f(param1,param2,ptr1[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (ptr1[3] == -1) {\n                flag = process_data_0010adf2(param2,*ptr1,*(undefined4 *)(ptr1 + 2),\n                                     *(undefined *)((long)ptr1 + 0x14),\n                                     *(undefined *)((long)ptr1 + 0x15));\n              }\n              else {\n                flag = process_data_0010add5(param2);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              index2 = index2 + 1;\n            }\n            flag = check_and_update_string_00109bbb(param2);\n            if (flag == '\\0') {\n              return 0;\n            }\n            localVar = localVar + 1;\n          }\n        }\n      }\n      result = combine_strings_0010ae0e(param2);\n      return result;\n    case 0xb:\n      ptr2 = *(undefined8 **)(param3 + 4);\n      if (ptr2 == (undefined8 *)0x0) {\n        value = 0;\n        result2 = 0;\n      }\n      else {\n        value = ptr2[1];\n        result2 = *ptr2;\n      }\n      result = initialize_and_update_data_0010e453(param2,result,result2,value);\n      return result;\n    case 0xc:\n      flag = processDebugData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a083(param2);\n      return result;\n    case 0xd:\n      flag = processDebugData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      value2 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 8) == 0) {\n        value2 = 0xffffffff;\n      }\n      else {\n        while (data = *(long *)(*(long *)(*(long *)(param3 + 4) + 8) + value2 * 8), data != 0) {\n          value2 = value2 + 1;\n          flag = processDebugData_00112c1f(param1,param2,data,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        value2 = value2 & 0xffffffff;\n      }\n      result = process_data_0010e5db(param2,value2,*(undefined *)(*(long *)(param3 + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = processDebugData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0a0(param2);\n      return result;\n    case 0xf:\n      flag = processDebugData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = initialize_data_structure_0010a0e9(param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),\n                           *(undefined8 *)(*(long *)(param3 + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = processDebugData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = processDebugData_00112c1f(param1,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      data = *(long *)(param3 + 4);\n      result = process_data_0010a181(param2,*(undefined8 *)(data + 0x10),*(undefined8 *)(data + 0x18),\n                           *(undefined *)(data + 0x20));\n      return result;\n    case 0x11:\n      flag = processDebugData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = extract_and_initialize_data_structure_0010a2b9(param2,*(undefined *)(*(long *)(param3 + 4) + 8));\n      return result;\n    case 0x12:\n      flag = processDebugData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = processDebugData_00112c1f(param1,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = create_and_initialize_data_0010a377(param2);\n      return result;\n    case 0x13:\n      flag = processDebugData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      value2 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 0x10) == 0) {\n        value2 = 0xffffffff;\n      }\n      else {\n        while (data = *(long *)(*(long *)(*(long *)(param3 + 4) + 0x10) + value2 * 8), data != 0)\n        {\n          value2 = value2 + 1;\n          flag = processDebugData_00112c1f(param1,param2,data,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param3 + 4) + 8) != 0) &&\n         (flag = processDebugData_00112c1f(param1,param2,*(long *)(*(long *)(param3 + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = process_data_0010a424(param2,*(long *)(*(long *)(param3 + 4) + 8) != 0,value2 & 0xffffffff,\n                           *(undefined *)(*(long *)(param3 + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = processDebugData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0bd(param2);\n      return result;\n    case 0x15:\n      flag = processDebugData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0d3(param2);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  boolVar = *(int **)**(undefined8 **)(param3 + 4) == param3;\n  param3 = *(int **)**(undefined8 **)(param3 + 4);\n  if (boolVar) {\nLAB_00112dd6:\n    result = initialize_or_increment_value_00109d97(param2);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "FUN_0010adf2",
                "FUN_0010e5db",
                "abort",
                "FUN_0010a0e9",
                "FUN_00109d5c",
                "FUN_0010a0bd",
                "FUN_0010ae0e",
                "FUN_00109d97",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109bbb",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010c7a0",
                "FUN_0010a83e",
                "FUN_0010a181",
                "fprintf",
                "dcgettext",
                "FUN_0010a0a0",
                "FUN_0010a083",
                "FUN_0010a424",
                "FUN_0010add5",
                "FUN_0010a0d3",
                "FUN_0010a377",
                "FUN_00112c1f",
                "FUN_00109dfe",
                "FUN_00112b6e",
                "FUN_0010a69a",
                "__assert_fail",
                "FUN_0010b800",
                "FUN_00109d3e",
                "FUN_0010bba1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_debug_data_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isCopyingEnabled",
                "unaff_R15": "privateDataAddress",
                "lVar1": "errorMessage",
                "dcgettext": "getLocalizedMessage",
                "print_error_message_001126c0": "printErrorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char isCopyingEnabled;\n  long privateDataAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isCopyingEnabled != '\\0') {\n    *(undefined4 *)(*(long *)(privateDataAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    printErrorMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "message",
                "param_2": "source",
                "in_RAX": "formatSpecifier",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 formatSpecifier;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,source,message,formatSpecifier);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "recognize_file_format_00105828",
                "iVar1": "architectureType",
                "uVar2": "architectureCode",
                "uVar3": "modifiedFilename",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 recognizeFileFormat_00105828(void)\n\n{\n  int architectureType;\n  undefined4 architectureCode;\n  undefined8 modifiedFilename;\n  undefined8 errorMessage;\n  \n  architectureType = bfd_get_arch();\n  if (architectureType == 0) {\n    modifiedFilename = get_modified_filename_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,modifiedFilename);\n  }\n  else {\n    modifiedFilename = bfd_get_mach();\n    architectureCode = bfd_get_arch();\n    modifiedFilename = bfd_printable_arch_mach(architectureCode,modifiedFilename);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,modifiedFilename);\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_get_mach",
                "bfd_printable_arch_mach",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001125fa",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "recognize_file_format_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "fileTemplate",
                "pcVar1": "tempDirPath"
            },
            "code": "\nchar * createTempDirectory_0011a0e0(void)\n\n{\n  char *fileTemplate;\n  char *tempDirPath;\n  \n  fileTemplate = (char *)create_file_path_00114cf0();\n  tempDirPath = mkdtemp(fileTemplate);\n  if (tempDirPath == (char *)0x0) {\n    free(fileTemplate);\n  }\n  return tempDirPath;\n}\n\n",
            "called": [
                "FUN_001081e9",
                "mkdtemp",
                "FUN_00114cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "find_matching_data_0010bba1",
                "param_1": "binaryAddress",
                "param_2": "data",
                "lVar1": "hashResult",
                "uVar2": "result",
                "initialize_data_structure_00109cf4": "initializeDataStructure"
            },
            "code": "\nundefined8 findMatchingData_0010bba1(long binaryAddress,undefined8 data)\n\n{\n  long hashResult;\n  undefined8 result;\n  \n  hashResult = bfd_hash_lookup(binaryAddress + 0x1b8,data,0,0);\n  if ((hashResult != 0) && (0 < *(long *)(hashResult + 0x20))) {\n    result = initializeDataStructure(binaryAddress,*(long *)(hashResult + 0x20),*(undefined4 *)(hashResult + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "find_matching_data_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_and_update_hash_table_0010e6a8",
                "param_1": "hash_table",
                "param_2": "key",
                "__s": "extracted_value",
                "sVar3": "key_length",
                "sVar4": "value_length",
                "__s_00": "new_entry",
                "lVar8": "entry_count",
                "uVar2": "entry_type",
                "lVar5": "lookup_result",
                "uVar6": "error_message",
                "uVar7": "error_format",
                "uVar9": "hash_result",
                "auVar10": "return_value"
            },
            "code": "\nundefined  [16] process_and_update_hash_table_0010e6a8(long hash_table,char *key,undefined8 param_3,undefined8 param_4)\n\n{\n  uint uVar1;\n  undefined4 entry_type;\n  char *extracted_value;\n  size_t key_length;\n  size_t value_length;\n  char *new_entry;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_format;\n  long entry_count;\n  ulong hash_result;\n  undefined return_value [16];\n  \n  entry_count = *(long *)(*(long *)(hash_table + 0x60) + 0x10);\n  entry_type = *(undefined4 *)(*(long *)(hash_table + 0x60) + 0x18);\n  extracted_value = (char *)extract_and_free_next_item_00109b2f();\n  key_length = strlen(key);\n  value_length = strlen(extracted_value);\n  new_entry = (char *)xmalloc(key_length + 0x14 + value_length);\n  if (entry_count < 1) {\n    entry_count = *(long *)(hash_table + 0x68);\n    *(long *)(hash_table + 0x68) = entry_count + 1;\n    sprintf(new_entry,\"%s:t%ld=%s\",key,entry_count,extracted_value);\n  }\n  else {\n    sprintf(new_entry,\"%s:t%s\",key,extracted_value);\n  }\n  free(extracted_value);\n  uVar1 = update_hash_table_0010e2f0(hash_table,0x80,0,0,new_entry);\n  hash_result = (ulong)uVar1;\n  if ((char)uVar1 != '\\0') {\n    free(new_entry);\n    lookup_result = bfd_hash_lookup(hash_table + 0x1b8,key,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = entry_count;\n      *(undefined4 *)(lookup_result + 0x28) = entry_type;\n      goto LAB_0010e7b3;\n    }\n    entry_type = bfd_get_error();\n    error_message = bfd_errmsg(entry_type);\n    error_format = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_message_00119ed0(error_format,error_message);\n  }\n  hash_result = 0;\nLAB_0010e7b3:\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = hash_result;\n  return return_value;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "strlen",
                "free",
                "xmalloc",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_hash_lookup",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_update_hash_table_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "extract_and_update_hash_table_0010e7c2",
                "param_1": "input",
                "param_2": "string1",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "extracted_string",
                "sVar1": "string1_length",
                "sVar2": "extracted_string_length",
                "__s_00": "modified_string",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] extract_and_update_hash_table_0010e7c2(undefined8 input,char *string1,undefined8 param3,undefined8 param4)\n\n{\n  char *extracted_string;\n  size_t string1_length;\n  size_t extracted_string_length;\n  char *modified_string;\n  undefined result [16];\n  \n  extracted_string = (char *)extract_and_free_next_item_00109b2f();\n  string1_length = strlen(string1);\n  extracted_string_length = strlen(extracted_string);\n  modified_string = (char *)xmalloc(string1_length + 3 + extracted_string_length);\n  sprintf(modified_string,\"%s:T%s\",string1,extracted_string);\n  free(extracted_string);\n  result._0_4_ = update_hash_table_0010e2f0(input,0x80,0,0,modified_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(modified_string);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "extract_and_update_hash_table_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "print_and_exit_error_00119dd0",
                "param_1": "error_code",
                "param_9": "format_string",
                "in_AL": "condition",
                "local_d8": "length",
                "local_d4": "size",
                "local_d0": "buffer_address",
                "local_c8": "local_buffer",
                "local_b8": "temporary_buffer",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "copied_param_1",
                "local_78": "copied_param_2",
                "local_68": "copied_param_3",
                "local_58": "copied_param_4",
                "local_48": "copied_param_5",
                "local_38": "copied_param_6",
                "local_28": "copied_param_7",
                "local_18": "copied_param_8"
            },
            "code": "\nvoid print_and_exit_error_00119dd0(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 format_string,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char condition;\n  undefined4 length;\n  undefined4 size;\n  undefined *buffer_address;\n  undefined *local_buffer;\n  undefined temporary_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 copied_param_1;\n  undefined4 copied_param_2;\n  undefined4 copied_param_3;\n  undefined4 copied_param_4;\n  undefined4 copied_param_5;\n  undefined4 copied_param_6;\n  undefined4 copied_param_7;\n  undefined4 copied_param_8;\n  \n  if (condition != '\\0') {\n    copied_param_1 = error_code;\n    copied_param_2 = param_2;\n    copied_param_3 = param_3;\n    copied_param_4 = param_4;\n    copied_param_5 = param_5;\n    copied_param_6 = param_6;\n    copied_param_7 = param_7;\n    copied_param_8 = param_8;\n  }\n  buffer_address = &stack0x00000008;\n  length = 8;\n  local_buffer = temporary_buffer;\n  size = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message_00119e70(format_string,&length);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_001083de",
                "FUN_0010554f",
                "FUN_00104ad6",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00114dc7",
                "FUN_0010827b",
                "FUN_00108808",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_001053b5",
                "FUN_00108d9a",
                "FUN_00115b70",
                "FUN_00114190",
                "FUN_00104920",
                "FUN_0010da0b"
            ],
            "imported": false,
            "current_name": "print_and_exit_error_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "error_code",
                "iVar1": "bfd_error",
                "unaff_RBP": "data_ptr",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined8 handle_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *data_ptr;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  print_error_0011a110(*data_ptr);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_get_error",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_records_00116852",
                "in_RCX": "recordArray",
                "unaff_RBX": "minRecordSize",
                "unaff_RBP": "currentRecord",
                "unaff_R14": "recordPointer",
                "unaff_R13": "recordEnd",
                "unaff_R15": "maxRecordSize",
                "in_R10": "recordIndex",
                "param_10": "recordCount",
                "param_11": "recordComparisonArray",
                "param_12": "outputBuffer",
                "sVar1": "recordSize",
                "pcVar2": "recordProcessingFunc",
                "iVar3": "comparisonResult",
                "uVar4": "tempVar",
                "__ptr": "dynamicMemory",
                "uVar5": "tempVar1",
                "uVar6": "tempVar2",
                "lVar7": "tempVar3",
                "uVar8": "tempVar4",
                "puVar9": "tempPtr1",
                "cVar10": "tempChar",
                "puVar11": "tempPtr2",
                "puVar12": "tempPtr3",
                "psVar13": "tempPtr4",
                "bVar14": "tempByte"
            },
            "code": "\nulong processRecords_00116852(void)\n\n{\n  size_t recordSize;\n  code *recordProcessingFunc;\n  int comparisonResult;\n  uint tempVar;\n  undefined *dynamicMemory;\n  size_t *recordArray;\n  ulong tempVar1;\n  ulong tempVar2;\n  long tempVar3;\n  ulong tempVar4;\n  size_t minRecordSize;\n  size_t *currentRecord;\n  undefined *tempPtr1;\n  char tempChar;\n  undefined *tempPtr2;\n  ulong recordIndex;\n  undefined *tempPtr3;\n  size_t in_R11;\n  size_t *recordEnd;\n  size_t *recordPointer;\n  size_t maxRecordSize;\n  size_t *tempPtr4;\n  byte tempByte;\n  size_t param_7;\n  size_t param_9;\n  ulong recordCount;\n  size_t *recordComparisonArray;\n  undefined *outputBuffer;\n  long param_13;\n  size_t param_14;\n  \n  tempByte = 0;\ncode_r0x00116852:\n  tempVar = (int)recordIndex + 1;\n  if (0x10 < (int)recordIndex) goto LAB_001167f5;\nLAB_00116863:\n  recordPointer = recordPointer + -9;\n  do {\n    if (recordEnd <= recordPointer) {\n      recordSize = recordPointer[2];\n      if (recordSize == 0) goto LAB_00116863;\n      tempVar4 = (ulong)tempVar;\n      if ((*recordPointer == *currentRecord) &&\n         (comparisonResult = memcmp((void *)recordPointer[3],(void *)currentRecord[3],*currentRecord), comparisonResult == 0)) {\n        tempVar2 = recordPointer[7];\n        tempVar1 = recordPointer[8];\n        recordIndex = tempVar4 & 0xffffffff;\n        if (maxRecordSize == tempVar2) {\n          if (minRecordSize != tempVar1) goto LAB_001167a6;\n          currentRecord[2] = 0;\n        }\n        else {\n          if (maxRecordSize < tempVar2) {\n            if (tempVar1 < maxRecordSize) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < tempVar1) || (maxRecordSize <= (tempVar1 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (minRecordSize < maxRecordSize) {\n              if ((0xfffffffffffffff0 < minRecordSize) ||\n                 (tempVar2 <= (minRecordSize + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (minRecordSize == tempVar1) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (minRecordSize <= tempVar1) {\n              currentRecord[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (tempVar1 < maxRecordSize) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (recordSize == 0x101)) goto code_r0x00116852;\n          if (tempVar1 <= minRecordSize) {\n            tempVar1 = minRecordSize;\n          }\n          if (tempVar2 < maxRecordSize) {\n            maxRecordSize = tempVar2;\n          }\n          recordPointer[8] = tempVar1;\n          recordPointer[7] = maxRecordSize;\n          currentRecord[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        recordPointer = currentRecord;\n        currentRecord = recordPointer + 9;\n        if (recordArray <= currentRecord) {\n          qsort(recordComparisonArray,param_14,0x48,compare_records_0011a250);\n          dynamicMemory = (undefined *)xmalloc(recordCount * 2);\n          param_7 = 0;\n          tempPtr3 = dynamicMemory;\n          for (tempPtr4 = recordComparisonArray; tempPtr4 < recordArray; tempPtr4 = tempPtr4 + 9) {\n            if (tempPtr4[2] != 0) {\n              tempPtr2 = tempPtr3 + 4;\n              tempPtr1 = tempPtr3 + 0xc;\n              recordProcessingFunc = *(code **)(*(long *)(param_13 + 8) + 0x50);\n              if ((tempPtr4[7] == param_9) && (tempPtr4[8] == param_7)) {\n                (*recordProcessingFunc)(*tempPtr4,tempPtr3);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(0,tempPtr2);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(tempPtr4[2],tempPtr3 + 8);\n                tempVar2 = tempPtr4[6];\n                tempVar4 = *tempPtr4;\n                tempPtr3 = (undefined *)tempPtr4[3];\n                tempPtr2 = tempPtr1;\n                for (tempVar1 = tempVar4; tempVar1 != 0; tempVar1 = tempVar1 - 1) {\n                  *tempPtr2 = *tempPtr3;\n                  tempPtr3 = tempPtr3 + (ulong)tempByte * -2 + 1;\n                  tempPtr2 = tempPtr2 + (ulong)tempByte * -2 + 1;\n                }\n                if (tempVar4 < tempVar2) {\n                  for (tempVar3 = tempVar2 - tempVar4; tempVar3 != 0; tempVar3 = tempVar3 + -1) {\n                    *tempPtr2 = 0;\n                    tempPtr2 = tempPtr2 + (ulong)tempByte * -2 + 1;\n                  }\n                }\n                tempPtr3 = tempPtr1 + tempVar2;\n              }\n              else {\n                (*recordProcessingFunc)();\n                if (*(int *)(*(long *)(param_13 + 8) + 8) == 5) {\n                  tempChar = (*(char *)(*(long *)(param_13 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  tempChar = '\\b';\n                }\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(tempChar,tempPtr2);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(tempPtr4[2],tempPtr3 + 8);\n                tempVar4 = *tempPtr4;\n                tempPtr3 = (undefined *)tempPtr4[3];\n                tempPtr2 = tempPtr1;\n                for (tempVar2 = tempVar4; tempVar2 != 0; tempVar2 = tempVar2 - 1) {\n                  *tempPtr2 = *tempPtr3;\n                  tempPtr3 = tempPtr3 + (ulong)tempByte * -2 + 1;\n                  tempPtr2 = tempPtr2 + (ulong)tempByte * -2 + 1;\n                }\n                tempVar2 = tempPtr4[6];\n                if (tempVar4 < tempVar2) {\n                  for (tempVar3 = tempVar2 - tempVar4; tempVar3 != 0; tempVar3 = tempVar3 + -1) {\n                    *tempPtr2 = 0;\n                    tempPtr2 = tempPtr2 + (ulong)tempByte * -2 + 1;\n                  }\n                }\n                tempVar3 = *(long *)(param_13 + 8);\n                tempPtr1 = tempPtr1 + tempVar2;\n                tempPtr3 = tempPtr1 + 8;\n                if ((*(int *)(tempVar3 + 8) == 5) &&\n                   (*(char *)(*(long *)(param_13 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(tempVar3 + 0x38))(tempPtr4[7],tempPtr1);\n                  (**(code **)(*(long *)(param_13 + 8) + 0x38))(tempPtr4[8],tempPtr3);\n                  tempPtr3 = tempPtr1 + 0x10;\n                }\n                else {\n                  (**(code **)(tempVar3 + 0x50))(tempPtr4[7],tempPtr1);\n                  (**(code **)(*(long *)(param_13 + 8) + 0x50))(tempPtr4[8],tempPtr1 + 4);\n                }\n                param_9 = tempPtr4[7];\n                param_7 = tempPtr4[8];\n              }\n            }\n          }\n          tempVar2 = (long)tempPtr3 - (long)dynamicMemory;\n          tempVar4 = tempVar2;\n          tempPtr3 = dynamicMemory;\n          if (tempVar2 < recordCount) {\n            for (; recordCount = tempVar2, tempVar4 != 0; tempVar4 = tempVar4 - 1) {\n              *outputBuffer = *tempPtr3;\n              tempPtr3 = tempPtr3 + (ulong)tempByte * -2 + 1;\n              outputBuffer = outputBuffer + (ulong)tempByte * -2 + 1;\n            }\n          }\n          free(dynamicMemory);\n          free(recordComparisonArray);\n          return recordCount;\n        }\n        in_R11 = recordPointer[0xb];\n      } while (in_R11 == 0);\n      maxRecordSize = recordPointer[0x10];\n      minRecordSize = recordPointer[0x11];\n      tempVar = 0;\n      if (maxRecordSize != minRecordSize) break;\n      recordPointer[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "qsort",
                "FUN_00116852",
                "free",
                "xmalloc",
                "memcmp",
                "FUN_0011a250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_records_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_or_get_data_structure_00113d3a",
                "param_1": "data",
                "lVar1": "structure_ptr"
            },
            "code": "\nlong initialize_or_get_data_structure_00113d3a(long data)\n\n{\n  long structure_ptr;\n  \n  if (data != 0) {\n    structure_ptr = *(long *)(data + 8);\n    if (structure_ptr == 0) {\n      structure_ptr = initialize_data_structure_00112904(0xc,0);\n      if (structure_ptr == 0) {\n        structure_ptr = 0;\n      }\n      else {\n        *(long *)(structure_ptr + 0x10) = data;\n        *(long *)(data + 8) = structure_ptr;\n      }\n    }\n    return structure_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_or_get_data_structure_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010e2f0",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "process_data_0010a0d3",
                "param_1": "data"
            },
            "code": "\nvoid process_data_0010a0d3(long data)\n\n{\n  process_data_0010a0d3_00109ed3(data,0x42,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "update_output_section_00115530",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "tempVar1",
                "pcVar2": "tempVar2",
                "ppcVar3": "tempVar3",
                "cVar4": "tempVar4",
                "iVar5": "tempVar5",
                "uVar6": "tempVar6",
                "sVar7": "tempVar7",
                "sVar8": "tempVar8",
                "lVar9": "tempVar9",
                "pcVar10": "tempVar10",
                "pcVar11": "tempVar11",
                "pcVar12": "tempVar12",
                "uVar13": "tempVar13",
                "bVar14": "tempVar14",
                "local_50": "localErrorMessage",
                "local_48": "localString",
                "local_40": "localArray"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid updateOutputSection_00115530(long param1,char **param2,long param3)\n\n{\n  long tempVar1;\n  char *tempVar2;\n  char **tempVar3;\n  char tempVar4;\n  int tempVar5;\n  uint tempVar6;\n  size_t tempVar7;\n  size_t tempVar8;\n  long tempVar9;\n  char *tempVar10;\n  char *tempVar11;\n  char *tempVar12;\n  uint tempVar13;\n  bool tempVar14;\n  long localErrorMessage;\n  char *localString;\n  long localArray [2];\n  \n  tempVar4 = check_permissions_and_patterns_001159d0(param2);\n  if (tempVar4 != '\\0') {\n    return;\n  }\n  tempVar10 = *param2;\n  tempVar13 = *(uint *)((long)param2 + 0x24);\n  localString = tempVar10;\n  tempVar3 = DAT_001278d8;\n  if (*(int *)(*(long *)(param1 + 8) + 8) != *(int *)(*(long *)(param3 + 8) + 8)) {\n    tempVar13 = tempVar13 & *(uint *)(*(long *)(param1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param3 + 8) + 0x18);\n  }\n  for (; tempVar3 != (char **)0x0; tempVar3 = (char **)tempVar3[3]) {\n    tempVar5 = strcmp(*tempVar3,tempVar10);\n    if (tempVar5 == 0) {\n      if (*(uint *)(tempVar3 + 2) != 0xffffffff) {\n        tempVar13 = *(uint *)(tempVar3 + 2);\n      }\n      if (tempVar10 != tempVar3[1]) {\n        localString = tempVar3[1];\n        tempVar13 = drop_share_flag_if_not_coff_00115f30(tempVar13,param3);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (tempVar10 = DAT_001278f8, (*(byte *)((long)param2 + 0x24) & 1) != 0)) ||\n     (tempVar10 = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    tempVar7 = strlen(tempVar10);\n    tempVar8 = strlen(localString);\n    tempVar12 = (char *)xmalloc(tempVar7 + 1 + tempVar8);\n    tempVar10 = strcpy(tempVar12,tempVar10);\n    localString = strcat(tempVar10,localString);\n  }\n  tempVar9 = update_permissions_00114190(*param2,0,0x80);\n  tempVar14 = false;\n  if (tempVar9 == 0) {\n    if ((DAT_00127a2c == 4) && ((tempVar13 & 0x2000001) != 0)) {\n      tempVar5 = *(int *)(*(long *)(param1 + 8) + 8);\n      if (tempVar5 == 5) {\n        if (*(int *)(param2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n            tempVar14 = (tempVar13 & 0x2000000) == 0;\n            tempVar6 = ~((-(uint)((tempVar13 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param2 + 0x24) = *(uint *)((long)param2 + 0x24) & tempVar6;\n          }\n          else {\n            tempVar6 = 0xfdfffefd;\n          }\n          tempVar13 = tempVar13 & tempVar6;\n        }\n      }\n      else if ((tempVar5 != 2) || (tempVar5 = strcmp(*param2,\".buildid\"), tempVar5 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    tempVar13 = drop_share_flag_if_not_coff_00115f30(tempVar13 & 0x104 | *(uint *)(tempVar9 + 0x28),param3,*param2);\n  }\n  tempVar4 = bfd_convert_section_setup(param1,param2,param3,&localString,localArray);\n  if (tempVar4 == '\\0') {\n    tempVar10 = (char *)0x0;\n    localErrorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  tempVar10 = (char *)bfd_make_section_anyway_with_flags(param3,localString,tempVar13);\n  if (tempVar10 == (char *)0x0) {\n    localErrorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      localArray[0] = 0;\n      goto LAB_001158e7;\n    }\n    tempVar4 = bfd_set_section_size(tempVar10,localArray[0]);\n    if (tempVar4 == '\\0') {\n      update_file_permissions_00108072();\n      return;\n    }\n  }\n  else {\n    localArray[0] = ((((long)DAT_00127a1c - 1U) + localArray[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    tempVar4 = bfd_set_section_size(tempVar10);\n    if (tempVar4 == '\\0') {\n      update_file_permissions_00108072();\n      return;\n    }\n  }\n  localErrorMessage = 0;\n  tempVar12 = param2[6];\n  tempVar9 = update_permissions_00114190(*param2,0,0x18);\n  if (tempVar9 == 0) {\n    tempVar10[0x28] = tempVar10[0x28] | 1;\n    tempVar11 = *param2;\n    tempVar12 = tempVar12 + _DAT_00127990;\n    *(char **)(tempVar10 + 0x30) = tempVar12;\n    *(char **)(tempVar10 + 0x38) = tempVar12;\n    tempVar12 = param2[7];\n    tempVar9 = update_permissions_00114190(tempVar11,0,0x60);\n    if (tempVar9 == 0) goto LAB_00115695;\nLAB_00115860:\n    tempVar11 = *(char **)(tempVar9 + 0x20);\n    if ((*(byte *)(tempVar9 + 0x14) & 0x40) != 0) {\n      tempVar11 = tempVar11 + (long)tempVar12;\n    }\n    *(char **)(tempVar10 + 0x38) = tempVar11;\n    tempVar9 = update_permissions_00114190(*param2,0,0x200);\n    if (tempVar9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    tempVar13 = *(uint *)((long)param2 + 0x7c);\n    if (tempVar13 < 0x3f) goto LAB_001156c4;\n    localErrorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(tempVar10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    tempVar10[0x28] = tempVar10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = tempVar10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    tempVar4 = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,tempVar10);\n    if (tempVar4 == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    tempVar11 = *(char **)(tempVar9 + 0x18);\n    if ((*(byte *)(tempVar9 + 0x14) & 8) == 0) {\n      tempVar11 = tempVar11 + (long)tempVar12;\n    }\n    tempVar10[0x28] = tempVar10[0x28] | 1;\n    tempVar2 = *param2;\n    *(char **)(tempVar10 + 0x30) = tempVar11;\n    *(char **)(tempVar10 + 0x38) = tempVar11;\n    tempVar12 = param2[7];\n    tempVar9 = update_permissions_00114190(tempVar2,0,0x60);\n    if (tempVar9 != 0) goto LAB_00115860;\nLAB_00115695:\n    tempVar11 = *param2;\n    *(char **)(tempVar10 + 0x38) = tempVar12 + _DAT_00127990;\n    tempVar9 = update_permissions_00114190(tempVar11,0,0x200);\n    if (tempVar9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    tempVar13 = *(uint *)(tempVar9 + 0x2c);\n    if (0x3e < tempVar13) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(tempVar10 + 0x7c) = tempVar13;\n    *(undefined4 *)(tempVar10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    tempVar10[0x28] = tempVar10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = tempVar10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    tempVar12 = param2[0x1a];\n    tempVar9 = find_value_00115d00(tempVar12,param2[0x1c]);\n    if ((tempVar9 == 0) ||\n       (tempVar1 = *(long *)(param1 + 8), *(uint *)(tempVar9 + 0x18) = *(uint *)(tempVar9 + 0x18) | 0x20,\n       *(int *)(tempVar1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(tempVar12 + 0xb0) = tempVar9;\n    tempVar4 = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,tempVar10);\n    if (tempVar4 == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (tempVar14) {\n    *(undefined4 *)(*(long *)(tempVar10 + 0xd0) + 4) = 8;\n  }\n  if (localErrorMessage == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  print_error_message_001126c0(0,param3,tempVar10,localErrorMessage);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00115f30",
                "strlen",
                "dcgettext",
                "xmalloc",
                "bfd_convert_section_setup",
                "strcat",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "FUN_001159d0",
                "strcpy",
                "FUN_00114190",
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "update_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "process_data_0010a0bd",
                "param_1": "input",
                "process_data_00109ed3": "processDataHelper"
            },
            "code": "\nvoid processData_0010a0bd(long input)\n\n{\n  processData_0010a0bdHelper(input,0x6b,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_type_00113e5e",
                "param_1": "param",
                "param_2": "str_ptr",
                "param_3": "offset",
                "cVar1": "result",
                "local_20": "str_arr"
            },
            "code": "\nundefined8 validate_type_00113e5e(undefined8 param,char **str_ptr,long offset)\n\n{\n  char result;\n  char *str_arr [2];\n  \n  str_arr[0] = *str_ptr;\n  *str_ptr = (char *)(offset + 2);\n  if ((((long)(char *)(offset + 2) - (long)str_arr[0] < 5) ||\n      (result = string_comparison_00113fb0(str_arr[0],\"type\"), result == '\\0')) ||\n     ((str_arr[0][4] != '$' && (str_arr[0][4] != '.')))) {\n    if (*str_arr[0] != '_') {\n      return 1;\n    }\n    if (str_arr[0][1] != '_') {\n      return 1;\n    }\n    if (str_arr[0][2] != 'o') {\n      return 1;\n    }\n    if (str_arr[0][3] != 'p') {\n      return 1;\n    }\n    str_arr[0] = str_arr[0] + 4;\n  }\n  else {\n    str_arr[0] = str_arr[0] + 5;\n  }\n  result = parse_binary_data_0010c95e(param,str_arr,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_type_00113e5e",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = string_comparison_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "dataPtr",
                "param_2": "inputString",
                "param_3": "inputSize",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "data",
                "pcVar2": "oldString",
                "bVar3": "byteVar",
                "pcVar4": "newString",
                "__s": "extraString",
                "sVar5": "oldStringLen",
                "sVar6": "newStringLen",
                "sVar7": "inputStringLen",
                "sVar8": "extraStringLen",
                "uVar9": "result",
                "cVar10": "charVar1",
                "cVar11": "charVar2",
                "local_52": "localByte"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long dataPtr,char *inputString,uint inputSize,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long data;\n  char *oldString;\n  byte byteVar;\n  char *newString;\n  char *extraString;\n  size_t oldStringLen;\n  size_t newStringLen;\n  size_t inputStringLen;\n  size_t extraStringLen;\n  undefined8 result;\n  char charVar1;\n  char charVar2;\n  byte localByte;\n  \n  extraString = (char *)0x0;\n  localByte = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  newString = (char *)extract_and_free_next_item_00109b2f();\n  if (flag4 != '\\0') {\n    byteVar = 1;\n    if (localByte == 0) {\n      byteVar = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n    }\n    localByte = byteVar & 1;\n    extraString = (char *)extract_and_free_next_item_00109b2f(dataPtr);\n  }\n  data = *(long *)(dataPtr + 0x60);\n  if ((data == 0) || (oldString = *(char **)(data + 0x30), oldString == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < inputSize) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVar1 = '?';\n    if (flag1 == '\\0') {\n      charVar1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    oldStringLen = strlen(oldString);\n    newStringLen = strlen(newString);\n    inputStringLen = strlen(inputString);\n    extraStringLen = 0;\n    if (flag4 != '\\0') {\n      extraStringLen = strlen(extraString);\n    }\n    result = xrealloc(oldString,inputStringLen + oldStringLen + 0x28 + newStringLen + extraStringLen);\n    *(undefined8 *)(data + 0x30) = result;\n    oldString = *(char **)(*(long *)(dataPtr + 0x60) + 0x30);\n    oldStringLen = strlen(oldString);\n    sprintf(oldString + oldStringLen,\"%s:%s;%c%c%c\",newString,inputString,(ulong)(byte)(0x32 - (char)inputSize),\n            (ulong)(uint)(int)charVar2,(ulong)(uint)(int)charVar1,oldStringLen);\n    free(newString);\n    if (flag4 != '\\0') {\n      newString = *(char **)(*(long *)(dataPtr + 0x60) + 0x30);\n      oldStringLen = strlen(newString);\n      sprintf(newString + oldStringLen,\"%ld;%s;\",value,extraString);\n      free(extraString);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(dataPtr + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xrealloc",
                "strlen",
                "free",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "inputFlags",
                "param_2": "parameters",
                "param_3": "outputFormat",
                "uVar1": "flagValue",
                "uVar2": "errorMessage"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00115f30(uint inputFlags,undefined8 *parameters,undefined8 outputFormat)\n\n{\n  undefined8 flagValue;\n  undefined8 errorMessage;\n  \n  if (((inputFlags & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    flagValue = *parameters;\n    inputFlags = inputFlags & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(errorMessage,flagValue,outputFormat);\n  }\n  return inputFlags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00115530",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "FUN_00116ad0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputArray",
                "puVar1": "pointerVar1",
                "piVar2": "pointerVar2"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputArray)\n\n{\n  undefined8 *pointerVar1;\n  int *pointerVar2;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    pointerVar1 = (undefined8 *)(inputArray + 4);\n    pointerVar2 = **(int ***)(undefined8 *)*pointerVar1;\n  } while ((inputArray != pointerVar2) && (inputArray = pointerVar2, pointerVar2 != (int *)0x0));\n  return ((undefined8 *)*pointerVar1)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_001129f4",
                "FUN_00112b6e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_0010ee3f",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "check_and_invert_length_001082b3",
                "uVar1": "string_length",
                "check_string_length_00113ede": "get_string_length"
            },
            "code": "\nuint check_and_invert_length_001082b3(void)\n\n{\n  uint string_length;\n  \n  string_length = get_string_length();\n  return string_length ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_and_invert_length_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "process_binary_file_00114690",
                "param_1": "inputFilePath",
                "param_2": "outputFilePath",
                "param_3": "fileDescriptor",
                "param_4": "statStruct",
                "param_5": "bfdOptions",
                "param_6": "defaultPermission",
                "param_7": "condition",
                "bVar1": "byteVar1",
                "cVar2": "charVar2",
                "cVar3": "charVar3",
                "iVar4": "tempVar1",
                "iVar5": "tempVar2",
                "ppcVar6": "pointerToCharPointer1",
                "pvVar7": "pointerToVoid1",
                "lVar8": "longVar1",
                "puVar9": "pointerToLonglong1",
                "piVar10": "pointerToInt1",
                "uVar11": "ulongVar1",
                "uVar12": "ulongVar2",
                "lVar13": "longVar2",
                "puVar14": "pointerToLonglong2",
                "lVar21": "longVar3",
                "uVar22": "uintVar1",
                "pcVar23": "pointerToChar1",
                "psVar24": "pointerToStatStruct",
                "bVar25": "boolVar1",
                "bVar26": "byteVar2",
                "local_1a0": "localPointer1",
                "local_198": "localPointer2",
                "local_158": "localStatStruct",
                "local_c8": "localVoidPointerArray",
                "uStack_b0": "uStackVar1",
                "lStack_98": "lStackVar1"
            },
            "code": "\n\n\nvoid processBinaryFile_00114690(undefined8 inputFilePath,undefined8 outputFilePath,int fileDescriptor,undefined8 statStruct,\n                 undefined8 bfdOptions,long defaultPermission,undefined8 condition)\n\n{\n  byte byteVar1;\n  char charVar2;\n  char charVar3;\n  int tempVar1;\n  int tempVar2;\n  char **pointerToCharPointer1;\n  void *pointerToVoid1;\n  long longVar1;\n  undefined8 *pointerToLonglong1;\n  int *pointerToInt1;\n  undefined8 ulongVar1;\n  undefined8 ulongVar2;\n  long longVar2;\n  undefined8 *pointerToLonglong2;\n  char *pcVar15;\n  char **ppcVar16;\n  char *pcVar17;\n  char *pcVar18;\n  undefined8 *__ptr;\n  char **ppcVar19;\n  code *pcharVar20;\n  long longVar3;\n  uint uintVar1;\n  char *pointerToChar1;\n  stat *pointerToStatStruct;\n  bool boolVar1;\n  byte byteVar2;\n  undefined8 *localPointer1;\n  long *localPointer2;\n  stat localStatStruct;\n  void *localVoidPointerArray [3];\n  uint uStackVar1;\n  long lStackVar1;\n  \n  byteVar2 = 0;\n  longVar2 = get_file_info_00113f50();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      ulongVar2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_00119ed0(ulongVar2,inputFilePath);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  pointerToLonglong2 = (undefined8 *)bfd_openr(inputFilePath,bfdOptions);\n  if ((pointerToLonglong2 == (undefined8 *)0x0) || (tempVar2 = bfd_stat(pointerToLonglong2,statStruct), tempVar2 != 0)) {\n    print_error_message_001126c0(inputFilePath,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)pointerToLonglong2 + 0x44) = *(uint *)((long)pointerToLonglong2 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)pointerToLonglong2 + 0x44) = *(uint *)((long)pointerToLonglong2 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)pointerToLonglong2 + 0x44) = *(uint *)((long)pointerToLonglong2 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)pointerToLonglong2 + 0x44) = *(uint *)((long)pointerToLonglong2 + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)pointerToLonglong2 + 0x44) = *(uint *)((long)pointerToLonglong2 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)pointerToLonglong2 + 0x44) = *(uint *)((long)pointerToLonglong2 + 0x44) | 0x40000;\n  }\n  charVar2 = bfd_check_format(pointerToLonglong2,2);\n  if (charVar2 != '\\0') {\n    if (defaultPermission == 0) {\n      charVar2 = '\\0';\n      defaultPermission = *(long *)pointerToLonglong2[1];\n    }\n    if (fileDescriptor < 0) {\n      localPointer1 = (undefined8 *)bfd_openw(outputFilePath,defaultPermission);\n    }\n    else {\n      localPointer1 = (undefined8 *)bfd_fdopenw(outputFilePath,defaultPermission,fileDescriptor);\n    }\n    if (localPointer1 != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        ulongVar2 = *pointerToLonglong2;\n        ulongVar1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_00119ed0(ulongVar1,ulongVar2);\n        DAT_00127a10 = 0;\n      }\n      execute_function_if_condition_met_00114d50(localPointer1,pointerToLonglong2,DAT_001264b4);\n      localPointer2 = localPointer1 + 0x1f;\n      if ((*(byte *)((long)pointerToLonglong2 + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        ulongVar2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_error_message_001126c0(0,pointerToLonglong2,0,ulongVar2);\n        return;\n      }\n      pcVar15 = (char *)create_temp_directory_0011a0e0(*localPointer1);\n      if (pcVar15 == (char *)0x0) {\n        pointerToInt1 = __errno_location();\n        pcVar15 = strerror(*pointerToInt1);\n        ulongVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_and_exit_error_00119dd0(ulongVar2,pcVar15);\n      }\n      if (DAT_00127a2c == 7) {\n        byteVar1 = *(byte *)((long)pointerToLonglong2 + 0x49);\n        uintVar1 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)pointerToLonglong2 + 0x49);\n        uintVar1 = byteVar1 >> 3 & 1;\n      }\n      boolVar1 = _DAT_001264b0 != 0;\n      *(byte *)((long)localPointer1 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar1 << 3) | *(byte *)((long)localPointer1 + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)localPointer1 + 0x44) = *(uint *)((long)localPointer1 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      ppcVar16 = (char **)bfd_openr_next_archived_file(pointerToLonglong2,0);\n      charVar3 = bfd_set_format(localPointer1,*(byte *)(pointerToLonglong2 + 9) & 7);\n      if (charVar3 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(0,localPointer1,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (ppcVar16 != (char **)0x0))) {\n        pcVar18 = *ppcVar16;\n        pcVar17 = pcVar18;\n        if (*pcVar18 == '/') {\nLAB_0010527d:\n          ulongVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_00119ed0(ulongVar2,pcVar18);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pcVar17 != '\\0') {\n          pointerToChar1 = pcVar17;\n          if ((*pcVar17 == '.') && (pointerToChar1 = pcVar17 + 1, pcVar17[1] == '.')) {\n            pointerToChar1 = pcVar17 + 2;\n            if ((pcVar17[2] == '\\0') || (pcVar17[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointerToChar1 != '\\0' && (*pointerToChar1 != '/')); pointerToChar1 = pointerToChar1 + 1) {\n          }\n          pcVar17 = pointerToChar1;\n          if (*pointerToChar1 == '/') {\n            extract_and_copy_archived_files_001052a2();\n            return;\n          }\n        }\n        pcVar18 = (char *)concat(pcVar15,&DAT_0011b47d);\n        tempVar2 = stat(pcVar18,&localStatStruct);\n        pointerToLonglong1 = __ptr;\n        if (-1 < tempVar2) {\n          longVar2 = create_temp_directory_0011a0e0(pcVar18);\n          free(pcVar18);\n          if (longVar2 == 0) {\n            pointerToInt1 = __errno_location();\n            pcVar18 = strerror(*pointerToInt1);\n            ulongVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_00119ed0(ulongVar2,pcVar18);\n            goto LAB_00104e93;\n          }\n          pointerToLonglong1 = (undefined8 *)xmalloc(0x18);\n          pcVar18 = *ppcVar16;\n          *pointerToLonglong1 = __ptr;\n          pointerToLonglong1[2] = 0;\n          pointerToLonglong1[1] = longVar2;\n          pcVar18 = (char *)concat(longVar2,&DAT_0011b47d,pcVar18);\n        }\n        tempVar2 = 0;\n        if (DAT_001279cb != '\\0') {\n          pointerToStatStruct = &localStatStruct;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&pointerToStatStruct->st_dev = 0;\n            pointerToStatStruct = (stat *)((long)pointerToStatStruct + (ulong)byteVar2 * -8 + 4);\n          }\n          ppcVar19 = (char **)ppcVar16[0x1d];\n          if ((char **)ppcVar16[0x1d] == (char **)0x0) {\n            ppcVar19 = ppcVar16;\n          }\n          tempVar2 = (**(code **)(ppcVar19[1] + 0x1e8))(ppcVar16,&localStatStruct);\n          if (tempVar2 != 0) {\n            pcVar17 = *ppcVar16;\n            ulongVar2 = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_00119ed0(ulongVar2,pcVar17);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = pcVar18;\n        *__ptr = pointerToLonglong1;\n        __ptr[2] = 0;\n        charVar3 = bfd_check_format(ppcVar16,1);\n        if (charVar3 == '\\0') {\n          ulongVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_error_message_001126c0(0,ppcVar16,0,ulongVar2);\n          ppcVar19 = (char **)bfd_openw(pcVar18,defaultPermission);\n          if (ppcVar19 == (char **)0x0) {\nLAB_00104e80:\n            print_error_message_001126c0(pcVar18,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerToCharPointer1 = (char **)ppcVar16[0x1d];\n          if ((char **)ppcVar16[0x1d] == (char **)0x0) {\n            pointerToCharPointer1 = ppcVar16;\n          }\n          tempVar1 = (**(code **)(pointerToCharPointer1[1] + 0x1e8))(ppcVar16);\n          longVar2 = lStackVar1;\n          if (tempVar1 == 0) {\n            if (lStackVar1 < 0) {\n              get_modified_filename_001125fa(ppcVar16);\n              ulongVar2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_00119ed0(ulongVar2);\n            }\n            else {\n              tempVar1 = bfd_seek(ppcVar16,0,0);\n              if (tempVar1 == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  pcVar17 = *ppcVar19;\n                  ulongVar2 = get_modified_filename_001125fa(ppcVar16);\n                  pointerToChar1 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointerToChar1,ulongVar2,pcVar17);\n                }\n                pointerToVoid1 = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                  longVar3 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    longVar3 = longVar2;\n                  }\n                  longVar1 = bfd_bread(pointerToVoid1,longVar3,ppcVar16);\n                  pointerToCharPointer1 = ppcVar16;\n                  if ((longVar3 != longVar1) ||\n                     (longVar1 = bfd_bwrite(pointerToVoid1,longVar3,ppcVar19), pointerToCharPointer1 = ppcVar19,\n                     longVar3 != longVar1)) {\n                    print_error_message_001126c0(0,pointerToCharPointer1,0,0);\n                    free(pointerToVoid1);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ppcVar19,uStackVar1 | 0x100);\n                free(pointerToVoid1);\n                charVar3 = bfd_close_all_done(ppcVar19);\n                if (charVar3 == '\\0') {\n                  print_error_message_001126c0(pcVar18,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              ulongVar2 = get_modified_filename_001125fa(ppcVar16);\n              print_error_0011a110(ulongVar2);\n            }\n          }\n          else {\n            print_error_message_001126c0(0,ppcVar16,0,0);\n          }\nLAB_00104f00:\n          charVar3 = bfd_close_all_done(ppcVar19);\n          if (charVar3 == '\\0') {\n            print_error_message_001126c0(pcVar18,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pcVar18);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (charVar2 == '\\0') {\n            ppcVar19 = (char **)bfd_openw(pcVar18,*(undefined8 *)ppcVar16[1]);\n          }\n          else {\n            ppcVar19 = (char **)bfd_openw(pcVar18,defaultPermission);\n          }\n          if (ppcVar19 == (char **)0x0) goto LAB_00104e80;\n          charVar3 = FUNC_00114e50(ppcVar16,ppcVar19,condition);\n          if (charVar3 == '\\0') {\n            tempVar1 = bfd_get_arch(ppcVar16);\n            if (tempVar1 == 0) goto LAB_00104d75;\n            charVar3 = bfd_close_all_done(ppcVar19);\n            if (charVar3 == '\\0') {\n              print_error_message_001126c0(pcVar18,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar3 = bfd_close(ppcVar19);\n          if (charVar3 == '\\0') {\n            print_error_message_001126c0(pcVar18,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (tempVar2 == 0)) {\n            set_time_0011a350(pcVar18,&localStatStruct);\n          }\n          longVar2 = bfd_openr(pcVar18,defaultPermission);\n          __ptr[2] = longVar2;\n          *localPointer2 = longVar2;\n          localPointer2 = (long *)(longVar2 + 0xf0);\n          ppcVar19 = (char **)bfd_openr_next_archived_file(pointerToLonglong2);\n          bfd_close(ppcVar16);\n          ppcVar16 = ppcVar19;\n        }\n      }\n      *localPointer2 = 0;\n      pointerToVoid1 = (void *)xstrdup(*localPointer1);\n      if (DAT_00127a20 == 0) {\n        pcharVar20 = bfd_close;\n      }\n      else {\n        pcharVar20 = bfd_close_all_done;\n      }\n      charVar2 = (*pcharVar20)(localPointer1);\n      if (charVar2 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(pointerToVoid1,0,0,0);\n      }\n      free(pointerToVoid1);\n      pointerToVoid1 = (void *)xstrdup(*pointerToLonglong2);\n      charVar2 = bfd_close(pointerToLonglong2);\n      if (charVar2 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(pointerToVoid1,0,0,0);\n      }\n      free(pointerToVoid1);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        pointerToLonglong2 = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = pointerToLonglong2;\n      }\n      rmdir(pcVar15);\n      free(pcVar15);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    print_error_message_001126c0(outputFilePath,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  charVar2 = bfd_check_format_matches(pointerToLonglong2,1,localVoidPointerArray);\n  if (charVar2 == '\\0') {\n    tempVar2 = bfd_get_error();\n    charVar2 = bfd_check_format_matches(pointerToLonglong2,3,&localStatStruct);\n    if (charVar2 == '\\0') {\n      tempVar1 = bfd_get_error();\n      if (tempVar2 != tempVar1) {\n        bfd_set_error(tempVar2);\n      }\n      print_error_message_001126c0(inputFilePath,0,0,0);\n      if (tempVar2 == 0xd) {\n        print_matching_formats_0011256b(localVoidPointerArray[0]);\n      }\n      if (tempVar1 != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(localStatStruct.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (tempVar2 == 0xd) {\n      free(localVoidPointerArray[0]);\n    }\n  }\n  if (defaultPermission == 0) {\n    defaultPermission = *(long *)pointerToLonglong2[1];\n  }\n  if (fileDescriptor < 0) {\n    longVar2 = bfd_openw(outputFilePath,defaultPermission);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFilePath,defaultPermission,fileDescriptor);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  execute_function_if_condition_met_00114d50(longVar2,pointerToLonglong2,DAT_001264b4);\n  charVar2 = FUNC_00114e50(pointerToLonglong2,longVar2,condition);\n  if (charVar2 == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    charVar2 = bfd_close(longVar2);\n    goto LAB_001147d5;\n  }\n  charVar2 = bfd_close_all_done(longVar2);\nLAB_001147d5:\n  if (charVar2 != '\\x01') {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(outputFilePath,0,0,0);\n    return;\n  }\n  charVar2 = bfd_close(pointerToLonglong2);\n  if (charVar2 == '\\0') {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(inputFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "close",
                "FUN_00113f50",
                "bfd_stat",
                "bfd_set_error",
                "bfd_openw",
                "bfd_close",
                "__errno_location",
                "FUN_00114e50",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "bfd_set_format",
                "FUN_00114d50",
                "FUN_0011a0e0",
                "FUN_00119dd0",
                "FUN_00104d25",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_fdopenw",
                "bfd_openr_next_archived_file",
                "FUN_0011256b",
                "bfd_check_format",
                "free",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_binary_file_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "initialize_data_structure_0010b800",
                "param_1": "data_structure_ptr",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "entry_ptr",
                "uVar2": "result",
                "sVar3": "length",
                "lVar4": "entry_value",
                "lVar5": "mask",
                "local_8c": "buffer",
                "auStack_8a": "data_structure_stack"
            },
            "code": "\nundefined8 initialize_data_structure_0010b800(long data_structure_ptr,int size,char flag)\n\n{\n  long *entry_ptr;\n  undefined8 result;\n  size_t length;\n  long entry_value;\n  long mask;\n  undefined2 buffer;\n  undefined4 data_structure_stack [24];\n  \n  if (size - 1U < 8) {\n    entry_value = data_structure_ptr + 0xb8;\n    if (flag != '\\0') {\n      entry_value = data_structure_ptr + 0x78;\n    }\n    entry_ptr = (long *)(entry_value + (ulong)(size - 1U) * 8);\n    entry_value = *entry_ptr;\n    if (entry_value != 0) {\n      result = initialize_data_structure_0010b800_00109cf4(data_structure_ptr,entry_value,size);\n      return result;\n    }\n    entry_value = *(long *)(data_structure_ptr + 0x68);\n    *(long *)(data_structure_ptr + 0x68) = entry_value + 1;\n    *entry_ptr = entry_value;\n    sprintf((char *)&buffer,\"%ld=r%ld;\",entry_value,entry_value);\n    if (flag == '\\0') {\n      mask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      length = strlen((char *)&buffer);\n      sprintf((char *)((long)&buffer + length),\"%ld;%ld;\",-mask,mask + -1);\n    }\n    else {\n      length = strlen((char *)&buffer);\n      *(undefined2 *)((long)&buffer + length) = 0x3b30;\n      *(undefined *)((long)&buffer + length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&buffer + length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&buffer + length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = initialize_data_structure_0010b800_00109b52(data_structure_ptr,&buffer,entry_value,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "strlen",
                "dcgettext",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "dataArray",
                "param_5": "arraySize",
                "uVar1": "itemCount",
                "uVar2": "newArraySize",
                "cVar3": "isInitialized",
                "pcVar4": "extractedItem",
                "sVar5": "length",
                "__s": "formattedString",
                "lVar6": "index",
                "__ptr": "extractedData",
                "uVar7": "result",
                "uVar8": "isFlagged",
                "lVar9": "remainingSize",
                "uVar10": "currentSize",
                "puVar11": "ptr",
                "bVar12": "flagValue"
            },
            "code": "\nundefined8 processData_00109ed3(long data,uint flag,undefined4 value,long *dataArray,ulong *arraySize)\n\n{\n  ulong itemCount;\n  ulong newArraySize;\n  char isInitialized;\n  char *extractedItem;\n  size_t length;\n  char *formattedString;\n  long index;\n  void *extractedData;\n  undefined8 result;\n  undefined isFlagged;\n  long remainingSize;\n  ulong currentSize;\n  undefined *ptr;\n  byte flagValue;\n  \n  flagValue = 0;\n  index = *(long *)(data + 0x60);\n  if (index != 0) {\n    itemCount = *(ulong *)(index + 0x10);\n    if (((long)itemCount < 1) || (dataArray == (long *)0x0)) {\n      isFlagged = *(undefined *)(index + 0x1c);\n      extractedItem = (char *)extract_and_free_next_item_00109b2f(data);\n      length = strlen(extractedItem);\n      formattedString = (char *)xmalloc(length + 2);\n      sprintf(formattedString,\"%c%s\",(ulong)flag,extractedItem);\n      free(extractedItem);\n      index = 0;\n    }\n    else {\n      currentSize = *arraySize;\n      if (currentSize <= itemCount) {\n        if (currentSize == 0) {\n          currentSize = 10;\n        }\n        for (; currentSize <= itemCount; currentSize = currentSize * 2) {\n        }\n        index = xrealloc(*dataArray,currentSize * 8);\n        newArraySize = *arraySize;\n        *dataArray = index;\n        ptr = (undefined *)(index + newArraySize * 8);\n        for (remainingSize = (currentSize - newArraySize) * 8; remainingSize != 0; remainingSize = remainingSize + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)flagValue * -2 + 1;\n        }\n        *arraySize = currentSize;\n      }\n      index = *(long *)(*dataArray + itemCount * 8);\n      if ((index != 0) && (*(char *)(*(long *)(data + 0x60) + 0x1c) == '\\0')) {\n        extractedData = (void *)extract_and_free_next_item_00109b2f(data);\n        free(extractedData);\n        result = initialize_data_structure_00109cf4(data,index,value);\n        return result;\n      }\n      index = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = index + 1;\n      extractedItem = (char *)extract_and_free_next_item_00109b2f(data);\n      length = strlen(extractedItem);\n      formattedString = (char *)xmalloc(length + 0x14);\n      sprintf(formattedString,\"%ld=%c%s\",index,(ulong)flag,extractedItem);\n      free(extractedItem);\n      isFlagged = 1;\n      *(long *)(*dataArray + itemCount * 8) = index;\n    }\n    isInitialized = initialize_data_structure_00109b52(data,formattedString,index,isFlagged,value);\n    if (isInitialized != '\\0') {\n      free(formattedString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "xrealloc",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010a0d3",
                "FUN_0010e5db",
                "FUN_0010a0bd",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_00112925",
                "FUN_0010bf86",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010a77a",
                "FUN_00114cf0",
                "FUN_00116852",
                "FUN_0010e453",
                "FUN_00114d60",
                "FUN_0010a2b9",
                "FUN_00108d9a",
                "FUN_00114190",
                "FUN_0011a480",
                "FUN_00114c80",
                "FUN_00115530",
                "FUN_00113b98",
                "FUN_0010ab4d",
                "FUN_0010c7a0",
                "FUN_0010e918",
                "FUN_00114460",
                "FUN_0010a181",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_00108c86",
                "FUN_0010c139",
                "FUN_0010e9a0",
                "FUN_00109022",
                "FUN_001163d0",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010bd62",
                "FUN_001125fa",
                "FUN_00109ed3",
                "FUN_00112904",
                "FUN_0010554f",
                "FUN_0010e5db",
                "FUN_00104ad6",
                "FUN_0010e842",
                "FUN_0010be88",
                "FUN_0010a0e9",
                "FUN_0010bbd3",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_00109b52",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "FUN_0010e7c2",
                "FUN_0010afd5",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010aa53",
                "FUN_0010da0b",
                "FUN_0010e8a9",
                "FUN_0010a94e",
                "FUN_00108f08",
                "FUN_0010a83e",
                "FUN_00116110",
                "FUN_00113e23",
                "FUN_00109a0b",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_0010d882",
                "FUN_0010c6be",
                "FUN_00112894",
                "FUN_0010bc80",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_memory_0010bbd3",
                "param_1": "memory",
                "param_2": "filename",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "prevMemory",
                "puVar2": "newMemory1",
                "puVar3": "newMemory2",
                "lVar4": "loopVar",
                "puVar5": "nestedMemory",
                "pcVar6": "file",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] initializeMemory_0010bbd3(long *memory,char *filename,undefined8 arg3,undefined8 arg4)\n\n{\n  undefined8 *prevMemory;\n  undefined4 *newMemory1;\n  undefined4 *newMemory2;\n  long loopVar;\n  undefined4 *nestedMemory;\n  char *file;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  file = \"\";\n  if (filename != (char *)0x0) {\n    file = filename;\n  }\n  newMemory1 = (undefined4 *)xmalloc(0x18);\n  nestedMemory = newMemory1;\n  for (loopVar = 6; loopVar != 0; loopVar = loopVar + -1) {\n    *nestedMemory = 0;\n    nestedMemory = nestedMemory + (ulong)flag * -2 + 1;\n  }\n  *(char **)(newMemory1 + 2) = file;\n  newMemory2 = (undefined4 *)xmalloc(0x18);\n  memory[2] = (long)newMemory1;\n  nestedMemory = newMemory2;\n  for (loopVar = 6; loopVar != 0; loopVar = loopVar + -1) {\n    *nestedMemory = 0;\n    nestedMemory = nestedMemory + (ulong)flag * -2 + 1;\n  }\n  prevMemory = (undefined8 *)memory[1];\n  *(undefined4 **)(newMemory2 + 2) = newMemory1;\n  if (prevMemory == (undefined8 *)0x0) {\n    if (*memory != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *memory = (long)newMemory2;\n  }\n  else {\n    *prevMemory = newMemory2;\n  }\n  memory[1] = (long)newMemory2;\n  memory[5] = 0;\n  *(undefined (*) [16])(memory + 3) = ZEXT816(0);\n  result._8_8_ = arg4;\n  result._0_8_ = 1;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_memory_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = get_modified_filename_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = get_modified_filename_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_error_message_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = get_modified_filename_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = get_modified_filename_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = get_modified_filename_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_modified_filename_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = get_modified_filename_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = recognize_file_format_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = string_comparison_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = string_comparison_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,update_output_section_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = update_permissions_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = update_permissions_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = update_permissions_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = improve_debugging_information_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)initialize_data_structure_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUNC_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = process_debug_data_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = initialize_data_structure_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_entry_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUNC_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar35 != 0) && (cVar11 = process_debug_data_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_memory_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_memory_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_and_initialize_data_structure_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = initialize_or_record_debug_info_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = start_debug_block_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = end_debug_block_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_and_initialize_data_structure_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_line_debug_info_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = end_debug_function_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = initialize_section_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_and_exit_error_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = check_permissions_and_patterns_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_pattern_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = check_pattern_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_pattern_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = check_pattern_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = initialize_section_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_and_exit_error_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = process_binary_data_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,process_relocations_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_binary_00115dc0,param_2);\n    bfd_map_over_sections(param_1,process_section_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = string_comparison_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = string_comparison_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)extract_build_attributes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_format",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_00107976",
                "FUN_001125fa",
                "FUN_001126c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_value_00115d00",
                "param_1": "inputData",
                "param_2": "binaryData",
                "uVar1": "valueCount",
                "lVar2": "result"
            },
            "code": "\nlong findValue_00115d00(long inputData,long binaryData)\n\n{\n  uint valueCount;\n  long result;\n  \n  result = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(binaryData + 8) + 8) == 5) {\n      if (*(int *)(inputData + 0x28) == *(int *)(*(long *)(binaryData + 0x110) + 0xd40)) {\n        valueCount = *(uint *)(inputData + 0x2c);\n        if (valueCount == 0) {\n          result = 0;\n        }\n        else if ((ulong)valueCount <\n                 *(ulong *)(*(long *)(binaryData + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryData + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278b0 + (ulong)(valueCount - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "find_value_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_and_store_data_00113c43",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "lVar1": "data_structure_ptr",
                "plVar2": "data_ptr",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\ninitialize_and_store_data_00113c43(long input_param_1,long input_param_2,long input_param_3,long input_param_4,undefined input_param_5,\n            undefined8 input_param_6)\n\n{\n  long data_structure_ptr;\n  long *data_ptr;\n  undefined return_value [16];\n  \n  if ((input_param_1 != 0) && (input_param_2 != 0)) {\n    data_structure_ptr = initialize_data_structure_00112904(0x10,0);\n    if (data_structure_ptr != 0) {\n      data_ptr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)data_ptr + 0x21) = 0;\n      *data_ptr = input_param_1;\n      *(undefined4 *)((long)data_ptr + 0x24) = 0;\n      data_ptr[1] = input_param_2;\n      data_ptr[2] = input_param_3;\n      data_ptr[3] = input_param_4;\n      *(undefined *)(data_ptr + 4) = input_param_5;\n      *(long **)(data_structure_ptr + 0x10) = data_ptr;\n      goto LAB_00113caa;\n    }\n  }\n  data_structure_ptr = 0;\nLAB_00113caa:\n  return_value._8_8_ = input_param_6;\n  return_value._0_8_ = data_structure_ptr;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_and_store_data_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "initialize_or_record_debug_info_00112a33",
                "param_1": "debugParams",
                "param_2": "debugContext",
                "param_3": "debugData",
                "param_4": "debugTag",
                "param_5": "debugValue",
                "param_6": "debugSize",
                "param_7": "debugMask",
                "uVar1": "result",
                "lVar2": "tagType",
                "plVar3": "tagPtr"
            },
            "code": "\nbool initializeOrRecordDebugInfo_00112a33(undefined8 debugParams,long debugContext,undefined8 debugData,byte debugTag,undefined8 debugValue\n                 ,undefined8 debugSize,uint debugMask)\n\n{\n  undefined result;\n  long tagType;\n  long *tagPtr;\n  \n  if (debugTag < 0x12) {\n    if (debugTag != 0) {\n      switch(debugTag) {\n      case 1:\n        result = initialize_variable_debug_0010c05d(debugValue,*(undefined8 *)(debugContext + 8),debugSize,4,\n                             *(long *)(debugContext + 0x10) + *(long *)(*(long *)(debugContext + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = initialize_variable_debug_0010c05d(debugValue,*(undefined8 *)(debugContext + 8),debugSize,(debugMask & 0xff) + 2,\n                             *(long *)(debugContext + 0x10) + *(long *)(*(long *)(debugContext + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = initialize_variable_debug_0010c05d(debugValue,*(undefined8 *)(debugContext + 8),debugSize,5,\n                             *(long *)(debugContext + 0x10) + *(long *)(*(long *)(debugContext + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = record_parameter_debug_0010bd62(debugValue,*(undefined8 *)(debugContext + 8),debugSize,1,\n                             *(long *)(debugContext + 0x10) + *(long *)(*(long *)(debugContext + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        tagType = debug_tag_type_0010c6be(debugValue,*(undefined8 *)(debugContext + 8));\n        if (tagType == 0) {\n          return false;\n        }\n        tagPtr = (long *)allocate_and_populate_slots_0010da0b(debugParams,debugData);\n        *tagPtr = tagType;\n        break;\n      case 0xd:\n        tagType = initialize_debug_info_0010c218(debugValue,*(undefined8 *)(debugContext + 8));\n        return tagType != 0;\n      case 0x11:\n        result = record_parameter_debug_0010bd62(debugValue,*(undefined8 *)(debugContext + 8),debugSize,2,\n                             *(long *)(debugContext + 0x10) + *(long *)(*(long *)(debugContext + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (debugTag == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = initialize_variable_debug_0010c05d(debugValue,*(undefined8 *)(debugContext + 8),debugSize,1,\n                         *(long *)(debugContext + 0x10) + *(long *)(*(long *)(debugContext + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_or_record_debug_info_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "process_data_type_0010c2d2",
                "param_1": "ptr_debug_info",
                "param_2": "dat_struct",
                "param_3": "ptr_type",
                "uVar1": "type_value",
                "pcVar2": "type_string",
                "uVar3": "data_update_result",
                "lVar4": "dataType_address",
                "plVar5": "ptr_data",
                "uVar6": "neg_type_value"
            },
            "code": "\n\n\nlong processDataType_0010c2d2(undefined8 ptr_debug_info,long dat_struct,int *ptr_type)\n\n{\n  uint type_value;\n  char *type_string;\n  undefined8 data_update_result;\n  long dataType_address;\n  long *ptr_data;\n  uint neg_type_value;\n  \n  if ((*ptr_type == 0) && (type_value = ptr_type[1], (int)type_value < 0)) {\n    neg_type_value = ~type_value;\n    if (neg_type_value < 0x22) {\n      dataType_address = *(long *)(dat_struct + 0x90 + (ulong)neg_type_value * 8);\n      if (dataType_address == 0) {\n        switch(neg_type_value) {\n        case 1:\n          data_update_result = update_data_structure_00113dfe(1,0);\n          type_string = \"char\";\n          break;\n        case 2:\n          data_update_result = update_data_structure_00113dfe(2,0);\n          type_string = \"short\";\n          break;\n        case 3:\n          data_update_result = update_data_structure_00113dfe(4,0);\n          type_string = \"long\";\n          break;\n        case 4:\n          data_update_result = update_data_structure_00113dfe(1,1);\n          type_string = \"unsigned char\";\n          break;\n        case 5:\n          data_update_result = update_data_structure_00113dfe(1,0);\n          type_string = \"signed char\";\n          break;\n        case 6:\n          data_update_result = update_data_structure_00113dfe(2,1);\n          type_string = \"unsigned short\";\n          break;\n        case 7:\n          data_update_result = update_data_structure_00113dfe(4,1);\n          type_string = \"unsigned int\";\n          break;\n        case 8:\n          data_update_result = update_data_structure_00113dfe(4,1);\n          type_string = \"unsigned\";\n          break;\n        case 9:\n          data_update_result = update_data_structure_00113dfe(4,1);\n          type_string = \"unsigned long\";\n          break;\n        case 10:\n          data_update_result = initialize_data_structure_00113e17();\n          type_string = \"void\";\n          break;\n        case 0xb:\n          data_update_result = initialize_data_structure_00113df2(4);\n          type_string = \"float\";\n          break;\n        case 0xc:\n          data_update_result = initialize_data_structure_00113df2(8);\n          type_string = \"double\";\n          break;\n        case 0xd:\n          data_update_result = initialize_data_structure_00113df2(8);\n          type_string = \"long double\";\n          break;\n        case 0xe:\n          data_update_result = update_data_structure_00113dfe(4,0);\n          type_string = \"integer\";\n          break;\n        case 0xf:\n          data_update_result = initialize_data_structure_00112904(6,4);\n          type_string = \"boolean\";\n          break;\n        case 0x10:\n          data_update_result = initialize_data_structure_00113df2(4);\n          type_string = \"short real\";\n          break;\n        case 0x11:\n          data_update_result = initialize_data_structure_00113df2(8);\n          type_string = \"real\";\n          break;\n        case 0x12:\n          type_string = \"stringptr\";\n          data_update_result = 0;\n          break;\n        case 0x13:\n          data_update_result = update_data_structure_00113dfe(1,1);\n          type_string = \"character\";\n          break;\n        case 0x14:\n          data_update_result = initialize_data_structure_00112904(6,1);\n          type_string = \"logical*1\";\n          break;\n        case 0x15:\n          data_update_result = initialize_data_structure_00112904(6,2);\n          type_string = \"logical*2\";\n          break;\n        case 0x16:\n          data_update_result = initialize_data_structure_00112904(6,4);\n          type_string = \"logical*4\";\n          break;\n        case 0x17:\n          data_update_result = initialize_data_structure_00112904(6,4);\n          type_string = \"logical\";\n          break;\n        case 0x18:\n          data_update_result = initialize_data_structure_00112904(5,8);\n          type_string = \"complex\";\n          break;\n        case 0x19:\n          data_update_result = initialize_data_structure_00112904(5,0x10);\n          type_string = \"double complex\";\n          break;\n        case 0x1a:\n          data_update_result = update_data_structure_00113dfe(1,0);\n          type_string = \"integer*1\";\n          break;\n        case 0x1b:\n          data_update_result = update_data_structure_00113dfe(2,0);\n          type_string = \"integer*2\";\n          break;\n        case 0x1c:\n          data_update_result = update_data_structure_00113dfe(4,0);\n          type_string = \"integer*4\";\n          break;\n        case 0x1d:\n          data_update_result = update_data_structure_00113dfe(2,0);\n          type_string = \"wchar\";\n          break;\n        case 0x1e:\n          data_update_result = update_data_structure_00113dfe(8,0);\n          type_string = \"long long\";\n          break;\n        case 0x1f:\n          data_update_result = update_data_structure_00113dfe(8,1);\n          type_string = \"unsigned long long\";\n          break;\n        case 0x20:\n          data_update_result = initialize_data_structure_00112904(6,8);\n          type_string = \"logical*8\";\n          break;\n        case 0x21:\n          data_update_result = update_data_structure_00113dfe(8,0);\n          type_string = \"integer*8\";\n          break;\n        default:\n          data_update_result = update_data_structure_00113dfe(4,0);\n          type_string = \"int\";\n        }\n        dataType_address = initialize_debug_info_0010c218(ptr_debug_info,type_string,data_update_result);\n        *(long *)(dat_struct + 0x90 + (ulong)neg_type_value * 8) = dataType_address;\n        return dataType_address;\n      }\n      return dataType_address;\n    }\n    type_string = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,type_string,(ulong)type_value);\n  }\n  else {\n    ptr_data = (long *)process_file_number_00109022(dat_struct);\n    if (ptr_data != (long *)0x0) {\n      if (*ptr_data == 0) {\n        dataType_address = create_data_structure_00113e23(ptr_data,0);\n        return dataType_address;\n      }\n      return *ptr_data;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c218",
                "fprintf",
                "dcgettext",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00109022",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_data_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "process_binary_0010e07c",
                "param_1": "file_handle",
                "param_2": "read_ptrs",
                "param_3": "input_param",
                "param_4": "flag",
                "param_5": "offset",
                "param_6": "output_param",
                "lVar1": "length",
                "lVar2": "symbol",
                "lVar3": "counter",
                "cVar4": "status",
                "uVar5": "error_code",
                "__ptr": "data_ptr",
                "uVar6": "result1",
                "uVar7": "result2",
                "puVar8": "temp_ptr",
                "pcVar9": "error_msg",
                "puVar10": "aux_data_ptr",
                "uVar11": "value",
                "lVar12": "index",
                "iVar13": "result3",
                "iVar14": "initial_size",
                "local_a8": "value1",
                "uStack_a4": "value2",
                "uStack_a0": "value3",
                "uStack_9c": "value4",
                "local_88": "buffer",
                "local_6a": "value5",
                "local_68": "flag2",
                "local_67": "flag1",
                "local_60": "aux_data",
                "local_56": "value6"
            },
            "code": "\nundefined8\nprocess_binary_0010e07c(undefined8 file_handle,long *read_ptrs,undefined8 input_param,int flag,long offset,\n            undefined8 output_param)\n\n{\n  long length;\n  long symbol;\n  long counter;\n  char status;\n  undefined4 error_code;\n  void *data_ptr;\n  undefined8 result1;\n  undefined8 result2;\n  undefined4 *temp_ptr;\n  char *error_msg;\n  undefined *aux_data_ptr;\n  uint value;\n  long index;\n  int result3;\n  int initial_size;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined buffer [30];\n  undefined2 value5;\n  byte flag2;\n  byte flag1;\n  undefined aux_data [10];\n  ushort value6;\n  \n  initial_size = 10;\n  index = 0;\n  length = *(long *)(offset + 0x18);\n  data_ptr = (void *)xmalloc(0x50);\n  while ((read_ptrs[3] < length && (read_ptrs[2] < read_ptrs[1]))) {\n    symbol = *(long *)(*read_ptrs + read_ptrs[2] * 8);\n    status = bfd_coff_get_syment(file_handle,symbol,buffer);\n    if (status == '\\0') {\n      error_code = bfd_get_error();\n      result1 = bfd_errmsg(error_code);\n      error_msg = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      result2 = dcgettext(0,error_msg,5);\n      print_error_message_00119ed0(result2,result1);\n      free(data_ptr);\n      return 0;\n    }\n    counter = read_ptrs[3];\n    aux_data_ptr = (undefined *)0x0;\n    read_ptrs[2] = read_ptrs[2] + 1;\n    read_ptrs[3] = counter + 1 + (ulong)flag1;\n    if (flag1 != 0) {\n      aux_data_ptr = aux_data;\n      status = bfd_coff_get_auxent(file_handle,symbol,0,aux_data_ptr);\n      if (status == '\\0') {\n        error_code = bfd_get_error();\n        result1 = bfd_errmsg(error_code);\n        error_msg = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (flag2 == 0x12) {\n      value = (uint)value6;\n      result3 = (int)*(undefined8 *)(symbol + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol + 0x20) + 0x30);\n    }\n    else {\n      if (flag2 < 0x13) {\n        if ((flag2 == 8) || (flag2 == 0xb)) {\n          value = 0;\n          result3 = ((int)*(undefined8 *)(symbol + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (flag2 == 0x66) break;\n      value = 0;\n      result3 = 0;\n    }\nLAB_0010e214:\n    result2 = parse_and_initialize_data_structure_0010dac0(file_handle,read_ptrs,input_param,counter,value5,aux_data_ptr,1);\n    result1 = *(undefined8 *)(symbol + 8);\n    temp_ptr = (undefined4 *)xmalloc(0x20);\n    value1 = (undefined4)result1;\n    value2 = (undefined4)((ulong)result1 >> 0x20);\n    value3 = (undefined4)result2;\n    value4 = (undefined4)((ulong)result2 >> 0x20);\n    *(undefined8 *)(temp_ptr + 5) = 0;\n    temp_ptr[6] = result3;\n    temp_ptr[7] = value;\n    temp_ptr[4] = 0;\n    *temp_ptr = value1;\n    temp_ptr[1] = value2;\n    temp_ptr[2] = value3;\n    temp_ptr[3] = value4;\n    if (initial_size <= (int)index + 1) {\n      initial_size = initial_size + 10;\n      data_ptr = (void *)xrealloc(data_ptr,(long)initial_size << 3,temp_ptr,0,output_param);\n    }\n    *(undefined4 **)((long)data_ptr + index * 8) = temp_ptr;\n    index = index + 1;\n  }\n  *(undefined8 *)((long)data_ptr + (long)(int)index * 8) = 0;\n  result1 = initialize_data_structure_00113da9(flag == 8,*(undefined2 *)(offset + 10),data_ptr);\n  return result1;\n}\n\n",
            "called": [
                "FUN_00113da9",
                "xrealloc",
                "bfd_errmsg",
                "free",
                "dcgettext",
                "xmalloc",
                "bfd_coff_get_syment",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "FUN_0010dac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "process_binary_0010e07c",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_data_structure_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_default_value_001082c3",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t getDefaultValue_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "get_default_value_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "param_1": "fileName",
                "param_2": "hashTable",
                "param_3": "fileContent",
                "__n": "fileSize",
                "__ptr": "buffer",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "hashTableEntry",
                "pbVar7": "currentChar",
                "bVar8": "currentByte",
                "pbVar9": "nextChar",
                "pbVar10": "currentPtr",
                "pbVar11": "nextPtr",
                "pbVar12": "lineStartPtr",
                "iVar1": "lineNumber",
                "piVar2": "errorNumber",
                "pcVar3": "errorMessage",
                "uVar4": "localizedMessage"
            },
            "code": "\nvoid readAndProcessFile_00114460(char *fileName,undefined8 hashTable,byte **fileContent)\n\n{\n  int lineNumber;\n  int *errorNumber;\n  char *errorMessage;\n  undefined8 localizedMessage;\n  size_t fileSize;\n  byte *buffer;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **hashTableEntry;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextChar;\n  byte *currentPtr;\n  byte *nextPtr;\n  byte *lineStartPtr;\n  \n  fileSize = get_file_info_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(fileName,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errorNumber = __errno_location();\n      errorMessage = strerror(*errorNumber);\n      localizedMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_and_exit_error_00119dd0(localizedMessage,fileName,errorMessage);\n    }\n    bytesRead = fread(buffer,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (lineNumber = ferror(fileStream), lineNumber != 0)) {\n      localizedMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_and_exit_error_00119dd0(localizedMessage,fileName);\n    }\n    lineNumber = 1;\n    fclose(fileStream);\n    *(undefined2 *)(buffer + fileSize) = 10;\n    currentByte = *buffer;\n    lineStartPtr = buffer;\n    while (currentPtr = lineStartPtr, currentByte != 0) {\n      for (; currentByte = *currentPtr, nextPtr = currentPtr, currentByte != 10; currentPtr = currentPtr + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextChar = currentPtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentPtr = 0;\n            nextChar = currentPtr + 1;\n            if (currentPtr[1] == 10) {\n              nextChar = currentPtr + 2;\n              nextPtr = currentPtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentPtr = 0;\n      if (currentPtr[1] == 0xd) {\n        nextPtr = currentPtr + 1;\n        nextChar = currentPtr + 2;\n      }\n      else {\n        nextChar = currentPtr + 1;\n      }\nLAB_00114553:\n      currentByte = *lineStartPtr;\n      while ((currentByte == 0x20 || (currentPtr = lineStartPtr, currentByte == 9))) {\n        currentPtr = lineStartPtr + 1;\n        lineStartPtr = lineStartPtr + 1;\n        currentByte = *currentPtr;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentPtr[1];\n        currentPtr = currentPtr + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentPtr[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentPtr[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentPtr[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentPtr[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentPtr[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentPtr[6];\n          currentChar = currentPtr + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentChar[1];\n                currentChar = currentChar + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          localizedMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message_00119ed0(localizedMessage,fileName,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentPtr = 0;\n      if (lineStartPtr < currentPtr) {\n        hashTableEntry = (byte **)htab_find_slot(hashTable,lineStartPtr,1);\n        *hashTableEntry = lineStartPtr;\n      }\n      lineNumber = lineNumber + 1;\n      lineStartPtr = nextChar;\n      currentByte = nextPtr[1];\n    }\n    *fileContent = buffer;\n  }\n  return;\n}\n\n",
            "called": [
                "fclose",
                "ferror",
                "FUN_00119dd0",
                "__errno_location",
                "FUN_00113f50",
                "dcgettext",
                "xmalloc",
                "strerror",
                "fread",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "create_formatted_string_0010a94e",
                "param_1": "param1",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "flag",
                "cVar1": "flagValue",
                "lVar2": "ptr",
                "__s": "extractedItem",
                "sVar3": "len1",
                "sVar4": "len2",
                "sVar5": "len3",
                "sVar6": "len4",
                "pcVar7": "formattedString",
                "uVar8": "result",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8 createFormattedString_0010a94e(long param1,char *input1,char *input2,int flag)\n\n{\n  char flagValue;\n  long ptr;\n  char *extractedItem;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  char *formattedString;\n  undefined8 result;\n  char *flagString;\n  \n  flagValue = *(char *)(*(long *)(param1 + 0x60) + 0x1c);\n  extractedItem = (char *)extract_and_free_next_item_00109b2f();\n  formattedString = *(char **)(*(long *)(param1 + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    len1 = strlen(formattedString);\n    len2 = strlen(input1);\n    len3 = strlen(extractedItem);\n    len4 = strlen(input2);\n    formattedString = (char *)xmalloc(len1 + 10 + len2 + len3 + len4);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(param1 + 0x60) + 0x20),input1,flagString,\n            extractedItem,input2,*(long *)(param1 + 0x60));\n    free(*(void **)(*(long *)(param1 + 0x60) + 0x20));\n    ptr = *(long *)(param1 + 0x60);\n    *(char **)(ptr + 0x20) = formattedString;\n    if (flagValue != '\\0') {\n      *(undefined *)(ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_formatted_string_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_debug_info_00113b1e",
                "param_1": "input_address",
                "param_2": "unused_param",
                "param_3": "result_address",
                "param_4": "output_value",
                "auVar1": "result_emptyAddress",
                "piVar2": "debug_info",
                "uVar3": "debug_value",
                "auVar4": "result_output"
            },
            "code": "\nundefined  [16] extract_debug_info_00113b1e(long input_address,undefined8 unused_param,ulong result_address,undefined8 output_value)\n\n{\n  undefined result_emptyAddress [16];\n  int *debug_info;\n  undefined8 debug_value;\n  undefined result_output [16];\n  \n  if (input_address != 0) {\n    debug_info = (int *)process_debug_info_00112b6e(input_address,0);\n    if ((debug_info == (int *)0x0) || (3 < *debug_info - 7U)) {\n      debug_value = 0;\n    }\n    else {\n      debug_value = **(undefined8 **)(debug_info + 4);\n    }\n    result_output._8_8_ = output_value;\n    result_output._0_8_ = debug_value;\n    return result_output;\n  }\n  result_emptyAddress._8_8_ = 0;\n  result_emptyAddress._0_8_ = result_address;\n  return result_emptyAddress << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_debug_info_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "initialize_data_structure_0010a0e9",
                "param_1": "data_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "ptr_value",
                "uVar2": "result",
                "__s": "extracted_string",
                "sVar3": "string_length",
                "__s_00": "modified_string"
            },
            "code": "\nundefined4 initialize_data_structure_0010a0e9(long data_ptr,undefined8 value1,undefined8 value2)\n\n{\n  undefined ptr_value;\n  undefined4 result;\n  char *extracted_string;\n  size_t string_length;\n  char *modified_string;\n  \n  ptr_value = *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(data_ptr + 0x60) + 0x18);\n  extracted_string = (char *)extract_and_free_next_item_00109b2f();\n  string_length = strlen(extracted_string);\n  modified_string = (char *)xmalloc(string_length + 100);\n  sprintf(modified_string,\"r%s;%ld;%ld;\",extracted_string,value1,value2);\n  free(extracted_string);\n  result = initialize_data_structure_0010a0e9_00109b52(data_ptr,modified_string,0,ptr_value,result);\n  if ((char)result != '\\0') {\n    free(modified_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "set_permissions_00114c20",
                "param_1": "inputParam",
                "cVar1": "comparisonResult",
                "pcVar2": "pointerVar"
            },
            "code": "\nvoid setPermissions_00114c20(long inputParam)\n\n{\n  char comparisonResult;\n  char *pointerVar;\n  \n  update_permissions_00114190(inputParam,1,1);\n  comparisonResult = string_comparison_00113fb0(inputParam,&DAT_0011b499);\n  if (comparisonResult != '\\0') {\n    pointerVar = (char *)(inputParam + 5);\n    if (*(char *)(inputParam + 4) != 'a') {\n      pointerVar = (char *)(inputParam + 4);\n    }\n    if (*pointerVar != '\\0') {\n      update_permissions_00114190(pointerVar,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_00114190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "set_permissions_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_permissions_and_patterns_00115f50",
                "param_1": "file_size",
                "param_2": "arguments",
                "param_3": "flag",
                "__s1": "argument",
                "uVar1": "comparison_result",
                "uVar2": "result",
                "extraout_EDX": "extra_result",
                "plVar3": "list_ptr",
                "auVar4": "permission_result"
            },
            "code": "\nuint check_permissions_and_patterns_00115f50(long file_size,char **arguments,char flag)\n\n{\n  char *argument;\n  uint comparison_result;\n  undefined4 result;\n  undefined4 extra_result;\n  long *list_ptr;\n  undefined permission_result [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  permission_result = check_permissions_and_patterns_00115f50_001159d0(arguments);\n  if (permission_result[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      argument = *arguments;\n      list_ptr = DAT_001279b8;\n      do {\n        comparison_result = strcmp(argument,(char *)list_ptr[1]);\n        permission_result._4_4_ = 0;\n        permission_result._0_4_ = comparison_result;\n        permission_result._8_4_ = extra_result;\n        if (comparison_result == 0) {\n          return 1;\n        }\n        list_ptr = (long *)*list_ptr;\n      } while (list_ptr != (long *)0x0);\n    }\n    result = permission_result._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (permission_result._8_4_ = result, permission_result._0_8_ = *(long *)(file_size + 8),\n         *(int *)(*(long *)(file_size + 8) + 8) != 5)) ||\n        ((permission_result._0_8_ = (ulong)arguments[0x1a], *(int *)(arguments[0x1a] + 4) != 7 ||\n         (permission_result = string_comparison_00113fb0(*arguments,\".gnu.build.attributes\"), permission_result[0] == '\\0')))) &&\n       ((*(byte *)((long)arguments + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(permission_result._1_7_,arguments[8] == (char *)0x0) |\n             CONCAT31(permission_result._9_3_,arguments[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00116110",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "check_permissions_and_patterns_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "print_error_and_exit_001083de",
                "unaff_RBX": "sectionLengthPtr",
                "unaff_EBP": "errorNum",
                "uVar1": "sectionLength",
                "uVar2": "errorMsg",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nvoid printErrorAndExit_001083de(void)\n\n{\n  undefined8 sectionLength;\n  undefined8 errorMsg;\n  undefined8 *sectionLengthPtr;\n  undefined4 errorNum;\n  \n  sectionLength = *sectionLengthPtr;\n  errorMsg = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_and_exit_error_00119dd0(errorMsg,sectionLength,errorNum);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880",
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "initialize_data_structure_0010b948",
                "param_1": "pointer",
                "param_2": "size",
                "lVar1": "item",
                "cVar2": "success",
                "__ptr": "itemData",
                "uVar3": "itemSize",
                "uVar4": "adjustedSize",
                "local_5a": "logMessage"
            },
            "code": "\nvoid initializeDataStructure_0010b948(long pointer,uint size)\n\n{\n  long item;\n  char success;\n  void *itemData;\n  ulong itemSize;\n  uint adjustedSize;\n  char logMessage [50];\n  \n  adjustedSize = size - 1;\n  itemSize = (ulong)size;\n  if ((adjustedSize < 0x10) && (item = *(long *)(pointer + 0xf8 + (ulong)adjustedSize * 8), item != 0)) {\n    initialize_data_structure_00109cf4(pointer,item,itemSize);\n    return;\n  }\n  success = initialize_data_structure_0010b800(pointer,4,0);\n  if (success != '\\0') {\n    itemData = (void *)extract_and_free_next_item_00109b2f(pointer);\n    item = *(long *)(pointer + 0x68);\n    *(long *)(pointer + 0x68) = item + 1;\n    if (adjustedSize < 0x10) {\n      *(long *)(pointer + 0xf8 + (ulong)adjustedSize * 8) = item;\n    }\n    sprintf(logMessage,\"%ld=r%s;%u;0;\",item,itemData,itemSize);\n    free(itemData);\n    initialize_data_structure_00109b52(pointer,logMessage,item,1,itemSize);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010b800",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_00104966",
                "FUN_00116490",
                "FUN_0010bf86",
                "FUN_00108fe8",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0010827b",
                "FUN_00104cc1",
                "FUN_0010bf20",
                "FUN_00108b3e",
                "FUN_00108072",
                "FUN_00114e50",
                "FUN_00104a35",
                "FUN_00107976",
                "FUN_001053b5",
                "FUN_00108d9a",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_001083de",
                "FUN_00115530",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00108fb9",
                "FUN_00115dc0",
                "FUN_00109022",
                "FUN_00108a2a",
                "FUN_0010911f",
                "FUN_001163d0",
                "FUN_00116b90",
                "FUN_0011256b",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_0010bd62",
                "FUN_0010c892",
                "FUN_00114690",
                "FUN_00115b70",
                "FUN_0010e2f0",
                "FUN_00119970",
                "FUN_0010554f",
                "FUN_0010c2d2",
                "FUN_0010882c",
                "FUN_00104ad6",
                "FUN_00113f50",
                "FUN_0010be88",
                "FUN_0010543c",
                "FUN_001152b6",
                "FUN_00114e00",
                "FUN_00112996",
                "FUN_0010dac0",
                "FUN_00108916",
                "FUN_00108808",
                "FUN_0011173a",
                "FUN_0010871c",
                "FUN_001086af",
                "FUN_00109a32",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010808f",
                "FUN_0010da0b",
                "FUN_00108200",
                "FUN_0010551d",
                "FUN_00108f08",
                "FUN_0010914e",
                "FUN_0010be1a",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_00108375",
                "FUN_00108179",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010bc80",
                "FUN_00105828",
                "FUN_0010b800",
                "FUN_00107880",
                "FUN_00104920"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "process_debug_info_00112b6e",
                "param_1": "input_array",
                "param_2": "debug_info",
                "iVar1": "first_element",
                "__format": "format_string",
                "piVar3": "result_array",
                "plVar4": "current_debug_info",
                "bVar5": "is_circular",
                "local_18": "debug_stack",
                "local_10": "current_input"
            },
            "code": "\n\n\nint * process_debug_info_00112b6e(int *input_array,long *debug_info)\n\n{\n  int first_element;\n  undefined8 uVar2;\n  char *format_string;\n  int *result_array;\n  long *current_debug_info;\n  bool is_circular;\n  long *debug_stack;\n  int *current_input;\n  \n  first_element = *input_array;\n  if ((first_element != 1) && (1 < first_element - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      uVar2 = get_return_value_001129f4(input_array,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,uVar2);\n      return (int *)0x0;\n    }\n  }\n  debug_stack = debug_info;\n  current_input = input_array;\n  if (first_element - 0x16U < 2) {\n    result_array = (int *)process_debug_info_00112b6e((*(undefined8 **)(input_array + 4))[1],&debug_stack);\n    return result_array;\n  }\n  result_array = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result_array) {\n    return input_array;\n  }\n  if (result_array == (int *)0x0) {\n    return input_array;\n  }\n  result_array = (int *)process_debug_info_00112b6e(result_array,&debug_stack);\n  return result_array;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_001129f4",
                "FUN_00112b6e",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010922b",
                "FUN_00113b1e",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "process_debug_info_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "param_3": "value1",
                "param_4": "flag",
                "param_5": "value2",
                "param_6": "flag1",
                "param_7": "flag2",
                "uVar1": "result",
                "__s": "str1",
                "__s_00": "str2",
                "sVar2": "str_length",
                "cVar3": "char_value"
            },
            "code": "\nundefined4\nprocess_data_0010a83e(long data_ptr,undefined8 param_ptr,ulong value1,undefined flag,ulong value2,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *str1;\n  char *str2;\n  size_t str_length;\n  char char_value;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    str1 = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    str1 = (char *)extract_and_free_next_item_00109b2f();\n    value2 = value2 & 0xffffffff;\n    value1 = value1 & 0xffffffff;\n  }\n  result = initialize_data_structure_0010a69a(data_ptr,param_ptr,value1,flag,value2);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (str1 == (char *)0x0) {\n        return 0;\n      }\n      str_length = strlen(str1);\n      str2 = (char *)xmalloc(str_length + 3);\n      sprintf(str2,\"~%%%s\",str1);\n      free(str1);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      str2 = (char *)xmalloc(0x14);\n      sprintf(str2,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = str2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "FUN_0010a69a",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_data_structure_00113d6e",
                "param_1": "data1",
                "param_2": "data2",
                "lVar1": "structure",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong createDataStructure_00113d6e(undefined8 data1,undefined8 data2)\n\n{\n  long structure;\n  undefined8 *allocatedMemory;\n  \n  structure = initialize_data_structure_00112904(0xb,0);\n  if (structure != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = data1;\n    allocatedMemory[1] = data2;\n    *(undefined8 **)(structure + 0x10) = allocatedMemory;\n  }\n  return structure;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00116852",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_00104a35",
                "FUN_0010c1c6",
                "FUN_00109b2f",
                "FUN_0010e918",
                "FUN_0010a181",
                "FUN_0010e9a0",
                "FUN_00108466",
                "FUN_001163d0",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0011256b",
                "FUN_0010eafe",
                "FUN_001081e9",
                "FUN_0010ee3f",
                "FUN_00114690",
                "FUN_001125fa",
                "FUN_001088ae",
                "FUN_00109ed3",
                "FUN_0010554f",
                "FUN_0010e5db",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_0010e7c2",
                "FUN_0010afd5",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_00114b84",
                "FUN_0010a94e",
                "FUN_0010551d",
                "FUN_0010a83e",
                "FUN_00116110",
                "FUN_0010d21c",
                "FUN_00108863",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_0010b0fa",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_if_condition_met_00114d50",
                "param_1": "functionPointer1",
                "param_2": "functionPointer2",
                "param_3": "condition",
                "byte": "byteValue"
            },
            "code": "\nvoid executeFunctionIfConditionMet_00114d50(long functionPointer1,long functionPointer2,uint condition)\n\n{\n  if (*(int *)(*(long *)(functionPointer1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((condition == 2) && (*(int *)(*(long *)(functionPointer2 + 8) + 8) == 2)) {\n    condition = (uint)*(byteValue *)(*(long *)(*(long *)(functionPointer2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(functionPointer1 + 8) + 0x380) + 0x78))(functionPointer1,condition != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_function_if_condition_met_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00116b90",
                "FUN_00114d60",
                "FUN_00114460",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_00113f50",
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "file",
                "param_2": "errorCode",
                "uVar1": "defaultArch",
                "pcVar2": "message",
                "dcgettext": "getTranslatedMessage"
            },
            "code": "\nvoid printUsage_00108916(FILE *file,int errorCode)\n\n{\n  undefined8 defaultArch;\n  char *message;\n  \n  defaultArch = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(file,message,defaultArch);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(file,message);\n  print_supported_targets_00104a35(DAT_001275e0,file);\n  if (errorCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "FUN_00104a35",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "filename",
                "param_10": "fileSize",
                "param_11": "modifiedFiles",
                "param_12": "errorMessage",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "iVar1": "bfdError",
                "uVar2": "errorMsg",
                "local_100": "bufferSize1",
                "local_fc": "bufferSize2",
                "local_f8": "stackPtr",
                "local_f0": "localBuffer",
                "local_e8": "flagBuffer",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "errorCode1Copy",
                "local_a8": "errorCode2Copy",
                "local_98": "errorCode3Copy",
                "local_88": "errorCode4Copy",
                "local_78": "errorCode5Copy",
                "local_68": "errorCode6Copy",
                "local_58": "errorCode7Copy",
                "local_48": "errorCode8Copy"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 long filename,long fileSize,long *modifiedFiles,char *errorMessage,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int bfdError;\n  undefined8 errorMsg;\n  undefined4 bufferSize1;\n  undefined4 bufferSize2;\n  undefined *stackPtr;\n  undefined *localBuffer;\n  undefined flagBuffer [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCode1Copy;\n  undefined4 errorCode2Copy;\n  undefined4 errorCode3Copy;\n  undefined4 errorCode4Copy;\n  undefined4 errorCode5Copy;\n  undefined4 errorCode6Copy;\n  undefined4 errorCode7Copy;\n  undefined4 errorCode8Copy;\n  \n  if (flag != '\\0') {\n    errorCode1Copy = errorCode1;\n    errorCode2Copy = errorCode2;\n    errorCode3Copy = errorCode3;\n    errorCode4Copy = errorCode4;\n    errorCode5Copy = errorCode5;\n    errorCode6Copy = errorCode6;\n    errorCode7Copy = errorCode7;\n    errorCode8Copy = errorCode8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMsg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMsg = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_001275e0,_stderr);\n  if (fileSize != 0) {\n    if (filename == 0) {\n      filename = get_modified_filename_001125fa(fileSize);\n    }\n    if ((modifiedFiles != (long *)0x0) && (*modifiedFiles != 0)) {\n      fprintf(_stderr,\": %s[%s]\",filename);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",filename);\nLAB_001127c1:\n  if (errorMessage != (char *)0x0) {\n    stackPtr = &stack0x00000008;\n    localBuffer = flagBuffer;\n    bufferSize1 = 0x20;\n    bufferSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,errorMessage,&bufferSize1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMsg);\n  return;\n}\n\n",
            "called": [
                "fputs",
                "bfd_errmsg",
                "fprintf",
                "fflush",
                "dcgettext",
                "fwrite",
                "bfd_get_error",
                "vfprintf",
                "FUN_001125fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_0010554f",
                "FUN_00104d25",
                "FUN_0010551d",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00108466",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_0010808f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001088ae",
                "FUN_00109b52"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_data_structure_00113b4a",
                "param_1": "inputValue",
                "lVar1": "dataStructure",
                "initialize_data_structure_00112904": "initializeDataStructureHelper"
            },
            "code": "\nlong initializeDataStructure_00113b4a(long inputValue)\n\n{\n  long dataStructure;\n  \n  if (inputValue != 0) {\n    dataStructure = initializeDataStructure_00113b4aHelper(0x15,0);\n    if (dataStructure == 0) {\n      dataStructure = 0;\n    }\n    else {\n      *(long *)(dataStructure + 0x10) = inputValue;\n    }\n    return dataStructure;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_information_0010edb4",
                "param_1": "fileInformation",
                "param_2": "filename",
                "param_3": "mode",
                "param_4": "filesize",
                "cVar1": "isHashUpdateSuccessful",
                "iVar2": "filenameComparisonResult",
                "uVar3": "hashTableUpdateResult",
                "in_R10": "placeholderRegister",
                "filename_cmp": "compareFilenames",
                "update_hash_table_0010e2f0": "updateHashTable"
            },
            "code": "\nundefined8 updateFileInformation_0010edb4(long fileInformation,undefined8 filename,undefined4 mode,ulong filesize)\n\n{\n  char isHashUpdateSuccessful;\n  int filenameComparisonResult;\n  undefined8 hashTableUpdateResult;\n  undefined8 placeholderRegister;\n  \n  if (*(long *)(fileInformation + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileInformation + 0x1f0) < filesize) {\n    *(ulong *)(fileInformation + 0x1f0) = filesize;\n  }\n  filenameComparisonResult = filename_cmp(filename);\n  if (filenameComparisonResult != 0) {\n    isHashUpdateSuccessful = updateHashTable(fileInformation,0x84,0,filesize,filename);\n    if (isHashUpdateSuccessful == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileInformation + 0x210) = filename;\n  }\n  hashTableUpdateResult = updateHashTable(fileInformation,0x44,mode,filesize - *(long *)(fileInformation + 0x200),0,placeholderRegister);\n  return hashTableUpdateResult;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_information_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010c2d2",
                "FUN_0010be88",
                "FUN_0010bf86",
                "FUN_00108fe8",
                "FUN_00112996",
                "FUN_00108916",
                "FUN_0011173a",
                "FUN_0010bf20",
                "FUN_0010871c",
                "FUN_00108b3e",
                "FUN_00104a35",
                "FUN_001126c0",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_00108f08",
                "FUN_0010914e",
                "FUN_0010be1a",
                "FUN_00108fb9",
                "FUN_00109022",
                "FUN_00108a2a",
                "FUN_0010911f",
                "FUN_00116b90",
                "FUN_0010b6ea",
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_0010c6be",
                "FUN_00112b6e",
                "FUN_0010b0fa",
                "FUN_0010bd62",
                "FUN_0010c892",
                "FUN_0010bc80"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "dataPointer",
                "param_2": "numIterations",
                "cVar1": "charValue",
                "__ptr": "ptr1",
                "__s": "str1",
                "sVar2": "stringLength",
                "__s_00": "str2",
                "in_R10": "hashValue",
                "iVar3": "iterationCount",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] processData_0010e5db(long dataPointer,int numIterations)\n\n{\n  char charValue;\n  void *ptr1;\n  char *str1;\n  size_t stringLength;\n  char *str2;\n  ulong hashValue;\n  int iterationCount;\n  undefined result [16];\n  \n  iterationCount = 0;\n  do {\n    if (numIterations <= iterationCount) {\n      result = process_data_00109ed3(dataPointer,0x66,0,dataPointer + 0x188,dataPointer + 400,hashValue);\n      return result;\n    }\n    if (*(char *)(*(long *)(dataPointer + 0x60) + 0x1c) == '\\0') {\n      ptr1 = (void *)extract_and_free_next_item_00109b2f(dataPointer);\n      free(ptr1);\n    }\n    else {\n      str1 = (char *)extract_and_free_next_item_00109b2f(dataPointer);\n      stringLength = strlen(str1);\n      str2 = (char *)xmalloc(stringLength + 3);\n      sprintf(str2,\":t%s\",str1);\n      free(str1);\n      charValue = update_hash_table_0010e2f0(dataPointer,0x80,0,0,str2);\n      if (charValue == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = hashValue;\n        return result << 0x40;\n      }\n      free(str2);\n    }\n    iterationCount = iterationCount + 1;\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_print_error_message_00104d25",
                "param_7": "errorParam",
                "print_error_message_001126c0": "printErrorMessage",
                "remove_directory_00114b84": "removeDirectory"
            },
            "code": "\nvoid cleanupAndPrintErrorMessage_00104d25(void)\n\n{\n  undefined8 errorParam;\n  \n  DAT_00127a20 = 1;\n  printErrorMessage(0,errorParam,0,0);\n  removeDirectory();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_message_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "extract_and_merge_build_notes_0010551d",
                "puVar1": "sectionFlags",
                "bVar2": "auxentFlag",
                "puVar3": "ptr",
                "pcVar4": "sectionCallback",
                "puVar5": "noteSections",
                "uVar6": "totalSize",
                "uVar7": "mergedSize",
                "__s": "noteSectionName",
                "cVar8": "sectionNameChar",
                "cVar9": "comparisonResult",
                "uVar10": "sectionFlagsTemp",
                "iVar11": "errorCode",
                "uVar12": "auxentFlagTemp",
                "uVar13": "errorMsg",
                "iVar14": "stringComparisonResult",
                "plVar15": "sectionInfo",
                "uVar16": "sectionContents",
                "uVar17": "errorMessage",
                "sVar18": "sectionSize",
                "pcVar19": "newSectionName",
                "pcVar28": "sectionName",
                "pcVar33": "sectionContentsPtr",
                "ppcVar35": "debugSections",
                "puStack0000000000000020": "sectionFlagsArray",
                "pcStack0000000000000038": "mergedNotesSectionName",
                "uStack0000000000000048": "alternativeMachineCodes",
                "iStack000000000000006c": "debuggingType",
                "lStack0000000000000078": "debugLinkSectionSize",
                "lStack0000000000000088": "debugLinkSectionAddress",
                "pcStack0000000000000090": "strError",
                "lStack00000000000000a0": "unaff_R13Temp",
                "plVar32": "unaff_R13",
                "puVar34": "sectionDataSize",
                "ppuVar37": "stabSections"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong extractAndMergeBuildNotes_0010551d(void)\n\n{\n  uint *sectionFlags;\n  byte auxentFlag;\n  undefined *ptr;\n  code *sectionCallback;\n  undefined8 *noteSections;\n  ulong totalSize;\n  ulong mergedSize;\n  char *noteSectionName;\n  char sectionNameChar;\n  char comparisonResult;\n  uint sectionFlagsTemp;\n  int errorCode;\n  uint auxentFlagTemp;\n  undefined4 errorMsg;\n  int stringComparisonResult;\n  long *sectionInfo;\n  undefined8 sectionContents;\n  undefined8 errorMessage;\n  size_t sectionSize;\n  char *newSectionName;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *noteSectionName_00;\n  size_t sVar26;\n  long lVar27;\n  long *unaff_RBX;\n  char *sectionName;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *unaff_R13;\n  char *sectionContentsPtr;\n  undefined4 *sectionDataSize;\n  char **debugSections;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **stabSections;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *sectionFlagsArray;\n  char *mergedNotesSectionName;\n  uint alternativeMachineCodes;\n  int debuggingType;\n  long debugLinkSectionSize;\n  long debugLinkSectionAddress;\n  char *strError;\n  long unaff_R13Temp;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_error_message_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = DAT_001279b0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (comparisonResult = string_comparison_00113fb0(), comparisonResult == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    comparisonResult = bfd_get_full_section_contents();\n    if (comparisonResult != '\\0') {\n      lVar27 = extract_build_attributes_001163d0();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (comparisonResult = bfd_set_section_size(), comparisonResult != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sectionSize = *(size_t *)(lVar25 + 0x40);\n      noteSectionName_00 = fopen((char *)puVar29[2],\"w\");\n      if (noteSectionName_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar29[2],0,0);\n      }\n      else {\n        comparisonResult = bfd_malloc_and_get_section();\n        if (comparisonResult == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sectionSize != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sectionSize,noteSectionName_00), sVar26 != sectionSize)) {\n          piVar23 = __errno_location();\n          sectionContentsPtr = strerror(*piVar23);\n          errorMessage = puVar29[2];\n          sectionContents = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(sectionContents,errorMessage,sectionContentsPtr);\n          free(in_stack_00000140);\n          fclose(noteSectionName_00);\n          return 0;\n        }\n        fclose(noteSectionName_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    debugLinkSectionSize = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      errorMessage = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(errorMessage);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    debugLinkSectionSize = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = DAT_00127a10;\n    if (debugLinkSectionSize == 0) {\n      errorMessage = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,errorMessage,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        totalSize = uVar24;\n        mergedSize = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = totalSize, mergedSize != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            totalSize = uVar20;\n            mergedSize = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(debugLinkSectionSize + 0x28) = *(byte *)(debugLinkSectionSize + 0x28) | 1;\n      *(ulong *)(debugLinkSectionSize + 0x30) = uVar24;\n      *(ulong *)(debugLinkSectionSize + 0x38) = uVar24;\n    }\n  }\n  unaff_R13 = DAT_001278b0;\n  debuggingType = *(int *)(in_stack_00000008 + 0xa0);\n  if (debuggingType != 0) {\n    uVar24 = improve_debugging_information_0010554f();\n    return uVar24;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    sectionFlagsArray = (undefined4 *)0x0;\n  }\n  else {\n    stabSections = &PTR_snoteSectionNametab_00125c60;\n    sectionFlagsArray = (undefined4 *)xmalloc(0x60);\n    sectionDataSize = sectionFlagsArray;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *sectionDataSize = 0;\n      sectionDataSize = sectionDataSize + (ulong)bVar39 * -2 + 1;\n    }\n    mergedNotesSectionName = (char *)0x0;\n    do {\n      ptr = *stabSections;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        comparisonResult = bfd_get_section_contents();\n        if (comparisonResult == '\\0') {\n          errorMsg = bfd_get_error();\n          bfd_errmsg(errorMsg);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(mergedNotesSectionName);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            errorMsg = bfd_get_error();\n            bfd_errmsg(errorMsg);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(mergedNotesSectionName);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((mergedNotesSectionName != (char *)0x0) ||\n               (mergedNotesSectionName = (char *)initialize_data_structure_00112894(),\n               mergedNotesSectionName != (char *)0x0)) {\n              unaff_R13Temp = 0;\n              debugLinkSectionAddress = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                auxentFlag = *(byte *)((long)pvVar36 + 4);\n                errorMsg = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (auxentFlag == 0) {\n                  debugLinkSectionAddress = unaff_R13Temp;\n                  unaff_R13Temp = unaff_R13Temp + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + debugLinkSectionAddress;\n                  if (uVar22 < uVar24) {\n                    sectionContentsPtr = (char *)((long)__ptr_00 + uVar22);\n                    strError = (char *)0x0;\n                    while( true ) {\n                      sectionSize = strlen(sectionContentsPtr);\n                      if (((sectionSize == 0) || (sectionName = sectionContentsPtr + (sectionSize - 1), *sectionName != '\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *sectionName = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      errorCode = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(errorCode + (int)debugLinkSectionAddress);\n                      if (uVar24 <= uVar20) break;\n                      sectionContentsPtr = (char *)concat(sectionContentsPtr,(long)__ptr_00 + uVar20,0);\n                      *sectionName = '\\';\n                      free(strError);\n                      strError = sectionContentsPtr;\n                    }\n                    errorMessage = *unaff_R14;\n                    sectionName = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,sectionName,errorMessage,ptr,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)auxentFlag,errorMsg,lVar27,sectionContentsPtr);\n                    comparisonResult = FUNC_0011173a(sectionFlagsArray,mergedNotesSectionName,auxentFlag);\n                    if (comparisonResult == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(strError);\n                      free(mergedNotesSectionName);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    errorMessage = *unaff_R14;\n                    sectionContentsPtr = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,sectionContentsPtr,errorMessage,ptr,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)auxentFlag,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(sectionFlagsArray);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      stabSections = stabSections + 2;\n    } while (stabSections != (undefined **)&DAT_00125c90);\n    if ((mergedNotesSectionName != (char *)0x0) && (comparisonResult = process_debug_data_0010c892(), comparisonResult == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (sectionInfo = unaff_R13; sectionInfo < unaff_R13 + in_stack_00000010; sectionInfo = sectionInfo + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = initialize_data_structure_00112894(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            sectionContentsPtr = (char *)0x0;\n            sectionName = in_stack_00000150;\n            while (((*sectionName != '\\0' && (sectionSize = strlen(sectionName), sectionName[sectionSize - 1] == '\\')) &&\n                   (sectionInfo + 1 < unaff_R13 + in_stack_00000010))) {\n              newSectionName = (char *)xstrdup(sectionName);\n              sectionSize = strlen(newSectionName);\n              newSectionName[sectionSize - 1] = '\\0';\n              sectionName = (char *)concat(newSectionName,*(undefined8 *)(sectionInfo[1] + 8),0);\n              free(newSectionName);\n              free(sectionContentsPtr);\n              sectionInfo = sectionInfo + 1;\n              sectionContentsPtr = sectionName;\n            }\n            update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         sectionName);\n            in_stack_00000018 = FUNC_0011173a(sectionFlagsArray,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      cleanup_memory_00108863();\n      if ((lVar25 != 0) && (comparisonResult = process_debug_data_0010c892(), comparisonResult == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        sectionContentsPtr = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = unaff_R13;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      comparisonResult = '\\0';\n      _alternativeMachineCodes = (int *)0x0;\n      mergedNotesSectionName = (char *)0x0;\n      strError = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = unaff_R13[in_stack_000000d0];\n        sectionNameChar = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (sectionNameChar == '\\0') {\n          errorMsg = bfd_get_error();\n          bfd_errmsg(errorMsg);\n          sectionContentsPtr = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          errorMessage = dcgettext(0,sectionContentsPtr,5);\n          print_error_message_00119ed0(errorMessage);\n          goto LAB_00105981;\n        }\n        sectionContentsPtr = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (sectionNameChar = bfd_coff_get_auxent(), sectionNameChar == '\\0')) {\n          errorMsg = bfd_get_error();\n          bfd_errmsg(errorMsg);\n          sectionContentsPtr = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (strError == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            sectionNameChar = initialize_memory_0010bbd3(sectionFlagsArray);\n            if (sectionNameChar == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          strError = (char *)in_stack_000000f0;\n          sectionNameChar = initialize_memory_0010bbd3(sectionFlagsArray);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _alternativeMachineCodes = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                mergedNotesSectionName = sectionContentsPtr;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              errorCode = strcmp(sectionContentsPtr,\".bb\");\n              if (errorCode == 0) {\n                sectionNameChar = start_debug_block_0010be88(sectionFlagsArray);\n                goto joined_r0x00107247;\n              }\n              errorCode = strcmp(sectionContentsPtr,\".eb\");\n              if (errorCode == 0) {\n                sectionNameChar = end_debug_block_0010bf20(sectionFlagsArray);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              errorCode = strcmp(sectionContentsPtr,\".bf\");\n              if (errorCode == 0) {\n                if (mergedNotesSectionName != (char *)0x0) {\n                  lVar27 = parse_and_initialize_data_structure_0010dac0();\n                  if ((lVar27 == 0) ||\n                     (comparisonResult = debug_record_function_0010bc80(sectionFlagsArray), comparisonResult == '\\0'))\n                  goto LAB_00105981;\n                  if (_alternativeMachineCodes != (int *)0x0) {\n                    errorCode = 0;\n                    if (bStack0000000000000101 != 0) {\n                      errorCode = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _alternativeMachineCodes[4];\n                      if (iVar31 == 0) break;\n                      sectionNameChar = record_line_debug_info_0010bf86(sectionFlagsArray,errorCode + iVar31,\n                                           *(long *)(_alternativeMachineCodes + 6) + lVar25);\n                      _alternativeMachineCodes = _alternativeMachineCodes + 4;\n                      if (sectionNameChar == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _alternativeMachineCodes = (int *)0x0;\n                  mergedNotesSectionName = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                sectionContentsPtr = \"%ld: .bf without preceding function\";\n              }\n              else {\n                errorCode = strcmp(sectionContentsPtr,\".ef\");\n                if (errorCode != 0) goto switchD_00106e1a_caseD_68;\n                if (comparisonResult != '\\0') {\n                  comparisonResult = end_debug_function_0010be1a(sectionFlagsArray);\n                  if (comparisonResult == '\\0') goto LAB_00105981;\n                  comparisonResult = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                sectionContentsPtr = \"%ld: unexpected .ef\\n\";\n              }\n              errorMessage = dcgettext(0,sectionContentsPtr,5);\n              print_error_message_00119ed0(errorMessage);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = parse_and_initialize_data_structure_0010dac0();\n          if (lVar21 == 0) goto LAB_00105981;\n          sectionNameChar = initialize_or_record_debug_info_00112a33(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (sectionNameChar == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        unaff_R13 = DAT_001278b0 + in_stack_00000010;\n        sectionInfo = DAT_001278b0;\n        do {\n          sectionFlagsTemp = *(uint *)(*sectionInfo + 0x18);\n          if ((sectionFlagsTemp & 0x1000000) != 0) {\n            *(uint *)(*sectionInfo + 0x18) = sectionFlagsTemp & 0xfeffffff;\n          }\n          sectionInfo = sectionInfo + 1;\n        } while (unaff_R13 != sectionInfo);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          sectionFlags = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *sectionFlags = *sectionFlags | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      errorCode = bfd_get_error();\n      if (errorCode != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    unaff_R13 = DAT_001278b0;\n    alternativeMachineCodes = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278a8 = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        errorCode = DAT_001279a0;\n        sectionInfo = (long *)unaff_R13[_in_stack_00000018];\n        sectionCallback = (code *)sectionInfo[4];\n        sectionFlagsTemp = *(uint *)(sectionInfo + 3);\n        sectionContentsPtr = (char *)sectionInfo[1];\n        sectionName = sectionContentsPtr;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = DAT_001279a8;\n          while( true ) {\n            if ((errorCode <= iVar31) || (newSectionName = (char *)puVar29[5], newSectionName == (char *)0x0))\n            goto LAB_00105ad5;\n            if (newSectionName != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          stringComparisonResult = strcmp(newSectionName,sectionContentsPtr);\n          if (stringComparisonResult != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(newSectionName);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          sectionContents = initialize_section_0011a2e0(puVar29);\n          errorMessage = DAT_001278d0;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = sectionContents;\n          lVar27 = htab_elements(errorMessage);\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          comparisonResult = *sectionContentsPtr;\n          if (comparisonResult != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          sectionContentsPtr = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            lVar27 = unaff_R14[1];\n            comparisonResult = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(DAT_001278d0);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (sectionContentsPtr != (char *)0x0) {\nLAB_001064eb:\n          if (((*sectionContentsPtr == '_') && (sectionContentsPtr[1] == '_')) &&\n             (errorCode = strcmp(sectionContentsPtr + (sectionContentsPtr[2] == '_'),\"__gnu_lto_slim\"), errorCode == 0)) {\n            errorMessage = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_and_exit_error_00119dd0(errorMessage);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = sectionContentsPtr;\n        lVar27 = htab_find(DAT_001278d0);\n        if (((lVar27 == 0) || (sectionName = *(char **)(lVar27 + 8), sectionContentsPtr == sectionName)) &&\n           (sectionName = sectionContentsPtr, debugSections = DAT_001278d8, (sectionFlagsTemp & 0x100) != 0)) {\n          for (; debugSections != (char **)0x0; debugSections = (char **)debugSections[3]) {\n            errorCode = strcmp(*debugSections,sectionContentsPtr);\n            if (errorCode == 0) {\n              sectionName = debugSections[1];\n              break;\n            }\n          }\n        }\n        sectionInfo[1] = (long)sectionName;\n        comparisonResult = *sectionName;\n        if (comparisonResult == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        sectionContentsPtr = DAT_00127908;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == comparisonResult) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((sectionFlagsTemp & 0x82) == 0 && (sectionCallback != bfd_map_over_sections)) &&\n                ((*(byte *)(sectionInfo[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            sectionName = sectionName + 1;\n            sectionInfo[1] = (long)sectionName;\n            goto joined_r0x00106565;\n          }\n          comparisonResult = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (comparisonResult == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            sectionName = sectionName + 1;\n            sectionInfo[1] = (long)sectionName;\n            sectionSize = strlen(sectionName);\n            lVar27 = sectionSize + 2;\n            goto LAB_001066bc;\n          }\n          *sectionName = comparisonResult;\n          sectionInfo[1] = (long)sectionName;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (sectionContentsPtr == (char *)0x0) goto LAB_00105b32;\n            sectionSize = strlen(sectionName);\n            sVar26 = strlen(sectionContentsPtr);\n            sectionContentsPtr = (char *)xmalloc(sVar26 + sectionSize + 1);\n            newSectionName = sectionContentsPtr;\n          }\n          else {\nLAB_0010668d:\n            sectionContentsPtr = DAT_00127908;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (comparisonResult != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sectionSize = strlen(sectionName);\n            lVar27 = sectionSize + 2;\n            if (sectionContentsPtr == (char *)0x0) {\n              newSectionName = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sectionSize = strlen(sectionContentsPtr);\n              newSectionName = (char *)xmalloc(sectionSize + lVar27);\n            }\n            sectionContentsPtr = newSectionName + 1;\n            *newSectionName = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          noteSectionName = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(sectionContentsPtr,DAT_00127908);\n            sectionSize = strlen(noteSectionName);\n            sectionContentsPtr = sectionContentsPtr + sectionSize;\n          }\n          strcpy(sectionContentsPtr,sectionName);\n          sectionInfo[1] = (long)newSectionName;\n          sectionName = newSectionName;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((sectionFlagsTemp & 0x20) == 0) &&\n           (((sectionFlagsTemp & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(sectionInfo[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((alternativeMachineCodes == 0) &&\n              (((sectionFlagsTemp & 0x82) != 0 || ((*(byte *)(sectionInfo[4] + 0x25) & 0x10) != 0)))) ||\n             (errorCode = bfd_decode_symclass(sectionInfo), errorCode == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = sectionName;\n              htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((sectionFlagsTemp & 0x82) == 0) && (sectionCallback != bfd_map_over_sections)) &&\n                  ((*(byte *)(sectionInfo[4] + 0x25) & 0x10) == 0)) {\n            if ((sectionFlagsTemp & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(sectionInfo[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  comparisonResult = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            comparisonResult = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (comparisonResult == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            errorMessage = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_00119ed0(errorMessage);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = sectionName;\n          htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((sectionFlagsTemp & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = sectionName;\n            htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((sectionFlagsTemp & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = sectionName;\n            htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          comparisonResult = check_permissions_and_patterns_001159d0(sectionInfo[4]);\n          if (comparisonResult == '\\0') {\n            if (((sectionFlagsTemp & 0x800002) == 0) && (sectionCallback != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((sectionFlagsTemp & 0x82) != 0) {\n                comparisonResult = check_pattern_00115d70(sectionName);\n                if ((comparisonResult == '\\0') &&\n                   ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                    (comparisonResult = check_pattern_00115d70(sectionName), comparisonResult != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (auxentFlagTemp = *(uint *)(sectionInfo + 3), (auxentFlagTemp & 0x200000) != 0)) ||\n                       (lVar27 = *sectionInfo, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)sectionInfo + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  auxentFlagTemp = *(uint *)(sectionInfo + 3);\n                }\n                *(uint *)(sectionInfo + 3) = auxentFlagTemp & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((sectionFlagsTemp & 1) != 0) && (comparisonResult = check_pattern_00115d70(sectionName), comparisonResult != '\\0')) {\n                *(uint *)(sectionInfo + 3) = *(uint *)(sectionInfo + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (comparisonResult = check_pattern_00115d70(sectionName), comparisonResult != '\\0')) {\n                *(uint *)(sectionInfo + 3) = *(uint *)(sectionInfo + 3) & 0xff7ffffd | 0x80;\n              }\n              if (sectionCallback != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = sectionInfo;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279a8;\n      errorCode = DAT_001279a0;\n      for (lVar27 = 0; lVar27 < errorCode; lVar27 = lVar27 + 1) {\n        sectionContentsPtr = (char *)puVar29[5];\n        if (sectionContentsPtr == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          errorMessage = initialize_section_0011a2e0(puVar29,in_stack_00000008);\n          *(undefined8 *)(lVar25 + lVar21) = errorMessage;\n          errorCode = DAT_001279a0;\n        }\n        else if (sectionContentsPtr != \"\") {\n          errorMessage = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_and_exit_error_00119dd0(errorMessage,sectionContentsPtr);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    bVar38 = DAT_00127980 != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((bVar38) && (sectionFlagsArray != (undefined4 *)0x0)) {\n      errorCode = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((errorCode != 5) && (errorCode != 2)) {\n        errorMessage = **(undefined8 **)(in_stack_00000008 + 8);\n        sectionContents = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,in_stack_00000008,0,sectionContents,errorMessage);\nLAB_00105d8c:\n        free(sectionFlagsArray);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      comparisonResult = process_binary_data_0011378f(in_stack_00000008,sectionFlagsArray,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (comparisonResult == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (comparisonResult = bfd_set_section_size(lVar25,in_stack_00000110), comparisonResult == '\\0')) ||\n         (comparisonResult = bfd_set_section_size(lVar27,in_stack_00000140), comparisonResult == '\\0')) {\n        sectionContentsPtr = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        errorMessage = dcgettext(0,sectionContentsPtr,5);\n        print_error_message_001126c0(0,in_stack_00000008,0,errorMessage);\n        free(in_stack_000000e0);\n        free(sectionFlagsArray);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      comparisonResult = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((comparisonResult == '\\0') ||\n         (comparisonResult = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         comparisonResult == '\\0')) {\n        sectionContentsPtr = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(sectionFlagsArray);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(DAT_001279f8);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(DAT_00127a08), lVar25 != 0 ||\n              (lVar25 = htab_elements(DAT_001279e8), lVar25 != 0)) ||\n             (lVar25 = htab_elements(DAT_001279e0), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(DAT_001279d8), lVar25 != 0 ||\n             (lVar25 = htab_elements(DAT_001279d0), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(DAT_001278d0), lVar25 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278a8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,process_binary_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,process_section_00116110,in_stack_00000008);\n  for (puVar29 = DAT_001279c0; noteSections = DAT_001279b8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    comparisonResult = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (comparisonResult == '\\0') {\n      print_error_message_001126c0(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; noteSections != (undefined8 *)0x0; noteSections = (undefined8 *)*noteSections) {\n    errorMessage = *(undefined8 *)(noteSections[5] + 0x60);\n    comparisonResult = bfd_set_section_contents(in_stack_00000008,errorMessage,noteSections[4],0,noteSections[3]);\n    if (comparisonResult == '\\0') {\n      print_error_message_001126c0(0,in_stack_00000008,errorMessage,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      errorMessage = *unaff_R14;\n      sectionContents = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_00119ed0(sectionContents,errorMessage);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (comparisonResult = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,debugLinkSectionSize),\n       lVar25 = DAT_00127a10, comparisonResult != '\\0')) {\n      sectionFlagsTemp = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)sectionFlagsTemp;\n      if ((char)sectionFlagsTemp != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar24;\n        }\n        comparisonResult = bfd_alt_mach_code(in_stack_00000008,DAT_00127910 & 0xffffffff);\n        uVar20 = DAT_00127910;\n        if (comparisonResult != '\\0') {\n          return uVar24;\n        }\n        errorMessage = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_00119ed0(errorMessage,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          errorMessage = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(errorMessage);\n          return uVar24;\n        }\n        errorMessage = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_00119ed0(errorMessage);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return uVar24;\n      }\n      errorMessage = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,errorMessage);\n    }\n    else {\n      errorMessage = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,errorMessage,lVar25);\n    }\n    return 0;\n  }\n  unaff_R13 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        unaff_R13 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = unaff_R13;\n      } while (unaff_R13 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (comparisonResult = string_comparison_00113fb0(*puVar29,\".gnu.build.attributes\"), comparisonResult != '\\0')) {\n      if (unaff_R13 == (long *)0x0) {\n        unaff_R13 = unaff_R13;\n      }\n      sectionInfo = unaff_R13;\n      if (*(undefined8 **)(*unaff_R13 + 0x60) == puVar29) {\nLAB_0010625f:\n        sectionContentsPtr = \"error: failed to merge notes\";\n        if (unaff_R13[1] != 0) {\n          comparisonResult = bfd_set_section_contents(in_stack_00000008,puVar29,unaff_R13[1],0,unaff_R13[2]);\n          if (comparisonResult == '\\0') {\n            errorMessage = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_error_message_001126c0(0,in_stack_00000008,puVar29,errorMessage);\n            return 0;\n          }\n          unaff_R13 = (long *)unaff_R13[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          unaff_R13 = sectionInfo;\n          if (*(undefined8 **)(*sectionInfo + 0x60) == puVar29) goto LAB_0010625f;\n          unaff_R13 = (long *)sectionInfo[3];\n          sectionInfo = unaff_R13;\n        } while (unaff_R13 != (long *)0x0);\n        sectionContentsPtr = \"error: failed to locate merged notes\";\n      }\n      errorMessage = dcgettext(0,sectionContentsPtr,5);\n      print_error_message_001126c0(0,in_stack_00000008,puVar29,errorMessage);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_and_merge_build_notes_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00104943",
                "FUN_00105828",
                "FUN_001199d0",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "input",
                "htab_hash_string": "hashString"
            },
            "code": "\nvoid hashString_00108800(undefined8 *input)\n\n{\n  hashString_00108800(*input);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "deallocate_memory_0010c1c6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "pointerVar",
                "cVar2": "initializeVar",
                "__ptr": "ptr"
            },
            "code": "\nundefined deallocateMemory_0010c1c6(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *pointerVar;\n  char initializeVar;\n  undefined8 *ptr;\n  \n  ptr = *(undefined8 **)(param2 + 0x78);\n  while( true ) {\n    if (ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(param2 + 0x78) = 0;\n      return 1;\n    }\n    initializeVar = initialize_variable_debug_0010c05d(param1,ptr[1],ptr[2],*(undefined4 *)(ptr + 3),ptr[4],param6,\n                         param5);\n    if (initializeVar == '\\0') break;\n    pointerVar = (undefined8 *)*ptr;\n    free(ptr);\n    ptr = pointerVar;\n  }\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "deallocate_memory_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_pattern_001082df",
                "unaff_RBX": "patternData",
                "unaff_RBP": "functionData",
                "unaff_R13": "patternArray",
                "uVar1": "arraySize",
                "puVar4": "newPatternArray",
                "puVar5": "nextPatternArray",
                "uVar6": "currentIndex",
                "lVar2": "currentValue",
                "cVar3": "patternCheckResult"
            },
            "code": "\nvoid processPattern_001082df(void)\n\n{\n  uint arraySize;\n  long currentValue;\n  char patternCheckResult;\n  long patternData;\n  undefined8 *newPatternArray;\n  undefined8 *nextPatternArray;\n  long functionData;\n  ulong currentIndex;\n  undefined8 *patternArray;\n  \n  arraySize = *(uint *)(patternData + 0x78);\n  if (DAT_00127a2c == 7) {\n    newPatternArray = patternArray;\n    for (currentIndex = 0; currentIndex != arraySize; currentIndex = currentIndex + 1) {\n      nextPatternArray = newPatternArray;\n      if (((*(long **)patternArray[currentIndex] != (long *)0x0) &&\n          (currentValue = **(long **)patternArray[currentIndex], currentValue != 0)) &&\n         (patternCheckResult = check_pattern_00115d70(*(undefined8 *)(currentValue + 8),DAT_00127a08), patternCheckResult != '\\0')) {\n        nextPatternArray = newPatternArray + 1;\n        *newPatternArray = patternArray[currentIndex];\n      }\n      newPatternArray = nextPatternArray;\n    }\n    *newPatternArray = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(functionData + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_pattern_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_file_contents_00114d60",
                "param_1": "file_path",
                "iVar1": "eof_indicator",
                "piVar2": "error_location",
                "pcVar3": "error_string",
                "__stream": "file_stream",
                "uVar4": "error_message",
                "uVar5": "file_path_copy",
                "__errno_location": "get_error_location",
                "strerror": "get_error_string",
                "print_and_exit_error_00119dd0": "print_error_and_exit",
                "lVar7": "bytes_read",
                "lVar8": "buffer_size"
            },
            "code": "\nvoid read_and_store_file_contents_00114d60(long file_path)\n\n{\n  int eof_indicator;\n  int *error_location;\n  char *error_string;\n  undefined8 error_message;\n  FILE *file_stream;\n  undefined8 file_path_copy;\n  size_t sVar6;\n  long bytes_read;\n  long buffer_size;\n  \n  file_stream = fopen(*(char **)(file_path + 0x10),\"r\");\n  if (file_stream == (FILE *)0x0) {\n    error_location = __errno_location();\n    error_string = strerror(*error_location);\n    file_path_copy = *(undefined8 *)(file_path + 0x10);\n    error_message = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_and_exit(error_message,file_path_copy,error_string);\n  }\n  buffer_size = 0x1000;\n  bytes_read = 0;\n  file_path_copy = xmalloc(0x1000);\n  *(undefined8 *)(file_path + 0x20) = file_path_copy;\n  while( true ) {\n    eof_indicator = feof(file_stream);\n    if (eof_indicator != 0) {\n      *(long *)(file_path + 0x18) = bytes_read;\n      fclose(file_stream);\n      return;\n    }\n    if (bytes_read == buffer_size) {\n      buffer_size = bytes_read * 2;\n      file_path_copy = xrealloc(*(undefined8 *)(file_path + 0x20),buffer_size);\n      *(undefined8 *)(file_path + 0x20) = file_path_copy;\n    }\n    sVar6 = fread((void *)(*(long *)(file_path + 0x20) + bytes_read),1,buffer_size - bytes_read,file_stream);\n    eof_indicator = ferror(file_stream);\n    if (eof_indicator != 0) break;\n    bytes_read = bytes_read + sVar6;\n  }\n  file_path_copy = *(undefined8 *)(file_path + 0x10);\n  error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_error_and_exit(error_message,file_path_copy);\n}\n\n",
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_store_file_contents_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "print_section_not_found_error_00108808",
                "unaff_RBP": "stackPointer",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printSectionNotFoundError_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  long stackPointer;\n  \n  sectionAddress = *(undefined8 *)(stackPointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_and_exit_error_00119dd0(errorMessage,sectionAddress);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "print_section_not_found_error_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "unaff_EBP": "ebpValue",
                "pbVar6": "currentLinePtr",
                "unaff_R13": "parameter1",
                "unaff_R14": "currentCharPtr",
                "unaff_R15": "nextCharPtr",
                "in_stack_00000008": "stackParameter1",
                "in_stack_00000010": "stackParameter2",
                "uVar1": "result",
                "ppbVar2": "hashTableSlot",
                "pbVar3": "tempPtr",
                "bVar4": "currentChar",
                "pbVar5": "nextLinePtr",
                "pbVar7": "tempCharPtr"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 result;\n  byte **hashTableSlot;\n  byte *tempPtr;\n  byte currentChar;\n  byte *nextLinePtr;\n  int ebpValue;\n  byte *currentLinePtr;\n  undefined8 parameter1;\n  byte *tempCharPtr;\n  byte *currentCharPtr;\n  byte *nextCharPtr;\n  undefined8 stackParameter1;\n  undefined8 *stackParameter2;\n  \n  *currentCharPtr = 0;\nLAB_00114520:\n  currentCharPtr = currentCharPtr + 1;\n  do {\n    currentChar = *currentCharPtr;\n    tempCharPtr = currentCharPtr;\n    if (currentChar == 10) {\n      *currentCharPtr = 0;\n      if (currentCharPtr[1] == 0xd) {\n        tempCharPtr = currentCharPtr + 1;\n        nextLinePtr = currentCharPtr + 2;\n      }\n      else {\n        nextLinePtr = currentCharPtr + 1;\n      }\n    }\n    else if ((char)currentChar < '\\v') {\n      if (currentChar != 0) goto LAB_00114520;\n      nextLinePtr = currentCharPtr + 1;\n    }\n    else {\n      if (currentChar != 0xd) break;\n      *currentCharPtr = 0;\n      nextLinePtr = currentCharPtr + 1;\n      if (currentCharPtr[1] == 10) {\n        nextLinePtr = currentCharPtr + 2;\n        tempCharPtr = currentCharPtr + 1;\n      }\n    }\n    currentChar = *nextCharPtr;\n    while ((currentChar == 0x20 || (currentLinePtr = nextCharPtr, currentChar == 9))) {\n      currentLinePtr = nextCharPtr + 1;\n      nextCharPtr = nextCharPtr + 1;\n      currentChar = *currentLinePtr;\n    }\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = currentLinePtr[1];\n      currentLinePtr = currentLinePtr + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentChar = currentLinePtr[1];\n      if ((((((currentChar == 9) || (currentChar == 0x20)) &&\n            ((currentChar = currentLinePtr[2], currentChar == 9 || (currentChar == 0x20)))) &&\n           ((currentChar = currentLinePtr[3], currentChar == 9 || (currentChar == 0x20)))) &&\n          ((currentChar = currentLinePtr[4], currentChar == 9 || (currentChar == 0x20)))) &&\n         ((currentChar = currentLinePtr[5], currentChar == 9 || (currentChar == 0x20)))) {\n        currentChar = currentLinePtr[6];\n        tempPtr = currentLinePtr + 6;\n        if ((currentChar == 9) || (currentChar == 0x20)) {\n          do {\n            do {\n              currentChar = tempPtr[1];\n              tempPtr = tempPtr + 1;\n            } while (currentChar == 0x20);\n          } while (currentChar == 9);\n        }\n      }\n      if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) {\n        result = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(result,stackParameter1,ebpValue);\n      }\n    }\nLAB_00114599:\n    *currentLinePtr = 0;\n    if (nextCharPtr < currentLinePtr) {\n      hashTableSlot = (byte **)htab_find_slot();\n      *hashTableSlot = nextCharPtr;\n    }\n    ebpValue = ebpValue + 1;\n    currentCharPtr = nextLinePtr;\n    nextCharPtr = nextLinePtr;\n    if (tempCharPtr[1] == 0) {\n      *stackParameter2 = parameter1;\n      return;\n    }\n  } while( true );\n  if (currentChar == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_print_error_00119940",
                "param_1": "address",
                "param_2": "message",
                "uVar1": "error_message",
                "local_20": "scan_result"
            },
            "code": "\nvoid check_and_print_error_00119940(undefined8 address,undefined8 message)\n\n{\n  undefined8 error_message;\n  char *scan_result [2];\n  \n  bfd_scan_vma(address,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_and_exit_error_00119dd0(error_message,message,address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "inputAddress",
                "param_2": "dataAddress",
                "param_3": "flag",
                "in_RAX": "functionPointer"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 inputAddress,long dataAddress,uint flag)\n\n{\n  long functionPointer;\n  \n  if ((flag == 2) && (*(int *)(*(long *)(dataAddress + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(dataAddress + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(functionPointer + 0x380) + 0x78))(inputAddress,flag != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_files_and_update_00113a4d",
                "param_1": "file_param",
                "param_2": "update_param",
                "param_3": "data_param",
                "param_4": "temp_param",
                "param_5": "hash_param",
                "cVar1": "check_result",
                "uVar2": "return_value",
                "puVar3": "ptr_iterator",
                "auVar4": "update_result"
            },
            "code": "\nundefined8\nprocess_files_and_update_00113a4d(undefined8 file_param,undefined8 update_param,long data_param,undefined8 temp_param,\n            undefined8 hash_param)\n\n{\n  char check_result;\n  undefined8 return_value;\n  undefined8 *ptr_iterator;\n  undefined update_result [16];\n  \n  check_result = check_files_and_update_00112502(file_param,update_param,*(undefined8 *)(data_param + 0x18));\n  if ((check_result != '\\0') &&\n     (((*(long *)(data_param + 0x28) == 0 && (*(long *)(data_param + 8) != 0)) ||\n      (check_result = update_and_hash_0010ec73(update_param,*(undefined8 *)(data_param + 0x18)), check_result != '\\0')))) {\n    if (*(undefined8 **)(data_param + 0x28) != (undefined8 *)0x0) {\n      for (ptr_iterator = (undefined8 *)**(undefined8 **)(data_param + 0x28); ptr_iterator != (undefined8 *)0x0;\n          ptr_iterator = (undefined8 *)*ptr_iterator) {\n        check_result = process_debug_data_001135a5(file_param,update_param,ptr_iterator);\n        if (check_result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr_iterator = *(undefined8 **)(data_param + 0x10); ptr_iterator != (undefined8 *)0x0;\n        ptr_iterator = (undefined8 *)*ptr_iterator) {\n      check_result = process_files_and_update_00113a4d(file_param,update_param,ptr_iterator);\n      if (check_result == '\\0') {\n        return 0;\n      }\n    }\n    update_result = check_files_and_update_00112502(file_param,update_param,*(undefined8 *)(data_param + 0x20));\n    if (update_result[0] != '\\0') {\n      if ((*(long *)(data_param + 0x28) == 0) && (*(long *)(data_param + 8) != 0)) {\n        return update_result._0_8_;\n      }\n      return_value = update_hash_table_0010ed2c(update_param,*(undefined8 *)(data_param + 0x20),update_result._8_8_,hash_param);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0010ed2c",
                "FUN_00112502",
                "FUN_0010ec73"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_files_and_update_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_and_return_param_001081e9",
                "in_RAX": "param",
                "unaff_RBX": "memoryBlock",
                "param_7": "result"
            },
            "code": "\nundefined8 releaseAndReturnParam_001081e9(void)\n\n{\n  undefined8 param;\n  void *memoryBlock;\n  undefined8 result;\n  \n  result = param;\n  free(memoryBlock);\n  return result;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "release_and_return_param_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_0010b0fa",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c",
                "FUN_0010e9a0",
                "FUN_001199d0",
                "FUN_0010aa53"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_data_structure_00113b71",
                "param_1": "input_value",
                "lVar1": "data_structure_ptr"
            },
            "code": "\nlong initialize_data_structure_00113b71(long input_value)\n\n{\n  long data_structure_ptr;\n  \n  if (input_value != 0) {\n    data_structure_ptr = initialize_data_structure_00113b71_00112904(0x14,0);\n    if (data_structure_ptr == 0) {\n      data_structure_ptr = 0;\n    }\n    else {\n      *(long *)(data_structure_ptr + 0x10) = input_value;\n    }\n    return data_structure_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "initialize_or_increment_data_structure_00109dfe",
                "param_1": "dataStructure",
                "lVar1": "counter",
                "local_40": "outputString"
            },
            "code": "\nvoid initializeOrIncrementDataStructure_00109dfe(long dataStructure)\n\n{\n  long counter;\n  char outputString [40];\n  \n  if (*(long *)(dataStructure + 0x70) != 0) {\n    initialize_data_structure_00109cf4(dataStructure,*(long *)(dataStructure + 0x70),0);\n    return;\n  }\n  counter = *(long *)(dataStructure + 0x68);\n  *(long *)(dataStructure + 0x68) = counter + 1;\n  *(long *)(dataStructure + 0x70) = counter;\n  sprintf(outputString,\"%ld=%ld\",counter,counter);\n  initialize_data_structure_00109b52(dataStructure,outputString,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_increment_data_structure_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_update_string_00109bbb",
                "param_1": "param",
                "__s": "string",
                "sVar1": "length"
            },
            "code": "\nbool checkAndUpdateString_00109bbb(long param)\n\n{\n  char *string;\n  size_t length;\n  \n  if (*(long *)(param + 0x60) != 0) {\n    string = *(char **)(*(long *)(param + 0x60) + 0x30);\n    if (string != (char *)0x0) {\n      length = strlen(string);\n      *(undefined2 *)(string + length) = 0x3b;\n    }\n    return string != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_update_string_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "combine_strings_0010ae0e",
                "param_1": "input",
                "lVar1": "data_ptr",
                "lVar2": "sub_ptr",
                "__ptr": "ptr",
                "pcVar3": "sub_str",
                "sVar4": "str_len_1",
                "sVar5": "str_len_2",
                "pcVar6": "result_str",
                "uVar7": "status",
                "lVar8": "result_len",
                "uVar9": "count",
                "uVar10": "sub_count"
            },
            "code": "\nundefined8 combineStrings_0010ae0e(long input)\n\n{\n  long data_ptr;\n  long sub_ptr;\n  void *ptr;\n  char *sub_str;\n  size_t str_len_1;\n  size_t str_len_2;\n  char *result_str;\n  undefined8 status;\n  long result_len;\n  uint count;\n  ulong sub_count;\n  \n  status = 0;\n  data_ptr = *(long *)(input + 0x60);\n  if (((data_ptr != 0) && (*(char **)(data_ptr + 8) != (char *)0x0)) &&\n     (result_str = *(char **)(data_ptr + 0x20), result_str != (char *)0x0)) {\n    str_len_1 = strlen(*(char **)(data_ptr + 8));\n    str_len_2 = strlen(result_str);\n    sub_ptr = *(long *)(data_ptr + 0x28);\n    if (sub_ptr == 0) {\n      result_len = str_len_1 + str_len_2 + 10;\n      sub_count = 0;\n    }\n    else {\n      result_len = str_len_1 + str_len_2 + 0x1e;\n      sub_count = 0;\n      while( true ) {\n        result_str = *(char **)(sub_ptr + sub_count * 8);\n        if (result_str == (char *)0x0) break;\n        str_len_1 = strlen(result_str);\n        sub_count = (ulong)((int)sub_count + 1);\n        result_len = result_len + str_len_1;\n      }\n    }\n    if (*(char **)(data_ptr + 0x30) != (char *)0x0) {\n      str_len_1 = strlen(*(char **)(data_ptr + 0x30));\n      result_len = result_len + str_len_1;\n    }\n    if (*(char **)(data_ptr + 0x38) != (char *)0x0) {\n      str_len_1 = strlen(*(char **)(data_ptr + 0x38));\n      result_len = result_len + str_len_1;\n    }\n    result_str = (char *)xmalloc(result_len);\n    data_ptr = *(long *)(input + 0x60);\n    strcpy(result_str,*(char **)(data_ptr + 8));\n    if (*(long *)(data_ptr + 0x28) != 0) {\n      count = 0;\n      str_len_1 = strlen(result_str);\n      sprintf(result_str + str_len_1,\"!%u,\",sub_count);\n      while( true ) {\n        data_ptr = *(long *)(input + 0x60);\n        sub_count = (ulong)count;\n        ptr = *(void **)(data_ptr + 0x28);\n        sub_str = *(char **)((long)ptr + sub_count * 8);\n        if (sub_str == (char *)0x0) break;\n        count = count + 1;\n        strcat(result_str,sub_str);\n        free(*(void **)(*(long *)(data_ptr + 0x28) + sub_count * 8));\n      }\n      free(ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    data_ptr = *(long *)(input + 0x60);\n    strcat(result_str,*(char **)(data_ptr + 0x20));\n    free(*(void **)(data_ptr + 0x20));\n    data_ptr = *(long *)(input + 0x60);\n    *(undefined8 *)(data_ptr + 0x20) = 0;\n    if (*(char **)(data_ptr + 0x30) != (char *)0x0) {\n      strcat(result_str,*(char **)(data_ptr + 0x30));\n      free(*(void **)(data_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    str_len_1 = strlen(result_str);\n    data_ptr = *(long *)(input + 0x60);\n    *(undefined2 *)(result_str + str_len_1) = 0x3b;\n    sub_str = *(char **)(data_ptr + 0x38);\n    if (sub_str != (char *)0x0) {\n      strcpy(result_str + str_len_1 + 1,sub_str);\n      free(*(void **)(data_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    data_ptr = *(long *)(input + 0x60);\n    *(char **)(data_ptr + 8) = result_str;\n    status = CONCAT71((int7)((ulong)data_ptr >> 8),1);\n  }\n  return status;\n}\n\n",
            "called": [
                "strcat",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "combine_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_debug_data_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "iVar1": "count",
                "cVar2": "isSuccessful",
                "uVar3": "result",
                "puVar4": "currentItem",
                "puVar5": "dataPtr"
            },
            "code": "\nundefined8 processDebugData_001135a5(undefined8 input1,undefined8 input2,long data)\n\n{\n  int count;\n  char isSuccessful;\n  undefined8 result;\n  undefined8 *currentItem;\n  undefined8 *dataPtr;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    isSuccessful = process_debug_data_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (isSuccessful != '\\0') {\n      result = process_and_update_hash_table_0010e6a8(input2,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 1:\n    isSuccessful = process_debug_data_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (isSuccessful != '\\0') {\n      result = extract_and_update_hash_table_0010e7c2(input2,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 2:\n    isSuccessful = process_debug_data_00112c1f(input1,input2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (isSuccessful != '\\0') {\n      result = format_string_and_hash_0010e9a0(input2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    dataPtr = *(undefined8 **)(data + 0x20);\n    count = *(int *)(data + 0x18);\n    result = *(undefined8 *)(data + 8);\n    isSuccessful = check_files_and_update_00112502(input1,input2,*(undefined8 *)(dataPtr[2] + 0x18));\n    if (((isSuccessful != '\\0') && (isSuccessful = process_debug_data_00112c1f(input1,input2,*dataPtr,0), isSuccessful != '\\0')) &&\n       (isSuccessful = process_data_0010eafe(input2,result,count == 2), isSuccessful != '\\0')) {\n      for (currentItem = (undefined8 *)dataPtr[1]; currentItem != (undefined8 *)0x0;\n          currentItem = (undefined8 *)*currentItem) {\n        isSuccessful = process_debug_data_00112c1f(input1,input2,currentItem[2],0);\n        if (isSuccessful == '\\0') {\n          return 0;\n        }\n        isSuccessful = update_hash_and_free_0010ebb0(input2,currentItem[1],*(undefined4 *)(currentItem + 3));\n        if (isSuccessful == '\\0') {\n          return 0;\n        }\n      }\n      dataPtr = (undefined8 *)dataPtr[2];\n      while( true ) {\n        if (dataPtr == (undefined8 *)0x0) {\n          result = initialize_00108f05(input2);\n          return result;\n        }\n        isSuccessful = process_files_and_update_00113a4d(input1,input2,dataPtr);\n        if (isSuccessful == '\\0') break;\n        dataPtr = (undefined8 *)*dataPtr;\n      }\n    }\n    break;\n  case 4:\n    result = create_updated_hash_entry_0010e842(input2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return result;\n  case 5:\n    result = update_hash_table_0010e8a9(*(undefined8 *)(data + 0x20),input2,*(undefined8 *)(data + 8));\n    return result;\n  case 6:\n    isSuccessful = process_debug_data_00112c1f(input1,input2,**(undefined8 **)(data + 0x20),0);\n    if (isSuccessful != '\\0') {\n      result = update_hash_0010e918(input2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010e8a9",
                "FUN_0010e842",
                "abort",
                "FUN_0010e918",
                "FUN_0010ebb0",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_00108f05",
                "FUN_0010e7c2",
                "FUN_00113a4d",
                "FUN_0010eafe",
                "FUN_00112c1f",
                "FUN_00112502"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_debug_data_001135a5",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_update_hash_table_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = extract_and_update_hash_table_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = format_string_and_hash_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = check_files_and_update_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = process_debug_data_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_data_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = process_debug_data_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = update_hash_and_free_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = initialize_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = create_updated_hash_entry_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = update_hash_table_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = update_hash_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = get_modified_filename_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_modified_filename_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = get_modified_filename_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = recognize_file_format_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = update_permissions_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = update_permissions_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = update_permissions_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = improve_debugging_information_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUNC_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = initialize_data_structure_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUNC_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar28 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_memory_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_memory_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_and_initialize_data_structure_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = initialize_or_record_debug_info_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = start_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_debug_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_and_initialize_data_structure_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debug_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = initialize_section_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_and_exit_error_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_permissions_and_patterns_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_pattern_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = check_pattern_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_pattern_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = initialize_section_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_and_exit_error_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = process_binary_data_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)extract_build_attributes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_get_mach",
                "bfd_set_file_flags",
                "dcgettext",
                "FUN_001152b6",
                "FUN_001125fa",
                "bfd_get_arch",
                "printf",
                "bfd_set_start_address"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00104ea2",
                "FUN_00104943",
                "FUN_00107976",
                "FUN_001199d0",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_00115530",
                "FUN_0010ee3f",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "FUNC_0010b0fa"
            },
            "code": "\n\n\nchar * FUNC_0010b0fa(undefined8 param_1,undefined8 param_2,uint *param_3,long param_4,\n                   undefined *param_5)\n\n{\n  uint uVar1;\n  int iVar2;\n  char *pcVar3;\n  long *plVar4;\n  char *pcVar5;\n  size_t sVar6;\n  void *__ptr;\n  long lVar7;\n  undefined local_40 [16];\n  \n  if (param_5 != (undefined *)0x0) {\n    *param_5 = 0;\n  }\n  while( true ) {\n    uVar1 = *param_3;\n    if (0x29 < uVar1) break;\n    if (0x17 < uVar1) {\n      switch(uVar1) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        pcVar3 = (char *)FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),0,0);\n        if (pcVar3 != (char *)0x0) {\n          switch(*param_3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            pcVar3 = (char *)initialize_data_structure_00113b4a(pcVar3);\n            return pcVar3;\n          case 0x1b:\n            pcVar3 = (char *)initialize_data_structure_00113b71(pcVar3);\n            return pcVar3;\n          default:\n                    \n            abort();\n          case 0x22:\n            pcVar3 = (char *)initialize_or_get_data_structure_00113d3a(pcVar3);\n            return pcVar3;\n          case 0x23:\n            pcVar3 = (char *)initialize_data_structure_00113cb9(pcVar3);\n            return pcVar3;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        if (pcVar3 == (char *)0x0) {\n          pcVar5 = \"Couldn\\'t get demangled builtin type\\n\";\n          pcVar3 = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        iVar2 = strcmp(pcVar3,\"signed char\");\n        if (iVar2 == 0) {\nLAB_0010b406:\n          pcVar5 = (char *)update_data_structure_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"bool\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)initialize_data_structure_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"char\");\n        if (iVar2 == 0) goto LAB_0010b406;\n        iVar2 = strcmp(pcVar3,\"double\");\n        if ((iVar2 == 0) || (iVar2 = strcmp(pcVar3,\"long double\"), iVar2 == 0)) {\n          pcVar5 = (char *)initialize_data_structure_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"float\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)initialize_data_structure_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"__float128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)initialize_data_structure_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned char\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)update_data_structure_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"int\");\n        if (iVar2 == 0) {\nLAB_0010b504:\n          pcVar5 = (char *)update_data_structure_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned int\");\n        if (iVar2 == 0) {\nLAB_0010b528:\n          pcVar5 = (char *)update_data_structure_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"long\");\n        if (iVar2 == 0) goto LAB_0010b504;\n        iVar2 = strcmp(pcVar3,\"unsigned long\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"__int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)update_data_structure_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned __int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)update_data_structure_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)update_data_structure_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)update_data_structure_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"void\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)initialize_data_structure_00113e17();\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"wchar_t\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)update_data_structure_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)update_data_structure_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"...\");\n        if (iVar2 == 0) {\n          pcVar5 = \"Unexpected demangled varargs\\n\";\n          if (param_5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param_5 = 1;\n        }\n        else {\n          pcVar5 = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          pcVar5 = (char *)dcgettext(0,pcVar5,5);\n          fprintf(_stderr,pcVar5);\n        }\n        pcVar5 = (char *)0x0;\nLAB_0010b6c6:\n        free(pcVar3);\n        return pcVar5;\n      case 0x29:\n        if (*(long *)(param_3 + 4) == 0) {\n          __ptr = (void *)initialize_data_structure_00113e17();\n        }\n        else {\n          __ptr = (void *)FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,0);\n        }\n        if (__ptr != (void *)0x0) {\n          lVar7 = demangle_arglist_0010b6ea(param_1,param_2,*(undefined8 *)(param_3 + 6),local_40);\n          if (lVar7 != 0) {\n            pcVar3 = (char *)initialize_data_structure_00113ce0(__ptr,lVar7,local_40[0]);\n            return pcVar3;\n          }\n          free(__ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (uVar1 != 1) {\n      if (uVar1 == 4) {\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        pcVar5 = \"Failed to print demangled template\\n\";\n        if (pcVar3 != (char *)0x0) {\n          sVar6 = strlen(pcVar3);\n          pcVar5 = (char *)find_string_entry_0010afd5(param_1,param_2,pcVar3,sVar6 & 0xffffffff,9);\n          free(pcVar3);\n          return pcVar5;\n        }\nLAB_0010b3d3:\n        pcVar5 = (char *)dcgettext(0,pcVar5,5);\n        fprintf(_stderr,pcVar5);\n        return pcVar3;\n      }\n      if (uVar1 == 0) {\n        if ((param_4 == 0) || (plVar4 = (long *)extract_debug_info_00113b1e(param_4), plVar4 == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param_4 = FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),param_4,0);\n    if (param_4 == 0) goto LAB_0010b38c;\n    param_3 = *(uint **)(param_3 + 6);\n    param_5 = (undefined *)0x0;\n  }\n  pcVar3 = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,pcVar3,(ulong)uVar1);\nLAB_0010b38c:\n  pcVar3 = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return pcVar3;\nLAB_0010b1a5:\n  if (*plVar4 == 0) {\nswitchD_0010b158_caseD_18:\n    pcVar3 = (char *)find_string_entry_0010afd5(param_1,param_2,*(undefined8 *)(param_3 + 4),param_3[6],0);\n    return pcVar3;\n  }\n  pcVar3 = *(char **)(*plVar4 + 8);\n  if (pcVar3 == (char *)0x0) goto LAB_0010b38c;\n  pcVar5 = (char *)get_return_value_001129f4(pcVar3);\n  if (pcVar5 != (char *)0x0) {\n    sVar6 = strlen(pcVar5);\n    if ((param_3[6] == (uint)sVar6) &&\n       (iVar2 = strncmp(pcVar5,*(char **)(param_3 + 4),(long)(int)param_3[6]), iVar2 == 0)) {\n      return pcVar3;\n    }\n  }\n  plVar4 = plVar4 + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_00113d3a",
                "strlen",
                "fprintf",
                "FUN_001129f4",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_00113b71",
                "cplus_demangle_print",
                "FUN_00113b4a",
                "FUN_0010b6ea",
                "strncmp",
                "FUN_00113b1e",
                "free",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113cb9",
                "FUN_00112904"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b6ea",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "FUNC_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "unaff_RBX": "linePtr",
                "unaff_EBP": "lineCount",
                "unaff_R13": "fileName",
                "unaff_R14": "currentLine",
                "unaff_R15": "nextLine",
                "in_stack_00000008": "ignoredMessage",
                "in_stack_00000010": "returnAddress",
                "pbVar5": "currentChar",
                "in_CL": "currentCharCode",
                "uVar1": "errorMessage",
                "ppbVar2": "hashTableSlot",
                "pbVar2": "nextChar",
                "pbVar3": "trimmedLine"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 errorMessage;\n  byte **hashTableSlot;\n  byte *trimmedLine;\n  byte currentCharCode;\n  byte bVar4;\n  byte *linePtr;\n  int lineCount;\n  byte *currentChar;\n  undefined8 fileName;\n  byte *currentLine;\n  byte *nextLine;\n  undefined8 ignoredMessage;\n  undefined8 *returnAddress;\n  \n  do {\n    currentChar = nextLine;\n    if (currentCharCode == 9) goto LAB_00104c3f;\n    do {\n      if ((currentCharCode == 10) || (currentCharCode == 0xd)) goto LAB_00114676;\n      if (currentCharCode == 0) goto LAB_00114599;\n      currentCharCode = currentChar[1];\n      currentChar = currentChar + 1;\n    } while ((currentCharCode != 0x20) && (currentCharCode != 9));\n    if ((char)currentCharCode < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentCharCode & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      bVar4 = currentChar[1];\n      if ((((((bVar4 == 9) || (bVar4 == 0x20)) &&\n            ((bVar4 = currentChar[2], bVar4 == 9 || (bVar4 == 0x20)))) &&\n           ((bVar4 = currentChar[3], bVar4 == 9 || (bVar4 == 0x20)))) &&\n          ((bVar4 = currentChar[4], bVar4 == 9 || (bVar4 == 0x20)))) &&\n         ((bVar4 = currentChar[5], bVar4 == 9 || (bVar4 == 0x20)))) {\n        bVar4 = currentChar[6];\n        trimmedLine = currentChar + 6;\n        if ((bVar4 == 9) || (bVar4 == 0x20)) {\n          do {\n            do {\n              bVar4 = trimmedLine[1];\n              trimmedLine = trimmedLine + 1;\n            } while (bVar4 == 0x20);\n          } while (bVar4 == 9);\n        }\n      }\n      if ((0xd < bVar4) || ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0)) {\n        errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(errorMessage,ignoredMessage,lineCount);\n      }\n    }\nLAB_00114599:\n    *currentChar = 0;\n    if (nextLine < currentChar) {\n      hashTableSlot = (byte **)htab_find_slot();\n      *hashTableSlot = nextLine;\n    }\n    lineCount = lineCount + 1;\n    currentChar = linePtr;\n    if (currentLine[1] == 0) {\n      *returnAddress = fileName;\n      return;\n    }\n    for (; bVar4 = *currentChar, currentLine = currentChar, bVar4 != 10; currentChar = currentChar + 1) {\n      if ((char)bVar4 < '\\v') {\n        if (bVar4 == 0) {\n          trimmedLine = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (bVar4 == 0xd) {\n          *currentChar = 0;\n          trimmedLine = currentChar + 1;\n          if (currentChar[1] == 10) {\n            trimmedLine = currentChar + 2;\n            currentLine = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (bVar4 == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      currentLine = currentChar + 1;\n      trimmedLine = currentChar + 2;\n    }\n    else {\n      trimmedLine = currentChar + 1;\n    }\nLAB_00114553:\n    currentCharCode = *linePtr;\n    nextLine = linePtr;\n    while (linePtr = trimmedLine, currentCharCode == 0x20) {\nLAB_00104c3f:\n      currentChar = nextLine + 1;\n      nextLine = nextLine + 1;\n      trimmedLine = linePtr;\n      currentCharCode = *currentChar;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "improve_debugging_information_0010554f",
                "param_7": "bfd_handle",
                "param_8": "num_sections",
                "param_14": "gap_sizes",
                "param_15": "flags",
                "param_17": "section_table",
                "param_21": "debug_link_file",
                "param_23": "section_alignment",
                "param_24": "gnu_debuglink_section_name",
                "param_30": "section_sizes",
                "param_31": "section_contents",
                "param_33": "merged_notes",
                "param_34": "num_merged_notes",
                "param_36": "arch_size",
                "param_37": "endianness",
                "param_38": "debug_section_size",
                "param_40": "debug_contents",
                "param_41": "check_pattern",
                "param_42": "pattern",
                "param_43": "record_type",
                "param_44": "merge_mode"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 improveDebuggingInformation_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long bfd_handle;\n  ulong num_sections;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *gap_sizes;\n  uint flags;\n  long *section_table;\n  undefined8 in_stack_00000068;\n  undefined8 debug_link_file;\n  long section_alignment;\n  char *gnu_debuglink_section_name;\n  long param_26;\n  long *section_sizes;\n  ulong section_contents;\n  long param_32;\n  long in_stack_000000d8;\n  void *merged_notes;\n  long num_merged_notes;\n  undefined8 in_stack_000000f8;\n  byte arch_size;\n  byte endianness;\n  undefined8 debug_section_size;\n  ushort param_39;\n  long *debug_contents;\n  char check_pattern;\n  char *pattern;\n  undefined record_type;\n  short merge_mode;\n  \n  bVar39 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    param_12 = 0;\n    gap_sizes = (undefined *)0x0;\n    section_table = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    section_table = (long *)xmalloc(lVar14);\n    debug_contents = section_table;\n    bfd_map_over_sections(bfd_handle,store_data_0010870e,&stack0x00000140);\n    qsort(section_table,(ulong)in_stack_00000068._4_4_,8,compare_records_0010875d);\n    gap_sizes = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127978 != '\\0';\n    puVar33 = gap_sizes;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(gap_sizes + uVar29 * 8);\n        plVar28 = section_table + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(bfd_handle,*plVar28);\n          uVar13 = bfd_octets_per_byte(bfd_handle);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_error_message_001126c0(0,bfd_handle,*plVar28);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (DAT_00127969 != '\\0') {\n      uVar12 = bfd_octets_per_byte(bfd_handle);\n      lVar14 = section_table[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127970 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_error_message_001126c0(0,bfd_handle,section_table[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(gap_sizes + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)initialize_data_structure_00112894(unaff_R14,1,plVar28), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              section_alignment = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  section_alignment = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + section_alignment;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    gnu_debuglink_section_name = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)section_alignment);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(gnu_debuglink_section_name);\n                      gnu_debuglink_section_name = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = FUNC_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(gnu_debuglink_section_name);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = process_debug_data_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + num_sections; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (check_pattern == '-') {\n          if (((lVar14 == 0) && (lVar14 = initialize_data_structure_00112894(unaff_R14,0,plVar28), lVar14 == 0)) ||\n             ((pattern == (char *)0x0 || (*pattern == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = pattern;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < plVar28 + num_sections))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          update_data_entry_001088ae(record_type,(int)merge_mode,debug_contents,pcVar22);\n          param_9 = FUNC_0011173a(__ptr_02,lVar14,record_type);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar14 != 0) && (cVar7 = process_debug_data_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (num_sections != 0)) {\n        debug_contents = (long *)0x0;\n        section_sizes = plVar28;\n        param_32 = 0;\n        section_contents = num_sections;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _flags = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        gnu_debuglink_section_name = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)num_sections <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)endianness + 1 + in_stack_000000d8;\n            if (endianness != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (gnu_debuglink_section_name != (char *)lVar37) break;\n            if (arch_size != 0x67) {\n              cVar8 = initialize_memory_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            gnu_debuglink_section_name = (char *)num_merged_notes;\n            cVar8 = initialize_memory_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)arch_size < '\\0') {\n            if (arch_size == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_and_initialize_data_structure_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = initialize_or_record_debug_info_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (arch_size < 100) {\n              switch(arch_size) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _flags = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(arch_size) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = start_debug_block_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = end_debug_block_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_and_initialize_data_structure_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = debug_record_function_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_flags != (int *)0x0) {\n                    iVar10 = 0;\n                    if (endianness != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _flags[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = record_line_debug_info_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_flags + 6) + lVar14);\n                      _flags = _flags + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _flags = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = end_debug_function_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              print_error_message_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        print_error_message_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(bfd_handle + 0x44) & 0x42) != 0) && ((*(uint *)(bfd_handle + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(bfd_handle + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (num_sections != 0) {\n        plVar28 = DAT_001278b0 + num_sections;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(bfd_handle + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = DAT_001278b0;\n      flags = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = lVar14;\n      if (num_sections == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279a0;\n          plVar15 = (long *)plVar28[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279a8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = initialize_section_0011a2e0(puVar26);\n                  uVar17 = DAT_001278d0;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278d0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_and_exit_error_00119dd0(uVar17);\n              }\n            }\n            _check_pattern = 0;\n            debug_contents = plVar20;\n            lVar37 = htab_find(DAT_001278d0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278d8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(bfd_handle + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127908;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(bfd_handle + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(bfd_handle + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127908;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(bfd_handle + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127908);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((flags == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _check_pattern = _check_pattern & 0xffffffffffffff00;\n                debug_contents = plVar25;\n                htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n                if (check_pattern == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar17);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _check_pattern = _check_pattern & 0xffffffffffffff00;\n            debug_contents = plVar25;\n            htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n            if (check_pattern != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _check_pattern = _check_pattern & 0xffffffffffffff00;\n              debug_contents = plVar25;\n              htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&stack0x00000140);\n              if (check_pattern != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _check_pattern = _check_pattern & 0xffffffffffffff00;\n              debug_contents = plVar25;\n              htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&stack0x00000140);\n              if (check_pattern != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = check_permissions_and_patterns_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = check_pattern_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279d8), lVar37 == 0 ||\n                      (cVar7 = check_pattern_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = check_pattern_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar7 = check_pattern_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (num_sections != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279a8;\n        iVar10 = DAT_001279a0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = initialize_section_0011a2e0(puVar26,bfd_handle);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279a0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_and_exit_error_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_00127980 == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        num_sections = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(bfd_handle + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        merged_notes = (void *)0x0;\n        cVar7 = process_binary_data_0011378f(bfd_handle,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(bfd_handle,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(bfd_handle,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,debug_section_size), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,debug_contents), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(bfd_handle,lVar14,section_sizes,0,debug_section_size);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(bfd_handle,lVar37,merged_notes,0,debug_contents), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          print_error_message_001126c0(0,bfd_handle,0,uVar17);\n          free(merged_notes);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(bfd_handle + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,bfd_handle,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,process_relocations_00116030,DAT_001278b0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_001279f8);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a08), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_001279e8), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_001279e0), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279d8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279d0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278d0), lVar14 != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(bfd_handle,DAT_001278a8,num_sections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,bfd_handle);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,bfd_handle);\n    for (puVar26 = DAT_001279c0; puVar4 = DAT_001279b8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(bfd_handle,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        print_error_message_001126c0(0,bfd_handle,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(bfd_handle,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        print_error_message_001126c0(0,bfd_handle,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(bfd_handle + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(bfd_handle + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = string_comparison_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(bfd_handle,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,bfd_handle,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          print_error_message_001126c0(0,bfd_handle,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(bfd_handle,debug_link_file), lVar14 = DAT_00127a10,\n       cVar7 != '\\0')) {\n      if (gap_sizes != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        uVar5 = DAT_00127979;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(gap_sizes + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*section_table + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(bfd_handle,*section_table,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                print_error_message_001126c0(0,bfd_handle,*section_table,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          section_table = section_table + 1;\n        }\n        free(__ptr);\n        free(gap_sizes);\n      }\n      uVar9 = (**(code **)(*(long *)(bfd_handle + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(bfd_handle,DAT_00127910 & 0xffffffff);\n        uVar29 = DAT_00127910;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(bfd_handle + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar17);\n            *(short *)(*(long *)(bfd_handle + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,bfd_handle,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,bfd_handle,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "htab_find",
                "FUN_0010bf86",
                "FUN_0011a170",
                "FUN_00115d70",
                "FUN_0011378f",
                "bfd_set_error",
                "FUN_0010bf20",
                "qsort",
                "FUN_00108b3e",
                "bfd_coff_get_syment",
                "bfd_make_section_with_flags",
                "FUN_001126c0",
                "FUN_001159d0",
                "concat",
                "bfd_set_section_size",
                "strcmp",
                "FUN_00113fb0",
                "strlen",
                "fprintf",
                "FUN_00115dc0",
                "htab_elements",
                "xstrdup",
                "bfd_get_section_by_name",
                "FUN_0010870e",
                "FUN_0010c892",
                "bfd_is_local_label",
                "FUN_001088ae",
                "htab_traverse",
                "FUN_0010be88",
                "FUN_0010bbd3",
                "bfd_map_over_sections",
                "xmalloc",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00112a33",
                "bfd_map_over_sections",
                "FUN_00119ed0",
                "bfd_get_section_contents",
                "strcpy",
                "bfd_set_section_contents",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_00119dd0",
                "bfd_alt_mach_code",
                "bfd_errmsg",
                "dcgettext",
                "FUN_00116110",
                "FUN_0010be1a",
                "FUN_00108863",
                "FUN_0011a2e0",
                "FUN_00116030",
                "FUN_0010875d",
                "bfd_set_symtab",
                "free",
                "FUN_00112894",
                "bfd_get_error",
                "bfd_octets_per_byte",
                "FUN_0010bc80",
                "bfd_coff_get_auxent",
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improve_debugging_information_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "initialize_data_structure_00109cf4",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "param",
                "local_3c": "value_string"
            },
            "code": "\nvoid initialize_data_structure_00109cf4(undefined8 data_structure,undefined8 value,undefined4 param)\n\n{\n  char value_string [28];\n  \n  sprintf(value_string,\"%ld\",value);\n  initialize_data_structure_00109cf4_00109b52(data_structure,value_string,value,0,param);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109dfe",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "validate_string_to_ulong_00109ab1",
                "param_1": "string_ptr",
                "param_2": "ulong_ptr",
                "param_3": "param_ptr1",
                "param_4": "param_ptr2",
                "param_5": "param_ptr3",
                "uVar1": "converted_ulong",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "output"
            },
            "code": "\nundefined  [16]\nvalidate_string_to_ulong_00109ab1(char **string_ptr,undefined4 *ulong_ptr,undefined8 param_ptr1,undefined8 param_ptr2,\n            undefined8 param_ptr3)\n\n{\n  undefined4 converted_ulong;\n  char *current_char;\n  undefined8 result;\n  undefined output [16];\n  \n  current_char = *string_ptr;\n  if (*current_char == '(') {\n    *string_ptr = current_char + 1;\n    converted_ulong = validate_and_convert_string_to_ulong_00109a32(string_ptr,0);\n    *ulong_ptr = converted_ulong;\n    if (**string_ptr == ',') {\n      *string_ptr = *string_ptr + 1;\n      converted_ulong = validate_and_convert_string_to_ulong_00109a32(string_ptr,0,param_ptr1);\n      ulong_ptr[1] = converted_ulong;\n      if (**string_ptr == ')') {\n        current_char = *string_ptr + 1;\n        *string_ptr = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    print_bad_stab_00108fb9(current_char);\n    result = 0;\n  }\n  else {\n    *ulong_ptr = 0;\n    current_char = (char *)validate_and_convert_string_to_ulong_00109a32(string_ptr,0);\n    ulong_ptr[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  output._8_8_ = param_ptr3;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_string_to_ulong_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_permissions_and_patterns_001159d0",
                "param_1": "input_address",
                "uVar1": "value",
                "cVar2": "result",
                "uVar3": "section_permissions_result",
                "lVar4": "value_address",
                "lVar5": "current_address"
            },
            "code": "\nundefined4 check_permissions_and_patterns_001159d0(long input_address)\n\n{\n  undefined8 value;\n  char result;\n  undefined4 section_permissions_result;\n  long value_address;\n  long current_address;\n  \n  section_permissions_result = check_section_permissions_00115b70();\n  if ((char)section_permissions_result == '\\0') {\n    if ((*(byte *)(input_address + 0x27) & 2) == 0) {\n      return section_permissions_result;\n    }\n    value_address = find_value_00115d00(*(undefined8 *)(input_address + 0xd0),*(undefined8 *)(input_address + 0xe0));\n    if ((value_address != 0) &&\n       (((value = *(undefined8 *)(value_address + 8), DAT_00127a2c != 7 ||\n         (result = check_pattern_00115d70(value,DAT_00127a08), result != '\\0')) &&\n        (result = check_pattern_00115d70(value,DAT_001279f8), result == '\\0')))) {\n      value_address = *(long *)(*(long *)(input_address + 0xd0) + 0xc0);\n      current_address = value_address;\n      do {\n        if (current_address == 0) {\n          return 1;\n        }\n        result = check_section_permissions_00115b70(current_address);\n        if (result == '\\0') {\n          return section_permissions_result;\n        }\n        current_address = *(long *)(*(long *)(current_address + 0xd0) + 0xc0);\n      } while (value_address != current_address);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_00115d70",
                "FUN_00115b70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00115f50"
            ],
            "imported": false,
            "current_name": "check_permissions_and_patterns_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "param_1": "input",
                "__s": "string1",
                "lVar2": "dataStructure",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "combinedString",
                "uVar1": "charValue",
                "uVar3": "value1",
                "uVar4": "result"
            },
            "code": "\nundefined4 processData_0010a77a(long input)\n\n{\n  undefined charValue;\n  long dataStructure;\n  char *string1;\n  undefined8 value1;\n  undefined4 result;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  \n  dataStructure = *(long *)(input + 0x60);\n  if ((dataStructure != 0) && (string1 = *(char **)(dataStructure + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(dataStructure + 0x18);\n    charValue = *(undefined *)(dataStructure + 0x1c);\n    value1 = *(undefined8 *)(dataStructure + 0x10);\n    string2 = (char *)extract_and_free_next_item_00109b2f();\n    length1 = strlen(string2);\n    length2 = strlen(string1);\n    combinedString = (char *)xmalloc(length1 + 2 + length2);\n    sprintf(combinedString,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = initialize_data_structure_00109b52(input,combinedString,value1,charValue,result);\n    if ((char)result != '\\0') {\n      free(combinedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "print_and_exit_error_0010543c",
                "unaff_RBP": "basePointer",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "uVar1": "value1",
                "uVar4": "translatedErrorMessage"
            },
            "code": "\nvoid printAndExitError_0010543c(void)\n\n{\n  undefined8 value1;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  long basePointer;\n  \n  errnoLocation = __errno_location();\n  errorMessage = strerror(*errnoLocation);\n  value1 = *(undefined8 *)(basePointer + 0x10);\n  translatedErrorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_and_exit_error_00119dd0(translatedErrorMessage,value1,errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "__errno_location",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "print_and_exit_error_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "process_data_0010a424",
                "param_1": "dataPtr",
                "param_2": "flag1",
                "param_3": "count",
                "param_4": "flag2",
                "cVar1": "result",
                "bVar2": "byteValue",
                "iVar3": "length",
                "uVar4": "returnValue",
                "pcVar5": "ptr1",
                "__ptr": "ptrArr",
                "uVar6": "value",
                "__s": "string1",
                "sVar7": "strLength1",
                "sVar8": "strLength2",
                "__s_00": "newString",
                "lVar9": "index",
                "bVar10": "flag3",
                "lVar11": "loopIndex",
                "uVar12": "byteValue2"
            },
            "code": "\nundefined4 processData_0010a424(long dataPtr,char flag1,int count,char flag2)\n\n{\n  char result;\n  byte byteValue;\n  int length;\n  undefined4 returnValue;\n  char *ptr1;\n  undefined8 *ptrArr;\n  undefined8 value;\n  char *string1;\n  size_t strLength1;\n  size_t strLength2;\n  char *newString;\n  long index;\n  byte flag3;\n  long loopIndex;\n  undefined byteValue2;\n  \n  if ((flag1 == '\\0') && (result = initialize_or_increment_value_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  flag3 = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  ptr1 = (char *)extract_and_free_next_item_00109b2f(dataPtr);\n  if (count < 0) {\n    ptrArr = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    byteValue2 = 1;\n    if (flag3 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      length = count + 1;\n      ptrArr = (undefined8 *)xmalloc((long)length * 8);\n      index = (long)(count + -1);\n      do {\n        byteValue = 1;\n        if (flag3 == 0) {\n          byteValue = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n        }\n        value = extract_and_free_next_item_00109b2f(dataPtr);\n        flag3 = byteValue & 1;\n        ptrArr[index] = value;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (flag2 == '\\0') {\n        result = initialize_or_increment_value_00109d97(dataPtr);\n        if (result == '\\0') {\n          return 0;\n        }\n        byteValue = 1;\n        if (flag3 == 0) {\n          byteValue = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n        }\n        flag3 = byteValue & 1;\n        value = extract_and_free_next_item_00109b2f(dataPtr);\n        ptrArr[(long)length + -1] = value;\n        count = length;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArr = (undefined8 *)0x0;\n    if (flag2 != '\\0') goto LAB_0010a582;\n    ptrArr = (undefined8 *)xmalloc(8);\n    result = initialize_or_increment_value_00109d97(dataPtr);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((flag3 != 0) || (*(char *)(*(long *)(dataPtr + 0x60) + 0x1c) != '\\0')) {\n      value = extract_and_free_next_item_00109b2f(dataPtr);\n      count = 1;\n      byteValue2 = 1;\n      *ptrArr = value;\n      goto LAB_0010a596;\n    }\n    value = extract_and_free_next_item_00109b2f(dataPtr);\n    count = 1;\n    *ptrArr = value;\n  }\n  byteValue2 = *(undefined *)(*(long *)(dataPtr + 0x60) + 0x1c);\nLAB_0010a596:\n  string1 = (char *)extract_and_free_next_item_00109b2f(dataPtr);\n  strLength1 = strlen(ptr1);\n  strLength2 = strlen(string1);\n  index = strLength1 + 10 + strLength2;\n  for (loopIndex = 0; (int)loopIndex < count; loopIndex = loopIndex + 1) {\n    strLength1 = strlen((char *)ptrArr[loopIndex]);\n    index = index + strLength1;\n  }\n  newString = (char *)xmalloc(index);\n  sprintf(newString,\"#%s,%s\",ptr1,string1);\n  index = 0;\n  free(ptr1);\n  free(string1);\n  while( true ) {\n    strLength1 = strlen(newString);\n    if (count <= (int)index) break;\n    *(undefined2 *)(newString + strLength1) = 0x2c;\n    ptr1 = (char *)ptrArr[index];\n    index = index + 1;\n    strcpy(newString + strLength1 + 1,ptr1);\n    free(ptr1);\n  }\n  *(undefined2 *)(newString + strLength1) = 0x3b;\n  free(ptrArr);\n  returnValue = initialize_data_structure_00109b52(dataPtr,newString,0,byteValue2,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(newString);\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "FUN_00109d97",
                "sprintf",
                "FUN_00109b2f",
                "strcpy",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "programName",
                "pcVar1": "copyrightMsg"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 programName)\n\n{\n  char *copyrightMsg;\n  \n  printf(\"GNU %s %s\\n\",programName,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMsg);\n  copyrightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "extract_key_value_pair_00114c80",
                "param_1": "input_string",
                "param_2": "value_param",
                "param_3": "error_message",
                "param_4": "unused_param",
                "pcVar1": "equal_sign_ptr",
                "uVar2": "error_message_ptr",
                "auVar3": "result_array"
            },
            "code": "\nundefined  [16] extract_key_value_pair_00114c80(char *input_string,undefined8 value_param,undefined8 error_message,undefined8 unused_param)\n\n{\n  char *equal_sign_ptr;\n  undefined8 error_message_ptr;\n  undefined result_array [16];\n  \n  equal_sign_ptr = strchr(input_string,0x3d);\n  if (equal_sign_ptr != (char *)0x0) {\n    result_array._0_8_ = (undefined8 *)xmalloc(0x30);\n    error_message_ptr = copy_string_with_length_0011a480(input_string,(long)equal_sign_ptr - (long)input_string);\n    result_array._0_8_[2] = equal_sign_ptr + 1;\n    result_array._0_8_[1] = error_message_ptr;\n    result_array._0_8_[4] = 0;\n    result_array._0_8_[3] = 0;\n    *result_array._0_8_ = value_param;\n    result_array._8_8_ = unused_param;\n    return result_array;\n  }\n  error_message_ptr = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_and_exit_error_00119dd0(error_message_ptr,error_message);\n}\n\n",
            "called": [
                "xmalloc",
                "strchr",
                "FUN_001053b5",
                "FUN_0011a480"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_key_value_pair_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "store_data_0010870e",
                "param_1": "destination",
                "param_2": "data",
                "param_3": "pointer",
                "puVar1": "ptr1"
            },
            "code": "\nvoid storeData_0010870e(undefined8 destination,undefined8 data,long *pointer)\n\n{\n  undefined8 *ptr1;\n  \n  ptr1 = (undefined8 *)*pointer;\n  *ptr1 = data;\n  *pointer = (long)(ptr1 + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "store_data_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_and_initialize_data_structure_0010dac0",
                "param_1": "binaryData",
                "param_2": "pointerArray",
                "param_3": "dataStructure",
                "param_4": "param4",
                "param_5": "typeCode",
                "param_6": "typeArray",
                "param_7": "flag",
                "param_8": "param8",
                "lVar1": "tempVar1",
                "cVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "lVar5": "returnValue",
                "uVar6": "tempVar6",
                "plVar7": "tempPointer",
                "__ptr": "tempPointer1",
                "__ptr_00": "tempPointer2",
                "bVar8": "byteVar",
                "iVar9": "intVar",
                "pcVar10": "charVar",
                "uVar11": "ulongVar",
                "lVar12": "tempVar5",
                "uVar13": "tempVar7",
                "uVar14": "tempVar8",
                "uVar15": "tempVar9",
                "local_68": "localArray",
                "local_48": "localChar",
                "local_47": "localByte"
            },
            "code": "\nlong parseAndInitializeDataStructure_0010dac0(long binaryData,long *pointerArray,long dataStructure,undefined8 param4,uint typeCode,\n                 long *typeArray,char flag,undefined8 param8)\n\n{\n  long tempVar1;\n  char tempVar2;\n  undefined4 tempVar3;\n  undefined8 tempVar4;\n  long returnValue;\n  undefined8 tempVar6;\n  long *tempPointer;\n  void *tempPointer1;\n  void *tempPointer2;\n  byte byteVar;\n  int intVar;\n  char *charVar;\n  ulong ulongVar;\n  long tempVar5;\n  uint tempVar7;\n  uint tempVar8;\n  undefined8 tempVar9;\n  undefined localArray [32];\n  char localChar;\n  byte localByte;\n  \n  returnValue = *(long *)(binaryData + 0x110);\n  if ((~*(uint *)(returnValue + 0x38) & typeCode) != 0) {\n    tempVar7 = (int)typeCode >> ((byte)*(undefined4 *)(returnValue + 0x44) & 0x1f);\n    ulongVar = (ulong)(typeCode & *(uint *)(returnValue + 0x40));\n    byteVar = (byte)*(undefined4 *)(returnValue + 0x3c);\n    tempVar7 = (tempVar7 ^ typeCode) & *(uint *)(returnValue + 0x38) ^ tempVar7;\n    if (ulongVar == 1L << (byteVar & 0x3f)) {\n      tempVar4 = parseAndInitializeDataStructure_0010dac0(binaryData,pointerArray,dataStructure,param4,tempVar7,typeArray,flag,param8);\n      returnValue = initialize_or_get_data_structure_00113d3a(tempVar4);\n      return returnValue;\n    }\n    if (ulongVar != 2L << (byteVar & 0x3f)) {\n      if (ulongVar != 3L << (byteVar & 0x3f)) {\n        tempVar4 = dcgettext(0,\"parse_coff_type: Bad type code 0x%x\",5,*(undefined4 *)(returnValue + 0x3c),\n                          tempVar7);\n        print_error_message_00119ed0(tempVar4,typeCode);\n        return 0;\n      }\n      tempVar8 = 0;\n      if (typeArray != (long *)0x0) {\n        tempVar8 = (uint)*(ushort *)(typeArray + 2);\n        tempPointer = typeArray + 2;\n        for (intVar = 0; (*(short *)tempPointer != 0 && (intVar != 3)); intVar = intVar + 1) {\n          *(short *)tempPointer = *(short *)((long)tempPointer + 2);\n          tempPointer = (long *)((long)tempPointer + 2);\n        }\n        *(short *)tempPointer = 0;\n      }\n      tempVar9 = 0;\n      tempVar4 = param8;\n      tempVar6 = parseAndInitializeDataStructure_0010dac0(binaryData,pointerArray,dataStructure,param4,tempVar7,typeArray,0);\n      returnValue = *(long *)(dataStructure + 0x28);\n      if (returnValue == 0) {\n        tempVar4 = update_data_structure_00113dfe(4,0,tempVar9,tempVar4);\n        returnValue = initialize_debug_info_0010c218(param8,\"int\",tempVar4);\n        *(long *)(dataStructure + 0x28) = returnValue;\n      }\n      returnValue = initialize_and_store_data_00113c43(tempVar6,returnValue,0,(long)(int)(tempVar8 - 1),0);\n      return returnValue;\n    }\n    tempVar4 = parseAndInitializeDataStructure_0010dac0(binaryData,pointerArray,dataStructure,param4,tempVar7,typeArray,flag,param8);\n    returnValue = initialize_data_structure_00113ce0(tempVar4,0,0);\n    return returnValue;\n  }\n  if ((typeArray != (long *)0x0) && (0 < *typeArray)) {\n    tempPointer = (long *)allocate_and_populate_slots_0010da0b(dataStructure);\n    if (*tempPointer != 0) {\n      return *tempPointer;\n    }\n    returnValue = create_data_structure_00113e23(tempPointer,0);\n    return returnValue;\n  }\n  if (flag == '\\0') {\n    typeArray = (long *)0x0;\n  }\n  if (0x10 < typeCode) {\n    returnValue = initialize_data_structure_00113e17();\n    return returnValue;\n  }\n  returnValue = *(long *)(dataStructure + 8 + (long)(int)typeCode * 8);\n  if (returnValue != 0) {\n    return returnValue;\n  }\n  switch(typeCode) {\n  default:\n    tempVar4 = initialize_data_structure_00113e17();\n    charVar = \"void\";\n    break;\n  case 2:\n    tempVar4 = update_data_structure_00113dfe(1,0);\n    charVar = \"char\";\n    break;\n  case 3:\n    tempVar4 = update_data_structure_00113dfe(2,0);\n    charVar = \"short\";\n    break;\n  case 4:\n    tempVar4 = update_data_structure_00113dfe(4,0);\n    charVar = \"int\";\n    break;\n  case 5:\n    tempVar4 = update_data_structure_00113dfe(4,0);\n    charVar = \"long\";\n    break;\n  case 6:\n    tempVar4 = initialize_data_structure_00113df2(4);\n    charVar = \"float\";\n    break;\n  case 7:\n    tempVar4 = initialize_data_structure_00113df2(8);\n    charVar = \"double\";\n    break;\n  case 8:\n    if (typeArray == (long *)0x0) {\n      returnValue = initialize_data_structure_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    tempVar4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (typeArray == (long *)0x0) {\n      returnValue = initialize_data_structure_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    tempVar4 = 9;\nLAB_0010de7a:\n    returnValue = process_binary_0010e07c(binaryData,pointerArray,dataStructure,tempVar4,typeArray,param8);\nLAB_0010e046:\n    tempPointer = (long *)allocate_and_populate_slots_0010da0b(dataStructure,param4);\n    *tempPointer = returnValue;\n    return returnValue;\n  case 10:\n    if (typeArray == (long *)0x0) {\n      returnValue = create_data_structure_00113d6e(0,0);\n    }\n    else {\n      returnValue = typeArray[3];\n      tempPointer1 = (void *)xmalloc(0x50);\n      tempPointer2 = (void *)xmalloc(0x50);\n      tempVar5 = 0;\n      do {\n        while( true ) {\n          if ((returnValue <= pointerArray[3]) || (pointerArray[1] <= pointerArray[2])) goto LAB_0010e032;\n          intVar = (int)tempVar5;\n          tempVar1 = *(long *)(*pointerArray + pointerArray[2] * 8);\n          tempVar2 = bfd_coff_get_syment(binaryData,tempVar1,localArray);\n          tempVar5 = (long)intVar;\n          if (tempVar2 == '\\0') {\n            tempVar3 = bfd_get_error();\n            tempVar4 = bfd_errmsg(tempVar3);\n            tempVar6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_message_00119ed0(tempVar6,tempVar4);\n            free(tempPointer1);\n            free(tempPointer2);\n            returnValue = 0;\n            goto LAB_0010e046;\n          }\n          pointerArray[2] = pointerArray[2] + 1;\n          pointerArray[3] = (ulong)localByte + 1 + pointerArray[3];\n          if (localChar != '\\x10') break;\n          if ((int)typeCode <= intVar + 1) {\n            typeCode = typeCode + 10;\n            tempPointer1 = (void *)xrealloc(tempPointer1);\n            tempPointer2 = (void *)xrealloc(tempPointer2,(long)(int)typeCode << 3);\n          }\n          tempVar5 = *(long *)(tempVar1 + 0x20);\n          *(undefined8 *)((long)tempPointer1 + (long)intVar * 8) = *(undefined8 *)(tempVar1 + 8);\n          *(long *)((long)tempPointer2 + (long)intVar * 8) =\n               *(long *)(tempVar1 + 0x10) + *(long *)(tempVar5 + 0x30);\n          tempVar5 = (long)(intVar + 1);\n        }\n      } while (localChar != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)tempPointer1 + tempVar5 * 8) = 0;\n      returnValue = create_data_structure_00113d6e(tempPointer1,tempPointer2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    returnValue = initialize_data_structure_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    tempVar4 = update_data_structure_00113dfe(1,1);\n    charVar = \"unsigned char\";\n    break;\n  case 0xd:\n    tempVar4 = update_data_structure_00113dfe(2,1);\n    charVar = \"unsigned short\";\n    break;\n  case 0xe:\n    tempVar4 = update_data_structure_00113dfe(4,1);\n    charVar = \"unsigned int\";\n    break;\n  case 0xf:\n    tempVar4 = update_data_structure_00113dfe(4,1);\n    charVar = \"unsigned long\";\n    break;\n  case 0x10:\n    tempVar4 = initialize_data_structure_00113df2(0xc);\n    charVar = \"long double\";\n  }\n  returnValue = initialize_debug_info_0010c218(param8,charVar,tempVar4);\nLAB_0010e065:\n  *(long *)(dataStructure + 8 + (long)(int)typeCode * 8) = returnValue;\n  return returnValue;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00113d3a",
                "FUN_0010e07c",
                "FUN_00113c43",
                "dcgettext",
                "FUN_00113ce0",
                "xmalloc",
                "FUN_00113e23",
                "FUN_0010dac0",
                "FUN_00113d6e",
                "FUN_00113da9",
                "xrealloc",
                "FUN_0010c218",
                "free",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_and_initialize_data_structure_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "__n": "string2_length",
                "extraout_var": "extraOutput",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  size_t string2_length;\n  undefined4 extraOutput;\n  undefined result [16];\n  \n  string2_length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,string2_length);\n  result._1_7_ = (undefined7)(CONCAT44(extraOutput,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_00113ede",
                "FUN_0010ee3f",
                "FUN_00108c86",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00115f50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_time_error_message_0010882c",
                "piVar1": "error_code_ptr",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_time_error_message_0010882c(void)\n\n{\n  int *error_code_ptr;\n  undefined8 error_message;\n  \n  error_code_ptr = __errno_location();\n  strerror(*error_code_ptr);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_00119ed0(error_message);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_time_error_message_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "update_hash_and_free_0010ebb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "char1",
                "uVar2": "size",
                "uVar3": "result",
                "__s": "extractedString",
                "sVar4": "lenParam2",
                "sVar5": "lenExtractedString",
                "__s_00": "concatenatedString"
            },
            "code": "\nundefined4 updateHashAndFree_0010ebb0(undefined8 param1,char *param2,int param3,undefined8 param4)\n\n{\n  char char1;\n  uint size;\n  undefined4 result;\n  char *extractedString;\n  size_t lenParam2;\n  size_t lenExtractedString;\n  char *concatenatedString;\n  \n  extractedString = (char *)extract_and_free_next_item_00109b2f();\n  size = param3 - 1;\n  if (size < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)size * 4);\n    char1 = (&DAT_00121334)[size];\n    lenParam2 = strlen(param2);\n    lenExtractedString = strlen(extractedString);\n    concatenatedString = (char *)xmalloc(lenParam2 + 3 + lenExtractedString);\n    sprintf(concatenatedString,\"%s:%c%s\",param2,(ulong)(uint)(int)char1,extractedString);\n    free(extractedString);\n    result = update_hash_table_0010e2f0(param1,result,0,param4,concatenatedString);\n    if ((char)result != '\\0') {\n      free(concatenatedString);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "update_hash_and_free_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "initialize_and_store_data_structure_00113b98",
                "param_1": "input_param",
                "param_2": "param_2_data",
                "param_3": "param_3_data",
                "param_4": "param_4_data",
                "lVar1": "data_structure_address",
                "plVar2": "allocated_memory"
            },
            "code": "\nlong initialize_and_store_data_structure_00113b98(long input_param,long param_2_data,long param_3_data,undefined param_4_data)\n\n{\n  long data_structure_address;\n  long *allocated_memory;\n  \n  if ((input_param != 0) && (data_structure_address = initialize_data_structure_00112904(0x13,0), data_structure_address != 0)) {\n    allocated_memory = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocated_memory + 0x19) = 0;\n    *allocated_memory = input_param;\n    *(undefined4 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[1] = param_2_data;\n    allocated_memory[2] = param_3_data;\n    *(undefined *)(allocated_memory + 3) = param_4_data;\n    *(long **)(data_structure_address + 0x10) = allocated_memory;\n    return data_structure_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_store_data_structure_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_pattern_00115d70",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar1": "hash_result",
                "local_18": "match_input",
                "local_10": "is_matched"
            },
            "code": "\nundefined check_pattern_00115d70(undefined8 input_1,undefined8 input_2)\n\n{\n  long hash_result;\n  undefined8 match_input;\n  undefined is_matched;\n  \n  if (DAT_001279ca == '\\0') {\n    hash_result = htab_find(input_2,input_1);\n    is_matched = hash_result != 0;\n  }\n  else {\n    is_matched = 0;\n    match_input = input_1;\n    htab_traverse(input_2,check_pattern_00115d70_match_0011a170,&match_input);\n  }\n  return is_matched;\n}\n\n",
            "called": [
                "htab_find",
                "htab_traverse",
                "FUN_0011a170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_0010554f",
                "FUN_001082df",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_pattern_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_add_to_data_array_00109be3",
                "param_1": "dataArray",
                "param_2": "element",
                "param_3": "flag",
                "uVar1": "newDataArray",
                "puVar2": "newElementAddress",
                "uVar3": "arraySize"
            },
            "code": "\nundefined8 expandAndAddToDataArray_00109be3(long dataArray,undefined8 element,undefined4 flag)\n\n{\n  undefined8 newDataArray;\n  undefined8 *newElementAddress;\n  uint arraySize;\n  \n  if (*(uint *)(dataArray + 0x2c) <= *(uint *)(dataArray + 0x28)) {\n    arraySize = *(uint *)(dataArray + 0x2c) + 10;\n    *(uint *)(dataArray + 0x2c) = arraySize;\n    newDataArray = xrealloc(*(undefined8 *)(dataArray + 0x20),(ulong)arraySize << 4);\n    *(undefined8 *)(dataArray + 0x20) = newDataArray;\n  }\n  arraySize = *(uint *)(dataArray + 0x28);\n  newElementAddress = (undefined8 *)((ulong)arraySize * 0x10 + *(long *)(dataArray + 0x20));\n  *newElementAddress = element;\n  *(undefined4 *)(newElementAddress + 1) = flag;\n  *(uint *)(dataArray + 0x28) = arraySize + 1;\n  return CONCAT71((int7)((ulong)newElementAddress >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "expand_and_add_to_data_array_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_with_length_0011a480",
                "param_1": "source",
                "param_2": "max_length",
                "__n": "length",
                "__dest": "destination"
            },
            "code": "\nvoid copyStringWithLength_0011a480(char *source,size_t max_length)\n\n{\n  size_t length;\n  void *destination;\n  \n  length = strnlen(source,max_length);\n  destination = (void *)xmalloc(length + 1);\n  *(undefined *)((long)destination + length) = 0;\n  memcpy(destination,source,length);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "memcpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_string_with_length_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "update_hash_0010e918",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "__s": "extractedItem",
                "sVar2": "param2Len",
                "sVar3": "extractedItemLen",
                "__s_00": "formattedString"
            },
            "code": "\nundefined4 updateHash_0010e918(undefined8 param1,char *param2,undefined8 param3)\n\n{\n  undefined4 uVar1;\n  char *extractedItem;\n  size_t param2Len;\n  size_t extractedItemLen;\n  char *formattedString;\n  \n  extractedItem = (char *)extract_and_free_next_item_00109b2f();\n  param2Len = strlen(param2);\n  extractedItemLen = strlen(extractedItem);\n  formattedString = (char *)xmalloc(param2Len + 0x14 + extractedItemLen);\n  sprintf(formattedString,\"%s:c=e%s,%ld\",param2,extractedItem,param3);\n  free(extractedItem);\n  uVar1 = update_hash_table_0010e2f0(param1,0x80,0,0,formattedString);\n  if ((char)uVar1 != '\\0') {\n    free(formattedString);\n  }\n  return uVar1;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "update_hash_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010ae0e",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "process_section_00116110",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "byteValue",
                "uVar2": "value2",
                "lVar3": "sectionOffset",
                "cVar6": "checkResult",
                "uVar7": "errorMessage",
                "__ptr": "bufferPtr",
                "lVar8": "loopVar",
                "uVar9": "loopVar2",
                "iVar10": "loopVar3",
                "uVar11": "loopVar4",
                "puVar12": "ptrVar",
                "lVar13": "length",
                "puVar14": "ptrVar2",
                "puVar15": "ptrVar3",
                "pvVar16": "ptrVar4",
                "uVar17": "loopVar5",
                "uVar18": "loopVar6",
                "uVar19": "loopVar7",
                "bVar20": "byteVar",
                "local_38": "sectionSize",
                "local_30": "sectionData",
                "bfd_set_section_contents": "setSectionContents",
                "xmalloc": "allocateMemory",
                "free": "releaseMemory",
                "print_and_exit_error_00119dd0": "printAndExitError",
                "bfd_get_full_section_contents": "getFullSectionContents",
                "bfd_convert_section_contents": "convertSectionContents",
                "bfd_set_section_size": "setSectionSize",
                "print_error_message_001126c0": "printErrorMessage",
                "cleanup_and_print_error_message_00108466": "cleanupAndPrintErrorMessage"
            },
            "code": "\nvoid processSection_00116110(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined byteValue;\n  undefined8 value2;\n  long sectionOffset;\n  int iVar4;\n  int iVar5;\n  char checkResult;\n  undefined8 errorMessage;\n  undefined8 *bufferPtr;\n  long loopVar;\n  ulong loopVar2;\n  int loopVar3;\n  ulong loopVar4;\n  undefined *ptrVar;\n  long length;\n  undefined8 *ptrVar2;\n  undefined8 *ptrVar3;\n  void *ptrVar4;\n  ulong loopVar5;\n  ulong loopVar6;\n  ulong loopVar7;\n  byte byteVar;\n  ulong sectionSize;\n  void *sectionData;\n  \n  byteVar = 0;\n  checkResult = check_permissions_and_patterns_00115f50(param1,param2,1);\n  if (checkResult != '\\0') {\n    return;\n  }\n  sectionSize = param2[8];\n  sectionOffset = param2[0xc];\n  if (((*(byte *)((long)param2 + 0x25) & 1) == 0) || ((*(byte *)(sectionOffset + 0x25) & 1) == 0)) {\n    length = update_permissions_00114190(*param2,0,0x80);\n    if (length == 0) {\n      return;\n    }\n    if ((*(byte *)(length + 0x29) & 1) == 0) {\n      return;\n    }\n    bufferPtr = (undefined8 *)xmalloc(sectionSize);\n    ptrVar3 = bufferPtr;\n    if (7 < sectionSize) {\n      for (loopVar6 = sectionSize >> 3; loopVar6 != 0; loopVar6 = loopVar6 - 1) {\n        *ptrVar3 = 0;\n        ptrVar3 = ptrVar3 + (ulong)byteVar * -2 + 1;\n      }\n    }\n    ptrVar2 = ptrVar3;\n    if ((sectionSize & 4) != 0) {\n      ptrVar2 = (undefined8 *)((long)ptrVar3 + (ulong)byteVar * -8 + 4);\n      *(undefined4 *)ptrVar3 = 0;\n    }\n    ptrVar3 = ptrVar2;\n    if ((sectionSize & 2) != 0) {\n      ptrVar3 = (undefined8 *)((long)ptrVar2 + (ulong)byteVar * -4 + 2);\n      *(undefined2 *)ptrVar2 = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)ptrVar3 = 0;\n    }\n    checkResult = bfd_set_section_contents(param3,sectionOffset,bufferPtr,0);\n    if (checkResult != '\\0') {\n      free(bufferPtr);\n      return;\n    }\n    DAT_00127a20 = 1;\n    printErrorMessage(0,param3,sectionOffset,0);\n    free(bufferPtr);\n    return;\n  }\n  sectionData = (void *)0x0;\n  checkResult = bfd_get_full_section_contents(param1,param2,&sectionData);\n  if ((checkResult == '\\0') ||\n     (checkResult = bfd_convert_section_contents(param1,param2,param3,&sectionData,&sectionSize),\n     loopVar3 = DAT_001278e8, checkResult == '\\0')) {\n    bfd_set_section_size(sectionOffset,0);\n    DAT_00127a20 = 1;\n    printErrorMessage(0,param1,param2,0);\n    free(sectionData);\n    return;\n  }\n  iVar4 = DAT_001264b8;\n  iVar5 = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    loopVar6 = (ulong)DAT_001278e8;\n    if (sectionSize % loopVar6 != 0) {\n      value2 = *param2;\n      errorMessage = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      printAndExitError(errorMessage,value2,loopVar3);\n    }\n    loopVar3 = DAT_001278e8 / 2;\n    loopVar4 = 0;\n    while (loopVar7 = loopVar4, iVar4 = DAT_001264b8, iVar5 = DAT_001264bc, loopVar7 < sectionSize) {\n      loopVar4 = loopVar6 + loopVar7;\n      loopVar5 = loopVar4;\n      for (loopVar2 = 0; loopVar2 < (ulong)(long)loopVar3; loopVar2 = loopVar2 + 1) {\n        loopVar5 = loopVar5 - 1;\n        ptrVar = (undefined *)(loopVar7 + loopVar2 + (long)sectionData);\n        byteValue = *ptrVar;\n        *ptrVar = *(undefined *)((long)sectionData + loopVar5);\n        *(undefined *)((long)sectionData + loopVar5) = byteValue;\n      }\n    }\n  }\n  DAT_001264b8 = iVar4;\n  DAT_001264bc = iVar5;\n  if (-1 < iVar5) {\n    loopVar6 = (ulong)DAT_00127a1c;\n    loopVar3 = (int)((ulong)param2[7] % loopVar6);\n    loopVar4 = ((long)iVar5 - (long)loopVar3) + (long)sectionData;\n    if (iVar5 < loopVar3) {\n      loopVar4 = loopVar4 + loopVar6;\n    }\n    length = (sectionSize + (long)sectionData) - loopVar4;\n    ptrVar4 = sectionData;\n    for (; loopVar4 < sectionSize + (long)sectionData; loopVar4 = loopVar4 + loopVar6) {\n      for (loopVar = 0; ((int)loopVar < iVar4 && (loopVar != length)); loopVar = loopVar + 1) {\n        *(undefined *)((long)ptrVar4 + loopVar) = *(undefined *)(loopVar4 + loopVar);\n      }\n      ptrVar4 = (void *)((long)ptrVar4 + loopVar);\n      length = length - loopVar6;\n    }\n    sectionSize = ((((loopVar6 - 1) + sectionSize) - (long)iVar5) / loopVar6) * (long)iVar4;\n    loopVar6 = *(ulong *)(sectionOffset + 0x38) / loopVar6;\n    *(ulong *)(sectionOffset + 0x38) = loopVar6;\n    if (iVar5 < loopVar3) {\n      *(ulong *)(sectionOffset + 0x38) = loopVar6 + 1;\n      checkResult = bfd_set_section_contents(param3,sectionOffset,sectionData,0,sectionSize);\n      if (checkResult == '\\0') {\n        cleanupAndPrintErrorMessage();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  checkResult = bfd_set_section_contents(param3,sectionOffset,sectionData,0,sectionSize);\n  if (checkResult == '\\0') {\n    cleanupAndPrintErrorMessage();\n    return;\n  }\nLAB_001161d8:\n  free(sectionData);\n  return;\n}\n\n",
            "called": [
                "FUN_001083de",
                "bfd_get_full_section_contents",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "free",
                "xmalloc",
                "FUN_00115f50",
                "FUN_001126c0",
                "FUN_00108466",
                "FUN_00114190",
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fflush": "flushOutputStream",
                "fprintf": "printToErrorStream"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorFlag != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_001275e0,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "end_debug_block_0010bf20",
                "param_1": "blockPtr",
                "param_2": "newBlockPtr",
                "param_3": "unusedPtr",
                "param_4": "returnVal",
                "lVar1": "currentBlockPtr",
                "uVar2": "errorMessage",
                "pcVar3": "errorString",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endDebugBlock_0010bf20(long blockPtr,undefined8 newBlockPtr,undefined8 unusedPtr,undefined8 returnVal)\n\n{\n  long currentBlockPtr;\n  undefined8 errorMessage;\n  char *errorString;\n  undefined returnValue [16];\n  \n  if ((*(long *)(blockPtr + 8) == 0) || (currentBlockPtr = *(long *)(blockPtr + 0x20), currentBlockPtr == 0)) {\n    errorString = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlockPtr + 8) != 0) {\n      *(undefined8 *)(currentBlockPtr + 0x20) = newBlockPtr;\n      errorMessage = CONCAT71((int7)((ulong)currentBlockPtr >> 8),1);\n      *(long *)(blockPtr + 0x20) = *(long *)(currentBlockPtr + 8);\n      goto LAB_0010bf84;\n    }\n    errorString = \"debug_end_block: attempt to close top level block\";\n  }\n  errorMessage = dcgettext(0,errorString,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010bf84:\n  returnValue._8_8_ = returnVal;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "end_debug_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_binary_data_0010c95e",
                "param_1": "binaryFileData",
                "param_2": "byteArray",
                "param_3": "dataStructure",
                "bVar1": "currentByte",
                "bVar2": "nextByte",
                "pbVar3": "bytePointer",
                "bVar4": "isSigned",
                "bVar5": "isChar",
                "bVar6": "isUnsigned",
                "cVar7": "returnStatus",
                "uVar8": "integerValue",
                "pbVar9": "nextBytePointer",
                "lVar10": "dataType",
                "uVar11": "returnCode",
                "pcVar12": "integerType",
                "sVar13": "stringLength",
                "uVar14": "lengthValue",
                "__ptr": "typeString",
                "lVar15": "dataPointer",
                "puVar16": "unsignedValue",
                "puVar17": "charValue",
                "ppcVar18": "stringData",
                "pcVar19": "typeSpecifier",
                "local_49": "charFlag",
                "local_48": "lengthValue",
                "local_40": "stringDataArray"
            },
            "code": "\nundefined8 parseBinaryData_0010c95e(undefined8 *binaryFileData,byte **byteArray,long *dataStructure)\n\n{\n  byte currentByte;\n  byte nextByte;\n  byte *bytePointer;\n  bool isSigned;\n  bool isChar;\n  bool isUnsigned;\n  char returnStatus;\n  uint integerValue;\n  byte *nextBytePointer;\n  long dataType;\n  undefined8 returnCode;\n  char *integerType;\n  size_t stringLength;\n  ulong lengthValue;\n  void *typeString;\n  long dataPointer;\n  ulong *unsignedValue;\n  undefined *charValue;\n  char **stringData;\n  char *typeSpecifier;\n  byte *pnextByte0;\n  undefined charFlag;\n  ulong lengthValue;\n  char *stringDataArray [2];\n  \n  while( true ) {\n    pnextByte0 = *byteArray;\n    currentByte = *pnextByte0;\n    if ('T' < (char)currentByte) break;\n    if ((char)currentByte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(currentByte) {\n    case 0x41:\n      dataPointer = 0;\n      bytePointer = pnextByte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byteArray = pnextByte0 + 1;\n      returnStatus = parseBinaryData_0010c95e(binaryFileData,byteArray,dataStructure);\n      if (returnStatus == '\\0') {\n        return 0;\n      }\n      if (dataStructure == (long *)0x0) {\n        return 1;\n      }\n      dataPointer = initialize_data_structure_00113b71(*dataStructure);\n      *dataStructure = dataPointer;\n      return 1;\n    case 0x46:\n      *byteArray = pnextByte0 + 1;\n      if (dataStructure == (long *)0x0) {\n        unsignedValue = (ulong *)0x0;\n        stringData = (char **)0x0;\n      }\n      else {\n        unsignedValue = &lengthValue;\n        stringData = stringDataArray;\n      }\n      returnStatus = parse_and_add_data_0010d882(binaryFileData,byteArray,stringData,unsignedValue);\n      if (returnStatus == '\\0') {\n        return 0;\n      }\n      if (**byteArray == 0x5f) {\n        *byteArray = *byteArray + 1;\n        returnStatus = parseBinaryData_0010c95e(binaryFileData,byteArray,dataStructure);\n        if (returnStatus == '\\0') {\n          return 0;\n        }\n        if (dataStructure == (long *)0x0) {\n          return 1;\n        }\n        dataPointer = initialize_data_structure_00113ce0(*dataStructure,stringDataArray[0],lengthValue & 0xff);\n        *dataStructure = dataPointer;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byteArray = pnextByte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      charFlag = 0;\n      stringDataArray[0] = (char *)0x0;\n      lengthValue = 0;\n      *byteArray = pnextByte0 + 1;\n      if (((&_sch_istable)[(ulong)pnextByte0[1] * 2] & 4) == 0) {\n        if (pnextByte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        stringData = stringDataArray;\n        if (dataStructure == (long *)0x0) {\n          stringData = (char **)0x0;\n        }\n        returnStatus = decode_and_extract_data_0010d559(binaryFileData,byteArray,stringData);\n        if (returnStatus == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        integerValue = extract_integer_from_byte_array_00108e76(byteArray);\n        bytePointer = *byteArray;\n        stringLength = strlen((char *)bytePointer);\n        if (stringLength < integerValue) goto switchD_0010cdf9_caseD_60;\n        *byteArray = bytePointer + integerValue;\n        if ((dataStructure != (long *)0x0) &&\n           (stringDataArray[0] = (char *)find_string_entry_0010afd5(*binaryFileData,binaryFileData[1],bytePointer,integerValue,9),\n           stringDataArray[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      nextByte = **byteArray;\n      if (currentByte == 0x4d) {\n        if ((nextByte == 0x43) || (nextByte == 0x56)) {\n          *byteArray = *byteArray + 1;\n        }\n        if (**byteArray != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byteArray = *byteArray + 1;\n        if (dataStructure == (long *)0x0) {\n          charValue = (undefined *)0x0;\n          unsignedValue = (ulong *)0x0;\n        }\n        else {\n          charValue = &charFlag;\n          unsignedValue = &lengthValue;\n        }\n        returnStatus = parse_and_add_data_0010d882(binaryFileData,byteArray,unsignedValue,charValue);\n        if (returnStatus == '\\0') {\n          return 0;\n        }\n      }\n      if (**byteArray == 0x5f) {\n        *byteArray = *byteArray + 1;\n        returnStatus = parseBinaryData_0010c95e(binaryFileData,byteArray,dataStructure);\n        if (returnStatus == '\\0') {\n          return 0;\n        }\n        if (dataStructure == (long *)0x0) {\n          return 1;\n        }\n        if (currentByte != 0x4d) {\n          dataPointer = create_data_structure_00113bfa(stringDataArray[0],*dataStructure);\n          *dataStructure = dataPointer;\n          return 1;\n        }\n        dataPointer = initialize_and_store_data_structure_00113b98(*dataStructure,stringDataArray[0],lengthValue,charFlag);\n        *dataStructure = dataPointer;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      returnCode = decode_and_extract_data_0010d559(binaryFileData,byteArray,dataStructure);\n      return returnCode;\n    case 0x52:\n      *byteArray = pnextByte0 + 1;\n      returnStatus = parseBinaryData_0010c95e(binaryFileData,byteArray,dataStructure);\n      if (returnStatus == '\\0') {\n        return 0;\n      }\n      if (dataStructure == (long *)0x0) {\n        return 1;\n      }\n      dataPointer = initialize_data_structure_00113cb9(*dataStructure);\n      *dataStructure = dataPointer;\n      return 1;\n    case 0x54:\n      *byteArray = pnextByte0 + 1;\n      returnStatus = parse_integer_from_string_00108ea1(byteArray,&lengthValue);\n      if (returnStatus != '\\0') {\n        if ((uint)lengthValue < *(uint *)(binaryFileData + 5)) {\n          stringDataArray[0] = *(char **)((lengthValue & 0xffffffff) * 0x10 + binaryFileData[4]);\n          returnStatus = parseBinaryData_0010c95e(binaryFileData,stringDataArray,dataStructure);\n          if (returnStatus == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (currentByte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byteArray = pnextByte0 + 1;\n    returnStatus = parseBinaryData_0010c95e(binaryFileData,byteArray,dataStructure);\n    if (returnStatus == '\\0') {\n      return 0;\n    }\n    if (dataStructure == (long *)0x0) {\n      return 1;\n    }\n    dataPointer = initialize_or_get_data_structure_00113d3a(*dataStructure);\n    *dataStructure = dataPointer;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  isUnsigned = false;\n  isSigned = false;\n  returnStatus = '\\0';\n  isChar = false;\n  do {\n    bytePointer = *byteArray;\n    currentByte = *bytePointer;\n    if (currentByte == 0x55) {\n      returnStatus = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)currentByte) {\n      if (currentByte == 0x56) {\n        isUnsigned = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)currentByte) goto switchD_0010cdf9_caseD_60;\n      if ((char)currentByte < '_') goto LAB_0010cdfb;\n      switch(currentByte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (dataStructure == (long *)0x0) {\nLAB_0010d0aa:\n          *byteArray = bytePointer + 1;\n          return 1;\n        }\n        dataPointer = find_named_type_0010914e(*binaryFileData,&DAT_00120436);\n        *dataStructure = dataPointer;\n        if (dataPointer == 0) {\n          dataPointer = initialize_data_structure_00112904(6,4);\n          *dataStructure = dataPointer;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (dataStructure == (long *)0x0) goto LAB_0010d0aa;\n        typeSpecifier = \"unsigned char\";\n        if ((returnStatus == '\\0') && (typeSpecifier = \"char\", isSigned)) {\n          typeSpecifier = \"signed char\";\n        }\n        dataPointer = find_named_type_0010914e(*binaryFileData,typeSpecifier);\n        *dataStructure = dataPointer;\n        if (dataPointer == 0) {\n          dataPointer = update_data_structure_00113dfe(1,returnStatus);\n          *dataStructure = dataPointer;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (dataStructure == (long *)0x0) goto LAB_0010d0aa;\n        typeSpecifier = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (dataStructure == (long *)0x0) goto LAB_0010d0aa;\n        dataPointer = find_named_type_0010914e(*binaryFileData,\"float\");\n        *dataStructure = dataPointer;\n        if (dataPointer == 0) {\n          dataPointer = initialize_data_structure_00113df2(4);\n          *dataStructure = dataPointer;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (dataStructure == (long *)0x0) goto LAB_0010d0aa;\n        typeSpecifier = \"unsigned int\";\n        integerType = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (dataStructure == (long *)0x0) goto LAB_0010d0aa;\n        typeSpecifier = \"long unsigned int\";\n        integerType = \"long int\";\nLAB_0010ced2:\n        if (returnStatus == '\\0') {\n          typeSpecifier = integerType;\n        }\n        dataPointer = find_named_type_0010914e(*binaryFileData,typeSpecifier);\n        *dataStructure = dataPointer;\n        if (dataPointer == 0) {\n          dataPointer = update_data_structure_00113dfe(4,returnStatus);\n          *dataStructure = dataPointer;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        typeSpecifier = \"long double\";\n        if (dataStructure == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        dataPointer = find_named_type_0010914e(*binaryFileData,typeSpecifier);\n        *dataStructure = dataPointer;\n        if (dataPointer == 0) {\n          dataPointer = initialize_data_structure_00113df2(8);\n          *dataStructure = dataPointer;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (dataStructure == (long *)0x0) goto LAB_0010d0aa;\n        typeSpecifier = \"short unsigned int\";\n        if (returnStatus == '\\0') {\n          typeSpecifier = \"short int\";\n        }\n        dataPointer = find_named_type_0010914e(*binaryFileData,typeSpecifier);\n        *dataStructure = dataPointer;\n        if (dataPointer == 0) {\n          dataPointer = update_data_structure_00113dfe(2,returnStatus);\n          *dataStructure = dataPointer;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        stringData = stringDataArray;\n        if (dataStructure == (long *)0x0) {\n          stringData = (char **)0x0;\n        }\n        returnStatus = parse_and_extract_data_0010d21c(binaryFileData,byteArray,stringData);\n        if (returnStatus == '\\0') {\n          return 0;\n        }\n        if (dataStructure == (long *)0x0) {\n          return 1;\n        }\n        stringLength = strlen(stringDataArray[0]);\n        dataPointer = find_string_entry_0010afd5(*binaryFileData,binaryFileData[1],stringDataArray[0],stringLength & 0xffffffff,9);\n        *dataStructure = dataPointer;\n        free(stringDataArray[0]);\n        dataPointer = *dataStructure;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (dataStructure == (long *)0x0) goto LAB_0010d0aa;\n        dataPointer = find_named_type_0010914e(*binaryFileData,&DAT_00120495);\n        *dataStructure = dataPointer;\n        if (dataPointer == 0) {\n          dataPointer = initialize_data_structure_00113e17();\n          *dataStructure = dataPointer;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (dataStructure == (long *)0x0) goto LAB_0010d0aa;\n        dataPointer = find_named_type_0010914e(*binaryFileData,\"__wchar_t\");\n        *dataStructure = dataPointer;\n        if (dataPointer == 0) {\n          dataPointer = update_data_structure_00113dfe(2,1);\n          *dataStructure = dataPointer;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (dataStructure == (long *)0x0) goto LAB_0010d0aa;\n        typeSpecifier = \"long long unsigned int\";\n        if (returnStatus == '\\0') {\n          typeSpecifier = \"long long int\";\n        }\n        dataPointer = find_named_type_0010914e(*binaryFileData,typeSpecifier);\n        *dataStructure = dataPointer;\n        if (dataPointer == 0) {\n          dataPointer = update_data_structure_00113dfe(8,returnStatus);\n          *dataStructure = dataPointer;\n        }\n      }\n      *byteArray = *byteArray + 1;\n      goto LAB_0010d1de;\n    }\n    if (currentByte == 0x43) {\n      isChar = true;\n      goto LAB_0010cd84;\n    }\n    if (currentByte != 0x53) goto LAB_0010cdc5;\n    isSigned = true;\nLAB_0010cd84:\n    *byteArray = bytePointer + 1;\n  } while( true );\nLAB_0010ca26:\n  nextBytePointer = bytePointer + 1;\n  *byteArray = nextBytePointer;\n  currentByte = *nextBytePointer;\n  if (currentByte == 0) goto switchD_0010cdf9_caseD_60;\n  if (currentByte == 0x5f) {\n    *byteArray = bytePointer + 2;\n    returnStatus = parseBinaryData_0010c95e(binaryFileData,byteArray,dataStructure);\n    if (returnStatus == '\\0') {\n      return 0;\n    }\n    if (dataStructure == (long *)0x0) {\n      return 1;\n    }\n    dataType = find_named_type_0010914e(*binaryFileData,\"int\");\n    if (dataType == 0) {\n      dataType = update_data_structure_00113dfe(4,0);\n    }\n    dataPointer = initialize_and_store_data_00113c43(*dataStructure,dataType,0,dataPointer,0);\n    *dataStructure = dataPointer;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  dataPointer = dataPointer * 10 + (long)((char)currentByte + -0x30);\n  bytePointer = nextBytePointer;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)currentByte < ':') {\n    if ((char)currentByte < '0') {\n      if (currentByte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message_0010911f(pnextByte0);\n      if (dataStructure == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((currentByte != 0x47) || (*byteArray = bytePointer + 1, ((&_sch_istable)[(ulong)bytePointer[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnextByte0 = *byteArray;\n  integerValue = extract_integer_from_byte_array_00108e76(byteArray);\n  bytePointer = *byteArray;\n  stringLength = strlen((char *)bytePointer);\n  lengthValue = (ulong)integerValue;\n  if (lengthValue <= stringLength) {\n    *byteArray = bytePointer + lengthValue;\n    if (dataStructure == (long *)0x0) {\n      return 1;\n    }\n    typeString = (void *)copy_and_terminate_string_00109a0b(bytePointer,lengthValue);\n    dataPointer = find_named_type_0010914e(*binaryFileData,typeString);\n    *dataStructure = dataPointer;\n    free(typeString);\n    if (*dataStructure == 0) {\n      dataPointer = find_string_entry_0010afd5(*binaryFileData,binaryFileData[1],bytePointer,(int)*byteArray - (int)bytePointer,0);\n      *dataStructure = dataPointer;\njoined_r0x0010d1d8:\n      if (dataPointer == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (isChar) {\n      dataPointer = initialize_data_structure_00113b71(*dataStructure);\n      *dataStructure = dataPointer;\n    }\n    if (isUnsigned) {\n      dataPointer = initialize_data_structure_00113b4a(*dataStructure);\n      *dataStructure = dataPointer;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message_0010911f(pnextByte0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113b98",
                "FUN_0010c95e",
                "strlen",
                "FUN_00113d3a",
                "FUN_0010914e",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "FUN_00113b71",
                "FUN_0010911f",
                "FUN_00113b4a",
                "FUN_0010d559",
                "FUN_00113bfa",
                "FUN_00108e76",
                "FUN_0010d882",
                "free",
                "FUN_0010afd5",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "FUN_00113e17",
                "FUN_00108ea1",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010c95e",
                "FUN_00113e5e",
                "FUN_0010d21c",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "parse_binary_data_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_modified_filename_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = update_permissions_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = update_permissions_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = update_permissions_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = improve_debugging_information_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUNC_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUNC_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_memory_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_memory_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_and_initialize_data_structure_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = initialize_or_record_debug_info_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_debug_block_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_debug_block_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_and_initialize_data_structure_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debug_function_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = initialize_section_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_and_exit_error_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_permissions_and_patterns_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = initialize_section_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_and_exit_error_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = process_binary_data_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)extract_build_attributes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_0010554f",
                "xmalloc",
                "fopen",
                "bfd_get_full_section_contents",
                "fclose",
                "bfd_map_over_sections",
                "__errno_location",
                "fwrite",
                "bfd_make_section_with_flags",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "FUN_00114190",
                "bfd_set_section_size",
                "bfd_create_gnu_debuglink_section",
                "FUN_00115530",
                "bfd_set_format",
                "FUN_00113fb0",
                "FUN_0010551d",
                "FUN_00115f30",
                "dcgettext",
                "bfd_get_arch",
                "FUN_001163d0",
                "bfd_get_section_by_name",
                "bfd_malloc_and_get_section",
                "free",
                "FUN_00105828"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_time_0011a350",
                "param_1": "filePath",
                "param_2": "dataPtr",
                "iVar1": "result",
                "piVar2": "errorPtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMessage",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4",
                "local_28": "filePathPtr",
                "uStack_24": "filePathPtr2",
                "uStack_20": "filePathPtr3",
                "uStack_1c": "filePathPtr4"
            },
            "code": "\nvoid setTime_0011a350(char *filePath,long dataPtr)\n\n{\n  int result;\n  int *errorPtr;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 filePathPtr;\n  undefined4 filePathPtr2;\n  undefined4 filePathPtr3;\n  undefined4 filePathPtr4;\n  \n  filePathPtr = *(undefined4 *)(dataPtr + 0x58);\n  filePathPtr2 = *(undefined4 *)(dataPtr + 0x5c);\n  filePathPtr3 = *(undefined4 *)(dataPtr + 0x60);\n  filePathPtr4 = *(undefined4 *)(dataPtr + 100);\n  timeSpec1 = *(undefined4 *)(dataPtr + 0x48);\n  timeSpec2 = *(undefined4 *)(dataPtr + 0x4c);\n  timeSpec3 = *(undefined4 *)(dataPtr + 0x50);\n  timeSpec4 = *(undefined4 *)(dataPtr + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timeSpec1,0);\n  if (result != 0) {\n    errorPtr = __errno_location();\n    errorMessage = strerror(*errorPtr);\n    translatedMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00119ed0(translatedMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010882c",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "set_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_0011a110",
                "param_1": "errorMessage",
                "iVar1": "error",
                "uVar2": "errorMsg",
                "in_R10": "unknownParam",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "dcgettext": "getLocalizedMessage",
                "bfd_get_error": "getBinaryError",
                "bfd_errmsg": "getBinaryErrorMessage",
                "fflush": "flushOutput"
            },
            "code": "\n\n\nvoid printError_0011a110(long errorMessage)\n\n{\n  int error;\n  undefined8 errorMsg;\n  undefined8 unknownParam;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMsg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMsg = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (errorMessage != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_001275e0,errorMessage,errorMsg,unknownParam);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_001275e0,errorMsg,unknownParam);\n  return;\n}\n\n",
            "called": [
                "FUN_0010871c",
                "bfd_errmsg",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00119f70",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "update_hash_table_0010e2f0",
                "param_1": "hash_table",
                "param_2": "value",
                "param_3": "size",
                "param_4": "param",
                "param_5": "key",
                "lVar1": "temp1",
                "uVar2": "error_code",
                "lVar3": "temp2",
                "uVar4": "error_msg",
                "uVar5": "error_string",
                "sVar6": "key_length",
                "lVar7": "hash_value",
                "local_44": "local_value",
                "uStack_40": "unknown1",
                "uStack_3f": "unknown2",
                "uStack_3e": "unknown3",
                "local_3c": "local_array"
            },
            "code": "\nundefined8\nupdate_hash_table_0010e2f0(long *hash_table,undefined value,int size,undefined8 param,char *key)\n\n{\n  long temp1;\n  undefined4 error_code;\n  long temp2;\n  undefined8 error_msg;\n  undefined8 error_string;\n  size_t key_length;\n  long hash_value;\n  undefined4 local_value;\n  undefined unknown1;\n  undefined unknown2;\n  undefined2 unknown3;\n  undefined4 local_array [3];\n  \n  if (key == (char *)0x0) {\n    hash_value = 0;\n  }\n  else {\n    temp2 = bfd_hash_lookup(hash_table + 7,key,1,1);\n    if (temp2 == 0) {\n      error_code = bfd_get_error();\n      error_msg = bfd_errmsg(error_code);\n      error_string = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_message_00119ed0(error_string,error_msg);\n      return 0;\n    }\n    hash_value = *(long *)(temp2 + 0x20);\n    if (hash_value == -1) {\n      hash_value = hash_table[6];\n      temp1 = hash_table[5];\n      *(long *)(temp2 + 0x20) = hash_value;\n      if (temp1 == 0) {\n        hash_table[4] = temp2;\n      }\n      else {\n        *(long *)(temp1 + 0x18) = temp2;\n      }\n      hash_table[5] = temp2;\n      key_length = strlen(key);\n      hash_table[6] = hash_value + 1 + key_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(hash_value,&local_value);\n  unknown2 = 0;\n  unknown1 = value;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)size,&unknown3);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(param,local_array);\n  if ((ulong)hash_table[3] < hash_table[2] + 0xcU) {\n    hash_table[3] = hash_table[3] * 2;\n    hash_value = xrealloc(hash_table[1]);\n    hash_table[1] = hash_value;\n  }\n  hash_value = hash_table[2];\n  temp2 = hash_table[1];\n  *(ulong *)(temp2 + hash_value) = CONCAT26(unknown3,CONCAT15(unknown2,CONCAT14(unknown1,local_value)));\n  *(undefined4 *)(temp2 + 8 + hash_value) = local_array[0];\n  hash_table[2] = hash_table[2] + 0xc;\n  return CONCAT71((int7)((ulong)hash_value >> 8),1);\n}\n\n",
            "called": [
                "xrealloc",
                "bfd_errmsg",
                "strlen",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e8a9",
                "FUN_0010e5db",
                "FUN_0010e439",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_0010ed2c",
                "FUN_0010ebb0",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_0010edb4",
                "FUN_0010e6a8",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010eafe"
            ],
            "imported": false,
            "current_name": "update_hash_table_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "input_string",
                "iVar1": "compare_result",
                "uVar2": "error_message",
                "pcVar3": "comma_ptr",
                "pcVar4": "next_token",
                "sVar5": "token_length",
                "iVar6": "token_length_int",
                "uVar7": "section_flags",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *input_string,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  int compare_result;\n  undefined8 error_message;\n  char *comma_ptr;\n  char *next_token;\n  size_t token_length;\n  int token_length_int;\n  uint section_flags;\n  undefined result [16];\n  \n  section_flags = 0;\n  do {\n    comma_ptr = strchr(input_string,0x2c);\n    if (comma_ptr == (char *)0x0) {\n      token_length = strlen(input_string);\n      token_length_int = (int)token_length;\n      next_token = (char *)0x0;\n    }\n    else {\n      next_token = comma_ptr + 1;\n      token_length_int = (int)comma_ptr - (int)input_string;\n    }\n    token_length = (size_t)token_length_int;\n    compare_result = strncasecmp(\"alloc\",input_string,token_length);\n    if (compare_result == 0) {\n      section_flags = section_flags | 1;\n    }\n    else {\n      compare_result = strncasecmp(\"load\",input_string,token_length);\n      if (compare_result == 0) {\n        section_flags = section_flags | 2;\n      }\n      else {\n        compare_result = strncasecmp(\"noload\",input_string,token_length);\n        if (compare_result == 0) {\n          section_flags = section_flags | 0x200;\n        }\n        else {\n          compare_result = strncasecmp(\"readonly\",input_string,token_length);\n          if (compare_result == 0) {\n            section_flags = section_flags | 8;\n          }\n          else {\n            compare_result = strncasecmp(\"debug\",input_string,token_length);\n            if (compare_result == 0) {\n              section_flags = section_flags | 0x2000;\n            }\n            else {\n              compare_result = strncasecmp(\"code\",input_string,token_length);\n              if (compare_result == 0) {\n                section_flags = section_flags | 0x10;\n              }\n              else {\n                compare_result = strncasecmp(\"data\",input_string,token_length);\n                if (compare_result == 0) {\n                  section_flags = section_flags | 0x20;\n                }\n                else {\n                  compare_result = strncasecmp(\"rom\",input_string,token_length);\n                  if (compare_result == 0) {\n                    section_flags = section_flags | 0x40;\n                  }\n                  else {\n                    compare_result = strncasecmp(\"exclude\",input_string,token_length);\n                    if (compare_result == 0) {\n                      section_flags = section_flags | 0x8000;\n                    }\n                    else {\n                      compare_result = strncasecmp(\"share\",input_string,token_length);\n                      if (compare_result == 0) {\n                        section_flags = section_flags | 0x8000000;\n                      }\n                      else {\n                        compare_result = strncasecmp(\"contents\",input_string,token_length);\n                        if (compare_result == 0) {\n                          section_flags = section_flags | 0x100;\n                        }\n                        else {\n                          compare_result = strncasecmp(\"merge\",input_string,token_length);\n                          if (compare_result == 0) {\n                            section_flags = section_flags | 0x800000;\n                          }\n                          else {\n                            compare_result = strncasecmp(\"strings\",input_string,token_length);\n                            if (compare_result != 0) {\n                              comma_ptr = (char *)xmalloc((long)(token_length_int + 1));\n                              strncpy(comma_ptr,input_string,token_length);\n                              comma_ptr[token_length] = '\\0';\n                              error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_00119ed0(error_message,comma_ptr);\n                              error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_and_exit_error_00119dd0(error_message,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            section_flags = section_flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    input_string = next_token;\n  } while (next_token != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = section_flags;\n  result._8_8_ = param_4;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_modified_filename_001125fa",
                "param_1": "parameters",
                "uVar1": "resultLength",
                "ppcVar2": "archiveFileName",
                "sVar3": "archiveNameLength",
                "sVar4": "originalFilenameLength",
                "__s": "modifiedFilename"
            },
            "code": "\nchar * getModifiedFilename_001125fa(char **parameters)\n\n{\n  ulong resultLength;\n  char **archiveFileName;\n  size_t archiveNameLength;\n  size_t originalFilenameLength;\n  char *modifiedFilename;\n  \n  if (parameters == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archiveFileName = (char **)parameters[0x1d];\n  modifiedFilename = *parameters;\n  if ((archiveFileName != (char **)0x0) && ((*(byte *)((long)archiveFileName + 0x49) & 0x10) == 0)) {\n    archiveNameLength = strlen(*archiveFileName);\n    originalFilenameLength = strlen(modifiedFilename);\n    resultLength = archiveNameLength + 3 + originalFilenameLength;\n    if (DAT_00127a38 < resultLength) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (resultLength >> 1) + resultLength;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)parameters[0x1d],*parameters);\n    modifiedFilename = DAT_00127a30;\n  }\n  return modifiedFilename;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_00107976",
                "FUN_001152b6",
                "FUN_001126c0",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "get_modified_filename_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "initialize_00108f05"
            },
            "code": "\nundefined initialize_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "initialize_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "cleanup_memory_00108863",
                "puVar1": "currentBlock",
                "puVar2": "nextBlock"
            },
            "code": "\nvoid cleanupMemory_00108863(void)\n\n{\n  undefined4 *currentBlock;\n  undefined4 *nextBlock;\n  \n  currentBlock = (undefined4 *)&DAT_00127720;\n  do {\n    nextBlock = currentBlock + 6;\n    free(*(void **)(currentBlock + 4));\n    *(undefined8 *)(currentBlock + 4) = 0;\n    currentBlock = nextBlock;\n  } while (nextBlock != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "cleanup_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_function_00104020"
            },
            "code": "\nvoid executeFunction_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "param_1": "source",
                "param_2": "filename",
                "iVar1": "cmp_result",
                "uVar2": "result",
                "puVar3": "current_node",
                "puVar4": "previous_node",
                "lVar5": "counter",
                "puVar6": "head_node",
                "pcVar7": "default_filename",
                "puVar8": "new_node",
                "bVar9": "dummy_byte"
            },
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source,char *filename)\n\n{\n  int cmp_result;\n  undefined8 result;\n  undefined8 *current_node;\n  undefined8 *previous_node;\n  long counter;\n  undefined8 *head_node;\n  char *default_filename;\n  undefined8 *new_node;\n  byte dummy_byte;\n  \n  dummy_byte = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (*(long *)(source + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_node = *(undefined8 **)(*(long *)(source + 8) + 8); current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      cmp_result = filename_cmp(current_node[1],default_filename);\n      if (cmp_result == 0) goto LAB_00108fad;\n    }\n    current_node = (undefined8 *)xmalloc(0x18);\n    head_node = *(undefined8 **)(source + 0x10);\n    new_node = current_node;\n    for (counter = 6; counter != 0; counter = counter + -1) {\n      *(undefined4 *)new_node = 0;\n      new_node = (undefined8 *)((long)new_node + (ulong)dummy_byte * -8 + 4);\n    }\n    current_node[1] = default_filename;\n    new_node = (undefined8 *)*head_node;\n    while (previous_node = new_node, previous_node != (undefined8 *)0x0) {\n      head_node = previous_node;\n      new_node = (undefined8 *)*previous_node;\n    }\n    *head_node = current_node;\nLAB_00108fad:\n    *(undefined8 **)(source + 0x10) = current_node;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_start_source_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "free",
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "update_permissions_00114190",
                "param_1": "inputArray",
                "param_2": "isExactMatch",
                "param_3": "permissions",
                "uVar1": "permissionMask",
                "plVar2": "currentArrayElement",
                "pplVar3": "prevArrayElement",
                "iVar4": "comparisonResult",
                "uVar5": "errorString",
                "pplVar6": "currentElement",
                "pplVar7": "prevElement",
                "pplVar8": "nextElement"
            },
            "code": "\nlong ** updatePermissions_00114190(long *inputArray,char isExactMatch,uint permissions)\n\n{\n  uint permissionMask;\n  long *currentArrayElement;\n  long **prevArrayElement;\n  int comparisonResult;\n  undefined8 errorString;\n  long **currentElement;\n  long **prevElement;\n  long **nextElement;\n  \n  prevElement = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (isExactMatch == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (isExactMatch == '\\0') {\n    if ((permissions & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      currentElement = (long **)*prevElement;\n      if (currentElement == (long **)0x0) {\n        return (long **)0x0;\n      }\n      prevElement = (long **)0x0;\n    }\n    else {\n      currentArrayElement = DAT_001278e0[1];\n      if (*(char *)currentArrayElement == '!') {\n        comparisonResult = fnmatch((char *)((long)currentArrayElement + 1),(char *)inputArray,0);\n        currentElement = prevElement;\n        if (comparisonResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparisonResult = fnmatch((char *)currentArrayElement,(char *)inputArray,0);\n      if (comparisonResult != 0) goto LAB_001141e5;\n      currentElement = (long **)*prevElement;\n      if (currentElement == (long **)0x0) goto LAB_00114245;\n    }\n    if ((permissions & *(uint *)((long)currentElement + 0x14)) != 0) {\n      currentArrayElement = currentElement[1];\n      if (*(char *)currentArrayElement == '!') {\n        comparisonResult = fnmatch((char *)((long)currentArrayElement + 1),(char *)inputArray,0);\n        if (comparisonResult == 0) {\nLAB_0011438e:\n          *(undefined *)(currentElement + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparisonResult = fnmatch((char *)currentArrayElement,(char *)inputArray,0);\n        if ((prevElement == (long **)0x0) && (comparisonResult == 0)) {\n          nextElement = (long **)*currentElement;\n          prevElement = currentElement;\n          if (nextElement == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextElement = (long **)*currentElement;\n    currentElement = prevElement;\n    if (nextElement != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparisonResult = strcmp((char *)DAT_001278e0[1],(char *)inputArray);\n    if (comparisonResult == 0) {\nLAB_001143cd:\n      permissionMask = *(uint *)((long)prevElement + 0x14);\n      if ((((permissionMask & 1) != 0) && ((permissions & 2) != 0)) ||\n         (((permissions & 1) != 0 && ((permissionMask & 2) != 0)))) {\n        errorString = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_and_exit_error_00119dd0(errorString,inputArray);\n      }\n      if ((((permissionMask & 8) != 0) && ((permissions & 0x10) != 0)) || ((permissions & 0x18) == 0x18)) {\n        errorString = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_and_exit_error_00119dd0(errorString,inputArray);\n      }\n      if ((((permissionMask & 0x20) == 0) || ((permissions & 0x40) == 0)) && ((permissions & 0x60) != 0x60)) {\n        *(uint *)((long)prevElement + 0x14) = permissionMask | permissions;\n        return prevElement;\n      }\n      errorString = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_and_exit_error_00119dd0(errorString,inputArray);\n    }\n    prevElement = (long **)*prevElement;\n    if (prevElement == (long **)0x0) goto LAB_001142a9;\n    comparisonResult = strcmp((char *)prevElement[1],(char *)inputArray);\n    if (comparisonResult == 0) goto LAB_001143cd;\n    nextElement = (long **)*prevElement;\n    currentElement = (long **)0x0;\n    if (nextElement == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      prevElement = currentElement;\n      if (isExactMatch == '\\0') {\n        while (currentElement = nextElement, prevArrayElement = prevElement, nextElement = currentElement,\n              (permissions & *(uint *)((long)currentElement + 0x14)) != 0) {\n          currentArrayElement = currentElement[1];\n          if (*(char *)currentArrayElement == '!') {\n            comparisonResult = fnmatch((char *)((long)currentArrayElement + 1),(char *)inputArray,0);\n            if (comparisonResult == 0) goto LAB_0011438e;\n            nextElement = (long **)*currentElement;\n            if ((long **)*currentElement == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparisonResult = fnmatch((char *)currentArrayElement,(char *)inputArray,0);\n            if ((prevElement == (long **)0x0) && (comparisonResult == 0)) {\n              prevElement = currentElement;\n              nextElement = (long **)*currentElement;\n              if ((long **)*currentElement == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextElement = (long **)*currentElement;\n              if ((long **)*currentElement == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparisonResult = strcmp((char *)nextElement[1],(char *)inputArray);\n        prevArrayElement = currentElement;\n        prevElement = nextElement;\n        if (comparisonResult == 0) goto LAB_001143cd;\n      }\n      currentElement = prevArrayElement;\n      nextElement = (long **)*nextElement;\n      prevElement = currentElement;\n    } while (nextElement != (long **)0x0);\nLAB_001142a1:\n    if (isExactMatch != '\\0') {\nLAB_001142a9:\n      currentElement = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(currentElement + 3) = (undefined  [16])0x0;\n      *(undefined *)(currentElement + 2) = 0;\n      *(uint *)((long)currentElement + 0x14) = permissions;\n      currentElement[5] = (long *)0x0;\n      prevElement = currentElement;\n      *currentElement = (long *)DAT_001278e0;\n      DAT_001278e0 = prevElement;\n      currentElement[1] = inputArray;\n      return currentElement;\n    }\n  }\nLAB_00114212:\n  if (prevElement == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(prevElement + 2) = 1;\n  return prevElement;\n}\n\n",
            "called": [
                "fnmatch",
                "strcmp",
                "FUN_00119dd0",
                "FUN_00104bba",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00114c20",
                "FUN_00115b70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "update_permissions_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "extract_build_attributes_00116490",
                "param_1": "param1",
                "param_2": "attributesSize",
                "param_3": "attributes",
                "param_4": "attributesCount",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "bVar4": "flag",
                "puVar5": "ptrVar",
                "iVar6": "loopVar",
                "lVar7": "tempVar4",
                "uVar8": "tempVar5",
                "in_RAX": "attributeType",
                "uVar9": "tempVar6",
                "uVar10": "tempVar7",
                "uVar11": "tempVar8",
                "uVar12": "tempVar9",
                "__ptr": "dynamicMemory",
                "uVar13": "tempVar10",
                "unaff_RBX": "attributeIndex",
                "unaff_RBP": "tempVar11",
                "puVar14": "ptrVar2",
                "puVar15": "ptrVar3",
                "cVar16": "charVar",
                "puVar17": "ptrVar4",
                "puVar18": "ptrVar5",
                "in_R11": "dynamicMemoryEnd",
                "unaff_R12": "attributeArray",
                "puVar19": "ptrVar6",
                "unaff_R13": "tempVar12",
                "__nmemb": "temporaryVar",
                "unaff_R14": "printFunctionsArray",
                "puVar20": "ptrVar7",
                "bVar21": "byteVar",
                "iVar22": "loopVar2",
                "unaff_retaddr": "returnAddress",
                "param_7": "outputSize",
                "param_8": "flag1",
                "param_9": "tempVar13",
                "in_stack_00000020": "bufferSize",
                "in_stack_00000028": "tempVarArray",
                "in_stack_00000030": "buffer",
                "in_stack_00000038": "flag2",
                "in_stack_00000040": "flag3",
                "in_stack_00000048": "errorMessage"
            },
            "code": "\nulong extractBuildAttributes_00116490(undefined8 param1,ulong attributesSize,ulong attributes,long attributesCount)\n\n{\n  undefined8 tempVar1;\n  undefined8 tempVar2;\n  ulong tempVar3;\n  bool flag;\n  ulong *ptrVar;\n  int loopVar;\n  long tempVar4;\n  undefined8 tempVar5;\n  ulong attributeType;\n  ulong tempVar6;\n  ulong tempVar7;\n  ulong tempVar8;\n  ulong tempVar9;\n  undefined *dynamicMemory;\n  ulong tempVar10;\n  ulong attributeIndex;\n  ulong tempVar11;\n  ulong *ptrVar2;\n  undefined *ptrVar3;\n  char charVar;\n  undefined *ptrVar4;\n  undefined *ptrVar5;\n  ulong dynamicMemoryEnd;\n  ulong *attributeArray;\n  ulong *ptrVar6;\n  ulong tempVar12;\n  size_t temporaryVar;\n  undefined8 *printFunctionsArray;\n  ulong *ptrVar7;\n  byte byteVar;\n  int loopVar2;\n  ulong returnAddress;\n  ulong outputSize;\n  uint flag1;\n  ulong tempVar13;\n  ulong bufferSize;\n  ulong *tempVarArray;\n  undefined *buffer;\n  uint flag2;\n  uint flag3;\n  undefined8 *errorMessage;\n  \n  byteVar = 0;\ncode_r0x00116490:\n  tempVar4 = attributesCount;\n  tempVar7 = tempVar11;\n  tempVar10 = tempVar12;\n  if (attributeType == 0) {\n    if (attributesSize == 0x100) {\n      attributeArray[7] = returnAddress;\n      tempVar8 = returnAddress;\nLAB_001164af:\n      tempVar6 = tempVar12;\n      tempVar10 = tempVar12;\n      returnAddress = tempVar8;\n    }\n    else {\n      attributeArray[7] = tempVar13;\nLAB_0011669e:\n      tempVar7 = tempVar11;\n      tempVar6 = tempVar11;\n    }\nLAB_001164bb:\n    attributeArray[8] = tempVar6;\n    if (*(char *)((attributeArray[3] - 1) + attributes) != '\\0') {\n      tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptrVar6 = attributeArray + 9;\n    if (0xb < attributeIndex) {\n      tempVar6 = (**(code **)(printFunctionsArray[1] + 0x40))(tempVar4);\n      *ptrVar6 = tempVar6;\n      tempVar6 = (**(code **)(printFunctionsArray[1] + 0x40))(tempVar4 + 4);\n      attributeArray[10] = tempVar6;\n      attributesSize = (**(code **)(printFunctionsArray[1] + 0x40))(tempVar4 + 8);\n      attributes = *ptrVar6;\n      attributeArray[0xb] = attributesSize;\n      attributeType = attributeArray[10];\n      tempVar6 = attributes + 3 & 0xfffffffffffffffc;\n      attributeArray[0xf] = tempVar6;\n      if (attributeType != (attributeType + 3 & 0xfffffffffffffffc)) {\n        tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < attributesSize - 0x100) {\n        tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      tempVar8 = tempVar6 + attributeType + 0xc;\n      if (attributeIndex < tempVar8) {\n        tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (attributes < 2) {\n        tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      attributeArray[0xc] = tempVar4 + 0xc;\n      dynamicMemoryEnd = tempVar4 + 0xc + tempVar6;\n      attributeArray[0xd] = dynamicMemoryEnd;\n      attributeIndex = attributeIndex + (-0xc - (tempVar6 + attributeType));\n      attributesCount = tempVar4 + tempVar8;\n      tempVar11 = tempVar7;\n      attributeArray = ptrVar6;\n      tempVar12 = tempVar10;\n      if (attributes != 2) {\n        if (*(char *)(tempVar4 + 0xc) == '$') {\n          if ((*(char *)(tempVar4 + 0xd) == '\\x01') && (*(char *)(tempVar4 + 0xe) == '1')) {\n            tempVar7 = extractBuildAttributes_00116490();\n            return tempVar7;\n          }\n        }\n        else if ((((4 < attributes) && (*(char *)(tempVar4 + 0xc) == 'G')) &&\n                 (*(char *)(tempVar4 + 0xd) == 'A')) &&\n                ((*(char *)(tempVar4 + 0xe) == '$' && (*(char *)(tempVar4 + 0xf) == '\\x01')))) {\n          if (*(char *)(tempVar4 + 0x10) == '2') {\n            tempVar7 = extractBuildAttributes_00116490();\n            return tempVar7;\n          }\n          if (*(char *)(tempVar4 + 0x10) == '3') {\n            tempVar7 = extractBuildAttributes_00116490();\n            return tempVar7;\n          }\n          tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (attributeIndex != 0) {\n      tempVar4 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag2 | flag3 | flag1) == 0) {\n      tempVar1 = *printFunctionsArray;\n      tempVar2 = *errorMessage;\n      tempVar5 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(tempVar5,tempVar1,tempVar2);\nLAB_0011671b:\n      temporaryVar = ((long)ptrVar6 - (long)tempVarArray >> 3) * -0x71c71c71c71c71c7;\n      qsort(tempVarArray,temporaryVar,0x48,compare_memory_segments_0011a1b0);\n      for (ptrVar2 = tempVarArray; ptrVar2 < ptrVar6; ptrVar2 = ptrVar2 + 9) {\n        tempVar7 = ptrVar2[2];\n        if (tempVar7 != 0) {\n          tempVar10 = ptrVar2[7];\n          tempVar6 = ptrVar2[8];\n          ptrVar7 = ptrVar2;\n          loopVar2 = 0;\n          if (tempVar10 == tempVar6) {\n            ptrVar2[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptrVar = ptrVar7;\n                ptrVar7 = ptrVar + -9;\n                if (ptrVar7 < tempVarArray) goto LAB_001167f5;\n                tempVar8 = ptrVar[-7];\n              } while (tempVar8 == 0);\n              if ((*ptrVar7 != *ptrVar2) ||\n                 (loopVar = memcmp((void *)ptrVar[-6],(void *)ptrVar2[3],*ptrVar2), loopVar != 0))\n              break;\n              tempVar3 = ptrVar[-2];\n              tempVar9 = ptrVar[-1];\n              if (tempVar10 == tempVar3) {\n                if (tempVar6 == tempVar9) {\n                  ptrVar2[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (tempVar6 <= tempVar9) {\n                  ptrVar2[2] = 0;\n                  break;\n                }\n                if (tempVar9 < tempVar10) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < tempVar9) ||\n                     (tempVar10 <= (tempVar9 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((tempVar7 == 0x101) == (tempVar8 == 0x101)) {\n                  if (tempVar9 <= tempVar6) {\n                    tempVar9 = tempVar6;\n                  }\n                  if (tempVar3 < tempVar10) {\n                    tempVar10 = tempVar3;\n                  }\n                  ptrVar[-1] = tempVar9;\n                  ptrVar[-2] = tempVar10;\n                  ptrVar2[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (tempVar3 <= tempVar10) goto LAB_001167a6;\n                if (tempVar9 < tempVar10) goto LAB_0010852c;\n                if (tempVar6 < tempVar10) {\n                  if ((0xfffffffffffffff0 < tempVar6) || (tempVar3 <= (tempVar6 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (tempVar6 != tempVar9) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              flag = loopVar2 < 0x11;\n              loopVar2 = loopVar2 + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(tempVarArray,temporaryVar,0x48,compare_records_0011a250);\n      dynamicMemory = (undefined *)xmalloc(bufferSize * 2);\n      outputSize = 0;\n      tempVar13 = 0;\n      ptrVar5 = dynamicMemory;\n      for (ptrVar2 = tempVarArray; ptrVar2 < ptrVar6; ptrVar2 = ptrVar2 + 9) {\n        if (ptrVar2[2] != 0) {\n          ptrVar4 = ptrVar5 + 4;\n          ptrVar3 = ptrVar5 + 0xc;\n          if ((ptrVar2[7] == tempVar13) && (ptrVar2[8] == outputSize)) {\n            (**(code **)(printFunctionsArray[1] + 0x50))(*ptrVar2,ptrVar5);\n            (**(code **)(printFunctionsArray[1] + 0x50))(0,ptrVar4);\n            (**(code **)(printFunctionsArray[1] + 0x50))(ptrVar2[2],ptrVar5 + 8);\n            tempVar10 = ptrVar2[6];\n            tempVar7 = *ptrVar2;\n            ptrVar5 = (undefined *)ptrVar2[3];\n            ptrVar4 = ptrVar3;\n            for (tempVar6 = tempVar7; tempVar6 != 0; tempVar6 = tempVar6 - 1) {\n              *ptrVar4 = *ptrVar5;\n              ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n              ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n            }\n            if (tempVar7 < tempVar10) {\n              for (tempVar4 = tempVar10 - tempVar7; tempVar4 != 0; tempVar4 = tempVar4 + -1) {\n                *ptrVar4 = 0;\n                ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            ptrVar5 = ptrVar3 + tempVar10;\n          }\n          else {\n            (**(code **)(printFunctionsArray[1] + 0x50))();\n            if (*(int *)(printFunctionsArray[1] + 8) == 5) {\n              charVar = (*(char *)(printFunctionsArray[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charVar = '\\b';\n            }\n            (**(code **)(printFunctionsArray[1] + 0x50))(charVar,ptrVar4);\n            (**(code **)(printFunctionsArray[1] + 0x50))(ptrVar2[2],ptrVar5 + 8);\n            tempVar7 = *ptrVar2;\n            ptrVar5 = (undefined *)ptrVar2[3];\n            ptrVar4 = ptrVar3;\n            for (tempVar10 = tempVar7; tempVar10 != 0; tempVar10 = tempVar10 - 1) {\n              *ptrVar4 = *ptrVar5;\n              ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n              ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n            }\n            tempVar10 = ptrVar2[6];\n            if (tempVar7 < tempVar10) {\n              for (tempVar4 = tempVar10 - tempVar7; tempVar4 != 0; tempVar4 = tempVar4 + -1) {\n                *ptrVar4 = 0;\n                ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            tempVar4 = printFunctionsArray[1];\n            ptrVar3 = ptrVar3 + tempVar10;\n            ptrVar5 = ptrVar3 + 8;\n            if ((*(int *)(tempVar4 + 8) == 5) && (*(char *)(printFunctionsArray[0x22] + 4) == '\\x02')) {\n              (**(code **)(tempVar4 + 0x38))(ptrVar2[7],ptrVar3);\n              (**(code **)(printFunctionsArray[1] + 0x38))(ptrVar2[8],ptrVar5);\n              ptrVar5 = ptrVar3 + 0x10;\n            }\n            else {\n              (**(code **)(tempVar4 + 0x50))(ptrVar2[7],ptrVar3);\n              (**(code **)(printFunctionsArray[1] + 0x50))(ptrVar2[8],ptrVar3 + 4);\n            }\n            tempVar13 = ptrVar2[7];\n            outputSize = ptrVar2[8];\n          }\n        }\n      }\n      tempVar10 = (long)ptrVar5 - (long)dynamicMemory;\n      tempVar7 = tempVar10;\n      ptrVar5 = dynamicMemory;\n      if (tempVar10 < bufferSize) {\n        for (; bufferSize = tempVar10, tempVar7 != 0; tempVar7 = tempVar7 - 1) {\n          *buffer = *ptrVar5;\n          ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n          buffer = buffer + (ulong)byteVar * -2 + 1;\n        }\n      }\n      free(dynamicMemory);\nLAB_001166f8:\n      free(tempVarArray);\n      return bufferSize;\n    }\n    if (((flag3 | flag1) == 0) || (flag2 == 0)) {\n      if (flag3 == 0) {\n        if (flag1 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (flag1 == 0) goto LAB_001166f8;\n    }\n    tempVar4 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (attributeType == 0x10) {\n      tempVar8 = (**(code **)(printFunctionsArray[1] + 0x28))(dynamicMemoryEnd);\n      tempVar6 = (**(code **)(printFunctionsArray[1] + 0x28))(attributeArray[4] + 8);\n      if (tempVar6 < tempVar8) {\n        tempVar8 = tempVar6;\n      }\nLAB_00116631:\n      if (attributeArray[2] == 0x100) {\n        if (tempVar8 == 0) {\n          tempVar8 = returnAddress;\n        }\n        attributes = *attributeArray;\n        attributeArray[7] = tempVar8;\n        tempVar10 = tempVar6;\n        returnAddress = tempVar8;\n        if (tempVar6 == 0) goto LAB_001164af;\n      }\n      else {\n        if (tempVar8 == 0) {\n          tempVar8 = tempVar13;\n        }\n        attributes = *attributeArray;\n        attributeArray[7] = tempVar8;\n        tempVar7 = tempVar6;\n        tempVar13 = tempVar8;\n        if (tempVar6 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (attributeType < 0x11) {\n      if (attributeType == 4) {\n        tempVar8 = (**(code **)(printFunctionsArray[1] + 0x40))(dynamicMemoryEnd);\n        tempVar6 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (attributeType == 8) {\n        tempVar7 = extract_build_attributes_001086af();\n        return tempVar7;\n      }\n    }\n    tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (tempVar4 != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,printFunctionsArray,errorMessage,tempVar4);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "imported": false,
            "current_name": "extract_build_attributes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_memory_segments_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetCode",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "pTarget",
                "fprintf": "printFormatted",
                "dcgettext": "getTranslatedText",
                "bfd_target_list": "getTargetList",
                "fputc": "writeChar",
                "free": "releaseMemory"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long targetCode;\n  char *message;\n  long *targetList;\n  long *pTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  pTarget = targetList;\n  while( true ) {\n    targetCode = *pTarget;\n    pTarget = pTarget + 1;\n    if (targetCode == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fprintf",
                "free",
                "dcgettext",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_debug_function_0010be1a",
                "param_1": "functionData",
                "param_2": "message",
                "param_3": "arg3",
                "param_4": "result",
                "lVar1": "currentBlock",
                "uVar2": "translation",
                "pcVar3": "errorMessage"
            },
            "code": "\n\n\nundefined  [16] endDebugFunction_0010be1a(long functionData,undefined8 message,undefined8 arg3,undefined8 result)\n\n{\n  long currentBlock;\n  undefined8 translation;\n  char *errorMessage;\n  undefined auVar4 [16];\n  \n  if (((*(long *)(functionData + 8) == 0) || (currentBlock = *(long *)(functionData + 0x20), currentBlock == 0)) ||\n     (*(long *)(functionData + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) == 0) {\n      *(undefined8 *)(currentBlock + 0x20) = message;\n      translation = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(undefined (*) [16])(functionData + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  translation = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",translation);\n  translation = 0;\nLAB_0010be86:\n  auVar4._8_8_ = result;\n  auVar4._0_8_ = translation;\n  return auVar4;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "end_debug_function_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00116030",
                "FUN_00116b90",
                "FUN_00119dd0",
                "FUN_00115dc0",
                "FUN_001083b7"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_data_structure_00113da9",
                "param_1": "byteValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "dataStructurePtr",
                "lVar2": "loopCounter",
                "puVar3": "tempPtr",
                "bVar4": "byteCounter",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeDataStructure_00113da9(byte byteValue,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *dataStructurePtr;\n  long loopCounter;\n  undefined8 *tempPtr;\n  byte byteCounter;\n  undefined result [16];\n  \n  byteCounter = 0;\n  result._0_8_ = initialize_data_structure_00112904(8 - (uint)byteValue);\n  if (result._0_8_ != 0) {\n    dataStructurePtr = (undefined8 *)xmalloc(0x28);\n    tempPtr = dataStructurePtr + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)tempPtr = 0;\n      tempPtr = (undefined8 *)((long)tempPtr + (ulong)byteCounter * -8 + 4);\n    }\n    *dataStructurePtr = param3;\n    *(undefined8 **)(result._0_8_ + 0x10) = dataStructurePtr;\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_index_2"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_index_2;\n  \n  record1_index_2 = record1[2];\n  if (record1_index_2 == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_index_2 == 0) || ((record1_index_2 != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "initialize_data_structure_0010a69a",
                "param_1": "dataStructure",
                "param_2": "data",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "arraySize",
                "sVar3": "stringLength",
                "uVar4": "allocatedMemory",
                "uVar5": "hasArray",
                "local_60": "outputString"
            },
            "code": "\nundefined4 initializeDataStructure_0010a69a(long dataStructure,undefined8 data,int size,char flag,uint value)\n\n{\n  undefined4 result;\n  long arraySize;\n  size_t stringLength;\n  undefined8 allocatedMemory;\n  undefined hasArray;\n  char outputString [48];\n  \n  if (size == 0) {\n    outputString[0] = '\\0';\n    hasArray = 0;\n    arraySize = 0;\n  }\n  else {\n    arraySize = resize_and_initialize_array_00109c2e();\n    if (arraySize < 0) {\n      return 0;\n    }\n    hasArray = 1;\n    sprintf(outputString,\"%ld=\",arraySize);\n  }\n  stringLength = strlen(outputString);\n  sprintf(outputString + stringLength,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = initialize_data_structure_00109b52(dataStructure,outputString,arraySize,hasArray,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  arraySize = *(long *)(dataStructure + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(arraySize + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(dataStructure + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "strlen",
                "xmalloc",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_permissions_00115b70",
                "param_1": "section_name",
                "pcVar1": "current_section",
                "iVar2": "comparison_result",
                "iVar3": "condition",
                "lVar4": "result_1",
                "lVar5": "result_2",
                "uVar6": "return_value",
                "plVar7": "list_pointer"
            },
            "code": "\nundefined8 check_section_permissions_00115b70(char **section_name)\n\n{\n  char *current_section;\n  int comparison_result;\n  int condition;\n  long result_1;\n  long result_2;\n  undefined8 return_value;\n  long *list_pointer;\n  \n  result_1 = update_permissions_00114190(*section_name,0,4);\n  if (result_1 == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      result_1 = update_permissions_00114190(*section_name,0,1);\n      result_2 = update_permissions_00114190(*section_name,0,2);\n      if (result_1 != 0) {\n        if (result_2 != 0) {\n          current_section = *section_name;\n          return_value = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_and_exit_error_00119dd0(return_value,current_section);\n        }\n        if (result_1 != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_name;\n          list_pointer = DAT_001279b8;\n          do {\n            condition = strcmp(current_section,(char *)list_pointer[1]);\n            if (condition == 0) {\n              return_value = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_and_exit_error_00119dd0(return_value,current_section);\n            }\n            list_pointer = (long *)*list_pointer;\n          } while (list_pointer != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (result_2 == 0)) {\n        return 1;\n      }\n    }\n    condition = DAT_00127a2c;\n    if ((*(byte *)((long)section_name + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        current_section = *section_name;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          condition = strcmp(current_section,\".reloc\");\n          if (condition != 0) {\n            return 1;\n          }\n          return_value = handle_input_conditions_0010829e();\n          return return_value;\n        }\n      }\n      if (condition == 5) {\n        return_value = check_string_length_00113ede(section_name);\n        return return_value;\n      }\n      if (condition == 4) {\n        return 0;\n      }\n    }\n    if (condition == 6) {\n      return_value = check_and_invert_length_001082b3();\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00119dd0",
                "dcgettext",
                "FUN_0010829e",
                "FUN_00114190",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_section_permissions_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocations_00116030",
                "param_1": "parameters",
                "param_2": "count",
                "plVar1": "current_reloc",
                "lVar2": "reloc_addr",
                "lVar3": "static_var1",
                "lVar4": "static_var2",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar6": "fwrite_addr",
                "lVar7": "reloc_count",
                "__ptr": "reloc_buffer",
                "extraout_RAX": "extra_return_value",
                "lVar8": "index",
                "uStack_28": "default_return"
            },
            "code": "\n\n\nundefined8 process_relocations_00116030(undefined8 *parameters,long count)\n\n{\n  long *current_reloc;\n  long reloc_addr;\n  long static_var1;\n  long static_var2;\n  int error_code;\n  undefined8 return_value;\n  long fwrite_addr;\n  void *reloc_buffer;\n  long reloc_count;\n  undefined8 extra_return_value;\n  long index;\n  undefined8 default_return;\n  \n  if (*(long *)(count + 0x60) == 0) {\n    return return_value;\n  }\n  fwrite_addr = bfd_get_reloc_upper_bound();\n  if (fwrite_addr < 0) {\n    if ((fwrite_addr != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      print_error_0011a110(*parameters);\n                    \n      xexit(1);\n    }\n  }\n  else if (fwrite_addr != 0) {\n    reloc_buffer = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(parameters,count,reloc_buffer);\n    static_var2 = _DAT_00128680;\n    static_var1 = _DAT_00128568;\n    fwrite_addr = _fwrite;\n    if (reloc_count < 0) {\n      print_error_0011a110(*parameters);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      index = 0;\n      do {\n        current_reloc = **(long ***)((long)reloc_buffer + index * 8);\n        if ((((current_reloc != (long *)0x0) && (reloc_addr = *current_reloc, reloc_addr != 0)) && (reloc_addr != fwrite_addr)) &&\n           ((reloc_addr != static_var2 && (reloc_addr != static_var1)))) {\n          *(uint *)(reloc_addr + 0x18) = *(uint *)(reloc_addr + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (reloc_count != index);\n    }\n    free(reloc_buffer);\n    return extra_return_value;\n  }\n  return default_return;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_canonicalize_reloc",
                "fwrite",
                "free",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "FUN_001083b7",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocations_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "param_1": "input_string",
                "__s": "string_ptr",
                "sVar1": "length",
                "uVar2": "comparison_result"
            },
            "code": "\nundefined8 check_string_length_00113ede(char **input_string)\n\n{\n  char *string_ptr;\n  size_t length;\n  undefined8 comparison_result;\n  \n  if (input_string == (char **)0x0) {\n    return 0;\n  }\n  string_ptr = *input_string;\n  if (string_ptr != (char *)0x0) {\n    length = strlen(string_ptr);\n    if (4 < (int)length) {\n      comparison_result = string_comparison_00113fb0(string_ptr + (long)(int)length + -4,&DAT_0012142b);\n      return comparison_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_string_length_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record_1",
                "param_2": "record_2",
                "lVar1": "value_1",
                "lVar2": "value_2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compare_records_0010875d(long *record_1,long *record_2)\n\n{\n  long value_1;\n  long value_2;\n  int result;\n  uint flag;\n  \n  value_1 = *record_1;\n  value_2 = *record_2;\n  flag = *(uint *)(value_2 + 0x24) & 0x102;\n  if ((*(uint *)(value_1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value_1 + 0x38) <= *(ulong *)(value_2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value_2 + 0x38) <= *(ulong *)(value_1 + 0x38)) {\n      if (*(ulong *)(value_2 + 0x40) < *(ulong *)(value_1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value_2 + 0x40) <= *(ulong *)(value_1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value_1 + 0x18) <= *(uint *)(value_2 + 0x18)) {\n            return -(uint)(*(uint *)(value_1 + 0x18) < *(uint *)(value_2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_data_0010c892",
                "param_1": "arg1",
                "param_2": "arg2",
                "cVar1": "result",
                "lVar2": "dataStructure",
                "lVar3": "tagType",
                "uVar4": "returnValue",
                "puVar5": "ptr",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processDebugData_0010c892(undefined8 arg1,long arg2)\n\n{\n  char result;\n  long dataStructure;\n  long tagType;\n  undefined8 returnValue;\n  undefined8 *ptr;\n  int kind;\n  \n  if (*(char *)(arg2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr = *(undefined8 **)(arg2 + 0x1a0); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      kind = *(int *)(ptr + 2);\n      tagType = ptr[1];\n      if (kind != 0) {\n        if (tagType != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          returnValue = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",returnValue);\n        }\nLAB_0010c910:\n        ptr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tagType == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      dataStructure = initialize_data_structure_00112904(kind,0);\n      if (dataStructure == 0) goto LAB_0010c910;\n      tagType = debug_tag_type_0010c6be(arg1,tagType,dataStructure);\n      ptr[3] = tagType;\n      if (tagType == 0) goto LAB_0010c916;\n    }\n    returnValue = 1;\n  }\n  else {\n    result = deallocate_memory_0010c1c6();\n    if (result != '\\0') {\n      result = end_debug_function_0010be1a(arg1,*(undefined8 *)(arg2 + 0x68));\n      if (result != '\\0') {\n        *(undefined *)(arg2 + 0x60) = 0;\n        *(undefined8 *)(arg2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_0010c6be",
                "dcgettext",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_structure_00112904",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "dataPointer"
            },
            "code": "\nvoid initializeDataStructure_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *dataPointer;\n  \n  dataPointer = (undefined4 *)xmalloc(0x18);\n  *dataPointer = value1;\n  dataPointer[1] = value2;\n  *(undefined (*) [16])(dataPointer + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_0010c95e",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_00113e23",
                "FUN_00113b71",
                "FUN_00113b4a",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010c892",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "FUN_00113e17"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "undefinedValue",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 undefinedValue;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = undefinedValue;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00104966",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00114690",
                "FUN_00109a32",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_0010c7a0",
                "FUN_0010922b",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010914e",
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00108898",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00115f50",
                "FUN_00115b70",
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_function_chain_0011a390",
                "lVar1": "previousIndex",
                "lVar2": "currentIndex",
                "lVar3": "nextIndex",
                "plVar4": "functionChain",
                "uVar5": "functionIndex"
            },
            "code": "\nvoid executeFunctionChain_0011a390(void)\n\n{\n  long previousIndex;\n  long currentIndex;\n  long nextIndex;\n  long *functionChain;\n  uint functionIndex;\n  \n  functionChain = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      functionIndex = *(int *)(functionChain + 1) - 1;\n      if (-1 < (int)functionIndex) {\n        previousIndex = (long)(int)functionIndex;\n        functionIndex = functionIndex & 7;\n        (*(code *)functionChain[previousIndex + 2])();\n        currentIndex = previousIndex + -1;\n        if (-1 < (int)currentIndex) {\n          nextIndex = currentIndex;\n          if (functionIndex != 0) {\n            if (functionIndex != 1) {\n              if (functionIndex != 2) {\n                if (functionIndex != 3) {\n                  if (functionIndex != 4) {\n                    if (functionIndex != 5) {\n                      if (functionIndex != 6) {\n                        (*(code *)functionChain[previousIndex + 1])();\n                        currentIndex = previousIndex + -2;\n                      }\n                      (*(code *)functionChain[currentIndex + 2])();\n                      currentIndex = currentIndex + -1;\n                    }\n                    (*(code *)functionChain[currentIndex + 2])();\n                    currentIndex = currentIndex + -1;\n                  }\n                  (*(code *)functionChain[currentIndex + 2])();\n                  currentIndex = currentIndex + -1;\n                }\n                (*(code *)functionChain[currentIndex + 2])();\n                currentIndex = currentIndex + -1;\n              }\n              (*(code *)functionChain[currentIndex + 2])();\n              currentIndex = currentIndex + -1;\n            }\n            (*(code *)functionChain[currentIndex + 2])();\n            nextIndex = currentIndex + -1;\n            if ((int)(currentIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionChain[nextIndex + 2])();\n            previousIndex = nextIndex + -1;\n            (*(code *)functionChain[nextIndex + 1])();\n            (*(code *)functionChain[nextIndex])();\n            (*(code *)functionChain[previousIndex])();\n            (*(code *)functionChain[nextIndex + -2])();\n            (*(code *)functionChain[nextIndex + -3])();\n            (*(code *)functionChain[nextIndex + -4])();\n            (*(code *)functionChain[nextIndex + -5])();\n            nextIndex = nextIndex + -8;\n          } while (-1 < (int)previousIndex + -7);\n        }\n      }\nLAB_0011a466:\n      functionChain = (long *)*functionChain;\n    } while (functionChain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_function_chain_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "create_updated_hash_entry_0010e842",
                "param_1": "hashTable",
                "param_2": "inputString",
                "param_3": "counter",
                "param_4": "dataPointer",
                "__s": "dynamicString",
                "sVar1": "stringLength",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] createUpdatedHashEntry_0010e842(undefined8 hashTable,char *inputString,undefined8 counter,undefined8 dataPointer)\n\n{\n  size_t stringLength;\n  char *dynamicString;\n  undefined result [16];\n  \n  stringLength = strlen(inputString);\n  dynamicString = (char *)xmalloc(stringLength + 0x14);\n  sprintf(dynamicString,\"%s:c=i%ld\",inputString,counter);\n  result._0_4_ = update_hash_table_0010e2f0(hashTable,0x80,0,0,dynamicString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(dynamicString);\n  }\n  result._8_8_ = dataPointer;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "create_updated_hash_entry_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_data_structure_00113cb9",
                "param_1": "input_value",
                "lVar1": "data_structure",
                "initialize_data_structure_00112904": "initialize_data_structure"
            },
            "code": "\nlong initialize_data_structure_00113cb9(long input_value)\n\n{\n  long data_structure;\n  \n  if (input_value != 0) {\n    data_structure = initialize_data_structure_00113cb9(0xe,0);\n    if (data_structure == 0) {\n      data_structure = 0;\n    }\n    else {\n      *(long *)(data_structure + 0x10) = input_value;\n    }\n    return data_structure;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_data_0010eafe",
                "param_1": "data_struct",
                "param_2": "input_string",
                "param_3": "flag",
                "__s": "extracted_item",
                "sVar2": "input_len",
                "sVar3": "extracted_len",
                "__s_00": "formatted_string",
                "uVar1": "result"
            },
            "code": "\nundefined4 processData_0010eafe(long data_struct,char *input_string,char flag)\n\n{\n  undefined4 result;\n  char *extracted_item;\n  size_t input_len;\n  size_t extracted_len;\n  char *formatted_string;\n  \n  if ((*(int *)(data_struct + 0x1f8) == 0) && (*(long *)(data_struct + 0x1e8) == -1)) {\n    extracted_item = (char *)extract_and_free_next_item_00109b2f();\n    input_len = strlen(input_string);\n    extracted_len = strlen(extracted_item);\n    formatted_string = (char *)xmalloc(input_len + 3 + extracted_len);\n    sprintf(formatted_string,\"%s:%c%s\",input_string,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),extracted_item);\n    *(undefined8 *)(data_struct + 0x1e8) = *(undefined8 *)(data_struct + 0x10);\n    result = update_hash_table_0010e2f0(data_struct,0x24,0,0,formatted_string);\n    if ((char)result != '\\0') {\n      free(formatted_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_data_structure_00113df2",
                "param_1": "param",
                "initialize_data_structure_00112904": "initialize_data_structure"
            },
            "code": "\nvoid initialize_data_structure_00113df2(undefined4 param)\n\n{\n  initialize_data_structure_00113df2(4,param);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "create_and_initialize_data_0010a377",
                "param_1": "inputParam",
                "cVar1": "charVar",
                "__s": "firstString",
                "__s_00": "secondString",
                "sVar3": "lengthFirstString",
                "sVar4": "lengthSecondString",
                "__s_01": "concatenatedString",
                "uVar5": "boolVar",
                "uVar2": "returnValue"
            },
            "code": "\nundefined4 createAndInitializeData_0010a377(long inputParam)\n\n{\n  char charVar;\n  undefined4 returnValue;\n  char *firstString;\n  char *secondString;\n  size_t lengthFirstString;\n  size_t lengthSecondString;\n  char *concatenatedString;\n  undefined boolVar;\n  \n  boolVar = 1;\n  charVar = *(char *)(*(long *)(inputParam + 0x60) + 0x1c);\n  firstString = (char *)extract_and_free_next_item_00109b2f();\n  if (charVar == '\\0') {\n    boolVar = *(undefined *)(*(long *)(inputParam + 0x60) + 0x1c);\n  }\n  secondString = (char *)extract_and_free_next_item_00109b2f(inputParam);\n  lengthFirstString = strlen(firstString);\n  lengthSecondString = strlen(secondString);\n  concatenatedString = (char *)xmalloc(lengthFirstString + 3 + lengthSecondString);\n  sprintf(concatenatedString,\"@%s,%s\",secondString,firstString);\n  free(secondString);\n  free(firstString);\n  returnValue = initialize_data_structure_00109b52(inputParam,concatenatedString,0,boolVar,0);\n  if ((char)returnValue != '\\0') {\n    free(concatenatedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_and_initialize_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "parse_and_add_data_0010d882",
                "param_1": "input_data",
                "param_2": "string_array",
                "param_3": "output_data",
                "param_4": "error_flag",
                "iVar1": "iteration_counter",
                "pcVar2": "current_string",
                "cVar3": "current_char",
                "lVar4": "allocated_memory",
                "pcVar5": "current_string",
                "uVar6": "index",
                "bVar7": "is_valid",
                "local_50": "num_entries",
                "local_4c": "max_entries",
                "local_48": "entry_size",
                "local_44": "num_times"
            },
            "code": "\nundefined8 parse_and_add_data_0010d882(long input_data,char **string_array,long *output_data,undefined *error_flag)\n\n{\n  int iteration_counter;\n  char *current_string;\n  char current_char;\n  long allocated_memory;\n  char *current_string;\n  ulong index;\n  bool is_valid;\n  uint num_entries;\n  undefined4 max_entries;\n  uint entry_size;\n  int num_times;\n  undefined8 local_40 [2];\n  \n  current_string = *string_array;\n  max_entries = 10;\n  if (output_data != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_data = allocated_memory;\n    *error_flag = 0;\n  }\n  num_entries = 0;\n  while( true ) {\n    current_string = *string_array;\n    current_char = *current_string;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *string_array = current_string + 1;\n      if (current_char == 'T') {\n        num_times = 1;\n      }\n      else {\n        current_char = parse_integer_from_string_00108ea1(string_array,&num_times);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = parse_integer_from_string_00108ea1(string_array,&entry_size);\n      if ((current_char == '\\0') || (*(uint *)(input_data + 0x28) <= entry_size)) {\nLAB_0010d958:\n        print_error_message_0010911f(current_string);\n        return 0;\n      }\n      index = (ulong)entry_size;\n      while (iteration_counter = num_times + -1, is_valid = num_times != 0, num_times = iteration_counter, is_valid) {\n        local_40[0] = *(undefined8 *)(*(long *)(input_data + 0x20) + index * 0x10);\n        current_char = parse_and_add_data_0010d882_0010d7d4(input_data,local_40,output_data,&num_entries,&max_entries);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = parse_and_add_data_0010d882_0010d7d4(input_data,string_array,output_data,&num_entries,&max_entries);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_data == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_data + (ulong)num_entries * 8) = 0;\n    if (*current_string != 'e') goto LAB_0010d9fa;\n    *error_flag = 1;\n  }\n  current_string = current_string + 1;\n  *string_array = current_string;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_string >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00108ea1",
                "FUN_0010d7d4",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_add_data_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "array_ptr",
                "param_2": "value",
                "puVar1": "memory_ptr",
                "pauVar2": "existing_array_ptr",
                "lVar3": "loop_counter",
                "puVar4": "current_ptr",
                "bVar5": "flag"
            },
            "code": "\nundefined4 *\ninitialize_memory_00112925(undefined (**array_ptr) [16],undefined8 value,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 *memory_ptr;\n  undefined (*existing_array_ptr) [16];\n  long loop_counter;\n  undefined4 *current_ptr;\n  byte flag;\n  \n  flag = 0;\n  memory_ptr = (undefined4 *)xmalloc(0x28);\n  current_ptr = memory_ptr;\n  for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *current_ptr = 0;\n    current_ptr = current_ptr + (ulong)flag * -2 + 1;\n  }\n  existing_array_ptr = *array_ptr;\n  *(undefined8 *)(memory_ptr + 2) = value;\n  memory_ptr[5] = param_3;\n  memory_ptr[6] = param_4;\n  if (existing_array_ptr == (undefined (*) [16])0x0) {\n    existing_array_ptr = (undefined (*) [16])xmalloc(0x10);\n    *existing_array_ptr = ZEXT816(0);\n    *array_ptr = existing_array_ptr;\n    *(undefined (**) [16])(*existing_array_ptr + 8) = existing_array_ptr;\n  }\n  **(undefined8 **)(*existing_array_ptr + 8) = memory_ptr;\n  *(undefined4 **)(*existing_array_ptr + 8) = memory_ptr;\n  return memory_ptr;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010bc80",
                "FUN_00112996",
                "FUN_0010c05d"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_line_debug_info_0010bf86",
                "param_1": "unitInfo",
                "param_2": "line",
                "param_3": "record",
                "uVar1": "errorMessage",
                "puVar2": "currentRecordPtr",
                "uVar3": "index",
                "puVar4": "newRecordPtr",
                "lVar5": "loopVar",
                "puVar6": "ptrVar",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordLineDebugInfo_0010bf86(long unitInfo,undefined8 line,undefined8 record)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentRecordPtr;\n  ulong index;\n  undefined4 *newRecordPtr;\n  long loopVar;\n  undefined4 *ptrVar;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(unitInfo + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    loopVar = *(long *)(unitInfo + 0x28);\n    if ((loopVar != 0) && (*(long *)(loopVar + 8) == *(long *)(unitInfo + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(loopVar + 0x10 + index * 8) == -1) {\n          currentRecordPtr = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(loopVar + 0x10 + (long)currentRecordPtr * 8) = line;\n          *(undefined8 *)(loopVar + 0x60 + (long)currentRecordPtr * 8) = record;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newRecordPtr = (undefined4 *)xmalloc(0xb0);\n    ptrVar = newRecordPtr;\n    for (loopVar = 0x2c; loopVar != 0; loopVar = loopVar + -1) {\n      *ptrVar = 0;\n      ptrVar = ptrVar + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(unitInfo + 0x10);\n    *(undefined8 *)(newRecordPtr + 4) = line;\n    *(undefined8 *)(newRecordPtr + 2) = errorMessage;\n    *(undefined8 *)(newRecordPtr + 0x18) = record;\n    ptrVar = newRecordPtr + 6;\n    for (loopVar = 0x48; loopVar != 0; loopVar = loopVar + -1) {\n      *(undefined *)ptrVar = 0xff;\n      ptrVar = (undefined4 *)((long)ptrVar + (ulong)flag * -2 + 1);\n    }\n    currentRecordPtr = *(undefined8 **)(unitInfo + 0x28);\n    if (currentRecordPtr == (undefined8 *)0x0) {\n      currentRecordPtr = *(undefined8 **)(unitInfo + 8);\n      currentRecordPtr[2] = newRecordPtr;\n    }\n    else {\n      *currentRecordPtr = newRecordPtr;\n    }\n    *(undefined4 **)(unitInfo + 0x28) = newRecordPtr;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentRecordPtr >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_line_debug_info_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_0010554f",
                "FUN_00116852",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "check_pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "inputString",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint checkPatternMatch_0011a170(char **pattern,char **inputString)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*inputString,0);\n    if (matchResult == 0) {\n      *(undefined *)(inputString + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*inputString,0);\n    if (matchResult == 0) {\n      *(undefined *)(inputString + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "check_pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_debug_0010bd62",
                "param_1": "functionPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "currentPtr",
                "uVar2": "errorMsg",
                "puVar3": "newPtr",
                "puVar4": "tempPtr",
                "lVar5": "loopCount",
                "puVar6": "lastPtr",
                "puVar7": "tempPtr2",
                "bVar8": "flag"
            },
            "code": "\n\n\nundefined8\nrecordParameterDebug_0010bd62(long functionPtr,long param2,long param3,undefined4 param4,undefined8 param5)\n\n{\n  undefined8 *currentPtr;\n  undefined8 errorMsg;\n  undefined4 *newPtr;\n  undefined8 *tempPtr;\n  long loopCount;\n  undefined8 *lastPtr;\n  undefined4 *tempPtr2;\n  byte flag;\n  \n  flag = 0;\n  if (param2 == 0) {\n    return 0;\n  }\n  if (param3 != 0) {\n    if ((*(long *)(functionPtr + 8) != 0) && (*(long *)(functionPtr + 0x18) != 0)) {\n      newPtr = (undefined4 *)xmalloc(0x28);\n      tempPtr2 = newPtr;\n      for (loopCount = 10; loopCount != 0; loopCount = loopCount + -1) {\n        *tempPtr2 = 0;\n        tempPtr2 = tempPtr2 + (ulong)flag * -2 + 1;\n      }\n      loopCount = *(long *)(functionPtr + 0x18);\n      *(long *)(newPtr + 2) = param2;\n      *(long *)(newPtr + 4) = param3;\n      newPtr[6] = param4;\n      currentPtr = *(undefined8 **)(loopCount + 8);\n      *(undefined8 *)(newPtr + 8) = param5;\n      lastPtr = (undefined8 *)(loopCount + 8);\n      while (tempPtr = currentPtr, tempPtr != (undefined8 *)0x0) {\n        lastPtr = tempPtr;\n        currentPtr = (undefined8 *)*tempPtr;\n      }\n      *lastPtr = newPtr;\n      return 1;\n    }\n    errorMsg = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMsg);\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_debug_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_archived_files_00104ea2",
                "unaff_R12": "archiveFolderPath",
                "unaff_R15": "archiveFilePath",
                "unaff_retaddr": "returnAddress",
                "param_7": "sourceFilePath",
                "param_8": "bytesRemaining",
                "param_9": "tempDirectory",
                "param_10": "destinationFilePath",
                "param_11": "accessMode",
                "param_18": "permission",
                "param_19": "fileSize",
                "unaff_RBP": "fileInfo",
                "unaff_EBX": "statResult",
                "unaff_R13": "tempDirectories"
            },
            "code": "\nvoid extractAndCopyArchivedFiles_00104ea2(void)\n\n{\n  char cVar1;\n  int iVar2;\n  char **ppcVar3;\n  void *pvVar4;\n  long lVar5;\n  char **ppcVar6;\n  char *pcVar7;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *pcVar10;\n  undefined8 uVar11;\n  long lVar12;\n  code *pcVar13;\n  long lVar14;\n  int statResult;\n  stat *fileInfo;\n  char *pcVar15;\n  stat *psVar16;\n  char *archiveFolderPath;\n  undefined8 *tempDirectories;\n  char **archiveFilePath;\n  byte bVar17;\n  undefined8 returnAddress;\n  undefined8 *sourceFilePath;\n  long *bytesRemaining;\n  char *tempDirectory;\n  undefined8 *destinationFilePath;\n  undefined8 accessMode;\n  undefined8 in_stack_00000030;\n  uint permission;\n  long fileSize;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  ppcVar6 = (char **)bfd_openw(archiveFolderPath,accessMode);\n  if (ppcVar6 == (char **)0x0) {\nLAB_00104e80:\n    print_error_message_001126c0(archiveFolderPath,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    cVar1 = FUNC_00114e50(archiveFilePath,ppcVar6,returnAddress);\n    if (cVar1 == '\\0') {\n      iVar2 = bfd_get_arch(archiveFilePath);\n      if (iVar2 == 0) goto LAB_00104d75;\n      cVar1 = bfd_close_all_done(ppcVar6);\n      if (cVar1 != '\\0') goto LAB_00104ec9;\n      print_error_message_001126c0(archiveFolderPath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    cVar1 = bfd_close(ppcVar6);\n    ppcVar6 = archiveFilePath;\n    if (cVar1 == '\\0') {\n      print_error_message_001126c0(archiveFolderPath,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (statResult == 0)) {\n      set_time_0011a350(archiveFolderPath,fileInfo);\n    }\n    lVar12 = bfd_openr(archiveFolderPath,accessMode);\n    tempDirectories[2] = lVar12;\n    *bytesRemaining = lVar12;\n    bytesRemaining = (long *)(lVar12 + 0xf0);\n    archiveFilePath = (char **)bfd_openr_next_archived_file(destinationFilePath,ppcVar6);\n    bfd_close(ppcVar6);\n    while ((DAT_00127a20 == 0 && (archiveFilePath != (char **)0x0))) {\n      pcVar10 = *archiveFilePath;\n      pcVar7 = pcVar10;\n      if (*pcVar10 == '/') {\nLAB_0010527d:\n        uVar11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(uVar11,pcVar10);\n        goto LAB_00104e93;\n      }\n      while (*pcVar7 != '\\0') {\n        pcVar15 = pcVar7;\n        if ((*pcVar7 == '.') && (pcVar15 = pcVar7 + 1, pcVar7[1] == '.')) {\n          pcVar15 = pcVar7 + 2;\n          if ((pcVar7[2] == '\\0') || (pcVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pcVar15 != '\\0' && (*pcVar15 != '/')); pcVar15 = pcVar15 + 1) {\n        }\n        pcVar7 = pcVar15;\n        if (*pcVar15 == '/') {\n          extract_and_copy_archived_files_001052a2();\n          return;\n        }\n      }\n      fileInfo = (stat *)&stack0x00000050;\n      archiveFolderPath = (char *)concat(tempDirectory,&DAT_0011b47d);\n      iVar2 = stat(archiveFolderPath,fileInfo);\n      puVar8 = tempDirectories;\n      if (-1 < iVar2) {\n        lVar12 = create_temp_directory_0011a0e0(archiveFolderPath);\n        free(archiveFolderPath);\n        if (lVar12 == 0) {\n          piVar9 = __errno_location();\n          pcVar10 = strerror(*piVar9);\n          uVar11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(uVar11,pcVar10);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        pcVar10 = *archiveFilePath;\n        *puVar8 = tempDirectories;\n        puVar8[2] = 0;\n        puVar8[1] = lVar12;\n        archiveFolderPath = (char *)concat(lVar12,&DAT_0011b47d,pcVar10);\n      }\n      statResult = 0;\n      if (DAT_001279cb != '\\0') {\n        psVar16 = fileInfo;\n        for (lVar12 = 0x24; lVar12 != 0; lVar12 = lVar12 + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)bVar17 * -8 + 4);\n        }\n        ppcVar6 = (char **)archiveFilePath[0x1d];\n        if ((char **)archiveFilePath[0x1d] == (char **)0x0) {\n          ppcVar6 = archiveFilePath;\n        }\n        statResult = (**(code **)(ppcVar6[1] + 0x1e8))(archiveFilePath,fileInfo);\n        if (statResult != 0) {\n          pcVar10 = *archiveFilePath;\n          uVar11 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(uVar11,pcVar10);\n        }\n      }\n      tempDirectories = (undefined8 *)xmalloc(0x18);\n      tempDirectories[1] = archiveFolderPath;\n      *tempDirectories = puVar8;\n      tempDirectories[2] = 0;\n      cVar1 = bfd_check_format(archiveFilePath,1);\n      if (cVar1 != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        ppcVar6 = (char **)bfd_openw(archiveFolderPath,*(undefined8 *)archiveFilePath[1]);\n        if (ppcVar6 == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      uVar11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      print_error_message_001126c0(0,archiveFilePath,0,uVar11);\n      ppcVar6 = (char **)bfd_openw(archiveFolderPath,accessMode);\n      if (ppcVar6 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)archiveFilePath[0x1d];\n      if ((char **)archiveFilePath[0x1d] == (char **)0x0) {\n        ppcVar3 = archiveFilePath;\n      }\n      iVar2 = (**(code **)(ppcVar3[1] + 0x1e8))(archiveFilePath);\n      lVar12 = fileSize;\n      if (iVar2 == 0) {\n        if (fileSize < 0) {\n          get_modified_filename_001125fa(archiveFilePath);\n          uVar11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          print_error_message_00119ed0(uVar11);\n        }\n        else {\n          iVar2 = bfd_seek(archiveFilePath,0,0);\n          if (iVar2 == 0) {\n            if (DAT_001279c9 != '\\0') {\n              pcVar10 = *ppcVar6;\n              uVar11 = get_modified_filename_001125fa(archiveFilePath);\n              pcVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pcVar7,uVar11,pcVar10);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (lVar12 == 0) {\n                chmod(*ppcVar6,permission | 0x100);\n                free(pvVar4);\n                cVar1 = bfd_close_all_done(ppcVar6);\n                ppcVar6 = archiveFilePath;\n                if (cVar1 == '\\0') {\n                  print_error_message_001126c0(archiveFolderPath,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              lVar14 = 0x2000;\n              if (lVar12 < 0x2001) {\n                lVar14 = lVar12;\n              }\n              lVar5 = bfd_bread(pvVar4,lVar14,archiveFilePath);\n              ppcVar3 = archiveFilePath;\n              if ((lVar14 != lVar5) ||\n                 (lVar5 = bfd_bwrite(pvVar4,lVar14,ppcVar6), ppcVar3 = ppcVar6, lVar14 != lVar5))\n              break;\n              lVar12 = lVar12 - lVar14;\n            }\n            print_error_message_001126c0(0,ppcVar3,0,0);\n            free(pvVar4);\n          }\n          else {\n            uVar11 = get_modified_filename_001125fa(archiveFilePath);\n            print_error_0011a110(uVar11);\n          }\n        }\n      }\n      else {\n        print_error_message_001126c0(0,archiveFilePath,0,0);\n      }\n      cVar1 = bfd_close_all_done(ppcVar6);\n      if (cVar1 == '\\0') {\n        print_error_message_001126c0(archiveFolderPath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archiveFolderPath);\n      DAT_00127a20 = 1;\n    }\n    *bytesRemaining = 0;\n    pvVar4 = (void *)xstrdup(*sourceFilePath);\n    if (DAT_00127a20 == 0) {\n      pcVar13 = bfd_close;\n    }\n    else {\n      pcVar13 = bfd_close_all_done;\n    }\n    cVar1 = (*pcVar13)(sourceFilePath);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      print_error_message_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*destinationFilePath);\n    cVar1 = bfd_close(destinationFilePath);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      print_error_message_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (tempDirectories != (undefined8 *)0x0) {\n    if (tempDirectories[2] == 0) {\n      rmdir((char *)tempDirectories[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempDirectories[1]);\n    }\n    free((void *)tempDirectories[1]);\n    puVar8 = (undefined8 *)*tempDirectories;\n    free(tempDirectories);\n    tempDirectories = puVar8;\n  }\n  rmdir(tempDirectory);\n  free(tempDirectory);\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done",
                "stat",
                "bfd_close",
                "xmalloc",
                "rmdir",
                "bfd_openw",
                "bfd_close",
                "__errno_location",
                "FUN_00114e50",
                "bfd_seek",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "concat",
                "printf",
                "FUN_0011a0e0",
                "FUN_00114b84",
                "FUN_001052a2",
                "chmod",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_bread",
                "bfd_get_arch",
                "FUN_0011a110",
                "FUN_00104ea2",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "xstrdup",
                "unlink",
                "free",
                "FUN_0011a350",
                "bfd_bwrite",
                "FUN_001125fa",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archived_files_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0011a110",
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_001126c0",
                "FUN_0011378f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_001126c0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "initialize_data_structure_00113ce0",
                "param_1": "input_param",
                "param_2": "count_param",
                "param_3": "undefined_param",
                "lVar1": "data_structure",
                "plVar2": "allocated_data",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ninitialize_data_structure_00113ce0(long input_param,long count_param,undefined undefined_param,undefined8 param_4,undefined8 param_5)\n\n{\n  long data_structure;\n  long *allocated_data;\n  undefined result [16];\n  \n  if (input_param != 0) {\n    data_structure = initialize_data_structure_00113ce0_00112904(0xd,0);\n    if (data_structure != 0) {\n      allocated_data = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_data + 0x11) = 0;\n      *allocated_data = input_param;\n      *(undefined4 *)((long)allocated_data + 0x14) = 0;\n      allocated_data[1] = count_param;\n      *(undefined *)(allocated_data + 2) = undefined_param;\n      *(long **)(data_structure + 0x10) = allocated_data;\n      goto LAB_00113d2f;\n    }\n  }\n  data_structure = 0;\nLAB_00113d2f:\n  result._8_8_ = param_5;\n  result._0_8_ = data_structure;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_expand_buffer_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "start_position",
                "unaff_R14": "end_position",
                "sVar4": "read_size",
                "iVar1": "error_flag",
                "uVar2": "error_message",
                "uVar3": "error_category"
            },
            "code": "\nvoid read_and_expand_buffer_00114dc7(void)\n\n{\n  int error_flag;\n  undefined8 error_message;\n  undefined8 error_category;\n  size_t read_size;\n  FILE *file;\n  long buffer;\n  long start_position;\n  long end_position;\n  \n  while( true ) {\n    read_size = fread((void *)(*(long *)(buffer + 0x20) + start_position),1,end_position - start_position,\n                  file);\n    error_flag = ferror(file);\n    if (error_flag != 0) {\n      error_category = *(undefined8 *)(buffer + 0x10);\n      error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_and_exit_error_00119dd0(error_message,error_category);\n    }\n    start_position = start_position + read_size;\n    error_flag = feof(file);\n    if (error_flag != 0) break;\n    if (start_position == end_position) {\n      end_position = start_position * 2;\n      error_category = xrealloc(*(undefined8 *)(buffer + 0x20),end_position);\n      *(undefined8 *)(buffer + 0x20) = error_category;\n    }\n  }\n  *(long *)(buffer + 0x18) = start_position;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "fclose",
                "ferror",
                "FUN_00119dd0",
                "xrealloc",
                "dcgettext",
                "FUN_00114dc7",
                "fread",
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_expand_buffer_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "improve_and_print_bfd_header_00119f70",
                "param_1": "header",
                "param_2": "data",
                "uVar1": "status",
                "cVar2": "flag",
                "iVar3": "index",
                "uVar4": "header_endianness",
                "uVar5": "data_endianness",
                "__format": "format_string",
                "lVar6": "allocation_size",
                "uVar7": "header_data",
                "lVar8": "realloc_result"
            },
            "code": "\nundefined4 improve_and_print_bfd_header_00119f70(undefined8 *header,undefined8 *data)\n\n{\n  undefined4 status;\n  char flag;\n  int index;\n  undefined8 header_endianness;\n  undefined8 data_endianness;\n  char *format_string;\n  long allocation_size;\n  undefined8 header_data;\n  long realloc_result;\n  \n  index = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = index;\n  if ((ulong)data[2] < (ulong)((long)index * 0x60)) {\n    allocation_size = 0x3000;\n    if (0x3f < index) {\n      allocation_size = (long)index * 0xc0;\n    }\n    realloc_result = xrealloc(data[3]);\n    data[3] = realloc_result;\n    memset((void *)(realloc_result + data[2]),0,allocation_size - data[2]);\n    data[2] = allocation_size;\n  }\n  status = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header;\n  header_endianness = determine_endianness_00114e00(status);\n  data_endianness = determine_endianness_00114e00(*(undefined4 *)(header + 2));\n  header_data = *header;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,header_data,data_endianness,header_endianness);\n  allocation_size = bfd_openw(*data,*header);\n  if (allocation_size == 0) {\n    print_error_0011a110(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    index = 2;\n    flag = bfd_set_format(allocation_size,1);\n    if (flag == '\\0') {\n      index = bfd_get_error();\n      if (index != 5) {\n        print_error_0011a110(*header);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        flag = (**(code **)(*(long *)(allocation_size + 8) + 0x2a0))(allocation_size,index,0);\n        if (flag != '\\0') {\n          header_data = bfd_printable_arch_mach(index,0);\n          printf(\"  %s\\n\",header_data);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    bfd_close_all_done(allocation_size);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "called": [
                "memset",
                "bfd_set_format",
                "FUN_0011a110",
                "bfd_openw",
                "xrealloc",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_get_error",
                "FUN_00114e00",
                "printf",
                "FUN_001053d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "improve_and_print_bfd_header_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_contents_00115a90",
                "param_1": "srcFileDescriptor",
                "param_2": "destFilePath",
                "param_3": "fileInfoPointer",
                "iVar1": "originalErrno",
                "__fd": "destFileDescriptor",
                "iVar2": "numBytesRead",
                "_Var3": "currentFilePosition",
                "uVar4": "returnValue",
                "sVar5": "numBytesWritten",
                "piVar6": "errnoLocation",
                "local_2038": "buffer"
            },
            "code": "\nulong copyFileContents_00115a90(int srcFileDescriptor,char *destFilePath,long fileInfoPointer)\n\n{\n  int originalErrno;\n  int destFileDescriptor;\n  int numBytesRead;\n  __off_t currentFilePosition;\n  ulong returnValue;\n  size_t numBytesWritten;\n  int *errnoLocation;\n  undefined buffer [8200];\n  \n  if ((-1 < srcFileDescriptor) && (currentFilePosition = lseek(srcFileDescriptor,0,0), currentFilePosition == 0)) {\n    destFileDescriptor = open(destFilePath,0x201);\n    if (destFileDescriptor < 0) {\n      returnValue = close_handle_and_return_error_00108237();\n      return returnValue;\n    }\n    do {\n      returnValue = read(srcFileDescriptor,buffer,0x2000);\n      numBytesRead = (int)returnValue;\n      if (numBytesRead < 1) {\n        errnoLocation = __errno_location();\n        originalErrno = *errnoLocation;\n        fchmod(destFileDescriptor,*(__mode_t *)(fileInfoPointer + 0x18));\n        close(srcFileDescriptor);\n        close(destFileDescriptor);\n        if (numBytesRead != 0) {\n          *errnoLocation = originalErrno;\n          return 0xffffffff;\n        }\n        return returnValue & 0xffffffff;\n      }\n      numBytesWritten = write(destFileDescriptor,buffer,(long)numBytesRead);\n    } while (numBytesWritten == (long)numBytesRead);\n    errnoLocation = __errno_location();\n    numBytesRead = *errnoLocation;\n    close(srcFileDescriptor);\n    close(destFileDescriptor);\n    *errnoLocation = numBytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "close",
                "__errno_location",
                "open",
                "write",
                "fchmod",
                "FUN_00108237",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_contents_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_print_error_message_00108200",
                "unaff_RBP": "fileToCopy",
                "unaff_R12B": "shouldSetTime",
                "unaff_R13": "fileCopyError",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation",
                "auVar3": "returnValues",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined  [16] copyFileAndPrintErrorMessage_00108200(void)\n\n{\n  int *errnoLocation;\n  undefined8 errorMessage;\n  char *fileToCopy;\n  char shouldSetTime;\n  ulong fileCopyError;\n  undefined returnValues [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00119ed0(errorMessage);\n  unlink(fileToCopy);\n  if (shouldSetTime != '\\0') {\n    set_time_0011a350();\n  }\n  returnValues._0_8_ = fileCopyError & 0xffffffff;\n  returnValues._8_8_ = returnAddress;\n  return returnValues;\n}\n\n",
            "called": [
                "__errno_location",
                "unlink",
                "dcgettext",
                "FUN_0011a350",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_and_print_error_message_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 297090,
    "layers": [
        [
            "FUN_0010ab4d",
            "FUN_0010be88",
            "FUN_00119e70",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_00114cf0",
            "FUN_001054af",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00109c2e",
            "FUN_001052a2",
            "FUN_0011a1b0",
            "FUN_0010911f",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00113f20",
            "FUN_00109022",
            "FUN_00109b52",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00114e00",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_00108fe8",
            "FUN_001129f4",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_001082c3",
            "FUN_00114d50",
            "FUN_00108800",
            "FUN_00104d1c",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_00104c36",
            "FUN_00119970",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a110",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_0011a250",
            "FUN_0010875d",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62"
        ],
        [
            "FUN_00113dfe",
            "FUN_0010c218",
            "FUN_0010aa53",
            "FUN_0010bc80",
            "FUN_0010a181",
            "FUN_00113bfa",
            "FUN_00109e76",
            "FUN_00112996",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_001053d5",
            "FUN_0010c05d",
            "FUN_00113e17",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_00113e23",
            "FUN_0010a2b9",
            "FUN_00119ed0",
            "FUN_0011a0e0",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010abdd",
            "FUN_00113c43",
            "FUN_0010a94e",
            "FUN_0010a0e9",
            "FUN_00113d6e",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00109cf4",
            "FUN_0010a77a",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00113da9",
            "FUN_0010a69a",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_00113cb9",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_00113ce0",
            "FUN_00119f70",
            "FUN_00115a90"
        ],
        [
            "FUN_0010ba08",
            "FUN_00108466",
            "FUN_001199d0",
            "FUN_0010c139",
            "FUN_00109d3e",
            "FUN_00104cc1",
            "FUN_00108375",
            "FUN_0010afd5",
            "FUN_001053b5",
            "FUN_00109d5c",
            "FUN_0010da0b",
            "FUN_00108d9a",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_0011a2e0",
            "FUN_00104ad6",
            "FUN_0010adf2",
            "FUN_00113f50",
            "FUN_00104966",
            "FUN_0010808f",
            "FUN_00105828",
            "FUN_0010bba1",
            "FUN_00115f30",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010c2d2",
            "FUN_001083de",
            "FUN_0010a83e",
            "FUN_00104d25",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00119940",
            "FUN_00109dfe",
            "FUN_00109ab1",
            "FUN_0010543c",
            "FUN_00114c80",
            "FUN_0010882c",
            "FUN_0011a350",
            "FUN_0010e2f0",
            "FUN_00114190",
            "FUN_00114dc7"
        ],
        [
            "FUN_0011173a",
            "thunk_FUN_0010e439",
            "FUN_0010e439",
            "FUN_0010a083",
            "FUN_0010e453",
            "FUN_0010ed2c",
            "FUN_0010e9a0",
            "FUN_00108179",
            "FUN_0010e8a9",
            "FUN_0010829e",
            "FUN_0010ec73",
            "FUN_00115970",
            "FUN_0010a0a0",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00114690",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114c20",
            "FUN_0010b948",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_0010a424",
            "FUN_0010ebb0",
            "FUN_0010e918",
            "FUN_0010c892",
            "FUN_0010e842",
            "FUN_0010eafe",
            "FUN_00104ea2",
            "FUN_00108200"
        ],
        [
            "FUN_00112502",
            "FUN_00108072",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": []
}