{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_data_00113dfe",
                "param_1": "typeIndex",
                "param_2": "newValue",
                "lVar1": "typePtr"
            },
            "code": "\nvoid updateData_00113dfe(undefined4 typeIndex,undefined newValue)\n\n{\n  long typePtr;\n  \n  typePtr = debug_make_type_constprop_0(3,typeIndex);\n  if (typePtr != 0) {\n    *(undefined *)(typePtr + 0x10) = newValue;\n  }\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_type",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "update_data_00113dfe"
        },
        "FUN_001045d0": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001045d0"
        },
        "FUN_001044b0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "bfd_nonfatal.cold",
                "debug_find_named_type",
                "display_info.isra.0",
                "debug_record_function",
                "stab_demangle_v3_arglist",
                "debug_add_to_current_namespace.constprop.0",
                "stab_find_type",
                "stab_demangle_v3_arg",
                "debug_tag_type",
                "debug_get_real_type.isra.0",
                "stab_context",
                "debug_record_variable",
                "parse_stab",
                "list_supported_targets",
                "debug_name_type",
                "list_matching_formats",
                "finish_stab",
                "parse_stab_type",
                "debug_record_parameter",
                "copy_usage",
                "debug_end_block",
                "main",
                "debug_end_function",
                "bad_stab",
                "warn_stab",
                "stab_bad_demangle",
                "debug_start_block",
                "report",
                "bfd_nonfatal_message",
                "strip_usage",
                "debug_record_line",
                "debug_write_type.constprop.0",
                "FUN_0010554f",
                "debug_start_source",
                "stab_find_slot"
            ],
            "imported": false,
            "current_name": "FUN_001044b0"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "extract_and_update_tag_0010ab4d",
                "param_1": "binary_address",
                "param_2": "tag_name",
                "uVar1": "binary_ptr",
                "lVar2": "binary_ptr_2",
                "auVar3": "result_1",
                "sVar4": "tag_name_len",
                "pcVar5": "existing_tag_value",
                "sVar6": "existing_tag_value_len",
                "auVar7": "result_2"
            },
            "code": "\nundefined  [16] extract_and_update_tag_0010ab4d(long binary_address,char *tag_name,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong binary_ptr;\n  long binary_ptr_2;\n  undefined result_1 [16];\n  size_t tag_name_len;\n  char *existing_tag_value;\n  size_t existing_tag_value_len;\n  undefined result_2 [16];\n  \n  binary_ptr = *(ulong *)(binary_address + 0x60);\n  if ((binary_ptr != 0) && (*(long *)(binary_ptr + 0x20) != 0)) {\n    existing_tag_value = *(char **)(binary_ptr + 0x30);\n    tag_name_len = strlen(tag_name);\n    if (existing_tag_value == (char *)0x0) {\n      existing_tag_value = (char *)xmalloc(tag_name_len + 3);\n      *existing_tag_value = '\\0';\n    }\n    else {\n      existing_tag_value_len = strlen(existing_tag_value);\n      existing_tag_value = (char *)xrealloc(existing_tag_value,tag_name_len + 4 + existing_tag_value_len);\n    }\n    tag_name_len = strlen(existing_tag_value);\n    sprintf(existing_tag_value + tag_name_len,\"%s::\",tag_name);\n    binary_ptr_2 = *(long *)(binary_address + 0x60);\n    *(char **)(binary_ptr_2 + 0x30) = existing_tag_value;\n    result_2._1_7_ = (undefined7)((ulong)binary_ptr_2 >> 8);\n    result_2[0] = 1;\n    result_2._8_8_ = param_4;\n    return result_2;\n  }\n  result_1._8_8_ = 0;\n  result_1._0_8_ = binary_ptr;\n  return result_1 << 0x40;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "extract_and_update_tag_0010ab4d"
        },
        "FUN_001046f0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046f0"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "add_debug_name_type_0010c218",
                "param_1": "filePtr",
                "param_2": "namePtr",
                "param_3": "type",
                "uVar1": "errorMsg",
                "lVar2": "typePtr",
                "pauVar3": "ptrArray",
                "lVar4": "result"
            },
            "code": "\n\n\nlong addDebugNameType_0010c218(long filePtr,long namePtr,long type)\n\n{\n  undefined8 errorMsg;\n  long typePtr;\n  undefined (*ptrArray) [16];\n  long result;\n  \n  if ((namePtr != 0) && (type != 0)) {\n    if ((*(long *)(filePtr + 8) == 0) || (*(long *)(filePtr + 0x10) == 0)) {\n      errorMsg = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",errorMsg);\n    }\n    else {\n      typePtr = debug_make_type_constprop_0(0x16,0);\n      if (typePtr != 0) {\n        ptrArray = (undefined (*) [16])xmalloc(0x10);\n        result = *(long *)(filePtr + 0x10);\n        *ptrArray = ZEXT816(0);\n        *(long *)(*ptrArray + 8) = type;\n        *(undefined (**) [16])(typePtr + 0x10) = ptrArray;\n        result = debug_add_to_namespace_constprop_0(result + 0x10,namePtr,0,3);\n        if (result != 0) {\n          *(long *)(result + 0x20) = typePtr;\n          *(long *)*ptrArray = result;\n          return typePtr;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_find_type",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "add_debug_name_type_0010c218"
        },
        "FUN_00128060": {
            "renaming": {},
            "code": "\n\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128060",
            "calling": [
                "strncpy"
            ],
            "imported": false,
            "current_name": "FUN_00128060"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  strip_symbols = 0;\n  discard_locals = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = program_name;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = is_strip;\n  if ((int)is_strip < 0) {\n    sVar15 = strlen(program_name);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  is_strip = uVar10;\n  strip_specific_htab = create_symbol_htab();\n  strip_unneeded_htab = create_symbol_htab();\n  keep_specific_htab = create_symbol_htab();\n  localize_specific_htab = create_symbol_htab();\n  globalize_specific_htab = create_symbol_htab();\n  keepglobal_specific_htab = create_symbol_htab();\n  weaken_specific_htab = create_symbol_htab();\n  redefine_specific_htab = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  redefine_specific_reverse_htab = create_symbol_htab();\n  puVar6 = xatexit_head_lto_priv_0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(xatexit_head_lto_priv_0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    xatexit_head_lto_priv_0 = (undefined *)puVar20;\n  }\n  puVar6 = xatexit_head_lto_priv_0;\n  iVar11 = *(int *)(xatexit_head_lto_priv_0 + 8);\n  *(int *)(xatexit_head_lto_priv_0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (is_strip != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",strip_options);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        deterministic = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        merge_notes = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        strip_symbols = 2;\n        break;\n      case 0x55:\n        deterministic = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        discard_locals = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        preserve_dates = 1;\n        break;\n      case 0x73:\n        strip_symbols = 7;\n        break;\n      case 0x76:\n        verbose = 1;\n        break;\n      case 0x77:\n        wildcard = 1;\n        break;\n      case 0x78:\n        discard_locals = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        keep_file_symbols = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        keep_section_symbols = 1;\n        break;\n      case 0xba:\n        merge_notes = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        strip_symbols = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        strip_symbols = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (strip_symbols < 8)) &&\n           ((-0xdaL >> ((byte)strip_symbols & 0x3f) & 1U) == 0)) {\n          merge_notes = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (deterministic < 0) {\n          deterministic = 1;\n        }\n        if (((strip_symbols | discard_locals) == 0) &&\n           (lVar30 = htab_elements(strip_specific_htab), lVar30 == 0)) {\n          strip_symbols = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = strip_options;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",copy_options);\n  pFVar14 = _optarg;\n  uVar10 = reverse_bytes;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return status;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((interleave != 0) && (copy_byte == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (interleave <= copy_byte) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (interleave - copy_byte < copy_width) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (deterministic < 0) {\n    deterministic = 1;\n  }\n  if ((strip_symbols | discard_locals) == 0) {\n    strip_symbols = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (pe_subsystem == -1) {\n        pe_subsystem = (short)iVar11;\n      }\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (status == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,preserve_dates);\n    status = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = change_sections;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(strip_specific_buffer);\n  free(strip_unneeded_buffer);\n  free(keep_specific_buffer);\n  free(localize_specific_buffer);\n  free(globalize_specific_buffer);\n  free(keepglobal_specific_buffer);\n  free(weaken_specific_buffer);\n  return status;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = status;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return status;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    status = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    status = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (status == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,preserve_dates);\n      status = uVar10;\n      if (iVar11 != 0) {\n        status = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  strip_symbols = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)section_rename_list;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)section_rename_list;\n    section_rename_list = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    deterministic = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(keepglobal_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(localize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    merge_notes = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    strip_symbols = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    deterministic = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(weaken_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    discard_locals = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_byte = (int)lVar30;\n    if (copy_byte < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    strip_symbols = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      interleave = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      interleave = (int)lVar30;\n      if (interleave < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    sections_copied = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    preserve_dates = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    verbose = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    wildcard = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    discard_locals = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    add_sections = init_section_add(_optarg,add_sections,\"--add-section\");\n    section_add_load_file(add_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    long_section_names = 1;\n    gnu_debuglink_filename = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = add_sym_list;\n        bVar39 = add_sym_list == (undefined8 *)0x0;\n        add_sym_list = puVar20;\n        if (bVar39) {\n          add_sym_tail = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)add_sym_tail = puVar20;\n    add_sym_tail = (undefined *)puVar20;\nLAB_00117e65:\n    add_symbols = add_symbols + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    use_alt_mach_code = strtoul((char *)_optarg,(char **)0x0,0);\n    if (use_alt_mach_code == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    change_section_address = parse_vma(_optarg,\"--change-addresses\");\n    change_start = change_section_address;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    change_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    change_start = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      do_debug_sections = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      do_debug_sections = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      do_debug_sections = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      do_debug_sections = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    convert_debugging = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    do_debug_sections = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    dump_sections = init_section_add(_optarg,dump_sections,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    strip_symbols = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    extract_symbol = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    pe_file_alignment = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    gap_fill = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    gap_fill_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(globalize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,globalize_specific_htab,&globalize_specific_buffer);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    pe_heap_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_heap_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    pe_image_base = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x100;\n    bfd_flags_to_set = bfd_flags_to_set & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_width = (int)lVar30;\n    if (copy_width < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,keepglobal_specific_htab,&keepglobal_specific_buffer);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    keep_file_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,keep_specific_htab,&keep_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    keep_section_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    localize_hidden = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,localize_specific_htab,&localize_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      long_section_names = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    merge_notes = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    strip_symbols = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    pad_to = parse_vma(_optarg,\"--pad-to\");\n    pad_to_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    prefix_alloc_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    prefix_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    prefix_symbols_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    bfd_flags_to_set = bfd_flags_to_set | 0x100;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    bfd_flags_to_set = bfd_flags_to_set | 0x80;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    remove_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)reverse_bytes;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    reverse_bytes = (uint)uVar27;\n    if (((int)reverse_bytes < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != reverse_bytes) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    pe_section_alignment = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    set_start = parse_vma(_optarg,\"--set-start\");\n    set_start_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    pe_stack_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_stack_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    strip_symbols = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,strip_specific_htab,&strip_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    strip_symbols = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(strip_unneeded_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,strip_unneeded_htab,&strip_unneeded_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      pe_major_subsystem_version = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        pe_minor_subsystem_version = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      pe_subsystem = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&v_0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0 + (long)unaff_R13 * 2;\n      pe_subsystem = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    update_sections = init_section_add(_optarg,update_sections,\"--update-section\");\n    section_add_load_file(update_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    weaken = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,weaken_specific_htab,&weaken_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x80;\n    bfd_flags_to_set = bfd_flags_to_set & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "called": [
                "fseek",
                "xstrdup",
                "bfd_set_default_target",
                "delete_symbol_htabs",
                "display_info.isra.0",
                "xatexit_cleanup.lto_priv.0",
                "setlocale",
                "filename_cmp",
                "textdomain",
                "parse_flags",
                "getc",
                "htab_create_alloc",
                "section_add_load_file",
                "malloc",
                "bfd_set_error_program_name",
                "non_fatal",
                "fopen",
                "smart_rename",
                "xcalloc",
                "fread",
                "bfd_scan_arch",
                "strlen",
                "dcgettext",
                "memcpy",
                "mkstemp",
                "strcpy",
                "xmalloc",
                "htab_hash_redefnode",
                "bfd_nonfatal_message",
                "close",
                "bfd_init",
                "create_symbol_htab",
                "strchr",
                "bfd_errmsg",
                "startswith.lto_priv.0.lto_priv.0",
                "htab_find_slot",
                "template_in_dir",
                "print_version",
                "stat",
                "ftell",
                "add_redefine_and_check",
                "xexit",
                "xrealloc",
                "htab_elements",
                "copy_file",
                "find_section_list",
                "strtoul",
                "strcasecmp",
                "get_file_size",
                "unlink_if_ordinary",
                "strtol",
                "xmalloc_set_program_name",
                "ferror",
                "strncasecmp",
                "dup",
                "strncpy",
                "free",
                "add_specific_symbols",
                "bindtextdomain",
                "strerror",
                "fprintf",
                "init_section_add",
                "copy_usage",
                "memmove",
                "fatal",
                "strcmp",
                "__errno_location",
                "eq_string_redefnode",
                "handle_remove_section_option",
                "bfd_get_error",
                "strip_usage",
                "fclose",
                "getopt_long",
                "parse_vma",
                "xstrndup",
                "convert_efi_target",
                "free"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_00128180": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128180",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_00128180"
        },
        "FUN_00104090": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "delete_symbol_htabs"
            ],
            "imported": false,
            "current_name": "FUN_00104090"
        },
        "FUN_00128068": {
            "renaming": {},
            "code": "\n\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128068",
            "calling": [
                "strncmp"
            ],
            "imported": false,
            "current_name": "FUN_00128068"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_debugging_0010be88",
                "param_1": "inputPtr",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "puVar1": "blockPtr",
                "uVar2": "success",
                "puVar3": "allocatedMemoryPtr",
                "puVar4": "currentPtr",
                "puVar6": "lastPtr",
                "puVar7": "tempPtr",
                "bVar8": "flag",
                "auVar9": "result",
                "lVar5": "blockOffset"
            },
            "code": "\n\n\nundefined  [16] startBlockDebugging_0010be88(long inputPtr,undefined8 data1,undefined8 data2,undefined8 data3)\n\n{\n  undefined8 *blockPtr;\n  undefined8 success;\n  undefined4 *allocatedMemoryPtr;\n  undefined8 *currentPtr;\n  long blockOffset;\n  undefined8 *lastPtr;\n  undefined4 *tempPtr;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  if ((*(long *)(inputPtr + 8) == 0) || (*(long *)(inputPtr + 0x20) == 0)) {\n    success = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",success);\n    success = 0;\n  }\n  else {\n    allocatedMemoryPtr = (undefined4 *)xmalloc(0x30);\n    tempPtr = allocatedMemoryPtr;\n    for (blockOffset = 0xc; blockOffset != 0; blockOffset = blockOffset + -1) {\n      *tempPtr = 0;\n      tempPtr = tempPtr + (ulong)flag * -2 + 1;\n    }\n    blockOffset = *(long *)(inputPtr + 0x20);\n    *(undefined8 *)(allocatedMemoryPtr + 6) = data1;\n    *(undefined8 *)(allocatedMemoryPtr + 8) = 0xffffffffffffffff;\n    *(long *)(allocatedMemoryPtr + 2) = blockOffset;\n    blockPtr = *(undefined8 **)(blockOffset + 0x10);\n    lastPtr = (undefined8 *)(blockOffset + 0x10);\n    while (currentPtr = blockPtr, currentPtr != (undefined8 *)0x0) {\n      lastPtr = currentPtr;\n      blockPtr = (undefined8 *)*currentPtr;\n    }\n    *lastPtr = allocatedMemoryPtr;\n    success = 1;\n    *(undefined4 **)(inputPtr + 0x20) = allocatedMemoryPtr;\n  }\n  result._8_8_ = data3;\n  result._0_8_ = success;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_block_debugging_0010be88"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "format_struct_info_0010ba08",
                "param_1": "paramArray",
                "param_2": "fieldName",
                "param_3": "fieldValue",
                "param_4": "fieldSize",
                "param_5": "flag",
                "cVar1": "flagValue",
                "iVar2": "intValue",
                "lVar3": "longValue",
                "__s": "structName",
                "sVar4": "strLen1",
                "sVar5": "strLen2",
                "sVar6": "strLen3",
                "__s_00": "formattedString",
                "uVar7": "warningString",
                "uVar8": "returnValue",
                "pcVar9": "optionalString",
                "stab_pop_type": "popType",
                "xmalloc": "allocateMemory",
                "strlen": "getStringLength",
                "sprintf": "formatString",
                "free": "deallocateMemory",
                "dcgettext": "translateString",
                "non_fatal": "handleError",
                "abort": "terminateProgram",
                "CONCAT71": "concatenate",
                "ulong": "ulongType"
            },
            "code": "\nundefined8\nformatStructInfo_0010ba08(undefined8 *paramArray,char *fieldName,undefined8 fieldValue,ulongType fieldSize,int flag)\n\n{\n  char flagValue;\n  int intValue;\n  long longValue;\n  char *structName;\n  size_t strLen1;\n  size_t strLen2;\n  size_t strLen3;\n  char *formattedString;\n  undefined8 warningString;\n  undefined8 returnValue;\n  char *optionalString;\n  \n  flagValue = *(char *)(paramArray[0xc] + 0x1c);\n  intValue = *(int *)(paramArray[0xc] + 0x18);\n  structName = (char *)popType();\n  if (*(char **)(paramArray[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    strLen1 = getStringLength(*(char **)(paramArray[0xc] + 0x20));\n    strLen2 = getStringLength(fieldName);\n    strLen3 = getStringLength(structName);\n    formattedString = (char *)allocateMemory(strLen1 + 0x32 + strLen2 + strLen3);\n    if (flag == 1) {\n      optionalString = \"/1\";\n    }\n    else {\n      optionalString = \"/0\";\n      if ((flag != 2) && (optionalString = \"\", flag != 0)) {\n                    \n        terminateProgram();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulongType)(uint)(intValue * 8), fieldSize == 0)) {\n      returnValue = *(undefined8 *)*paramArray;\n      warningString = translateString(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      handleError(warningString,returnValue,fieldName);\n    }\n    formatString(formattedString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(paramArray[0xc] + 0x20),fieldName,optionalString,structName,\n            fieldValue,fieldSize);\n    deallocateMemory(*(void **)(paramArray[0xc] + 0x20));\n    longValue = paramArray[0xc];\n    *(char **)(longValue + 0x20) = formattedString;\n    if (flagValue != '\\0') {\n      *(undefined *)(longValue + 0x1c) = 1;\n    }\n    returnValue = concatenate((int7)((ulongType)longValue >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "non_fatal",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "dcgettext",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_struct_info_0010ba08"
        },
        "FUN_00128188": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128188",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_00128188"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "write_data_to_buffer_0010aa53",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "flag",
                "param_4": "dataType",
                "cVar1": "value",
                "__s": "string",
                "sVar5": "length",
                "pcVar6": "newString",
                "lVar2": "ptrData",
                "uVar8": "result",
                "uVar9": "counter",
                "uVar10": "counter2",
                "cVar3": "charValue",
                "lVar7": "newPtrData"
            },
            "code": "\nundefined8 writeDataToBuffer_0010aa53(long buffer,undefined8 data,char flag,int dataType)\n\n{\n  char value;\n  long ptrData;\n  char charValue;\n  uint uVar4;\n  char *string;\n  size_t length;\n  char *newString;\n  long newPtrData;\n  undefined8 result;\n  ulong counter;\n  ulong counter2;\n  \n  value = *(char *)(*(long *)(buffer + 0x60) + 0x1c);\n  string = (char *)stab_pop_type();\n  length = strlen(string);\n  newString = (char *)xmalloc(length + 0x19);\n  *newString = flag + '0';\n  if (dataType == 1) {\n    charValue = '1';\n  }\n  else {\n    charValue = '0';\n    if ((dataType != 2) && (charValue = '2', dataType != 0)) {\n                    \n      abort();\n    }\n  }\n  newString[1] = charValue;\n  sprintf(newString + 2,\"%ld,%s;\",data);\n  free(string);\n  ptrData = *(long *)(buffer + 0x60);\n  result = 0;\n  if ((ptrData != 0) && (*(long *)(ptrData + 0x20) != 0)) {\n    ptrData = *(long *)(ptrData + 0x28);\n    counter2 = 0;\n    if (ptrData != 0) {\n      uVar4 = 0;\n      do {\n        counter = (ulong)uVar4;\n        counter2 = (ulong)uVar4;\n        uVar4 = uVar4 + 1;\n      } while (*(long *)(ptrData + counter * 8) != 0);\n    }\n    newPtrData = xrealloc(ptrData,(ulong)((int)counter2 + 2) << 3);\n    *(char **)(newPtrData + counter2 * 8) = newString;\n    *(undefined8 *)(newPtrData + (ulong)((int)counter2 + 1) * 8) = 0;\n    ptrData = *(long *)(buffer + 0x60);\n    *(long *)(ptrData + 0x28) = newPtrData;\n    if (value != '\\0') {\n      *(undefined *)(ptrData + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "abort",
                "sprintf",
                "xmalloc",
                "free",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "write_data_to_buffer_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "extract_stab_data_0011173a",
                "param_1": "param",
                "param_2": "stabs",
                "param_3": "opcode",
                "param_4": "size",
                "param_5": "line",
                "param_6": "string",
                "cVar1": "char1",
                "bVar2": "byte1",
                "__ptr": "ptr",
                "cVar3": "char2",
                "uVar4": "undefined",
                "iVar5": "intVar",
                "puVar6": "ptrVar",
                "plVar7": "longPtrVar",
                "pcVar8": "charPtrVar",
                "uVar9": "undefinedVar",
                "lVar10": "longVar1",
                "lVar11": "longVar2",
                "lVar12": "longVar3",
                "pplVar13": "longPtrPtrVar1",
                "uVar14": "ulongVar1",
                "uVar15": "ulongVar2",
                "pcVar16": "charPtrVar2",
                "uVar17": "uintVar",
                "pplVar18": "longPtrPtrVar2",
                "dVar19": "doubleVar",
                "local_48": "localCharVar1",
                "local_40": "localLongPtrVar",
                "strlen": "calculateStringLength",
                "debug_set_filename": "setDebugFilename",
                "debug_start_source": "startDebugSource",
                "debug_end_function": "endDebugFunction",
                "strcmp": "compareStrings",
                "stab_emit_pending_vars": "emitPendingVars",
                "xmalloc": "allocateMemory",
                "xstrdup": "duplicateString",
                "concat": "concatenateStrings",
                "free": "freeMemory",
                "debug_record_line": "recordLine",
                "debug_tag_type": "tagType",
                "debug_name_type": "nameType",
                "debug_make_function_type_isra_0": "makeFunctionType",
                "debug_make_pointer_type_isra_0": "makePointerType",
                "warn_stab": "warnStab",
                "fprintf": "printFormattedString",
                "dcgettext": "getLocalizedText",
                "bad_stab": "handleBadStab",
                "debug_add_to_current_namespace_constprop_0": "addToCurrentNamespace",
                "parse_stab_type": "parseStabType",
                "debug_record_function": "recordFunction",
                "strtod": "convertToDouble",
                "debug_record_variable": "recordVariable",
                "debug_record_parameter": "recordParameter",
                "debug_start_block": "startBlock",
                "debug_end_block": "endBlock"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined extract_stab_data_0011173a(undefined8 param,long *stabs,int opcode,int size,ulong line,\n                      char *string)\n\n{\n  char char1;\n  byte byte1;\n  void *ptr;\n  char char2;\n  undefined undefined;\n  int intVar;\n  undefined8 *ptrVar;\n  long *longPtrVar;\n  char *charPtrVar;\n  undefined8 undefinedVar;\n  long longVar1;\n  long longVar2;\n  long longVar3;\n  long **longPtrPtrVar1;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  char *charPtrVar2;\n  uint uintVar;\n  long **longPtrPtrVar2;\n  double doubleVar;\n  char *localCharVar1;\n  long **localLongPtrVar [2];\n  \n  if (stabs[4] != 0) {\n    if (((opcode == 100) && (*string != '\\0')) && (stabs[5] == line)) goto LAB_00111a06;\n    char2 = setDebugFilename(param);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)stabs + 0x44) = 0;\n    *(undefined4 *)(stabs + 8) = 0;\n    stabs[9] = stabs[4];\n    if (*(char *)(stabs + 1) == '\\0') {\n      stabs[6] = stabs[5];\n    }\n    *(undefined4 *)(stabs + 0x10) = 1;\n    ptrVar = (undefined8 *)allocateMemory(8);\n    stabs[0x11] = (long)ptrVar;\n    *ptrVar = 0;\n    stabs[4] = 0;\n  }\n  calculateStringLength(string);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    undefined = startDebugSource(param,string);\n    return undefined;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      intVar = compareStrings(string,\"gcc2_compiled.\");\n      if (intVar == 0) {\n        *(undefined4 *)(stabs + 8) = 2;\n        return 1;\n      }\n      intVar = compareStrings(string,\"gcc_compiled.\");\n      if (intVar == 0) {\n        *(undefined4 *)(stabs + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)stabs + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*string == '\\0') {\n          if (*(char *)(stabs + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(stabs + 1) != '\\0') {\n            line = line + stabs[7];\n          }\n          char2 = emitPendingVars(param,stabs);\n          if (char2 != '\\0') {\n            char2 = endDebugFunction(param,line);\n            if (char2 != '\\0') {\n              *(undefined *)(stabs + 0xc) = 0;\n              stabs[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(stabs + 0xc) != '\\0') &&\n           ((line < (ulong)stabs[0xd] || (stabs[0xd] == 0xffffffffffffffff)))) {\n          stabs[0xd] = line;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(stabs + 0xc) != '\\0') {\n          ulongVar1 = line;\n          if (((*string != '\\0') && (ulongVar2 = stabs[0xd], ulongVar2 != 0xffffffffffffffff)) &&\n             (ulongVar1 = ulongVar2, line < ulongVar2)) {\n            ulongVar1 = line;\n          }\n          char2 = emitPendingVars(param,stabs);\n          if (char2 == '\\0') {\n            return 0;\n          }\n          char2 = endDebugFunction(param,ulongVar1);\n          if (char2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(stabs + 0xc) = 0;\n          stabs[0xd] = -1;\n        }\n        if (*string == '\\0') {\n          return 1;\n        }\n        ptr = (void *)stabs[4];\n        if (ptr == (void *)0x0) {\n          longVar3 = duplicateString(string);\n          stabs[4] = longVar3;\n        }\n        else {\n          if (*string == '/') {\n            longVar3 = duplicateString(string);\n          }\n          else {\n            longVar3 = concatenateStrings(ptr,string,0);\n          }\n          stabs[4] = longVar3;\n          freeMemory(ptr);\n        }\n        stabs[5] = line;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          longVar3 = 0;\n          if (*(char *)(stabs + 0xc) != '\\0') {\n            longVar3 = stabs[7];\n          }\n          undefined = recordLine(param,(long)size,longVar3 + line);\n          return undefined;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        longPtrVar = (long *)allocateMemory();\n        intVar = *(int *)(stabs + 0x10);\n        longVar1 = stabs[10];\n        longVar2 = stabs[0xb];\n        longPtrVar[5] = 0;\n        longVar3 = stabs[0x11];\n        *(int *)(longPtrVar + 4) = intVar;\n        uintVar = intVar + 1;\n        *(uint *)(stabs + 0x10) = uintVar;\n        *longPtrVar = longVar2;\n        longPtrVar[1] = longVar1;\n        longPtrVar[2] = (long)string;\n        longPtrVar[3] = line;\n        stabs[10] = (long)longPtrVar;\n        stabs[0xb] = (long)longPtrVar;\n        longVar3 = xrealloc(longVar3,(ulong)uintVar << 3);\n        uintVar = *(uint *)(longPtrVar + 4);\n        stabs[0x11] = longVar3;\n        *(undefined8 *)(longVar3 + (ulong)uintVar * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    charPtrVar = strchr(string,0x3a);\n    if ((charPtrVar != (char *)0x0) && ((charPtrVar[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(stabs + 0xc) != '\\0') {\n        ulongVar1 = stabs[0xd];\n        ulongVar2 = line;\n        if ((ulongVar1 != 0xffffffffffffffff) && (ulongVar2 = ulongVar1, line < ulongVar1)) {\n          ulongVar2 = line;\n        }\n        char2 = emitPendingVars(param,stabs);\n        if (char2 == '\\0') {\n          return 0;\n        }\n        char2 = endDebugFunction(param,ulongVar2);\n        if (char2 == '\\0') {\n          return 0;\n        }\n        stabs[0xd] = -1;\n      }\n      if (*(char *)(stabs + 1) != '\\0') {\n        stabs[7] = line;\n      }\n      *(undefined *)(stabs + 0xc) = 1;\n    }\n    localCharVar1 = strchr(string,0x3a);\n    if (localCharVar1 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localCharVar1[1] == ':') goto code_r0x00111cc7;\n    if (*string == '$') {\n      char2 = string[1];\n      charPtrVar2 = \"eh_throw\";\n      if (char2 != 'e') {\n        if (char2 < 'f') {\n          if ((char2 != 'X') && (char2 != '_')) {\nLAB_00111d1a:\n            undefinedVar = getLocalizedText(0,\"unknown C++ encoded name\",5);\n            warnStab(string,undefinedVar);\n          }\n        }\n        else {\n          charPtrVar2 = \"this\";\n          if (char2 == 't') goto LAB_00111d62;\n          if (char2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      charPtrVar2 = (char *)0x0;\n      if ((string != localCharVar1) && ((*string != ' ' || (localCharVar1 != string + 1)))) {\n        charPtrVar2 = (char *)savestring(string,(int)localCharVar1 - (int)string);\n      }\n    }\nLAB_00111d62:\n    byte1 = localCharVar1[1];\n    charPtrVar = localCharVar1 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte1 * 2) >> 2) & 1 |\n        (byte1 == 0x2d || byte1 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 4;\n      goto LAB_001123e8;\n    }\n    if (byte1 == 0) goto switchD_00111de5_caseD_44;\n    charPtrVar = localCharVar1 + 2;\n    char2 = localCharVar1[1];\n    switch(char2) {\n    case 'C':\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      charPtrVar = \"debug_record_label: not implemented\";\n      if (longVar3 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      char2 = recordFunction(param,charPtrVar2,longVar3,char2 == 'F',line);\n      if (char2 != '\\0') {\n        do {\n          if (*localCharVar1 != ';') {\n            return 1;\n          }\n          localCharVar1 = localCharVar1 + 1;\n          longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n        } while (longVar3 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      if (charPtrVar2 == (char *)0x0) goto LAB_0011208f;\n      longVar1 = stabs[3];\n      longPtrVar = (long *)stabs[2];\n      char2 = *(char *)(*(long *)(*stabs + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        localCharVar1 = charPtrVar;\n        do {\n          if (*localCharVar1 != ';') {\n            return 1;\n          }\n          localCharVar1 = localCharVar1 + 1;\n          longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n        } while (longVar3 != 0);\n        return 0;\n      }\n    case 'R':\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 2;\n      break;\n    case 'S':\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char2 = localCharVar1[2];\n      if (char2 == 't') {\n        charPtrVar = localCharVar1 + 3;\n      }\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,charPtrVar2,&localCharVar1,localLongPtrVar);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      if (charPtrVar2 == (char *)0x0) {\n        return 1;\n      }\n      char1 = *(char *)(stabs + 0x35);\n      longPtrVar = (long *)tagType(param,charPtrVar2,longVar3);\n      if (longPtrVar == (long *)0x0) {\n        return 0;\n      }\n      if (localLongPtrVar[0] != (long **)0x0) {\n        *localLongPtrVar[0] = longPtrVar;\n      }\n      if (char1 != '\\0') goto LAB_001122f0;\n      longPtrPtrVar1 = (long **)(stabs + 0x34);\n      longPtrPtrVar2 = (long **)stabs[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      charPtrVar = localCharVar1 + 3;\n      if (((localCharVar1[2] != '\\0') && (charPtrVar = localCharVar1 + 4, localCharVar1[3] == 'n')) &&\n         (charPtrVar = localCharVar1 + 5, charPtrVar2 = localCharVar1 + 4, localCharVar1 = charPtrVar, *charPtrVar2 == '0')) {\n        for (; charPtrVar = localCharVar1, *localCharVar1 != '\\0'; localCharVar1 = localCharVar1 + 1) {\n          if (*localCharVar1 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 4;\n      break;\n    case 'c':\n      if (localCharVar1[2] == '=') {\n        charPtrVar = localCharVar1 + 4;\n        char2 = localCharVar1[3];\n        localCharVar1 = charPtrVar;\n        if (char2 == 'i') {\n          longVar3 = strtol(charPtrVar,(char **)0x0,10);\n          if (charPtrVar2 == (char *)0x0) {\n            return 0;\n          }\n          longVar1 = addToCurrentNamespace(param,charPtrVar2,4);\n          if (longVar1 != 0) {\n            *(long *)(longVar1 + 0x20) = (long)(int)longVar3;\n            return 1;\n          }\n          return 0;\n        }\n        if (char2 == 'r') {\n          doubleVar = convertToDouble(charPtrVar,(char **)0x0);\n          if (charPtrVar2 == (char *)0x0) {\n            return 0;\n          }\n          longVar3 = addToCurrentNamespace(param,charPtrVar2,5);\n          if (longVar3 != 0) {\n            *(double *)(longVar3 + 0x20) = doubleVar;\n            return 1;\n          }\n          return 0;\n        }\n        if (char2 == 'e') {\n          longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n          if (longVar3 == 0) {\n            return 0;\n          }\n          charPtrVar = localCharVar1;\n          if (*localCharVar1 == ',') {\n            longVar1 = strtol(localCharVar1,(char **)0x0,10);\n            if (charPtrVar2 == (char *)0x0) {\n              return 0;\n            }\n            longVar2 = addToCurrentNamespace(param,charPtrVar2,6);\n            if (longVar2 != 0) {\n              longPtrVar = (long *)allocateMemory(0x10);\n              *longPtrVar = longVar3;\n              longPtrVar[1] = (long)(int)longVar1;\n              *(long **)(longVar2 + 0x20) = longPtrVar;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localCharVar1[2] == 'F') {\n        localCharVar1 = localCharVar1 + 3;\n        longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n        if (longVar3 == 0) {\n          return 0;\n        }\n        undefinedVar = makeFunctionType(longVar3,0,0);\n        longVar3 = makePointerType(undefinedVar);\n      }\n      else {\n        localCharVar1 = charPtrVar;\n        longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      }\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 1;\n      break;\n    case 'r':\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 5;\nLAB_001123e8:\n      char2 = stab_record_variable(param,stabs,charPtrVar2,longVar3,undefinedVar,line);\n      goto joined_r0x001123f8;\n    case 't':\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,charPtrVar2,&localCharVar1,localLongPtrVar);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      if (charPtrVar2 == (char *)0x0) {\n        return 1;\n      }\n      longPtrVar = (long *)nameType(param,charPtrVar2,longVar3);\n      if (longPtrVar == (long *)0x0) {\n        return 0;\n      }\n      if (localLongPtrVar[0] == (long **)0x0) {\n        return 1;\n      }\n      *localLongPtrVar[0] = longPtrVar;\n      return 1;\n    case 'v':\n      localCharVar1 = charPtrVar;\n      longVar3 = parseStabType(param,stabs,0,&localCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 3;\n    }\n    char2 = recordParameter(param,charPtrVar2,longVar3,undefinedVar,line);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)stabs + 0x44) != '\\0') && (size == 1)) {\n      return 1;\n    }\n    char2 = emitPendingVars(param,stabs);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    char2 = endBlock(param,stabs[7] + stabs[6] + line);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    stabs = stabs + 0xe;\n    *(int *)stabs = *(int *)stabs + -1;\n    charPtrVar = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)stabs) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        charPtrVar = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        charPtrVar = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefinedVar = getLocalizedText(0,charPtrVar,5);\n      printFormattedString(_stderr,\"%s\\n\",undefinedVar);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        intVar = *(int *)(stabs + 0x10);\n        *(uint *)(stabs + 0x10) = intVar + 1U;\n        longVar3 = xrealloc(stabs[0x11],(ulong)(intVar + 1U) << 3);\n        ptrVar = (undefined8 *)stabs[0xb];\n        stabs[0x11] = longVar3;\n        while( true ) {\n          if (ptrVar == (undefined8 *)0x0) {\n            undefinedVar = getLocalizedText(0,\"Undefined N_EXCL\",5);\n            warnStab(string,undefinedVar);\n            *(undefined8 *)(stabs[0x11] + (ulong)(*(int *)(stabs + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((line == ptrVar[3]) && (intVar = compareStrings((char *)ptrVar[2],string), intVar == 0))\n          break;\n          ptrVar = (undefined8 *)*ptrVar;\n        }\n        *(undefined8 *)(longVar3 + (ulong)(*(int *)(stabs + 0x10) - 1) * 8) = ptrVar[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        longVar3 = stabs[10];\n        if (longVar3 != 0) {\n          longVar1 = *(long *)(longVar3 + 8);\n          uintVar = *(uint *)(longVar3 + 0x20);\n          stabs[10] = longVar1;\n          if ((uintVar < *(uint *)(stabs + 0x10)) &&\n             (*(undefined8 *)(longVar3 + 0x28) = *(undefined8 *)(stabs[0x11] + (ulong)uintVar * 8),\n             longVar1 != 0)) {\n            string = *(char **)(longVar1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        string = (char *)stabs[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)stabs + 0x44) != '\\0') && (size == 1)) {\n      return 1;\n    }\n    if (*(char *)(stabs + 0xc) != '\\0') {\n      char2 = startBlock(param,stabs[7] + stabs[6] + line);\n      if (char2 == '\\0') {\n        return 0;\n      }\n      char2 = emitPendingVars(param,stabs);\n      if (char2 != '\\0') {\n        *(int *)(stabs + 0xe) = *(int *)(stabs + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    charPtrVar = \"N_LBRAC not within function\\n\";\n  }\n  charPtrVar = (char *)getLocalizedText(0,charPtrVar,5);\n  printFormattedString(_stderr,charPtrVar);\n  return 0;\ncode_r0x00111cc7:\n  localCharVar1 = localCharVar1 + 2;\n  localCharVar1 = strchr(localCharVar1,0x3a);\n  if (localCharVar1 == (char *)0x0) {\n    charPtrVar = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localCharVar1 = charPtrVar;\n    handleBadStab(string);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (longPtrPtrVar2 == (long **)0x0) {\nLAB_001122f0:\n    if (char2 != 't') {\n      return 1;\n    }\n    longPtrVar = (long *)nameType(param,charPtrVar2,longPtrVar);\n    if (longPtrVar != (long *)0x0) {\n      if (localLongPtrVar[0] == (long **)0x0) {\n        return 1;\n      }\n      *localLongPtrVar[0] = longPtrVar;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)longPtrPtrVar2[1] == *charPtrVar2) &&\n     (intVar = compareStrings((char *)longPtrPtrVar2[1],charPtrVar2), intVar == 0)) {\n    longPtrPtrVar2[3] = longPtrVar;\n    *longPtrPtrVar1 = *longPtrPtrVar2;\n    goto LAB_001122f0;\n  }\n  longPtrPtrVar1 = longPtrPtrVar2;\n  longPtrPtrVar2 = (long **)*longPtrPtrVar2;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVar1 < 1) {\nLAB_0011208f:\n    undefinedVar = 1;\nLAB_001121c4:\n    char2 = recordVariable(param,charPtrVar2,longVar3,undefinedVar,line);\njoined_r0x001123f8:\n    if (char2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  charPtrVar = *(char **)(*longPtrVar + 8);\n  if ((char2 != '\\0') && (char2 == *charPtrVar)) {\n    charPtrVar = charPtrVar + 1;\n  }\n  if ((*charPtrVar == *charPtrVar2) && (intVar = compareStrings(charPtrVar,charPtrVar2), intVar == 0)) {\n    line = *(long *)(*longPtrVar + 0x10) + *(long *)(*(long *)(*longPtrVar + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVar1 = longVar1 + -1;\n  longPtrVar = longPtrVar + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "xstrdup",
                "debug_record_function",
                "strtod",
                "stab_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "debug_tag_type",
                "strtol",
                "debug_record_variable",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "free",
                "parse_stab_type",
                "fprintf",
                "debug_record_parameter",
                "savestring",
                "debug_end_block",
                "debug_end_function",
                "strlen",
                "bad_stab",
                "dcgettext",
                "strcmp",
                "xmalloc",
                "warn_stab",
                "debug_start_block",
                "stab_emit_pending_vars",
                "strchr",
                "concat",
                "debug_set_filename",
                "debug_record_line",
                "debug_start_source",
                "debug_make_function_type.isra.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_stab_data_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "relocate_and_strip_00115dc0",
                "param_1": "binary",
                "param_2": "section_table",
                "param_3": "relocation_table",
                "cVar1": "symbol_specification_result",
                "iVar2": "error_code",
                "uVar3": "relocation_count",
                "lVar4": "relocated_symbol_address",
                "puVar5": "final_filtered_symbols",
                "uVar6": "relocated_symbols_count",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "puVar7": "filtered_relocated_symbols",
                "puVar8": "next_filtered_symbol",
                "uVar9": "final_filtered_symbols_count",
                "uStack_38": "stack_variable",
                "strip_symbols": "symbol_stripping_option",
                "isympp": "symbol_mapping"
            },
            "code": "\nvoid relocate_and_strip_00115dc0(undefined8 binary,undefined8 *section_table,long relocation_table)\n\n{\n  char symbol_specification_result;\n  int error_code;\n  undefined8 relocation_count;\n  long relocated_symbol_address;\n  undefined8 *final_filtered_symbols;\n  ulong relocated_symbols_count;\n  code *jump_table;\n  undefined8 *filtered_relocated_symbols;\n  undefined8 *next_filtered_symbol;\n  ulong final_filtered_symbols_count;\n  undefined8 stack_variable;\n  \n  symbol_specification_result = skip_section(binary,section_table,0);\n  if (symbol_specification_result != '\\0') {\n    return;\n  }\n  relocation_count = section_table[0xc];\n  if ((((*(byte *)(relocation_table + 0x48) & 7) != 3) && (symbol_stripping_option != 6)) &&\n     (relocated_symbol_address = find_section_list(*section_table,0,0x100), relocated_symbol_address == 0)) {\n    relocated_symbol_address = bfd_get_reloc_upper_bound(binary,section_table);\n    if (relocated_symbol_address < 0) {\n      if ((relocated_symbol_address != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n        status = 1;\n        relocation_count = 0;\nLAB_00108315:\n        bfd_nonfatal_message(0,binary,section_table,relocation_count,stack_variable);\n        return;\n      }\n    }\n    else if (relocated_symbol_address != 0) {\n      final_filtered_symbols = (undefined8 *)section_table[0xe];\n      if (final_filtered_symbols == (undefined8 *)0x0) {\n        final_filtered_symbols = (undefined8 *)bfd_alloc(relocation_table);\n        if (final_filtered_symbols == (undefined8 *)0x0) {\n          bfd_nonfatal(0);\n                    \n          xexit(1);\n        }\n        relocated_symbols_count = bfd_canonicalize_reloc(binary,section_table,final_filtered_symbols,symbol_mapping);\n        if ((long)relocated_symbols_count < 0) {\n          status = 1;\n          relocation_count = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocated_symbols_count = (ulong)*(uint *)(section_table + 0xf);\n      }\n      if (symbol_stripping_option == 7) {\n        filtered_relocated_symbols = final_filtered_symbols;\n        for (final_filtered_symbols_count = 0; final_filtered_symbols_count != relocated_symbols_count; final_filtered_symbols_count = final_filtered_symbols_count + 1) {\n          next_filtered_symbol = filtered_relocated_symbols;\n          if (((*(long **)final_filtered_symbols[final_filtered_symbols_count] != (long *)0x0) &&\n              (relocated_symbol_address = **(long **)final_filtered_symbols[final_filtered_symbols_count], relocated_symbol_address != 0)) &&\n             (symbol_specification_result = is_specified_symbol(*(undefined8 *)(relocated_symbol_address + 8),keep_specific_htab),\n             symbol_specification_result != '\\0')) {\n            next_filtered_symbol = filtered_relocated_symbols + 1;\n            *filtered_relocated_symbols = final_filtered_symbols[final_filtered_symbols_count];\n          }\n          filtered_relocated_symbols = next_filtered_symbol;\n        }\n        *filtered_relocated_symbols = 0;\n        relocated_symbols_count = (long)filtered_relocated_symbols - (long)final_filtered_symbols >> 3;\n      }\n      jump_table = *(code **)(*(long *)(relocation_table + 8) + 0x288);\n      if (relocated_symbols_count == 0) {\n        relocated_symbols_count = 0;\n        final_filtered_symbols = (undefined8 *)0x0;\n      }\n      else {\n        relocated_symbols_count = relocated_symbols_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocated_symbols_count = 0;\n  final_filtered_symbols = (undefined8 *)0x0;\n  jump_table = *(code **)(*(long *)(relocation_table + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(relocation_table,relocation_count,final_filtered_symbols,relocated_symbols_count);\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "bfd_nonfatal_message",
                "bfd_get_error",
                "skip_section",
                "dcgettext",
                "copy_relocations_in_section.cold",
                "bfd_get_reloc_upper_bound",
                "xexit",
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "relocate_and_strip_00115dc0"
        },
        "FUN_001044c0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001044c0"
        },
        "FUN_001043a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "copy_file",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001043a0"
        },
        "FUN_001045e0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "bfd_nonfatal.cold",
                "report",
                "bfd_nonfatal_message",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001045e0"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_symbol_0010d559",
                "param_1": "inputPointers",
                "param_2": "byteArrayPointers",
                "param_3": "resultCount",
                "bVar1": "currentByte",
                "pbVar2": "currentPointer",
                "cVar3": "demangledChar",
                "uVar4": "demangledCount",
                "iVar5": "strcmpResult",
                "ppcVar6": "tempPointer",
                "sVar7": "stringLength",
                "lVar8": "tempLong",
                "plVar9": "tempLongPointer",
                "pcVar10": "demangledString",
                "__s1": "typeString",
                "__ptr": "tempPointer",
                "pbVar11": "nextPointer",
                "uVar12": "taggedType"
            },
            "code": "\nundefined8 parseSymbol_0010d559(undefined8 *inputPointers,byte **byteArrayPointers,long *resultCount)\n\n{\n  byte currentByte;\n  byte *currentPointer;\n  char demangledChar;\n  uint demangledCount;\n  int strcmpResult;\n  char **tempPointer;\n  size_t stringLength;\n  long tempLong;\n  long *tempLongPointer;\n  char *demangledString;\n  char *typeString;\n  void *tempPointer;\n  byte *nextPointer;\n  undefined8 taggedType;\n  byte *__nptr;\n  int local_64;\n  char *local_40 [2];\n  \n  currentPointer = *byteArrayPointers;\n  currentByte = currentPointer[1];\n  if ((char)currentByte < ':') {\n    if ((char)currentByte < '1') goto LAB_0010d5d8;\n    local_64 = (char)currentByte + -0x30;\n    if (currentPointer[2] == 0x5f) {\n      *byteArrayPointers = currentPointer + 1;\n    }\n    nextPointer = *byteArrayPointers + 2;\n  }\n  else {\n    if (((currentByte != 0x5f) || (((&_sch_istable)[(ulong)currentPointer[2] * 2] & 4) == 0)) ||\n       (currentPointer[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = currentPointer + 2;\n    tempLong = strtol((char *)__nptr,(char **)0x0,10);\n    local_64 = (int)tempLong;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    nextPointer = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *byteArrayPointers = nextPointer;\n  tempPointer = (char **)0x0;\n  if (resultCount != (long *)0x0) {\n    tempPointer = local_40;\n  }\n  tempLong = 0;\n  while( true ) {\n    while( true ) {\n      local_64 = local_64 + -1;\n      if (local_64 == -1) {\n        if (resultCount != (long *)0x0) {\n          *resultCount = tempLong;\n        }\n        return 1;\n      }\n      if (**byteArrayPointers == 0x5f) {\n        *byteArrayPointers = *byteArrayPointers + 1;\n      }\n      if (**byteArrayPointers != 0x74) break;\n      demangledChar = stab_demangle_template(inputPointers,byteArrayPointers,tempPointer);\n      demangledString = local_40[0];\n      if (demangledChar == '\\0') {\n        return 0;\n      }\n      if (resultCount != (long *)0x0) {\n        stringLength = strlen(local_40[0]);\n        tempLong = stab_find_tagged_type(*inputPointers,inputPointers[1],demangledString,stringLength & 0xffffffff,9);\n        free(demangledString);\n        if (tempLong == 0) {\n          return 0;\n        }\n      }\n    }\n    demangledCount = stab_demangle_count(byteArrayPointers);\n    stringLength = strlen((char *)*byteArrayPointers);\n    if (stringLength < demangledCount) break;\n    if (resultCount != (long *)0x0) {\n      if ((tempLong != 0) && (tempLongPointer = (long *)debug_get_fields_isra_0(tempLong), tempLongPointer != (long *)0x0))\n      {\n        demangledString = (char *)savestring(*byteArrayPointers,demangledCount);\n        for (; tempLong = *tempLongPointer, tempLong != 0; tempLongPointer = tempLongPointer + 1) {\n          tempLong = *(long *)(tempLong + 8);\n          if (tempLong == 0) {\n            free(demangledString);\n            return 0;\n          }\n          typeString = (char *)debug_get_type_name_constprop_0(tempLong);\n          if ((typeString != (char *)0x0) && (strcmpResult = strcmp(typeString,demangledString), strcmpResult == 0)) break;\n        }\n        free(demangledString);\n        if (tempLong != 0) goto LAB_0010d7ad;\n      }\n      taggedType = 9;\n      if (local_64 == 0) {\n        tempPointer = (void *)savestring(*byteArrayPointers,demangledCount);\n        tempLong = debug_find_named_type(*inputPointers,tempPointer);\n        free(tempPointer);\n        if (tempLong != 0) goto LAB_0010d7ad;\n        taggedType = 0;\n      }\n      tempLong = stab_find_tagged_type(*inputPointers,inputPointers[1],*byteArrayPointers,demangledCount,taggedType);\n      if (tempLong == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *byteArrayPointers = *byteArrayPointers + demangledCount;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(currentPointer);\n  return 0;\n}\n\n",
            "called": [
                "debug_find_named_type",
                "savestring",
                "debug_get_fields.isra.0",
                "strlen",
                "stab_find_tagged_type",
                "stab_demangle_template",
                "free",
                "debug_get_type_name.constprop.0",
                "stab_demangle_count",
                "strcmp",
                "strtol",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_symbol_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "variableArguments",
                "fflush": "flushOutput",
                "fprintf": "printToErrorStream",
                "_stderr": "errorStream",
                "program_name": "programName",
                "vfprintf": "printFormattedToErrorStream",
                "putc": "putCharacterToErrorStream"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list variableArguments)\n\n{\n  flushOutput(_stdout);\n  printToErrorStream(errorStream,\"%s: \",programName);\n  printFormattedToErrorStream(errorStream,errorMessage,variableArguments);\n  putCharacterToErrorStream(10,errorStream);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00128290": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128290",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00128290"
        },
        "FUN_00128050": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128050",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00128050"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_function_00108466",
                "param_7": "dataPointer",
                "status": "currentStatus"
            },
            "code": "\nvoid cleanupFunction_00108466(void)\n\n{\n  void *dataPointer;\n  \n  currentStatus = 1;\n  bfd_nonfatal_message(0);\n  free(dataPointer);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "cleanup_function_00108466"
        },
        "FUN_00128298": {
            "renaming": {},
            "code": "\n\n\n\nint feof(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* feof@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128298",
            "calling": [
                "feof"
            ],
            "imported": false,
            "current_name": "FUN_00128298"
        },
        "FUN_00128058": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128058",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_00128058"
        },
        "FUN_00128178": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128178",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_00128178"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_digits_from_string_00108e76",
                "param_1": "input_string",
                "bVar1": "current_char",
                "iVar2": "result"
            },
            "code": "\nint extract_digits_from_string_00108e76(byte **input_string)\n\n{\n  byte current_char;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_char = **input_string;\n    if (((&_sch_istable)[(ulong)current_char * 2] & 4) == 0) break;\n    *input_string = *input_string + 1;\n    result = result * 10 + -0x30 + (int)(char)current_char;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "extract_digits_from_string_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "create_hash_function_0010bb52",
                "param_1": "input_value",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "lVar1": "hash_pointer"
            },
            "code": "\nlong create_hash_function_0010bb52(long input_value,undefined8 param_2_value,undefined8 param_3_value)\n\n{\n  long hash_pointer;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(param_2_value,0x30), input_value != 0)) &&\n     (hash_pointer = bfd_hash_newfunc(input_value,param_2_value,param_3_value), hash_pointer != 0)) {\n    *(undefined8 *)(hash_pointer + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_pointer + 0x18) = 0;\n    *(undefined4 *)(hash_pointer + 0x28) = 0;\n    return hash_pointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "create_hash_function_0010bb52"
        },
        "FUN_001043b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001043b0"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "directory_path",
                "param_2": "result",
                "iVar1": "access_result",
                "sStack_a8": "file_stats"
            },
            "code": "\nchar * check_directory_access_0011283f(char *directory_path,char *result)\n\n{\n  int access_result;\n  stat file_stats;\n  \n  if ((result == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&file_stats);\n      if ((access_result == 0) && ((file_stats.st_mode & 0xf000) == 0x4000)) {\n        result = directory_path;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "access",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "FUN_001045f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "copy_section",
                "FUN_00107880",
                "FUN_0010554f",
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001045f0"
        },
        "FUN_001044d0": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "FUN_001044d0"
        },
        "FUN_001284a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284a8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001284a8"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_and_set_errno_00108237",
                "piVar2": "errnoPtr",
                "unaff_R12D": "fileDescriptor",
                "iVar1": "prevErrno"
            },
            "code": "\nundefined8 closeAndSetErrno_00108237(void)\n\n{\n  int prevErrno;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  prevErrno = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = prevErrno;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "close_and_set_errno_00108237"
        },
        "FUN_00128088": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128088",
            "calling": [
                "strcpy"
            ],
            "imported": false,
            "current_name": "FUN_00128088"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "param_1": "function_handle",
                "param_2": "filename",
                "param_3": "line_number",
                "param_4": "flag",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "error_message",
                "plVar2": "debug_data",
                "puVar3": "debug_info",
                "lVar4": "result",
                "puVar5": "temp_ptr",
                "pcVar6": "temp_string",
                "bVar7": "flag_value",
                "auVar8": "return_value"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long function_handle,char *filename,long line_number,uint flag,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined8 error_message;\n  long *debug_data;\n  undefined4 *debug_info;\n  long result;\n  undefined4 *temp_ptr;\n  char *temp_string;\n  byte flag_value;\n  undefined return_value [16];\n  \n  flag_value = 0;\n  temp_string = \"\";\n  if (filename != (char *)0x0) {\n    temp_string = filename;\n  }\n  if (line_number != 0) {\n    if (*(long *)(function_handle + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      debug_data = (long *)xmalloc(0x18);\n      *debug_data = line_number;\n      *(undefined (*) [16])(debug_data + 1) = ZEXT816(0);\n      debug_info = (undefined4 *)xmalloc(0x30);\n      *(long **)(function_handle + 0x18) = debug_data;\n      debug_data[2] = (long)debug_info;\n      temp_ptr = debug_info;\n      for (result = 0xc; result != 0; result = result + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)flag_value * -2 + 1;\n      }\n      *(undefined4 **)(function_handle + 0x20) = debug_info;\n      result = *(long *)(function_handle + 0x10);\n      *(undefined8 *)(debug_info + 6) = param5;\n      *(undefined8 *)(debug_info + 8) = 0xffffffffffffffff;\n      result = debug_add_to_namespace_constprop_0(result + 0x10,temp_string,3,(flag & 0xff) + 1);\n      if (result != 0) {\n        *(long **)(result + 0x20) = debug_data;\n        error_message = CONCAT71((int7)((ulong)result >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param6;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_record_function_0010bc80"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = improved_code_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = isympp + uStack0000000000000010;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00107880",
                "non_fatal",
                "dcgettext",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_001042a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "display_info.isra.0.cold",
                "FUN_00107976",
                "print_version",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042a0"
        },
        "FUN_001044e0": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "main",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001044e0"
        },
        "FUN_001043c0": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "copy_file",
                "display_info.isra.0",
                "main",
                "simple_copy.cold",
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001043c0"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_and_initialize_path_00114cf0",
                "param_1": "path",
                "pcVar1": "lastDelimiter",
                "lVar2": "pathLength",
                "lVar3": "copyLength",
                "lVar4": "delimiterIndex",
                "pcVar5": "copyPointer",
                "bVar6": "isUnixPath",
                "xmalloc": "allocateMemory"
            },
            "code": "\nvoid allocateAndInitializePath_00114cf0(char *path)\n\n{\n  char *lastDelimiter;\n  long pathLength;\n  long copyLength;\n  long delimiterIndex;\n  char *copyPointer;\n  byte isUnixPath;\n  \n  isUnixPath = 0;\n  lastDelimiter = strrchr(path,0x2f);\n  if (lastDelimiter == (char *)0x0) {\n    lastDelimiter = (char *)allocateMemory(9);\n    copyLength = 0;\n  }\n  else {\n    delimiterIndex = (long)lastDelimiter - (long)path;\n    lastDelimiter = (char *)allocateMemory(delimiterIndex + 0xb);\n    copyLength = delimiterIndex + 1;\n    copyPointer = lastDelimiter;\n    for (pathLength = delimiterIndex; pathLength != 0; pathLength = pathLength + -1) {\n      *copyPointer = *path;\n      path = path + (ulong)isUnixPath * -2 + 1;\n      copyPointer = copyPointer + (ulong)isUnixPath * -2 + 1;\n    }\n    lastDelimiter[delimiterIndex] = '/';\n  }\n  *(undefined8 *)(lastDelimiter + copyLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastDelimiter + copyLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "main",
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_path_00114cf0"
        },
        "FUN_0011a4b4": {
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_0011a4b4"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "parse_data_0010a181",
                "param_1": "data_ptr",
                "param_2": "start_index",
                "param_3": "end_index",
                "param_4": "flag",
                "cVar1": "char_value",
                "iVar2": "count",
                "iVar3": "result",
                "uVar4": "status",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "string1_length",
                "sVar6": "string2_length",
                "__s_01": "combined_string",
                "lVar7": "count_value",
                "local_41": "local_flag"
            },
            "code": "\nundefined4 parse_data_0010a181(long data_ptr,long start_index,long end_index,byte flag)\n\n{\n  char char_value;\n  int count;\n  int result;\n  undefined4 status;\n  char *string1;\n  char *string2;\n  size_t string1_length;\n  size_t string2_length;\n  char *combined_string;\n  long count_value;\n  byte local_flag;\n  \n  char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  local_flag = 1;\n  if (char_value == '\\0') {\n    local_flag = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  }\n  count = *(int *)(*(long *)(data_ptr + 0x60) + 0x18);\n  string2 = (char *)stab_pop_type(data_ptr);\n  string1_length = strlen(string1);\n  string2_length = strlen(string2);\n  combined_string = (char *)xmalloc(string1_length + 100 + string2_length);\n  if (flag == 0) {\n    *combined_string = '\\0';\n    count_value = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    count_value = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = count_value + 1;\n    sprintf(combined_string,\"%ld=@S;\",count_value);\n    local_flag = flag;\n  }\n  string1_length = strlen(combined_string);\n  sprintf(combined_string + string1_length,\"ar%s;%ld;%ld;%s\",string1,start_index,end_index,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (start_index <= end_index) {\n    result = count * (((int)end_index - (int)start_index) + 1);\n  }\n  status = stab_push_string(data_ptr,combined_string,count_value,local_flag,result);\n  if ((char)status != '\\0') {\n    free(combined_string);\n  }\n  return status;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "parse_data_0010a181"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_supported_architectures_001199d0",
                "pcVar4": "headerVersion",
                "sVar5": "headerVersionLength",
                "pcVar6": "tempDir",
                "uVar7": "result",
                "piVar8": "errnoPtr",
                "lVar10": "tempDirLength",
                "lVar11": "index",
                "ppcVar12": "architectures",
                "uVar13": "maxArchLength",
                "uVar14": "archLength",
                "local_70": "tempFileDescriptor",
                "iVar1": "columns",
                "iVar2": "i",
                "iVar3": "compResult",
                "iVar9": "archIndex"
            },
            "code": "\n\n\nvoid printSupportedArchitectures_001199d0(void)\n\n{\n  int columns;\n  int i;\n  int compResult;\n  char *headerVersion;\n  size_t headerVersionLength;\n  char *tempDir;\n  undefined8 result;\n  int *errnoPtr;\n  int archIndex;\n  long tempDirLength;\n  long index;\n  char **architectures;\n  uint maxArchLength;\n  ulong archLength;\n  int tempFileDescriptor;\n  \n  headerVersion = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerVersion,\"(GNU Binutils for Debian) 2.40\");\n  if (memoized_tmpdir == (char *)0x0) {\n    headerVersion = getenv(\"TMPDIR\");\n    result = try_dir_lto_priv_0(headerVersion,0);\n    headerVersion = getenv(\"TMP\");\n    result = try_dir_lto_priv_0(headerVersion,result);\n    headerVersion = getenv(\"TEMP\");\n    result = try_dir_lto_priv_0(headerVersion,result);\n    result = try_dir_lto_priv_0(&DAT_0011b39a,result);\n    result = try_dir_lto_priv_0(vartmp,result);\n    headerVersion = (char *)try_dir_lto_priv_0(&tmp,result);\n    if (headerVersion == (char *)0x0) {\n      headerVersion = \".\";\n    }\n    headerVersionLength = strlen(headerVersion);\n    tempDir = (char *)xmalloc((int)headerVersionLength + 2);\n    memoized_tmpdir = strcpy(tempDir,headerVersion);\n    memoized_tmpdir[headerVersionLength & 0xffffffff] = '/';\n    memoized_tmpdir[(int)headerVersionLength + 1] = '\\0';\n  }\n  headerVersion = memoized_tmpdir;\n  headerVersionLength = strlen(memoized_tmpdir);\n  tempDirLength = (long)(int)headerVersionLength;\n  tempDir = (char *)xmalloc(tempDirLength + 9);\n  strcpy(tempDir,headerVersion);\n  *(undefined2 *)(tempDir + tempDirLength) = 0x6363;\n  *(undefined4 *)(tempDir + tempDirLength + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempDir + tempDirLength + 2) + 3) = 0x585858;\n  tempDir[tempDirLength + 8] = '\\0';\n  i = mkstemps(tempDir,0);\n  if (i == -1) {\n    errnoPtr = __errno_location();\n    tempDir = strerror(*errnoPtr);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerVersion,tempDir);\n                    \n    abort();\n  }\n  i = close(i);\n  if (i != 0) {\n                    \n    abort();\n  }\n  maxArchLength = 0;\n  i = 2;\n  bfd_iterate_over_targets(do_display_target);\n  unlink(tempDir);\n  free(tempDir);\n  tempFileDescriptor = 0;\n  do {\n    headerVersion = (char *)bfd_printable_arch_mach(i);\n    headerVersionLength = strlen(headerVersion);\n    if ((int)maxArchLength < (int)(uint)headerVersionLength) {\n      maxArchLength = (uint)headerVersionLength;\n    }\n    i = i + 1;\n  } while (i != 0x57);\n  headerVersion = getenv(\"COLUMNS\");\n  i = tempFileDescriptor;\n  if (headerVersion != (char *)0x0) {\n    tempDirLength = strtol(headerVersion,(char **)0x0,10);\n    columns = (int)tempDirLength;\n    if (columns != 0) goto LAB_00119b11;\n  }\n  columns = 0x50;\nLAB_00119b11:\n  do {\n    tempFileDescriptor = i;\n    if (-1 < tempFileDescriptor) {\n      return;\n    }\n    index = (long)tempFileDescriptor;\n    archIndex = (columns - maxArchLength) + -1;\n    tempDirLength = index;\n    do {\n      i = (int)tempDirLength;\n      if (-1 < i) break;\n      headerVersionLength = strlen(*(char **)(tempDirLength * 0x60));\n      tempDirLength = tempDirLength + 1;\n      archIndex = (archIndex - (int)headerVersionLength) + -1;\n    } while (-1 < archIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchLength + 1),&DAT_0011b4a1);\n    for (architectures = (char **)(index * 0x60);\n        ((ulong)(uint)(i - tempFileDescriptor) + index) * 0x60 - (long)architectures != 0;\n        architectures = architectures + 0xc) {\n      printf(\"%s \",*architectures);\n    }\n    archIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerVersion = (char *)bfd_printable_arch_mach(archIndex,0);\n      compResult = strcmp(headerVersion,\"UNKNOWN!\");\n      if (compResult != 0) {\n        result = bfd_printable_arch_mach(archIndex,0);\n        printf(\"%*s \",(ulong)maxArchLength,result);\n        architectures = (char **)(index * 0x60);\n        compResult = tempFileDescriptor;\n        while (i != compResult) {\n          if (*(char *)((long)architectures + (ulong)(archIndex - 2) + 8) == '\\0') {\n            headerVersionLength = strlen(*architectures);\n            for (archLength = headerVersionLength & 0xffffffff; (int)archLength != 0; archLength = (ulong)((int)archLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*architectures,_stdout);\n          }\n          compResult = compResult + 1;\n          if (i != compResult) {\n            putc(0x20,_stdout);\n          }\n          architectures = architectures + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      archIndex = archIndex + 1;\n    } while (archIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "try_dir.lto_priv.0",
                "strlen",
                "dcgettext",
                "getenv",
                "strcpy",
                "display_info.isra.0.cold",
                "do_display_target",
                "xmalloc",
                "__errno_location",
                "bfd_printable_arch_mach",
                "mkstemps",
                "close",
                "abort",
                "bfd_iterate_over_targets",
                "unlink",
                "free",
                "printf",
                "strerror",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_supported_architectures_001199d0"
        },
        "FUN_00128198": {
            "renaming": {},
            "code": "\n\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128198",
            "calling": [
                "__assert_fail"
            ],
            "imported": false,
            "current_name": "FUN_00128198"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "decode_and_process_build_attributes_0010847a",
                "decode_gnu_build_attributes_00116490": "decodeGnuBuildAttributes"
            },
            "code": "\nvoid decodeAndProcessBuildAttributes_0010847a(void)\n\n{\n  decodeGnuBuildAttributes();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "decode_and_process_build_attributes_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "reverse_and_demangle_string_0010d21c",
                "param_2": "stringPtr",
                "param_3": "resultPtr",
                "bVar1": "currentChar",
                "pbVar2": "stringPtrTemp",
                "bVar3": "tempVar",
                "cVar4": "tempChar",
                "bVar5": "tempVar2",
                "uVar6": "returnValue",
                "iVar7": "tempInt",
                "uVar8": "tempUint",
                "sVar9": "stringLength",
                "pbVar10": "stringPtr2",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "haystackPtr",
                "uVar12": "haystackPtr2",
                "pcVar13": "tempPtr",
                "bVar14": "tempByte",
                "pcVar15": "tempPtr2",
                "bVar16": "tempByte2",
                "bVar17": "tempByte3",
                "bVar18": "tempByte4",
                "bVar19": "tempByte5",
                "uVar20": "loopCounter",
                "uVar21": "tempUlong",
                "local_3c": "counterArray"
            },
            "code": "\nundefined4 reverseAndDemangleString_0010d21c(undefined8 param_1,byte **stringPtr,undefined8 *resultPtr)\n\n{\n  byte currentChar;\n  byte *stringPtrTemp;\n  byte tempVar;\n  char tempChar;\n  byte tempVar2;\n  undefined4 returnValue;\n  int tempInt;\n  uint tempUint;\n  size_t stringLength;\n  byte *stringPtr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *haystackPtr;\n  undefined8 haystackPtr2;\n  char *tempPtr;\n  byte tempByte;\n  char *tempPtr2;\n  byte tempByte2;\n  byte tempByte3;\n  byte tempByte4;\n  byte tempByte5;\n  uint loopCounter;\n  ulong tempUlong;\n  uint counterArray [3];\n  \n  stringPtrTemp = *stringPtr;\n  *stringPtr = stringPtrTemp + 1;\n  counterArray[0] = stab_demangle_count(stringPtr);\n  tempUlong = (ulong)counterArray[0];\n  if (counterArray[0] != 0) {\n    stringPtr2 = *stringPtr;\n    stringLength = strlen((char *)stringPtr2);\n    if (tempUlong <= stringLength) {\n      *stringPtr = stringPtr2 + tempUlong;\n      loopCounter = 0;\n      returnValue = stab_demangle_get_count(stringPtr,counterArray);\n      if ((char)returnValue != '\\0') {\nLAB_0010d2b4:\n        if (counterArray[0] <= loopCounter) {\n          if (resultPtr == (undefined8 *)0x0) {\n            return returnValue;\n          }\n          ptr1 = (void *)savestring(stringPtrTemp,(int)*stringPtr - (int)stringPtrTemp);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (haystackPtr = strstr(haystack,\"::NoSuchStrinG\"), tempPtr = haystack,\n             tempPtr2 = haystack, haystackPtr != (char *)0x0)) {\n            for (; tempPtr != haystackPtr; tempPtr = tempPtr + 1) {\n              if ((*tempPtr != ' ') ||\n                 (((tempPtr[1] == '>' && (haystack < tempPtr)) && (tempPtr[-1] == '>')))) {\n                *tempPtr2 = *tempPtr;\n                tempPtr2 = tempPtr2 + 1;\n              }\n            }\n            haystackPtr2 = savestring(haystack,(int)tempPtr2 - (int)haystack);\n            *resultPtr = haystackPtr2;\n            free(haystack);\n            return returnValue;\n          }\n          stab_bad_demangle(stringPtrTemp);\n          free(haystack);\n          return 0;\n        }\n        stringPtr2 = *stringPtr;\n        if (*stringPtr2 != 0x5a) {\n          tempVar2 = stab_demangle_type_lto_priv_0(param_1,stringPtr,0);\n          if (tempVar2 == 0) {\n            return 0;\n          }\n          tempVar = 0;\n          tempByte = 0;\n          tempByte4 = 0;\n          tempByte3 = 0;\n          tempByte5 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              tempByte2 = tempVar;\n              currentChar = *stringPtr2;\n              if ((tempByte | currentChar == 0) != 0) {\n                tempVar2 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              tempVar = tempVar2;\n              tempByte = tempVar2;\n            } while ('v' < (char)currentChar);\n            if ((char)currentChar < 'b') {\n              if ((char)currentChar < 'U') {\n                if ((char)currentChar < 'C') goto LAB_0010d2e9;\n                tempUlong = 1L << (currentChar + 0xbd & 0x3f);\n                if ((tempUlong & 0x11409) == 0) {\n                  if ((tempUlong & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (currentChar == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(currentChar + 0xab)) goto LAB_0010d2e9;\n              stringPtr2 = stringPtr2 + 1;\n              tempVar = tempByte2;\n              tempByte = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(currentChar) {\n            case 0x62:\n              tempVar = tempByte2;\n              tempByte4 = tempVar2;\n              break;\n            case 99:\n              tempVar = tempByte2;\n              tempByte5 = tempVar2;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              tempVar = tempByte2;\n              tempByte3 = tempVar2;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *stringPtr = stringPtr2 + 1;\n        tempChar = stab_demangle_type_lto_priv_0(param_1,stringPtr,0);\n        if (tempChar == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  stab_bad_demangle(stringPtrTemp);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (tempByte2 == 0) {\n    if (tempByte5 == 0) {\n      if (tempByte4 == 0) {\n        if (tempByte3 == 0) {\n          if (tempVar2 != 0) {\n            tempUint = stab_demangle_count(stringPtr);\n            if (tempUint == 0) goto LAB_0010d280;\n            *stringPtr = *stringPtr + tempUint;\n          }\n        }\n        else {\n          if (**stringPtr == 0x6d) {\n            *stringPtr = *stringPtr + 1;\n          }\n          while( true ) {\n            stringPtr2 = *stringPtr;\n            if (((&_sch_istable)[(ulong)*stringPtr2 * 2] & 4) == 0) break;\n            *stringPtr = stringPtr2 + 1;\n          }\n          if (*stringPtr2 == 0x2e) {\n            do {\n              stringPtr2 = stringPtr2 + 1;\n              *stringPtr = stringPtr2;\n            } while (((&_sch_istable)[(ulong)*stringPtr2 * 2] & 4) != 0);\n          }\n          stringPtr2 = *stringPtr;\n          if (*stringPtr2 == 0x65) {\n            do {\n              stringPtr2 = stringPtr2 + 1;\n              *stringPtr = stringPtr2;\n            } while (((&_sch_istable)[(ulong)*stringPtr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        tempUint = stab_demangle_count(stringPtr);\n        if (1 < tempUint) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**stringPtr == 0x6d) {\n        *stringPtr = *stringPtr + 1;\n      }\n      tempInt = stab_demangle_count(stringPtr);\n      if (tempInt == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**stringPtr == 0x6d) {\n      *stringPtr = *stringPtr + 1;\n    }\n    while (((&_sch_istable)[(ulong)**stringPtr * 2] & 4) != 0) {\n      *stringPtr = *stringPtr + 1;\n    }\n  }\nLAB_0010d2b1:\n  loopCounter = loopCounter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "cplus_demangle",
                "savestring",
                "strlen",
                "abort",
                "strstr",
                "concat",
                "stab_demangle_type.lto_priv.0",
                "free",
                "stab_demangle_count",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "reverse_and_demangle_string_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_specific_tables_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "unusedVar1"
            },
            "code": "\nvoid cleanupSpecificTables_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 unusedVar1;\n  \n  htab_delete(strip_specific_htab);\n  htab_delete(strip_unneeded_htab);\n  htab_delete(keep_specific_htab);\n  htab_delete(localize_specific_htab);\n  htab_delete(globalize_specific_htab);\n  htab_delete(keepglobal_specific_htab);\n  htab_delete(weaken_specific_htab);\n  htab_delete(redefine_specific_htab);\n  htab_delete(redefine_specific_reverse_htab,unusedParam2,unusedVar1);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_specific_tables_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "record_variable_info_0010c139",
                "param_2": "variable_info",
                "param_3": "value",
                "param_4": "type",
                "param_5": "size",
                "uVar1": "prev_variable_info",
                "cVar2": "is_valid",
                "uVar3": "result",
                "puVar4": "new_variable_info"
            },
            "code": "\nulong record_variable_info_0010c139(undefined8 param_1,long variable_info,undefined8 value,undefined8 type,\n                  undefined4 size,undefined8 param_6)\n\n{\n  undefined8 prev_variable_info;\n  char is_valid;\n  ulong result;\n  undefined8 *new_variable_info;\n  undefined8 in_R10;\n  undefined8 unaff_R15;\n  \n  is_valid = *(char *)(variable_info + 0x60);\n  if ((is_valid != '\\0') && ((*(int *)(variable_info + 0x40) != 0 || (*(char *)(variable_info + 0x44) == '\\0')))) {\n    new_variable_info = (undefined8 *)xmalloc(0x28);\n    prev_variable_info = *(undefined8 *)(variable_info + 0x78);\n    *(undefined8 *)((long)new_variable_info + 0x1c) = 0;\n    new_variable_info[2] = type;\n    *(undefined4 *)(new_variable_info + 3) = size;\n    new_variable_info[4] = param_6;\n    *(undefined8 **)(variable_info + 0x78) = new_variable_info;\n    *new_variable_info = prev_variable_info;\n    new_variable_info[1] = value;\n    return CONCAT71((int7)((ulong)unaff_R15 >> 8),is_valid) & 0xffffffff;\n  }\n  result = debug_record_variable(param_1,value,type,size,param_6,in_R10);\n  return result;\n}\n\n",
            "called": [
                "debug_record_variable",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "record_variable_info_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_symbol_value_0010e439",
                "param_1": "baseAddress",
                "param_2": "symbolValue",
                "stab_write_symbol_lto_priv_0": "writeSymbolToTable"
            },
            "code": "\nvoid setSymbolValue_0010e439(long baseAddress,undefined8 symbolValue)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = symbolValue;\n  writeSymbolToTable(baseAddress,0x84,0,0,symbolValue);\n  return;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_start_compilation_unit.lto_priv.0"
            ],
            "imported": false,
            "current_name": "set_symbol_value_0010e439"
        },
        "FUN_001043d0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00104ea2",
                "main",
                "parse_stab",
                "stab_push_string",
                "FUN_0010554f",
                "save_stab"
            ],
            "imported": false,
            "current_name": "FUN_001043d0"
        },
        "FUN_001042b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "stab_modify_type",
                "FUN_00114dc7",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "stab_class_start_method.lto_priv.0",
                "stab_demangle_remember_type",
                "stab_demangle_v3_arglist",
                "do_display_target",
                "stab_class_baseclass.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "stab_class_method_var",
                "stab_demangle_arg",
                "stab_get_struct_index",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001042b0"
        },
        "FUN_001284c0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284c0",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_001284c0"
        },
        "FUN_001044f0": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "try_dir.lto_priv.0",
                "FUN_00104ea2",
                "main",
                "get_file_size"
            ],
            "imported": false,
            "current_name": "FUN_001044f0"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid pushDefinedType_00109d3e(undefined8 param1,int param2)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (param2 - 1U < 8) {\n    defaultValue = *(undefined8 *)(CSWTCH_58 + (ulong)(param2 - 1U) * 8);\n  }\n  stab_push_defined_type(param1,defaultValue,param2);\n  return;\n}\n\n",
            "called": [
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_and_update_values_00112502",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "threshold",
                "uVar1": "index",
                "puVar2": "ptr",
                "uVar3": "result",
                "cVar4": "lineExists"
            },
            "code": "\nundefined checkAndUpdateValues_00112502(long baseAddress,undefined8 value,ulong threshold)\n\n{\n  uint index;\n  undefined8 *ptr;\n  undefined8 result;\n  char lineExists;\n  \n  do {\n    ptr = *(undefined8 **)(baseAddress + 0x40);\n    if (ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(baseAddress + 0x48), index < 10 && (ptr[(ulong)index + 2] != -1))) {\n      if (threshold <= (ulong)ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      lineExists = stab_lineno_lto_priv_0(value,*(undefined8 *)(ptr[1] + 8));\n      if (lineExists == '\\0') {\n        return 0;\n      }\n      *(int *)(baseAddress + 0x48) = *(int *)(baseAddress + 0x48) + 1;\n    }\n    result = *ptr;\n    *(undefined4 *)(baseAddress + 0x48) = 0;\n    *(undefined8 *)(baseAddress + 0x40) = result;\n  } while( true );\n}\n\n",
            "called": [
                "stab_lineno.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "debug_write_block.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "check_and_update_values_00112502"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_file_00104cc1",
                "uVar1": "errorMessage",
                "ppbVar2": "slotPtr",
                "pbVar3": "currentByte",
                "bVar4": "nextByte",
                "unaff_RBX": "startOfLine",
                "pbVar5": "endOfLine",
                "unaff_EBP": "lineNumber",
                "in_R10": "lineBuffer",
                "unaff_R13": "someValue",
                "unaff_R14": "currentLine",
                "unaff_R15": "previousLine",
                "param_7": "param1",
                "param_8": "param2",
                "param_9": "param3"
            },
            "code": "\nvoid processFile_00104cc1(void)\n\n{\n  undefined8 errorMessage;\n  byte **slotPtr;\n  byte *currentByte;\n  byte nextByte;\n  byte *startOfLine;\n  byte *endOfLine;\n  int lineNumber;\n  byte *lineBuffer;\n  undefined8 someValue;\n  byte *currentLine;\n  byte *previousLine;\n  undefined8 param1;\n  undefined8 *param2;\n  byte *param3;\n  \ncode_r0x00104cc1:\n  param3 = lineBuffer;\n  errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  non_fatal(errorMessage,param1,lineNumber);\n  endOfLine = startOfLine;\n  lineBuffer = param3;\nLAB_00114599:\n  do {\n    *lineBuffer = 0;\n    if (previousLine < lineBuffer) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = previousLine;\n    }\n    lineNumber = lineNumber + 1;\n    currentByte = endOfLine;\n    if (currentLine[1] == 0) {\n      *param2 = someValue;\n      return;\n    }\n    for (; nextByte = *currentByte, currentLine = currentByte, nextByte != 10; currentByte = currentByte + 1) {\n      if ((char)nextByte < '\\v') {\n        if (nextByte == 0) {\n          startOfLine = currentByte + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextByte == 0xd) {\n          *currentByte = 0;\n          startOfLine = currentByte + 1;\n          if (currentByte[1] == 10) {\n            startOfLine = currentByte + 2;\n            currentLine = currentByte + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextByte == 0x23) {\n          parse_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentByte = 0;\n    if (currentByte[1] == 0xd) {\n      currentLine = currentByte + 1;\n      startOfLine = currentByte + 2;\n    }\n    else {\n      startOfLine = currentByte + 1;\n    }\nLAB_00114553:\n    nextByte = *endOfLine;\n    previousLine = endOfLine;\n    while ((nextByte == 0x20 || (lineBuffer = previousLine, nextByte == 9))) {\n      endOfLine = previousLine + 1;\n      previousLine = previousLine + 1;\n      nextByte = *endOfLine;\n    }\n    do {\n      endOfLine = startOfLine;\n      if ((nextByte == 10) || (nextByte == 0xd)) goto LAB_00114676;\n      if (nextByte == 0) goto LAB_00114599;\n      nextByte = lineBuffer[1];\n      lineBuffer = lineBuffer + 1;\n    } while ((nextByte != 0x20) && (nextByte != 9));\n    if ((char)nextByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (nextByte & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    nextByte = lineBuffer[1];\n    if ((((((nextByte == 9) || (nextByte == 0x20)) && ((nextByte = lineBuffer[2], nextByte == 9 || (nextByte == 0x20)))\n          ) && ((nextByte = lineBuffer[3], nextByte == 9 || (nextByte == 0x20)))) &&\n        ((nextByte = lineBuffer[4], nextByte == 9 || (nextByte == 0x20)))) &&\n       ((nextByte = lineBuffer[5], nextByte == 9 || (nextByte == 0x20)))) {\n      nextByte = lineBuffer[6];\n      currentByte = lineBuffer + 6;\n      if ((nextByte == 9) || (nextByte == 0x20)) {\n        do {\n          do {\n            nextByte = currentByte[1];\n            currentByte = currentByte + 1;\n          } while (nextByte == 0x20);\n        } while (nextByte == 9);\n      }\n    }\n    if ((0xd < nextByte) || ((-0x2402L >> (nextByte & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "FUN_00104d1c",
                "non_fatal",
                "htab_find_slot",
                "dcgettext",
                "add_specific_symbols.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_file_00104cc1"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_type_constprop_00113bfa",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar1": "type_const",
                "plVar2": "allocated_ptr"
            },
            "code": "\nlong create_type_constprop_00113bfa(long input_1,long input_2)\n\n{\n  long type_const;\n  long *allocated_ptr;\n  \n  if (((input_1 != 0) && (input_2 != 0)) &&\n     (type_const = debug_make_type_constprop_0(0x12,0), type_const != 0)) {\n    allocated_ptr = (long *)xmalloc(0x10);\n    *allocated_ptr = input_1;\n    allocated_ptr[1] = input_2;\n    *(long **)(type_const + 0x10) = allocated_ptr;\n    return type_const;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_type_constprop_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "drop_share_flag_note_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "flagValue",
                "uVar2": "noteMessage",
                "unaff_EBX": "flags"
            },
            "code": "\nuint dropShareFlagNote_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 flagValue;\n  undefined8 noteMessage;\n  uint flags;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    flagValue = *param2;\n    flags = flags & 0xf7ffffff;\n    noteMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(noteMessage,flagValue,param3);\n  }\n  return flags;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "check_new_section_flags"
            ],
            "imported": false,
            "current_name": "drop_share_flag_note_00108375"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "log_string_with_params_00109e76",
                "param_1": "logPtr",
                "param_2": "logIndex",
                "lVar1": "oldValue",
                "local_5a": "logMsg"
            },
            "code": "\nvoid logStringWithParams_00109e76(long logPtr,uint logIndex)\n\n{\n  long oldValue;\n  char logMsg [58];\n  \n  oldValue = *(long *)(logPtr + 0x68);\n  *(long *)(logPtr + 0x68) = oldValue + 1;\n  sprintf(logMsg,\"%ld=r%ld;%u;0;\",oldValue,oldValue,(ulong)logIndex);\n  stab_push_string(logPtr,logMsg,oldValue,1,logIndex * 2);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "log_string_with_params_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_stabs_entry_001088ae",
                "param_1": "new_value_1",
                "param_2": "new_value_2",
                "param_3": "new_value_3",
                "param_4": "new_value_4",
                "iVar1": "next_index",
                "lVar2": "offset",
                "uVar3": "duplicated_string"
            },
            "code": "\nulong update_stabs_entry_001088ae(undefined4 new_value_1,undefined4 new_value_2,undefined8 new_value_3,undefined8 new_value_4)\n\n{\n  int next_index;\n  long offset;\n  undefined8 duplicated_string;\n  \n  offset = (long)saved_stabs_index * 0x18;\n  free(*(void **)(saved_stabs + offset + 0x10));\n  *(undefined4 *)(saved_stabs + offset) = new_value_1;\n  *(undefined4 *)(saved_stabs + offset + 4) = new_value_2;\n  *(undefined8 *)(saved_stabs + offset + 8) = new_value_3;\n  duplicated_string = xstrdup(new_value_4);\n  *(undefined8 *)(saved_stabs + offset + 0x10) = duplicated_string;\n  next_index = saved_stabs_index + 1;\n  saved_stabs_index = next_index % 0x10;\n  return (long)next_index / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_stabs_entry_001088ae"
        },
        "FUN_001042c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "template_in_dir"
            ],
            "imported": false,
            "current_name": "FUN_001042c0"
        },
        "FUN_001041a0": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "main",
                "stab_lineno.lto_priv.0",
                "debug_start_source"
            ],
            "imported": false,
            "current_name": "FUN_001041a0"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_match_0010afd5",
                "param_2": "struct_offset",
                "param_3": "string",
                "param_4": "string_length",
                "param_5": "type",
                "param_6": "result",
                "__s2": "target_string",
                "puVar2": "current_ptr1",
                "uVar3": "temp",
                "lVar4": "temp_offset",
                "puVar5": "current_ptr2",
                "puVar6": "temp_ptr",
                "bVar7": "counter",
                "auVar8": "result_data"
            },
            "code": "\nundefined  [16]\nfind_string_match_0010afd5(undefined8 *param_1,long struct_offset,undefined8 string,undefined4 string_length,\n            undefined4 type,undefined8 result)\n\n{\n  int iVar1;\n  char *target_string;\n  undefined8 *current_ptr1;\n  undefined8 temp;\n  long temp_offset;\n  undefined8 *current_ptr2;\n  undefined4 *temp_ptr;\n  byte counter;\n  undefined result_data [16];\n  \n  counter = 0;\n  target_string = (char *)savestring(string,string_length);\n  for (param_1 = (undefined8 *)*param_1; param_1 != (undefined8 *)0x0;\n      param_1 = (undefined8 *)*param_1) {\n    for (current_ptr1 = (undefined8 *)param_1[1]; current_ptr1 != (undefined8 *)0x0;\n        current_ptr1 = (undefined8 *)*current_ptr1) {\n      if ((undefined8 *)current_ptr1[2] != (undefined8 *)0x0) {\n        for (current_ptr2 = *(undefined8 **)(undefined8 *)current_ptr1[2]; current_ptr2 != (undefined8 *)0x0;\n            current_ptr2 = (undefined8 *)*current_ptr2) {\n          if ((*(int *)((long)current_ptr2 + 0x14) == 1) && (*(char *)current_ptr2[1] == *target_string)) {\n            iVar1 = strcmp((char *)current_ptr2[1],target_string);\n            if (iVar1 == 0) {\n              temp_offset = current_ptr2[4];\n              if (temp_offset == 0) goto LAB_0010b05b;\n              free(target_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_ptr1 = *(undefined8 **)(struct_offset + 0x1a0);\n  do {\n    if (current_ptr1 == (undefined8 *)0x0) {\n      current_ptr1 = (undefined8 *)xmalloc(0x28);\n      temp = *(undefined8 *)(struct_offset + 0x1a0);\n      temp_ptr = (undefined4 *)((long)current_ptr1 + 0x14);\n      for (temp_offset = 5; temp_offset != 0; temp_offset = temp_offset + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(current_ptr1 + 2) = type;\n      *current_ptr1 = temp;\n      current_ptr1[1] = target_string;\n      temp = debug_make_indirect_type_isra_0(current_ptr1 + 3,target_string);\n      *(undefined8 **)(struct_offset + 0x1a0) = current_ptr1;\n      current_ptr1[4] = temp;\nLAB_0010b0e7:\n      temp_offset = current_ptr1[4];\nLAB_0010b0eb:\n      result_data._8_8_ = result;\n      result_data._0_8_ = temp_offset;\n      return result_data;\n    }\n    if (*(char *)current_ptr1[1] == *target_string) {\n      iVar1 = strcmp((char *)current_ptr1[1],target_string);\n      if (iVar1 == 0) {\n        if (*(int *)(current_ptr1 + 2) == 0) {\n          *(undefined4 *)(current_ptr1 + 2) = type;\n        }\n        free(target_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_ptr1 = (undefined8 *)*current_ptr1;\n  } while( true );\n}\n\n",
            "called": [
                "savestring",
                "debug_make_indirect_type.isra.0",
                "free",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_string_match_0010afd5"
        },
        "FUN_001043e0": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001043e0"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "debug_make_struct_type.isra.0",
                "debug_make_reference_type.isra.0",
                "stab_demangle_count",
                "debug_get_real_type.isra.0",
                "debug_make_type.constprop.0",
                "malloc",
                "sprintf",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_qualified",
                "debug_make_float_type.isra.0",
                "parse_number",
                "cplus_demangle_init_info",
                "debug_make_void_type.isra.0",
                "savestring",
                "strlen",
                "dcgettext",
                "strcpy",
                "xmalloc",
                "warn_stab",
                "parse_stab_type_number",
                "debug_make_enum_type.isra.0",
                "cplus_demangle_mangled_name",
                "startswith.lto_priv.0.lto_priv.0",
                "strchr",
                "stab_find_tagged_type",
                "xrealloc",
                "debug_find_named_type",
                "stab_demangle_v3_arglist",
                "stab_demangle_args",
                "stab_find_type",
                "stab_demangle_template",
                "strtol",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_make_const_type.isra.0",
                "free",
                "parse_stab_type",
                "strncmp",
                "fprintf",
                "debug_make_method_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "stab_demangle_remember_type",
                "bad_stab",
                "strcat",
                "debug_make_offset_type.isra.0",
                "strcmp",
                "stab_bad_demangle",
                "strstr",
                "strspn",
                "concat",
                "debug_make_function_type.isra.0",
                "stab_find_slot",
                "debug_get_type_name.constprop.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_stab_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "stabOffset",
                "piVar3": "stabEntry",
                "iVar4": "currentIndex"
            },
            "code": "\n\n\nundefined8 printStabEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long stabOffset;\n  int *stabEntry;\n  int currentIndex;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  currentIndex = saved_stabs_index;\n  do {\n    stabOffset = (long)currentIndex * 0x18;\n    stabEntry = (int *)(saved_stabs + stabOffset);\n    if (*(long *)(saved_stabs + stabOffset + 0x10) != 0) {\n      stabName = bfd_get_stab_name(*stabEntry);\n      if (stabName == 0) {\n        if (*stabEntry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(saved_stabs + stabOffset + 4));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(saved_stabs + stabOffset + 8));\n      if (*stabEntry != 0) {\n        fprintf(_stderr,\" %s\",*(undefined8 *)(saved_stabs + stabOffset + 0x10));\n      }\n      fputc(10,_stderr);\n    }\n    currentIndex = (currentIndex + 1) % 0x10;\n  } while (saved_stabs_index != currentIndex);\n  return param_3;\n}\n\n",
            "called": [
                "fwrite",
                "fputc",
                "dcgettext",
                "bfd_get_stab_name",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_stab_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "modify_stab_entry_0010a083",
                "param_1": "entry_address",
                "stab_modify_type": "modify_stab_type"
            },
            "code": "\nvoid modify_stab_entry_0010a083(long entry_address)\n\n{\n  modify_stab_type(entry_address,0x2a,4,entry_address + 0x178,entry_address + 0x180);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_entry_0010a083"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_copy_00109c2e",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "data",
                "lVar1": "newPtr",
                "plVar2": "element",
                "lVar3": "count",
                "puVar4": "ptr",
                "uVar5": "oldSize",
                "bVar6": "byteFlag",
                "auVar7": "returnVal"
            },
            "code": "\nundefined  [16]\nresizeAndCopy_00109c2e(long array,long value,ulong size,int flag,undefined4 *result,\n            undefined8 data)\n\n{\n  long newPtr;\n  long *element;\n  long count;\n  undefined *ptr;\n  ulong oldSize;\n  byte byteFlag;\n  undefined returnVal [16];\n  \n  byteFlag = 0;\n  size = size & 0xffffffff;\n  oldSize = *(ulong *)(array + 0x1b0);\n  if (oldSize <= size) {\n    if (oldSize == 0) {\n      oldSize = 10;\n    }\n    for (; oldSize <= size; oldSize = oldSize * 2) {\n    }\n    newPtr = xrealloc(*(undefined8 *)(array + 0x1a8),oldSize * 0x18);\n    *(long *)(array + 0x1a8) = newPtr;\n    ptr = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newPtr);\n    for (count = (oldSize - *(long *)(array + 0x1b0)) * 0x18; count != 0; count = count + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)byteFlag * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = oldSize;\n  }\n  element = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*element == 0) {\n    newPtr = *(long *)(array + 0x68);\n    *element = newPtr;\n    *(long *)(array + 0x68) = newPtr + 1;\n    element[1] = value;\n    *(int *)(element + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(element + 2) = 0;\n    *(undefined4 *)((long)element + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)element + 0x14);\n  }\n  returnVal._8_8_ = data;\n  returnVal._0_8_ = *element;\n  return returnVal;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "stab_start_struct_type.lto_priv.0",
                "stab_tag_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "resize_and_copy_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "handle_bad_format_001053b5",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid handleBadFormat_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "init_section_add"
            ],
            "imported": false,
            "current_name": "handle_bad_format_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "param_1": "namespace",
                "uVar1": "result",
                "lVar2": "addr_offset"
            },
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long namespace,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long addr_offset;\n  \n  if ((*(long *)(namespace + 8) != 0) && (*(long *)(namespace + 0x10) != 0)) {\n    addr_offset = *(long *)(namespace + 0x10) + 0x10;\n    if (*(long *)(namespace + 0x20) != 0) {\n      addr_offset = *(long *)(namespace + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(addr_offset,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "add_to_current_namespace_00112996"
        },
        "FUN_001284b8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284b8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_001284b8"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "param_1": "type",
                "param_2": "name",
                "param_3": "kind",
                "uVar1": "result",
                "uVar2": "newId",
                "lVar3": "typeInfo",
                "piVar4": "typePointer",
                "__s1": "typeName",
                "cVar5": "isSameType",
                "iVar6": "count",
                "puVar7": "debugInfoPtr",
                "auVar8": "returnVal"
            },
            "code": "\nundefined  [16] setClassId_0010c7a0(long type,char *name,int *kind,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint newId;\n  long typeInfo;\n  int *typePointer;\n  char *typeName;\n  char isSameType;\n  int count;\n  undefined8 *debugInfoPtr;\n  undefined returnVal [16];\n  \n  if (3 < *kind - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  typeInfo = *(long *)(kind + 4);\n  debugInfoPtr = (undefined8 *)(ulong)*(uint *)(typeInfo + 0xc);\n  if (*(uint *)(typeInfo + 0xc) <= *(uint *)(type + 0x38)) {\n    for (debugInfoPtr = *(undefined8 **)(type + 0x50); debugInfoPtr != (undefined8 *)0x0;\n        debugInfoPtr = (undefined8 *)*debugInfoPtr) {\n      typePointer = (int *)debugInfoPtr[1];\n      if (*typePointer == *kind) {\n        typeName = (char *)debugInfoPtr[2];\n        if (name == (char *)0x0) {\n          if (typeName == (char *)0x0) {\nLAB_0010c82c:\n            isSameType = debug_type_samep(type,typePointer,kind);\n            if (isSameType != '\\0') {\n              newId = *(uint *)(*(long *)(debugInfoPtr[1] + 0x10) + 0xc);\n              debugInfoPtr = (undefined8 *)(ulong)newId;\n              *(uint *)(typeInfo + 0xc) = newId;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((typeName != (char *)0x0) && (*typeName == *name)) &&\n                (count = strcmp(typeName,name), count == 0)) goto LAB_0010c82c;\n      }\n    }\n    count = *(int *)(type + 0x34) + 1;\n    *(int *)(type + 0x34) = count;\n    *(int *)(typeInfo + 0xc) = count;\n    debugInfoPtr = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(type + 0x50);\n    debugInfoPtr[2] = name;\n    *(undefined8 **)(type + 0x50) = debugInfoPtr;\n    *debugInfoPtr = result;\n    debugInfoPtr[1] = kind;\n  }\nLAB_0010c884:\n  returnVal._1_7_ = (undefined7)((ulong)debugInfoPtr >> 8);\n  returnVal[0] = 1;\n  returnVal._8_8_ = param_4;\n  return returnVal;\n}\n\n",
            "called": [
                "__assert_fail",
                "debug_type_samep",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "set_class_id_0010c7a0"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "compare_values_0010922b",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "value1_type",
                "uVar2": "value2_type",
                "pplVar3": "ptr_ptr_value1",
                "ppcVar4": "ptr_ptr_string1",
                "ppcVar5": "ptr_ptr_string2",
                "lVar6": "ptr_string1",
                "lVar7": "ptr_string1_length",
                "lVar8": "ptr_string2_length",
                "pcVar9": "string1",
                "pcVar10": "string2",
                "cVar11": "comparison_result",
                "bVar12": "result",
                "iVar13": "str_comparison_result",
                "uVar14": "real_type1",
                "uVar15": "real_type2",
                "puVar16": "ptr_real_type1",
                "puVar17": "ptr_real_type2",
                "plVar18": "ptr_value1",
                "lVar19": "offset",
                "plVar20": "ptr_strings1",
                "plVar21": "ptr_strings2",
                "lVar22": "ptr_bytes1",
                "local_70": "ptr_bytes2",
                "local_58": "ptr_linked_list",
                "plStack_50": "temp_stack",
                "local_48": "temp_ptr"
            },
            "code": "\nbyte compareValues_0010922b(long input,long *value1,long *value2)\n\n{\n  uint value1_type;\n  uint value2_type;\n  long **ptr_ptr_value1;\n  char **ptr_ptr_string1;\n  char **ptr_ptr_string2;\n  long ptr_string1;\n  long ptr_string1_length;\n  long ptr_string2_length;\n  char *string1;\n  char *string2;\n  char comparison_result;\n  byte result;\n  int str_comparison_result;\n  undefined8 real_type1;\n  undefined8 real_type2;\n  undefined8 *ptr_real_type1;\n  undefined8 *ptr_real_type2;\n  long *ptr_value1;\n  long offset;\n  long *ptr_strings1;\n  long *ptr_strings2;\n  long ptr_bytes1;\n  long *ptr_bytes2;\n  undefined8 *ptr_linked_list;\n  long *temp_stack;\n  long *temp_ptr;\n  \n  ptr_value1 = value2;\n  if (value1 == (long *)0x0) {\nLAB_00109241:\n    return value2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr_value1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1_type = *(uint *)value1;\n    if (value1_type == 1) goto code_r0x00109263;\n    while (value2_type = *(uint *)value2, value2_type == 1) {\n      value2 = **(long ***)value2[2];\n      if (value2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (value1 == value2) {\n      return true;\n    }\n    if (value1_type != 0x16) break;\n    if (value2_type != 0x17) goto LAB_001092cb;\n    value1 = *(long **)(value1[2] + 8);\n    if (value1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((value1_type == 0x17) && (value2_type == 0x16)) {\n    value2 = *(long **)(value2[2] + 8);\n    ptr_value1 = value2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*value1 != *value2) {\n    return false;\n  }\n  if (value1_type == 3) {\n    return *(char *)(value1 + 2) == *(char *)(value2 + 2);\n  }\n  if (value1_type < 4) {\n    if (value1_type == 2) {\n      return true;\n    }\n  }\n  else if (value1_type - 4 < 3) {\n    return true;\n  }\n  ptr_linked_list = *(undefined8 **)(input + 0x58);\n  for (ptr_real_type2 = ptr_linked_list; ptr_real_type2 != (undefined8 *)0x0; ptr_real_type2 = (undefined8 *)*ptr_real_type2) {\n    if (((long *)ptr_real_type2[1] == value1) && ((long *)ptr_real_type2[2] == value2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(input + 0x58) = &ptr_linked_list;\n  temp_stack = value1;\n  temp_ptr = value2;\n  switch(value1_type) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr_value1 = (long *)value1[2];\n    ptr_ptr_value1 = (long **)value2[2];\n    if (ptr_value1 == (long *)0x0) {\n      result = ptr_ptr_value1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_ptr_value1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(input + 0x38) < *(uint *)((long)ptr_value1 + 0xc)) &&\n       (*(uint *)((long)ptr_value1 + 0xc) == *(uint *)((long)ptr_ptr_value1 + 0xc))) goto LAB_001097af;\n    ptr_real_type2 = (undefined8 *)*ptr_value1;\n    ptr_bytes2 = *ptr_ptr_value1;\n    if (((ptr_real_type2 == (undefined8 *)0x0) == (ptr_bytes2 == (long *)0x0)) &&\n       ((((ptr_value1[2] == 0) == (ptr_ptr_value1[2] == (long *)0x0) &&\n         ((ptr_value1[3] == 0) == (ptr_ptr_value1[3] == (long *)0x0))) &&\n        ((ptr_value1[4] == 0) == (ptr_ptr_value1[4] == (long *)0x0))))) {\n      if (ptr_real_type2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr_value1[4] != 0) &&\n           (comparison_result = compareValues_0010922b(input,ptr_value1[4],ptr_ptr_value1[4]), comparison_result == '\\0'))\n        goto LAB_00109382;\n        ptr_strings2 = (long *)ptr_value1[2];\n        if (ptr_strings2 == (long *)0x0) {\nLAB_00109540:\n          ptr_real_type2 = (undefined8 *)ptr_value1[3];\n          if (ptr_real_type2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr_value1 = ptr_ptr_value1[3];\n          while( true ) {\n            ptr_ptr_string2 = (char **)*ptr_real_type2;\n            if (ptr_ptr_string2 == (char **)0x0) {\n              result = *ptr_value1 == 0;\n              goto LAB_001099c4;\n            }\n            ptr_ptr_string1 = (char **)*ptr_value1;\n            if (ptr_ptr_string1 == (char **)0x0) break;\n            if ((**ptr_ptr_string2 != **ptr_ptr_string1) || (str_comparison_result = strcmp(*ptr_ptr_string2,*ptr_ptr_string1), str_comparison_result != 0))\n            break;\n            string1 = ptr_ptr_string2[1];\n            string2 = ptr_ptr_string1[1];\n            if ((string1 == (char *)0x0) != (string2 == (char *)0x0)) break;\n            if (string1 != (char *)0x0) {\n              ptr_bytes1 = 0;\n              while( true ) {\n                ptr_ptr_string2 = *(char ***)(string1 + ptr_bytes1);\n                ptr_ptr_string1 = *(char ***)(string2 + ptr_bytes1);\n                if (ptr_ptr_string2 == (char **)0x0) break;\n                if (ptr_ptr_string1 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptr_ptr_string2 != **ptr_ptr_string1) ||\n                     ((((ulong)ptr_ptr_string2[2] ^ (ulong)ptr_ptr_string1[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr_ptr_string2[3] != ptr_ptr_string1[3] ||\n                     ((((ptr_ptr_string2[4] == (char *)0x0) != (ptr_ptr_string1[4] == (char *)0x0) ||\n                       (str_comparison_result = strcmp(*ptr_ptr_string2,*ptr_ptr_string1), str_comparison_result != 0)) ||\n                      (comparison_result = compareValues_0010922b(input,ptr_ptr_string2[1],ptr_ptr_string1[1]), comparison_result == '\\0')))))) ||\n                   ((ptr_ptr_string2[4] != (char *)0x0 &&\n                    (comparison_result = compareValues_0010922b(input,ptr_ptr_string2[4],ptr_ptr_string1[4]), comparison_result == '\\0'))))\n                goto LAB_00109382;\n                ptr_bytes1 = ptr_bytes1 + 8;\n              }\n              if (ptr_ptr_string1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr_real_type2 = ptr_real_type2 + 1;\n            ptr_value1 = ptr_value1 + 1;\n          }\n        }\n        else {\n          ptr_strings1 = ptr_ptr_value1[2];\n          for (; ptr_real_type2 = (undefined8 *)*ptr_strings2, ptr_real_type2 != (undefined8 *)0x0;\n              ptr_strings2 = ptr_strings2 + 1) {\n            ptr_real_type1 = (undefined8 *)*ptr_strings1;\n            if ((((ptr_real_type1 == (undefined8 *)0x0) ||\n                 (((ptr_real_type2[1] ^ ptr_real_type1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr_real_type2 + 2) != *(int *)(ptr_real_type1 + 2))) ||\n               (comparison_result = compareValues_0010922b(input,*ptr_real_type2,*ptr_real_type1), comparison_result == '\\0'))\n            goto LAB_00109382;\n            ptr_strings1 = ptr_strings1 + 1;\n          }\n          if (*ptr_strings1 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptr_ptr_string2 = (char **)*ptr_real_type2, ptr_ptr_string2 != (char **)0x0; ptr_real_type2 = ptr_real_type2 + 1) {\n          ptr_ptr_string1 = (char **)*ptr_bytes2;\n          if (ptr_ptr_string1 == (char **)0x0) goto LAB_00109382;\n          string1 = *ptr_ptr_string1;\n          string2 = *ptr_ptr_string2;\n          if ((*string2 != *string1) ||\n             ((((ulong)ptr_ptr_string2[2] ^ (ulong)ptr_ptr_string1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptr_ptr_string2 + 0x14) == '\\0') {\n            if (ptr_ptr_string2[3] == ptr_ptr_string1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          str_comparison_result = strcmp(ptr_ptr_string2[3],ptr_ptr_string1[3]);\n          if (str_comparison_result != 0) goto LAB_00109382;\nLAB_00109480:\n          str_comparison_result = strcmp(string2,string1);\n          if (((str_comparison_result != 0) || (ptr_ptr_string2[1] == (char *)0x0)) || (ptr_ptr_string1[1] == (char *)0x0))\n          goto LAB_00109382;\n          real_type1 = debug_get_real_type_isra_0(ptr_ptr_string1[1],0);\n          real_type2 = debug_get_real_type_isra_0(ptr_ptr_string2[1],0);\n          comparison_result = compareValues_0010922b(input,real_type2,real_type1);\n          if (comparison_result == '\\0') goto LAB_00109382;\n          ptr_bytes2 = ptr_bytes2 + 1;\n        }\n        if (*ptr_bytes2 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr_value1 = (long *)value1[2];\n    ptr_strings2 = (long *)value2[2];\n    if (ptr_value1 == (long *)0x0) {\n      result = ptr_strings2 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_strings2 == (long *)0x0) goto LAB_00109382;\n    ptr_bytes1 = *ptr_value1;\n    ptr_string1 = *ptr_strings2;\n    offset = 0;\n    ptr_string1_length = ptr_value1[1];\n    ptr_string2_length = ptr_strings2[1];\n    do {\n      string1 = *(char **)(ptr_bytes1 + offset);\n      if (string1 == (char *)0x0) {\n        result = *(long *)(ptr_string1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      string2 = *(char **)(ptr_string1 + offset);\n      if (((string2 == (char *)0x0) || (*string1 != *string2)) ||\n         (*(long *)(ptr_string1_length + offset) != *(long *)(ptr_string2_length + offset))) break;\n      str_comparison_result = strcmp(string1,string2);\n      offset = offset + 8;\n    } while (str_comparison_result == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = compareValues_0010922b(input,value1[2],value2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)value1[2] + 2) == *(char *)((undefined8 *)value2[2] + 2)) &&\n       (comparison_result = compareValues_0010922b(input,*(undefined8 *)value1[2],*(undefined8 *)value2[2]),\n       comparison_result != '\\0')) {\n      ptr_value1 = *(long **)(value1[2] + 8);\n      ptr_strings2 = *(long **)(value2[2] + 8);\n      if ((ptr_value1 == (long *)0x0) == (ptr_strings2 == (long *)0x0)) {\n        if (ptr_value1 == (long *)0x0) goto LAB_001097af;\n        while (((*ptr_value1 != 0 && (*ptr_strings2 != 0)) &&\n               (comparison_result = compareValues_0010922b(input), comparison_result != '\\0'))) {\n          ptr_value1 = ptr_value1 + 1;\n          ptr_strings2 = ptr_strings2 + 1;\n        }\nLAB_0010995d:\n        if (*ptr_value1 != 0) goto LAB_00109964;\n        result = *ptr_strings2 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr_real_type2 = (undefined8 *)value2[2];\n    ptr_real_type1 = (undefined8 *)value1[2];\n    result = 0;\n    if ((ptr_real_type1[1] == ptr_real_type2[1]) && (ptr_real_type1[2] == ptr_real_type2[2])) {\nLAB_00109862:\n      result = compareValues_0010922b(input,*ptr_real_type1,*ptr_real_type2);\n    }\n    break;\n  case 0x10:\n    ptr_real_type2 = (undefined8 *)value2[2];\n    ptr_real_type1 = (undefined8 *)value1[2];\n    result = 0;\n    if (((ptr_real_type1[2] == ptr_real_type2[2]) && (ptr_real_type1[3] == ptr_real_type2[3])) &&\n       (*(char *)(ptr_real_type1 + 4) == *(char *)(ptr_real_type2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr_real_type2 = (undefined8 *)value2[2];\n    ptr_real_type1 = (undefined8 *)value1[2];\n    result = 0;\n    if (*(char *)(ptr_real_type1 + 1) == *(char *)(ptr_real_type2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    comparison_result = compareValues_0010922b(input,*(undefined8 *)value1[2],*(undefined8 *)value2[2]);\n    result = 0;\n    if (comparison_result != '\\0') {\n      result = compareValues_0010922b(input,*(undefined8 *)(value1[2] + 8),*(undefined8 *)(value2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)value1[2] + 3) == *(char *)((undefined8 *)value2[2] + 3)) &&\n        (comparison_result = compareValues_0010922b(input,*(undefined8 *)value1[2],*(undefined8 *)value2[2]),\n        comparison_result != '\\0')) &&\n       (comparison_result = compareValues_0010922b(input,*(undefined8 *)(value1[2] + 8),\n                              *(undefined8 *)(value2[2] + 8)), comparison_result != '\\0')) {\n      ptr_value1 = *(long **)(value1[2] + 0x10);\n      ptr_strings2 = *(long **)(value2[2] + 0x10);\n      if ((ptr_value1 == (long *)0x0) == (ptr_strings2 == (long *)0x0)) {\n        if (ptr_value1 != (long *)0x0) {\n          while (((*ptr_value1 != 0 && (*ptr_strings2 != 0)) &&\n                 (comparison_result = compareValues_0010922b(input), comparison_result != '\\0'))) {\n            ptr_value1 = ptr_value1 + 1;\n            ptr_strings2 = ptr_strings2 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr_value1 = (long *)value2[2];\n    ptr_strings2 = (long *)value1[2];\n    str_comparison_result = strcmp(*(char **)(*ptr_strings2 + 8),*(char **)(*ptr_value1 + 8));\n    result = 0;\n    if (str_comparison_result == 0) {\n      result = compareValues_0010922b(input,ptr_strings2[1],ptr_value1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(input + 0x58) = ptr_linked_list;\n  return result;\ncode_r0x00109263:\n  value1 = **(long ***)value1[2];\n  ptr_value1 = value1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "abort",
                "debug_type_samep",
                "strcmp",
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "debug_set_class_id.lto_priv.0",
                "debug_type_samep"
            ],
            "imported": false,
            "current_name": "compare_values_0010922b"
        },
        "FUN_00104900": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104900"
        },
        "FUN_00104908": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104908"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "copy_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "filename",
                "cVar1": "formatValid",
                "iVar2": "archType",
                "iVar3": "statResult",
                "ppcVar4": "targetFilePPtr",
                "lVar5": "breadBytes",
                "uVar6": "errorMessage",
                "__format": "formatString",
                "puVar7": "tempDirPtr",
                "piVar8": "errnoPtr",
                "uVar9": "errorString",
                "in_RAX": "inRax",
                "pcVar10": "currentChar",
                "ppcVar11": "archiveFilePPtr",
                "lVar12": "fileSize",
                "pvVar13": "buffer",
                "pcVar14": "closeFunc",
                "lVar15": "copySize",
                "pcVar16": "nextChar",
                "psVar17": "fileStat",
                "unaff_R14": "newArchivePPtr",
                "unaff_R15": "currentArchivePPtr",
                "bVar18": "preserveDates",
                "unaff_retaddr": "returnAddr",
                "in_stack_00000008": "sourceFilePPtr",
                "in_stack_00000010": "currentFilePtr",
                "in_stack_00000018": "tempDirectory",
                "in_stack_00000020": "newArchiveFilePPtr",
                "in_stack_00000028": "openFlags",
                "in_stack_00000030": "unknownFlag",
                "in_stack_000000f8": "permissions",
                "in_stack_00000110": "sizeLimit",
                "status": "programStatus"
            },
            "code": "\nvoid copyArchive_001052a2(undefined8 param1,undefined8 param2,char *filename)\n\n{\n  char formatValid;\n  int archType;\n  int statResult;\n  char **targetFilePPtr;\n  long breadBytes;\n  undefined8 errorMessage;\n  char *formatString;\n  undefined8 *tempDirPtr;\n  int *errnoPtr;\n  undefined8 errorString;\n  long inRax;\n  char *currentChar;\n  char **archiveFilePPtr;\n  long fileSize;\n  void *buffer;\n  code *closeFunc;\n  long copySize;\n  char *nextChar;\n  stat *fileStat;\n  undefined8 *newArchivePPtr;\n  char **currentArchivePPtr;\n  byte preserveDates;\n  undefined8 returnAddr;\n  undefined8 *sourceFilePPtr;\n  long *currentFilePtr;\n  char *tempDirectory;\n  undefined8 *newArchiveFilePPtr;\n  undefined8 openFlags;\n  undefined8 unknownFlag;\n  uint permissions;\n  long sizeLimit;\n  \n  preserveDates = 0;\n  currentChar = (char *)(inRax + 1);\n  do {\n    if (*currentChar == '/') {\n      copyArchive_001052a2();\n      return;\n    }\n    while (*currentChar == '\\0') {\n      currentChar = (char *)concat(tempDirectory,&DAT_0011b47d);\n      statResult = stat(currentChar,(stat *)&stack0x00000050);\n      tempDirPtr = newArchivePPtr;\n      if (-1 < statResult) {\n        fileSize = make_tempdir(currentChar);\n        free(currentChar);\n        if (fileSize == 0) {\n          errnoPtr = __errno_location();\n          currentChar = strerror(*errnoPtr);\n          errorString = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(errorString,currentChar);\n          goto LAB_00104e93;\n        }\n        tempDirPtr = (undefined8 *)xmalloc(0x18);\n        currentChar = *currentArchivePPtr;\n        *tempDirPtr = newArchivePPtr;\n        tempDirPtr[2] = 0;\n        tempDirPtr[1] = fileSize;\n        currentChar = (char *)concat(fileSize,&DAT_0011b47d,currentChar);\n      }\n      statResult = 0;\n      if (preserve_dates != '\\0') {\n        fileStat = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&fileStat->st_dev = 0;\n          fileStat = (stat *)((long)fileStat + (ulong)preserveDates * -8 + 4);\n        }\n        archiveFilePPtr = (char **)currentArchivePPtr[0x1d];\n        if ((char **)currentArchivePPtr[0x1d] == (char **)0x0) {\n          archiveFilePPtr = currentArchivePPtr;\n        }\n        statResult = (**(code **)(archiveFilePPtr[1] + 0x1e8))(currentArchivePPtr,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          nextChar = *currentArchivePPtr;\n          errorString = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(errorString,nextChar);\n        }\n      }\n      newArchivePPtr = (undefined8 *)xmalloc(0x18);\n      newArchivePPtr[1] = currentChar;\n      *newArchivePPtr = tempDirPtr;\n      newArchivePPtr[2] = 0;\n      formatValid = bfd_check_format(currentArchivePPtr,1);\n      if (formatValid == '\\0') {\n        errorString = dcgettext(0,\"Unable to recognise the format of file\",5);\n        bfd_nonfatal_message(0,currentArchivePPtr,0,errorString);\n        archiveFilePPtr = (char **)bfd_openw(currentChar,openFlags);\n        if (archiveFilePPtr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        targetFilePPtr = (char **)currentArchivePPtr[0x1d];\n        if ((char **)currentArchivePPtr[0x1d] == (char **)0x0) {\n          targetFilePPtr = currentArchivePPtr;\n        }\n        archType = (**(code **)(targetFilePPtr[1] + 0x1e8))(currentArchivePPtr,&stack0x000000e0);\n        fileSize = sizeLimit;\n        if (archType == 0) {\n          if (sizeLimit < 0) {\n            errorString = bfd_get_archive_filename(currentArchivePPtr);\n            errorMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            non_fatal(errorMessage,errorString);\n          }\n          else {\n            archType = bfd_seek(currentArchivePPtr,0,0);\n            if (archType == 0) {\n              if (verbose != '\\0') {\n                nextChar = *archiveFilePPtr;\n                errorString = bfd_get_archive_filename(currentArchivePPtr);\n                formatString = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(formatString,errorString,nextChar);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - copySize) {\n                copySize = 0x2000;\n                if (fileSize < 0x2001) {\n                  copySize = fileSize;\n                }\n                breadBytes = bfd_bread(buffer,copySize,currentArchivePPtr);\n                targetFilePPtr = currentArchivePPtr;\n                if ((copySize != breadBytes) ||\n                   (breadBytes = bfd_bwrite(buffer,copySize,archiveFilePPtr), targetFilePPtr = archiveFilePPtr, copySize != breadBytes\n                   )) {\n                  bfd_nonfatal_message(0,targetFilePPtr,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*archiveFilePPtr,permissions | 0x100);\n              free(buffer);\n              formatValid = bfd_close_all_done(archiveFilePPtr);\n              if (formatValid == '\\0') {\n                bfd_nonfatal_message(currentChar,0,0,0);\n                programStatus = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorString = bfd_get_archive_filename(currentArchivePPtr);\n            bfd_nonfatal(errorString);\n          }\n        }\n        else {\n          bfd_nonfatal_message(0,currentArchivePPtr,0,0);\n        }\nLAB_00104f00:\n        formatValid = bfd_close_all_done(archiveFilePPtr);\n        if (formatValid == '\\0') {\n          bfd_nonfatal_message(currentChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentChar);\n        programStatus = 1;\n      }\n      else {\n        if (unknownFlag._7_1_ == '\\0') {\n          archiveFilePPtr = (char **)bfd_openw(currentChar,*(undefined8 *)currentArchivePPtr[1]);\n        }\n        else {\n          archiveFilePPtr = (char **)bfd_openw(currentChar,openFlags);\n        }\n        if (archiveFilePPtr == (char **)0x0) {\nLAB_00104e80:\n          bfd_nonfatal_message(currentChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatValid = copy_object(currentArchivePPtr,archiveFilePPtr,returnAddr);\n        if (formatValid == '\\0') {\n          archType = bfd_get_arch(currentArchivePPtr);\n          if (archType == 0) goto LAB_00104d75;\n          formatValid = bfd_close_all_done(archiveFilePPtr);\n          if (formatValid == '\\0') {\n            bfd_nonfatal_message(currentChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatValid = bfd_close(archiveFilePPtr);\n        if (formatValid == '\\0') {\n          bfd_nonfatal_message(currentChar,0,0,0);\n          programStatus = 1;\n        }\nLAB_00114a86:\n        if ((preserve_dates != '\\0') && (statResult == 0)) {\n          set_times(currentChar,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(currentChar,openFlags);\n        newArchivePPtr[2] = fileSize;\n        *currentFilePtr = fileSize;\n        currentFilePtr = (long *)(fileSize + 0xf0);\n        archiveFilePPtr = (char **)bfd_openr_next_archived_file(newArchiveFilePPtr,currentArchivePPtr);\n        bfd_close(currentArchivePPtr);\n        currentArchivePPtr = archiveFilePPtr;\n      }\n      if ((programStatus != 0) || (currentArchivePPtr == (char **)0x0)) {\n        *currentFilePtr = 0;\n        buffer = (void *)xstrdup(*sourceFilePPtr);\n        if (programStatus == 0) {\n          closeFunc = bfd_close;\n        }\n        else {\n          closeFunc = bfd_close_all_done;\n        }\n        formatValid = (*closeFunc)(sourceFilePPtr);\n        if (formatValid == '\\0') {\n          programStatus = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*newArchiveFilePPtr);\n        formatValid = bfd_close(newArchiveFilePPtr);\n        if (formatValid == '\\0') {\n          programStatus = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      currentChar = *currentArchivePPtr;\n      filename = currentChar;\n      if (*currentChar == '/') goto LAB_0010527d;\n    }\n    nextChar = currentChar;\n    if ((*currentChar == '.') && (nextChar = currentChar + 1, currentChar[1] == '.')) {\n      nextChar = currentChar + 2;\n      if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) {\nLAB_0010527d:\n        errorString = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(errorString,filename);\nLAB_00104e93:\n        programStatus = 1;\nLAB_00114b4b:\n        while (newArchivePPtr != (undefined8 *)0x0) {\n          if (newArchivePPtr[2] == 0) {\n            rmdir((char *)newArchivePPtr[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)newArchivePPtr[1]);\n          }\n          free((void *)newArchivePPtr[1]);\n          tempDirPtr = (undefined8 *)*newArchivePPtr;\n          free(newArchivePPtr);\n          newArchivePPtr = tempDirPtr;\n        }\n        rmdir(tempDirectory);\n        free(tempDirectory);\n        return;\n      }\n    }\n    for (; (currentChar = nextChar, *nextChar != '\\0' && (*nextChar != '/')); nextChar = nextChar + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_001052a2"
        },
        "FUN_001041b0": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001041b0"
        },
        "FUN_001043f0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "list_supported_targets",
                "list_matching_formats",
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_001043f0"
        },
        "FUN_001042d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001042d0"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "process_data_0010e453",
                "param_1": "input",
                "param_2": "str1",
                "param_3": "strArray",
                "lVar1": "index",
                "cVar2": "result",
                "sVar3": "length",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "totalLength",
                "ppcVar6": "arrayPointer",
                "lVar7": "arrayIndex"
            },
            "code": "\nundefined8 processData_0010e453(long input,char *str1,char **strArray)\n\n{\n  long index;\n  char result;\n  size_t length;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long totalLength;\n  char **arrayPointer;\n  long arrayIndex;\n  \n  if (strArray == (char **)0x0) {\n    if (str1 != (char *)0x0) {\n      length = strlen(str1);\n      formattedString = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)formattedString,\"xe%s:\",str1);\nLAB_0010e578:\n      result = stab_push_string(input,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    totalLength = 10;\n    arrayPointer = strArray;\n    if (str1 != (char *)0x0) {\n      length = strlen(str1);\n      totalLength = length + 10;\n    }\n    for (; *arrayPointer != (char *)0x0; arrayPointer = arrayPointer + 1) {\n      length = strlen(*arrayPointer);\n      totalLength = totalLength + 0x14 + length;\n    }\n    formattedString = (undefined2 *)xmalloc(totalLength);\n    if (str1 == (char *)0x0) {\n      *formattedString = 0x65;\n      totalLength = 0;\n    }\n    else {\n      totalLength = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = totalLength + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",str1,totalLength);\n    }\n    arrayIndex = 0;\n    while( true ) {\n      index = *(long *)((long)strArray + arrayIndex);\n      length = strlen((char *)formattedString);\n      if (index == 0) break;\n      arrayIndex = arrayIndex + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + length) = 0x3b;\n    if (str1 == (char *)0x0) goto LAB_0010e578;\n    result = stab_write_symbol_lto_priv_0(input,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = stab_push_defined_type(input,totalLength,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "param_1": "input",
                "lVar1": "structIndex",
                "uVar2": "result"
            },
            "code": "\nundefined8 pushDefinedType_00109d5c(undefined8 input)\n\n{\n  long structIndex;\n  undefined8 result;\n  \n  structIndex = stab_get_struct_index();\n  if (-1 < structIndex) {\n    result = stab_push_defined_type(input,structIndex,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "stab_get_struct_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_symbol_write_limits_0010ed2c",
                "param_1": "symbolManager",
                "param_2": "newLimit",
                "param_3": "extraData",
                "extraout_RDX": "extraOutput",
                "in_R10": "inputR10",
                "cVar1": "writeSuccess",
                "iVar2": "iterationCount",
                "uVar3": "updatedValue",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] updateSymbolWriteLimits_0010ed2c(long symbolManager,ulong newLimit,undefined8 extraData)\n\n{\n  char writeSuccess;\n  int iterationCount;\n  undefined8 extraOutput;\n  ulong updatedValue;\n  undefined8 inputR10;\n  undefined result [16];\n  \n  if (*(ulong *)(symbolManager + 0x1f0) < newLimit) {\n    *(ulong *)(symbolManager + 0x1f0) = newLimit;\n  }\n  if (*(long *)(symbolManager + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(symbolManager + 0x1f8) != 0) {\n      iterationCount = *(int *)(symbolManager + 0x1f8) + -1;\n      updatedValue = CONCAT71((int7)((ulong)extraData >> 8),1);\n      *(int *)(symbolManager + 0x1f8) = iterationCount;\n      if (iterationCount != 0) {\n        result = stab_write_symbol_lto_priv_0\n                           (symbolManager,0xe0,0,newLimit - *(long *)(symbolManager + 0x200),0,inputR10);\n        return result;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    writeSuccess = stab_write_symbol_lto_priv_0(symbolManager,0xc0,0,*(long *)(symbolManager + 0x208),0);\n    if (writeSuccess != '\\0') {\n      *(undefined8 *)(symbolManager + 0x208) = 0xffffffffffffffff;\n      extraData = extraOutput;\n      goto LAB_0010ed78;\n    }\n  }\n  updatedValue = 0;\nLAB_0010edae:\n  result._0_8_ = updatedValue & 0xffffffff;\n  result._8_8_ = inputR10;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_write_limits_0010ed2c"
        },
        "FUN_001284e8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284e8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001284e8"
        },
        "FUN_001283c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283c8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_001283c8"
        },
        "FUN_0010e451": {
            "renaming": {},
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_0010e451"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_blocks_0011a1b0",
                "param_1": "block1",
                "param_2": "block2",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "block1Size",
                "uVar2": "block2Size",
                "iVar3": "comparisonResult",
                "extraout_var": "extraVar",
                "uVar4": "combinedResult",
                "auVar5": "returnValue"
            },
            "code": "\nundefined  [16] compareMemoryBlocks_0011a1b0(ulong *block1,ulong *block2,undefined8 param1,undefined8 param2)\n\n{\n  ulong block1Size;\n  ulong block2Size;\n  int comparisonResult;\n  undefined4 extraVar;\n  ulong combinedResult;\n  undefined returnValue [16];\n  \n  combinedResult = *block1;\n  if (*block2 <= *block1) {\n    combinedResult = *block2;\n  }\n  comparisonResult = memcmp((void *)(block1[3] + 3),(void *)(block2[3] + 3),combinedResult - 3);\n  combinedResult = CONCAT44(extraVar,comparisonResult);\n  if (comparisonResult == 0) {\n    block1Size = block1[8];\n    if (block1Size < block2[7]) {\n      combinedResult = 0xffffffff;\n    }\n    else {\n      block2Size = block2[8];\n      if (block2Size < block1[7]) {\n        combinedResult = 1;\n      }\n      else {\n        combinedResult = 0xffffffff;\n        if (block2[7] <= block1[7]) {\n          if (block2Size < block1Size) {\n            combinedResult = 1;\n          }\n          else {\n            combinedResult = 0xffffffff;\n            if (block2Size <= block1Size) {\n              if (block1[2] == 0x100) {\n                combinedResult = (ulong)-(uint)(block2[2] != 0x100);\n              }\n              else {\n                combinedResult = (ulong)(block2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  returnValue._8_8_ = param2;\n  returnValue._0_8_ = combinedResult;\n  return returnValue;\n}\n\n",
            "called": [
                "compare_gnu_build_notes.cold",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_blocks_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "decode_gnu_build_attributes_001163d0",
                "param_1": "source",
                "param_2": "dest",
                "param_3": "size",
                "param_4": "data",
                "uVar1": "result",
                "uVar2": "var1",
                "uVar3": "var2",
                "bVar4": "condition",
                "puVar5": "ptr1",
                "iVar6": "var6",
                "uVar7": "var7",
                "lVar8": "len",
                "__ptr": "buffer",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar16": "var16",
                "puVar17": "ptr2",
                "puVar18": "ptr3",
                "cVar19": "charVar",
                "puVar20": "ptr4",
                "iVar21": "var21",
                "puVar22": "ptr5",
                "puVar23": "ptr6",
                "uVar24": "var24",
                "__nmemb": "num",
                "puVar25": "ptr7",
                "bVar26": "byteVar",
                "local_88": "localVar1",
                "uStack_80": "localVar2",
                "local_70": "localVar3",
                "local_68": "localVar4",
                "local_60": "localPtr"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\nulong decode_gnu_build_attributes_001163d0(undefined8 *source,undefined8 *dest,ulong size,undefined *data)\n\n{\n  ulong result;\n  undefined8 var1;\n  undefined8 var2;\n  bool condition;\n  ulong *ptr1;\n  int var6;\n  undefined8 var7;\n  long len;\n  void *buffer;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *buffer_00;\n  ulong var13;\n  ulong var14;\n  ulong var15;\n  ulong var16;\n  ulong *ptr2;\n  undefined *ptr3;\n  char charVar;\n  undefined *ptr4;\n  int var21;\n  undefined *ptr5;\n  ulong *ptr6;\n  ulong var24;\n  size_t num;\n  ulong *ptr7;\n  byte byteVar;\n  ulong localVar1;\n  ulong localVar2;\n  ulong localVar3;\n  ulong localVar4;\n  ulong *localPtr;\n  \n  byteVar = 0;\n  len = bfd_get_reloc_upper_bound();\n  localVar4 = size;\n  if (0 < len) {\n    buffer = (void *)xmalloc(len);\n    len = bfd_canonicalize_reloc(source,dest,buffer,isympp);\n    free(buffer);\n    if (len != 0) {\n      if (is_strip == 0) {\n        var1 = *source;\n        var2 = *dest;\n        var7 = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        non_fatal(var7,var1,var2);\n      }\n      localPtr = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  localPtr = (ulong *)xcalloc(size / 0xc,0x48,size % 0xc);\n  localVar1 = 0;\n  localVar3 = 0;\n  var16 = size;\n  var15 = 0;\n  ptr6 = localPtr;\n  var14 = 0;\n  ptr5 = data;\n  while (0xb < var16) {\n    var10 = (**(code **)(source[1] + 0x40))(ptr5);\n    *ptr6 = var10;\n    var10 = (**(code **)(source[1] + 0x40))(ptr5 + 4);\n    ptr6[1] = var10;\n    var11 = (**(code **)(source[1] + 0x40))(ptr5 + 8);\n    var10 = *ptr6;\n    ptr6[2] = var11;\n    var12 = ptr6[1];\n    var13 = var10 + 3 & 0xfffffffffffffffc;\n    ptr6[6] = var13;\n    if (var12 != (var12 + 3 & 0xfffffffffffffffc)) {\n      len = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var11 - 0x100) {\n      len = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var13 + var12 + 0xc;\n    if (var16 < result) {\n      len = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var10 < 2) {\n      len = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr6[3] = (ulong)(ptr5 + 0xc);\n    ptr6[4] = (ulong)(ptr5 + var13 + 0xc);\n    var16 = var16 + (-0xc - (var13 + var12));\n    if (var10 != 2) {\n      if (ptr5[0xc] == '$') {\n        if ((ptr5[0xd] == '\\x01') && (ptr5[0xe] == '1')) {\n          var16 = decode_gnu_build_attributes_001163d0_00116490();\n          return var16;\n        }\n      }\n      else if ((((4 < var10) && (ptr5[0xc] == 'G')) && (ptr5[0xd] == 'A')) &&\n              ((ptr5[0xe] == '$' && (ptr5[0xf] == '\\x01')))) {\n        if (ptr5[0x10] == '2') {\n          var16 = decode_gnu_build_attributes_001163d0_00116490();\n          return var16;\n        }\n        if (ptr5[0x10] == '3') {\n          var16 = decode_gnu_build_attributes_001163d0_00116490();\n          return var16;\n        }\n        len = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var9 = var15;\n    var24 = var14;\n    if (var12 == 0) {\n      if (var11 == 0x100) {\n        ptr6[7] = localVar1;\nLAB_001164af:\n        var12 = var14;\n        var24 = var14;\n      }\n      else {\n        ptr6[7] = localVar3;\nLAB_0011669e:\n        var9 = var15;\n        var12 = var15;\n      }\n    }\n    else {\n      if (var12 != 0x10) {\n        if (var12 < 0x11) {\n          if (var12 == 4) {\n            var11 = (**(code **)(source[1] + 0x40))();\n            var12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var12 == 8) {\n            var16 = FUNC_001086af();\n            return var16;\n          }\n        }\n        len = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var11 = (**(code **)(source[1] + 0x28))(ptr5 + var13 + 0xc);\n      var12 = (**(code **)(source[1] + 0x28))();\n      if (var12 < var11) {\n        var11 = var12;\n      }\nLAB_00116631:\n      if (ptr6[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = localVar1;\n        }\n        var10 = *ptr6;\n        ptr6[7] = var11;\n        var24 = var12;\n        localVar1 = var11;\n        if (var12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = localVar3;\n        }\n        var10 = *ptr6;\n        ptr6[7] = var11;\n        var9 = var12;\n        localVar3 = var11;\n        if (var12 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr6[8] = var12;\n    if (*(char *)((ptr6[3] - 1) + var10) != '\\0') {\n      len = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr6 = ptr6 + 9;\n    var15 = var9;\n    var14 = var24;\n    ptr5 = ptr5 + result;\n  }\n  if (var16 == 0) {\n    var1 = *source;\n    var2 = *dest;\n    var7 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    non_fatal(var7,var1,var2);\n    num = ((long)ptr6 - (long)localPtr >> 3) * -0x71c71c71c71c71c7;\n    qsort(localPtr,num,0x48,compare_gnu_build_notes);\n    for (ptr2 = localPtr; ptr2 < ptr6; ptr2 = ptr2 + 9) {\n      var16 = ptr2[2];\n      if (var16 != 0) {\n        var15 = ptr2[7];\n        var14 = ptr2[8];\n        ptr7 = ptr2;\n        var21 = 0;\n        if (var15 == var14) {\n          ptr2[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr1 = ptr7;\n              ptr7 = ptr1 + -9;\n              if (ptr7 < localPtr) goto LAB_001167f5;\n              var10 = ptr1[-7];\n            } while (var10 == 0);\n            if ((*ptr7 != *ptr2) ||\n               (var6 = memcmp((void *)ptr1[-6],(void *)ptr2[3],*ptr2), var6 != 0)) break;\n            var12 = ptr1[-2];\n            var11 = ptr1[-1];\n            if (var15 == var12) {\n              if (var14 == var11) {\n                ptr2[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var14 <= var11) {\n                ptr2[2] = 0;\n                break;\n              }\n              if (var11 < var15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var11) || (var15 <= (var11 + 0xf & 0xfffffffffffffff0))\n                   ) goto extract_sorted_notes_00116852;\n              }\nLAB_001167b8:\n              if ((var16 == 0x101) == (var10 == 0x101)) {\n                if (var11 <= var14) {\n                  var11 = var14;\n                }\n                if (var12 < var15) {\n                  var15 = var12;\n                }\n                ptr1[-1] = var11;\n                ptr1[-2] = var15;\n                ptr2[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var12 <= var15) goto LAB_001167a6;\n              if (var11 < var15) goto LAB_0010852c;\n              if (var14 < var15) {\n                if ((0xfffffffffffffff0 < var14) || (var12 <= (var14 + 0xf & 0xfffffffffffffff0))\n                   ) goto extract_sorted_notes_00116852;\n                goto LAB_001167b8;\n              }\n              if (var14 != var11) goto LAB_001167b8;\n            }\nextract_sorted_notes_00116852:\n            condition = var21 < 0x11;\n            var21 = var21 + 1;\n          } while (condition);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(localPtr,num,0x48,sort_gnu_build_notes);\n    buffer_00 = (undefined *)xmalloc(size * 2);\n    localVar2 = 0;\n    localVar3 = 0;\n    ptr5 = buffer_00;\n    for (ptr2 = localPtr; ptr2 < ptr6; ptr2 = ptr2 + 9) {\n      if (ptr2[2] != 0) {\n        ptr3 = ptr5 + 0xc;\n        if ((ptr2[7] == localVar3) && (ptr2[8] == localVar2)) {\n          (**(code **)(source[1] + 0x50))(*ptr2,ptr5);\n          (**(code **)(source[1] + 0x50))(0,ptr5 + 4);\n          (**(code **)(source[1] + 0x50))(ptr2[2],ptr5 + 8);\n          var15 = ptr2[6];\n          var16 = *ptr2;\n          ptr5 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (var14 = var16; var14 != 0; var14 = var14 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n            ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n          }\n          if (var16 < var15) {\n            for (len = var15 - var16; len != 0; len = len + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          ptr5 = ptr3 + var15;\n        }\n        else {\n          (**(code **)(source[1] + 0x50))();\n          if (*(int *)(source[1] + 8) == 5) {\n            charVar = (*(char *)(source[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            charVar = '\\b';\n          }\n          (**(code **)(source[1] + 0x50))(charVar,ptr5 + 4);\n          (**(code **)(source[1] + 0x50))(ptr2[2],ptr5 + 8);\n          var16 = *ptr2;\n          ptr5 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (var15 = var16; var15 != 0; var15 = var15 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n            ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n          }\n          var15 = ptr2[6];\n          if (var16 < var15) {\n            for (len = var15 - var16; len != 0; len = len + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          len = source[1];\n          ptr3 = ptr3 + var15;\n          ptr5 = ptr3 + 8;\n          if ((*(int *)(len + 8) == 5) && (*(char *)(source[0x22] + 4) == '\\x02')) {\n            (**(code **)(len + 0x38))(ptr2[7],ptr3);\n            (**(code **)(source[1] + 0x38))(ptr2[8],ptr5);\n            ptr5 = ptr3 + 0x10;\n          }\n          else {\n            (**(code **)(len + 0x50))(ptr2[7],ptr3);\n            (**(code **)(source[1] + 0x50))(ptr2[8],ptr3 + 4);\n          }\n          localVar3 = ptr2[7];\n          localVar2 = ptr2[8];\n        }\n      }\n    }\n    var15 = (long)ptr5 - (long)buffer_00;\n    var16 = var15;\n    ptr5 = buffer_00;\n    localVar4 = size;\n    if (var15 < size) {\n      for (; localVar4 = var15, var16 != 0; var16 = var16 - 1) {\n        *data = *ptr5;\n        ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n        data = data + (ulong)byteVar * -2 + 1;\n      }\n    }\n    free(buffer_00);\n  }\n  else {\n    len = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (len != 0) {\n      bfd_set_error(0x11);\n      bfd_nonfatal_message(0,source,dest,len);\n      status = 1;\n    }\n  }\nLAB_001166f8:\n  free(localPtr);\n  return localVar4;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "free",
                "bfd_canonicalize_reloc",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "decode_gnu_build_attributes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,message,programName);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  list_supported_targets(program_name,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "list_supported_targets",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "parse_driver_name_00108c86",
                "param_1": "driver_data",
                "cVar1": "startsWithLtoPriv",
                "iVar2": "comparisonResult",
                "sVar3": "stringLength",
                "puVar4": "allocatedMemory",
                "lVar5": "dataOffset",
                "__s": "driverName",
                "__s1": "archName",
                "puVar6": "copyPointer",
                "uVar7": "returnValue",
                "bVar8": "byteValue"
            },
            "code": "\nundefined8 parse_driver_name_00108c86(long *driver_data)\n\n{\n  char startsWithLtoPriv;\n  int comparisonResult;\n  size_t stringLength;\n  undefined2 *allocatedMemory;\n  long dataOffset;\n  char *driverName;\n  char *archName;\n  undefined2 *copyPointer;\n  undefined8 returnValue;\n  byte byteValue;\n  \n  byteValue = 0;\n  dataOffset = *driver_data;\n  driverName = (char *)(dataOffset + 4);\n  startsWithLtoPriv = startswith_lto_priv_0_lto_priv_0(driverName,&DAT_0011b73b);\n  if (startsWithLtoPriv == '\\0') {\n    startsWithLtoPriv = startswith_lto_priv_0_lto_priv_0(driverName,\"bsdrv-\");\n    if (startsWithLtoPriv == '\\0') {\n      startsWithLtoPriv = startswith_lto_priv_0_lto_priv_0(driverName,\"rtdrv-\");\n      if (startsWithLtoPriv == '\\0') {\n        return 0xffffffff;\n      }\n      driverName = (char *)(dataOffset + 6);\n      returnValue = 0xc;\n    }\n    else {\n      driverName = (char *)(dataOffset + 6);\n      returnValue = 0xb;\n    }\n  }\n  else {\n    returnValue = 10;\n  }\n  stringLength = strlen(driverName);\n  allocatedMemory = (undefined2 *)xmalloc(stringLength + 8);\n  archName = driverName + 4;\n  copyPointer = allocatedMemory;\n  for (dataOffset = stringLength + 1; dataOffset != 0; dataOffset = dataOffset + -1) {\n    *(char *)copyPointer = *driverName;\n    driverName = driverName + (ulong)byteValue * -2 + 1;\n    copyPointer = (undefined2 *)((long)copyPointer + (ulong)byteValue * -2 + 1);\n  }\n  *(undefined *)(allocatedMemory + 1) = 0x69;\n  *allocatedMemory = 0x6570;\n  comparisonResult = strcmp(archName,\"ia32\");\n  if (comparisonResult == 0) {\n    *(undefined *)((long)allocatedMemory + 7) = 0x36;\n    *(undefined2 *)((long)allocatedMemory + 5) = 0x3833;\n  }\n  else {\n    comparisonResult = strcmp(archName,\"x86_64\");\n    if (comparisonResult == 0) {\n      *(undefined *)((long)allocatedMemory + 7) = 0x2d;\n    }\n    else {\n      comparisonResult = strcmp(archName,\"aarch64\");\n      if (comparisonResult == 0) {\n        *(undefined8 *)((long)allocatedMemory + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *driver_data = (long)allocatedMemory;\n  return returnValue;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strlen",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_driver_name_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "FUN_00104910": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00104910"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_and_return_status_001053d5",
                "unaff_R12": "ptrData",
                "unaff_R14": "ptrBfd",
                "bfd_nonfatal": "functionToCall",
                "bfd_close_all_done": "cleanupAndFinish"
            },
            "code": "\nundefined4 closeAndReturnStatus_001053d5(void)\n\n{\n  long ptrData;\n  undefined8 *ptrBfd;\n  \n  functionToCall(*ptrBfd);\n  *(undefined4 *)(ptrData + 8) = 1;\n  cleanupAndFinish();\n  return *(undefined4 *)(ptrData + 8);\n}\n\n",
            "called": [
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "close_and_return_status_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "validate_and_update_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMessage",
                "unaff_EBP": "mask1",
                "unaff_R14": "structAddress"
            },
            "code": "\nvoid validate_and_update_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMessage;\n  uint mask1;\n  long structAddress;\n  \n  if ((flags & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    fatal(errorMessage);\n  }\n  if ((((flags & 8) == 0) || ((mask1 & 0x10) == 0)) && ((mask1 & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((mask1 & 0x40) == 0)) && ((mask1 & 0x60) != 0x60)) {\n      *(uint *)(structAddress + 0x14) = flags | mask1;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    fatal(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "find_section_list"
            ],
            "imported": false,
            "current_name": "validate_and_update_flags_00104bba"
        },
        "FUN_001040a0": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "stab_class_baseclass.lto_priv.0",
                "display_info.isra.0",
                "stab_class_static_member.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_template",
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0",
                "debug_type_samep"
            ],
            "imported": false,
            "current_name": "FUN_001040a0"
        },
        "FUN_00104918": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "merge_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104918"
        },
        "FUN_001042e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001042e0"
        },
        "FUN_001283b0": {
            "renaming": {},
            "code": "\n\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fchmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b0",
            "calling": [
                "fchmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b0"
        },
        "FUN_001041c0": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001041c0"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "i",
                "puVar3": "destPtr",
                "bVar4": "offset"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long i;\n  undefined *destPtr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPtr = destination;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *destPtr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    destPtr = destPtr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "parse_stab",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slot_0010da0b",
                "param_1": "slot_pointer",
                "param_2": "slot_index",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "error_message",
                "plVar2": "new_slot",
                "lVar3": "slot_offset",
                "lVar4": "loop_counter",
                "uVar5": "remaining_slots",
                "bVar6": "zero_byte",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slot_0010da0b(long **slot_pointer,ulong slot_index,undefined8 arg1,undefined8 arg2)\n\n{\n  undefined8 error_message;\n  long *new_slot;\n  long slot_offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte zero_byte;\n  undefined result [16];\n  \n  zero_byte = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_pointer == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_pointer = new_slot;\n        for (slot_offset = 0x22; slot_offset != 0; slot_offset = slot_offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)zero_byte * -8 + 4);\n        }\n      }\n      slot_pointer = (long **)*slot_pointer;\n    }\n    slot_offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      slot_offset = 0;\n    }\n    if (*slot_pointer == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_pointer = new_slot;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)zero_byte * -8 + 4);\n      }\n    }\n    result._8_8_ = arg2;\n    result._0_8_ = *slot_pointer + slot_index + slot_offset + 1;\n    return result;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(error_message,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slot_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_dynamic_array_00112894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "array",
                "puVar2": "tempPtr",
                "lVar3": "counter",
                "bVar4": "offset"
            },
            "code": "\nundefined8 *\ninitializeDynamicArray_00112894(undefined8 input1,undefined input2,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *array;\n  undefined8 *tempPtr;\n  long counter;\n  byte offset;\n  \n  offset = 0;\n  array = (undefined8 *)xmalloc(0x1b0);\n  tempPtr = array;\n  for (counter = 0x6c; counter != 0; counter = counter + -1) {\n    *(undefined4 *)tempPtr = 0;\n    tempPtr = (undefined8 *)((long)tempPtr + (ulong)offset * -8 + 4);\n  }\n  *array = input1;\n  *(undefined *)(array + 1) = input2;\n  array[2] = input3;\n  array[3] = input4;\n  *(undefined4 *)(array + 0x10) = 1;\n  tempPtr = (undefined8 *)xmalloc(8);\n  array[0xd] = 0xffffffffffffffff;\n  array[0x11] = tempPtr;\n  *tempPtr = 0;\n  return array;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_dynamic_array_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_00109b2f",
                "param_1": "ptr",
                "__ptr": "currentNode",
                "puVar1": "nextNode"
            },
            "code": "\nundefined8 * extractAndFree_00109b2f(long ptr)\n\n{\n  undefined8 *currentNode;\n  undefined8 *nextNode;\n  \n  currentNode = *(undefined8 **)(ptr + 0x60);\n  if (currentNode != (undefined8 *)0x0) {\n    nextNode = (undefined8 *)currentNode[1];\n    *(undefined8 *)(ptr + 0x60) = *currentNode;\n    free(currentNode);\n    return nextNode;\n  }\n  return currentNode;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "stab_modify_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extract_and_free_00109b2f"
        },
        "FUN_001283b8": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b8",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b8"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_and_define_symbol_00108d9a",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_name",
                "param_4": "result",
                "ppcVar1": "symbol_list",
                "pcVar2": "symbol_dup",
                "lVar3": "symbol_found",
                "uVar4": "gettext_message",
                "plVar5": "symbol_slot"
            },
            "code": "\nundefined8 check_and_define_symbol_00108d9a(undefined8 error_message,char *symbol_name,char *target_name,undefined8 result)\n\n{\n  char **symbol_list;\n  char *symbol_dup;\n  long symbol_found;\n  undefined8 gettext_message;\n  long *symbol_slot;\n  \n  symbol_list = (char **)xmalloc(0x10);\n  symbol_dup = strdup(symbol_name);\n  *symbol_list = symbol_dup;\n  symbol_dup = strdup(target_name);\n  gettext_message = redefine_specific_htab;\n  symbol_list[1] = symbol_dup;\n  symbol_found = htab_find(gettext_message,symbol_list);\n  if (symbol_found != 0) {\n    gettext_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    fatal(gettext_message,error_message,symbol_name);\n  }\n  symbol_found = htab_find(redefine_specific_reverse_htab,target_name);\n  if (symbol_found != 0) {\n    gettext_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    fatal(gettext_message,error_message,target_name);\n  }\n  symbol_slot = (long *)htab_find_slot(redefine_specific_htab,symbol_list,1);\n  gettext_message = redefine_specific_reverse_htab;\n  *symbol_slot = (long)symbol_list;\n  symbol_dup = symbol_list[1];\n  symbol_list = (char **)htab_find_slot(gettext_message,symbol_dup,1);\n  *symbol_list = symbol_dup;\n  return result;\n}\n\n",
            "called": [
                "htab_find",
                "strdup",
                "htab_find_slot",
                "dcgettext",
                "fatal",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_define_symbol_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "write_symbol_to_stab_table_0010e9a0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "symbol",
                "__s_00": "newSymbol",
                "sVar3": "param2Length",
                "sVar4": "symbolLength",
                "__s_01": "output",
                "pcVar5": "symbolType",
                "uVar6": "symbolFlag",
                "lVar1": "symbolCount"
            },
            "code": "\nundefined4 writeSymbolToStabTable_0010e9a0(long param1,char *param2,undefined4 param3,undefined8 param4)\n\n{\n  long symbolCount;\n  undefined4 uVar2;\n  byte *symbol;\n  byte *newSymbol;\n  size_t param2Length;\n  size_t symbolLength;\n  char *output;\n  char *symbolType;\n  undefined8 symbolFlag;\n  \n  symbol = (byte *)stab_pop_type();\n  switch(param3) {\n  case 1:\n    symbolType = \"G\";\n    symbolFlag = 0x20;\n    break;\n  case 2:\n    symbolType = \"S\";\n    symbolFlag = 0x26;\n    break;\n  case 3:\n    symbolType = \"V\";\n    symbolFlag = 0x26;\n    break;\n  case 4:\n    symbolType = \"\";\n    symbolFlag = 0x80;\n    if (((&_sch_istable)[(ulong)*symbol * 2] & 4) == 0) {\n      symbolCount = *(long *)(param1 + 0x68);\n      *(long *)(param1 + 0x68) = symbolCount + 1;\n      param2Length = strlen((char *)symbol);\n      newSymbol = (byte *)xmalloc(param2Length + 0x14);\n      sprintf((char *)newSymbol,\"%ld=%s\",symbolCount,symbol);\n      free(symbol);\n      symbol = newSymbol;\n    }\n    break;\n  case 5:\n    symbolType = \"r\";\n    symbolFlag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  param2Length = strlen(param2);\n  symbolLength = strlen((char *)symbol);\n  output = (char *)xmalloc(param2Length + 3 + symbolLength);\n  sprintf(output,\"%s:%s%s\",param2,symbolType,symbol);\n  free(symbol);\n  uVar2 = stab_write_symbol_lto_priv_0(param1,symbolFlag,0,param4,output);\n  if ((char)uVar2 != '\\0') {\n    free(output);\n  }\n  return uVar2;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_stab_table_0010e9a0"
        },
        "FUN_001042f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001042f0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_section_match_error_0010827b",
                "uVar1": "section",
                "uVar2": "errorMessage",
                "unaff_RBX": "sectionPtr"
            },
            "code": "\nvoid handleSectionMatchError_0010827b(void)\n\n{\n  undefined8 section;\n  undefined8 errorMessage;\n  undefined8 *sectionPtr;\n  \n  section = *sectionPtr;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  fatal(errorMessage,section);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "handle_section_match_error_0010827b"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_bad_number_00104920",
                "uVar1": "errorString"
            },
            "code": "\nvoid handleBadNumber_00104920(void)\n\n{\n  undefined8 errorString;\n  \n  errorString = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorString);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "handle_bad_number_00104920"
        },
        "FUN_00104800": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "bfd_nonfatal_message",
                "FUN_00107880",
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104800"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "areStringsEqual",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  createHashTable(0x10,hashString,areStringsEqual,0,allocateMemory,releaseMemory);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string",
                "htab_eq_string",
                "htab_create_alloc",
                "free",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "FUN_001283e8": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283e8",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_001283e8"
        },
        "FUN_001282c0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282c0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_001282c0"
        },
        "FUN_001281a0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281a0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001281a0"
        },
        "FUN_001041d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001041d0"
        },
        "FUN_001040b0": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "copy_file",
                "display_info.isra.0",
                "get_file_size.cold",
                "smart_rename.cold",
                "main",
                "simple_copy.cold",
                "simple_copy",
                "set_times.cold",
                "FUN_00104ea2",
                "FUN_00107880",
                "section_add_load_file.cold",
                "add_specific_symbols",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_001040b0"
        },
        "FUN_00116aa0": {
            "renaming": {
                "FUN_00116aa0": "start_main_00116aa0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "stackFrame",
                "__libc_start_main": "initializeLibc",
                "main": "mainFunction",
                "&stack0x00000008": "stackPointer"
            },
            "code": "\nvoid processEntry startMain_00116aa0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stackFrame [8];\n  \n  initializeLibc(mainFunction,arg2,stackPointer,0,0,arg1,stackFrame);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_00116aa0"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "initialize_alignment_00108179",
                "unaff_RBX": "ptr",
                "unaff_RBP": "ptr2",
                "unaff_R12": "ptr3",
                "unaff_R14B": "flag",
                "unaff_R15": "ptr4",
                "lVar1": "result1",
                "lVar2": "result2",
                "cVar3": "status",
                "lVar4": "errorMsg",
                "lVar5": "groupSignature",
                "copy_private_data_0010808f": "copyPrivateData"
            },
            "code": "\nvoid initializeAlignment_00108179(void)\n\n{\n  long result1;\n  long result2;\n  char status;\n  long errorMsg;\n  long groupSignature;\n  long ptr;\n  long ptr2;\n  long ptr3;\n  char flag;\n  long ptr4;\n  \n  errorMsg = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(ptr4 + 0xb4) = *(undefined4 *)(ptr + 0xb4);\n  *(byte *)(ptr4 + 0x28) =\n       *(byte *)(ptr4 + 0x28) & 0xcf | *(byte *)(ptr + 0x28) & 0x30;\n  *(long *)(ptr + 0x60) = ptr4;\n  *(undefined8 *)(ptr + 0x58) = 0;\n  if ((*(byte *)(ptr + 0x27) & 2) != 0) {\n    result1 = *(long *)(ptr + 0xd0);\n    groupSignature = group_signature_isra_0(result1,*(undefined8 *)(ptr + 0xe0));\n    if ((groupSignature != 0) &&\n       (result2 = *(long *)(ptr3 + 8), *(uint *)(groupSignature + 0x18) = *(uint *)(groupSignature + 0x18) | 0x20,\n       *(int *)(result2 + 8) == 5)) {\n      *(long *)(result1 + 0xb0) = groupSignature;\n      status = (**(code **)(*(long *)(ptr2 + 8) + 0x158))();\n      if (status == '\\0') {\n        copyPrivateData();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  status = (**(code **)(*(long *)(ptr2 + 8) + 0x158))();\n  if (status == '\\0') {\n    copyPrivateData();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(ptr4 + 0xd0) + 4) = 8;\n  }\n  if (errorMsg != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010808f",
                "group_signature.isra.0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "setup_section.cold"
            ],
            "imported": false,
            "current_name": "initialize_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "get_type_file_number_00109022",
                "param_1": "fileNumber",
                "param_2": "typeIndex",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "fileNum",
                "pcVar2": "errorMsg",
                "plVar3": "allocatedMemory",
                "lVar4": "loopCounter",
                "uVar5": "indexNum",
                "pplVar6": "filePtr",
                "bVar7": "byteVar",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16] getTypeFileNumber_00109022(long fileNumber,uint *typeIndex,undefined8 param3,undefined8 param4)\n\n{\n  uint fileNum;\n  char *errorMsg;\n  long *allocatedMemory;\n  long loopCounter;\n  uint indexNum;\n  long **filePtr;\n  byte byteVar;\n  undefined result [16];\n  \n  byteVar = 0;\n  indexNum = *typeIndex;\n  fileNum = typeIndex[1];\n  if (((int)indexNum < 0) || (*(uint *)(fileNumber + 0x80) <= indexNum)) {\n    errorMsg = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)indexNum);\n  }\n  else {\n    if (-1 < (int)fileNum) {\n      filePtr = (long **)(*(long *)(fileNumber + 0x88) + (long)(int)indexNum * 8);\n      for (indexNum = fileNum; 0xf < (int)indexNum; indexNum = indexNum - 0x10) {\n        if (*filePtr == (long *)0x0) {\n          allocatedMemory = (long *)xmalloc(0x88);\n          *filePtr = allocatedMemory;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)allocatedMemory = 0;\n            allocatedMemory = (long *)((long)allocatedMemory + (ulong)byteVar * -8 + 4);\n          }\n        }\n        filePtr = (long **)*filePtr;\n      }\n      if (*filePtr == (long *)0x0) {\n        allocatedMemory = (long *)xmalloc(0x88);\n        *filePtr = allocatedMemory;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)allocatedMemory = 0;\n          allocatedMemory = (long *)((long)allocatedMemory + (ulong)byteVar * -8 + 4);\n        }\n      }\n      allocatedMemory = *filePtr + (long)(int)((fileNum >> 4) * -0x10 + fileNum) + 1;\n      goto LAB_00109117;\n    }\n    errorMsg = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)fileNum);\n  }\n  allocatedMemory = (long *)0x0;\nLAB_00109117:\n  result._8_8_ = param4;\n  result._0_8_ = allocatedMemory;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "stab_find_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_type_file_number_00109022"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "debug_record_variable_0010c05d",
                "param_1": "file_address",
                "param_2": "variable_address",
                "param_3": "namespace_address",
                "param_4": "variable_type",
                "param_5": "parameter_1",
                "param_6": "parameter_2",
                "auVar1": "result",
                "uVar2": "ret_value",
                "piVar3": "ptr",
                "cVar4": "flag",
                "lVar5": "counter",
                "lVar6": "current_file",
                "piVar7": "ptr2",
                "bVar8": "is_zero",
                "auVar9": "final_result"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_variable_0010c05d(long file_address,long variable_address,ulong namespace_address,int variable_type,undefined8 parameter_1,\n            undefined8 parameter_2)\n\n{\n  undefined result [16];\n  undefined8 ret_value;\n  int *ptr;\n  char flag;\n  long counter;\n  long current_file;\n  int *ptr2;\n  byte is_zero;\n  undefined final_result [16];\n  \n  is_zero = 0;\n  if (variable_address == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = namespace_address;\n    return result << 0x40;\n  }\n  if (namespace_address != 0) {\n    if ((*(long *)(file_address + 8) == 0) || (current_file = *(long *)(file_address + 0x10), current_file == 0)) {\n      ret_value = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",ret_value);\n    }\n    else {\n      if (variable_type - 1U < 2) {\n        current_file = current_file + 0x10;\n        flag = (variable_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_address + 0x20) == 0) {\n        current_file = current_file + 0x10;\n        flag = '\\0';\n      }\n      else {\n        current_file = *(long *)(file_address + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      current_file = debug_add_to_namespace_constprop_0(current_file,variable_address,2,flag);\n      if (current_file != 0) {\n        ptr = (int *)xmalloc(0x18);\n        ptr2 = ptr + 1;\n        for (counter = 5; counter != 0; counter = counter + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)is_zero * -2 + 1;\n        }\n        *ptr = variable_type;\n        ret_value = 1;\n        *(ulong *)(ptr + 2) = namespace_address;\n        *(undefined8 *)(ptr + 4) = parameter_1;\n        *(int **)(current_file + 0x20) = ptr;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  ret_value = 0;\nLAB_0010c12e:\n  final_result._8_8_ = parameter_2;\n  final_result._0_8_ = ret_value;\n  return final_result;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "stab_emit_pending_vars",
                "stab_record_variable",
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "debug_record_variable_0010c05d"
        },
        "FUN_001041e0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_001041e0"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "push_defined_type_or_string_00109d97",
                "param_1": "param",
                "local_40": "formattedString",
                "lVar1": "count"
            },
            "code": "\nvoid pushDefinedTypeOrString_00109d97(long param)\n\n{\n  long count;\n  char formattedString [40];\n  \n  if (*(long *)(param + 0x70) != 0) {\n    stab_push_defined_type(param,*(long *)(param + 0x70),0);\n    return;\n  }\n  count = *(long *)(param + 0x68);\n  *(long *)(param + 0x68) = count + 1;\n  sprintf(formattedString,\"%ld=%ld\",count,count);\n  stab_push_string(param,formattedString,count,0,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_or_string_00109d97"
        },
        "FUN_001284f0": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284f0",
            "calling": [
                "create_symbol_htab",
                "main",
                "free"
            ],
            "imported": false,
            "current_name": "FUN_001284f0"
        },
        "FUN_00104810": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104810"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "FUNC_001086af"
            },
            "code": "\nulong FUNC_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *unaff_R12;\n  ulong unaff_R13;\n  ulong uVar20;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *param_14;\n  \n  bVar22 = 0;\n  param_7 = in_RCX;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n  uVar10 = (**(code **)(unaff_R14[1] + 0x40))(unaff_R12[4] + 4);\nLAB_0011662a:\n  uVar13 = unaff_RBP;\n  uVar20 = unaff_R13;\n  if (uVar10 < uVar9) {\n    uVar9 = uVar10;\n  }\n  do {\n    uVar11 = param_7;\n    uVar12 = param_7;\n    puVar15 = unaff_R12;\n    if (unaff_R12[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = unaff_retaddr;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar13;\n      unaff_R13 = uVar10;\n      unaff_retaddr = uVar9;\n      if (uVar10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = param_9;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar10;\n      unaff_R13 = uVar20;\n      param_9 = uVar9;\n      if (uVar10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = uVar10;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12 = puVar15 + 9;\n    if (unaff_RBX < 0xc) {\n      if (unaff_RBX != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *unaff_R14;\n      uVar3 = *param_14;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)unaff_R12 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,__nmemb,0x48,compare_gnu_build_notes);\n      puVar15 = param_11;\n      goto LAB_001167f9;\n    }\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12);\n    *unaff_R12 = uVar10;\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = uVar10;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 8);\n    uVar14 = *unaff_R12;\n    puVar15[0xb] = uVar9;\n    uVar10 = puVar15[10];\n    uVar13 = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = uVar13;\n    if (uVar10 != (uVar10 + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = uVar13 + uVar10 + 0xc;\n    if (unaff_RBX < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + uVar13;\n    puVar15[0xd] = uVar1;\n    unaff_RBX = unaff_RBX + (-0xc - (uVar13 + uVar10));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          uVar10 = decode_gnu_build_attributes_00116490();\n          return uVar10;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          uVar10 = decode_gnu_build_attributes_00116490();\n          return uVar10;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          uVar10 = decode_gnu_build_attributes_00116490();\n          return uVar10;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    uVar13 = unaff_RBP;\n    uVar20 = unaff_R13;\n    if (uVar10 == 0) {\n      if (uVar9 == 0x100) {\n        puVar15[0x10] = unaff_retaddr;\nLAB_001164af:\n        uVar12 = uVar11;\n        uVar10 = uVar20;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      else {\n        puVar15[0x10] = param_9;\nLAB_0011669e:\n        unaff_RBP = uVar13;\n        uVar12 = uVar11;\n        uVar10 = uVar13;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      goto LAB_001164bb;\n    }\n    if (uVar10 == 0x10) break;\n    if (0x10 < uVar10) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        bfd_nonfatal_message(0,unaff_R14,param_14,lVar7);\n        status = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (uVar10 != 4) {\n      if (uVar10 == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = uVar11;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n    uVar10 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = uVar11;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x28))(uVar1);\n  uVar10 = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_R12 <= puVar15) {\n    qsort(param_11,__nmemb,0x48,sort_gnu_build_notes);\n    __ptr = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    puVar19 = __ptr;\n    for (puVar15 = param_11; puVar15 < unaff_R12; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == param_9) && (puVar15[8] == param_7)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(unaff_R14[1] + 0x50))(0,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar9 = puVar15[6];\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + uVar9;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            cVar17 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          uVar9 = puVar15[6];\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = unaff_R14[1];\n          puVar16 = puVar16 + uVar9;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          param_9 = puVar15[7];\n          param_7 = puVar15[8];\n        }\n      }\n    }\n    uVar9 = (long)puVar19 - (long)__ptr;\n    uVar10 = uVar9;\n    puVar19 = __ptr;\n    if (uVar9 < param_10) {\n      for (; param_10 = uVar9, uVar10 != 0; uVar10 = uVar10 - 1) {\n        *in_stack_00000030 = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (puVar15[2] != 0) {\n    uVar10 = puVar15[7];\n    uVar9 = puVar15[8];\n    uVar13 = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (uVar10 == uVar9) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < param_11) goto LAB_001167f5;\n          uVar20 = puVar5[-7];\n        } while (uVar20 == 0);\n        param_7 = uVar13;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        uVar13 = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (uVar10 == uVar13) {\n          if (uVar9 == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < uVar10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (uVar10 <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto extract_sorted_notes_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (uVar20 == 0x101)) {\n            if (uVar11 <= uVar9) {\n              uVar11 = uVar9;\n            }\n            if (uVar13 < uVar10) {\n              uVar10 = uVar13;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = uVar10;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (uVar13 <= uVar10) goto LAB_001167a6;\n          if (uVar11 < uVar10) goto LAB_0010852c;\n          if (uVar9 < uVar10) {\n            if ((0xfffffffffffffff0 < uVar9) || (uVar13 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto extract_sorted_notes_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != uVar11) goto LAB_001167b8;\n        }\nextract_sorted_notes_00116852:\n        bVar4 = iVar23 < 0x11;\n        uVar13 = param_7;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "non_fatal",
                "FUN_00116490",
                "dcgettext",
                "qsort",
                "merge_gnu_build_notes.cold",
                "bfd_set_error",
                "compare_gnu_build_notes"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "FUNC_001086af"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_class_method_variable_0010add5",
                "stab_class_method_var": "setClassMethodVariable"
            },
            "code": "\nvoid initializeClassMethodVariable_0010add5(void)\n\n{\n  setClassMethodVariable();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_method_variable_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_debug_flags_00113e17",
                "debug_make_type_constprop_0": "setConstantPropagationDebugFlags"
            },
            "code": "\nvoid initializeDebugFlags_00113e17(void)\n\n{\n  setConstantPropagationDebugFlags(2,0);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_find_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_flags_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "dataStructurePtr",
                "param_2": "sourceString",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "param_5": "param5Value",
                "uVar1": "previousPtrValue",
                "puVar2": "newPtr",
                "uVar3": "duplicatedString",
                "xmalloc": "allocateMemory",
                "xstrdup": "duplicateString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long dataStructurePtr,undefined8 sourceString,undefined8 param3Value,undefined param4Value,\n                      undefined4 param5Value)\n\n{\n  undefined8 previousPtrValue;\n  undefined8 *newPtr;\n  undefined8 duplicatedString;\n  \n  newPtr = (undefined8 *)allocateMemory(0x40);\n  duplicatedString = duplicateString(sourceString);\n  newPtr[2] = param3Value;\n  *(undefined (*) [16])(newPtr + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newPtr + 6) = ZEXT816(0);\n  previousPtrValue = *(undefined8 *)(dataStructurePtr + 0x60);\n  *(undefined *)((long)newPtr + 0x1c) = param4Value;\n  *(undefined4 *)(newPtr + 3) = param5Value;\n  *(undefined8 **)(dataStructurePtr + 0x60) = newPtr;\n  *newPtr = previousPtrValue;\n  newPtr[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "stab_modify_type",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_001282b0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282b0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_001282b0"
        },
        "FUN_001040c0": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040c0"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "convert_string_to_unsigned_long_00109a32",
                "param_1": "inputString",
                "param_2": "isOverflow",
                "param_3": "stringEnd",
                "param_4": "unusedParam1",
                "param_5": "unusedParam2",
                "__nptr": "stringPointer",
                "piVar1": "errnoPointer",
                "uVar2": "result",
                "uVar3": "errorMessage",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16]\nconvertStringToUnsignedLong_00109a32(char **inputString,undefined *isOverflow,char *stringEnd,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  char *stringPointer;\n  int *errnoPointer;\n  ulong result;\n  undefined8 errorMessage;\n  undefined returnValue [16];\n  \n  if (isOverflow != (undefined *)0x0) {\n    *isOverflow = 0;\n  }\n  stringPointer = *inputString;\n  if ((stringPointer < stringEnd) && (*stringPointer != '\\0')) {\n    errnoPointer = __errno_location();\n    *errnoPointer = 0;\n    result = strtoul(stringPointer,inputString,0);\n    if ((result != 0xffffffffffffffff) || (*errnoPointer == 0)) goto LAB_00109aa9;\n    if (isOverflow == (undefined *)0x0) {\n      errorMessage = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(stringPointer,errorMessage);\n    }\n    else {\n      *isOverflow = 1;\n    }\n  }\n  result = 0;\nLAB_00109aa9:\n  returnValue._8_8_ = unusedParam2;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "__errno_location",
                "strtoul",
                "dcgettext",
                "warn_stab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "parse_stab_type_number",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "convert_string_to_unsigned_long_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "detect_debug_tag_type_0010c6be",
                "param_1": "fileOffset",
                "param_2": "tagName",
                "param_3": "tagType",
                "iVar1": "comparisonResult",
                "uVar2": "translatedString",
                "piVar3": "newTagType",
                "pauVar4": "newTypePtr",
                "lVar5": "namespacePtr",
                "pcVar6": "errorMessage"
            },
            "code": "\n\n\nint * detectDebugTagType_0010c6be(long fileOffset,char *tagName,int *tagType)\n\n{\n  int comparisonResult;\n  undefined8 translatedString;\n  int *newTagType;\n  undefined (*newTypePtr) [16];\n  long namespacePtr;\n  char *errorMessage;\n  \n  if ((tagName != (char *)0x0) && (tagType != (int *)0x0)) {\n    if (*(long *)(fileOffset + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tagType != 0x17) {\n        newTagType = (int *)debug_make_type_constprop_0(0x17,0);\n        if (newTagType == (int *)0x0) {\n          return (int *)0x0;\n        }\n        newTypePtr = (undefined (*) [16])xmalloc(0x10);\n        namespacePtr = *(long *)(fileOffset + 0x10);\n        *newTypePtr = ZEXT816(0);\n        *(int **)(*newTypePtr + 8) = tagType;\n        *(undefined (**) [16])(newTagType + 4) = newTypePtr;\n        namespacePtr = debug_add_to_namespace_constprop_0(namespacePtr + 0x10,tagName,1,3);\n        if (namespacePtr == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(namespacePtr + 0x20) = newTagType;\n        *(long *)*newTypePtr = namespacePtr;\n        return newTagType;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(tagType + 4) + 8),tagName);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return tagType;\n      }\n    }\n    translatedString = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translatedString);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "dcgettext",
                "strcmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "parse_stab",
                "finish_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "detect_debug_tag_type_0010c6be"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "ptr_arg1",
                "param_2": "ptr_arg2",
                "param_3": "ptr_arglist",
                "param_4": "ptr_flag",
                "__ptr": "ptr_result",
                "__format": "ptr_format",
                "lVar1": "result",
                "uVar2": "count",
                "uVar3": "size",
                "uVar4": "new_count",
                "local_39": "buffer"
            },
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 ptr_arg1,undefined8 ptr_arg2,int *ptr_arglist,undefined *ptr_flag)\n\n{\n  void *ptr_result;\n  char *ptr_format;\n  long result;\n  ulong count;\n  ulong size;\n  uint new_count;\n  char buffer [9];\n  \n  size = 10;\n  count = 0;\n  ptr_result = (void *)xmalloc(0x50);\n  *ptr_flag = 0;\n  for (; ptr_arglist != (int *)0x0; ptr_arglist = *(int **)(ptr_arglist + 6)) {\n    if (*ptr_arglist != 0x2e) {\n      ptr_format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,ptr_format);\n      free(ptr_result);\n      return (void *)0x0;\n    }\n    if (*(long *)(ptr_arglist + 4) == 0) break;\n    result = stab_demangle_v3_arg(ptr_arg1,ptr_arg2,*(long *)(ptr_arglist + 4),0,buffer);\n    if (result == 0) {\n      if (buffer[0] == '\\0') {\n        free(ptr_result);\n        return (void *)0x0;\n      }\n      *ptr_flag = 1;\n    }\n    else {\n      new_count = (int)count + 1;\n      if ((uint)size <= new_count) {\n        size = (ulong)((uint)size + 10);\n        ptr_result = (void *)xrealloc(ptr_result,size << 3);\n      }\n      *(long *)((long)ptr_result + count * 8) = result;\n      count = (ulong)new_count;\n    }\n  }\n  *(undefined8 *)((long)ptr_result + count * 8) = 0;\n  return ptr_result;\n}\n\n",
            "called": [
                "dcgettext",
                "stab_demangle_v3_arg",
                "xmalloc",
                "free",
                "xrealloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "update_section_info_0011a2e0",
                "param_1": "sectionInfo",
                "param_2": "binaryHandle",
                "uVar1": "sectionData",
                "uVar2": "sectionNotFoundError",
                "lVar3": "newSectionInfo",
                "lVar4": "sectionPtr"
            },
            "code": "\nlong updateSectionInfo_0011a2e0(long sectionInfo,long binaryHandle)\n\n{\n  undefined8 sectionData;\n  undefined8 sectionNotFoundError;\n  long newSectionInfo;\n  long sectionPtr;\n  \n  newSectionInfo = (**(code **)(*(long *)(binaryHandle + 8) + 0x208))(binaryHandle);\n  sectionPtr = *(long *)(sectionInfo + 0x20);\n  *(undefined8 *)(newSectionInfo + 8) = *(undefined8 *)(sectionInfo + 8);\n  *(undefined8 *)(newSectionInfo + 0x10) = *(undefined8 *)(sectionInfo + 0x10);\n  *(undefined4 *)(newSectionInfo + 0x18) = *(undefined4 *)(sectionInfo + 0x18);\n  if (sectionPtr == 0) {\n    sectionPtr = 0x128598;\n  }\n  else {\n    sectionPtr = bfd_get_section_by_name(binaryHandle);\n    if (sectionPtr == 0) {\n      sectionData = *(undefined8 *)(sectionInfo + 0x20);\n      sectionNotFoundError = dcgettext(0,\"Section %s not found\",5);\n                    \n      fatal(sectionNotFoundError,sectionData);\n    }\n  }\n  *(long *)(newSectionInfo + 0x20) = sectionPtr;\n  return newSectionInfo;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "create_new_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_section_info_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "write_symbol_to_lto_0010e8a9",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "inputString",
                "uVar1": "result",
                "sVar2": "stringLength",
                "__s": "dynamicString"
            },
            "code": "\nundefined4 writeSymbolToLTO_0010e8a9(undefined8 input1,undefined8 input2,char *inputString)\n\n{\n  undefined4 result;\n  size_t stringLength;\n  char *dynamicString;\n  \n  stringLength = strlen(inputString);\n  dynamicString = (char *)xmalloc(stringLength + 0x14);\n  sprintf(dynamicString,\"%s:c=f%g\",input1,inputString);\n  result = stab_write_symbol_lto_priv_0(input2,0x80,0,0,dynamicString);\n  if ((char)result != '\\0') {\n    free(dynamicString);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_lto_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "process_section_flags_00104ad6",
                "unaff_RBP": "currentFlag",
                "__s": "sectionFlags",
                "sVar4": "flagLength",
                "iVar1": "comparisonResult",
                "pcVar3": "flagEnd",
                "iVar5": "flagStart",
                "unaff_R14D": "result",
                "unaff_R15": "supportedFlags",
                "auVar6": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] processSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *flagEnd;\n  char *currentFlag;\n  char *sectionFlags;\n  size_t flagLength;\n  int flagStart;\n  uint result;\n  char *supportedFlags;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    result = result | 0x2000;\n    sectionFlags = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionFlags == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = result;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              flagEnd = strchr(sectionFlags,0x2c);\n              if (flagEnd == (char *)0x0) {\n                flagLength = strlen(sectionFlags);\n                flagStart = (int)flagLength;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = flagEnd + 1;\n                flagStart = (int)flagEnd - (int)sectionFlags;\n              }\n              flagLength = (size_t)flagStart;\n              comparisonResult = strncasecmp(supportedFlags,sectionFlags,flagLength);\n              if (comparisonResult != 0) break;\n              result = result | 1;\n              sectionFlags = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionFlags,flagLength);\n            if (comparisonResult != 0) break;\n            result = result | 2;\n            sectionFlags = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionFlags,flagLength);\n          if (comparisonResult != 0) break;\n          result = result | 0x200;\n          sectionFlags = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionFlags,flagLength);\n        if (comparisonResult != 0) break;\n        result = result | 8;\n        sectionFlags = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionFlags,flagLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionFlags,flagLength);\n      if (comparisonResult == 0) {\n        result = result | 0x10;\n        sectionFlags = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionFlags,flagLength);\n        if (comparisonResult == 0) {\n          result = result | 0x20;\n          sectionFlags = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionFlags,flagLength);\n          if (comparisonResult == 0) {\n            result = result | 0x40;\n            sectionFlags = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionFlags,flagLength);\n            if (comparisonResult == 0) {\n              result = result | 0x8000;\n              sectionFlags = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionFlags,flagLength);\n              if (comparisonResult == 0) {\n                result = result | 0x8000000;\n                sectionFlags = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionFlags,flagLength);\n                if (comparisonResult == 0) {\n                  result = result | 0x100;\n                  sectionFlags = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionFlags,flagLength);\n                  if (comparisonResult == 0) {\n                    result = result | 0x800000;\n                    sectionFlags = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionFlags,flagLength);\n                    if (comparisonResult != 0) {\n                      flagEnd = (char *)xmalloc((long)(flagStart + 1));\n                      strncpy(flagEnd,sectionFlags,flagLength);\n                      flagEnd[flagLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      non_fatal(uVar2,flagEnd);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      fatal(uVar2,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    result = result | 0x1000000;\n                    sectionFlags = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strncasecmp",
                "strchr",
                "non_fatal",
                "strlen",
                "dcgettext",
                "parse_flags.cold",
                "fatal",
                "strncpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "process_section_flags_00104ad6"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkRAXValue_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "check_rax_value_001087da"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "arg3",
                "param_4": "arg4",
                "lVar1": "current_unit",
                "iVar2": "comparison_result",
                "uVar3": "error_message",
                "puVar4": "ptr1",
                "lVar5": "ptr2",
                "puVar6": "ptr3",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 arg3,undefined8 arg4)\n\n{\n  long current_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *ptr1;\n  long ptr2;\n  undefined8 *ptr3;\n  undefined result [16];\n  \n  current_unit = *(long *)(compilation_unit + 8);\n  if (current_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (ptr2 = *(long *)(compilation_unit + 0x20); ptr2 != 0; ptr2 = *(long *)(ptr2 + 8)) {\n      if (*(undefined8 **)(ptr2 + 0x28) != (undefined8 *)0x0) {\n        for (ptr1 = (undefined8 *)**(undefined8 **)(ptr2 + 0x28); ptr1 != (undefined8 *)0x0;\n            ptr1 = (undefined8 *)*ptr1) {\n          if (*(int *)((long)ptr1 + 0x14) == 0) {\n            if (*(char *)ptr1[1] == *type_name) {\n              comparison_result = strcmp((char *)ptr1[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (ptr3 = *(undefined8 **)(current_unit + 8); ptr3 != (undefined8 *)0x0;\n        ptr3 = (undefined8 *)*ptr3) {\n      if ((undefined8 *)ptr3[2] != (undefined8 *)0x0) {\n        for (ptr1 = *(undefined8 **)(undefined8 *)ptr3[2]; ptr1 != (undefined8 *)0x0;\n            ptr1 = (undefined8 *)*ptr1) {\n          if (*(int *)((long)ptr1 + 0x14) == 0) {\n            if (*(char *)ptr1[1] == *type_name) {\n              comparison_result = strcmp((char *)ptr1[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = arg4;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = ptr1[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "dcgettext",
                "strcmp",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_001041f0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001041f0"
        },
        "FUN_001040d0": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040d0"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_dwo_section_0010829e",
                "unaff_EBP": "section_number",
                "uVar1": "result"
            },
            "code": "\nundefined8 check_dwo_section_0010829e(void)\n\n{\n  undefined8 result;\n  int section_number;\n  \n  if (section_number == 5) {\n    result = is_dwo_section_constprop_0();\n    return result;\n  }\n  if ((section_number != 4) && (section_number == 6)) {\n    result = check_dwo_section_0010829e_constprop_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "check_dwo_section_0010829e"
        },
        "FUN_001281c0": {
            "renaming": {},
            "code": "\n\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fnmatch@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281c0",
            "calling": [
                "fnmatch"
            ],
            "imported": false,
            "current_name": "FUN_001281c0"
        },
        "FUN_00104700": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104700"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_arch_mach_info_00104943",
                "in_RAX": "inputString",
                "lVar3": "convertedNumber",
                "iVar1": "defaultSize",
                "iVar2": "strcmpResult",
                "pcVar5": "archMachName",
                "sVar4": "nameLength",
                "iVar7": "archMachIndex",
                "lVar8": "startIndex",
                "iVar9": "endIndex",
                "unaff_R15D": "stackSize",
                "uVar10": "loopCounter",
                "uVar11": "archMachDiff",
                "param_7": "startIndexCopy",
                "uStack000000000000000c": "stackValue",
                "param_13": "archMachAddresses"
            },
            "code": "\n\n\nvoid printArchMachInfo_00104943(void)\n\n{\n  int defaultSize;\n  int strcmpResult;\n  char *inputString;\n  long convertedNumber;\n  size_t nameLength;\n  char *archMachName;\n  undefined8 uVar6;\n  int archMachIndex;\n  long startIndex;\n  int endIndex;\n  uint stackSize;\n  ulong loopCounter;\n  uint archMachDiff;\n  int startIndexCopy;\n  uint stackValue;\n  undefined8 param_11;\n  long archMachAddresses;\n  \n  convertedNumber = strtol(inputString,(char **)0x0,10);\n  defaultSize = (int)convertedNumber;\n  endIndex = startIndexCopy;\n  stackValue = stackSize;\n  if (defaultSize == 0) {\n    defaultSize = 0x50;\n  }\n  do {\n    startIndexCopy = endIndex;\n    if (param_11._4_4_ <= startIndexCopy) {\n      return;\n    }\n    startIndex = (long)startIndexCopy;\n    archMachIndex = (defaultSize - stackValue) + -1;\n    convertedNumber = startIndex;\n    do {\n      endIndex = (int)convertedNumber;\n      if (param_11._4_4_ <= endIndex) break;\n      nameLength = strlen(*(char **)(archMachAddresses + convertedNumber * 0x60));\n      convertedNumber = convertedNumber + 1;\n      archMachIndex = (archMachIndex - (int)nameLength) + -1;\n    } while (-1 < archMachIndex);\n    printf(\"\\n%*s\",(ulong)(stackValue + 1),&DAT_0011b4a1);\n    for (convertedNumber = startIndex * 0x60; ((ulong)(uint)(endIndex - startIndexCopy) + startIndex) * 0x60 - convertedNumber != 0;\n        convertedNumber = convertedNumber + 0x60) {\n      printf(\"%s \",*(undefined8 *)(archMachAddresses + convertedNumber));\n    }\n    archMachIndex = 2;\n    putc(10,_stdout);\n    do {\n      archMachName = (char *)bfd_printable_arch_mach(archMachIndex,0);\n      strcmpResult = strcmp(archMachName,\"UNKNOWN!\");\n      if (strcmpResult != 0) {\n        uVar6 = bfd_printable_arch_mach(archMachIndex,0);\n        printf(\"%*s \",(ulong)stackValue,uVar6);\n        archMachDiff = archMachIndex - 2;\n        convertedNumber = startIndex * 0x60;\n        strcmpResult = startIndexCopy;\n        while (endIndex != strcmpResult) {\n          archMachName = *(char **)(archMachAddresses + convertedNumber);\n          if (*(char *)((long)(char **)(archMachAddresses + convertedNumber) + (ulong)archMachDiff + 8) == '\\0') {\n            nameLength = strlen(archMachName);\n            for (loopCounter = nameLength & 0xffffffff; (int)loopCounter != 0; loopCounter = (ulong)((int)loopCounter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archMachName,_stdout);\n          }\n          strcmpResult = strcmpResult + 1;\n          if (endIndex != strcmpResult) {\n            putc(0x20,_stdout);\n          }\n          convertedNumber = convertedNumber + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archMachIndex = archMachIndex + 1;\n    } while (archMachIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "putc",
                "strlen",
                "fputs",
                "strcmp",
                "printf",
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "print_arch_mach_info_00104943"
        },
        "FUN_00104820": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104820"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_and_store_const_00113e23",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "lVar1": "type_const",
                "puVar2": "allocated_memory"
            },
            "code": "\nlong create_and_store_const_00113e23(undefined8 input_value_1,undefined8 input_value_2)\n\n{\n  long type_const;\n  undefined8 *allocated_memory;\n  \n  type_const = debug_make_type_constprop_0(1,0);\n  if (type_const != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_value_1;\n    allocated_memory[1] = input_value_2;\n    *(undefined8 **)(type_const + 0x10) = allocated_memory;\n  }\n  return type_const;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_tagged_type",
                "stab_find_type"
            ],
            "imported": false,
            "current_name": "create_and_store_const_00113e23"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_error_message_00108fb9",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_00108fb9(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "parse_stab_type_number",
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_error_message_00108fb9"
        },
        "FUN_001280a0": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a0",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_001280a0"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_integer_from_bytes_00108ea1",
                "param_1": "input_bytes",
                "param_2": "output_integer",
                "iVar1": "parsed_integer",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "code": "\nulong parse_integer_from_bytes_00108ea1(byte **input_bytes,int *output_integer)\n\n{\n  int parsed_integer;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input_bytes;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    parsed_integer = (char)*current_byte + -0x30;\n    *output_integer = parsed_integer;\n    *input_bytes = next_byte;\n    if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        parsed_integer = parsed_integer * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input_bytes = next_byte;\n        *output_integer = parsed_integer;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "parse_integer_from_bytes_00108ea1"
        },
        "FUN_001280a8": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a8",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_001280a8"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "initialize_section_addresses_00108072",
                "unaff_RBX": "sectionPointers",
                "unaff_RBP": "baseAddress",
                "unaff_R12": "groupAddress",
                "lVar8": "changeSectionAddress",
                "unaff_R14B": "hasGroupSignature",
                "unaff_R15": "sectionStruct",
                "lVar5": "failedSetSize",
                "lVar6": "sectionList1",
                "lVar7": "sectionList2",
                "uVar2": "currentPointer",
                "uVar4": "alignment",
                "bVar1": "byteValue",
                "dcgettext": "getLocalizedString",
                "find_section_list": "findSectionList",
                "LAB_00115695": "gotoLabel1",
                "LAB_00115860": "gotoLabel2",
                "LAB_00115889": "gotoLabel3",
                "LAB_001156b8": "gotoLabel4",
                "initialize_alignment_00108179": "initializeAlignment",
                "group_signature_isra_0": "groupSignatureIsra0",
                "copy_private_data_0010808f": "copyPrivateData",
                "bfd_nonfatal_message": "showNonFatalMessage",
                "status": "statusCode"
            },
            "code": "\nvoid initializeSectionAddresses_00108072(void)\n\n{\n  byte byteValue;\n  undefined8 currentPointer;\n  char cVar3;\n  uint alignment;\n  long failedSetSize;\n  long sectionList1;\n  long sectionList2;\n  undefined8 *sectionPointers;\n  long baseAddress;\n  long groupAddress;\n  long changeSectionAddress;\n  char hasGroupSignature;\n  long sectionStruct;\n  \n  failedSetSize = getLocalizedString(0,\"failed to set size\",5);\n  changeSectionAddress = sectionPointers[6];\n  sectionList1 = findSectionList(*sectionPointers,0,0x18);\n  if (sectionList1 == 0) {\n    *(byte *)(sectionStruct + 0x28) = *(byte *)(sectionStruct + 0x28) | 1;\n    currentPointer = *sectionPointers;\n    changeSectionAddress = changeSectionAddress + change_section_address;\n    *(long *)(sectionStruct + 0x30) = changeSectionAddress;\n    *(long *)(sectionStruct + 0x38) = changeSectionAddress;\n    changeSectionAddress = sectionPointers[7];\n    sectionList1 = findSectionList(currentPointer,0,0x60);\n    if (sectionList1 == 0) goto gotoLabel1;\ngotoLabel2:\n    sectionList2 = *(long *)(sectionList1 + 0x20);\n    if ((*(byte *)(sectionList1 + 0x14) & 0x40) != 0) {\n      sectionList2 = sectionList2 + changeSectionAddress;\n    }\n    *(long *)(sectionStruct + 0x38) = sectionList2;\n    changeSectionAddress = findSectionList(*sectionPointers,0,0x200);\n    if (changeSectionAddress != 0) goto gotoLabel3;\ngotoLabel4:\n    alignment = *(uint *)((long)sectionPointers + 0x7c);\n    if (alignment < 0x3f) goto LAB_001156c4;\n    failedSetSize = getLocalizedString(0,\"failed to set alignment\",5);\n    *(undefined4 *)(sectionStruct + 0xb4) = *(undefined4 *)((long)sectionPointers + 0xb4);\n    *(byte *)(sectionStruct + 0x28) =\n         *(byte *)(sectionStruct + 0x28) & 0xcf | *(byte *)(sectionPointers + 5) & 0x30;\n    sectionPointers[0xc] = sectionStruct;\n    sectionPointers[0xb] = 0;\n    byteValue = *(byte *)((long)sectionPointers + 0x27);\n  }\n  else {\n    sectionList2 = *(long *)(sectionList1 + 0x18);\n    if ((*(byte *)(sectionList1 + 0x14) & 8) == 0) {\n      sectionList2 = sectionList2 + changeSectionAddress;\n    }\n    *(byte *)(sectionStruct + 0x28) = *(byte *)(sectionStruct + 0x28) | 1;\n    currentPointer = *sectionPointers;\n    *(long *)(sectionStruct + 0x30) = sectionList2;\n    *(long *)(sectionStruct + 0x38) = sectionList2;\n    changeSectionAddress = sectionPointers[7];\n    sectionList1 = findSectionList(currentPointer,0,0x60);\n    if (sectionList1 != 0) goto gotoLabel2;\ngotoLabel1:\n    currentPointer = *sectionPointers;\n    *(long *)(sectionStruct + 0x38) = changeSectionAddress + change_section_address;\n    changeSectionAddress = findSectionList(currentPointer,0,0x200);\n    if (changeSectionAddress == 0) goto gotoLabel4;\ngotoLabel3:\n    alignment = *(uint *)(changeSectionAddress + 0x2c);\n    if (0x3e < alignment) {\n      initializeAlignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(sectionStruct + 0x7c) = alignment;\n    *(undefined4 *)(sectionStruct + 0xb4) = *(undefined4 *)((long)sectionPointers + 0xb4);\n    *(byte *)(sectionStruct + 0x28) =\n         *(byte *)(sectionStruct + 0x28) & 0xcf | *(byte *)(sectionPointers + 5) & 0x30;\n    sectionPointers[0xc] = sectionStruct;\n    sectionPointers[0xb] = 0;\n    byteValue = *(byte *)((long)sectionPointers + 0x27);\n  }\n  if ((byteValue & 2) != 0) {\n    changeSectionAddress = sectionPointers[0x1a];\n    sectionList1 = groupSignatureIsra0(changeSectionAddress,sectionPointers[0x1c]);\n    if ((sectionList1 != 0) &&\n       (sectionList2 = *(long *)(groupAddress + 8), *(uint *)(sectionList1 + 0x18) = *(uint *)(sectionList1 + 0x18) | 0x20,\n       *(int *)(sectionList2 + 8) == 5)) {\n      *(long *)(changeSectionAddress + 0xb0) = sectionList1;\n      cVar3 = (**(code **)(*(long *)(baseAddress + 8) + 0x158))();\n      if (cVar3 == '\\0') {\n        copyPrivateData();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  cVar3 = (**(code **)(*(long *)(baseAddress + 8) + 0x158))();\n  if (cVar3 == '\\0') {\n    copyPrivateData();\n    return;\n  }\nLAB_0011571e:\n  if (hasGroupSignature != '\\0') {\n    *(undefined4 *)(*(long *)(sectionStruct + 0xd0) + 4) = 8;\n  }\n  if (failedSetSize != 0) {\n    statusCode = 1;\n    showNonFatalMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "FUN_00108179",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "initialize_section_addresses_00108072"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "update_symbol_table_0010a2b9",
                "param_1": "binaryAddress",
                "param_2": "isNewSymbol",
                "param_3": "paramPointer1",
                "param_4": "paramPointer2",
                "cVar1": "symbolByte",
                "__s": "symbolName",
                "sVar2": "symbolNameLength",
                "__s_00": "updatedSymbol",
                "lVar3": "symbolIndex",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] updateSymbolTable_0010a2b9(long binaryAddress,char isNewSymbol,undefined8 paramPointer1,undefined8 paramPointer2)\n\n{\n  char symbolByte;\n  char *symbolName;\n  size_t symbolNameLength;\n  char *updatedSymbol;\n  long symbolIndex;\n  undefined returnValue [16];\n  \n  symbolByte = *(char *)(*(long *)(binaryAddress + 0x60) + 0x1c);\n  symbolName = (char *)stab_pop_type();\n  symbolNameLength = strlen(symbolName);\n  updatedSymbol = (char *)xmalloc(symbolNameLength + 0x1e);\n  if (isNewSymbol == '\\0') {\n    *updatedSymbol = '\\0';\n    symbolIndex = 0;\n    isNewSymbol = symbolByte;\n  }\n  else {\n    symbolIndex = *(long *)(binaryAddress + 0x68);\n    *(long *)(binaryAddress + 0x68) = symbolIndex + 1;\n    sprintf(updatedSymbol,\"%ld=@S;\",symbolIndex);\n  }\n  symbolNameLength = strlen(updatedSymbol);\n  sprintf(updatedSymbol + symbolNameLength,\"S%s\",symbolName);\n  free(symbolName);\n  returnValue._0_4_ = stab_push_string(binaryAddress,updatedSymbol,symbolIndex,isNewSymbol,0);\n  returnValue._4_4_ = 0;\n  if ((char)returnValue._0_4_ != '\\0') {\n    free(updatedSymbol);\n  }\n  returnValue._8_8_ = paramPointer2;\n  return returnValue;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_table_0010a2b9"
        },
        "FUN_001040e0": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001040e0"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_001283f0": {
            "renaming": {},
            "code": "\n\n\n\nint access(char *__name,int __type)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* access@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f0",
            "calling": [
                "access"
            ],
            "imported": false,
            "current_name": "FUN_001283f0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_param_0010ec73",
                "param_1": "paramList",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "arg3",
                "param_6": "arg4",
                "iVar1": "counter",
                "cVar2": "result"
            },
            "code": "\nundefined processParam_0010ec73(long *paramList,long value,undefined8 arg1,undefined8 arg2,\n                      undefined8 arg3,undefined8 arg4)\n\n{\n  int counter;\n  char result;\n  \n  if (paramList[0x3c] != -1) {\n    (**(code **)(*(long *)(*paramList + 8) + 0x50))(value,paramList[1] + 8 + paramList[0x3c]);\n    paramList[0x3c] = -1;\n  }\n  if (paramList[0x3d] != -1) {\n    (**(code **)(*(long *)(*paramList + 8) + 0x50))(value,paramList[1] + 8 + paramList[0x3d]);\n    paramList[0x3d] = -1;\n  }\n  counter = *(int *)(paramList + 0x3f);\n  *(int *)(paramList + 0x3f) = counter + 1;\n  if (counter == 0) {\n    paramList[0x40] = value;\n  }\n  else {\n    if ((paramList[0x41] != -1) &&\n       (result = stab_write_symbol_lto_priv_0(paramList,0xc0,0,paramList[0x41],0,arg4,arg2),\n       result == '\\0')) {\n      return 0;\n    }\n    paramList[0x41] = value - paramList[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_param_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "check_endianness_00114e00",
                "param_1": "endiannessValue"
            },
            "code": "\nvoid checkEndianness_00114e00(int endiannessValue)\n\n{\n  if (endiannessValue == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessValue == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "check_endianness_00114e00"
        },
        "FUN_00104830": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104830"
        },
        "FUN_00104710": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104710"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "bufferSize",
                "param_4": "filePermissions",
                "param_5": "shouldSetTimes",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "uVar4": "localizedErrorMessage",
                "uVar5": "bytesCopied",
                "auVar6": "resultData"
            },
            "code": "\nundefined  [16]\ncopyFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 bufferSize,undefined8 filePermissions,char shouldSetTimes,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 localizedErrorMessage;\n  ulong bytesCopied;\n  undefined resultData [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    bytesCopied = 0;\n  }\n  else {\n    copyResult = simple_copy(bufferSize,destinationFilePath,filePermissions);\n    bytesCopied = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocation = __errno_location();\n      errorMessage = strerror(*errnoLocation);\n      localizedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(localizedErrorMessage,destinationFilePath,errorMessage);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldSetTimes != '\\0') {\n    set_times(destinationFilePath,filePermissions);\n  }\n  resultData._8_8_ = result;\n  resultData._0_8_ = bytesCopied;\n  return resultData;\n}\n\n",
            "called": [
                "smart_rename.cold",
                "simple_copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_file_00115970"
        },
        "FUN_001283f8": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f8",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_001283f8"
        },
        "FUN_001282d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282d8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_001282d8"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_class_method_var_0010adf2",
                "stab_class_method_var": "manage_class_method_var"
            },
            "code": "\nvoid initialize_class_method_var_0010adf2(void)\n\n{\n  manage_class_method_var();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_method_var_0010adf2"
        },
        "FUN_00104840": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "copy_relocations_in_section",
                "merge_gnu_build_notes",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00104840"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "reverse_mangled_type_0010d7d4",
                "param_1": "input_param",
                "param_2": "type_data",
                "param_3": "result_buffer",
                "param_4": "result_count",
                "param_5": "result_capacity",
                "uVar1": "type_data_copy",
                "cVar2": "success_flag",
                "uVar3": "remembered_type",
                "lVar4": "buffer_ptr",
                "plVar5": "buffer_ptr_copy",
                "local_40": "local_buffer"
            },
            "code": "\nundefined4\nreverse_mangled_type_0010d7d4(undefined8 input_param,undefined8 *type_data,long *result_buffer,uint *result_count,uint *result_capacity)\n\n{\n  undefined8 type_data_copy;\n  char success_flag;\n  undefined4 remembered_type;\n  long buffer_ptr;\n  long *buffer_ptr_copy;\n  uint uVar6;\n  long local_buffer [2];\n  \n  type_data_copy = *type_data;\n  buffer_ptr_copy = local_buffer;\n  if (result_buffer == (long *)0x0) {\n    buffer_ptr_copy = (long *)0x0;\n  }\n  success_flag = stab_demangle_type_lto_priv_0(input_param,type_data,buffer_ptr_copy);\n  if ((success_flag != '\\0') &&\n     (remembered_type = stab_demangle_remember_type(input_param,type_data_copy,(int)*type_data - (int)type_data_copy),\n     (char)remembered_type != '\\0')) {\n    if (result_buffer == (long *)0x0) {\n      return remembered_type;\n    }\n    if (local_buffer[0] != 0) {\n      if (*result_capacity <= *result_count + 1) {\n        uVar6 = *result_capacity + 10;\n        buffer_ptr = *result_buffer;\n        *result_capacity = uVar6;\n        buffer_ptr = xrealloc(buffer_ptr,(ulong)uVar6 << 3);\n        *result_buffer = buffer_ptr;\n      }\n      uVar6 = *result_count;\n      *(long *)(*result_buffer + (ulong)uVar6 * 8) = local_buffer[0];\n      *result_count = uVar6 + 1;\n      return remembered_type;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_remember_type",
                "stab_demangle_type.lto_priv.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "stab_demangle_args"
            ],
            "imported": false,
            "current_name": "reverse_mangled_type_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "filename",
                "iVar1": "statResult",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong checkFile_00113f50(char *filename)\n\n{\n  int statResult;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStat;\n  \n  if (filename != (char *)0x0) {\n    statResult = stat(filename,&fileStat);\n    if (statResult < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(errorMessage,filename);\n      }\n      else {\n        errorReason = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(errorMessage,filename,errorReason);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(errorMessage,filename);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(errorMessage,filename);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(errorMessage,filename);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "get_file_size.cold",
                "non_fatal",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "copy_file",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "get_default_value_001087fd",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t get_default_value_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "sort_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "get_default_value_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatList",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatList)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,programName);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "decompile_and_extract_0011378f",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "result_pointer",
                "param_4": "parameter_4",
                "param_5": "parameter_5",
                "param_6": "parameter_6",
                "auVar1": "temp_array",
                "cVar2": "error_flag",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "puVar5": "dynamic_memory",
                "sVar6": "string_length",
                "lVar7": "loop_variable",
                "puVar8": "pointer_variable",
                "puVar9": "array_variable",
                "__dest": "destination",
                "plVar11": "pointer_variable_2",
                "bVar12": "flag",
                "local_258": "local_variable_1",
                "local_250": "local_variable_2",
                "local_248": "local_variable_3",
                "uStack_244": "stack_variable_1",
                "uStack_240": "stack_variable_2",
                "uStack_23c": "stack_variable_3",
                "local_238": "local_variable_4",
                "local_228": "local_variable_5",
                "local_220": "local_variable_6",
                "local_1f8": "local_variable_7",
                "local_1f0": "local_variable_8",
                "local_1e8": "local_array_1",
                "local_a0": "local_array_2",
                "local_78": "local_array_3",
                "uStack_70": "stack_variable_4",
                "local_68": "local_variable_9",
                "local_60": "local_variable_10",
                "local_58": "local_variable_11",
                "uStack_54": "stack_variable_5",
                "uStack_50": "stack_variable_6",
                "uStack_4c": "stack_variable_7",
                "unique0x100000e9": "unique_variable_1",
                "unique0x100000ed": "unique_variable_2"
            },
            "code": "\nundefined4\ndecompile_and_extract_0011378f(undefined8 *output_buffer,undefined8 *input_buffer,long *result_pointer,undefined8 *parameter_4,\n            undefined8 *parameter_5,undefined8 *parameter_6)\n\n{\n  undefined temp_array [16];\n  char error_flag;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *dynamic_memory;\n  size_t string_length;\n  long loop_variable;\n  undefined8 *pointer_variable;\n  undefined4 *array_variable;\n  char *destination;\n  undefined8 *puVar10;\n  long *pointer_variable_2;\n  byte flag;\n  undefined8 *local_variable_1;\n  long local_variable_2;\n  undefined4 local_variable_3;\n  undefined4 stack_variable_1;\n  undefined4 stack_variable_2;\n  undefined4 stack_variable_3;\n  undefined local_variable_4 [16];\n  undefined8 local_variable_5;\n  undefined local_variable_6 [40];\n  undefined8 local_variable_7;\n  undefined8 local_variable_8;\n  undefined4 local_array_1 [82];\n  undefined local_array_2 [40];\n  undefined local_array_3 [8];\n  undefined8 stack_variable_4;\n  undefined8 local_variable_9;\n  undefined4 local_variable_10;\n  undefined4 local_variable_11;\n  undefined4 stack_variable_5;\n  undefined4 stack_variable_6;\n  undefined4 stack_variable_7;\n  \n  flag = 0;\n  local_variable_3 = 0;\n  stack_variable_1 = 0;\n  stack_variable_2 = 500;\n  stack_variable_3 = 0;\n  local_variable_1 = output_buffer;\n  local_variable_2 = xmalloc(500);\n  local_variable_5 = 1;\n  local_variable_4 = ZEXT816(0);\n  error_flag = bfd_hash_table_init(local_variable_6,string_hash_newfunc_lto_priv_0,0x30);\n  if ((error_flag == '\\0') ||\n     (error_flag = bfd_hash_table_init(local_array_2,string_hash_newfunc_lto_priv_0,0x30), error_flag == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    non_fatal(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    local_variable_7 = 0;\n    unique_variable_1 = 0xffffffff;\n    local_array_3 = (undefined  [8])0xffffffffffffffff;\n    unique_variable_2 = 0xffffffff;\n    array_variable = local_array_1;\n    for (loop_variable = 0x52; loop_variable != 0; loop_variable = loop_variable + -1) {\n      *array_variable = 0;\n      array_variable = array_variable + (ulong)flag * -2 + 1;\n    }\n    local_variable_9 = 0;\n    local_variable_10 = 0;\n    local_variable_8 = 1;\n    local_variable_11 = 0;\n    stack_variable_5 = 0;\n    stack_variable_6 = 0xffffffff;\n    stack_variable_7 = 0xffffffff;\n    error_flag = stab_write_symbol_lto_priv_0(&local_variable_1,0,0,0,0);\n    temp_array = _local_array_3;\n    if (error_flag != '\\0') {\n      local_array_3._4_4_ = stack_variable_1;\n      local_array_3._0_4_ = local_variable_3;\n      stack_variable_4 = temp_array._8_8_;\n      error_flag = stab_write_symbol_lto_priv_0(&local_variable_1,100,0,0,*output_buffer);\n      if (error_flag != '\\0') {\n        *(int *)(input_buffer + 6) = *(int *)(input_buffer + 6) + 1;\n        input_buffer[10] = 0;\n        puVar10 = (undefined8 *)*input_buffer;\n        *(undefined4 *)(input_buffer + 7) = *(undefined4 *)((long)input_buffer + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          input_buffer[8] = puVar10[2];\n          *(undefined4 *)(input_buffer + 9) = 0;\n          error_flag = stab_start_compilation_unit_lto_priv_0(&local_variable_1,*(undefined8 *)(puVar10[1] + 8))\n          ;\n          if (error_flag == '\\0') {\n            return 0;\n          }\n          pointer_variable_2 = (long *)puVar10[1];\n          if (pointer_variable_2 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)pointer_variable_2[2] != (undefined8 *)0x0) {\n                for (pointer_variable = *(undefined8 **)(undefined8 *)pointer_variable_2[2]; pointer_variable != (undefined8 *)0x0;\n                    pointer_variable = (undefined8 *)*pointer_variable) {\n                  error_flag = debug_write_name_constprop_0(input_buffer,&local_variable_1);\n                  if (error_flag == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              pointer_variable_2 = (long *)*pointer_variable_2;\n              if (pointer_variable_2 == (long *)0x0) break;\n              error_flag = stab_start_source_lto_priv_0(&local_variable_1,pointer_variable_2[1]);\n              if (error_flag == '\\0') {\n                return 0;\n              }\n            }\n          }\n          error_flag = debug_write_linenos_constprop_0(input_buffer,&local_variable_1,0xffffffffffffffff);\n          if (error_flag == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(stack_variable_7,stack_variable_6) == -1) &&\n           (error_code = stab_write_symbol_lto_priv_0(&local_variable_1,100,0,local_variable_9,0), (char)error_code != '\\0'))\n        {\n          (**(code **)(output_buffer[1] + 0x50))(local_variable_5,local_variable_2 + 8);\n          *result_pointer = local_variable_2;\n          *parameter_4 = CONCAT44(stack_variable_1,local_variable_3);\n          *parameter_6 = local_variable_5;\n          dynamic_memory = (undefined *)xmalloc();\n          *dynamic_memory = 0;\n          destination = dynamic_memory + 1;\n          *parameter_5 = dynamic_memory;\n          for (loop_variable = local_variable_4._0_8_; loop_variable != 0; loop_variable = *(long *)(loop_variable + 0x18)) {\n            strcpy(destination,*(char **)(loop_variable + 8));\n            string_length = strlen(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "bfd_hash_table_init",
                "strlen",
                "debug_write_linenos.constprop.0",
                "string_hash_newfunc.lto_priv.0",
                "strcpy",
                "debug_write_name.constprop.0",
                "xmalloc",
                "bfd_get_error",
                "bfd_errmsg",
                "non_fatal",
                "stab_start_compilation_unit.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decompile_and_extract_0011378f"
        },
        "FUN_001281e0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strnlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281e0",
            "calling": [
                "strnlen"
            ],
            "imported": false,
            "current_name": "FUN_001281e0"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_not_found_error_00104966",
                "piVar1": "errno_ptr",
                "uVar2": "error_message",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_localized_error_message",
                "non_fatal": "print_error_message",
                "strerror": "get_error_string"
            },
            "code": "\nundefined8 handle_file_not_found_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = get_errno_location();\n  if (*errno_ptr == 2) {\n    error_message = get_localized_error_message(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_message);\n  }\n  else {\n    get_error_string(*errno_ptr);\n    error_message = get_localized_error_message(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_not_found_error_00104966"
        },
        "FUN_001280c0": {
            "renaming": {},
            "code": "\n\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280c0",
            "calling": [
                "strtod"
            ],
            "imported": false,
            "current_name": "FUN_001280c0"
        },
        "FUN_001040f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001040f0"
        },
        "FUN_00104720": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "main",
                "create_symbol_htab"
            ],
            "imported": false,
            "current_name": "FUN_00104720"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "modify_type_0010a0a0",
                "param_1": "input",
                "stab_modify_type": "update_type"
            },
            "code": "\nvoid modify_type_0010a0a0(long input)\n\n{\n  update_type(input,0x26,4,input + 0x198,input + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_type_0010a0a0"
        },
        "FUN_00104600": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104600"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "report_function_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "address",
                "param_10": "value1",
                "param_11": "value2",
                "param_12": "value3",
                "param_13": "value4",
                "param_14": "value5",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "bufferPointer",
                "local_c8": "bufferPointer2",
                "local_b8": "buffer",
                "local_b0": "data1",
                "local_a8": "data2",
                "local_a0": "data3",
                "local_98": "data4",
                "local_90": "data5",
                "local_88": "output1",
                "local_78": "output2",
                "local_68": "output3",
                "local_58": "output4",
                "local_48": "output5",
                "local_38": "output6",
                "local_28": "output7",
                "local_18": "output8"
            },
            "code": "\nvoid reportFunction_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 address,undefined8 value1,undefined8 value2,undefined8 value3,\n                 undefined8 value4,undefined8 value5)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 length;\n  undefined *bufferPointer;\n  undefined *bufferPointer2;\n  undefined buffer [8];\n  undefined8 data1;\n  undefined8 data2;\n  undefined8 data3;\n  undefined8 data4;\n  undefined8 data5;\n  undefined4 output1;\n  undefined4 output2;\n  undefined4 output3;\n  undefined4 output4;\n  undefined4 output5;\n  undefined4 output6;\n  undefined4 output7;\n  undefined4 output8;\n  \n  if (condition != '\\0') {\n    output1 = input1;\n    output2 = input2;\n    output3 = input3;\n    output4 = input4;\n    output5 = input5;\n    output6 = input6;\n    output7 = input7;\n    output8 = input8;\n  }\n  bufferPointer = &stack0x00000008;\n  size = 8;\n  bufferPointer2 = buffer;\n  length = 0x30;\n  data1 = value1;\n  data2 = value2;\n  data3 = value3;\n  data4 = value4;\n  data5 = value5;\n  report(address,&size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "check_new_section_flags.cold",
                "get_file_size.cold",
                "stab_write_symbol.lto_priv.0",
                "smart_rename.cold",
                "main",
                "merge_gnu_build_notes",
                "get_file_size",
                "parse_flags.cold",
                "FUN_001086af",
                "stab_int_type.lto_priv.0",
                "set_times.cold",
                "FUN_00105828",
                "FUN_00104cc1",
                "FUN_001152b6",
                "FUN_00104ea2",
                "FUN_00107880",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "copy_object",
                "stab_struct_field.lto_priv.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "report_function_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "generate_type_00112c1f",
                "param_1": "info",
                "param_2": "type",
                "param_3": "tag",
                "param_4": "base_type",
                "plVar1": "type_ptr",
                "lVar2": "ptr",
                "puVar3": "var_ptr",
                "puVar4": "var_ptr2",
                "cVar5": "flag",
                "piVar6": "ptr_flag",
                "uVar7": "result",
                "uVar8": "enum_value",
                "uVar10": "u32_value",
                "uVar11": "u64_value",
                "uVar13": "u32_var",
                "local_3c": "local_var"
            },
            "code": "\n\n\nundefined8 generateType_00112c1f(ulong info,undefined8 type,int *tag,long base_type)\n\n{\n  long *type_ptr;\n  long ptr;\n  undefined8 *var_ptr;\n  undefined8 *var_ptr2;\n  char flag;\n  int *ptr_flag;\n  undefined8 result;\n  undefined8 enum_value;\n  int iVar9;\n  undefined4 u32_value;\n  undefined8 u64_value;\n  ulong uVar12;\n  uint u32_var;\n  bool bVar14;\n  uint local_var;\n  \n  uVar12 = info;\nLAB_00112c39:\n  if (tag != (int *)0x0) {\n    iVar9 = *tag;\n    if (iVar9 - 0x16U < 2) {\n      do {\n        type_ptr = *(long **)(tag + 4);\n        u32_var = *(uint *)(info + 0x30);\n        uVar12 = (ulong)u32_var;\n        ptr = *type_ptr;\n        if (*(uint *)(ptr + 0x10) == u32_var) {\n          if (iVar9 == 0x16) {\n            result = stab_typedef_type_lto_priv_0(type,*(undefined8 *)(ptr + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptr_flag = (int *)debug_get_real_type_isra_0(tag,0);\n          if (ptr_flag == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr_flag - 7U < 4) && (*(long *)(ptr_flag + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr_flag + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (flag = debug_set_class_id_lto_priv_0\n                                  (info,*(undefined8 *)(**(long **)(tag + 4) + 8),ptr_flag),\n               flag == '\\0')) {\n              return 0;\n            }\n            u32_var = *(uint *)(*(long *)(ptr_flag + 4) + 0xc);\n          }\n          else {\n            u32_var = 0;\n          }\n          iVar9 = *ptr_flag;\n          result = *(undefined8 *)(**(long **)(tag + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (iVar9 == 0x17) {\n          if (ptr != base_type) goto LAB_00112c94;\n          *(uint *)(base_type + 0x10) = u32_var;\n          base_type = *type_ptr;\n          tag = (int *)type_ptr[1];\n          goto LAB_00112c39;\n        }\n        if (base_type != 0) {\n          *(uint *)(base_type + 0x10) = u32_var;\n        }\n        tag = (int *)type_ptr[1];\n        if (tag == (int *)0x0) goto LAB_00112dd6;\n        iVar9 = *tag;\n        base_type = 0;\n      } while (iVar9 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (base_type == 0) goto LAB_00112d74;\n      *(undefined4 *)(base_type + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(base_type + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(base_type + 8);\n    }\n    switch(iVar9) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = stab_void_type_lto_priv_0(type);\n      return result;\n    case 3:\n      result = stab_int_type_lto_priv_0(type,tag[1],*(undefined *)(tag + 4));\n      return result;\n    case 4:\n      result = stab_float_type_lto_priv_0(type,tag[1]);\n      return result;\n    case 5:\n      result = stab_complex_type_lto_priv_0(type,tag[1]);\n      return result;\n    case 6:\n      result = stab_bool_type_lto_priv_0(type,tag[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(tag + 4) != 0) {\n        if ((*(uint *)(*(long *)(tag + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (flag = debug_set_class_id_lto_priv_0(info,result,tag), flag == '\\0')) {\n          return 0;\n        }\n        ptr = *(long *)(tag + 4);\n        if (*(int *)(info + 0x30) == *(int *)(ptr + 8)) {\n          u32_var = *(uint *)(ptr + 0xc);\n          if (u32_var <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          iVar9 = *tag;\nLAB_00112ed2:\n          result = stab_tag_type_lto_priv_0(type,result,u32_var,iVar9);\n          return result;\n        }\n        *(int *)(ptr + 8) = *(int *)(info + 0x30);\n      }\n      u32_value = 0;\n      if (*(long *)(tag + 4) != 0) {\n        u32_value = *(undefined4 *)(*(long *)(tag + 4) + 0xc);\n      }\n      flag = stab_start_struct_type_lto_priv_0(type,result,u32_value,*tag == 7,tag[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(tag + 4) != (long *)0x0) && (uVar12 = 0, **(long **)(tag + 4) != 0)) {\n        while( true ) {\n          var_ptr2 = *(undefined8 **)(**(long **)(tag + 4) + uVar12 * 8);\n          if (var_ptr2 == (undefined8 *)0x0) break;\n          flag = generateType_00112c1f(info,type,var_ptr2[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = stab_struct_field_lto_priv_0\n                            (type,*var_ptr2,*(undefined4 *)(var_ptr2 + 3),\n                             *(undefined4 *)((long)var_ptr2 + 0x1c),*(undefined4 *)(var_ptr2 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          uVar12 = (ulong)((int)uVar12 + 1);\n        }\n      }\n      result = stab_end_struct_type_lto_priv_0(type);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(tag + 4) == 0) {\n        u32_var = 0;\n        ptr_flag = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(tag + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (uVar12 = info, flag = debug_set_class_id_lto_priv_0(info,result,tag),\n           flag == '\\0')) {\n          return 0;\n        }\n        ptr = *(long *)(tag + 4);\n        u32_var = *(uint *)(ptr + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(ptr + 8)) {\n          if (u32_var <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          iVar9 = *tag;\n          goto LAB_00112ed2;\n        }\n        ptr_flag = *(int **)(ptr + 0x20);\n        *(int *)(ptr + 8) = *(int *)(info + 0x30);\n        if (((ptr_flag != (int *)0x0) && (tag != ptr_flag)) &&\n           (uVar12 = info, flag = generateType_00112c1f(info,type,ptr_flag,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = stab_start_class_type_lto_priv_0\n                        (type,result,u32_var,*tag == 9,tag[1],ptr_flag != (int *)0x0,\n                         tag == ptr_flag,uVar12);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(tag + 4) != (long *)0x0) {\n        u32_var = 0;\n        if (**(long **)(tag + 4) != 0) {\n          while (var_ptr2 = *(undefined8 **)(**(long **)(tag + 4) + (ulong)u32_var * 8),\n                var_ptr2 != (undefined8 *)0x0) {\n            flag = generateType_00112c1f(info,type,var_ptr2[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)var_ptr2 + 0x14) == '\\0') {\n              flag = stab_struct_field_lto_priv_0(type,*var_ptr2,*(undefined4 *)(var_ptr2 + 3));\n            }\n            else {\n              flag = stab_class_static_member_lto_priv_0(type,*var_ptr2,var_ptr2[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            u32_var = u32_var + 1;\n          }\n        }\n        u32_var = 0;\n        if (*(long *)(*(long *)(tag + 4) + 0x10) != 0) {\n          while (var_ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(tag + 4) + 0x10) + (ulong)u32_var * 8),\n                var_ptr2 != (undefined8 *)0x0) {\n            flag = generateType_00112c1f(info,type,*var_ptr2,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = stab_class_baseclass_lto_priv_0\n                              (type,*(undefined4 *)(var_ptr2 + 1),\n                               *(undefined *)((long)var_ptr2 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            u32_var = u32_var + 1;\n          }\n        }\n        local_var = 0;\n        if (*(long *)(*(long *)(tag + 4) + 0x18) != 0) {\n          while (var_ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(tag + 4) + 0x18) + (ulong)local_var * 8),\n                var_ptr2 != (undefined8 *)0x0) {\n            flag = stab_class_start_method_lto_priv_0(type,*var_ptr2);\n            if (flag == '\\0') {\n              return 0;\n            }\n            u32_var = 0;\n            while (var_ptr = *(undefined8 **)(var_ptr2[1] + (ulong)u32_var * 8),\n                  var_ptr != (undefined8 *)0x0) {\n              if ((var_ptr[4] != 0) &&\n                 (flag = generateType_00112c1f(info,type,var_ptr[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = generateType_00112c1f(info,type,var_ptr[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (var_ptr[3] == -1) {\n                flag = stab_class_static_method_variant_lto_priv_0\n                                  (type,*var_ptr,*(undefined4 *)(var_ptr + 2),\n                                   *(undefined *)((long)var_ptr + 0x14),\n                                   *(undefined *)((long)var_ptr + 0x15));\n              }\n              else {\n                flag = stab_class_method_variant_lto_priv_0(type);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              u32_var = u32_var + 1;\n            }\n            flag = stab_class_end_method_lto_priv_0(type);\n            if (flag == '\\0') {\n              return 0;\n            }\n            local_var = local_var + 1;\n          }\n        }\n      }\n      result = stab_end_class_type_lto_priv_0(type);\n      return result;\n    case 0xb:\n      var_ptr2 = *(undefined8 **)(tag + 4);\n      if (var_ptr2 == (undefined8 *)0x0) {\n        enum_value = 0;\n        u64_value = 0;\n      }\n      else {\n        enum_value = var_ptr2[1];\n        u64_value = *var_ptr2;\n      }\n      result = stab_enum_type_lto_priv_0(type,result,u64_value,enum_value);\n      return result;\n    case 0xc:\n      flag = generateType_00112c1f(info,type,*(undefined8 *)(tag + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_pointer_type_lto_priv_0(type);\n      return result;\n    case 0xd:\n      flag = generateType_00112c1f(info,type,**(undefined8 **)(tag + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(tag + 4) + 8) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (ptr = *(long *)(*(long *)(*(long *)(tag + 4) + 8) + uVar12 * 8), ptr != 0) {\n          uVar12 = uVar12 + 1;\n          flag = generateType_00112c1f(info,type,ptr,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        uVar12 = uVar12 & 0xffffffff;\n      }\n      result = stab_function_type_lto_priv_0\n                        (type,uVar12,*(undefined *)(*(long *)(tag + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = generateType_00112c1f(info,type,*(undefined8 *)(tag + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_reference_type_lto_priv_0(type);\n      return result;\n    case 0xf:\n      flag = generateType_00112c1f(info,type,**(undefined8 **)(tag + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_range_type_lto_priv_0\n                        (type,*(undefined8 *)(*(long *)(tag + 4) + 8),\n                         *(undefined8 *)(*(long *)(tag + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = generateType_00112c1f(info,type,**(undefined8 **)(tag + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = generateType_00112c1f(info,type,*(undefined8 *)(*(long *)(tag + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      ptr = *(long *)(tag + 4);\n      result = stab_array_type_lto_priv_0\n                        (type,*(undefined8 *)(ptr + 0x10),*(undefined8 *)(ptr + 0x18),\n                         *(undefined *)(ptr + 0x20));\n      return result;\n    case 0x11:\n      flag = generateType_00112c1f(info,type,**(undefined8 **)(tag + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_set_type_lto_priv_0(type,*(undefined *)(*(long *)(tag + 4) + 8));\n      return result;\n    case 0x12:\n      flag = generateType_00112c1f(info,type,**(undefined8 **)(tag + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = generateType_00112c1f(info,type,*(undefined8 *)(*(long *)(tag + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_offset_type_lto_priv_0(type);\n      return result;\n    case 0x13:\n      flag = generateType_00112c1f(info,type,**(undefined8 **)(tag + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(tag + 4) + 0x10) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (ptr = *(long *)(*(long *)(*(long *)(tag + 4) + 0x10) + uVar12 * 8), ptr != 0)\n        {\n          uVar12 = uVar12 + 1;\n          flag = generateType_00112c1f(info,type,ptr,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(tag + 4) + 8) != 0) &&\n         (flag = generateType_00112c1f(info,type,*(long *)(*(long *)(tag + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = stab_method_type_lto_priv_0\n                        (type,*(long *)(*(long *)(tag + 4) + 8) != 0,uVar12 & 0xffffffff,\n                         *(undefined *)(*(long *)(tag + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = generateType_00112c1f(info,type,*(undefined8 *)(tag + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_const_type_lto_priv_0(type);\n      return result;\n    case 0x15:\n      flag = generateType_00112c1f(info,type,*(undefined8 *)(tag + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_volatile_type_lto_priv_0(type);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bVar14 = *(int **)**(undefined8 **)(tag + 4) == tag;\n  tag = *(int **)**(undefined8 **)(tag + 4);\n  if (bVar14) {\nLAB_00112dd6:\n    result = stab_empty_type_lto_priv_0(type);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "__assert_fail",
                "stab_set_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "debug_get_real_type.isra.0",
                "stab_tag_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "abort",
                "stab_struct_field.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "fprintf",
                "stab_function_type.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "stab_class_method_variant.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_reference_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "dcgettext",
                "stab_int_type.lto_priv.0",
                "debug_set_class_id.lto_priv.0",
                "stab_bool_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_type_00112c1f"
        },
        "FUN_00104850": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104850"
        },
        "FUN_00104730": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104730"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isCopyingEnabled",
                "unaff_R15": "dataPointer",
                "lVar1": "errorMessage",
                "status": "errorStatus"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char isCopyingEnabled;\n  long dataPointer;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isCopyingEnabled != '\\0') {\n    *(undefined4 *)(*(long *)(dataPointer + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    errorStatus = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "FUN_001281d0": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281d0",
            "calling": [
                "memset"
            ],
            "imported": false,
            "current_name": "FUN_001281d0"
        },
        "FUN_00104610": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104610"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "message",
                "param_2": "source",
                "__format": "warningFormat",
                "in_RAX": "result"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 result;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,source,message,result);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "parse_stab",
                "parse_number",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "FUN_001280b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280b8",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_001280b8"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_file_architecture_00105828",
                "iVar1": "archType",
                "uVar2": "archValue",
                "uVar3": "filename",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 checkFileArchitecture_00105828(void)\n\n{\n  int archType;\n  undefined4 archValue;\n  undefined8 filename;\n  undefined8 errorMessage;\n  \n  archType = bfd_get_arch();\n  if (archType == 0) {\n    filename = bfd_get_archive_filename();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    non_fatal(errorMessage,filename);\n  }\n  else {\n    filename = bfd_get_mach();\n    archValue = bfd_get_arch();\n    filename = bfd_printable_arch_mach(archValue,filename);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    non_fatal(errorMessage,filename);\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "non_fatal",
                "bfd_get_arch",
                "bfd_get_mach",
                "dcgettext",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_file_architecture_00105828"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template_path",
                "pcVar1": "temp_dir_path"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template_path;\n  char *temp_dir_path;\n  \n  template_path = (char *)template_in_dir();\n  temp_dir_path = mkdtemp(template_path);\n  if (temp_dir_path == (char *)0x0) {\n    free(template_path);\n  }\n  return temp_dir_path;\n}\n\n",
            "called": [
                "make_tempdir.cold",
                "template_in_dir",
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_push_defined_type_0010bba1",
                "param_1": "binary_address",
                "param_2": "type",
                "lVar1": "hash_result",
                "uVar2": "push_result"
            },
            "code": "\nundefined8 lookup_and_push_defined_type_0010bba1(long binary_address,undefined8 type)\n\n{\n  long hash_result;\n  undefined8 push_result;\n  \n  hash_result = bfd_hash_lookup(binary_address + 0x1b8,type,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    push_result = stab_push_defined_type(binary_address,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return push_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "lookup_and_push_defined_type_0010bba1"
        },
        "FUN_00104740": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "try_dir.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104740"
        },
        "FUN_00104620": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104620"
        },
        "FUN_00104860": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104860"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "write_debug_symbol_0010e6a8",
                "param_1": "base_address",
                "param_2": "symbol_name",
                "__s": "symbol_type",
                "sVar3": "symbol_name_len",
                "sVar4": "symbol_type_len",
                "__s_00": "formatted_symbol",
                "lVar8": "symbol_count",
                "uVar1": "result_code",
                "uVar2": "symbol_visibility",
                "lVar5": "symbol_entry",
                "uVar6": "bfd_error_msg",
                "uVar7": "error_message",
                "uVar9": "return_value",
                "auVar10": "result"
            },
            "code": "\nundefined  [16] write_debug_symbol_0010e6a8(long base_address,char *symbol_name,undefined8 param_3,undefined8 param_4)\n\n{\n  uint result_code;\n  undefined4 symbol_visibility;\n  char *symbol_type;\n  size_t symbol_name_len;\n  size_t symbol_type_len;\n  char *formatted_symbol;\n  long symbol_entry;\n  undefined8 bfd_error_msg;\n  undefined8 error_message;\n  long symbol_count;\n  ulong return_value;\n  undefined result [16];\n  \n  symbol_count = *(long *)(*(long *)(base_address + 0x60) + 0x10);\n  symbol_visibility = *(undefined4 *)(*(long *)(base_address + 0x60) + 0x18);\n  symbol_type = (char *)stab_pop_type();\n  symbol_name_len = strlen(symbol_name);\n  symbol_type_len = strlen(symbol_type);\n  formatted_symbol = (char *)xmalloc(symbol_name_len + 0x14 + symbol_type_len);\n  if (symbol_count < 1) {\n    symbol_count = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = symbol_count + 1;\n    sprintf(formatted_symbol,\"%s:t%ld=%s\",symbol_name,symbol_count,symbol_type);\n  }\n  else {\n    sprintf(formatted_symbol,\"%s:t%s\",symbol_name,symbol_type);\n  }\n  free(symbol_type);\n  result_code = stab_write_symbol_lto_priv_0(base_address,0x80,0,0,formatted_symbol);\n  return_value = (ulong)result_code;\n  if ((char)result_code != '\\0') {\n    free(formatted_symbol);\n    symbol_entry = bfd_hash_lookup(base_address + 0x1b8,symbol_name,1,0);\n    if (symbol_entry != 0) {\n      *(long *)(symbol_entry + 0x20) = symbol_count;\n      *(undefined4 *)(symbol_entry + 0x28) = symbol_visibility;\n      goto LAB_0010e7b3;\n    }\n    symbol_visibility = bfd_get_error();\n    bfd_error_msg = bfd_errmsg(symbol_visibility);\n    error_message = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    non_fatal(error_message,bfd_error_msg);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  result._8_8_ = param_4;\n  result._0_8_ = return_value;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "bfd_get_error",
                "stab_pop_type",
                "non_fatal",
                "bfd_errmsg",
                "strlen",
                "sprintf",
                "dcgettext",
                "bfd_hash_lookup",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_debug_symbol_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "decode_and_write_symbol_0010e7c2",
                "param_1": "symbol_value",
                "param_2": "prefix",
                "param_3": "input_param_2",
                "param_4": "additional_data",
                "__s": "symbol",
                "__s_00": "encoded_symbol",
                "sVar1": "prefix_length",
                "sVar2": "symbol_length",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] decode_and_write_symbol_0010e7c2(undefined8 symbol_value,char *prefix,undefined8 input_param_2,undefined8 additional_data)\n\n{\n  char *symbol;\n  size_t prefix_length;\n  size_t symbol_length;\n  char *encoded_symbol;\n  undefined result [16];\n  \n  symbol = (char *)stab_pop_type();\n  prefix_length = strlen(prefix);\n  symbol_length = strlen(symbol);\n  encoded_symbol = (char *)xmalloc(prefix_length + 3 + symbol_length);\n  sprintf(encoded_symbol,\"%s:T%s\",prefix,symbol);\n  free(symbol);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbol_value,0x80,0,0,encoded_symbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(encoded_symbol);\n  }\n  result._8_8_ = additional_data;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "decode_and_write_symbol_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "process_data_00119dd0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data",
                "param_10": "value1",
                "param_11": "value2",
                "param_12": "value3",
                "param_13": "value4",
                "param_14": "value5",
                "in_AL": "initialFlag",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "bufferPtr",
                "local_c8": "localBuffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "paramValue1",
                "local_a8": "paramValue2",
                "local_a0": "paramValue3",
                "local_98": "paramValue4",
                "local_90": "paramValue5",
                "local_88": "output1",
                "local_78": "output2",
                "local_68": "output3",
                "local_58": "output4",
                "local_48": "output5",
                "local_38": "output6",
                "local_28": "output7",
                "local_18": "output8"
            },
            "code": "\nvoid processData_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data,undefined8 value1,undefined8 value2,undefined8 value3,\n                 undefined8 value4,undefined8 value5)\n\n{\n  char initialFlag;\n  undefined4 size;\n  undefined4 length;\n  undefined *bufferPtr;\n  undefined *localBuffer;\n  undefined temporaryBuffer [8];\n  undefined8 paramValue1;\n  undefined8 paramValue2;\n  undefined8 paramValue3;\n  undefined8 paramValue4;\n  undefined8 paramValue5;\n  undefined4 output1;\n  undefined4 output2;\n  undefined4 output3;\n  undefined4 output4;\n  undefined4 output5;\n  undefined4 output6;\n  undefined4 output7;\n  undefined4 output8;\n  \n  if (initialFlag != '\\0') {\n    output1 = input1;\n    output2 = input2;\n    output3 = input3;\n    output4 = input4;\n    output5 = input5;\n    output6 = input6;\n    output7 = input7;\n    output8 = input8;\n  }\n  bufferPtr = &stack0x00000008;\n  size = 8;\n  localBuffer = temporaryBuffer;\n  length = 0x30;\n  paramValue1 = value1;\n  paramValue2 = value2;\n  paramValue3 = value3;\n  paramValue4 = value4;\n  paramValue5 = value5;\n  report(data,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "report",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "copy_file",
                "find_section_list",
                "FUN_00114dc7",
                "copy_section.cold",
                "main",
                "parse_flags.cold",
                "parse_vma.cold",
                "create_new_symbol.cold",
                "coff_get_slot.lto_priv.0",
                "init_section_add.cold",
                "section_add_load_file.cold",
                "FUN_0010554f",
                "add_redefine_and_check",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "process_data_00119dd0"
        },
        "FUN_00104500": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "copy_file",
                "FUN_00107880",
                "copy_object",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104500"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_errors_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdErrorCode",
                "unaff_RBP": "stackPointer",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleErrors_001083b7(long errorCode)\n\n{\n  int bfdErrorCode;\n  undefined8 *stackPointer;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    bfdErrorCode = bfd_get_error();\n    if (bfdErrorCode == 5) {\n      return returnAddress;\n    }\n  }\n  bfd_nonfatal(*stackPointer);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "handle_errors_001083b7"
        },
        "FUN_001280e8": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280e8",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_001280e8"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "extract_sorted_notes_00116852",
                "in_RCX": "noteArray",
                "unaff_RBP": "currentNote",
                "unaff_R13": "startNote",
                "unaff_R14": "nextNote",
                "unaff_R15": "maxNote",
                "param_7": "filterParam1",
                "param_9": "filterParam2",
                "param_10": "outputSize",
                "param_11": "notePositions",
                "param_12": "outputBuffer",
                "param_13": "callbackData",
                "param_14": "noteCount",
                "bVar14": "tempVar",
                "sVar1": "noteSize",
                "uVar4": "noteIndex",
                "uVar5": "currentMin",
                "uVar6": "currentMax",
                "iVar3": "cmpResult",
                "lVar7": "loopCount",
                "__ptr": "tempBuffer",
                "pcVar2": "callback",
                "puVar9": "tempPtr1",
                "cVar10": "tempChar",
                "puVar11": "tempPtr2",
                "puVar12": "tempPtr3"
            },
            "code": "\nulong extractSortedNotes_00116852(void)\n\n{\n  size_t noteSize;\n  code *callback;\n  int cmpResult;\n  uint noteIndex;\n  undefined *tempBuffer;\n  size_t *noteArray;\n  ulong currentMin;\n  ulong currentMax;\n  long loopCount;\n  ulong uVar8;\n  size_t unaff_RBX;\n  size_t *currentNote;\n  undefined *tempPtr1;\n  char tempChar;\n  undefined *tempPtr2;\n  ulong in_R10;\n  undefined *tempPtr3;\n  size_t in_R11;\n  size_t *startNote;\n  size_t *nextNote;\n  size_t maxNote;\n  size_t *pnoteSize3;\n  byte tempVar;\n  size_t filterParam1;\n  size_t filterParam2;\n  ulong outputSize;\n  size_t *notePositions;\n  undefined *outputBuffer;\n  long callbackData;\n  size_t noteCount;\n  \n  tempVar = 0;\ncode_r0x00116852:\n  noteIndex = (int)in_R10 + 1;\n  if (0x10 < (int)in_R10) goto LAB_001167f5;\nLAB_00116863:\n  nextNote = nextNote + -9;\n  do {\n    if (startNote <= nextNote) {\n      noteSize = nextNote[2];\n      if (noteSize == 0) goto LAB_00116863;\n      uVar8 = (ulong)noteIndex;\n      if ((*nextNote == *currentNote) &&\n         (cmpResult = memcmp((void *)nextNote[3],(void *)currentNote[3],*currentNote), cmpResult == 0)) {\n        currentMax = nextNote[7];\n        currentMin = nextNote[8];\n        in_R10 = uVar8 & 0xffffffff;\n        if (maxNote == currentMax) {\n          if (unaff_RBX != currentMin) goto LAB_001167a6;\n          currentNote[2] = 0;\n        }\n        else {\n          if (maxNote < currentMax) {\n            if (currentMin < maxNote) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < currentMin) || (maxNote <= (currentMin + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (unaff_RBX < maxNote) {\n              if ((0xfffffffffffffff0 < unaff_RBX) ||\n                 (currentMax <= (unaff_RBX + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (unaff_RBX == currentMin) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (unaff_RBX <= currentMin) {\n              currentNote[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (currentMin < maxNote) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (noteSize == 0x101)) goto code_r0x00116852;\n          if (currentMin <= unaff_RBX) {\n            currentMin = unaff_RBX;\n          }\n          if (currentMax < maxNote) {\n            maxNote = currentMax;\n          }\n          nextNote[8] = currentMin;\n          nextNote[7] = maxNote;\n          currentNote[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        nextNote = currentNote;\n        currentNote = nextNote + 9;\n        if (noteArray <= currentNote) {\n          qsort(notePositions,noteCount,0x48,sort_gnu_build_notes);\n          tempBuffer = (undefined *)xmalloc(outputSize * 2);\n          filterParam1 = 0;\n          tempPtr3 = tempBuffer;\n          for (pnoteSize3 = notePositions; pnoteSize3 < noteArray; pnoteSize3 = pnoteSize3 + 9) {\n            if (pnoteSize3[2] != 0) {\n              tempPtr2 = tempPtr3 + 4;\n              tempPtr1 = tempPtr3 + 0xc;\n              callback = *(code **)(*(long *)(callbackData + 8) + 0x50);\n              if ((pnoteSize3[7] == filterParam2) && (pnoteSize3[8] == filterParam1)) {\n                (*callback)(*pnoteSize3,tempPtr3);\n                (**(code **)(*(long *)(callbackData + 8) + 0x50))(0,tempPtr2);\n                (**(code **)(*(long *)(callbackData + 8) + 0x50))(pnoteSize3[2],tempPtr3 + 8);\n                currentMax = pnoteSize3[6];\n                uVar8 = *pnoteSize3;\n                tempPtr3 = (undefined *)pnoteSize3[3];\n                tempPtr2 = tempPtr1;\n                for (currentMin = uVar8; currentMin != 0; currentMin = currentMin - 1) {\n                  *tempPtr2 = *tempPtr3;\n                  tempPtr3 = tempPtr3 + (ulong)tempVar * -2 + 1;\n                  tempPtr2 = tempPtr2 + (ulong)tempVar * -2 + 1;\n                }\n                if (uVar8 < currentMax) {\n                  for (loopCount = currentMax - uVar8; loopCount != 0; loopCount = loopCount + -1) {\n                    *tempPtr2 = 0;\n                    tempPtr2 = tempPtr2 + (ulong)tempVar * -2 + 1;\n                  }\n                }\n                tempPtr3 = tempPtr1 + currentMax;\n              }\n              else {\n                (*callback)();\n                if (*(int *)(*(long *)(callbackData + 8) + 8) == 5) {\n                  tempChar = (*(char *)(*(long *)(callbackData + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  tempChar = '\\b';\n                }\n                (**(code **)(*(long *)(callbackData + 8) + 0x50))(tempChar,tempPtr2);\n                (**(code **)(*(long *)(callbackData + 8) + 0x50))(pnoteSize3[2],tempPtr3 + 8);\n                uVar8 = *pnoteSize3;\n                tempPtr3 = (undefined *)pnoteSize3[3];\n                tempPtr2 = tempPtr1;\n                for (currentMax = uVar8; currentMax != 0; currentMax = currentMax - 1) {\n                  *tempPtr2 = *tempPtr3;\n                  tempPtr3 = tempPtr3 + (ulong)tempVar * -2 + 1;\n                  tempPtr2 = tempPtr2 + (ulong)tempVar * -2 + 1;\n                }\n                currentMax = pnoteSize3[6];\n                if (uVar8 < currentMax) {\n                  for (loopCount = currentMax - uVar8; loopCount != 0; loopCount = loopCount + -1) {\n                    *tempPtr2 = 0;\n                    tempPtr2 = tempPtr2 + (ulong)tempVar * -2 + 1;\n                  }\n                }\n                loopCount = *(long *)(callbackData + 8);\n                tempPtr1 = tempPtr1 + currentMax;\n                tempPtr3 = tempPtr1 + 8;\n                if ((*(int *)(loopCount + 8) == 5) &&\n                   (*(char *)(*(long *)(callbackData + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopCount + 0x38))(pnoteSize3[7],tempPtr1);\n                  (**(code **)(*(long *)(callbackData + 8) + 0x38))(pnoteSize3[8],tempPtr3);\n                  tempPtr3 = tempPtr1 + 0x10;\n                }\n                else {\n                  (**(code **)(loopCount + 0x50))(pnoteSize3[7],tempPtr1);\n                  (**(code **)(*(long *)(callbackData + 8) + 0x50))(pnoteSize3[8],tempPtr1 + 4);\n                }\n                filterParam2 = pnoteSize3[7];\n                filterParam1 = pnoteSize3[8];\n              }\n            }\n          }\n          currentMax = (long)tempPtr3 - (long)tempBuffer;\n          uVar8 = currentMax;\n          tempPtr3 = tempBuffer;\n          if (currentMax < outputSize) {\n            for (; outputSize = currentMax, uVar8 != 0; uVar8 = uVar8 - 1) {\n              *outputBuffer = *tempPtr3;\n              tempPtr3 = tempPtr3 + (ulong)tempVar * -2 + 1;\n              outputBuffer = outputBuffer + (ulong)tempVar * -2 + 1;\n            }\n          }\n          free(tempBuffer);\n          free(notePositions);\n          return outputSize;\n        }\n        in_R11 = nextNote[0xb];\n      } while (in_R11 == 0);\n      maxNote = nextNote[0x10];\n      unaff_RBX = nextNote[0x11];\n      noteIndex = 0;\n      if (maxNote != unaff_RBX) break;\n      nextNote[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116852",
                "sort_gnu_build_notes",
                "qsort",
                "xmalloc",
                "free",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "extract_sorted_notes_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_type_00113d3a",
                "param_1": "inputParameter",
                "lVar1": "typePointer"
            },
            "code": "\nlong initializeType_00113d3a(long inputParameter)\n\n{\n  long typePointer;\n  \n  if (inputParameter != 0) {\n    typePointer = *(long *)(inputParameter + 8);\n    if (typePointer == 0) {\n      typePointer = debug_make_type_constprop_0(0xc,0);\n      if (typePointer == 0) {\n        typePointer = 0;\n      }\n      else {\n        *(long *)(typePointer + 0x10) = inputParameter;\n        *(long *)(inputParameter + 8) = typePointer;\n      }\n    }\n    return typePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_type_00113d3a"
        },
        "FUN_00104630": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104630"
        },
        "FUN_00104510": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "main",
                "parse_stab",
                "display_info.isra.0.cold",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104510"
        },
        "FUN_00104870": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104870"
        },
        "FUN_00104750": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "section_add_load_file",
                "FUN_00107880",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104750"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "modify_symbol_0010a0d3",
                "param_1": "symbolAddress",
                "stab_modify_type": "updateSymbolType"
            },
            "code": "\nvoid modifySymbol_0010a0d3(long symbolAddress)\n\n{\n  updateSymbolType(symbolAddress,0x42,*(undefined4 *)(*(long *)(symbolAddress + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_symbol_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_sections_00115530",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "result",
                "pcVar2": "sectionName",
                "ppcVar3": "sectionRenameList",
                "cVar4": "isStripSection",
                "iVar5": "comparisonResult",
                "uVar6": "flags",
                "sVar7": "prefixLength",
                "sVar8": "sectionNameLength",
                "lVar9": "sectionInfo",
                "pcVar10": "prefix",
                "pcVar11": "baseAddress",
                "pcVar12": "changeSectionAddress",
                "uVar13": "updatedFlags",
                "bVar14": "isUpdated",
                "local_50": "errorMessage",
                "local_48": "updatedSectionName",
                "local_40": "sectionSize"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nvoid processSections_00115530(long param1,char **param2,long param3)\n\n{\n  long result;\n  char *sectionName;\n  char **sectionRenameList;\n  char isStripSection;\n  int comparisonResult;\n  uint flags;\n  size_t prefixLength;\n  size_t sectionNameLength;\n  long sectionInfo;\n  char *prefix;\n  char *baseAddress;\n  char *changeSectionAddress;\n  uint updatedFlags;\n  bool isUpdated;\n  long errorMessage;\n  char *updatedSectionName;\n  long sectionSize [2];\n  \n  isStripSection = is_strip_section_isra_0(param2);\n  if (isStripSection != '\\0') {\n    return;\n  }\n  prefix = *param2;\n  updatedFlags = *(uint *)((long)param2 + 0x24);\n  updatedSectionName = prefix;\n  sectionRenameList = section_rename_list;\n  if (*(int *)(*(long *)(param1 + 8) + 8) != *(int *)(*(long *)(param3 + 8) + 8)) {\n    updatedFlags = updatedFlags & *(uint *)(*(long *)(param1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param3 + 8) + 0x18);\n  }\n  for (; sectionRenameList != (char **)0x0; sectionRenameList = (char **)sectionRenameList[3]) {\n    comparisonResult = strcmp(*sectionRenameList,prefix);\n    if (comparisonResult == 0) {\n      if (*(uint *)(sectionRenameList + 2) != 0xffffffff) {\n        updatedFlags = *(uint *)(sectionRenameList + 2);\n      }\n      if (prefix != sectionRenameList[1]) {\n        updatedSectionName = sectionRenameList[1];\n        updatedFlags = check_new_section_flags(updatedFlags,param3);\n      }\n      break;\n    }\n  }\n  if (((prefix_alloc_sections_string != (char *)0x0) &&\n      (prefix = prefix_alloc_sections_string, (*(byte *)((long)param2 + 0x24) & 1) != 0)) ||\n     (prefix = prefix_sections_string, prefix_sections_string != (char *)0x0)) {\n    prefixLength = strlen(prefix);\n    sectionNameLength = strlen(updatedSectionName);\n    changeSectionAddress = (char *)xmalloc(prefixLength + 1 + sectionNameLength);\n    prefix = strcpy(changeSectionAddress,prefix);\n    updatedSectionName = strcat(prefix,updatedSectionName);\n  }\n  sectionInfo = find_section_list(*param2,0,0x80);\n  isUpdated = false;\n  if (sectionInfo == 0) {\n    if ((strip_symbols == 4) && ((updatedFlags & 0x2000001) != 0)) {\n      comparisonResult = *(int *)(*(long *)(param1 + 8) + 8);\n      if (comparisonResult == 5) {\n        if (*(int *)(param2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n            isUpdated = (updatedFlags & 0x2000000) == 0;\n            flags = ~((-(uint)((updatedFlags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param2 + 0x24) = *(uint *)((long)param2 + 0x24) & flags;\n          }\n          else {\n            flags = 0xfdfffefd;\n          }\n          updatedFlags = updatedFlags & flags;\n        }\n      }\n      else if ((comparisonResult != 2) || (comparisonResult = strcmp(*param2,\".buildid\"), comparisonResult != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    updatedFlags = check_new_section_flags(updatedFlags & 0x104 | *(uint *)(sectionInfo + 0x28),param3,*param2);\n  }\n  isStripSection = bfd_convert_section_setup(param1,param2,param3,&updatedSectionName,sectionSize);\n  if (isStripSection == '\\0') {\n    prefix = (char *)0x0;\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  prefix = (char *)bfd_make_section_anyway_with_flags(param3,updatedSectionName,updatedFlags);\n  if (prefix == (char *)0x0) {\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (copy_byte < 0) {\n    if (extract_symbol != '\\0') {\n      sectionSize[0] = 0;\n      goto LAB_001158e7;\n    }\n    isStripSection = bfd_set_section_size(prefix,sectionSize[0]);\n    if (isStripSection == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  else {\n    sectionSize[0] = ((((long)interleave - 1U) + sectionSize[0]) / (ulong)(long)interleave) *\n                  (long)copy_width;\nLAB_001158e7:\n    isStripSection = bfd_set_section_size(prefix);\n    if (isStripSection == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  errorMessage = 0;\n  changeSectionAddress = param2[6];\n  sectionInfo = find_section_list(*param2,0,0x18);\n  if (sectionInfo == 0) {\n    prefix[0x28] = prefix[0x28] | 1;\n    baseAddress = *param2;\n    changeSectionAddress = changeSectionAddress + change_section_address;\n    *(char **)(prefix + 0x30) = changeSectionAddress;\n    *(char **)(prefix + 0x38) = changeSectionAddress;\n    changeSectionAddress = param2[7];\n    sectionInfo = find_section_list(baseAddress,0,0x60);\n    if (sectionInfo == 0) goto LAB_00115695;\nLAB_00115860:\n    baseAddress = *(char **)(sectionInfo + 0x20);\n    if ((*(byte *)(sectionInfo + 0x14) & 0x40) != 0) {\n      baseAddress = baseAddress + (long)changeSectionAddress;\n    }\n    *(char **)(prefix + 0x38) = baseAddress;\n    sectionInfo = find_section_list(*param2,0,0x200);\n    if (sectionInfo != 0) goto LAB_00115889;\nLAB_001156b8:\n    updatedFlags = *(uint *)((long)param2 + 0x7c);\n    if (updatedFlags < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(prefix + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    prefix[0x28] = prefix[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = prefix;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    isStripSection = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,prefix);\n    if (isStripSection == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    baseAddress = *(char **)(sectionInfo + 0x18);\n    if ((*(byte *)(sectionInfo + 0x14) & 8) == 0) {\n      baseAddress = baseAddress + (long)changeSectionAddress;\n    }\n    prefix[0x28] = prefix[0x28] | 1;\n    sectionName = *param2;\n    *(char **)(prefix + 0x30) = baseAddress;\n    *(char **)(prefix + 0x38) = baseAddress;\n    changeSectionAddress = param2[7];\n    sectionInfo = find_section_list(sectionName,0,0x60);\n    if (sectionInfo != 0) goto LAB_00115860;\nLAB_00115695:\n    baseAddress = *param2;\n    *(char **)(prefix + 0x38) = changeSectionAddress + change_section_address;\n    sectionInfo = find_section_list(baseAddress,0,0x200);\n    if (sectionInfo == 0) goto LAB_001156b8;\nLAB_00115889:\n    updatedFlags = *(uint *)(sectionInfo + 0x2c);\n    if (0x3e < updatedFlags) {\n      initialize_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(prefix + 0x7c) = updatedFlags;\n    *(undefined4 *)(prefix + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    prefix[0x28] = prefix[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = prefix;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    changeSectionAddress = param2[0x1a];\n    sectionInfo = group_signature_isra_0(changeSectionAddress,param2[0x1c]);\n    if ((sectionInfo == 0) ||\n       (result = *(long *)(param1 + 8), *(uint *)(sectionInfo + 0x18) = *(uint *)(sectionInfo + 0x18) | 0x20,\n       *(int *)(result + 8) != 5)) goto LAB_00115700;\n    *(long *)(changeSectionAddress + 0xb0) = sectionInfo;\n    isStripSection = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,prefix);\n    if (isStripSection == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (isUpdated) {\n    *(undefined4 *)(*(long *)(prefix + 0xd0) + 4) = 8;\n  }\n  if (errorMessage == 0) {\n    return;\n  }\nLAB_001080d1:\n  status = 1;\n  bfd_nonfatal_message(0,param3,prefix,errorMessage);\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size",
                "find_section_list",
                "setup_section.cold",
                "strlen",
                "strcat",
                "dcgettext",
                "bfd_make_section_anyway_with_flags",
                "strcpy",
                "strcmp",
                "is_strip_section.isra.0",
                "xmalloc",
                "bfd_convert_section_setup",
                "check_new_section_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_sections_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "modify_stab_type_0010a0bd",
                "param_1": "param",
                "stab_modify_type": "modifyType"
            },
            "code": "\nvoid modifyStabType_0010a0bd(long param)\n\n{\n  modifyType(param,0x6b,*(undefined4 *)(*(long *)(param + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_and_demangle_type_00113e5e",
                "param_1": "input_string",
                "param_2": "input_string_ptr",
                "param_3": "string_length",
                "cVar1": "result",
                "local_20": "temp_str"
            },
            "code": "\nundefined8 validate_and_demangle_type_00113e5e(undefined8 input_string,char **input_string_ptr,long string_length)\n\n{\n  char result;\n  char *temp_str [2];\n  \n  temp_str[0] = *input_string_ptr;\n  *input_string_ptr = (char *)(string_length + 2);\n  if ((((long)(char *)(string_length + 2) - (long)temp_str[0] < 5) ||\n      (result = startswith_lto_priv_0_lto_priv_0(temp_str[0],\"type\"), result == '\\0')) ||\n     ((temp_str[0][4] != '$' && (temp_str[0][4] != '.')))) {\n    if (*temp_str[0] != '_') {\n      return 1;\n    }\n    if (temp_str[0][1] != '_') {\n      return 1;\n    }\n    if (temp_str[0][2] != 'o') {\n      return 1;\n    }\n    if (temp_str[0][3] != 'p') {\n      return 1;\n    }\n    temp_str[0] = temp_str[0] + 4;\n  }\n  else {\n    temp_str[0] = temp_str[0] + 5;\n  }\n  result = stab_demangle_type_lto_priv_0(input_string,temp_str,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "validate_and_demangle_type_00113e5e"
        },
        "FUN_00104520": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104520"
        },
        "FUN_00104400": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "create_new_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104400"
        },
        "FUN_00104760": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "main",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "fatal",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104760"
        },
        "FUN_00104640": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104640"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "format_and_store_data_0010abdd",
                "param_1": "data",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "dataPtr",
                "pcVar2": "dataStringPtr",
                "bVar3": "tempByte",
                "pcVar4": "string1Ptr",
                "__s": "string2Ptr",
                "sVar5": "dataStringLen",
                "sVar6": "string1Len",
                "sVar7": "string2Len",
                "sVar8": "string3Len",
                "uVar9": "result",
                "cVar10": "tempChar1",
                "cVar11": "tempChar2",
                "local_52": "localFlag"
            },
            "code": "\nundefined8\nformatAndStoreData_0010abdd(long data,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long dataPtr;\n  char *dataStringPtr;\n  byte tempByte;\n  char *string1Ptr;\n  char *string2Ptr;\n  size_t dataStringLen;\n  size_t string1Len;\n  size_t string2Len;\n  size_t string3Len;\n  undefined8 result;\n  char tempChar1;\n  char tempChar2;\n  byte localFlag;\n  \n  string2Ptr = (char *)0x0;\n  localFlag = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  string1Ptr = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    tempByte = 1;\n    if (localFlag == 0) {\n      tempByte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n    }\n    localFlag = tempByte & 1;\n    string2Ptr = (char *)stab_pop_type(data);\n  }\n  dataPtr = *(long *)(data + 0x60);\n  if ((dataPtr == 0) || (dataStringPtr = *(char **)(dataPtr + 0x30), dataStringPtr == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      tempChar2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      tempChar2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    tempChar1 = '?';\n    if (flag1 == '\\0') {\n      tempChar1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    dataStringLen = strlen(dataStringPtr);\n    string1Len = strlen(string1Ptr);\n    string2Len = strlen(string1);\n    string3Len = 0;\n    if (flag4 != '\\0') {\n      string3Len = strlen(string2Ptr);\n    }\n    result = xrealloc(dataStringPtr,string2Len + dataStringLen + 0x28 + string1Len + string3Len);\n    *(undefined8 *)(dataPtr + 0x30) = result;\n    dataStringPtr = *(char **)(*(long *)(data + 0x60) + 0x30);\n    dataStringLen = strlen(dataStringPtr);\n    sprintf(dataStringPtr + dataStringLen,\"%s:%s;%c%c%c\",string1Ptr,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)tempChar2,(ulong)(uint)(int)tempChar1,dataStringLen);\n    free(string1Ptr);\n    if (flag4 != '\\0') {\n      string1Ptr = *(char **)(*(long *)(data + 0x60) + 0x30);\n      dataStringLen = strlen(string1Ptr);\n      sprintf(string1Ptr + dataStringLen,\"%ld;%s;\",value,string2Ptr);\n      free(string2Ptr);\n    }\n    if (localFlag != 0) {\n      *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "abort",
                "sprintf",
                "free",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_class_method_variant.lto_priv.0"
            ],
            "imported": false,
            "current_name": "format_and_store_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "params",
                "param_3": "context",
                "uVar1": "paramValue",
                "uVar2": "errorMsg"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *params,undefined8 context)\n\n{\n  undefined8 paramValue;\n  undefined8 errorMsg;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(params[1] + 8) != 2)) {\n    paramValue = *params;\n    flags = flags & 0xf7ffffff;\n    errorMsg = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(errorMsg,paramValue,context);\n  }\n  return flags;\n}\n\n",
            "called": [
                "check_new_section_flags.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "setup_section"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00115f30"
        },
        "FUN_00104880": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_00104880"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputArray",
                "puVar1": "ptrToArray",
                "piVar2": "ptrToSubArray"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputArray)\n\n{\n  undefined8 *ptrToArray;\n  int *ptrToSubArray;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    ptrToArray = (undefined8 *)(inputArray + 4);\n    ptrToSubArray = **(int ***)(undefined8 *)*ptrToArray;\n  } while ((inputArray != ptrToSubArray) && (inputArray = ptrToSubArray, ptrToSubArray != (int *)0x0));\n  return ((undefined8 *)*ptrToArray)[1];\n}\n\n",
            "called": [
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified",
                "debug_get_type_name.constprop.0",
                "debug_get_real_type.isra.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "check_dwo_section_constprop_001082b3",
                "uVar1": "is_constprop",
                "is_dwo_section_constprop_0": "check_dwo_section_constprop_0"
            },
            "code": "\nuint check_dwo_section_constprop_001082b3(void)\n\n{\n  uint is_constprop;\n  \n  is_constprop = check_dwo_section_constprop_001082b3_0();\n  return is_constprop ^ 1;\n}\n\n",
            "called": [
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_dwo_section_constprop_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "decompile_and_improve_00114690",
                "param_1": "input_file_path",
                "param_2": "output_file_path",
                "param_3": "file_descriptor",
                "param_4": "file_stat",
                "param_5": "file_mode",
                "param_6": "section_mode",
                "param_7": "debug_sections",
                "bVar1": "byteVar1",
                "cVar2": "charVar2",
                "cVar3": "charVar3",
                "iVar4": "intVar4",
                "iVar5": "intVar5",
                "ppcVar6": "pointerToPointerVar6",
                "pvVar7": "voidVar7",
                "lVar8": "longVar8",
                "puVar9": "pointerVar9",
                "piVar10": "pointerToIntVar10",
                "uVar11": "unsignedVar11",
                "uVar12": "unsignedVar12",
                "lVar13": "file_size",
                "puVar14": "input_file_handle",
                "ppcVar16": "library_file_handle",
                "pcVar15": "temp_directory",
                "pcVar17": "current_file_path",
                "pcVar18": "temp_file_path",
                "pcVar23": "temp_pointer",
                "__ptr": "temp_struct_pointer",
                "ppcVar19": "temp_archived_file",
                "pcVar20": "close_file_function_pointer",
                "lVar21": "temp_variable",
                "uVar22": "unsignedVar22",
                "psVar24": "pointerToStatVar24",
                "bVar25": "boolVar25",
                "bVar26": "byteVar26",
                "local_1a0": "local_pointer1a0",
                "local_198": "local_pointer198",
                "local_158": "temp_stat_variable",
                "local_c8": "local_pointerArrayC8",
                "uStack_b0": "unsignedStack_b0",
                "lStack_98": "longStack_98",
                "status": "return_status"
            },
            "code": "\nvoid decompile_and_improve_00114690(undefined8 input_file_path,undefined8 output_file_path,int file_descriptor,undefined8 file_stat,\n                 undefined8 file_mode,long section_mode,undefined8 debug_sections)\n\n{\n  byte byteVar1;\n  char charVar2;\n  char charVar3;\n  int intVar4;\n  int intVar5;\n  char **pointerToPointerVar6;\n  void *voidVar7;\n  long longVar8;\n  undefined8 *pointerVar9;\n  int *pointerToIntVar10;\n  undefined8 unsignedVar11;\n  undefined8 unsignedVar12;\n  long file_size;\n  undefined8 *input_file_handle;\n  char *temp_directory;\n  char **library_file_handle;\n  char *current_file_path;\n  char *temp_file_path;\n  undefined8 *temp_struct_pointer;\n  char **temp_archived_file;\n  code *close_file_function_pointer;\n  long temp_variable;\n  uint unsignedVar22;\n  char *temp_pointer;\n  stat *pointerToStatVar24;\n  bool boolVar25;\n  byte byteVar26;\n  undefined8 *local_pointer1a0;\n  long *local_pointer198;\n  stat temp_stat_variable;\n  void *local_pointerArrayC8 [3];\n  uint unsignedStack_b0;\n  long longStack_98;\n  \n  byteVar26 = 0;\n  file_size = get_file_size();\n  if (file_size < 1) {\n    if (file_size == 0) {\n      unsignedVar12 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      non_fatal(unsignedVar12,input_file_path);\n    }\n    return_status = 1;\n    return;\n  }\n  input_file_handle = (undefined8 *)bfd_openr(input_file_path,file_mode);\n  if ((input_file_handle == (undefined8 *)0x0) || (intVar5 = bfd_stat(input_file_handle,file_stat), intVar5 != 0)) {\n    bfd_nonfatal_message(input_file_path,0,0,0);\n    return_status = 1;\n    return;\n  }\n  switch(do_debug_sections) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)input_file_handle + 0x44) = *(uint *)((long)input_file_handle + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)input_file_handle + 0x44) = *(uint *)((long)input_file_handle + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)input_file_handle + 0x44) = *(uint *)((long)input_file_handle + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)input_file_handle + 0x44) = *(uint *)((long)input_file_handle + 0x44) | 0x8000;\n  }\n  if (do_elf_stt_common == 1) {\n    *(uint *)((long)input_file_handle + 0x44) = *(uint *)((long)input_file_handle + 0x44) | 0xc0000;\n  }\n  else if (do_elf_stt_common == 2) {\n    *(uint *)((long)input_file_handle + 0x44) = *(uint *)((long)input_file_handle + 0x44) | 0x40000;\n  }\n  charVar2 = bfd_check_format(input_file_handle,2);\n  if (charVar2 != '\\0') {\n    if (section_mode == 0) {\n      charVar2 = '\\0';\n      section_mode = *(long *)input_file_handle[1];\n    }\n    if (file_descriptor < 0) {\n      local_pointer1a0 = (undefined8 *)bfd_openw(output_file_path,section_mode);\n    }\n    else {\n      local_pointer1a0 = (undefined8 *)bfd_fdopenw(output_file_path,section_mode,file_descriptor);\n    }\n    if (local_pointer1a0 != (undefined8 *)0x0) {\n      if (gnu_debuglink_filename != 0) {\n        unsignedVar12 = *input_file_handle;\n        unsignedVar11 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        non_fatal(unsignedVar11,unsignedVar12);\n        gnu_debuglink_filename = 0;\n      }\n      set_long_section_mode(local_pointer1a0,input_file_handle,long_section_names);\n      local_pointer198 = local_pointer1a0 + 0x1f;\n      if ((*(byte *)((long)input_file_handle + 0x49) & 0x10) != 0) {\n        return_status = 1;\n        bfd_set_error(5);\n        unsignedVar12 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfd_nonfatal_message(0,input_file_handle,0,unsignedVar12);\n        return;\n      }\n      temp_directory = (char *)make_tempdir(*local_pointer1a0);\n      if (temp_directory == (char *)0x0) {\n        pointerToIntVar10 = __errno_location();\n        temp_directory = strerror(*pointerToIntVar10);\n        unsignedVar12 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        fatal(unsignedVar12,temp_directory);\n      }\n      if (strip_symbols == 7) {\n        byteVar1 = *(byte *)((long)input_file_handle + 0x49);\n        unsignedVar22 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)input_file_handle + 0x49);\n        unsignedVar22 = byteVar1 >> 3 & 1;\n      }\n      boolVar25 = deterministic != 0;\n      *(byte *)((long)local_pointer1a0 + 0x49) =\n           byteVar1 & 0x10 | (byte)(unsignedVar22 << 3) | *(byte *)((long)local_pointer1a0 + 0x49) & 0xe7;\n      if (boolVar25) {\n        *(uint *)((long)local_pointer1a0 + 0x44) = *(uint *)((long)local_pointer1a0 + 0x44) | 0x2000;\n      }\n      temp_struct_pointer = (undefined8 *)0x0;\n      library_file_handle = (char **)bfd_openr_next_archived_file(input_file_handle,0);\n      charVar3 = bfd_set_format(local_pointer1a0,*(byte *)(input_file_handle + 9) & 7);\n      if (charVar3 == '\\0') {\n        return_status = 1;\n        bfd_nonfatal_message(0,local_pointer1a0,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((return_status == 0 && (library_file_handle != (char **)0x0))) {\n        temp_file_path = *library_file_handle;\n        current_file_path = temp_file_path;\n        if (*temp_file_path == '/') {\nLAB_0010527d:\n          unsignedVar12 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          non_fatal(unsignedVar12,temp_file_path);\nLAB_00104e93:\n          return_status = 1;\n          goto LAB_00114b4b;\n        }\n        while (*current_file_path != '\\0') {\n          temp_pointer = current_file_path;\n          if ((*current_file_path == '.') && (temp_pointer = current_file_path + 1, current_file_path[1] == '.')) {\n            temp_pointer = current_file_path + 2;\n            if ((current_file_path[2] == '\\0') || (current_file_path[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*temp_pointer != '\\0' && (*temp_pointer != '/')); temp_pointer = temp_pointer + 1) {\n          }\n          current_file_path = temp_pointer;\n          if (*temp_pointer == '/') {\n            copy_archive_001052a2();\n            return;\n          }\n        }\n        temp_file_path = (char *)concat(temp_directory,&DAT_0011b47d);\n        intVar5 = stat(temp_file_path,&temp_stat_variable);\n        pointerVar9 = temp_struct_pointer;\n        if (-1 < intVar5) {\n          file_size = make_tempdir(temp_file_path);\n          free(temp_file_path);\n          if (file_size == 0) {\n            pointerToIntVar10 = __errno_location();\n            temp_file_path = strerror(*pointerToIntVar10);\n            unsignedVar12 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            non_fatal(unsignedVar12,temp_file_path);\n            goto LAB_00104e93;\n          }\n          pointerVar9 = (undefined8 *)xmalloc(0x18);\n          temp_file_path = *library_file_handle;\n          *pointerVar9 = temp_struct_pointer;\n          pointerVar9[2] = 0;\n          pointerVar9[1] = file_size;\n          temp_file_path = (char *)concat(file_size,&DAT_0011b47d,temp_file_path);\n        }\n        intVar5 = 0;\n        if (preserve_dates != '\\0') {\n          pointerToStatVar24 = &temp_stat_variable;\n          for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n            *(undefined4 *)&pointerToStatVar24->st_dev = 0;\n            pointerToStatVar24 = (stat *)((long)pointerToStatVar24 + (ulong)byteVar26 * -8 + 4);\n          }\n          temp_archived_file = (char **)library_file_handle[0x1d];\n          if ((char **)library_file_handle[0x1d] == (char **)0x0) {\n            temp_archived_file = library_file_handle;\n          }\n          intVar5 = (**(code **)(temp_archived_file[1] + 0x1e8))(library_file_handle,&temp_stat_variable);\n          if (intVar5 != 0) {\n            current_file_path = *library_file_handle;\n            unsignedVar12 = dcgettext(0,\"internal stat error on %s\",5);\n            non_fatal(unsignedVar12,current_file_path);\n          }\n        }\n        temp_struct_pointer = (undefined8 *)xmalloc(0x18);\n        temp_struct_pointer[1] = temp_file_path;\n        *temp_struct_pointer = pointerVar9;\n        temp_struct_pointer[2] = 0;\n        charVar3 = bfd_check_format(library_file_handle,1);\n        if (charVar3 == '\\0') {\n          unsignedVar12 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          bfd_nonfatal_message(0,library_file_handle,0,unsignedVar12);\n          temp_archived_file = (char **)bfd_openw(temp_file_path,section_mode);\n          if (temp_archived_file == (char **)0x0) {\nLAB_00104e80:\n            bfd_nonfatal_message(temp_file_path,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerToPointerVar6 = (char **)library_file_handle[0x1d];\n          if ((char **)library_file_handle[0x1d] == (char **)0x0) {\n            pointerToPointerVar6 = library_file_handle;\n          }\n          intVar4 = (**(code **)(pointerToPointerVar6[1] + 0x1e8))(library_file_handle);\n          file_size = longStack_98;\n          if (intVar4 == 0) {\n            if (longStack_98 < 0) {\n              bfd_get_archive_filename(library_file_handle);\n              unsignedVar12 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              non_fatal(unsignedVar12);\n            }\n            else {\n              intVar4 = bfd_seek(library_file_handle,0,0);\n              if (intVar4 == 0) {\n                if (verbose != '\\0') {\n                  current_file_path = *temp_archived_file;\n                  unsignedVar12 = bfd_get_archive_filename(library_file_handle);\n                  temp_pointer = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(temp_pointer,unsignedVar12,current_file_path);\n                }\n                voidVar7 = (void *)xmalloc(0x2000);\n                for (; file_size != 0; file_size = file_size - temp_variable) {\n                  temp_variable = 0x2000;\n                  if (file_size < 0x2001) {\n                    temp_variable = file_size;\n                  }\n                  longVar8 = bfd_bread(voidVar7,temp_variable,library_file_handle);\n                  pointerToPointerVar6 = library_file_handle;\n                  if ((temp_variable != longVar8) ||\n                     (longVar8 = bfd_bwrite(voidVar7,temp_variable,temp_archived_file), pointerToPointerVar6 = temp_archived_file,\n                     temp_variable != longVar8)) {\n                    bfd_nonfatal_message(0,pointerToPointerVar6,0,0);\n                    free(voidVar7);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*temp_archived_file,unsignedStack_b0 | 0x100);\n                free(voidVar7);\n                charVar3 = bfd_close_all_done(temp_archived_file);\n                if (charVar3 == '\\0') {\n                  bfd_nonfatal_message(temp_file_path,0,0,0);\n                  return_status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              unsignedVar12 = bfd_get_archive_filename(library_file_handle);\n              bfd_nonfatal(unsignedVar12);\n            }\n          }\n          else {\n            bfd_nonfatal_message(0,library_file_handle,0,0);\n          }\nLAB_00104f00:\n          charVar3 = bfd_close_all_done(temp_archived_file);\n          if (charVar3 == '\\0') {\n            bfd_nonfatal_message(temp_file_path,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(temp_file_path);\n          return_status = 1;\n        }\n        else {\n          if (charVar2 == '\\0') {\n            temp_archived_file = (char **)bfd_openw(temp_file_path,*(undefined8 *)library_file_handle[1]);\n          }\n          else {\n            temp_archived_file = (char **)bfd_openw(temp_file_path,section_mode);\n          }\n          if (temp_archived_file == (char **)0x0) goto LAB_00104e80;\n          charVar3 = copy_object(library_file_handle,temp_archived_file,debug_sections);\n          if (charVar3 == '\\0') {\n            intVar4 = bfd_get_arch(library_file_handle);\n            if (intVar4 == 0) goto LAB_00104d75;\n            charVar3 = bfd_close_all_done(temp_archived_file);\n            if (charVar3 == '\\0') {\n              bfd_nonfatal_message(temp_file_path,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar3 = bfd_close(temp_archived_file);\n          if (charVar3 == '\\0') {\n            bfd_nonfatal_message(temp_file_path,0,0,0);\n            return_status = 1;\n          }\nLAB_00114a86:\n          if ((preserve_dates != '\\0') && (intVar5 == 0)) {\n            set_times(temp_file_path,&temp_stat_variable);\n          }\n          file_size = bfd_openr(temp_file_path,section_mode);\n          temp_struct_pointer[2] = file_size;\n          *local_pointer198 = file_size;\n          local_pointer198 = (long *)(file_size + 0xf0);\n          temp_archived_file = (char **)bfd_openr_next_archived_file(input_file_handle);\n          bfd_close(library_file_handle);\n          library_file_handle = temp_archived_file;\n        }\n      }\n      *local_pointer198 = 0;\n      voidVar7 = (void *)xstrdup(*local_pointer1a0);\n      if (return_status == 0) {\n        close_file_function_pointer = bfd_close;\n      }\n      else {\n        close_file_function_pointer = bfd_close_all_done;\n      }\n      charVar2 = (*close_file_function_pointer)(local_pointer1a0);\n      if (charVar2 == '\\0') {\n        return_status = 1;\n        bfd_nonfatal_message(voidVar7,0,0,0);\n      }\n      free(voidVar7);\n      voidVar7 = (void *)xstrdup(*input_file_handle);\n      charVar2 = bfd_close(input_file_handle);\n      if (charVar2 == '\\0') {\n        return_status = 1;\n        bfd_nonfatal_message(voidVar7,0,0,0);\n      }\n      free(voidVar7);\nLAB_00114b4b:\n      while (temp_struct_pointer != (undefined8 *)0x0) {\n        if (temp_struct_pointer[2] == 0) {\n          rmdir((char *)temp_struct_pointer[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)temp_struct_pointer[1]);\n        }\n        free((void *)temp_struct_pointer[1]);\n        input_file_handle = (undefined8 *)*temp_struct_pointer;\n        free(temp_struct_pointer);\n        temp_struct_pointer = input_file_handle;\n      }\n      rmdir(temp_directory);\n      free(temp_directory);\n      return;\n    }\nLAB_00105231:\n    close(file_descriptor);\n    bfd_nonfatal_message(output_file_path,0,0,0);\n    return_status = 1;\n    return;\n  }\n  charVar2 = bfd_check_format_matches(input_file_handle,1,local_pointerArrayC8);\n  if (charVar2 == '\\0') {\n    intVar5 = bfd_get_error();\n    charVar2 = bfd_check_format_matches(input_file_handle,3,&temp_stat_variable);\n    if (charVar2 == '\\0') {\n      intVar4 = bfd_get_error();\n      if (intVar5 != intVar4) {\n        bfd_set_error(intVar5);\n      }\n      bfd_nonfatal_message(input_file_path,0,0,0);\n      if (intVar5 == 0xd) {\n        list_matching_formats(local_pointerArrayC8[0]);\n      }\n      if (intVar4 != 0xd) {\n        return_status = 1;\n        return;\n      }\n      list_matching_formats(temp_stat_variable.st_dev);\n      return_status = 1;\n      return;\n    }\n    if (intVar5 == 0xd) {\n      free(local_pointerArrayC8[0]);\n    }\n  }\n  if (section_mode == 0) {\n    section_mode = *(long *)input_file_handle[1];\n  }\n  if (file_descriptor < 0) {\n    file_size = bfd_openw(output_file_path,section_mode);\n  }\n  else {\n    file_size = bfd_fdopenw(output_file_path,section_mode,file_descriptor);\n  }\n  if (file_size == 0) goto LAB_00105231;\n  set_long_section_mode(file_size,input_file_handle,long_section_names);\n  charVar2 = copy_object(input_file_handle,file_size,debug_sections);\n  if (charVar2 == '\\0') {\n    return_status = 1;\n  }\n  else if (return_status == 0) {\n    charVar2 = bfd_close(file_size);\n    goto LAB_001147d5;\n  }\n  charVar2 = bfd_close_all_done(file_size);\nLAB_001147d5:\n  if (charVar2 != '\\x01') {\n    return_status = 1;\n    bfd_nonfatal_message(output_file_path,0,0,0);\n    return;\n  }\n  charVar2 = bfd_close(input_file_handle);\n  if (charVar2 == '\\0') {\n    return_status = 1;\n    bfd_nonfatal_message(input_file_path,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done",
                "set_long_section_mode",
                "get_file_size",
                "bfd_openw",
                "bfd_set_error",
                "non_fatal",
                "bfd_close",
                "copy_object",
                "bfd_set_format",
                "list_matching_formats",
                "bfd_openr",
                "free",
                "strerror",
                "make_tempdir",
                "dcgettext",
                "fatal",
                "copy_file.cold",
                "bfd_fdopenw",
                "__errno_location",
                "bfd_nonfatal_message",
                "bfd_check_format_matches",
                "bfd_get_error",
                "close",
                "bfd_stat",
                "bfd_check_format",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "parse_stab_int_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "isNegative",
                "plVar1": "ptrValue",
                "uVar2": "result",
                "sVar3": "stringLength",
                "lVar4": "tempValue",
                "lVar5": "bitwiseValue",
                "local_8c": "formattedString",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 parseStabIntType_0010b800(long baseAddress,int size,char isNegative)\n\n{\n  long *ptrValue;\n  undefined8 result;\n  size_t stringLength;\n  long tempValue;\n  long bitwiseValue;\n  undefined2 formattedString;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    tempValue = baseAddress + 0xb8;\n    if (isNegative != '\\0') {\n      tempValue = baseAddress + 0x78;\n    }\n    ptrValue = (long *)(tempValue + (ulong)(size - 1U) * 8);\n    tempValue = *ptrValue;\n    if (tempValue != 0) {\n      result = stab_push_defined_type(baseAddress,tempValue,size);\n      return result;\n    }\n    tempValue = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = tempValue + 1;\n    *ptrValue = tempValue;\n    sprintf((char *)&formattedString,\"%ld=r%ld;\",tempValue,tempValue);\n    if (isNegative == '\\0') {\n      bitwiseValue = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&formattedString);\n      sprintf((char *)((long)&formattedString + stringLength),\"%ld;%ld;\",-bitwiseValue,bitwiseValue + -1);\n    }\n    else {\n      stringLength = strlen((char *)&formattedString);\n      *(undefined2 *)((long)&formattedString + stringLength) = 0x3b30;\n      *(undefined *)((long)&formattedString + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formattedString + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formattedString + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = stab_push_string(baseAddress,&formattedString,tempValue,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    non_fatal(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "non_fatal",
                "strlen",
                "stab_push_string",
                "sprintf",
                "dcgettext",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "stab_float_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "parse_stab_int_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "input",
                "param_2": "param",
                "param_3": "flag",
                "param_4": "outputArray",
                "param_5": "sizeArray",
                "uVar1": "arraySize",
                "uVar2": "newArraySize",
                "cVar3": "charVar",
                "pcVar4": "stringVar",
                "sVar5": "stringLength",
                "__s": "newString",
                "lVar6": "tempVar",
                "__ptr": "pointer",
                "uVar7": "returnValue",
                "uVar8": "undefinedVar",
                "lVar9": "loopVar",
                "uVar10": "existingArraySize",
                "puVar11": "ptr",
                "bVar12": "byteVar"
            },
            "code": "\nundefined8 processData_00109ed3(long input,uint param,undefined4 flag,long *outputArray,ulong *sizeArray)\n\n{\n  ulong arraySize;\n  ulong newArraySize;\n  char charVar;\n  char *stringVar;\n  size_t stringLength;\n  char *newString;\n  long tempVar;\n  void *pointer;\n  undefined8 returnValue;\n  undefined undefinedVar;\n  long loopVar;\n  ulong existingArraySize;\n  undefined *ptr;\n  byte byteVar;\n  \n  byteVar = 0;\n  tempVar = *(long *)(input + 0x60);\n  if (tempVar != 0) {\n    arraySize = *(ulong *)(tempVar + 0x10);\n    if (((long)arraySize < 1) || (outputArray == (long *)0x0)) {\n      undefinedVar = *(undefined *)(tempVar + 0x1c);\n      stringVar = (char *)stab_pop_type(input);\n      stringLength = strlen(stringVar);\n      newString = (char *)xmalloc(stringLength + 2);\n      sprintf(newString,\"%c%s\",(ulong)param,stringVar);\n      free(stringVar);\n      tempVar = 0;\n    }\n    else {\n      existingArraySize = *sizeArray;\n      if (existingArraySize <= arraySize) {\n        if (existingArraySize == 0) {\n          existingArraySize = 10;\n        }\n        for (; existingArraySize <= arraySize; existingArraySize = existingArraySize * 2) {\n        }\n        tempVar = xrealloc(*outputArray,existingArraySize * 8);\n        newArraySize = *sizeArray;\n        *outputArray = tempVar;\n        ptr = (undefined *)(tempVar + newArraySize * 8);\n        for (loopVar = (existingArraySize - newArraySize) * 8; loopVar != 0; loopVar = loopVar + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)byteVar * -2 + 1;\n        }\n        *sizeArray = existingArraySize;\n      }\n      tempVar = *(long *)(*outputArray + arraySize * 8);\n      if ((tempVar != 0) && (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0')) {\n        pointer = (void *)stab_pop_type(input);\n        free(pointer);\n        returnValue = stab_push_defined_type(input,tempVar,flag);\n        return returnValue;\n      }\n      tempVar = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = tempVar + 1;\n      stringVar = (char *)stab_pop_type(input);\n      stringLength = strlen(stringVar);\n      newString = (char *)xmalloc(stringLength + 0x14);\n      sprintf(newString,\"%ld=%c%s\",tempVar,(ulong)param,stringVar);\n      free(stringVar);\n      undefinedVar = 1;\n      *(long *)(*outputArray + arraySize * 8) = tempVar;\n    }\n    charVar = stab_push_string(input,newString,tempVar,undefinedVar,flag);\n    if (charVar != '\\0') {\n      free(newString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "stab_const_type.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_reference_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "arg1",
                "param_4": "arg2",
                "puVar1": "tempPtr1",
                "puVar2": "tempPtr2",
                "puVar3": "tempPtr3",
                "lVar4": "loopCount",
                "puVar5": "loopPtr",
                "pcVar6": "tempStr",
                "bVar7": "flag",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 arg1,undefined8 arg2)\n\n{\n  undefined8 *tempPtr1;\n  undefined4 *tempPtr2;\n  undefined4 *tempPtr3;\n  long loopCount;\n  undefined4 *loopPtr;\n  char *tempStr;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  tempStr = \"\";\n  if (filename != (char *)0x0) {\n    tempStr = filename;\n  }\n  tempPtr2 = (undefined4 *)xmalloc(0x18);\n  loopPtr = tempPtr2;\n  for (loopCount = 6; loopCount != 0; loopCount = loopCount + -1) {\n    *loopPtr = 0;\n    loopPtr = loopPtr + (ulong)flag * -2 + 1;\n  }\n  *(char **)(tempPtr2 + 2) = tempStr;\n  tempPtr3 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)tempPtr2;\n  loopPtr = tempPtr3;\n  for (loopCount = 6; loopCount != 0; loopCount = loopCount + -1) {\n    *loopPtr = 0;\n    loopPtr = loopPtr + (ulong)flag * -2 + 1;\n  }\n  tempPtr1 = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(tempPtr3 + 2) = tempPtr2;\n  if (tempPtr1 == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)tempPtr3;\n  }\n  else {\n    *tempPtr1 = tempPtr3;\n  }\n  debugInfo[1] = (long)tempPtr3;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = arg2;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00104410": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104410"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((do_debug_sections != 1) && ((do_debug_sections & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (do_elf_stt_common != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (extract_symbol == '\\0') {\n    if (set_start_set == '\\0') {\n      lVar35 = change_start + param_1[0x17];\n    }\n    else {\n      lVar35 = change_start + set_start;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~bfd_flags_to_clear & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)param_1 + 0x44));\n  if (strip_symbols == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_file_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = preserve_dates == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar35 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar35 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,osympp);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = add_sections,\n     cVar11 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30)\n  {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = gnu_debuglink_filename;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = isympp;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = improved_code_0010554f();\n    return uVar26;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &names_0;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = isympp + uStack_1f8;\n        plVar15 = isympp;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = add_sym_list;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(redefine_specific_htab);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = section_rename_list, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0'))\n            {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = prefix_symbols_string;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = prefix_symbols_string;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar30 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = convert_debugging == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,isympp);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(strip_specific_htab);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(keep_specific_htab), lVar35 != 0 ||\n              (lVar35 = htab_elements(localize_specific_htab), lVar35 != 0)) ||\n             (lVar35 = htab_elements(globalize_specific_htab), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 != 0 ||\n             (lVar35 = htab_elements(weaken_specific_htab), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(redefine_specific_htab), lVar35 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,osympp,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = add_sections; puVar38 = update_sections, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190),\n       lVar35 = gnu_debuglink_filename, cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = dump_sections;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "non_fatal",
                "dcgettext",
                "bfd_set_format",
                "bfd_get_archive_filename",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00104650": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_00104650"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "retrieve_matching_value_00115d00",
                "param_1": "inputValue",
                "param_2": "binaryData",
                "uVar1": "counter",
                "lVar2": "matchingValue",
                "isympp": "symbolTablePtr"
            },
            "code": "\nlong retrieveMatchingValue_00115d00(long inputValue,long binaryData)\n\n{\n  uint counter;\n  long matchingValue;\n  \n  matchingValue = symbolTablePtr;\n  if (symbolTablePtr != 0) {\n    if (*(int *)(*(long *)(binaryData + 8) + 8) == 5) {\n      if (*(int *)(inputValue + 0x28) == *(int *)(*(long *)(binaryData + 0x110) + 0xd40)) {\n        counter = *(uint *)(inputValue + 0x2c);\n        if (counter == 0) {\n          matchingValue = 0;\n        }\n        else if ((ulong)counter <\n                 *(ulong *)(*(long *)(binaryData + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryData + 8) + 0x380) + 0x340) + 5))\n        {\n          matchingValue = *(long *)(symbolTablePtr + (ulong)(counter - 1) * 8);\n        }\n        else {\n          matchingValue = 0;\n        }\n      }\n      else {\n        matchingValue = 0;\n      }\n    }\n    else {\n      matchingValue = 0;\n    }\n  }\n  return matchingValue;\n}\n\n",
            "called": [
                "group_signature.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "retrieve_matching_value_00115d00"
        },
        "FUN_00104530": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104530"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "create_custom_struct_00113c43",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "lVar1": "struct_address",
                "plVar2": "new_struct",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\ncreate_custom_struct_00113c43(long input_1,long input_2,long input_3,long input_4,undefined input_5,\n            undefined8 input_6)\n\n{\n  long struct_address;\n  long *new_struct;\n  undefined return_value [16];\n  \n  if ((input_1 != 0) && (input_2 != 0)) {\n    struct_address = debug_make_type_constprop_0(0x10,0);\n    if (struct_address != 0) {\n      new_struct = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)new_struct + 0x21) = 0;\n      *new_struct = input_1;\n      *(undefined4 *)((long)new_struct + 0x24) = 0;\n      new_struct[1] = input_2;\n      new_struct[2] = input_3;\n      new_struct[3] = input_4;\n      *(undefined *)(new_struct + 4) = input_5;\n      *(long **)(struct_address + 0x10) = new_struct;\n      goto LAB_00113caa;\n    }\n  }\n  struct_address = 0;\nLAB_00113caa:\n  return_value._8_8_ = input_6;\n  return_value._0_8_ = struct_address;\n  return return_value;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_custom_struct_00113c43"
        },
        "FUN_00104890": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "get_file_size.cold",
                "FUN_00107880",
                "smart_rename.cold",
                "main",
                "section_add_load_file.cold",
                "set_times.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104890"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "record_debug_info_00112a33",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "lVar2": "type",
                "plVar3": "typePointer"
            },
            "code": "\nbool recordDebugInfo_00112a33(undefined8 param1,long param2,undefined8 param3,byte param4,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long type;\n  long *typePointer;\n  \n  if (param4 < 0x12) {\n    if (param4 != 0) {\n      switch(param4) {\n      case 1:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,4,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 4:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,5,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 9:\n        result = debug_record_parameter\n                          (param5,*(undefined8 *)(param2 + 8),param6,1,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        type = debug_tag_type(param5,*(undefined8 *)(param2 + 8));\n        if (type == 0) {\n          return false;\n        }\n        typePointer = (long *)coff_get_slot_lto_priv_0(param1,param3);\n        *typePointer = type;\n        break;\n      case 0xd:\n        type = debug_name_type(param5,*(undefined8 *)(param2 + 8));\n        return type != 0;\n      case 0x11:\n        result = debug_record_parameter\n                          (param5,*(undefined8 *)(param2 + 8),param6,2,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      }\n    }\n  }\n  else if (param4 == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = debug_record_variable\n                      (param5,*(undefined8 *)(param2 + 8),param6,1,\n                       *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "debug_record_parameter",
                "coff_get_slot.lto_priv.0",
                "debug_record_variable",
                "debug_name_type",
                "debug_tag_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_info_00112a33"
        },
        "FUN_00104770": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104770"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_debug_type_0010c2d2",
                "uVar1": "typeCode",
                "pcVar2": "typeString",
                "uVar3": "debugType",
                "lVar4": "result",
                "plVar5": "typePointer",
                "uVar6": "negativeValue"
            },
            "code": "\n\n\nlong getDebugType_0010c2d2(undefined8 param_1,long param_2,int *param_3)\n\n{\n  uint typeCode;\n  char *typeString;\n  undefined8 debugType;\n  long result;\n  long *typePointer;\n  uint negativeValue;\n  \n  if ((*param_3 == 0) && (typeCode = param_3[1], (int)typeCode < 0)) {\n    negativeValue = ~typeCode;\n    if (negativeValue < 0x22) {\n      result = *(long *)(param_2 + 0x90 + (ulong)negativeValue * 8);\n      if (result == 0) {\n        switch(negativeValue) {\n        case 1:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeString = \"char\";\n          break;\n        case 2:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeString = \"short\";\n          break;\n        case 3:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeString = \"long\";\n          break;\n        case 4:\n          debugType = debug_make_int_type_isra_0(1,1);\n          typeString = \"unsigned char\";\n          break;\n        case 5:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeString = \"signed char\";\n          break;\n        case 6:\n          debugType = debug_make_int_type_isra_0(2,1);\n          typeString = \"unsigned short\";\n          break;\n        case 7:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeString = \"unsigned int\";\n          break;\n        case 8:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeString = \"unsigned\";\n          break;\n        case 9:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeString = \"unsigned long\";\n          break;\n        case 10:\n          debugType = debug_make_void_type_isra_0();\n          typeString = \"void\";\n          break;\n        case 0xb:\n          debugType = debug_make_float_type_isra_0(4);\n          typeString = \"float\";\n          break;\n        case 0xc:\n          debugType = debug_make_float_type_isra_0(8);\n          typeString = \"double\";\n          break;\n        case 0xd:\n          debugType = debug_make_float_type_isra_0(8);\n          typeString = \"long double\";\n          break;\n        case 0xe:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeString = \"integer\";\n          break;\n        case 0xf:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeString = \"boolean\";\n          break;\n        case 0x10:\n          debugType = debug_make_float_type_isra_0(4);\n          typeString = \"short real\";\n          break;\n        case 0x11:\n          debugType = debug_make_float_type_isra_0(8);\n          typeString = \"real\";\n          break;\n        case 0x12:\n          typeString = \"stringptr\";\n          debugType = 0;\n          break;\n        case 0x13:\n          debugType = debug_make_int_type_isra_0(1,1);\n          typeString = \"character\";\n          break;\n        case 0x14:\n          debugType = debug_make_type_constprop_0(6,1);\n          typeString = \"logical*1\";\n          break;\n        case 0x15:\n          debugType = debug_make_type_constprop_0(6,2);\n          typeString = \"logical*2\";\n          break;\n        case 0x16:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeString = \"logical*4\";\n          break;\n        case 0x17:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeString = \"logical\";\n          break;\n        case 0x18:\n          debugType = debug_make_type_constprop_0(5,8);\n          typeString = \"complex\";\n          break;\n        case 0x19:\n          debugType = debug_make_type_constprop_0(5,0x10);\n          typeString = \"double complex\";\n          break;\n        case 0x1a:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeString = \"integer*1\";\n          break;\n        case 0x1b:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeString = \"integer*2\";\n          break;\n        case 0x1c:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeString = \"integer*4\";\n          break;\n        case 0x1d:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeString = \"wchar\";\n          break;\n        case 0x1e:\n          debugType = debug_make_int_type_isra_0(8,0);\n          typeString = \"long long\";\n          break;\n        case 0x1f:\n          debugType = debug_make_int_type_isra_0(8,1);\n          typeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          debugType = debug_make_type_constprop_0(6,8);\n          typeString = \"logical*8\";\n          break;\n        case 0x21:\n          debugType = debug_make_int_type_isra_0(8,0);\n          typeString = \"integer*8\";\n          break;\n        default:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeString = \"int\";\n        }\n        result = debug_name_type(param_1,typeString,debugType);\n        *(long *)(param_2 + 0x90 + (ulong)negativeValue * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    typeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeString,(ulong)typeCode);\n  }\n  else {\n    typePointer = (long *)stab_find_slot(param_2);\n    if (typePointer != (long *)0x0) {\n      if (*typePointer == 0) {\n        result = debug_make_indirect_type_isra_0(typePointer,0);\n        return result;\n      }\n      return *typePointer;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "debug_make_void_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_indirect_type.isra.0",
                "dcgettext",
                "debug_name_type",
                "stab_find_slot",
                "debug_make_float_type.isra.0",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_debug_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_and_create_coff_struct_0010e07c",
                "param_1": "param_ptr",
                "param_2": "coff_data",
                "param_3": "param_size",
                "param_4": "param_int",
                "param_5": "lvar_ptr",
                "param_6": "param_mem",
                "lVar1": "var1",
                "lVar2": "var2",
                "lVar3": "var3",
                "cVar4": "char_var",
                "uVar5": "err_var",
                "__ptr": "allocated_mem",
                "uVar6": "result",
                "uVar7": "err_msg",
                "puVar8": "allocated_ptr",
                "pcVar9": "err_msg_format",
                "puVar10": "buf_ptr",
                "uVar11": "type_var",
                "lVar12": "count_var",
                "iVar13": "index_var",
                "iVar14": "loop_var",
                "local_a8": "local_var1",
                "uStack_a4": "local_var2",
                "uStack_a0": "local_var3",
                "uStack_9c": "local_var4",
                "local_88": "local_buf",
                "local_6a": "local_var5",
                "local_68": "local_byte1",
                "local_67": "local_byte2",
                "local_60": "local_buf2",
                "local_56": "local_ushort"
            },
            "code": "\nundefined8\nparse_and_create_coff_struct_0010e07c(undefined8 param_ptr,long *coff_data,undefined8 param_size,int param_int,long lvar_ptr,\n            undefined8 param_mem)\n\n{\n  long var1;\n  long var2;\n  long var3;\n  char char_var;\n  undefined4 err_var;\n  void *allocated_mem;\n  undefined8 result;\n  undefined8 err_msg;\n  undefined4 *allocated_ptr;\n  char *err_msg_format;\n  undefined *buf_ptr;\n  uint type_var;\n  long count_var;\n  int index_var;\n  int loop_var;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined local_buf [30];\n  undefined2 local_var5;\n  byte local_byte1;\n  byte local_byte2;\n  undefined local_buf2 [10];\n  ushort local_ushort;\n  \n  loop_var = 10;\n  count_var = 0;\n  var1 = *(long *)(lvar_ptr + 0x18);\n  allocated_mem = (void *)xmalloc(0x50);\n  while ((coff_data[3] < var1 && (coff_data[2] < coff_data[1]))) {\n    var2 = *(long *)(*coff_data + coff_data[2] * 8);\n    char_var = bfd_coff_get_syment(param_ptr,var2,local_buf);\n    if (char_var == '\\0') {\n      err_var = bfd_get_error();\n      result = bfd_errmsg(err_var);\n      err_msg_format = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      err_msg = dcgettext(0,err_msg_format,5);\n      non_fatal(err_msg,result);\n      free(allocated_mem);\n      return 0;\n    }\n    var3 = coff_data[3];\n    buf_ptr = (undefined *)0x0;\n    coff_data[2] = coff_data[2] + 1;\n    coff_data[3] = var3 + 1 + (ulong)local_byte2;\n    if (local_byte2 != 0) {\n      buf_ptr = local_buf2;\n      char_var = bfd_coff_get_auxent(param_ptr,var2,0,buf_ptr);\n      if (char_var == '\\0') {\n        err_var = bfd_get_error();\n        result = bfd_errmsg(err_var);\n        err_msg_format = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_byte1 == 0x12) {\n      type_var = (uint)local_ushort;\n      index_var = (int)*(undefined8 *)(var2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(var2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_byte1 < 0x13) {\n        if ((local_byte1 == 8) || (local_byte1 == 0xb)) {\n          type_var = 0;\n          index_var = ((int)*(undefined8 *)(var2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(var2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_byte1 == 0x66) break;\n      type_var = 0;\n      index_var = 0;\n    }\nLAB_0010e214:\n    err_msg = parse_coff_type_lto_priv_0(param_ptr,coff_data,param_size,var3,local_var5,buf_ptr,1);\n    result = *(undefined8 *)(var2 + 8);\n    allocated_ptr = (undefined4 *)xmalloc(0x20);\n    local_var1 = (undefined4)result;\n    local_var2 = (undefined4)((ulong)result >> 0x20);\n    local_var3 = (undefined4)err_msg;\n    local_var4 = (undefined4)((ulong)err_msg >> 0x20);\n    *(undefined8 *)(allocated_ptr + 5) = 0;\n    allocated_ptr[6] = index_var;\n    allocated_ptr[7] = type_var;\n    allocated_ptr[4] = 0;\n    *allocated_ptr = local_var1;\n    allocated_ptr[1] = local_var2;\n    allocated_ptr[2] = local_var3;\n    allocated_ptr[3] = local_var4;\n    if (loop_var <= (int)count_var + 1) {\n      loop_var = loop_var + 10;\n      allocated_mem = (void *)xrealloc(allocated_mem,(long)loop_var << 3,allocated_ptr,0,param_mem);\n    }\n    *(undefined4 **)((long)allocated_mem + count_var * 8) = allocated_ptr;\n    count_var = count_var + 1;\n  }\n  *(undefined8 *)((long)allocated_mem + (long)(int)count_var * 8) = 0;\n  result = debug_make_struct_type_isra_0(param_int == 8,*(undefined2 *)(lvar_ptr + 10),allocated_mem);\n  return result;\n}\n\n",
            "called": [
                "debug_make_struct_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "non_fatal",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "dcgettext",
                "free",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "parse_coff_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_and_create_coff_struct_0010e07c"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "return_zero_001082c3"
            },
            "code": "\nundefined8 return_zero_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "group_signature.isra.0"
            ],
            "imported": false,
            "current_name": "return_zero_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_file_and_parse_lines_00114460",
                "param_1": "filename",
                "param_2": "hashtable",
                "param_3": "fileData",
                "iVar1": "lineCount",
                "piVar2": "error",
                "pcVar3": "errorMessage",
                "uVar4": "translatedString",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "slot",
                "pbVar7": "currentChar",
                "bVar8": "currentByte",
                "pbVar9": "nextChar",
                "pbVar10": "currentPtr",
                "pbVar11": "nextPtr",
                "pbVar12": "lineStart"
            },
            "code": "\nvoid readFileAndParseLines_00114460(char *filename,undefined8 hashtable,byte **fileData)\n\n{\n  int lineCount;\n  int *error;\n  char *errorMessage;\n  undefined8 translatedString;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **slot;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextChar;\n  byte *currentPtr;\n  byte *nextPtr;\n  byte *lineStart;\n  \n  fileSize = get_file_size();\n  if (fileSize == 0) {\n    status = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(filename,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      error = __errno_location();\n      errorMessage = strerror(*error);\n      translatedString = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(translatedString,filename,errorMessage);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (lineCount = ferror(fileStream), lineCount != 0)) {\n      translatedString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(translatedString,filename);\n    }\n    lineCount = 1;\n    fclose(fileStream);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    currentByte = *fileBuffer;\n    lineStart = fileBuffer;\n    while (currentPtr = lineStart, currentByte != 0) {\n      for (; currentByte = *currentPtr, nextPtr = currentPtr, currentByte != 10; currentPtr = currentPtr + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextChar = currentPtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentPtr = 0;\n            nextChar = currentPtr + 1;\n            if (currentPtr[1] == 10) {\n              nextChar = currentPtr + 2;\n              nextPtr = currentPtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            parse_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentPtr = 0;\n      if (currentPtr[1] == 0xd) {\n        nextPtr = currentPtr + 1;\n        nextChar = currentPtr + 2;\n      }\n      else {\n        nextChar = currentPtr + 1;\n      }\nLAB_00114553:\n      currentByte = *lineStart;\n      while ((currentByte == 0x20 || (currentPtr = lineStart, currentByte == 9))) {\n        currentPtr = lineStart + 1;\n        lineStart = lineStart + 1;\n        currentByte = *currentPtr;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentPtr[1];\n        currentPtr = currentPtr + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentPtr[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentPtr[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentPtr[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentPtr[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentPtr[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentPtr[6];\n          currentChar = currentPtr + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentChar[1];\n                currentChar = currentChar + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          translatedString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(translatedString,filename,lineCount);\n        }\n      }\nLAB_00114599:\n      *currentPtr = 0;\n      if (lineStart < currentPtr) {\n        slot = (byte **)htab_find_slot(hashtable,lineStart,1);\n        *slot = lineStart;\n      }\n      lineCount = lineCount + 1;\n      lineStart = nextChar;\n      currentByte = nextPtr[1];\n    }\n    *fileData = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "fread",
                "ferror",
                "dcgettext",
                "fopen",
                "get_file_size",
                "fatal",
                "fclose",
                "xmalloc",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_file_and_parse_lines_00114460"
        },
        "FUN_001280f8": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280f8",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_001280f8"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "param_1": "binaryData",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "option",
                "cVar1": "flag",
                "lVar2": "dataPtr",
                "__s": "string3",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "pcVar7": "formattedString",
                "uVar8": "returnValue",
                "pcVar9": "optionStr"
            },
            "code": "\nundefined8 generateFormattedString_0010a94e(long binaryData,char *string1,char *string2,int option)\n\n{\n  char flag;\n  long dataPtr;\n  char *string3;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *formattedString;\n  undefined8 returnValue;\n  char *optionStr;\n  \n  flag = *(char *)(*(long *)(binaryData + 0x60) + 0x1c);\n  string3 = (char *)stab_pop_type();\n  formattedString = *(char **)(*(long *)(binaryData + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    length1 = strlen(formattedString);\n    length2 = strlen(string1);\n    length3 = strlen(string3);\n    length4 = strlen(string2);\n    formattedString = (char *)xmalloc(length1 + 10 + length2 + length3 + length4);\n    if (option == 1) {\n      optionStr = \"/1\";\n    }\n    else {\n      optionStr = \"/0\";\n      if ((option != 2) && (optionStr = \"\", option != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(binaryData + 0x60) + 0x20),string1,optionStr,\n            string3,string2,*(long *)(binaryData + 0x60));\n    free(*(void **)(*(long *)(binaryData + 0x60) + 0x20));\n    dataPtr = *(long *)(binaryData + 0x60);\n    *(char **)(dataPtr + 0x20) = formattedString;\n    if (flag != '\\0') {\n      *(undefined *)(dataPtr + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)dataPtr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a94e"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "get_real_type_00113b1e",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "output_param",
                "param_4": "unrelated_param",
                "auVar1": "result",
                "piVar2": "real_type",
                "uVar3": "real_type_value",
                "auVar4": "output_data"
            },
            "code": "\nundefined  [16] get_real_type_00113b1e(long input_param,undefined8 unused_param,ulong output_param,undefined8 unrelated_param)\n\n{\n  undefined result [16];\n  int *real_type;\n  undefined8 real_type_value;\n  undefined output_data [16];\n  \n  if (input_param != 0) {\n    real_type = (int *)debug_get_real_type_00113b1e_isra_0(input_param,0);\n    if ((real_type == (int *)0x0) || (3 < *real_type - 7U)) {\n      real_type_value = 0;\n    }\n    else {\n      real_type_value = **(undefined8 **)(real_type + 4);\n    }\n    output_data._8_8_ = unrelated_param;\n    output_data._0_8_ = real_type_value;\n    return output_data;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = output_param;\n  return result << 0x40;\n}\n\n",
            "called": [
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "get_real_type_00113b1e"
        },
        "FUN_00104300": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "bfd_get_archive_filename",
                "debug_set_filename",
                "debug_set_class_id.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104300"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "build_stab_entry_0010a0e9",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "type",
                "uVar2": "result",
                "__s": "type_string",
                "sVar3": "string_length",
                "__s_00": "formatted_string"
            },
            "code": "\nundefined4 build_stab_entry_0010a0e9(long base_address,undefined8 value1,undefined8 value2)\n\n{\n  undefined type;\n  undefined4 result;\n  char *type_string;\n  size_t string_length;\n  char *formatted_string;\n  \n  type = *(undefined *)(*(long *)(base_address + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(base_address + 0x60) + 0x18);\n  type_string = (char *)stab_pop_type();\n  string_length = strlen(type_string);\n  formatted_string = (char *)xmalloc(string_length + 100);\n  sprintf(formatted_string,\"r%s;%ld;%ld;\",type_string,value1,value2);\n  free(type_string);\n  result = stab_push_string(base_address,formatted_string,0,type,result);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "build_stab_entry_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "process_section_00114c20",
                "param_1": "sectionAddress",
                "cVar1": "startsWithMatch",
                "pcVar2": "nextSection",
                "sections_removed": "numSectionsRemoved"
            },
            "code": "\nvoid processSection_00114c20(long sectionAddress)\n\n{\n  char startsWithMatch;\n  char *nextSection;\n  \n  find_section_list(sectionAddress,1,1);\n  startsWithMatch = startswith_lto_priv_0_lto_priv_0(sectionAddress,&DAT_0011b499);\n  if (startsWithMatch != '\\0') {\n    nextSection = (char *)(sectionAddress + 5);\n    if (*(char *)(sectionAddress + 4) != 'a') {\n      nextSection = (char *)(sectionAddress + 4);\n    }\n    if (*nextSection != '\\0') {\n      find_section_list(nextSection,1,0x100);\n    }\n  }\n  numSectionsRemoved = 1;\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_section_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_and_update_sections_00115f50",
                "param_1": "status",
                "param_2": "symbolList",
                "param_3": "isStripSection",
                "__s1": "currentSymbol",
                "uVar1": "cmpResult",
                "uVar2": "sectionType",
                "extraout_EDX": "extraOutput",
                "plVar3": "sectionList",
                "auVar4": "comparisonResult"
            },
            "code": "\nuint checkAndUpdateSections_00115f50(long status,char **symbolList,char isStripSection)\n\n{\n  char *currentSymbol;\n  uint cmpResult;\n  undefined4 sectionType;\n  undefined4 extraOutput;\n  long *sectionList;\n  undefined comparisonResult [12];\n  \n  if ((status != 0) || (extract_symbol != '\\0')) {\n    return 1;\n  }\n  comparisonResult = is_strip_section_isra_0(symbolList);\n  if (comparisonResult[0] == '\\0') {\n    if (update_sections != (long *)0x0) {\n      currentSymbol = *symbolList;\n      sectionList = update_sections;\n      do {\n        cmpResult = strcmp(currentSymbol,(char *)sectionList[1]);\n        comparisonResult._4_4_ = 0;\n        comparisonResult._0_4_ = cmpResult;\n        comparisonResult._8_4_ = extraOutput;\n        if (cmpResult == 0) {\n          return 1;\n        }\n        sectionList = (long *)*sectionList;\n      } while (sectionList != (long *)0x0);\n    }\n    sectionType = comparisonResult._8_4_;\n    if (((((isStripSection == '\\0') || (merge_notes == '\\0')) ||\n         (comparisonResult._8_4_ = sectionType, comparisonResult._0_8_ = *(long *)(status + 8),\n         *(int *)(*(long *)(status + 8) + 8) != 5)) ||\n        ((comparisonResult._0_8_ = (ulong)symbolList[0x1a], *(int *)(symbolList[0x1a] + 4) != 7 ||\n         (comparisonResult = startswith_lto_priv_0_lto_priv_0(*symbolList,\".gnu.build.attributes\"),\n         comparisonResult[0] == '\\0')))) && ((*(byte *)((long)symbolList + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(comparisonResult._1_7_,symbolList[8] == (char *)0x0) |\n             CONCAT31(comparisonResult._9_3_,symbolList[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strcmp",
                "is_strip_section.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "copy_section",
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "check_and_update_sections_00115f50"
        },
        "FUN_00104540": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "main",
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104540"
        },
        "FUN_00104420": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104420"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "handle_byte_section_001083de",
                "unaff_RBX": "sectionDataPtr",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionData",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleByteSection_001083de(void)\n\n{\n  undefined8 sectionData;\n  undefined8 errorMessage;\n  undefined8 *sectionDataPtr;\n  undefined4 sectionLength;\n  \n  sectionData = *sectionDataPtr;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  fatal(errorMessage,sectionData,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "handle_byte_section_001083de"
        },
        "FUN_00104780": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_00104780"
        },
        "FUN_00104660": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104660"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "parse_and_push_type_info_0010b948",
                "param_1": "binaryOffset",
                "param_2": "typeSize",
                "lVar1": "typeAddress",
                "cVar2": "isIntType",
                "__ptr": "typeString",
                "uVar3": "typeValue",
                "uVar4": "typeIndex",
                "local_5a": "formattedString"
            },
            "code": "\nvoid parseAndPushTypeInfo_0010b948(long binaryOffset,uint typeSize)\n\n{\n  long typeAddress;\n  char isIntType;\n  void *typeString;\n  ulong typeValue;\n  uint typeIndex;\n  char formattedString [50];\n  \n  typeIndex = typeSize - 1;\n  typeValue = (ulong)typeSize;\n  if ((typeIndex < 0x10) && (typeAddress = *(long *)(binaryOffset + 0xf8 + (ulong)typeIndex * 8), typeAddress != 0)) {\n    stab_push_defined_type(binaryOffset,typeAddress,typeValue);\n    return;\n  }\n  isIntType = stab_int_type_lto_priv_0(binaryOffset,4,0);\n  if (isIntType != '\\0') {\n    typeString = (void *)stab_pop_type(binaryOffset);\n    typeAddress = *(long *)(binaryOffset + 0x68);\n    *(long *)(binaryOffset + 0x68) = typeAddress + 1;\n    if (typeIndex < 0x10) {\n      *(long *)(binaryOffset + 0xf8 + (ulong)typeIndex * 8) = typeAddress;\n    }\n    sprintf(formattedString,\"%ld=r%s;%u;0;\",typeAddress,typeString,typeValue);\n    free(typeString);\n    stab_push_string(binaryOffset,formattedString,typeAddress,1,typeValue);\n  }\n  return;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "parse_and_push_type_info_0010b948"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "process_debug_info_00112b6e",
                "param_1": "inputArray",
                "param_2": "debugInfoArray",
                "iVar1": "arraySize",
                "uVar2": "typeName",
                "__format": "formatString",
                "piVar3": "resultArray",
                "plVar4": "debugInfoPtr",
                "bVar5": "isCircular",
                "local_18": "localDebugInfoPtr",
                "local_10": "localInputArray"
            },
            "code": "\n\n\nint * processDebugInfo_00112b6e(int *inputArray,long *debugInfoArray)\n\n{\n  int arraySize;\n  undefined8 typeName;\n  char *formatString;\n  int *resultArray;\n  long *debugInfoPtr;\n  bool isCircular;\n  long *localDebugInfoPtr;\n  int *localInputArray;\n  \n  arraySize = *inputArray;\n  if ((arraySize != 1) && (1 < arraySize - 0x16U)) {\n    return inputArray;\n  }\n  debugInfoPtr = debugInfoArray;\n  while (debugInfoPtr != (long *)0x0) {\n    if ((inputArray == (int *)debugInfoPtr[1]) ||\n       (isCircular = debugInfoPtr == (long *)*debugInfoPtr, debugInfoPtr = (long *)*debugInfoPtr, isCircular)) {\n      typeName = debug_get_type_name_constprop_0\n                        (inputArray,\"debug_get_real_type: circular debug information for %s\\n\");\n      formatString = (char *)dcgettext(0);\n      fprintf(_stderr,formatString,typeName);\n      return (int *)0x0;\n    }\n  }\n  localDebugInfoPtr = debugInfoArray;\n  localInputArray = inputArray;\n  if (arraySize - 0x16U < 2) {\n    resultArray = (int *)processDebugInfo_00112b6e((*(undefined8 **)(inputArray + 4))[1],&localDebugInfoPtr);\n    return resultArray;\n  }\n  resultArray = *(int **)**(undefined8 **)(inputArray + 4);\n  if (inputArray == resultArray) {\n    return inputArray;\n  }\n  if (resultArray == (int *)0x0) {\n    return inputArray;\n  }\n  resultArray = (int *)processDebugInfo_00112b6e(resultArray,&localDebugInfoPtr);\n  return resultArray;\n}\n\n",
            "called": [
                "dcgettext",
                "debug_get_type_name.constprop.0",
                "debug_get_real_type.isra.0",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "debug_get_fields.isra.0",
                "debug_write_type.constprop.0",
                "debug_type_samep",
                "debug_get_real_type.isra.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "process_debug_info_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_struct_type_0010a83e",
                "param_1": "base_address",
                "param_2": "context",
                "param_3": "size1",
                "param_4": "undefined_flag",
                "param_5": "size2",
                "param_6": "boolean_flag1",
                "param_7": "boolean_flag2",
                "uVar1": "result",
                "__s": "string1",
                "__s_00": "string2",
                "sVar2": "string_length",
                "cVar3": "char_flag"
            },
            "code": "\nundefined4\nprocess_struct_type_0010a83e(long base_address,undefined8 context,ulong size1,undefined undefined_flag,ulong size2,\n            byte boolean_flag1,byte boolean_flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t string_length;\n  char char_flag;\n  \n  if (((boolean_flag2 ^ 1) & boolean_flag1) == 0) {\n    string1 = (char *)0x0;\n    char_flag = '\\0';\n  }\n  else {\n    char_flag = *(char *)(*(long *)(base_address + 0x60) + 0x1c);\n    string1 = (char *)stab_pop_type();\n    size2 = size2 & 0xffffffff;\n    size1 = size1 & 0xffffffff;\n  }\n  result = stab_start_struct_type_lto_priv_0(base_address,context,size1,undefined_flag,size2);\n  if ((char)result != '\\0') {\n    if (boolean_flag1 == 0) {\n      return result;\n    }\n    if (boolean_flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(string1);\n      string2 = (char *)xmalloc(string_length + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (char_flag != '\\0') {\n        *(undefined *)(*(long *)(base_address + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(base_address + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(base_address + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(base_address + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "sprintf",
                "stab_start_struct_type.lto_priv.0",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_struct_type_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_debug_type_entry_00113d6e",
                "param_1": "data1",
                "param_2": "data2",
                "lVar1": "debugTypeEntry",
                "puVar2": "allocatedDataPtr"
            },
            "code": "\nlong createDebugTypeEntry_00113d6e(undefined8 data1,undefined8 data2)\n\n{\n  long debugTypeEntry;\n  undefined8 *allocatedDataPtr;\n  \n  debugTypeEntry = debug_make_type_constprop_0(0xb,0);\n  if (debugTypeEntry != 0) {\n    allocatedDataPtr = (undefined8 *)xmalloc(0x10);\n    *allocatedDataPtr = data1;\n    allocatedDataPtr[1] = data2;\n    *(undefined8 **)(debugTypeEntry + 0x10) = allocatedDataPtr;\n  }\n  return debugTypeEntry;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_type_entry_00113d6e"
        },
        "FUN_00104430": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104430"
        },
        "FUN_00104310": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "bfd_nonfatal_message",
                "display_info.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104310"
        },
        "FUN_00104670": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "FUN_00104670"
        },
        "FUN_00104550": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104550"
        },
        "FUN_00104790": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "main",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_00104790"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "flag"
            },
            "code": "\nvoid executeFunction_00114d50(long inputParam1,long inputParam2,uint flag)\n\n{\n  if (*(int *)(*(long *)(inputParam1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flag == 2) && (*(int *)(*(long *)(inputParam2 + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(inputParam2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(inputParam1 + 8) + 0x380) + 0x78))(inputParam1,flag != 0);\n  return;\n}\n\n",
            "called": [
                "set_long_section_mode.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "execute_function_00114d50"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "message",
                "fprintf": "printToOutput",
                "dcgettext": "getTranslatedMessage",
                "program_name": "programName",
                "list_supported_targets": "printSupportedTargets"
            },
            "code": "\nvoid printUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = programName;\n  message = (char *)getTranslatedMessage(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  printToOutput(outputFile,message,programName);\n  message = (char *)getTranslatedMessage(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  printToOutput(outputFile,message);\n  message = (char *)getTranslatedMessage(0,\" The options are:\\n\",5);\n  printToOutput(outputFile,message);\n  message = (char *)getTranslatedMessage(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  printToOutput(outputFile,message);\n  message = (char *)getTranslatedMessage(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  printToOutput(outputFile,message);\n  message = (char *)getTranslatedMessage(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  printToOutput(outputFile,message);\n  printSupportedTargets(programName,outputFile);\n  if (exitCode == 0) {\n    message = (char *)getTranslatedMessage(0,\"Report bugs to %s\\n\",5);\n    printToOutput(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "list_supported_targets",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorFlag1",
                "param_2": "errorFlag2",
                "param_3": "errorFlag3",
                "param_4": "errorFlag4",
                "param_5": "errorFlag5",
                "param_6": "errorFlag6",
                "param_7": "errorFlag7",
                "param_8": "errorFlag8",
                "param_9": "archiveFile",
                "param_10": "errorValue1",
                "param_11": "errorValue2",
                "param_12": "errorMessage",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "iVar1": "errorCheck",
                "uVar2": "errorMessageDetail",
                "local_100": "bufferSize1",
                "local_fc": "bufferSize2",
                "local_f8": "pointer1",
                "local_f0": "pointer2",
                "local_e8": "buffer",
                "local_c8": "value1",
                "local_c0": "value2",
                "local_b8": "value3",
                "local_a8": "value4",
                "local_98": "value5",
                "local_88": "value6",
                "local_78": "value7",
                "local_68": "value8",
                "local_58": "value9",
                "local_48": "value10"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorFlag1,undefined4 errorFlag2,undefined4 errorFlag3,undefined4 errorFlag4,\n                 undefined4 errorFlag5,undefined4 errorFlag6,undefined4 errorFlag7,undefined4 errorFlag8,\n                 long archiveFile,long errorValue1,long *errorValue2,char *errorMessage,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int errorCheck;\n  undefined8 errorMessageDetail;\n  undefined4 bufferSize1;\n  undefined4 bufferSize2;\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined buffer [32];\n  undefined8 value1;\n  undefined8 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  undefined4 value8;\n  undefined4 value9;\n  undefined4 value10;\n  \n  if (flag != '\\0') {\n    value3 = errorFlag1;\n    value4 = errorFlag2;\n    value5 = errorFlag3;\n    value6 = errorFlag4;\n    value7 = errorFlag5;\n    value8 = errorFlag6;\n    value9 = errorFlag7;\n    value10 = errorFlag8;\n  }\n  value1 = param13;\n  value2 = param14;\n  errorCheck = bfd_get_error();\n  if (errorCheck == 0) {\n    errorMessageDetail = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessageDetail = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(program_name,_stderr);\n  if (errorValue1 != 0) {\n    if (archiveFile == 0) {\n      archiveFile = bfd_get_archive_filename(errorValue1);\n    }\n    if ((errorValue2 != (long *)0x0) && (*errorValue2 != 0)) {\n      fprintf(_stderr,\": %s[%s]\",archiveFile);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",archiveFile);\nLAB_001127c1:\n  if (errorMessage != (char *)0x0) {\n    pointer1 = &stack0x00000008;\n    pointer2 = buffer;\n    bufferSize1 = 0x20;\n    bufferSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,errorMessage,&bufferSize1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessageDetail);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fwrite",
                "bfd_get_error",
                "bfd_errmsg",
                "dcgettext",
                "bfd_get_archive_filename",
                "vfprintf",
                "fputs",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00108466",
                "copy_file",
                "FUN_0010808f",
                "main",
                "copy_relocations_in_section",
                "FUN_001086af",
                "copy_file.cold",
                "copy_object.cold",
                "copy_section",
                "FUN_00104ea2",
                "FUN_00107880",
                "copy_object",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "make_constprop_type_00113b4a",
                "param_1": "input",
                "lVar1": "result"
            },
            "code": "\nlong make_constprop_type_00113b4a(long input)\n\n{\n  long result;\n  \n  if (input != 0) {\n    result = debug_make_type_constprop_0(0x15,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "make_constprop_type_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_symbol_0010edb4",
                "param_1": "symbolTable",
                "param_2": "filename",
                "param_3": "symbolType",
                "param_4": "symbolSize",
                "cVar1": "writeSuccess",
                "iVar2": "filenameComparison",
                "uVar3": "symbolWriteResult",
                "in_R10": "extraParam"
            },
            "code": "\nundefined8 updateSymbol_0010edb4(long symbolTable,undefined8 filename,undefined4 symbolType,ulong symbolSize)\n\n{\n  char writeSuccess;\n  int filenameComparison;\n  undefined8 symbolWriteResult;\n  undefined8 extraParam;\n  \n  if (*(long *)(symbolTable + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(symbolTable + 0x1f0) < symbolSize) {\n    *(ulong *)(symbolTable + 0x1f0) = symbolSize;\n  }\n  filenameComparison = filename_cmp(filename);\n  if (filenameComparison != 0) {\n    writeSuccess = stab_write_symbol_lto_priv_0(symbolTable,0x84,0,symbolSize,filename);\n    if (writeSuccess == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(symbolTable + 0x210) = filename;\n  }\n  symbolWriteResult = stab_write_symbol_lto_priv_0\n                    (symbolTable,0x44,symbolType,symbolSize - *(long *)(symbolTable + 0x200),0,extraParam);\n  return symbolWriteResult;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "debug_write_linenos.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_0010edb4"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "reverse_and_modify_0010e5db",
                "param_1": "input_address",
                "param_2": "input_length",
                "cVar1": "result_char",
                "__ptr": "ptr_value",
                "__s": "string_value",
                "sVar2": "string_length",
                "__s_00": "modified_string",
                "in_R10": "constant_value",
                "iVar3": "iteration_count",
                "auVar4": "modified_result"
            },
            "code": "\nundefined  [16] reverse_and_modify_0010e5db(long input_address,int input_length)\n\n{\n  char result_char;\n  void *ptr_value;\n  char *string_value;\n  size_t string_length;\n  char *modified_string;\n  ulong constant_value;\n  int iteration_count;\n  undefined modified_result [16];\n  \n  iteration_count = 0;\n  do {\n    if (input_length <= iteration_count) {\n      modified_result = stab_modify_type(input_address,0x66,0,input_address + 0x188,input_address + 400,constant_value);\n      return modified_result;\n    }\n    if (*(char *)(*(long *)(input_address + 0x60) + 0x1c) == '\\0') {\n      ptr_value = (void *)stab_pop_type(input_address);\n      free(ptr_value);\n    }\n    else {\n      string_value = (char *)stab_pop_type(input_address);\n      string_length = strlen(string_value);\n      modified_string = (char *)xmalloc(string_length + 3);\n      sprintf(modified_string,\":t%s\",string_value);\n      free(string_value);\n      result_char = stab_write_symbol_lto_priv_0(input_address,0x80,0,0,modified_string);\n      if (result_char == '\\0') {\n        modified_result._8_8_ = 0;\n        modified_result._0_8_ = constant_value;\n        return modified_result << 0x40;\n      }\n      free(modified_string);\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "called": [
                "stab_modify_type",
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_and_modify_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_remove_directory_00104d25",
                "param_7": "userMessage",
                "status": "currentStatus"
            },
            "code": "\nvoid cleanupAndRemoveDirectory_00104d25(void)\n\n{\n  undefined8 userMessage;\n  \n  currentStatus = 1;\n  bfd_nonfatal_message(0,userMessage,0,0);\n  remove_directory_00114b84();\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "FUN_00114b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "cleanup_and_remove_directory_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "improved_code_0010551d_0010551d",
                "puVar1": "pointer",
                "bVar2": "byteValue",
                "puVar3": "undefinedPointer",
                "pcVar4": "functionPointer",
                "puVar5": "undefined8Pointer",
                "uVar6": "ulongValue",
                "uVar7": "ulongValue",
                "__s": "string",
                "cVar8": "charValue",
                "cVar9": "charValue",
                "uVar10": "uintValue",
                "iVar11": "intValue",
                "uVar12": "uintValue",
                "uVar13": "undefined4Value",
                "iVar14": "intValue",
                "plVar15": "longPointer",
                "uVar16": "undefined8Value",
                "uVar17": "undefined8Value",
                "sVar18": "size_tValue",
                "pcVar19": "charPointer",
                "pcVar28": "charPointer",
                "puVar29": "undefined8Pointer",
                "uVar30": "ulongValue",
                "iVar31": "intValue",
                "lVar21": "longValue",
                "sVar26": "size_tValue",
                "lVar27": "longValue",
                "plVar32": "longPointer",
                "puVar34": "undefined4Pointer",
                "ppcVar35": "charPointerPointer",
                "pvVar36": "voidPointer",
                "unaff_RBX": "longPointer",
                "in_stack_00000008": "longValue",
                "in_stack_00000010": "ulongValue",
                "in_stack_00000140": "charPointer",
                "unaff_RBP": "longValue",
                "unaff_R13": "longPointer",
                "unaff_R14": "undefined8Pointer"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong improved_code_0010551d_0010551d(void)\n\n{\n  uint *pointer;\n  byte byteValue;\n  undefined *undefinedPointer;\n  code *functionPointer;\n  undefined8 *undefined8Pointer;\n  ulong ulongValue;\n  ulong ulongValue;\n  char *string;\n  char charValue;\n  char charValue;\n  uint uintValue;\n  int intValue;\n  uint uintValue;\n  undefined4 undefined4Value;\n  int intValue;\n  long *longPointer;\n  undefined8 undefined8Value;\n  undefined8 undefined8Value;\n  size_t size_tValue;\n  char *charPointer;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long longValue;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *string_00;\n  size_t size_tValue;\n  long longValue;\n  long *longPointer;\n  char *charPointer;\n  undefined8 *undefined8Pointer;\n  ulong ulongValue;\n  int intValue;\n  long longValue;\n  long *longPointer;\n  char *pcVar33;\n  undefined4 *undefined4Pointer;\n  char **charPointerPointer;\n  long *longPointer;\n  void *voidPointer;\n  undefined8 *undefined8Pointer;\n  undefined **pundefinedPointer7;\n  bool bVar38;\n  byte bVar39;\n  long longValue;\n  ulong ulongValue;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *charPointer;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(longPointer);\nLAB_001151a2:\n  longValue = *(long *)(longValue + 8);\n  undefined8Pointer = dump_sections;\n  if (longValue == 0) goto joined_r0x001151c7;\n  if (merge_notes != '\\0') {\n    if ((((*(int *)(undefined8Pointer[1] + 8) != 5) || (*(int *)(*(long *)(longValue + 0xd0) + 4) != 7)) ||\n        (charValue = startswith_lto_priv_0_lto_priv_0(), charValue == '\\0')) ||\n       ((*(long *)(longValue + 0x60) == 0 || (lVar25 = *(long *)(longValue + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    longPointer = (long *)xmalloc(0x20);\n    longPointer[1] = 0;\n    charValue = bfd_get_full_section_contents();\n    if (charValue != '\\0') {\n      longValue = merge_gnu_build_notes();\n      longPointer[2] = longValue;\n      if ((longValue == lVar25) || (charValue = bfd_set_section_size(), charValue != '\\0')) {\n        longPointer[3] = (long)longPointer;\n        *longPointer = longValue;\n        longPointer = longPointer;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,longValue,longValue);\n        free((void *)longPointer[1]);\n        free(longPointer);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(longValue + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)*undefined8Pointer) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      size_tValue = *(size_t *)(lVar25 + 0x40);\n      string_00 = fopen((char *)undefined8Pointer[2],\"w\");\n      if (string_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(undefined8Pointer[2],0,0);\n      }\n      else {\n        charValue = bfd_malloc_and_get_section();\n        if (charValue == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((size_tValue != 0) &&\n                (size_tValue = fwrite(charPointer,1,size_tValue,string_00), size_tValue != size_tValue)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          undefined8Value = undefined8Pointer[2];\n          undefined8Value = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(undefined8Value,undefined8Value,pcVar33);\n          free(charPointer);\n          fclose(string_00);\n          return 0;\n        }\n        fclose(string_00);\n        free(charPointer);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(longValue,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      undefined8Value = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(undefined8Value);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(longValue);\n    lVar25 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      undefined8Value = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,longValue,0,undefined8Value,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(longValue + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(longValue + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        ulongValue = uVar20;\n        ulongValue = uVar24;\n        ulongValue = uVar20;\n        if (uVar22 != 0) {\n          while ((ulongValue = ulongValue, ulongValue != 0 &&\n                 (ulongValue = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            ulongValue = uVar20;\n            ulongValue = uVar22;\n          }\n        }\n        uVar20 = ulongValue;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  longPointer = isympp;\n  iStack000000000000006c = *(int *)(longValue + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = improved_code_0010554f();\n    return uVar24;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pundefinedPointer7 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    undefined4Pointer = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *undefined4Pointer = 0;\n      undefined4Pointer = undefined4Pointer + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      undefinedPointer = *pundefinedPointer7;\n      lVar25 = bfd_get_section_by_name();\n      longValue = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (longValue != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        charValue = bfd_get_section_contents();\n        if (charValue == '\\0') {\n          undefined4Value = bfd_get_error();\n          bfd_errmsg(undefined4Value);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*undefined8Pointer);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(longValue + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            undefined4Value = bfd_get_error();\n            bfd_errmsg(undefined4Value);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*undefined8Pointer);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (voidPointer = __ptr; voidPointer <= (void *)((long)__ptr + lVar25 + -0xc);\n                  voidPointer = (void *)((long)voidPointer + 0xc)) {\n                uVar20 = (**(code **)(undefined8Pointer[1] + 0x40))(voidPointer);\n                byteValue = *(byte *)((long)voidPointer + 4);\n                undefined4Value = (**(code **)(undefined8Pointer[1] + 0x58))((long)voidPointer + 6);\n                longValue = (**(code **)(undefined8Pointer[1] + 0x40))((long)voidPointer + 8);\n                if (byteValue == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + longValue;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      size_tValue = strlen(pcVar33);\n                      if (((size_tValue == 0) || (charPointer = pcVar33 + (size_tValue - 1), *charPointer != '\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)voidPointer + 0x10U)) goto LAB_001077fb;\n                      *charPointer = '\\0';\n                      voidPointer = (void *)((long)voidPointer + 0xc);\n                      intValue = (**(code **)(undefined8Pointer[1] + 0x40))(voidPointer);\n                      uVar20 = (ulong)(uint)(intValue + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *charPointer = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    undefined8Value = *undefined8Pointer;\n                    charPointer = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,charPointer,undefined8Value,undefinedPointer,((long)voidPointer - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byteValue,undefined4Value,longValue,pcVar33);\n                    charValue = parse_stab(puStack0000000000000020,pcStack0000000000000038,byteValue);\n                    if (charValue == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    undefined8Value = *undefined8Pointer;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,undefined8Value,undefinedPointer,((long)voidPointer - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteValue,((long)voidPointer - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pundefinedPointer7 = pundefinedPointer7 + 2;\n    } while (pundefinedPointer7 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charValue = finish_stab(), charValue == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(undefined8Pointer[1] + 8) == 1) {\n      lVar25 = 0;\n      for (longPointer = longPointer; longPointer < longPointer + ulongValue; longPointer = longPointer + 1) {\n        (**(code **)(undefined8Pointer[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = start_stab_constprop_0(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            charPointer = in_stack_00000150;\n            while (((*charPointer != '\\0' && (size_tValue = strlen(charPointer), charPointer[size_tValue - 1] == '\\')) &&\n                   (longPointer + 1 < longPointer + ulongValue))) {\n              charPointer = (char *)xstrdup(charPointer);\n              size_tValue = strlen(charPointer);\n              charPointer[size_tValue - 1] = '\\0';\n              charPointer = (char *)concat(charPointer,*(undefined8 *)(longPointer[1] + 8),0);\n              free(charPointer);\n              free(pcVar33);\n              longPointer = longPointer + 1;\n              pcVar33 = charPointer;\n            }\n            save_stab(uStack0000000000000158,(int)sStack000000000000015a,charPointer,charPointer);\n            in_stack_00000018 = parse_stab(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((lVar25 != 0) && (charValue = finish_stab(), charValue == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(undefined8Pointer[1] + 8) != 2) || (ulongValue == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      charPointer = (char *)0x0;\n      in_stack_000000c0 = longPointer;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = ulongValue;\n      in_stack_000000d8 = 0;\n      undefined8Pointer = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)undefined8Pointer = 0;\n        undefined8Pointer = (undefined8 *)((long)undefined8Pointer + (ulong)bVar39 * -8 + 4);\n      }\n      charValue = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)ulongValue <= in_stack_000000d0) break;\n        lVar25 = longPointer[in_stack_000000d0];\n        charValue = bfd_coff_get_syment();\n        longValue = in_stack_000000d8;\n        if (charValue == '\\0') {\n          undefined4Value = bfd_get_error();\n          bfd_errmsg(undefined4Value);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          undefined8Value = dcgettext(0,pcVar33,5);\n          non_fatal(undefined8Value);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charValue = bfd_coff_get_auxent(), charValue == '\\0')) {\n          undefined4Value = bfd_get_error();\n          bfd_errmsg(undefined4Value);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)longValue) {\n          if (bStack0000000000000100 != 0x67) {\n            charValue = debug_set_filename(puStack0000000000000020);\n            if (charValue == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charValue = debug_set_filename(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(undefined8Pointer[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(undefined8Pointer[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(undefined8Pointer[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intValue = strcmp(pcVar33,\".bb\");\n              if (intValue == 0) {\n                charValue = debug_start_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intValue = strcmp(pcVar33,\".eb\");\n              if (intValue == 0) {\n                charValue = debug_end_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intValue = strcmp(pcVar33,\".bf\");\n              if (intValue == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  longValue = parse_coff_type_lto_priv_0();\n                  if ((longValue == 0) ||\n                     (charValue = debug_record_function(puStack0000000000000020), charValue == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intValue = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intValue = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      intValue = _uStack0000000000000048[4];\n                      if (intValue == 0) break;\n                      charValue = debug_record_line(puStack0000000000000020,intValue + intValue,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charValue == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intValue = strcmp(pcVar33,\".ef\");\n                if (intValue != 0) goto switchD_00106e1a_caseD_68;\n                if (charValue != '\\0') {\n                  charValue = debug_end_function(puStack0000000000000020);\n                  if (charValue == '\\0') goto LAB_00105981;\n                  charValue = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              undefined8Value = dcgettext(0,pcVar33,5);\n              non_fatal(undefined8Value);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longValue = parse_coff_type_lto_priv_0();\n          if (longValue == 0) goto LAB_00105981;\n          charValue = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar25,longValue);\n        }\njoined_r0x00107247:\n        if (charValue == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(longValue + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(longValue + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(longValue + 8) + 0x20) == '\\0') &&\n       (keep_section_symbols == '\\0')) {\n      if (ulongValue != 0) {\n        longPointer = isympp + ulongValue;\n        longPointer = isympp;\n        do {\n          uintValue = *(uint *)(*longPointer + 0x18);\n          if ((uintValue & 0x1000000) != 0) {\n            *(uint *)(*longPointer + 0x18) = uintValue & 0xfeffffff;\n          }\n          longPointer = longPointer + 1;\n        } while (longPointer != longPointer);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(longValue + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          pointer = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *pointer = *pointer | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intValue = bfd_get_error();\n      if (intValue != 0) {\n        status = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    longPointer = isympp;\n    uStack0000000000000048 = *(uint *)((long)undefined8Pointer + 0x44) & 0x42;\n    osympp = lVar25;\n    if (ulongValue == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intValue = add_symbols;\n        longPointer = (long *)longPointer[_in_stack_00000018];\n        functionPointer = (code *)longPointer[4];\n        uintValue = *(uint *)(longPointer + 3);\n        pcVar33 = (char *)longPointer[1];\n        charPointer = pcVar33;\n        if (add_sym_list != (undefined8 *)0x0) {\n          intValue = 0;\n          undefined8Pointer = add_sym_list;\n          while( true ) {\n            if ((intValue <= intValue) || (charPointer = (char *)undefined8Pointer[5], charPointer == (char *)0x0))\n            goto LAB_00105ad5;\n            if (charPointer != \"\") break;\nLAB_0010750b:\n            intValue = intValue + 1;\n          }\n          intValue = strcmp(charPointer,pcVar33);\n          if (intValue != 0) {\n            undefined8Pointer = (undefined8 *)*undefined8Pointer;\n            goto LAB_0010750b;\n          }\n          free(charPointer);\n          uVar20 = uVar24 + 1;\n          undefined8Pointer[5] = \"\";\n          undefined8Value = create_new_symbol(undefined8Pointer);\n          undefined8Value = redefine_specific_htab;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = undefined8Value;\n          longValue = htab_elements(undefined8Value);\n          if ((longValue != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charValue = *pcVar33;\n          if (charValue != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = prefix_symbols_string;\n          if ((change_leading_char != '\\0') &&\n             (*(char *)(*(long *)(longValue + 8) + 0x1c) != '\\0')) {\n            longValue = undefined8Pointer[1];\n            charValue = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        longValue = htab_elements(redefine_specific_htab);\n        uVar20 = uVar24;\n        if ((longValue == 0) && (section_rename_list == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (intValue = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), intValue == 0)) {\n            undefined8Value = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(undefined8Value);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        charPointer = pcVar33;\n        longValue = htab_find(redefine_specific_htab);\n        if (((longValue == 0) || (charPointer = *(char **)(longValue + 8), pcVar33 == charPointer)) &&\n           (charPointer = pcVar33, charPointerPointer = section_rename_list, (uintValue & 0x100) != 0)) {\n          for (; charPointerPointer != (char **)0x0; charPointerPointer = (char **)charPointerPointer[3]) {\n            intValue = strcmp(*charPointerPointer,pcVar33);\n            if (intValue == 0) {\n              charPointer = charPointerPointer[1];\n              break;\n            }\n          }\n        }\n        longPointer[1] = (long)charPointer;\n        charValue = *charPointer;\n        if (charValue == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = prefix_symbols_string;\n        longValue = undefined8Pointer[1];\n        if (*(char *)(longValue + 0x1c) == charValue) {\n          if (change_leading_char == '\\0') {\n            if ((remove_leading_char == '\\0') ||\n               ((((uintValue & 0x82) == 0 && (functionPointer != bfd_map_over_sections)) &&\n                ((*(byte *)(longPointer[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            charPointer = charPointer + 1;\n            longPointer[1] = (long)charPointer;\n            goto joined_r0x00106565;\n          }\n          charValue = *(char *)(*(long *)(longValue + 8) + 0x1c);\n          if (charValue == '\\0') goto LAB_0010677d;\n          if (prefix_symbols_string != (char *)0x0) {\n            charPointer = charPointer + 1;\n            longPointer[1] = (long)charPointer;\n            size_tValue = strlen(charPointer);\n            longValue = size_tValue + 2;\n            goto LAB_001066bc;\n          }\n          *charPointer = charValue;\n          longPointer[1] = (long)charPointer;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((change_leading_char == '\\0') ||\n             (*(char *)(*(long *)(longValue + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            size_tValue = strlen(charPointer);\n            size_tValue = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(size_tValue + size_tValue + 1);\n            charPointer = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = prefix_symbols_string;\n            if ((*(char *)(longValue + 0x1c) != '\\0') && (charValue != *(char *)(longValue + 0x1c)))\n            goto joined_r0x00106565;\n            size_tValue = strlen(charPointer);\n            longValue = size_tValue + 2;\n            if (pcVar33 == (char *)0x0) {\n              charPointer = (char *)xmalloc(longValue);\n            }\n            else {\nLAB_001066bc:\n              size_tValue = strlen(pcVar33);\n              charPointer = (char *)xmalloc(size_tValue + longValue);\n            }\n            pcVar33 = charPointer + 1;\n            *charPointer = *(char *)(*(long *)(longValue + 8) + 0x1c);\n          }\n          string = prefix_symbols_string;\n          if (prefix_symbols_string != (char *)0x0) {\n            strcpy(pcVar33,prefix_symbols_string);\n            size_tValue = strlen(string);\n            pcVar33 = pcVar33 + size_tValue;\n          }\n          strcpy(pcVar33,charPointer);\n          longPointer[1] = (long)charPointer;\n          charPointer = charPointer;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (strip_symbols == 7) goto LAB_001067a8;\n        if (((uintValue & 0x20) == 0) &&\n           (((uintValue & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(longPointer[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintValue & 0x82) != 0 || ((*(byte *)(longPointer[4] + 0x25) & 0x10) != 0)))) ||\n             (intValue = bfd_decode_symclass(longPointer), intValue == 0x49)) {\nLAB_00105be2:\n            if (wildcard == '\\0') {\n              longValue = htab_find();\n              if (longValue == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              charPointer = charPointer;\n              htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintValue & 0x82) == 0) && (functionPointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(longPointer[4] + 0x25) & 0x10) == 0)) {\n            if ((uintValue & 4) == 0) {\n              if (((*(int *)(undefined8Pointer[1] + 8) != 2) ||\n                  (longValue = *(long *)(longPointer[4] + 0xd0), longValue == 0)) ||\n                 (*(long *)(longValue + 0x40) == 0)) {\n                if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                if (discard_locals == 1) {\n                  charValue = bfd_is_local_label(undefined8Pointer);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charValue = convert_debugging;\n            if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n              if (charValue == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (strip_symbols != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (wildcard == '\\0') {\n          longValue = htab_find();\n          if (longValue != 0) {\nLAB_0010687f:\n            undefined8Value = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(undefined8Value);\n            status = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          charPointer = charPointer;\n          htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintValue & 0x20) == 0) {\nLAB_00105c07:\n          if (wildcard != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            charPointer = charPointer;\n            htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          longValue = htab_find();\n          if (longValue == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((keep_file_symbols != '\\0') && ((uintValue & 0x4000) != 0)) goto LAB_00105c2c;\n          if (wildcard == '\\0') {\n            longValue = htab_find();\n            if (longValue != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            charPointer = charPointer;\n            htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charValue = is_strip_section_isra_0(longPointer[4]);\n          if (charValue == '\\0') {\n            if (((uintValue & 0x800002) == 0) && (functionPointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintValue & 0x82) != 0) {\n                charValue = is_specified_symbol(charPointer);\n                if ((charValue == '\\0') &&\n                   ((longValue = htab_elements(keepglobal_specific_htab), longValue == 0 ||\n                    (charValue = is_specified_symbol(charPointer), charValue != '\\0')))) {\n                  if (((((localize_hidden == '\\0') ||\n                        (uintValue = *(uint *)(longPointer + 3), (uintValue & 0x200000) != 0)) ||\n                       (longValue = *longPointer, longValue == 0)) ||\n                      ((*(int *)(*(long *)(longValue + 8) + 8) != 5 || (*(long *)(longValue + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)longPointer + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintValue = *(uint *)(longPointer + 3);\n                }\n                *(uint *)(longPointer + 3) = uintValue & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintValue & 1) != 0) && (charValue = is_specified_symbol(charPointer), charValue != '\\0')) {\n                *(uint *)(longPointer + 3) = *(uint *)(longPointer + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((weaken != '\\0') || (charValue = is_specified_symbol(charPointer), charValue != '\\0')) {\n                *(uint *)(longPointer + 3) = *(uint *)(longPointer + 3) & 0xff7ffffd | 0x80;\n              }\n              if (functionPointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = longPointer;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (ulongValue != _in_stack_00000018);\n    }\n    if (add_sym_list != (undefined8 *)0x0) {\n      undefined8Pointer = add_sym_list;\n      intValue = add_symbols;\n      for (longValue = 0; longValue < intValue; longValue = longValue + 1) {\n        pcVar33 = (char *)undefined8Pointer[5];\n        if (pcVar33 == (char *)0x0) {\n          longValue = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          undefined8Value = create_new_symbol(undefined8Pointer,longValue);\n          *(undefined8 *)(lVar25 + longValue) = undefined8Value;\n          intValue = add_symbols;\n        }\n        else if (pcVar33 != \"\") {\n          undefined8Value = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(undefined8Value,pcVar33);\n        }\n        undefined8Pointer = (undefined8 *)*undefined8Pointer;\n      }\n    }\n    bVar38 = convert_debugging != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intValue = *(int *)(*(undefined8 **)(longValue + 8) + 1);\n      if ((intValue != 5) && (intValue != 2)) {\n        undefined8Value = **(undefined8 **)(longValue + 8);\n        undefined8Value = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,longValue,0,undefined8Value,undefined8Value);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charValue = write_stabs_in_sections_debugging_info_constprop_0\n                        (longValue,puStack0000000000000020,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (charValue == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(longValue,\".stab\",0x2108);\n      longValue = bfd_make_section_with_flags(longValue,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (longValue == 0)) ||\n          (charValue = bfd_set_section_size(lVar25,in_stack_00000110), charValue == '\\0')) ||\n         (charValue = bfd_set_section_size(longValue,charPointer), charValue == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        undefined8Value = dcgettext(0,pcVar33,5);\n        bfd_nonfatal_message(0,longValue,0,undefined8Value);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(longValue + 0x7c) = 0;\n      charValue = bfd_set_section_contents\n                        (longValue,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charValue == '\\0') ||\n         (charValue = bfd_set_section_contents\n                            (longValue,longValue,in_stack_000000e0,0,charPointer),\n         charValue == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    ulongValue = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(strip_specific_htab);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(keep_specific_htab), lVar25 != 0 ||\n              (lVar25 = htab_elements(localize_specific_htab), lVar25 != 0)) ||\n             (lVar25 = htab_elements(globalize_specific_htab), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(keepglobal_specific_htab), lVar25 != 0 ||\n             (lVar25 = htab_elements(weaken_specific_htab), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(redefine_specific_htab), lVar25 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(longValue,osympp,ulongValue & 0xffffffff);\n  bfd_map_over_sections(undefined8Pointer,copy_relocations_in_section,longValue);\n  bfd_map_over_sections(undefined8Pointer,copy_section,longValue);\n  for (undefined8Pointer = add_sections; undefined8Pointer = update_sections, undefined8Pointer != (undefined8 *)0x0;\n      undefined8Pointer = (undefined8 *)*undefined8Pointer) {\n    charValue = bfd_set_section_contents(longValue,undefined8Pointer[5],undefined8Pointer[4],0,undefined8Pointer[3]);\n    if (charValue == '\\0') {\n      bfd_nonfatal_message(0,longValue,undefined8Pointer[5],0);\n      return 0;\n    }\n  }\n  for (; undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)*undefined8Pointer) {\n    undefined8Value = *(undefined8 *)(undefined8Pointer[5] + 0x60);\n    charValue = bfd_set_section_contents(longValue,undefined8Value,undefined8Pointer[4],0,undefined8Pointer[3]);\n    if (charValue == '\\0') {\n      bfd_nonfatal_message(0,longValue,undefined8Value,0);\n      return 0;\n    }\n  }\n  if (longPointer == (long *)0x0) {\n    if ((merge_notes != '\\0') && (is_strip == 0)) {\n      undefined8Value = *undefined8Pointer;\n      undefined8Value = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(undefined8Value,undefined8Value);\n    }\nLAB_0010578f:\n    if ((gnu_debuglink_filename == 0) ||\n       (charValue = bfd_fill_in_gnu_debuglink_section(longValue,lStack0000000000000078),\n       lVar25 = gnu_debuglink_filename, charValue != '\\0')) {\n      uintValue = (**(code **)(*(long *)(longValue + 8) + 0x140))(undefined8Pointer);\n      uVar24 = (ulong)uintValue;\n      if ((char)uintValue != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar24;\n        }\n        charValue = bfd_alt_mach_code(longValue,use_alt_mach_code & 0xffffffff);\n        uVar20 = use_alt_mach_code;\n        if (charValue != '\\0') {\n          return uVar24;\n        }\n        undefined8Value = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(undefined8Value,uVar20);\n        if (*(int *)(*(long *)(longValue + 8) + 8) != 5) {\n          undefined8Value = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(undefined8Value);\n          return uVar24;\n        }\n        undefined8Value = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(undefined8Value);\n        *(short *)(*(long *)(longValue + 0x110) + 0x3a) = (short)use_alt_mach_code;\n        return uVar24;\n      }\n      undefined8Value = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,longValue,0,undefined8Value);\n    }\n    else {\n      undefined8Value = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,longValue,0,undefined8Value,lVar25);\n    }\n    return 0;\n  }\n  longPointer = (long *)0x0;\n  undefined8Pointer = *(undefined8 **)(longValue + 0x90);\n  do {\n    if (undefined8Pointer == (undefined8 *)0x0) {\n      do {\n        longPointer = (long *)longPointer[3];\n        free((void *)longPointer[1]);\n        free(longPointer);\n        longPointer = longPointer;\n      } while (longPointer != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((merge_notes != '\\0') && (*(int *)(*(long *)(longValue + 8) + 8) == 5)) &&\n        (*(int *)(undefined8Pointer[0x1a] + 4) == 7)) &&\n       (charValue = startswith_lto_priv_0_lto_priv_0(*undefined8Pointer,\".gnu.build.attributes\"), charValue != '\\0'))\n    {\n      if (longPointer == (long *)0x0) {\n        longPointer = longPointer;\n      }\n      longPointer = longPointer;\n      if (*(undefined8 **)(*longPointer + 0x60) == undefined8Pointer) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (longPointer[1] != 0) {\n          charValue = bfd_set_section_contents(longValue,undefined8Pointer,longPointer[1],0,longPointer[2]);\n          if (charValue == '\\0') {\n            undefined8Value = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,longValue,undefined8Pointer,undefined8Value);\n            return 0;\n          }\n          longPointer = (long *)longPointer[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          longPointer = longPointer;\n          if (*(undefined8 **)(*longPointer + 0x60) == undefined8Pointer) goto LAB_0010625f;\n          longPointer = (long *)longPointer[3];\n          longPointer = longPointer;\n        } while (longPointer != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      undefined8Value = dcgettext(0,pcVar33,5);\n      bfd_nonfatal_message(0,longValue,undefined8Pointer,undefined8Value);\n    }\nLAB_001061be:\n    undefined8Pointer = (undefined8 *)undefined8Pointer[1];\n  } while( true );\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "dcgettext",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improved_code_0010551d_0010551d"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "string"
            },
            "code": "\nvoid hash_string_00108800(undefined8 *string)\n\n{\n  htab_hash_string_00108800(*string);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_00104320": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_00104ea2",
                "parse_stab",
                "stab_demangle_template",
                "FUN_0010554f",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104320"
        },
        "FUN_00104200": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104200"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "deallocate_records_0010c1c6",
                "param_1": "record_pointer",
                "param_2": "data_address",
                "puVar1": "next_record_pointer",
                "cVar2": "result",
                "__ptr": "current_record"
            },
            "code": "\nundefined deallocateRecords_0010c1c6(undefined8 record_pointer,long data_address,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *next_record_pointer;\n  char result;\n  undefined8 *current_record;\n  \n  current_record = *(undefined8 **)(data_address + 0x78);\n  while( true ) {\n    if (current_record == (undefined8 *)0x0) {\n      *(undefined8 *)(data_address + 0x78) = 0;\n      return 1;\n    }\n    result = debug_record_variable\n                      (record_pointer,current_record[1],current_record[2],*(undefined4 *)(current_record + 3),current_record[4],param_6,param_5\n                      );\n    if (result == '\\0') break;\n    next_record_pointer = (undefined8 *)*current_record;\n    free(current_record);\n    current_record = next_record_pointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_record_variable",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "parse_stab",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "deallocate_records_0010c1c6"
        },
        "FUN_00104560": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "stab_write_symbol.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104560"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "strip_symbols_function_001082df",
                "unaff_RBX": "base_address",
                "unaff_RBP": "function_frame",
                "uVar1": "symbol_count",
                "lVar2": "symbol",
                "cVar3": "is_symbol_specified",
                "puVar4": "new_symbol_array",
                "puVar5": "new_symbol_array_end",
                "uVar6": "symbol_index",
                "unaff_R13": "symbol_array",
                "strip_symbols": "strip_symbol_threshold",
                "keep_specific_htab": "specified_symbol_hash_table"
            },
            "code": "\nvoid strip_symbols_function_001082df(void)\n\n{\n  uint symbol_count;\n  long symbol;\n  char is_symbol_specified;\n  long base_address;\n  undefined8 *new_symbol_array;\n  undefined8 *new_symbol_array_end;\n  long function_frame;\n  ulong symbol_index;\n  undefined8 *symbol_array;\n  \n  symbol_count = *(uint *)(base_address + 0x78);\n  if (strip_symbol_threshold == 7) {\n    new_symbol_array = symbol_array;\n    for (symbol_index = 0; symbol_index != symbol_count; symbol_index = symbol_index + 1) {\n      new_symbol_array_end = new_symbol_array;\n      if (((*(long **)symbol_array[symbol_index] != (long *)0x0) &&\n          (symbol = **(long **)symbol_array[symbol_index], symbol != 0)) &&\n         (is_symbol_specified = is_specified_symbol(*(undefined8 *)(symbol + 8),specified_symbol_hash_table), is_symbol_specified != '\\0')\n         ) {\n        new_symbol_array_end = new_symbol_array + 1;\n        *new_symbol_array = symbol_array[symbol_index];\n      }\n      new_symbol_array = new_symbol_array_end;\n    }\n    *new_symbol_array = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(function_frame + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "is_specified_symbol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "strip_symbols_function_001082df"
        },
        "FUN_00104440": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "copy_section",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104440"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_and_store_00114d60",
                "param_1": "fileInfo",
                "iVar1": "eofIndicator",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "__stream": "filePointer",
                "uVar5": "allocatedMemory",
                "sVar6": "readSize",
                "lVar7": "currentSize",
                "lVar8": "maxSize"
            },
            "code": "\nvoid readFileAndStore_00114d60(long fileInfo)\n\n{\n  int eofIndicator;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  undefined8 allocatedMemory;\n  size_t readSize;\n  long currentSize;\n  long maxSize;\n  \n  filePointer = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePointer == (FILE *)0x0) {\n    errnoLocation = __errno_location();\n    errorString = strerror(*errnoLocation);\n    allocatedMemory = *(undefined8 *)(fileInfo + 0x10);\n    errorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    fatal(errorMessage,allocatedMemory,errorString);\n  }\n  maxSize = 0x1000;\n  currentSize = 0;\n  allocatedMemory = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = allocatedMemory;\n  while( true ) {\n    eofIndicator = feof(filePointer);\n    if (eofIndicator != 0) {\n      *(long *)(fileInfo + 0x18) = currentSize;\n      fclose(filePointer);\n      return;\n    }\n    if (currentSize == maxSize) {\n      maxSize = currentSize * 2;\n      allocatedMemory = xrealloc(*(undefined8 *)(fileInfo + 0x20),maxSize);\n      *(undefined8 *)(fileInfo + 0x20) = allocatedMemory;\n    }\n    readSize = fread((void *)(*(long *)(fileInfo + 0x20) + currentSize),1,maxSize - currentSize,filePointer);\n    eofIndicator = ferror(filePointer);\n    if (eofIndicator != 0) break;\n    currentSize = currentSize + readSize;\n  }\n  allocatedMemory = *(undefined8 *)(fileInfo + 0x10);\n  errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n  fatal(errorMessage,allocatedMemory);\n}\n\n",
            "called": [
                "fopen",
                "section_add_load_file.cold",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_file_and_store_00114d60"
        },
        "FUN_00104680": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104680"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "handle_missing_section_00108808",
                "unaff_RBP": "stackPointer",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage",
                "dcgettext": "getErrorMessage",
                "fatal": "terminateProgram"
            },
            "code": "\nvoid handleMissingSection_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  long stackPointer;\n  \n  sectionAddress = *(undefined8 *)(stackPointer + 0x20);\n  errorMessage = getErrorMessage(0,\"Section %s not found\",5);\n                    \n  terminateProgram(errorMessage,sectionAddress);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "create_new_symbol"
            ],
            "imported": false,
            "current_name": "handle_missing_section_00108808"
        },
        "FUN_00128418": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128418",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00128418"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_lines_00104d1c",
                "unaff_EBP": "line_count",
                "pbVar6": "current_line",
                "pbVar7": "next_line",
                "unaff_R13": "error_handler",
                "unaff_R14": "current_char",
                "unaff_R15": "next_char",
                "in_stack_00000008": "error_message_format",
                "in_stack_00000010": "return_address",
                "uVar1": "error_message",
                "ppbVar2": "hash_table_slot",
                "pbVar3": "temp_pointer",
                "pbVar5": "next_line_2",
                "bVar4": "current_byte"
            },
            "code": "\nvoid parse_lines_00104d1c(void)\n\n{\n  undefined8 error_message;\n  byte **hash_table_slot;\n  byte *temp_pointer;\n  byte current_byte;\n  byte *next_line_2;\n  int line_count;\n  byte *current_line;\n  undefined8 error_handler;\n  byte *next_line;\n  byte *current_char;\n  byte *next_char;\n  undefined8 error_message_format;\n  undefined8 *return_address;\n  \n  *current_char = 0;\nLAB_00114520:\n  current_char = current_char + 1;\n  do {\n    current_byte = *current_char;\n    next_line = current_char;\n    if (current_byte == 10) {\n      *current_char = 0;\n      if (current_char[1] == 0xd) {\n        next_line = current_char + 1;\n        next_line_2 = current_char + 2;\n      }\n      else {\n        next_line_2 = current_char + 1;\n      }\n    }\n    else if ((char)current_byte < '\\v') {\n      if (current_byte != 0) goto LAB_00114520;\n      next_line_2 = current_char + 1;\n    }\n    else {\n      if (current_byte != 0xd) break;\n      *current_char = 0;\n      next_line_2 = current_char + 1;\n      if (current_char[1] == 10) {\n        next_line_2 = current_char + 2;\n        next_line = current_char + 1;\n      }\n    }\n    current_byte = *next_char;\n    while ((current_byte == 0x20 || (current_line = next_char, current_byte == 9))) {\n      current_line = next_char + 1;\n      next_char = next_char + 1;\n      current_byte = *current_line;\n    }\n    do {\n      if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n      if (current_byte == 0) goto LAB_00114599;\n      current_byte = current_line[1];\n      current_line = current_line + 1;\n    } while ((current_byte != 0x20) && (current_byte != 9));\n    if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_byte = current_line[1];\n      if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n            ((current_byte = current_line[2], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = current_line[3], current_byte == 9 || (current_byte == 0x20)))) &&\n          ((current_byte = current_line[4], current_byte == 9 || (current_byte == 0x20)))) &&\n         ((current_byte = current_line[5], current_byte == 9 || (current_byte == 0x20)))) {\n        current_byte = current_line[6];\n        temp_pointer = current_line + 6;\n        if ((current_byte == 9) || (current_byte == 0x20)) {\n          do {\n            do {\n              current_byte = temp_pointer[1];\n              temp_pointer = temp_pointer + 1;\n            } while (current_byte == 0x20);\n          } while (current_byte == 9);\n        }\n      }\n      if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(error_message,error_message_format,line_count);\n      }\n    }\nLAB_00114599:\n    *current_line = 0;\n    if (next_char < current_line) {\n      hash_table_slot = (byte **)htab_find_slot();\n      *hash_table_slot = next_char;\n    }\n    line_count = line_count + 1;\n    current_char = next_line_2;\n    next_char = next_line_2;\n    if (next_line[1] == 0) {\n      *return_address = error_handler;\n      return;\n    }\n  } while( true );\n  if (current_byte == 0x23) {\n    parse_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_report_bad_number_00119940",
                "param_1": "address",
                "param_2": "message",
                "uVar1": "errorString",
                "local_20": "scannedValue"
            },
            "code": "\nvoid checkAndReportBadNumber_00119940(undefined8 address,undefined8 message)\n\n{\n  undefined8 errorString;\n  char *scannedValue [2];\n  \n  bfd_scan_vma(address,scannedValue,0);\n  if (*scannedValue[0] == '\\0') {\n    return;\n  }\n  errorString = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorString,message,address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "parse_vma.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_report_bad_number_00119940"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "temp"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long temp;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(temp + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "set_long_section_mode"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "FUN_00104210": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00114dc7",
                "FUN_00107880",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104210"
        },
        "FUN_00104450": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104450"
        },
        "FUN_00104330": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "copy_section",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104330"
        },
        "FUN_00104690": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104690"
        },
        "FUN_00104570": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00104ea2",
                "FUN_00107880",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_00104570"
        },
        "FUN_00128408": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128408",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128408"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_debug_info_00113a4d",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "cVar1": "result",
                "uVar2": "returnValue",
                "puVar3": "ptr",
                "auVar4": "tempArray"
            },
            "code": "\nundefined8\nprocessDebugInfo_00113a4d(undefined8 arg1,undefined8 arg2,long arg3,undefined8 arg4,\n            undefined8 arg5)\n\n{\n  char result;\n  undefined8 returnValue;\n  undefined8 *ptr;\n  undefined tempArray [16];\n  \n  result = debug_write_linenos_constprop_0(arg1,arg2,*(undefined8 *)(arg3 + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(arg3 + 0x28) == 0 && (*(long *)(arg3 + 8) != 0)) ||\n      (result = stab_start_block_lto_priv_0(arg2,*(undefined8 *)(arg3 + 0x18)), result != '\\0'))\n     )) {\n    if (*(undefined8 **)(arg3 + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(arg3 + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = debug_write_name_constprop_0(arg1,arg2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(arg3 + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = processDebugInfo_00113a4d(arg1,arg2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    tempArray = debug_write_linenos_constprop_0(arg1,arg2,*(undefined8 *)(arg3 + 0x20));\n    if (tempArray[0] != '\\0') {\n      if ((*(long *)(arg3 + 0x28) == 0) && (*(long *)(arg3 + 8) != 0)) {\n        return tempArray._0_8_;\n      }\n      returnValue = stab_end_block_lto_priv_0\n                        (arg2,*(undefined8 *)(arg3 + 0x20),tempArray._8_8_,arg5);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_write_block.constprop.0",
                "debug_write_linenos.constprop.0",
                "stab_start_block.lto_priv.0",
                "stab_end_block.lto_priv.0",
                "debug_write_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "debug_write_block.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "process_debug_info_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "cleanup_memory_001081e9",
                "in_RAX": "inputParam",
                "unaff_RBX": "memoryBlock",
                "param_7": "outputParam"
            },
            "code": "\nundefined8 cleanupMemory_001081e9(void)\n\n{\n  undefined8 inputParam;\n  void *memoryBlock;\n  undefined8 outputParam;\n  \n  outputParam = inputParam;\n  free(memoryBlock);\n  return outputParam;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "cleanup_memory_001081e9"
        },
        "FUN_00104100": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "display_info.isra.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104100"
        },
        "FUN_00104340": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "is_specified_symbol_predicate",
                "find_section_list"
            ],
            "imported": false,
            "current_name": "FUN_00104340"
        },
        "FUN_00104220": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104220"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_debug_type_00113b71",
                "param_1": "inputValue",
                "lVar1": "debugTypePtr"
            },
            "code": "\nlong initializeDebugType_00113b71(long inputValue)\n\n{\n  long debugTypePtr;\n  \n  if (inputValue != 0) {\n    debugTypePtr = debug_make_type_constprop_0(0x14,0);\n    if (debugTypePtr == 0) {\n      debugTypePtr = 0;\n    }\n    else {\n      *(long *)(debugTypePtr + 0x10) = inputValue;\n    }\n    return debugTypePtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113b71"
        },
        "FUN_00104580": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104580"
        },
        "FUN_00104460": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104460"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "process_data_00109dfe",
                "param_1": "input",
                "lVar1": "count",
                "local_40": "formattedString"
            },
            "code": "\nvoid processData_00109dfe(long input)\n\n{\n  long count;\n  char formattedString [40];\n  \n  if (*(long *)(input + 0x70) != 0) {\n    stab_push_defined_type(input,*(long *)(input + 0x70),0);\n    return;\n  }\n  count = *(long *)(input + 0x68);\n  *(long *)(input + 0x68) = count + 1;\n  *(long *)(input + 0x70) = count;\n  sprintf(formattedString,\"%ld=%ld\",count,count);\n  stab_push_string(input,formattedString,count,1,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_string_and_append_00109bbb",
                "param_1": "baseAddress",
                "__s": "stringPtr",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkStringAndAppend_00109bbb(long baseAddress)\n\n{\n  char *stringPtr;\n  size_t stringLength;\n  \n  if (*(long *)(baseAddress + 0x60) != 0) {\n    stringPtr = *(char **)(*(long *)(baseAddress + 0x60) + 0x30);\n    if (stringPtr != (char *)0x0) {\n      stringLength = strlen(stringPtr);\n      *(undefined2 *)(stringPtr + stringLength) = 0x3b;\n    }\n    return stringPtr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "check_string_and_append_00109bbb"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "combine_strings_0010ae0e",
                "param_1": "input",
                "lVar1": "ptr1",
                "lVar2": "ptr2",
                "__ptr": "ptr3",
                "pcVar3": "strPtr",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "resultPtr",
                "uVar7": "returnValue",
                "lVar8": "resultLen",
                "uVar9": "counter",
                "uVar10": "totalLen"
            },
            "code": "\nundefined8 combineStrings_0010ae0e(long input)\n\n{\n  long ptr1;\n  long ptr2;\n  void *ptr3;\n  char *strPtr;\n  size_t len1;\n  size_t len2;\n  char *resultPtr;\n  undefined8 returnValue;\n  long resultLen;\n  uint counter;\n  ulong totalLen;\n  \n  returnValue = 0;\n  ptr1 = *(long *)(input + 0x60);\n  if (((ptr1 != 0) && (*(char **)(ptr1 + 8) != (char *)0x0)) &&\n     (resultPtr = *(char **)(ptr1 + 0x20), resultPtr != (char *)0x0)) {\n    len1 = strlen(*(char **)(ptr1 + 8));\n    len2 = strlen(resultPtr);\n    ptr2 = *(long *)(ptr1 + 0x28);\n    if (ptr2 == 0) {\n      resultLen = len1 + len2 + 10;\n      totalLen = 0;\n    }\n    else {\n      resultLen = len1 + len2 + 0x1e;\n      totalLen = 0;\n      while( true ) {\n        resultPtr = *(char **)(ptr2 + totalLen * 8);\n        if (resultPtr == (char *)0x0) break;\n        len1 = strlen(resultPtr);\n        totalLen = (ulong)((int)totalLen + 1);\n        resultLen = resultLen + len1;\n      }\n    }\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x30));\n      resultLen = resultLen + len1;\n    }\n    if (*(char **)(ptr1 + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x38));\n      resultLen = resultLen + len1;\n    }\n    resultPtr = (char *)xmalloc(resultLen);\n    ptr1 = *(long *)(input + 0x60);\n    strcpy(resultPtr,*(char **)(ptr1 + 8));\n    if (*(long *)(ptr1 + 0x28) != 0) {\n      counter = 0;\n      len1 = strlen(resultPtr);\n      sprintf(resultPtr + len1,\"!%u,\",totalLen);\n      while( true ) {\n        ptr1 = *(long *)(input + 0x60);\n        totalLen = (ulong)counter;\n        ptr3 = *(void **)(ptr1 + 0x28);\n        strPtr = *(char **)((long)ptr3 + totalLen * 8);\n        if (strPtr == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(resultPtr,strPtr);\n        free(*(void **)(*(long *)(ptr1 + 0x28) + totalLen * 8));\n      }\n      free(ptr3);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    ptr1 = *(long *)(input + 0x60);\n    strcat(resultPtr,*(char **)(ptr1 + 0x20));\n    free(*(void **)(ptr1 + 0x20));\n    ptr1 = *(long *)(input + 0x60);\n    *(undefined8 *)(ptr1 + 0x20) = 0;\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      strcat(resultPtr,*(char **)(ptr1 + 0x30));\n      free(*(void **)(ptr1 + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(resultPtr);\n    ptr1 = *(long *)(input + 0x60);\n    *(undefined2 *)(resultPtr + len1) = 0x3b;\n    strPtr = *(char **)(ptr1 + 0x38);\n    if (strPtr != (char *)0x0) {\n      strcpy(resultPtr + len1 + 1,strPtr);\n      free(*(void **)(ptr1 + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    ptr1 = *(long *)(input + 0x60);\n    *(char **)(ptr1 + 8) = resultPtr;\n    returnValue = CONCAT71((int7)((ulong)ptr1 >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "strcat",
                "sprintf",
                "strcpy",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "combine_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "write_debug_information_001135a5",
                "param_1": "filePtr",
                "param_2": "debugType",
                "param_3": "dataPtr",
                "iVar1": "index",
                "cVar2": "result",
                "uVar3": "returnValue",
                "puVar4": "parameterListPtr",
                "puVar5": "functionInfoPtr"
            },
            "code": "\nundefined8 writeDebugInformation_001135a5(undefined8 filePtr,undefined8 debugType,long dataPtr)\n\n{\n  int index;\n  char result;\n  undefined8 returnValue;\n  undefined8 *parameterListPtr;\n  undefined8 *functionInfoPtr;\n  \n  if (6 < *(uint *)(dataPtr + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(dataPtr + 0x14)) {\n  case 0:\n    result = debug_write_type_constprop_0(filePtr,debugType,*(undefined8 *)(dataPtr + 0x20),dataPtr);\n    if (result != '\\0') {\n      returnValue = stab_typdef_lto_priv_0(debugType,*(undefined8 *)(dataPtr + 8));\n      return returnValue;\n    }\n    break;\n  case 1:\n    result = debug_write_type_constprop_0(filePtr,debugType,*(undefined8 *)(dataPtr + 0x20),dataPtr);\n    if (result != '\\0') {\n      returnValue = stab_tag_lto_priv_0(debugType,*(undefined8 *)(dataPtr + 8));\n      return returnValue;\n    }\n    break;\n  case 2:\n    result = debug_write_type_constprop_0\n                      (filePtr,debugType,*(undefined8 *)(*(long *)(dataPtr + 0x20) + 8),0);\n    if (result != '\\0') {\n      returnValue = stab_variable_lto_priv_0\n                        (debugType,*(undefined8 *)(dataPtr + 8),**(undefined4 **)(dataPtr + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(dataPtr + 0x20) + 4));\n      return returnValue;\n    }\n    break;\n  case 3:\n    functionInfoPtr = *(undefined8 **)(dataPtr + 0x20);\n    index = *(int *)(dataPtr + 0x18);\n    returnValue = *(undefined8 *)(dataPtr + 8);\n    result = debug_write_linenos_constprop_0(filePtr,debugType,*(undefined8 *)(functionInfoPtr[2] + 0x18));\n    if (((result != '\\0') &&\n        (result = debug_write_type_constprop_0(filePtr,debugType,*functionInfoPtr,0), result != '\\0')) &&\n       (result = stab_start_function_lto_priv_0(debugType,returnValue,index == 2), result != '\\0')) {\n      for (parameterListPtr = (undefined8 *)functionInfoPtr[1]; parameterListPtr != (undefined8 *)0x0;\n          parameterListPtr = (undefined8 *)*parameterListPtr) {\n        result = debug_write_type_constprop_0(filePtr,debugType,parameterListPtr[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = stab_function_parameter_lto_priv_0(debugType,parameterListPtr[1],*(undefined4 *)(parameterListPtr + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      functionInfoPtr = (undefined8 *)functionInfoPtr[2];\n      while( true ) {\n        if (functionInfoPtr == (undefined8 *)0x0) {\n          returnValue = stab_end_function_lto_priv_0(debugType);\n          return returnValue;\n        }\n        result = debug_write_block_constprop_0(filePtr,debugType,functionInfoPtr);\n        if (result == '\\0') break;\n        functionInfoPtr = (undefined8 *)*functionInfoPtr;\n      }\n    }\n    break;\n  case 4:\n    returnValue = stab_int_constant_lto_priv_0\n                      (debugType,*(undefined8 *)(dataPtr + 8),*(undefined8 *)(dataPtr + 0x20));\n    return returnValue;\n  case 5:\n    returnValue = stab_float_constant_lto_priv_0\n                      (*(undefined8 *)(dataPtr + 0x20),debugType,*(undefined8 *)(dataPtr + 8));\n    return returnValue;\n  case 6:\n    result = debug_write_type_constprop_0(filePtr,debugType,**(undefined8 **)(dataPtr + 0x20),0);\n    if (result != '\\0') {\n      returnValue = stab_typed_constant_lto_priv_0\n                        (debugType,*(undefined8 *)(dataPtr + 8),\n                         *(undefined8 *)(*(long *)(dataPtr + 0x20) + 8));\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_function.lto_priv.0",
                "debug_write_block.constprop.0",
                "debug_write_linenos.constprop.0",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_variable.lto_priv.0",
                "abort",
                "stab_float_constant.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_typdef.lto_priv.0",
                "stab_end_function.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "debug_write_block.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "write_debug_information_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~bfd_flags_to_clear & *(uint *)(param_7[1] + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)unaff_R14 + 0x44));\n  if (strip_symbols == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_file_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = preserve_dates == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar28 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar28 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = add_sections, cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33)\n  {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = improved_code_0010554f();\n    return uVar29;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = add_sym_list;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (section_rename_list == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(redefine_specific_htab);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = section_rename_list, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = prefix_symbols_string;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = prefix_symbols_string;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar33 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = convert_debugging == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(strip_specific_htab);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(keep_specific_htab), lVar28 != 0 ||\n              (lVar28 = htab_elements(localize_specific_htab), lVar28 != 0)) ||\n             (lVar28 = htab_elements(globalize_specific_htab), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 != 0 ||\n             (lVar28 = htab_elements(weaken_specific_htab), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(redefine_specific_htab), lVar28 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = add_sections; puVar38 = update_sections, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)use_alt_mach_code;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = dump_sections;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001152b6",
                "bfd_get_arch",
                "bfd_set_file_flags",
                "bfd_get_mach",
                "dcgettext",
                "bfd_get_archive_filename",
                "bfd_set_start_address",
                "printf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "copy_object"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "FUN_00128318": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128318",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_00128318"
        },
        "FUN_00104590": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104590"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "FUNC_0010b0fa"
            },
            "code": "\n\n\nchar * FUNC_0010b0fa(undefined8 param_1,undefined8 param_2,uint *param_3,long param_4,\n                   undefined *param_5)\n\n{\n  uint uVar1;\n  int iVar2;\n  char *pcVar3;\n  long *plVar4;\n  char *pcVar5;\n  size_t sVar6;\n  void *__ptr;\n  long lVar7;\n  undefined local_40 [16];\n  \n  if (param_5 != (undefined *)0x0) {\n    *param_5 = 0;\n  }\n  while( true ) {\n    uVar1 = *param_3;\n    if (0x29 < uVar1) break;\n    if (0x17 < uVar1) {\n      switch(uVar1) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        pcVar3 = (char *)FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),0,0);\n        if (pcVar3 != (char *)0x0) {\n          switch(*param_3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            pcVar3 = (char *)debug_make_volatile_type_isra_0(pcVar3);\n            return pcVar3;\n          case 0x1b:\n            pcVar3 = (char *)debug_make_const_type_isra_0(pcVar3);\n            return pcVar3;\n          default:\n                    \n            abort();\n          case 0x22:\n            pcVar3 = (char *)debug_make_pointer_type_isra_0(pcVar3);\n            return pcVar3;\n          case 0x23:\n            pcVar3 = (char *)debug_make_reference_type_isra_0(pcVar3);\n            return pcVar3;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        if (pcVar3 == (char *)0x0) {\n          pcVar5 = \"Couldn\\'t get demangled builtin type\\n\";\n          pcVar3 = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        iVar2 = strcmp(pcVar3,\"signed char\");\n        if (iVar2 == 0) {\nLAB_0010b406:\n          pcVar5 = (char *)debug_make_int_type_isra_0(1,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"bool\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_type_constprop_0(6,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"char\");\n        if (iVar2 == 0) goto LAB_0010b406;\n        iVar2 = strcmp(pcVar3,\"double\");\n        if ((iVar2 == 0) || (iVar2 = strcmp(pcVar3,\"long double\"), iVar2 == 0)) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(8);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"float\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(4);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"__float128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(0x10);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned char\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(1,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"int\");\n        if (iVar2 == 0) {\nLAB_0010b504:\n          pcVar5 = (char *)debug_make_int_type_isra_0(4,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned int\");\n        if (iVar2 == 0) {\nLAB_0010b528:\n          pcVar5 = (char *)debug_make_int_type_isra_0(4,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"long\");\n        if (iVar2 == 0) goto LAB_0010b504;\n        iVar2 = strcmp(pcVar3,\"unsigned long\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"__int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned __int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(2,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(2,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"void\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_void_type_isra_0();\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"wchar_t\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(8,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(8,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"...\");\n        if (iVar2 == 0) {\n          pcVar5 = \"Unexpected demangled varargs\\n\";\n          if (param_5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param_5 = 1;\n        }\n        else {\n          pcVar5 = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          pcVar5 = (char *)dcgettext(0,pcVar5,5);\n          fprintf(_stderr,pcVar5);\n        }\n        pcVar5 = (char *)0x0;\nLAB_0010b6c6:\n        free(pcVar3);\n        return pcVar5;\n      case 0x29:\n        if (*(long *)(param_3 + 4) == 0) {\n          __ptr = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          __ptr = (void *)FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,0);\n        }\n        if (__ptr != (void *)0x0) {\n          lVar7 = stab_demangle_v3_arglist(param_1,param_2,*(undefined8 *)(param_3 + 6),local_40);\n          if (lVar7 != 0) {\n            pcVar3 = (char *)debug_make_function_type_isra_0(__ptr,lVar7,local_40[0]);\n            return pcVar3;\n          }\n          free(__ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (uVar1 != 1) {\n      if (uVar1 == 4) {\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        pcVar5 = \"Failed to print demangled template\\n\";\n        if (pcVar3 != (char *)0x0) {\n          sVar6 = strlen(pcVar3);\n          pcVar5 = (char *)stab_find_tagged_type(param_1,param_2,pcVar3,sVar6 & 0xffffffff,9);\n          free(pcVar3);\n          return pcVar5;\n        }\nLAB_0010b3d3:\n        pcVar5 = (char *)dcgettext(0,pcVar5,5);\n        fprintf(_stderr,pcVar5);\n        return pcVar3;\n      }\n      if (uVar1 == 0) {\n        if ((param_4 == 0) ||\n           (plVar4 = (long *)debug_get_fields_isra_0(param_4), plVar4 == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param_4 = FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),param_4,0);\n    if (param_4 == 0) goto LAB_0010b38c;\n    param_3 = *(uint **)(param_3 + 6);\n    param_5 = (undefined *)0x0;\n  }\n  pcVar3 = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,pcVar3,(ulong)uVar1);\nLAB_0010b38c:\n  pcVar3 = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return pcVar3;\nLAB_0010b1a5:\n  if (*plVar4 == 0) {\nswitchD_0010b158_caseD_18:\n    pcVar3 = (char *)stab_find_tagged_type\n                               (param_1,param_2,*(undefined8 *)(param_3 + 4),param_3[6],0);\n    return pcVar3;\n  }\n  pcVar3 = *(char **)(*plVar4 + 8);\n  if (pcVar3 == (char *)0x0) goto LAB_0010b38c;\n  pcVar5 = (char *)debug_get_type_name_constprop_0(pcVar3);\n  if (pcVar5 != (char *)0x0) {\n    sVar6 = strlen(pcVar5);\n    if ((param_3[6] == (uint)sVar6) &&\n       (iVar2 = strncmp(pcVar5,*(char **)(param_3 + 4),(long)(int)param_3[6]), iVar2 == 0)) {\n      return pcVar3;\n    }\n  }\n  plVar4 = plVar4 + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "debug_make_void_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_get_fields.isra.0",
                "strlen",
                "stab_demangle_v3_arglist",
                "debug_make_reference_type.isra.0",
                "dcgettext",
                "stab_demangle_v3_arg",
                "strcmp",
                "debug_make_type.constprop.0",
                "cplus_demangle_print",
                "debug_make_int_type.isra.0",
                "abort",
                "debug_make_pointer_type.isra.0",
                "stab_find_tagged_type",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "free",
                "debug_get_type_name.constprop.0",
                "debug_make_float_type.isra.0",
                "fprintf",
                "strncmp"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "stab_demangle_v3_arglist",
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUNC_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "parse_lines_00104c36",
                "uVar1": "errorMessage",
                "ppbVar2": "slot",
                "pbVar3": "currentChar",
                "in_CL": "currentLineChar",
                "bVar4": "nextChar",
                "unaff_RBX": "currentLine",
                "unaff_EBP": "lineCount",
                "pbVar5": "nextLine",
                "unaff_R13": "fileName",
                "unaff_R14": "currentLine",
                "unaff_R15": "startOfLine",
                "in_stack_00000008": "dcgettextArg1",
                "in_stack_00000010": "returnAddress"
            },
            "code": "\nvoid parseLines_00104c36(void)\n\n{\n  undefined8 errorMessage;\n  byte **slot;\n  byte *currentChar;\n  byte currentLineChar;\n  byte nextChar;\n  byte *currentLine;\n  int lineCount;\n  byte *nextLine;\n  undefined8 fileName;\n  byte *currentLine;\n  byte *startOfLine;\n  undefined8 dcgettextArg1;\n  undefined8 *returnAddress;\n  \n  do {\n    nextLine = startOfLine;\n    if (currentLineChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentLineChar == 10) || (currentLineChar == 0xd)) goto LAB_00114676;\n      if (currentLineChar == 0) goto LAB_00114599;\n      currentLineChar = nextLine[1];\n      nextLine = nextLine + 1;\n    } while ((currentLineChar != 0x20) && (currentLineChar != 9));\n    if ((char)currentLineChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentLineChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextChar = nextLine[1];\n      if ((((((nextChar == 9) || (nextChar == 0x20)) &&\n            ((nextChar = nextLine[2], nextChar == 9 || (nextChar == 0x20)))) &&\n           ((nextChar = nextLine[3], nextChar == 9 || (nextChar == 0x20)))) &&\n          ((nextChar = nextLine[4], nextChar == 9 || (nextChar == 0x20)))) &&\n         ((nextChar = nextLine[5], nextChar == 9 || (nextChar == 0x20)))) {\n        nextChar = nextLine[6];\n        currentChar = nextLine + 6;\n        if ((nextChar == 9) || (nextChar == 0x20)) {\n          do {\n            do {\n              nextChar = currentChar[1];\n              currentChar = currentChar + 1;\n            } while (nextChar == 0x20);\n          } while (nextChar == 9);\n        }\n      }\n      if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) {\n        errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(errorMessage,dcgettextArg1,lineCount);\n      }\n    }\nLAB_00114599:\n    *nextLine = 0;\n    if (startOfLine < nextLine) {\n      slot = (byte **)htab_find_slot();\n      *slot = startOfLine;\n    }\n    lineCount = lineCount + 1;\n    nextLine = currentLine;\n    if (currentLine[1] == 0) {\n      *returnAddress = fileName;\n      return;\n    }\n    for (; nextChar = *nextLine, currentLine = nextLine, nextChar != 10; nextLine = nextLine + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          currentChar = nextLine + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *nextLine = 0;\n          currentChar = nextLine + 1;\n          if (nextLine[1] == 10) {\n            currentChar = nextLine + 2;\n            currentLine = nextLine + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *nextLine = 0;\n    if (nextLine[1] == 0xd) {\n      currentLine = nextLine + 1;\n      currentChar = nextLine + 2;\n    }\n    else {\n      currentChar = nextLine + 1;\n    }\nLAB_00114553:\n    currentLineChar = *currentLine;\n    startOfLine = currentLine;\n    while (currentLine = currentChar, currentLineChar == 0x20) {\nLAB_00104c3f:\n      nextLine = startOfLine + 1;\n      startOfLine = startOfLine + 1;\n      currentChar = currentLine;\n      currentLineChar = *nextLine;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "improved_code_0010554f",
                "param_7": "binary",
                "puVar1": "pointerVar1",
                "bVar2": "byteVar2",
                "pcVar3": "codePointer",
                "puVar4": "pointerVar4",
                "uVar5": "undefinedVar5",
                "uVar6": "ushortVar6",
                "cVar7": "charVar7",
                "cVar8": "charVar8",
                "uVar9": "undefined4Var9",
                "iVar10": "intVar10",
                "iVar11": "intVar11",
                "uVar12": "uintVar12",
                "uVar13": "uintVar13",
                "lVar14": "longVar14",
                "plVar15": "longPointer",
                "iVar27": "intVar27",
                "plVar28": "longPointer2",
                "param_8": "count",
                "param_12": "paramVar12",
                "param_14": "paramVar14",
                "param_17": "paramVar17",
                "uVar21": "ulongVar21",
                "__ptr": "undefinedPointer",
                "pvVar35": "voidVar35",
                "unaff_R14": "unaffVarR14",
                "ppuVar36": "pointerPointerVar36",
                "lVar37": "longVar37",
                "bVar38": "boolVar38",
                "bVar39": "byteVar39",
                "param_15": "paramVar15"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 improvedCode_0010554f(void)\n\n{\n  uint *pointerVar1;\n  byte byteVar2;\n  code *codePointer;\n  undefined8 *pointerVar4;\n  undefined undefinedVar5;\n  ushort ushortVar6;\n  char charVar7;\n  char charVar8;\n  undefined4 undefined4Var9;\n  int intVar10;\n  int intVar11;\n  uint uintVar12;\n  uint uintVar13;\n  long longVar14;\n  long *longPointer;\n  undefined8 uVar16;\n  undefined *undefinedPointer;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *undefinedPointer_00;\n  void *undefinedPointer_01;\n  ulong ulongVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int intVar27;\n  long *longPointer2;\n  ulong uVar29;\n  ulong *puVar30;\n  char *codePointer1;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **pcodePointer4;\n  void *voidVar35;\n  undefined8 *unaffVarR14;\n  undefined **pointerPointerVar36;\n  long longVar37;\n  bool boolVar38;\n  byte byteVar39;\n  long binary;\n  ulong count;\n  char param_9;\n  undefined4 *undefinedPointer_02;\n  ulong paramVar12;\n  char *param_13;\n  undefined *paramVar14;\n  uint paramVar15;\n  long *paramVar17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  byteVar39 = 0;\n  if ((gap_fill_set == '\\0') && (pad_to_set == '\\0')) {\n    paramVar12 = 0;\n    paramVar14 = (undefined *)0x0;\n    paramVar17 = (long *)0x0;\n    uVar29 = paramVar12;\n  }\n  else {\n    longVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    paramVar17 = (long *)xmalloc(longVar14);\n    param_40 = paramVar17;\n    bfd_map_over_sections(binary,get_sections,&stack0x00000140);\n    qsort(paramVar17,(ulong)in_stack_00000068._4_4_,8,compare_section_lma);\n    paramVar14 = (undefined *)xmalloc(longVar14);\n    boolVar38 = gap_fill_set != '\\0';\n    puVar33 = paramVar14;\n    for (; longVar14 != 0; longVar14 = longVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)byteVar39 * -2 + 1;\n    }\n    if (boolVar38) {\n      uVar29 = 0;\n      paramVar12 = 0;\n      do {\n        puVar30 = (ulong *)(paramVar14 + uVar29 * 8);\n        longPointer2 = paramVar17 + uVar29;\n        ulongVar21 = paramVar12;\n        do {\n          paramVar12 = ulongVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uintVar12 = bfd_octets_per_byte(binary,*longPointer2);\n          uintVar13 = bfd_octets_per_byte(binary);\n          longVar14 = *longPointer2;\n          if ((*(uint *)(longVar14 + 0x24) & 0x102) != 0x102) break;\n          ulongVar21 = (ulong)uintVar13 * *(long *)(longPointer2[1] + 0x38);\n          uVar24 = (ulong)uintVar12 * *(long *)(longVar14 + 0x38) + *(long *)(longVar14 + 0x40);\n          if (ulongVar21 <= uVar24) break;\n          ulongVar21 = ulongVar21 - uVar24;\n          charVar7 = bfd_set_section_size();\n          if (charVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,binary,*longPointer2);\n            status = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = ulongVar21;\n          longPointer2 = longPointer2 + 1;\n          puVar30 = puVar30 + 1;\n        } while (paramVar12 < ulongVar21);\n      } while( true );\n    }\n    paramVar12 = 0;\nLAB_00107cd1:\n    uVar29 = paramVar12;\n    if (pad_to_set != '\\0') {\n      uintVar12 = bfd_octets_per_byte(binary);\n      longVar14 = paramVar17[in_stack_00000068._4_4_ - 1];\n      ulongVar21 = pad_to * (ulong)uintVar12;\n      uVar24 = *(long *)(longVar14 + 0x40) + (ulong)uintVar12 * *(long *)(longVar14 + 0x38);\n      if (uVar24 < ulongVar21) {\n        charVar7 = bfd_set_section_size();\n        if (charVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,binary,paramVar17[in_stack_00000068._4_4_ - 1]);\n          status = 1;\n        }\n        else {\n          uVar29 = ulongVar21 - uVar24;\n          *(ulong *)(paramVar14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= paramVar12) {\n            uVar29 = paramVar12;\n          }\n        }\n      }\n    }\n  }\n  paramVar12 = uVar29;\n  longPointer2 = isympp;\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    undefinedPointer_02 = (undefined4 *)0x0;\n  }\n  else {\n    pointerPointerVar36 = &names_0;\n    undefinedPointer_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = undefinedPointer_02;\n    for (longVar14 = 0x18; longVar14 != 0; longVar14 = longVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)byteVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *pointerPointerVar36;\n      longVar14 = bfd_get_section_by_name(unaffVarR14,puVar33);\n      longVar37 = bfd_get_section_by_name();\n      if ((longVar14 != 0) && (longVar37 != 0)) {\n        lVar23 = *(long *)(longVar14 + 0x40);\n        undefinedPointer_00 = (void *)xmalloc(lVar23);\n        charVar7 = bfd_get_section_contents(unaffVarR14,longVar14,undefinedPointer_00,0,lVar23);\n        if (charVar7 == '\\0') {\n          undefined4Var9 = bfd_get_error();\n          bfd_errmsg(undefined4Var9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaffVarR14);\n          free(param_13);\n          free(undefinedPointer_00);\n        }\n        else {\n          uVar29 = *(ulong *)(longVar37 + 0x40);\n          undefinedPointer_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaffVarR14,longVar37,undefinedPointer_01,0);\n          if (param_9 == '\\0') {\n            undefined4Var9 = bfd_get_error();\n            bfd_errmsg(undefined4Var9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaffVarR14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)undefinedPointer_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)start_stab_constprop_0(unaffVarR14,1,longPointer2),\n               param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (voidVar35 = undefinedPointer_00; voidVar35 <= (void *)((long)undefinedPointer_00 + lVar23 + -0xc);\n                  voidVar35 = (void *)((long)voidVar35 + 0xc)) {\n                ulongVar21 = (**(code **)(unaffVarR14[1] + 0x40))(voidVar35);\n                byteVar2 = *(byte *)((long)voidVar35 + 4);\n                undefined4Var9 = (**(code **)(unaffVarR14[1] + 0x58))((long)voidVar35 + 6);\n                longVar14 = (**(code **)(unaffVarR14[1] + 0x40))((long)voidVar35 + 8);\n                if (byteVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + longVar14;\n                }\n                else {\n                  uVar24 = (ulongVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    codePointer1 = (char *)((long)undefinedPointer_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(codePointer1);\n                      if (((sVar18 == 0) || (pcVar22 = codePointer1 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)undefinedPointer_00 + lVar23) < (long)voidVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      voidVar35 = (void *)((long)voidVar35 + 0xc);\n                      intVar10 = (**(code **)(unaffVarR14[1] + 0x40))(voidVar35);\n                      ulongVar21 = (ulong)(uint)(intVar10 + (int)param_23);\n                      if (uVar29 <= ulongVar21) break;\n                      codePointer1 = (char *)concat(codePointer1,(long)undefinedPointer_01 + ulongVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = codePointer1;\n                    }\n                    uVar17 = *unaffVarR14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)voidVar35 - (long)undefinedPointer_00) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byteVar2,undefined4Var9,longVar14,codePointer1);\n                    charVar7 = parse_stab(undefinedPointer_02,param_13,byteVar2);\n                    if (charVar7 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(param_24);\n                      free(param_13);\n                      free(undefinedPointer_00);\n                      free(undefinedPointer_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaffVarR14;\n                    codePointer1 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,codePointer1,uVar17,puVar33,((long)voidVar35 - (long)undefinedPointer_00) / 0xc,\n                            ulongVar21 & 0xffffffff,(ulong)byteVar2,((long)voidVar35 - (long)undefinedPointer_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(undefinedPointer_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(undefinedPointer_01);\n          free(undefinedPointer_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      pointerPointerVar36 = pointerPointerVar36 + 2;\n    } while (pointerPointerVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (charVar7 = finish_stab(), charVar7 == '\\0')) {\nLAB_00105981:\n      free(undefinedPointer_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaffVarR14[1] + 8) == 1) {\n      longVar14 = 0;\n      for (longPointer = longPointer2; longPointer < longPointer2 + count; longPointer = longPointer + 1) {\n        (**(code **)(unaffVarR14[1] + 0x218))(unaffVarR14,*longPointer,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((longVar14 == 0) && (longVar14 = start_stab_constprop_0(unaffVarR14,0,longPointer2), longVar14 == 0))\n             || ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          codePointer1 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (longPointer + 1 < longPointer2 + count))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(longPointer[1] + 8),0);\n            free(__s);\n            free(codePointer1);\n            longPointer = longPointer + 1;\n            codePointer1 = pcVar22;\n          }\n          save_stab(param_43,(int)param_44,param_40,pcVar22);\n          param_9 = parse_stab(undefinedPointer_02,longVar14,param_43);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((longVar14 != 0) && (charVar7 = finish_stab(), charVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaffVarR14[1] + 8) == 2) && (count != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = longPointer2;\n        param_32 = 0;\n        param_31 = count;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (longVar14 = 0x22; longVar14 != 0; longVar14 = longVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)byteVar39 * -8 + 4);\n        }\n        charVar7 = '\\0';\n        _paramVar15 = (int *)0x0;\n        uintVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)count <= param_32) goto LAB_00105590;\n            longVar14 = longPointer2[param_32];\n            charVar8 = bfd_coff_get_syment(unaffVarR14,longVar14,&stack0x000000e0);\n            longVar37 = in_stack_000000d8;\n            if (charVar8 == '\\0') {\n              undefined4Var9 = bfd_get_error();\n              bfd_errmsg(undefined4Var9);\n              codePointer1 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            codePointer1 = *(char **)(longVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              charVar8 = bfd_coff_get_auxent(unaffVarR14,longVar14,0);\n              if (charVar8 == '\\0') {\n                undefined4Var9 = bfd_get_error();\n                bfd_errmsg(undefined4Var9);\n                codePointer1 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)longVar37) break;\n            if (param_36 != 0x67) {\n              charVar8 = debug_set_filename(undefinedPointer_02);\n              if (charVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            charVar8 = debug_set_filename(undefinedPointer_02);\n            if (charVar8 == '\\0') goto LAB_00105981;\n          }\n          ushortVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(unaffVarR14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            charVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,longVar14,longVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaffVarR14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaffVarR14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _paramVar15 = (int *)(**(code **)(unaffVarR14[1] + 0x238))(unaffVarR14);\n                uintVar12 = (uint)ushortVar6;\n                param_13 = codePointer1;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              intVar10 = strcmp(codePointer1,\".bb\");\n              if (intVar10 == 0) {\n                charVar8 = debug_start_block(undefinedPointer_02);\n              }\n              else {\n                intVar10 = strcmp(codePointer1,\".eb\");\n                if (intVar10 != 0) goto switchD_00106e1a_caseD_68;\n                charVar8 = debug_end_block(undefinedPointer_02);\n              }\n              break;\n            case 0x65:\n              intVar10 = strcmp(codePointer1,\".bf\");\n              if (intVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uintVar13 = (int)uintVar12 >> ((byte)*(undefined4 *)(unaffVarR14[0x22] + 0x44) & 0x1f);\n                  longVar37 = parse_coff_type_lto_priv_0\n                                     (unaffVarR14,&stack0x000000c0,&stack0x00000140,longVar37,\n                                      uintVar13 ^ (uintVar12 ^ uintVar13) & *(uint *)(unaffVarR14[0x22] + 0x38)\n                                      ,puVar26,0,undefinedPointer_02);\n                  if ((longVar37 == 0) || (charVar7 = debug_record_function(undefinedPointer_02), charVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_paramVar15 != (int *)0x0) {\n                    intVar10 = 0;\n                    if (param_37 != 0) {\n                      intVar10 = param_39 - 1;\n                    }\n                    longVar14 = *(long *)(*(long *)(longVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      intVar27 = _paramVar15[4];\n                      if (intVar27 == 0) break;\n                      charVar8 = debug_record_line(undefinedPointer_02,intVar10 + intVar27,\n                                                *(long *)(_paramVar15 + 6) + longVar14);\n                      _paramVar15 = _paramVar15 + 4;\n                      if (charVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uintVar12 = 0;\n                  _paramVar15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                codePointer1 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar10 = strcmp(codePointer1,\".ef\");\n                if (intVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar7 != '\\0') {\n                  charVar7 = debug_end_function(undefinedPointer_02);\n                  if (charVar7 == '\\0') goto LAB_00105981;\n                  charVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                codePointer1 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,codePointer1,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (charVar8 != '\\0');\n      }\n      else {\n        codePointer1 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,codePointer1,5);\n        non_fatal(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (count != 0) {\n        longPointer2 = isympp + count;\n        longPointer = isympp;\n        do {\n          uintVar12 = *(uint *)(*longPointer + 0x18);\n          if ((uintVar12 & 0x1000000) != 0) {\n            *(uint *)(*longPointer + 0x18) = uintVar12 & 0xfeffffff;\n          }\n          longPointer = longPointer + 1;\n        } while (longPointer2 != longPointer);\n      }\n    }\n    else {\n      for (longVar14 = *(long *)(binary + 0x90); longVar14 != 0; longVar14 = *(long *)(longVar14 + 8)) {\n        if (*(long *)(longVar14 + 0xe8) != 0) {\n          pointerVar1 = (uint *)(*(long *)(longVar14 + 0xe8) + 0x18);\n          *pointerVar1 = *pointerVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      longVar14 = xmalloc();\n      longPointer2 = isympp;\n      paramVar15 = *(uint *)((long)unaffVarR14 + 0x44) & 0x42;\n      osympp = longVar14;\n      if (count == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          intVar10 = add_symbols;\n          longPointer = (long *)longPointer2[_param_9];\n          codePointer = (code *)longPointer[4];\n          uintVar12 = *(uint *)(longPointer + 3);\n          plVar20 = (long *)longPointer[1];\n          plVar25 = plVar20;\n          if (add_sym_list != (undefined8 *)0x0) {\n            intVar27 = 0;\n            puVar26 = add_sym_list;\n            while ((intVar27 < intVar10 && (codePointer1 = (char *)puVar26[5], codePointer1 != (char *)0x0))) {\n              if (codePointer1 != \"\") {\n                intVar11 = strcmp(codePointer1,(char *)plVar20);\n                if (intVar11 == 0) {\n                  free(codePointer1);\n                  ulongVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = create_new_symbol(puVar26);\n                  uVar17 = redefine_specific_htab;\n                  *(undefined8 *)(longVar14 + uVar29 * 8) = uVar16;\n                  longVar37 = htab_elements(uVar17);\n                  if ((longVar37 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              intVar27 = intVar27 + 1;\n            }\n          }\n          longVar37 = htab_elements(redefine_specific_htab);\n          ulongVar21 = uVar29;\n          if ((longVar37 != 0) || (section_rename_list != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (intVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), intVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            longVar37 = htab_find(redefine_specific_htab);\n            if (((longVar37 == 0) || (plVar25 = *(long **)(longVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, pcodePointer4 = section_rename_list, (uintVar12 & 0x100) != 0)) {\n              for (; pcodePointer4 != (char **)0x0; pcodePointer4 = (char **)pcodePointer4[3]) {\n                intVar10 = strcmp(*pcodePointer4,(char *)plVar20);\n                if (intVar10 == 0) {\n                  plVar25 = (long *)pcodePointer4[1];\n                  break;\n                }\n              }\n            }\n            longPointer[1] = (long)plVar25;\n            charVar7 = *(char *)plVar25;\n            if (charVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            codePointer1 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0'))\n            {\n              longVar37 = unaffVarR14[1];\n              charVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          charVar7 = *(char *)plVar20;\n          if (charVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          codePointer1 = prefix_symbols_string;\n          longVar37 = unaffVarR14[1];\n          if (*(char *)(longVar37 + 0x1c) == charVar7) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uintVar12 & 0x82) == 0 && (codePointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(longPointer[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              longPointer[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            charVar7 = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (charVar7 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              longPointer[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              longVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(codePointer1);\n              plVar20 = (long *)xmalloc(sVar18 + longVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = charVar7;\n            longPointer[1] = (long)plVar25;\n            uVar29 = ulongVar21;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar29 = ulongVar21;\n              if (codePointer1 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(codePointer1);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              codePointer1 = prefix_symbols_string;\n              if ((*(char *)(longVar37 + 0x1c) != '\\0') && (charVar7 != *(char *)(longVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              longVar37 = sVar18 + 2;\n              if (codePointer1 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(longVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            codePointer1 = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy((char *)__dest,prefix_symbols_string);\n              sVar18 = strlen(codePointer1);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            longPointer[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = ulongVar21;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uintVar12 & 0x20) == 0) &&\n             (((uintVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(longPointer[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((paramVar15 == 0) &&\n                (((uintVar12 & 0x82) != 0 || ((*(byte *)(longPointer[4] + 0x25) & 0x10) != 0)))) ||\n               (intVar10 = bfd_decode_symclass(longPointer), intVar10 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                longVar37 = htab_find();\n                if (longVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uintVar12 & 0x82) == 0) && (codePointer != bfd_map_over_sections)) &&\n                    ((*(byte *)(longPointer[4] + 0x25) & 0x10) == 0)) {\n              if ((uintVar12 & 4) == 0) {\n                if (((*(int *)(unaffVarR14[1] + 8) != 2) ||\n                    (longVar37 = *(long *)(longPointer[4] + 0xd0), longVar37 == 0)) ||\n                   (*(long *)(longVar37 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    charVar7 = bfd_is_local_label(unaffVarR14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              charVar7 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (charVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            longVar37 = htab_find();\n            if (longVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar17);\n              status = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uintVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            longVar37 = htab_find();\n            if (longVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uintVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              longVar37 = htab_find();\n              if (longVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            charVar7 = is_strip_section_isra_0(longPointer[4]);\n            if (charVar7 == '\\0') {\n              if (((uintVar12 & 0x800002) == 0) && (codePointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uintVar12 & 0x82) != 0) {\n                  charVar7 = is_specified_symbol(plVar25);\n                  if ((charVar7 == '\\0') &&\n                     ((longVar37 = htab_elements(keepglobal_specific_htab), longVar37 == 0 ||\n                      (charVar7 = is_specified_symbol(plVar25), charVar7 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uintVar13 = *(uint *)(longPointer + 3), (uintVar13 & 0x200000) != 0)) ||\n                         (longVar37 = *longPointer, longVar37 == 0)) ||\n                        ((*(int *)(*(long *)(longVar37 + 8) + 8) != 5 ||\n                         (*(long *)(longVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)longPointer + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uintVar13 = *(uint *)(longPointer + 3);\n                  }\n                  *(uint *)(longPointer + 3) = uintVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uintVar12 & 1) != 0) && (charVar7 = is_specified_symbol(plVar25), charVar7 != '\\0')) {\n                  *(uint *)(longPointer + 3) = *(uint *)(longPointer + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (charVar7 = is_specified_symbol(plVar25), charVar7 != '\\0')) {\n                  *(uint *)(longPointer + 3) = *(uint *)(longPointer + 3) & 0xff7ffffd | 0x80;\n                }\n                if (codePointer != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(longVar14 + uVar29 * 8) = longPointer;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (count != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar26 = add_sym_list;\n        intVar10 = add_symbols;\n        for (longVar37 = 0; longVar37 < intVar10; longVar37 = longVar37 + 1) {\n          codePointer1 = (char *)puVar26[5];\n          if (codePointer1 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = create_new_symbol(puVar26,binary);\n            *(undefined8 *)(longVar14 + lVar23) = uVar17;\n            intVar10 = add_symbols;\n          }\n          else if (codePointer1 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar17,codePointer1);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      boolVar38 = convert_debugging == '\\0';\n      *(undefined8 *)(longVar14 + uVar29 * 8) = 0;\n      if ((boolVar38) || (undefinedPointer_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        count = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      intVar10 = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((intVar10 == 5) || (intVar10 == 2)) {\n        param_33 = (void *)0x0;\n        charVar7 = write_stabs_in_sections_debugging_info_constprop_0\n                          (binary,undefinedPointer_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &stack0x00000140);\n        if (charVar7 != '\\0') {\n          longVar14 = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          longVar37 = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((longVar14 == 0) || (longVar37 == 0)) ||\n              (charVar7 = bfd_set_section_size(longVar14,param_38), charVar7 == '\\0')) ||\n             (charVar7 = bfd_set_section_size(longVar37,param_40), charVar7 == '\\0')) {\n            codePointer1 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(longVar14 + 0x7c) = 2;\n            *(undefined4 *)(longVar37 + 0x7c) = 0;\n            charVar7 = bfd_set_section_contents(binary,longVar14,param_30,0,param_38);\n            if ((charVar7 != '\\0') &&\n               (charVar7 = bfd_set_section_contents(binary,longVar37,param_33,0,param_40), charVar7 != '\\0')\n               ) {\n              free(undefinedPointer_02);\n              goto LAB_00105cfa;\n            }\n            codePointer1 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,codePointer1,5);\n          bfd_nonfatal_message(0,binary,0,uVar17);\n          free(param_33);\n          free(undefinedPointer_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(binary + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,binary,0,uVar16,uVar17);\n      }\n      free(undefinedPointer_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaffVarR14,mark_symbols_used_in_relocations,isympp);\n      intVar10 = bfd_get_error();\n      if (intVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    longVar14 = htab_elements(strip_specific_htab);\n    if (((longVar14 != 0) ||\n        ((((longVar14 = htab_elements(keep_specific_htab), longVar14 != 0 ||\n           (longVar14 = htab_elements(localize_specific_htab), longVar14 != 0)) ||\n          (longVar14 = htab_elements(globalize_specific_htab), longVar14 != 0)) ||\n         ((longVar14 = htab_elements(keepglobal_specific_htab), longVar14 != 0 ||\n          (longVar14 = htab_elements(weaken_specific_htab), longVar14 != 0)))))) ||\n       ((((longVar14 = htab_elements(redefine_specific_htab), longVar14 != 0 ||\n          ((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')))) ||\n         (sections_copied != '\\0')) ||\n        ((((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n          (remove_leading_char != '\\0')) ||\n         (((section_rename_list != (char **)0x0 || (weaken != '\\0')) || (add_symbols != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,osympp,count & 0xffffffff);\n    bfd_map_over_sections(unaffVarR14,copy_relocations_in_section,binary);\n    bfd_map_over_sections(unaffVarR14,copy_section,binary);\n    for (puVar26 = add_sections; pointerVar4 = update_sections, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      charVar7 = bfd_set_section_contents(binary,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (charVar7 == '\\0') {\n        bfd_nonfatal_message(0,binary,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; pointerVar4 != (undefined8 *)0x0; pointerVar4 = (undefined8 *)*pointerVar4) {\n      uVar17 = *(undefined8 *)(pointerVar4[5] + 0x60);\n      charVar7 = bfd_set_section_contents(binary,uVar17,pointerVar4[4],0,pointerVar4[3]);\n      if (charVar7 == '\\0') {\n        bfd_nonfatal_message(0,binary,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar17 = *unaffVarR14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar16,uVar17);\n      }\n    }\n    else {\n      longPointer2 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(binary + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (charVar7 = startswith_lto_priv_0_lto_priv_0(*puVar26,\".gnu.build.attributes\"),\n            charVar7 != '\\0')))) {\n          if (longPointer2 == (long *)0x0) {\n            longPointer2 = in_R10;\n          }\n          longPointer = in_R10;\n          if (*(undefined8 **)(*longPointer2 + 0x60) == puVar26) {\nLAB_0010625f:\n            codePointer1 = \"error: failed to merge notes\";\n            if (longPointer2[1] != 0) {\n              charVar7 = bfd_set_section_contents(binary,puVar26,longPointer2[1],0,longPointer2[2]);\n              if (charVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,binary,puVar26,uVar17);\n                return 0;\n              }\n              longPointer2 = (long *)longPointer2[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              longPointer2 = longPointer;\n              if (*(undefined8 **)(*longPointer + 0x60) == puVar26) goto LAB_0010625f;\n              longPointer2 = (long *)longPointer[3];\n              longPointer = longPointer2;\n            } while (longPointer2 != (long *)0x0);\n            codePointer1 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,codePointer1,5);\n          bfd_nonfatal_message(0,binary,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        longPointer2 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = longPointer2;\n      } while (longPointer2 != (long *)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (charVar7 = bfd_fill_in_gnu_debuglink_section(binary,param_21), longVar14 = gnu_debuglink_filename\n       , charVar7 != '\\0')) {\n      if (paramVar14 != (undefined *)0x0) {\n        if (0x2000 < paramVar12) {\n          paramVar12 = 0x2000;\n        }\n        longVar14 = 0;\n        undefinedPointer = (undefined *)xmalloc(paramVar12);\n        undefinedVar5 = gap_fill;\n        puVar33 = undefinedPointer;\n        for (paramVar12 = paramVar12 & 0xffffffff; paramVar12 != 0; paramVar12 = paramVar12 - 1) {\n          *puVar33 = undefinedVar5;\n          puVar33 = puVar33 + (ulong)byteVar39 * -2 + 1;\n        }\n        for (; (uint)longVar14 < in_stack_00000068._4_4_; longVar14 = longVar14 + 1) {\n          uVar29 = *(ulong *)(paramVar14 + longVar14 * 8);\n          if (uVar29 != 0) {\n            longVar37 = *(long *)(*paramVar17 + 0x40) - uVar29;\n            do {\n              ulongVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                ulongVar21 = uVar29;\n              }\n              charVar7 = bfd_set_section_contents(binary,*paramVar17,undefinedPointer,longVar37,ulongVar21);\n              if (charVar7 == '\\0') {\n                bfd_nonfatal_message(0,binary,*paramVar17,0);\n                free(undefinedPointer);\n                return 0;\n              }\n              longVar37 = longVar37 + ulongVar21;\n              uVar29 = uVar29 - ulongVar21;\n            } while (uVar29 != 0);\n          }\n          paramVar17 = paramVar17 + 1;\n        }\n        free(undefinedPointer);\n        free(paramVar14);\n      }\n      undefined4Var9 = (**(code **)(*(long *)(binary + 8) + 0x140))(unaffVarR14);\n      if ((char)undefined4Var9 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return undefined4Var9;\n        }\n        charVar7 = bfd_alt_mach_code(binary,use_alt_mach_code & 0xffffffff);\n        uVar29 = use_alt_mach_code;\n        if (charVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar17,uVar29);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar17);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return undefined4Var9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return undefined4Var9;\n        }\n        return undefined4Var9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,binary,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,binary,0,uVar17,longVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_set_section_size",
                "start_stab.constprop.0",
                "is_specified_symbol",
                "htab_traverse",
                "bfd_set_error",
                "save_stab",
                "free_saved_stabs",
                "bfd_alt_mach_code",
                "non_fatal",
                "qsort",
                "bfd_is_local_label",
                "debug_end_function",
                "copy_relocations_in_section",
                "strlen",
                "mark_symbols_used_in_relocations",
                "bfd_coff_get_syment",
                "dcgettext",
                "bfd_get_section_by_name",
                "bfd_octets_per_byte",
                "strcpy",
                "xmalloc",
                "is_strip_section.isra.0",
                "is_specified_symbol_predicate",
                "bfd_nonfatal_message",
                "startswith.lto_priv.0.lto_priv.0",
                "bfd_errmsg",
                "bfd_map_over_sections",
                "parse_coff_symbol.constprop.0.isra.0",
                "htab_elements",
                "get_sections",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "bfd_map_over_sections",
                "stab_context",
                "copy_section",
                "bfd_set_symtab",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_fill_in_gnu_debuglink_section",
                "free",
                "fprintf",
                "finish_stab",
                "compare_section_lma",
                "bfd_get_section_contents",
                "debug_end_block",
                "fatal",
                "bfd_decode_symclass",
                "strcmp",
                "debug_start_block",
                "htab_find",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "bfd_set_section_contents",
                "concat",
                "debug_set_filename",
                "debug_record_line",
                "create_new_symbol",
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improved_code_0010554f"
        },
        "FUN_00104230": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "imported": false,
            "current_name": "FUN_00104230"
        },
        "FUN_00104110": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104110"
        },
        "FUN_00128440": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128440",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128440"
        },
        "FUN_00104470": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "debug_find_named_type",
                "find_section_list",
                "main",
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "debug_set_class_id.lto_priv.0",
                "debug_tag_type",
                "debug_type_samep",
                "eq_string_redefnode",
                "parse_stab",
                "skip_section",
                "stab_find_tagged_type",
                "stab_demangle_qualified",
                "FUN_0010554f",
                "convert_efi_target",
                "is_strip_section_1.isra.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104470"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "convert_and_push_to_string_00109cf4",
                "param_1": "target",
                "param_2": "value",
                "param_3": "length",
                "local_3c": "stringValue"
            },
            "code": "\nvoid convertAndPushToString_00109cf4(undefined8 target,undefined8 value,undefined4 length)\n\n{\n  char stringValue [28];\n  \n  sprintf(stringValue,\"%ld\",value);\n  stab_push_string(target,stringValue,value,0,length);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "stab_enum_type.lto_priv.0",
                "stab_modify_type",
                "stab_bool_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_tag_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "convert_and_push_to_string_00109cf4"
        },
        "FUN_00128320": {
            "renaming": {},
            "code": "\n\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128320",
            "calling": [
                "strncasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128320"
        },
        "FUN_00104350": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00104350"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_stab_info_00109ab1",
                "param_1": "stab_string",
                "param_2": "parsed_info",
                "uVar1": "parsed_number",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "output",
                "bad_stab": "handle_bad_stab"
            },
            "code": "\nundefined  [16]\nparse_stab_info_00109ab1(char **stab_string,undefined4 *parsed_info,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_number;\n  char *current_char;\n  undefined8 result;\n  undefined output [16];\n  \n  current_char = *stab_string;\n  if (*current_char == '(') {\n    *stab_string = current_char + 1;\n    parsed_number = parse_number(stab_string,0);\n    *parsed_info = parsed_number;\n    if (**stab_string == ',') {\n      *stab_string = *stab_string + 1;\n      parsed_number = parse_number(stab_string,0,param_3);\n      parsed_info[1] = parsed_number;\n      if (**stab_string == ')') {\n        current_char = *stab_string + 1;\n        *stab_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    handle_bad_stab(current_char);\n    result = 0;\n  }\n  else {\n    *parsed_info = 0;\n    current_char = (char *)parse_number(stab_string,0);\n    parsed_info[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  output._8_8_ = param_5;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "bad_stab",
                "parse_number"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_stab_info_00109ab1"
        },
        "FUN_00128200": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128200",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_00128200"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_strip_section_001159d0",
                "param_1": "section_address",
                "uVar1": "symbol_address",
                "cVar2": "symbol_check_result",
                "uVar3": "strip_section_result",
                "lVar4": "group_signature",
                "lVar5": "current_section",
                "is_strip_section_1_isra_0": "is_strip_section",
                "group_signature_isra_0": "find_group_signature",
                "strip_symbols": "symbol_stripping_option",
                "is_specified_symbol": "is_symbol_specified",
                "strip_specific_htab": "specific_htab_stripping_option"
            },
            "code": "\nundefined4 check_strip_section_001159d0(long section_address)\n\n{\n  undefined8 symbol_address;\n  char symbol_check_result;\n  undefined4 strip_section_result;\n  long group_signature;\n  long current_section;\n  \n  strip_section_result = is_strip_section();\n  if ((char)strip_section_result == '\\0') {\n    if ((*(byte *)(section_address + 0x27) & 2) == 0) {\n      return strip_section_result;\n    }\n    group_signature = find_group_signature(*(undefined8 *)(section_address + 0xd0),*(undefined8 *)(section_address + 0xe0));\n    if ((group_signature != 0) &&\n       (((symbol_address = *(undefined8 *)(group_signature + 8), symbol_stripping_option != 7 ||\n         (symbol_check_result = is_symbol_specified(symbol_address,keep_specific_htab), symbol_check_result != '\\0')) &&\n        (symbol_check_result = is_symbol_specified(symbol_address,specific_htab_stripping_option), symbol_check_result == '\\0')))) {\n      group_signature = *(long *)(*(long *)(section_address + 0xd0) + 0xc0);\n      current_section = group_signature;\n      do {\n        if (current_section == 0) {\n          return 1;\n        }\n        symbol_check_result = is_strip_section(current_section);\n        if (symbol_check_result == '\\0') {\n          return strip_section_result;\n        }\n        current_section = *(long *)(*(long *)(current_section + 0xd0) + 0xc0);\n      } while (group_signature != current_section);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_specified_symbol",
                "group_signature.isra.0",
                "is_strip_section_1.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "skip_section",
                "FUN_0010554f",
                "setup_section"
            ],
            "imported": false,
            "current_name": "check_strip_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "concatenate_and_push_string_0010a77a",
                "param_1": "input",
                "lVar2": "ptr_struct",
                "__s": "str1",
                "uVar4": "result",
                "uVar1": "char_val",
                "uVar3": "long_val",
                "__s_00": "str2",
                "sVar5": "len_str2",
                "sVar6": "len_str1",
                "__s_01": "concatenated_str"
            },
            "code": "\nundefined4 concatenateAndPushString_0010a77a(long input)\n\n{\n  undefined char_val;\n  long ptr_struct;\n  char *str1;\n  undefined8 long_val;\n  undefined4 result;\n  char *str2;\n  size_t len_str2;\n  size_t len_str1;\n  char *concatenated_str;\n  \n  ptr_struct = *(long *)(input + 0x60);\n  if ((ptr_struct != 0) && (str1 = *(char **)(ptr_struct + 0x20), str1 != (char *)0x0)) {\n    result = *(undefined4 *)(ptr_struct + 0x18);\n    char_val = *(undefined *)(ptr_struct + 0x1c);\n    long_val = *(undefined8 *)(ptr_struct + 0x10);\n    str2 = (char *)stab_pop_type();\n    len_str2 = strlen(str2);\n    len_str1 = strlen(str1);\n    concatenated_str = (char *)xmalloc(len_str2 + 2 + len_str1);\n    sprintf(concatenated_str,\"%s%s;\",str2,str1);\n    free(str2);\n    free(str1);\n    result = stab_push_string(input,concatenated_str,long_val,char_val,result);\n    if ((char)result != '\\0') {\n      free(concatenated_str);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "concatenate_and_push_string_0010a77a"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "handle_file_open_error_0010543c",
                "piVar2": "errorCodePtr",
                "pcVar3": "errorMessage",
                "uVar1": "fileHandle",
                "uVar4": "localizedErrorMessage",
                "unaff_RBP": "stackPointer"
            },
            "code": "\nvoid handleFileOpenError_0010543c(void)\n\n{\n  undefined8 fileHandle;\n  int *errorCodePtr;\n  char *errorMessage;\n  undefined8 localizedErrorMessage;\n  long stackPointer;\n  \n  errorCodePtr = __errno_location();\n  errorMessage = strerror(*errorCodePtr);\n  fileHandle = *(undefined8 *)(stackPointer + 0x10);\n  localizedErrorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(localizedErrorMessage,fileHandle,errorMessage);\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "fatal",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "section_add_load_file"
            ],
            "imported": false,
            "current_name": "handle_file_open_error_0010543c"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "generate_formatted_string_0010a424",
                "param_1": "baseAddress",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "checkFlag",
                "cVar1": "result",
                "bVar2": "byteVar",
                "iVar3": "loopVariable",
                "uVar4": "returnValue",
                "pcVar5": "stringVar1",
                "__ptr": "ptrArray",
                "uVar6": "tempVar",
                "__s": "stringVar2",
                "sVar7": "length1",
                "sVar8": "length2",
                "__s_00": "formattedString",
                "lVar9": "loopIndex",
                "bVar10": "tempFlag",
                "lVar11": "tempIndex",
                "uVar12": "uVar"
            },
            "code": "\nundefined4 generateFormattedString_0010a424(long baseAddress,char flag,int count,char checkFlag)\n\n{\n  char result;\n  byte byteVar;\n  int loopVariable;\n  undefined4 returnValue;\n  char *stringVar1;\n  undefined8 *ptrArray;\n  undefined8 tempVar;\n  char *stringVar2;\n  size_t length1;\n  size_t length2;\n  char *formattedString;\n  long loopIndex;\n  byte tempFlag;\n  long tempIndex;\n  undefined uVar;\n  \n  if ((flag == '\\0') && (result = stab_empty_type_lto_priv_0(), result == '\\0')) {\n    return 0;\n  }\n  tempFlag = *(byte *)(*(long *)(baseAddress + 0x60) + 0x1c);\n  stringVar1 = (char *)stab_pop_type(baseAddress);\n  if (count < 0) {\n    ptrArray = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    uVar = 1;\n    if (tempFlag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      loopVariable = count + 1;\n      ptrArray = (undefined8 *)xmalloc((long)loopVariable * 8);\n      loopIndex = (long)(count + -1);\n      do {\n        byteVar = 1;\n        if (tempFlag == 0) {\n          byteVar = *(byte *)(*(long *)(baseAddress + 0x60) + 0x1c);\n        }\n        tempVar = stab_pop_type(baseAddress);\n        tempFlag = byteVar & 1;\n        ptrArray[loopIndex] = tempVar;\n        loopIndex = loopIndex + -1;\n      } while ((int)loopIndex != -1);\n      if (checkFlag == '\\0') {\n        result = stab_empty_type_lto_priv_0(baseAddress);\n        if (result == '\\0') {\n          return 0;\n        }\n        byteVar = 1;\n        if (tempFlag == 0) {\n          byteVar = *(byte *)(*(long *)(baseAddress + 0x60) + 0x1c);\n        }\n        tempFlag = byteVar & 1;\n        tempVar = stab_pop_type(baseAddress);\n        ptrArray[(long)loopVariable + -1] = tempVar;\n        count = loopVariable;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArray = (undefined8 *)0x0;\n    if (checkFlag != '\\0') goto LAB_0010a582;\n    ptrArray = (undefined8 *)xmalloc(8);\n    result = stab_empty_type_lto_priv_0(baseAddress);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((tempFlag != 0) || (*(char *)(*(long *)(baseAddress + 0x60) + 0x1c) != '\\0')) {\n      tempVar = stab_pop_type(baseAddress);\n      count = 1;\n      uVar = 1;\n      *ptrArray = tempVar;\n      goto LAB_0010a596;\n    }\n    tempVar = stab_pop_type(baseAddress);\n    count = 1;\n    *ptrArray = tempVar;\n  }\n  uVar = *(undefined *)(*(long *)(baseAddress + 0x60) + 0x1c);\nLAB_0010a596:\n  stringVar2 = (char *)stab_pop_type(baseAddress);\n  length1 = strlen(stringVar1);\n  length2 = strlen(stringVar2);\n  loopIndex = length1 + 10 + length2;\n  for (tempIndex = 0; (int)tempIndex < count; tempIndex = tempIndex + 1) {\n    length1 = strlen((char *)ptrArray[tempIndex]);\n    loopIndex = loopIndex + length1;\n  }\n  formattedString = (char *)xmalloc(loopIndex);\n  sprintf(formattedString,\"#%s,%s\",stringVar1,stringVar2);\n  loopIndex = 0;\n  free(stringVar1);\n  free(stringVar2);\n  while( true ) {\n    length1 = strlen(formattedString);\n    if (count <= (int)loopIndex) break;\n    *(undefined2 *)(formattedString + length1) = 0x2c;\n    stringVar1 = (char *)ptrArray[loopIndex];\n    loopIndex = loopIndex + 1;\n    strcpy(formattedString + length1 + 1,stringVar1);\n    free(stringVar1);\n  }\n  *(undefined2 *)(formattedString + length1) = 0x3b;\n  free(ptrArray);\n  returnValue = stab_push_string(baseAddress,formattedString,0,uVar,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(formattedString);\n  return returnValue;\n}\n\n",
            "called": [
                "stab_empty_type.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "strcpy",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "versionNumber",
                "pcVar1": "licenseInfo"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 versionNumber)\n\n{\n  char *licenseInfo;\n  \n  printf(\"GNU %s %s\\n\",versionNumber,\"(GNU Binutils for Debian) 2.40\");\n  licenseInfo = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(licenseInfo);\n  licenseInfo = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(licenseInfo);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00104480": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "report",
                "display_info.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104480"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_key_value_pair_00114c80",
                "param_1": "inputString",
                "param_2": "defaultValue",
                "param_3": "errorMessage",
                "param_4": "additionalData",
                "pcVar1": "equalCharPosition",
                "uVar2": "keyValue",
                "auVar3": "resultObject"
            },
            "code": "\nundefined  [16] parseKeyValuePair_00114c80(char *inputString,undefined8 defaultValue,undefined8 errorMessage,undefined8 additionalData)\n\n{\n  char *equalCharPosition;\n  undefined8 keyValue;\n  undefined resultObject [16];\n  \n  equalCharPosition = strchr(inputString,0x3d);\n  if (equalCharPosition != (char *)0x0) {\n    resultObject._0_8_ = (undefined8 *)xmalloc(0x30);\n    keyValue = xstrndup(inputString,(long)equalCharPosition - (long)inputString);\n    resultObject._0_8_[2] = equalCharPosition + 1;\n    resultObject._0_8_[1] = keyValue;\n    resultObject._0_8_[4] = 0;\n    resultObject._0_8_[3] = 0;\n    *resultObject._0_8_ = defaultValue;\n    resultObject._8_8_ = additionalData;\n    return resultObject;\n  }\n  keyValue = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(keyValue,errorMessage);\n}\n\n",
            "called": [
                "strchr",
                "init_section_add.cold",
                "xstrndup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_key_value_pair_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "write_value_to_pointer_0010870e",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "ptrToPointer",
                "puVar1": "pointerValue"
            },
            "code": "\nvoid writeValueToPointer_0010870e(undefined8 destination,undefined8 value,long *ptrToPointer)\n\n{\n  undefined8 *pointerValue;\n  \n  pointerValue = (undefined8 *)*ptrToPointer;\n  *pointerValue = value;\n  *ptrToPointer = (long)(pointerValue + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "write_value_to_pointer_0010870e"
        },
        "FUN_001048a0": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001048a0"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_type_0010dac0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "lVar1": "result",
                "cVar2": "ch",
                "uVar3": "returnValue",
                "uVar4": "tmp",
                "lVar5": "finalResult",
                "uVar6": "tmp2",
                "plVar7": "ptrVar",
                "__ptr": "ptr",
                "__ptr_00": "ptr2",
                "bVar8": "byteVar",
                "iVar9": "intVar",
                "pcVar10": "charPtr",
                "uVar11": "ulongVar",
                "lVar12": "loopVar",
                "uVar13": "uintVar",
                "uVar14": "uintVar2",
                "uVar15": "tmp3",
                "local_68": "localArr",
                "local_48": "localChar",
                "local_47": "localByte"
            },
            "code": "\nlong parse_type_0010dac0(long arg1,long *arg2,long arg3,undefined8 arg4,uint arg5,\n                 long *arg6,char arg7,undefined8 arg8)\n\n{\n  long result;\n  char ch;\n  undefined4 returnValue;\n  undefined8 tmp;\n  long finalResult;\n  undefined8 tmp2;\n  long *ptrVar;\n  void *ptr;\n  void *ptr2;\n  byte byteVar;\n  int intVar;\n  char *charPtr;\n  ulong ulongVar;\n  long loopVar;\n  uint uintVar;\n  uint uintVar2;\n  undefined8 tmp3;\n  undefined localArr [32];\n  char localChar;\n  byte localByte;\n  \n  finalResult = *(long *)(arg1 + 0x110);\n  if ((~*(uint *)(finalResult + 0x38) & arg5) != 0) {\n    uintVar = (int)arg5 >> ((byte)*(undefined4 *)(finalResult + 0x44) & 0x1f);\n    ulongVar = (ulong)(arg5 & *(uint *)(finalResult + 0x40));\n    byteVar = (byte)*(undefined4 *)(finalResult + 0x3c);\n    uintVar = (uintVar ^ arg5) & *(uint *)(finalResult + 0x38) ^ uintVar;\n    if (ulongVar == 1L << (byteVar & 0x3f)) {\n      tmp = parse_type_0010dac0(arg1,arg2,arg3,arg4,uintVar,arg6,arg7,arg8);\n      finalResult = debug_make_pointer_type_isra_0(tmp);\n      return finalResult;\n    }\n    if (ulongVar != 2L << (byteVar & 0x3f)) {\n      if (ulongVar != 3L << (byteVar & 0x3f)) {\n        tmp = dcgettext(0,\"parse_coff_type: Bad type code 0x%x\",5,*(undefined4 *)(finalResult + 0x3c),\n                          uintVar);\n        non_fatal(tmp,arg5);\n        return 0;\n      }\n      uintVar2 = 0;\n      if (arg6 != (long *)0x0) {\n        uintVar2 = (uint)*(ushort *)(arg6 + 2);\n        ptrVar = arg6 + 2;\n        for (intVar = 0; (*(short *)ptrVar != 0 && (intVar != 3)); intVar = intVar + 1) {\n          *(short *)ptrVar = *(short *)((long)ptrVar + 2);\n          ptrVar = (long *)((long)ptrVar + 2);\n        }\n        *(short *)ptrVar = 0;\n      }\n      tmp3 = 0;\n      tmp = arg8;\n      tmp2 = parse_type_0010dac0(arg1,arg2,arg3,arg4,uintVar,arg6,0);\n      finalResult = *(long *)(arg3 + 0x28);\n      if (finalResult == 0) {\n        tmp = debug_make_int_type_isra_0(4,0,tmp3,tmp);\n        finalResult = debug_name_type(arg8,\"int\",tmp);\n        *(long *)(arg3 + 0x28) = finalResult;\n      }\n      finalResult = debug_make_array_type_isra_0(tmp2,finalResult,0,(long)(int)(uintVar2 - 1),0);\n      return finalResult;\n    }\n    tmp = parse_type_0010dac0(arg1,arg2,arg3,arg4,uintVar,arg6,arg7,arg8);\n    finalResult = debug_make_function_type_isra_0(tmp,0,0);\n    return finalResult;\n  }\n  if ((arg6 != (long *)0x0) && (0 < *arg6)) {\n    ptrVar = (long *)coff_get_slot_lto_priv_0(arg3);\n    if (*ptrVar != 0) {\n      return *ptrVar;\n    }\n    finalResult = debug_make_indirect_type_isra_0(ptrVar,0);\n    return finalResult;\n  }\n  if (arg7 == '\\0') {\n    arg6 = (long *)0x0;\n  }\n  if (0x10 < arg5) {\n    finalResult = debug_make_void_type_isra_0();\n    return finalResult;\n  }\n  finalResult = *(long *)(arg3 + 8 + (long)(int)arg5 * 8);\n  if (finalResult != 0) {\n    return finalResult;\n  }\n  switch(arg5) {\n  default:\n    tmp = debug_make_void_type_isra_0();\n    charPtr = \"void\";\n    break;\n  case 2:\n    tmp = debug_make_int_type_isra_0(1,0);\n    charPtr = \"char\";\n    break;\n  case 3:\n    tmp = debug_make_int_type_isra_0(2,0);\n    charPtr = \"short\";\n    break;\n  case 4:\n    tmp = debug_make_int_type_isra_0(4,0);\n    charPtr = \"int\";\n    break;\n  case 5:\n    tmp = debug_make_int_type_isra_0(4,0);\n    charPtr = \"long\";\n    break;\n  case 6:\n    tmp = debug_make_float_type_isra_0(4);\n    charPtr = \"float\";\n    break;\n  case 7:\n    tmp = debug_make_float_type_isra_0(8);\n    charPtr = \"double\";\n    break;\n  case 8:\n    if (arg6 == (long *)0x0) {\n      finalResult = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    tmp = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (arg6 == (long *)0x0) {\n      finalResult = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    tmp = 9;\nLAB_0010de7a:\n    finalResult = parse_coff_struct_type(arg1,arg2,arg3,tmp,arg6,arg8);\nLAB_0010e046:\n    ptrVar = (long *)coff_get_slot_lto_priv_0(arg3,arg4);\n    *ptrVar = finalResult;\n    return finalResult;\n  case 10:\n    if (arg6 == (long *)0x0) {\n      finalResult = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      finalResult = arg6[3];\n      ptr = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      loopVar = 0;\n      do {\n        while( true ) {\n          if ((finalResult <= arg2[3]) || (arg2[1] <= arg2[2])) goto LAB_0010e032;\n          intVar = (int)loopVar;\n          result = *(long *)(*arg2 + arg2[2] * 8);\n          ch = bfd_coff_get_syment(arg1,result,localArr);\n          loopVar = (long)intVar;\n          if (ch == '\\0') {\n            returnValue = bfd_get_error();\n            tmp = bfd_errmsg(returnValue);\n            tmp2 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(tmp2,tmp);\n            free(ptr);\n            free(ptr2);\n            finalResult = 0;\n            goto LAB_0010e046;\n          }\n          arg2[2] = arg2[2] + 1;\n          arg2[3] = (ulong)localByte + 1 + arg2[3];\n          if (localChar != '\\x10') break;\n          if ((int)arg5 <= intVar + 1) {\n            arg5 = arg5 + 10;\n            ptr = (void *)xrealloc(ptr);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)arg5 << 3);\n          }\n          loopVar = *(long *)(result + 0x20);\n          *(undefined8 *)((long)ptr + (long)intVar * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)ptr2 + (long)intVar * 8) =\n               *(long *)(result + 0x10) + *(long *)(loopVar + 0x30);\n          loopVar = (long)(intVar + 1);\n        }\n      } while (localChar != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr + loopVar * 8) = 0;\n      finalResult = debug_make_enum_type_isra_0(ptr,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    finalResult = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    tmp = debug_make_int_type_isra_0(1,1);\n    charPtr = \"unsigned char\";\n    break;\n  case 0xd:\n    tmp = debug_make_int_type_isra_0(2,1);\n    charPtr = \"unsigned short\";\n    break;\n  case 0xe:\n    tmp = debug_make_int_type_isra_0(4,1);\n    charPtr = \"unsigned int\";\n    break;\n  case 0xf:\n    tmp = debug_make_int_type_isra_0(4,1);\n    charPtr = \"unsigned long\";\n    break;\n  case 0x10:\n    tmp = debug_make_float_type_isra_0(0xc);\n    charPtr = \"long double\";\n  }\n  finalResult = debug_name_type(arg8,charPtr,tmp);\nLAB_0010e065:\n  *(long *)(arg3 + 8 + (long)(int)arg5 * 8) = finalResult;\n  return finalResult;\n}\n\n",
            "called": [
                "debug_make_void_type.isra.0",
                "debug_make_struct_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "bfd_coff_get_syment",
                "dcgettext",
                "xmalloc",
                "debug_make_enum_type.isra.0",
                "coff_get_slot.lto_priv.0",
                "debug_make_array_type.isra.0",
                "bfd_get_error",
                "bfd_errmsg",
                "non_fatal",
                "parse_coff_struct_type",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "free",
                "debug_make_float_type.isra.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_compare_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "__n": "length",
                "extraout_var": "unusedVariable",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] stringCompare_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  size_t length;\n  undefined4 unusedVariable;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(unusedVariable,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "handle_remove_section_option",
                "FUN_00107880",
                "main",
                "skip_section",
                "stab_demangle_function_name.constprop.0",
                "FUN_0010554f",
                "convert_efi_target",
                "is_dwo_section.constprop.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "string_compare_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_time_error_message_0010882c",
                "piVar1": "errorCodePtr",
                "uVar2": "errorMessage",
                "__errno_location": "__getErrorCodeLocation",
                "strerror": "getErrorDescription",
                "dcgettext": "translateErrorMessage",
                "non_fatal": "handleNonFatalError"
            },
            "code": "\nvoid printTimeErrorMessage_0010882c(void)\n\n{\n  int *errorCodePtr;\n  undefined8 errorMessage;\n  \n  errorCodePtr = __getErrorCodeLocation();\n  getErrorDescription(*errorCodePtr);\n  errorMessage = translateErrorMessage(0,\"%s: cannot set time: %s\",5);\n  handleNonFatalError(errorMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "print_time_error_message_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "write_symbol_to_file_0010ebb0",
                "param_1": "fileHandle",
                "param_2": "symbolName",
                "param_3": "symbolType",
                "param_4": "fileOffset",
                "__s": "typeBuffer",
                "cVar1": "typeChar",
                "uVar2": "symbolIndex",
                "uVar3": "status",
                "sVar4": "symbolNameLength",
                "sVar5": "typeBufferLength",
                "__s_00": "newSymbol",
                "CSWTCH_42": "switchTable_42",
                "CSWTCH_43": "switchTable_43"
            },
            "code": "\nundefined4 writeSymbolToFile_0010ebb0(undefined8 fileHandle,char *symbolName,int symbolType,undefined8 fileOffset)\n\n{\n  char typeChar;\n  uint symbolIndex;\n  undefined4 status;\n  char *typeBuffer;\n  size_t symbolNameLength;\n  size_t typeBufferLength;\n  char *newSymbol;\n  \n  typeBuffer = (char *)stab_pop_type();\n  symbolIndex = symbolType - 1;\n  if (symbolIndex < 4) {\n    status = *(undefined4 *)(switchTable_42 + (ulong)symbolIndex * 4);\n    typeChar = *(char *)((long)&switchTable_43 + (ulong)symbolIndex);\n    symbolNameLength = strlen(symbolName);\n    typeBufferLength = strlen(typeBuffer);\n    newSymbol = (char *)xmalloc(symbolNameLength + 3 + typeBufferLength);\n    sprintf(newSymbol,\"%s:%c%s\",symbolName,(ulong)(uint)(int)typeChar,typeBuffer);\n    free(typeBuffer);\n    status = stab_write_symbol_lto_priv_0(fileHandle,status,0,fileOffset,newSymbol);\n    if ((char)status != '\\0') {\n      free(newSymbol);\n    }\n    return status;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_file_0010ebb0"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_type_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "type",
                "plVar2": "typeData"
            },
            "code": "\nlong createType_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long type;\n  long *typeData;\n  \n  if ((input1 != 0) && (type = debug_make_type_constprop_0(0x13,0), type != 0)) {\n    typeData = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)typeData + 0x19) = 0;\n    *typeData = input1;\n    *(undefined4 *)((long)typeData + 0x1c) = 0;\n    typeData[1] = input2;\n    typeData[2] = input3;\n    *(undefined *)(typeData + 3) = input4;\n    *(long **)(type + 0x10) = typeData;\n    return type;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_type_00113b98"
        },
        "FUN_00104120": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104120"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_symbol_existence_00115d70",
                "param_1": "symbol",
                "param_2": "symbol_table",
                "lVar1": "symbol_entry",
                "local_18": "symbol_found",
                "local_10": "symbol_exists"
            },
            "code": "\nundefined check_symbol_existence_00115d70(undefined8 symbol,undefined8 symbol_table)\n\n{\n  long symbol_entry;\n  undefined8 symbol_found;\n  undefined symbol_exists;\n  \n  if (wildcard == '\\0') {\n    symbol_entry = htab_find(symbol_table,symbol);\n    symbol_exists = symbol_entry != 0;\n  }\n  else {\n    symbol_exists = 0;\n    symbol_found = symbol;\n    htab_traverse(symbol_table,is_specified_symbol_predicate,&symbol_found);\n  }\n  return symbol_exists;\n}\n\n",
            "called": [
                "is_specified_symbol_predicate",
                "htab_find",
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "copy_relocations_in_section.cold",
                "FUN_0010554f",
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_symbol_existence_00115d70"
        },
        "FUN_00104000": {
            "renaming": {
                "FUN_00104000": "start_monitoring_00104000",
                "ctx": "context",
                "iVar1": "monitoringResult"
            },
            "code": "\nint startMonitoring_00104000(EVP_PKEY_CTX *context)\n\n{\n  int monitoringResult;\n  \n  monitoringResult = __gmon_start__();\n  return monitoringResult;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "start_monitoring_00104000"
        },
        "FUN_00104360": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104360"
        },
        "FUN_00128430": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcat@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128430",
            "calling": [
                "strcat"
            ],
            "imported": false,
            "current_name": "FUN_00128430"
        },
        "FUN_00104240": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "bfd_nonfatal.cold",
                "FUN_00114dc7",
                "display_info.isra.0",
                "stab_demangle_v3_arg",
                "set_times.cold",
                "copy_object.cold",
                "debug_get_real_type.isra.0",
                "FUN_001152b6",
                "debug_record_variable",
                "list_supported_targets",
                "debug_name_type",
                "section_add_load_file.cold",
                "list_matching_formats",
                "stab_typdef.lto_priv.0",
                "parse_number",
                "copy_section.cold",
                "setup_section.cold",
                "main",
                "debug_end_function",
                "copy_relocations_in_section",
                "FUN_001086af",
                "stab_int_type.lto_priv.0",
                "warn_stab",
                "FUN_00105828",
                "bfd_nonfatal_message",
                "FUN_00107976",
                "print_version",
                "debug_write_type.constprop.0",
                "FUN_0010554f",
                "add_redefine_and_check",
                "debug_find_named_type",
                "copy_file",
                "find_section_list",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "FUN_00116490",
                "stab_demangle_v3_arglist",
                "debug_add_to_current_namespace.constprop.0",
                "get_file_size",
                "stab_find_type",
                "debug_tag_type",
                "stab_context",
                "FUN_00104cc1",
                "coff_get_slot.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "copy_object",
                "stab_struct_field.lto_priv.0",
                "is_strip_section_1.isra.0.cold",
                "add_specific_symbols",
                "finish_stab",
                "parse_stab_type",
                "setup_section",
                "debug_record_parameter",
                "FUN_0010808f",
                "endian_string",
                "check_new_section_flags.cold",
                "copy_usage",
                "get_file_size.cold",
                "debug_end_block",
                "stab_write_symbol.lto_priv.0",
                "smart_rename.cold",
                "merge_gnu_build_notes",
                "bad_stab",
                "parse_flags.cold",
                "do_display_target",
                "parse_vma.cold",
                "create_new_symbol.cold",
                "stab_bad_demangle",
                "debug_start_block",
                "FUN_00108179",
                "FUN_00104ea2",
                "FUN_00107880",
                "strip_usage",
                "init_section_add.cold",
                "debug_record_line",
                "debug_start_source",
                "stab_find_slot",
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104240"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "dataStruct",
                "param_2": "value",
                "param_3": "flag",
                "uVar1": "reallocResult",
                "puVar2": "newDataPtr",
                "uVar3": "currentItemCount"
            },
            "code": "\nundefined8 expandAndStoreData_00109be3(long dataStruct,undefined8 value,undefined4 flag)\n\n{\n  undefined8 reallocResult;\n  undefined8 *newDataPtr;\n  uint currentItemCount;\n  \n  if (*(uint *)(dataStruct + 0x2c) <= *(uint *)(dataStruct + 0x28)) {\n    currentItemCount = *(uint *)(dataStruct + 0x2c) + 10;\n    *(uint *)(dataStruct + 0x2c) = currentItemCount;\n    reallocResult = xrealloc(*(undefined8 *)(dataStruct + 0x20),(ulong)currentItemCount << 4);\n    *(undefined8 *)(dataStruct + 0x20) = reallocResult;\n  }\n  currentItemCount = *(uint *)(dataStruct + 0x28);\n  newDataPtr = (undefined8 *)((ulong)currentItemCount * 0x10 + *(long *)(dataStruct + 0x20));\n  *newDataPtr = value;\n  *(undefined4 *)(newDataPtr + 1) = flag;\n  *(uint *)(dataStruct + 0x28) = currentItemCount + 1;\n  return CONCAT71((int7)((ulong)newDataPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "stab_demangle_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "expand_and_store_data_00109be3"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "newString"
            },
            "code": "\nvoid copyString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *newString;\n  \n  stringLength = strnlen(inputString,maxLength);\n  newString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)newString + stringLength) = 0;\n  memcpy(newString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "memcpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "init_section_add",
                "main"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "write_symbol_with_context_0010e918",
                "param_1": "param",
                "param_2": "context",
                "param_3": "value",
                "uVar1": "result",
                "__s": "data",
                "sVar2": "context_size",
                "sVar3": "data_size",
                "__s_00": "formatted_data"
            },
            "code": "\nundefined4 write_symbol_with_context_0010e918(undefined8 param,char *context,undefined8 value)\n\n{\n  undefined4 result;\n  char *data;\n  size_t context_size;\n  size_t data_size;\n  char *formatted_data;\n  \n  data = (char *)stab_pop_type();\n  context_size = strlen(context);\n  data_size = strlen(data);\n  formatted_data = (char *)xmalloc(context_size + 0x14 + data_size);\n  sprintf(formatted_data,\"%s:c=e%s,%ld\",context,data,value);\n  free(data);\n  result = stab_write_symbol_lto_priv_0(param,0x80,0,0,formatted_data);\n  if ((char)result != '\\0') {\n    free(formatted_data);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_context_0010e918"
        },
        "FUN_00128218": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128218",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00128218"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_section_00116110",
                "param_1": "input_bfd_handle",
                "param_2": "section_header",
                "param_3": "output_bfd_handle",
                "uVar1": "temp_byte",
                "uVar2": "temp_handle",
                "lVar3": "section_offset",
                "iVar4": "copy_width",
                "iVar5": "copy_byte",
                "cVar6": "status",
                "uVar7": "error_message",
                "__ptr": "buffer_ptr",
                "lVar8": "buffer_offset",
                "uVar9": "loop_counter",
                "iVar10": "loop_size",
                "uVar11": "section_size",
                "puVar12": "temp_ptr",
                "lVar13": "section_list_offset",
                "puVar14": "buffer_ptr_2",
                "puVar15": "buffer_ptr_3",
                "pvVar16": "output_buffer_ptr",
                "uVar17": "temp_offset",
                "uVar18": "reverse_bytes",
                "uVar19": "temp_size",
                "bVar20": "is_odd_length",
                "local_38": "section_length",
                "local_30": "input_buffer"
            },
            "code": "\nvoid reverseSection_00116110(undefined8 input_bfd_handle,undefined8 *section_header,undefined8 output_bfd_handle)\n\n{\n  undefined temp_byte;\n  undefined8 temp_handle;\n  long section_offset;\n  int copy_width;\n  int copy_byte;\n  char status;\n  undefined8 error_message;\n  undefined8 *buffer_ptr;\n  long buffer_offset;\n  ulong loop_counter;\n  int loop_size;\n  ulong section_size;\n  undefined *temp_ptr;\n  long section_list_offset;\n  undefined8 *buffer_ptr_2;\n  undefined8 *buffer_ptr_3;\n  void *output_buffer_ptr;\n  ulong temp_offset;\n  ulong reverse_bytes;\n  ulong temp_size;\n  byte is_odd_length;\n  ulong section_length;\n  void *input_buffer;\n  \n  is_odd_length = 0;\n  status = skip_section(input_bfd_handle,section_header,1);\n  if (status != '\\0') {\n    return;\n  }\n  section_length = section_header[8];\n  section_offset = section_header[0xc];\n  if (((*(byte *)((long)section_header + 0x25) & 1) == 0) || ((*(byte *)(section_offset + 0x25) & 1) == 0)) {\n    section_list_offset = find_section_list(*section_header,0,0x80);\n    if (section_list_offset == 0) {\n      return;\n    }\n    if ((*(byte *)(section_list_offset + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer_ptr = (undefined8 *)xmalloc(section_length);\n    buffer_ptr_3 = buffer_ptr;\n    if (7 < section_length) {\n      for (reverse_bytes = section_length >> 3; reverse_bytes != 0; reverse_bytes = reverse_bytes - 1) {\n        *buffer_ptr_3 = 0;\n        buffer_ptr_3 = buffer_ptr_3 + (ulong)is_odd_length * -2 + 1;\n      }\n    }\n    buffer_ptr_2 = buffer_ptr_3;\n    if ((section_length & 4) != 0) {\n      buffer_ptr_2 = (undefined8 *)((long)buffer_ptr_3 + (ulong)is_odd_length * -8 + 4);\n      *(undefined4 *)buffer_ptr_3 = 0;\n    }\n    buffer_ptr_3 = buffer_ptr_2;\n    if ((section_length & 2) != 0) {\n      buffer_ptr_3 = (undefined8 *)((long)buffer_ptr_2 + (ulong)is_odd_length * -4 + 2);\n      *(undefined2 *)buffer_ptr_2 = 0;\n    }\n    if ((section_length & 1) != 0) {\n      *(undefined *)buffer_ptr_3 = 0;\n    }\n    status = bfd_set_section_contents(output_bfd_handle,section_offset,buffer_ptr,0);\n    if (status != '\\0') {\n      free(buffer_ptr);\n      return;\n    }\n    status = 1;\n    bfd_nonfatal_message(0,output_bfd_handle,section_offset,0);\n    free(buffer_ptr);\n    return;\n  }\n  input_buffer = (void *)0x0;\n  status = bfd_get_full_section_contents(input_bfd_handle,section_header,&input_buffer);\n  if ((status == '\\0') ||\n     (status = bfd_convert_section_contents(input_bfd_handle,section_header,output_bfd_handle,&input_buffer,&section_length),\n     loop_size = reverse_bytes, status == '\\0')) {\n    bfd_set_section_size(section_offset,0);\n    status = 1;\n    bfd_nonfatal_message(0,input_bfd_handle,section_header,0);\n    free(input_buffer);\n    return;\n  }\n  copy_width = copy_width;\n  copy_byte = copy_byte;\n  if (reverse_bytes != 0) {\n    reverse_bytes = (ulong)reverse_bytes;\n    if (section_length % reverse_bytes != 0) {\n      temp_handle = *section_header;\n      error_message = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      fatal(error_message,temp_handle,loop_size);\n    }\n    loop_size = reverse_bytes / 2;\n    section_size = 0;\n    while (temp_size = section_size, copy_width = copy_width, copy_byte = copy_byte, temp_size < section_length) {\n      section_size = reverse_bytes + temp_size;\n      temp_offset = section_size;\n      for (loop_counter = 0; loop_counter < (ulong)(long)loop_size; loop_counter = loop_counter + 1) {\n        temp_offset = temp_offset - 1;\n        temp_ptr = (undefined *)(temp_size + loop_counter + (long)input_buffer);\n        temp_byte = *temp_ptr;\n        *temp_ptr = *(undefined *)((long)input_buffer + temp_offset);\n        *(undefined *)((long)input_buffer + temp_offset) = temp_byte;\n      }\n    }\n  }\n  copy_width = copy_width;\n  copy_byte = copy_byte;\n  if (-1 < copy_byte) {\n    reverse_bytes = (ulong)interleave;\n    loop_size = (int)((ulong)section_header[7] % reverse_bytes);\n    section_size = ((long)copy_byte - (long)loop_size) + (long)input_buffer;\n    if (copy_byte < loop_size) {\n      section_size = section_size + reverse_bytes;\n    }\n    section_list_offset = (section_length + (long)input_buffer) - section_size;\n    output_buffer_ptr = input_buffer;\n    for (; section_size < section_length + (long)input_buffer; section_size = section_size + reverse_bytes) {\n      for (buffer_offset = 0; ((int)buffer_offset < copy_width && (buffer_offset != section_list_offset)); buffer_offset = buffer_offset + 1) {\n        *(undefined *)((long)output_buffer_ptr + buffer_offset) = *(undefined *)(section_size + buffer_offset);\n      }\n      output_buffer_ptr = (void *)((long)output_buffer_ptr + buffer_offset);\n      section_list_offset = section_list_offset - reverse_bytes;\n    }\n    section_length = ((((reverse_bytes - 1) + section_length) - (long)copy_byte) / reverse_bytes) * (long)copy_width;\n    reverse_bytes = *(ulong *)(section_offset + 0x38) / reverse_bytes;\n    *(ulong *)(section_offset + 0x38) = reverse_bytes;\n    if (copy_byte < loop_size) {\n      *(ulong *)(section_offset + 0x38) = reverse_bytes + 1;\n      status = bfd_set_section_contents(output_bfd_handle,section_offset,input_buffer,0,section_length);\n      if (status == '\\0') {\n        cleanup_function_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  status = bfd_set_section_contents(output_bfd_handle,section_offset,input_buffer,0,section_length);\n  if (status == '\\0') {\n    cleanup_function_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(input_buffer);\n  return;\n}\n\n",
            "called": [
                "FUN_00108466",
                "bfd_set_section_size",
                "copy_section.cold",
                "bfd_nonfatal_message",
                "find_section_list",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "skip_section",
                "xmalloc",
                "free",
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_section_00116110"
        },
        "FUN_00104490": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104490"
        },
        "FUN_00104370": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "copy_relocations_in_section",
                "do_display_target",
                "bfd_nonfatal_message",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0",
                "bfd_nonfatal",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104370"
        },
        "FUN_001048b0": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001048b0"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = getErrorMessage(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorFlag != 0) {\n    printFormatted(standardError,\"%s: %s: %s\\n\",programName);\n    return;\n  }\n  printFormatted(standardError,\"%s: %s\\n\",programName,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "close_debug_block_0010bf20",
                "param_1": "debugBlock",
                "param_2": "newBlock",
                "param_3": "unusedParam",
                "param_4": "returnValue",
                "lVar1": "currentBlock",
                "uVar2": "errorMessage",
                "pcVar3": "errorString",
                "auVar4": "result"
            },
            "code": "\n\n\nundefined  [16] closeDebugBlock_0010bf20(long debugBlock,undefined8 newBlock,undefined8 unusedParam,undefined8 returnValue)\n\n{\n  long currentBlock;\n  undefined8 errorMessage;\n  char *errorString;\n  undefined result [16];\n  \n  if ((*(long *)(debugBlock + 8) == 0) || (currentBlock = *(long *)(debugBlock + 0x20), currentBlock == 0)) {\n    errorString = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = newBlock;\n      errorMessage = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(debugBlock + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorString = \"debug_end_block: attempt to close top level block\";\n  }\n  errorMessage = dcgettext(0,errorString,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010bf84:\n  result._8_8_ = returnValue;\n  result._0_8_ = errorMessage;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "close_debug_block_0010bf20"
        },
        "FUN_00104250": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "FUN_00104250"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "FUNC_0010c95e"
            },
            "code": "\nundefined8 FUNC_0010c95e(undefined8 *param_1,byte **param_2,long *param_3)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  char cVar7;\n  uint uVar8;\n  byte *pbVar9;\n  long lVar10;\n  undefined8 uVar11;\n  char *pcVar12;\n  size_t sVar13;\n  ulong uVar14;\n  void *__ptr;\n  long lVar15;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **ppcVar18;\n  char *pcVar19;\n  byte *pbVar20;\n  undefined local_49;\n  ulong local_48;\n  char *local_40 [2];\n  \n  while( true ) {\n    pbVar20 = *param_2;\n    bVar1 = *pbVar20;\n    if ('T' < (char)bVar1) break;\n    if ((char)bVar1 < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(bVar1) {\n    case 0x41:\n      lVar15 = 0;\n      pbVar3 = pbVar20;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      lVar15 = debug_make_const_type_isra_0(*param_3);\n      *param_3 = lVar15;\n      return 1;\n    case 0x46:\n      *param_2 = pbVar20 + 1;\n      if (param_3 == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        ppcVar18 = (char **)0x0;\n      }\n      else {\n        puVar16 = &local_48;\n        ppcVar18 = local_40;\n      }\n      cVar7 = stab_demangle_args(param_1,param_2,ppcVar18,puVar16);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n        cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        lVar15 = debug_make_function_type_isra_0(*param_3,local_40[0],local_48 & 0xff);\n        *param_3 = lVar15;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *param_2 = pbVar20 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      local_49 = 0;\n      local_40[0] = (char *)0x0;\n      local_48 = 0;\n      *param_2 = pbVar20 + 1;\n      if (((&_sch_istable)[(ulong)pbVar20[1] * 2] & 4) == 0) {\n        if (pbVar20[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        ppcVar18 = local_40;\n        if (param_3 == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        cVar7 = stab_demangle_qualified(param_1,param_2,ppcVar18);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uVar8 = stab_demangle_count(param_2);\n        pbVar3 = *param_2;\n        sVar13 = strlen((char *)pbVar3);\n        if (sVar13 < uVar8) goto switchD_0010cdf9_caseD_60;\n        *param_2 = pbVar3 + uVar8;\n        if ((param_3 != (long *)0x0) &&\n           (local_40[0] = (char *)stab_find_tagged_type(*param_1,param_1[1],pbVar3,uVar8,9),\n           local_40[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      bVar2 = **param_2;\n      if (bVar1 == 0x4d) {\n        if ((bVar2 == 0x43) || (bVar2 == 0x56)) {\n          *param_2 = *param_2 + 1;\n        }\n        if (**param_2 != 0x46) goto switchD_0010cdf9_caseD_60;\n        *param_2 = *param_2 + 1;\n        if (param_3 == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &local_49;\n          puVar16 = &local_48;\n        }\n        cVar7 = stab_demangle_args(param_1,param_2,puVar16,puVar17);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n        cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        if (bVar1 != 0x4d) {\n          lVar15 = debug_make_offset_type_isra_0(local_40[0],*param_3);\n          *param_3 = lVar15;\n          return 1;\n        }\n        lVar15 = debug_make_method_type_isra_0(*param_3,local_40[0],local_48,local_49);\n        *param_3 = lVar15;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      uVar11 = stab_demangle_qualified(param_1,param_2,param_3);\n      return uVar11;\n    case 0x52:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      lVar15 = debug_make_reference_type_isra_0(*param_3);\n      *param_3 = lVar15;\n      return 1;\n    case 0x54:\n      *param_2 = pbVar20 + 1;\n      cVar7 = stab_demangle_get_count(param_2,&local_48);\n      if (cVar7 != '\\0') {\n        if ((uint)local_48 < *(uint *)(param_1 + 5)) {\n          local_40[0] = *(char **)((local_48 & 0xffffffff) * 0x10 + param_1[4]);\n          cVar7 = FUNC_0010c95e(param_1,local_40,param_3);\n          if (cVar7 == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (bVar1 == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *param_2 = pbVar20 + 1;\n    cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n    if (cVar7 == '\\0') {\n      return 0;\n    }\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    lVar15 = debug_make_pointer_type_isra_0(*param_3);\n    *param_3 = lVar15;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bVar6 = false;\n  bVar4 = false;\n  cVar7 = '\\0';\n  bVar5 = false;\n  do {\n    pbVar3 = *param_2;\n    bVar1 = *pbVar3;\n    if (bVar1 == 0x55) {\n      cVar7 = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)bVar1) {\n      if (bVar1 == 0x56) {\n        bVar6 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)bVar1) goto switchD_0010cdf9_caseD_60;\n      if ((char)bVar1 < '_') goto LAB_0010cdfb;\n      switch(bVar1) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (param_3 == (long *)0x0) {\nLAB_0010d0aa:\n          *param_2 = pbVar3 + 1;\n          return 1;\n        }\n        lVar15 = debug_find_named_type(*param_1,&DAT_00120436);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_type_constprop_0(6,4);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned char\";\n        if ((cVar7 == '\\0') && (pcVar19 = \"char\", bVar4)) {\n          pcVar19 = \"signed char\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(1,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,\"float\");\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_float_type_isra_0(4);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned int\";\n        pcVar12 = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long unsigned int\";\n        pcVar12 = \"long int\";\nLAB_0010ced2:\n        if (cVar7 == '\\0') {\n          pcVar19 = pcVar12;\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(4,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        pcVar19 = \"long double\";\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_float_type_isra_0(8);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"short unsigned int\";\n        if (cVar7 == '\\0') {\n          pcVar19 = \"short int\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(2,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        ppcVar18 = local_40;\n        if (param_3 == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        cVar7 = stab_demangle_template(param_1,param_2,ppcVar18);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        sVar13 = strlen(local_40[0]);\n        lVar15 = stab_find_tagged_type(*param_1,param_1[1],local_40[0],sVar13 & 0xffffffff,9);\n        *param_3 = lVar15;\n        free(local_40[0]);\n        lVar15 = *param_3;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,&DAT_00120495);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_void_type_isra_0();\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,\"__wchar_t\");\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(2,1);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long long unsigned int\";\n        if (cVar7 == '\\0') {\n          pcVar19 = \"long long int\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(8,cVar7);\n          *param_3 = lVar15;\n        }\n      }\n      *param_2 = *param_2 + 1;\n      goto LAB_0010d1de;\n    }\n    if (bVar1 == 0x43) {\n      bVar5 = true;\n      goto LAB_0010cd84;\n    }\n    if (bVar1 != 0x53) goto LAB_0010cdc5;\n    bVar4 = true;\nLAB_0010cd84:\n    *param_2 = pbVar3 + 1;\n  } while( true );\nLAB_0010ca26:\n  pbVar9 = pbVar3 + 1;\n  *param_2 = pbVar9;\n  bVar1 = *pbVar9;\n  if (bVar1 == 0) goto switchD_0010cdf9_caseD_60;\n  if (bVar1 == 0x5f) {\n    *param_2 = pbVar3 + 2;\n    cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n    if (cVar7 == '\\0') {\n      return 0;\n    }\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    lVar10 = debug_find_named_type(*param_1,\"int\");\n    if (lVar10 == 0) {\n      lVar10 = debug_make_int_type_isra_0(4,0);\n    }\n    lVar15 = debug_make_array_type_isra_0(*param_3,lVar10,0,lVar15,0);\n    *param_3 = lVar15;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)bVar1 * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  lVar15 = lVar15 * 10 + (long)((char)bVar1 + -0x30);\n  pbVar3 = pbVar9;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)bVar1 < ':') {\n    if ((char)bVar1 < '0') {\n      if (bVar1 != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      stab_bad_demangle(pbVar20);\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((bVar1 != 0x47) || (*param_2 = pbVar3 + 1, ((&_sch_istable)[(ulong)pbVar3[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pbVar20 = *param_2;\n  uVar8 = stab_demangle_count(param_2);\n  pbVar3 = *param_2;\n  sVar13 = strlen((char *)pbVar3);\n  uVar14 = (ulong)uVar8;\n  if (uVar14 <= sVar13) {\n    *param_2 = pbVar3 + uVar14;\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    __ptr = (void *)savestring(pbVar3,uVar14);\n    lVar15 = debug_find_named_type(*param_1,__ptr);\n    *param_3 = lVar15;\n    free(__ptr);\n    if (*param_3 == 0) {\n      lVar15 = stab_find_tagged_type(*param_1,param_1[1],pbVar3,(int)*param_2 - (int)pbVar3,0);\n      *param_3 = lVar15;\njoined_r0x0010d1d8:\n      if (lVar15 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bVar5) {\n      lVar15 = debug_make_const_type_isra_0(*param_3);\n      *param_3 = lVar15;\n    }\n    if (bVar6) {\n      lVar15 = debug_make_volatile_type_isra_0(*param_3);\n      *param_3 = lVar15;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  stab_bad_demangle(pbVar20);\n  return 0;\n}\n\n",
            "called": [
                "debug_find_named_type",
                "debug_make_void_type.isra.0",
                "stab_demangle_get_count",
                "debug_make_method_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "savestring",
                "strlen",
                "stab_demangle_args",
                "debug_make_reference_type.isra.0",
                "stab_demangle_type.lto_priv.0",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "stab_demangle_count",
                "stab_bad_demangle",
                "debug_make_type.constprop.0",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "stab_find_tagged_type",
                "stab_demangle_qualified",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "free",
                "debug_make_float_type.isra.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010c95e",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_template",
                "stab_demangle_arg"
            ],
            "imported": false,
            "current_name": "FUNC_0010c95e"
        },
        "FUN_00104130": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00114dc7",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104130"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = improved_code_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_section_size",
                "find_section_list",
                "bfd_get_arch",
                "bfd_get_full_section_contents",
                "copy_object.cold",
                "fwrite",
                "non_fatal",
                "fopen",
                "bfd_set_format",
                "check_new_section_flags",
                "free",
                "setup_section",
                "strerror",
                "merge_gnu_build_notes",
                "dcgettext",
                "bfd_get_section_by_name",
                "bfd_malloc_and_get_section",
                "xmalloc",
                "bfd_create_gnu_debuglink_section",
                "FUN_00105828",
                "__errno_location",
                "bfd_nonfatal_message",
                "startswith.lto_priv.0.lto_priv.0",
                "bfd_map_over_sections",
                "fclose",
                "FUN_0010554f",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_modification_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoPointer",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMessage",
                "local_38": "accessTime",
                "local_28": "modificationTime"
            },
            "code": "\nvoid setFileModificationTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoPointer;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  undefined4 accessTime;\n  undefined4 uStack_34;\n  undefined4 uStack_30;\n  undefined4 uStack_2c;\n  undefined4 modificationTime;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  modificationTime = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  uStack_34 = *(undefined4 *)(fileInfo + 0x4c);\n  uStack_30 = *(undefined4 *)(fileInfo + 0x50);\n  uStack_2c = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errnoPointer = __errno_location();\n    errorMessage = strerror(*errnoPointer);\n    translatedMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(translatedMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "set_file_modification_time_0011a350"
        },
        "FUN_00128448": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128448",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00128448"
        },
        "FUN_00128328": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128328",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00128328"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorDescription",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorDescription)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorDescription,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00104ea2",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "do_display_target.cold",
                "do_display_target",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "extract_and_store_data_0010e2f0",
                "param_1": "binary_data",
                "param_2": "undefined_param",
                "param_3": "param_length",
                "param_4": "param_value",
                "param_5": "string_param",
                "lVar1": "length",
                "uVar2": "error_code",
                "lVar3": "hash_lookup_result",
                "uVar4": "error_message",
                "uVar5": "localized_message",
                "sVar6": "string_length",
                "lVar7": "data_offset",
                "local_44": "local_buffer",
                "local_3c": "local_array"
            },
            "code": "\nundefined8\nextract_and_store_data_0010e2f0(long *binary_data,undefined undefined_param,int param_length,undefined8 param_value,char *string_param)\n\n{\n  long length;\n  undefined4 error_code;\n  long hash_lookup_result;\n  undefined8 error_message;\n  undefined8 localized_message;\n  size_t string_length;\n  long data_offset;\n  undefined4 local_buffer;\n  undefined uStack_40;\n  undefined uStack_3f;\n  undefined2 uStack_3e;\n  undefined4 local_array [3];\n  \n  if (string_param == (char *)0x0) {\n    data_offset = 0;\n  }\n  else {\n    hash_lookup_result = bfd_hash_lookup(binary_data + 7,string_param,1,1);\n    if (hash_lookup_result == 0) {\n      error_code = bfd_get_error();\n      error_message = bfd_errmsg(error_code);\n      localized_message = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      non_fatal(localized_message,error_message);\n      return 0;\n    }\n    data_offset = *(long *)(hash_lookup_result + 0x20);\n    if (data_offset == -1) {\n      data_offset = binary_data[6];\n      length = binary_data[5];\n      *(long *)(hash_lookup_result + 0x20) = data_offset;\n      if (length == 0) {\n        binary_data[4] = hash_lookup_result;\n      }\n      else {\n        *(long *)(length + 0x18) = hash_lookup_result;\n      }\n      binary_data[5] = hash_lookup_result;\n      string_length = strlen(string_param);\n      binary_data[6] = data_offset + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*binary_data + 8) + 0x50))(data_offset,&local_buffer);\n  uStack_3f = 0;\n  uStack_40 = undefined_param;\n  (**(code **)(*(long *)(*binary_data + 8) + 0x68))((long)param_length,&uStack_3e);\n  (**(code **)(*(long *)(*binary_data + 8) + 0x50))(param_value,local_array);\n  if ((ulong)binary_data[3] < binary_data[2] + 0xcU) {\n    binary_data[3] = binary_data[3] * 2;\n    data_offset = xrealloc(binary_data[1]);\n    binary_data[1] = data_offset;\n  }\n  data_offset = binary_data[2];\n  hash_lookup_result = binary_data[1];\n  *(ulong *)(hash_lookup_result + data_offset) = CONCAT26(uStack_3e,CONCAT15(uStack_3f,CONCAT14(uStack_40,local_buffer)));\n  *(undefined4 *)(hash_lookup_result + 8 + data_offset) = local_array[0];\n  binary_data[2] = binary_data[2] + 0xc;\n  return CONCAT71((int7)((ulong)data_offset >> 8),1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "non_fatal",
                "bfd_errmsg",
                "strlen",
                "dcgettext",
                "bfd_hash_lookup",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_start_source.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_lineno.lto_priv.0",
                "stab_start_block.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_end_block.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_variable.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extract_and_store_data_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "inputString",
                "iVar1": "comparisonResult",
                "uVar2": "msg",
                "pcVar3": "commaPtr",
                "pcVar4": "nextString",
                "sVar5": "stringLength",
                "iVar6": "stringLengthInt",
                "uVar7": "sectionFlags",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *inputString,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  int comparisonResult;\n  undefined8 msg;\n  char *commaPtr;\n  char *nextString;\n  size_t stringLength;\n  int stringLengthInt;\n  uint sectionFlags;\n  undefined result [16];\n  \n  sectionFlags = 0;\n  do {\n    commaPtr = strchr(inputString,0x2c);\n    if (commaPtr == (char *)0x0) {\n      stringLength = strlen(inputString);\n      stringLengthInt = (int)stringLength;\n      nextString = (char *)0x0;\n    }\n    else {\n      nextString = commaPtr + 1;\n      stringLengthInt = (int)commaPtr - (int)inputString;\n    }\n    stringLength = (size_t)stringLengthInt;\n    comparisonResult = strncasecmp(\"alloc\",inputString,stringLength);\n    if (comparisonResult == 0) {\n      sectionFlags = sectionFlags | 1;\n    }\n    else {\n      comparisonResult = strncasecmp(\"load\",inputString,stringLength);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 2;\n      }\n      else {\n        comparisonResult = strncasecmp(\"noload\",inputString,stringLength);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x200;\n        }\n        else {\n          comparisonResult = strncasecmp(\"readonly\",inputString,stringLength);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 8;\n          }\n          else {\n            comparisonResult = strncasecmp(\"debug\",inputString,stringLength);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x2000;\n            }\n            else {\n              comparisonResult = strncasecmp(\"code\",inputString,stringLength);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x10;\n              }\n              else {\n                comparisonResult = strncasecmp(\"data\",inputString,stringLength);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x20;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"rom\",inputString,stringLength);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x40;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"exclude\",inputString,stringLength);\n                    if (comparisonResult == 0) {\n                      sectionFlags = sectionFlags | 0x8000;\n                    }\n                    else {\n                      comparisonResult = strncasecmp(\"share\",inputString,stringLength);\n                      if (comparisonResult == 0) {\n                        sectionFlags = sectionFlags | 0x8000000;\n                      }\n                      else {\n                        comparisonResult = strncasecmp(\"contents\",inputString,stringLength);\n                        if (comparisonResult == 0) {\n                          sectionFlags = sectionFlags | 0x100;\n                        }\n                        else {\n                          comparisonResult = strncasecmp(\"merge\",inputString,stringLength);\n                          if (comparisonResult == 0) {\n                            sectionFlags = sectionFlags | 0x800000;\n                          }\n                          else {\n                            comparisonResult = strncasecmp(\"strings\",inputString,stringLength);\n                            if (comparisonResult != 0) {\n                              commaPtr = (char *)xmalloc((long)(stringLengthInt + 1));\n                              strncpy(commaPtr,inputString,stringLength);\n                              commaPtr[stringLength] = '\\0';\n                              msg = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal(msg,commaPtr);\n                              msg = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              fatal(msg,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            sectionFlags = sectionFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    inputString = nextString;\n  } while (nextString != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = sectionFlags;\n  result._8_8_ = param_4;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "generate_modified_string_001125fa",
                "param_1": "inputParams",
                "__assert_fail": "assertionFailed",
                "ppcVar2": "pointerToCharVar2",
                "__s": "stringVar",
                "sVar3": "lengthVar1",
                "sVar4": "lengthVar2",
                "uVar1": "resultSize",
                "curr_1": "currentSize",
                "buf_0": "buffer"
            },
            "code": "\nchar * generateModifiedString_001125fa(char **inputParams)\n\n{\n  ulong resultSize;\n  char **pointerToCharVar2;\n  size_t lengthVar1;\n  size_t lengthVar2;\n  char *stringVar;\n  \n  if (inputParams == (char **)0x0) {\n                    \n    assertionFailed(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  pointerToCharVar2 = (char **)inputParams[0x1d];\n  stringVar = *inputParams;\n  if ((pointerToCharVar2 != (char **)0x0) && ((*(byte *)((long)pointerToCharVar2 + 0x49) & 0x10) == 0)) {\n    lengthVar1 = strlen(*pointerToCharVar2);\n    lengthVar2 = strlen(stringVar);\n    resultSize = lengthVar1 + 3 + lengthVar2;\n    if (currentSize < resultSize) {\n      if (currentSize != 0) {\n        free(buffer);\n      }\n      currentSize = (resultSize >> 1) + resultSize;\n      buffer = (char *)xmalloc();\n    }\n    sprintf(buffer,\"%s(%s)\",*(undefined8 *)inputParams[0x1d],*inputParams);\n    stringVar = buffer;\n  }\n  return stringVar;\n}\n\n",
            "called": [
                "strlen",
                "__assert_fail",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_001152b6",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "copy_object",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "generate_modified_string_001125fa"
        },
        "FUN_00104380": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104380"
        },
        "FUN_00104260": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104260"
        },
        "FUN_001048c0": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "stab_demangle_template",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001048c0"
        },
        "FUN_001047a0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "bfd_nonfatal_message",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001047a0"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "check_result_00108f05"
            },
            "code": "\nundefined check_result_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "check_result_00108f05"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "free_stabs_memory_00108863",
                "puVar1": "currentStab",
                "puVar2": "nextStab",
                "saved_stabs": "stabMemory",
                "saved_stabs_index": "stabMemoryIndex"
            },
            "code": "\nvoid freeStabsMemory_00108863(void)\n\n{\n  undefined4 *currentStab;\n  undefined4 *nextStab;\n  \n  currentStab = (undefined4 *)stabMemory;\n  do {\n    nextStab = currentStab + 6;\n    free(*(void **)(currentStab + 4));\n    *(undefined8 *)(currentStab + 4) = 0;\n    currentStab = nextStab;\n  } while (nextStab != &stabMemoryIndex);\n  stabMemoryIndex = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "free_stabs_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_function_at_address_00104020"
            },
            "code": "\nvoid execute_function_at_address_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_at_address_00104020"
        },
        "FUN_00128450": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128450",
            "calling": [
                "fwrite",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00128450"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "process_debug_info_00108f08",
                "param_1": "param_ptr",
                "param_2": "filename",
                "iVar1": "comparison_result",
                "uVar2": "success_flag",
                "puVar3": "debug_info_ptr",
                "puVar4": "current_debug_info_ptr",
                "lVar5": "loop_counter",
                "puVar6": "debug_info_list",
                "pcVar7": "current_filename",
                "puVar8": "last_debug_info_ptr",
                "bVar9": "byte_var"
            },
            "code": "\n\n\nundefined8 process_debug_info_00108f08(long param_ptr,char *filename)\n\n{\n  int comparison_result;\n  undefined8 success_flag;\n  undefined8 *debug_info_ptr;\n  undefined8 *current_debug_info_ptr;\n  long loop_counter;\n  undefined8 *debug_info_list;\n  char *current_filename;\n  undefined8 *last_debug_info_ptr;\n  byte byte_var;\n  \n  byte_var = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(param_ptr + 8) == 0) {\n    success_flag = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",success_flag);\n    success_flag = 0;\n  }\n  else {\n    for (debug_info_ptr = *(undefined8 **)(*(long *)(param_ptr + 8) + 8); debug_info_ptr != (undefined8 *)0x0;\n        debug_info_ptr = (undefined8 *)*debug_info_ptr) {\n      comparison_result = filename_cmp(debug_info_ptr[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    debug_info_ptr = (undefined8 *)xmalloc(0x18);\n    debug_info_list = *(undefined8 **)(param_ptr + 0x10);\n    last_debug_info_ptr = debug_info_ptr;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)last_debug_info_ptr = 0;\n      last_debug_info_ptr = (undefined8 *)((long)last_debug_info_ptr + (ulong)byte_var * -8 + 4);\n    }\n    debug_info_ptr[1] = current_filename;\n    last_debug_info_ptr = (undefined8 *)*debug_info_list;\n    while (current_debug_info_ptr = last_debug_info_ptr, current_debug_info_ptr != (undefined8 *)0x0) {\n      debug_info_list = current_debug_info_ptr;\n      last_debug_info_ptr = (undefined8 *)*current_debug_info_ptr;\n    }\n    *debug_info_list = debug_info_ptr;\nLAB_00108fad:\n    *(undefined8 **)(param_ptr + 0x10) = debug_info_ptr;\n    success_flag = 1;\n  }\n  return success_flag;\n}\n\n",
            "called": [
                "dcgettext",
                "filename_cmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "process_debug_info_00108f08"
        },
        "FUN_00104140": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_00116852",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104140"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "copy_file.cold"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "FUN_00128210": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strspn@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128210",
            "calling": [
                "strspn"
            ],
            "imported": false,
            "current_name": "FUN_00128210"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "analyze_change_sections_00114190",
                "param_1": "input_string",
                "param_2": "is_exact_match",
                "param_3": "flags",
                "uVar1": "section_flag",
                "plVar2": "current_section",
                "pplVar3": "pre_section",
                "iVar4": "result",
                "uVar5": "error_message",
                "pplVar6": "match_section",
                "pplVar7": "previous_section",
                "pplVar8": "section_link",
                "change_sections": "section_list",
                "LAB_001142a9": "exact_match_exit",
                "LAB_001141e5": "fnmatch_check",
                "LAB_00114245": "match_exit",
                "LAB_0011438e": "match_success_exit",
                "fnmatch": "string_compare",
                "strcmp": "string_compare",
                "dcgettext": "get_error_message",
                "fatal": "show_error_message",
                "xmalloc": "allocate_memory"
            },
            "code": "\nlong ** analyze_change_sections_00114190(long *input_string,char is_exact_match,uint flags)\n\n{\n  uint section_flag;\n  long *current_section;\n  long **pre_section;\n  int result;\n  undefined8 error_message;\n  long **match_section;\n  long **previous_section;\n  long **section_link;\n  \n  previous_section = section_list;\n  if (section_list == (long **)0x0) {\n    if (is_exact_match == '\\0') {\n      return (long **)0x0;\n    }\n    goto exact_match_exit;\n  }\n  if (is_exact_match == '\\0') {\n    if ((flags & *(uint *)((long)section_list + 0x14)) == 0) {\nfnmatch_check:\n      match_section = (long **)*previous_section;\n      if (match_section == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_section = (long **)0x0;\n    }\n    else {\n      current_section = section_list[1];\n      if (*(char *)current_section == '!') {\n        result = string_compare((char *)((long)current_section + 1),(char *)input_string,0);\n        match_section = previous_section;\n        if (result == 0) goto match_success_exit;\n        goto fnmatch_check;\n      }\n      result = string_compare((char *)current_section,(char *)input_string,0);\n      if (result != 0) goto fnmatch_check;\n      match_section = (long **)*previous_section;\n      if (match_section == (long **)0x0) goto match_exit;\n    }\n    if ((flags & *(uint *)((long)match_section + 0x14)) != 0) {\n      current_section = match_section[1];\n      if (*(char *)current_section == '!') {\n        result = string_compare((char *)((long)current_section + 1),(char *)input_string,0);\n        if (result == 0) {\nmatch_success_exit:\n          *(undefined *)(match_section + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        result = string_compare((char *)current_section,(char *)input_string,0);\n        if ((previous_section == (long **)0x0) && (result == 0)) {\n          section_link = (long **)*match_section;\n          previous_section = match_section;\n          if (section_link == (long **)0x0) goto match_exit;\n          goto LAB_00114288;\n        }\n      }\n    }\n    section_link = (long **)*match_section;\n    match_section = previous_section;\n    if (section_link != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    result = string_compare((char *)section_list[1],(char *)input_string);\n    if (result == 0) {\nLAB_001143cd:\n      section_flag = *(uint *)((long)previous_section + 0x14);\n      if ((((section_flag & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((section_flag & 2) != 0)))) {\n        error_message = get_error_message(0,\"error: %s both copied and removed\",5);\n                    \n        show_error_message(error_message,input_string);\n      }\n      if ((((section_flag & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = get_error_message(0,\"error: %s both sets and alters VMA\",5);\n                    \n        show_error_message(error_message,input_string);\n      }\n      if ((((section_flag & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_section + 0x14) = section_flag | flags;\n        return previous_section;\n      }\n      error_message = get_error_message(0,\"error: %s both sets and alters LMA\",5);\n                    \n      show_error_message(error_message,input_string);\n    }\n    previous_section = (long **)*previous_section;\n    if (previous_section == (long **)0x0) goto exact_match_exit;\n    result = string_compare((char *)previous_section[1],(char *)input_string);\n    if (result == 0) goto LAB_001143cd;\n    section_link = (long **)*previous_section;\n    match_section = (long **)0x0;\n    if (section_link == (long **)0x0) goto exact_match_exit;\nLAB_00114288:\n    do {\n      previous_section = match_section;\n      if (is_exact_match == '\\0') {\n        while (match_section = section_link, pre_section = previous_section, section_link = match_section,\n              (flags & *(uint *)((long)match_section + 0x14)) != 0) {\n          current_section = match_section[1];\n          if (*(char *)current_section == '!') {\n            result = string_compare((char *)((long)current_section + 1),(char *)input_string,0);\n            if (result == 0) goto match_success_exit;\n            section_link = (long **)*match_section;\n            if ((long **)*match_section == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            result = string_compare((char *)current_section,(char *)input_string,0);\n            if ((previous_section == (long **)0x0) && (result == 0)) {\n              previous_section = match_section;\n              section_link = (long **)*match_section;\n              if ((long **)*match_section == (long **)0x0) goto match_exit;\n            }\n            else {\n              section_link = (long **)*match_section;\n              if ((long **)*match_section == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        result = string_compare((char *)section_link[1],(char *)input_string);\n        pre_section = match_section;\n        previous_section = section_link;\n        if (result == 0) goto LAB_001143cd;\n      }\n      match_section = pre_section;\n      section_link = (long **)*section_link;\n      previous_section = match_section;\n    } while (section_link != (long **)0x0);\nLAB_001142a1:\n    if (is_exact_match != '\\0') {\nexact_match_exit:\n      match_section = (long **)allocate_memory(0x30);\n      *(undefined (*) [16])(match_section + 3) = (undefined  [16])0x0;\n      *(undefined *)(match_section + 2) = 0;\n      *(uint *)((long)match_section + 0x14) = flags;\n      match_section[5] = (long *)0x0;\n      previous_section = match_section;\n      *match_section = (long *)section_list;\n      section_list = previous_section;\n      match_section[1] = input_string;\n      return match_section;\n    }\n  }\nLAB_00114212:\n  if (previous_section == (long **)0x0) {\n    return (long **)0x0;\n  }\nmatch_exit:\n  *(undefined *)(previous_section + 2) = 1;\n  return previous_section;\n}\n\n",
            "called": [
                "find_section_list.cold",
                "dcgettext",
                "fatal",
                "fnmatch",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "copy_section",
                "handle_remove_section_option",
                "setup_section.cold",
                "FUN_00107880",
                "main",
                "copy_relocations_in_section",
                "is_strip_section_1.isra.0",
                "setup_section"
            ],
            "imported": false,
            "current_name": "analyze_change_sections_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "decode_gnu_build_attributes_00116490",
                "param_2": "note_size",
                "param_3": "note_name",
                "param_4": "data_size",
                "uVar1": "value1",
                "uVar2": "value2",
                "uVar3": "result",
                "bVar4": "flag",
                "puVar5": "pointer",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "value3",
                "in_RAX": "note_type",
                "uVar9": "value4",
                "uVar10": "value5",
                "uVar11": "value6",
                "uVar12": "value7",
                "__ptr": "ptr",
                "uVar13": "value8",
                "unaff_RBX": "remaining_data",
                "unaff_RBP": "value9",
                "puVar14": "array_ptr",
                "puVar15": "ptr1",
                "cVar16": "character",
                "puVar17": "ptr2",
                "puVar18": "ptr3",
                "in_R11": "value10",
                "unaff_R12": "note_ptr",
                "puVar19": "note_array",
                "unaff_R13": "index_value",
                "__nmemb": "array_length",
                "unaff_R14": "note_header",
                "puVar20": "ptr4",
                "bVar21": "byte_value",
                "iVar22": "counter",
                "unaff_retaddr": "return_address",
                "param_7": "output_size",
                "param_8": "version_flag",
                "param_9": "version",
                "in_stack_00000020": "buffer_size",
                "in_stack_00000028": "sorted_notes",
                "in_stack_00000030": "output_buffer",
                "in_stack_00000038": "excess_data_flag",
                "in_stack_00000040": "version_note_flag",
                "in_stack_00000048": "warning_message"
            },
            "code": "\nulong decode_gnu_build_attributes_00116490(undefined8 param_1,ulong note_size,ulong note_name,long data_size)\n\n{\n  undefined8 value1;\n  undefined8 value2;\n  ulong result;\n  bool flag;\n  ulong *pointer;\n  int index;\n  long length;\n  undefined8 value3;\n  ulong note_type;\n  ulong value4;\n  ulong value5;\n  ulong value6;\n  ulong value7;\n  undefined *ptr;\n  ulong value8;\n  ulong remaining_data;\n  ulong value9;\n  ulong *array_ptr;\n  undefined *ptr1;\n  char character;\n  undefined *ptr2;\n  undefined *ptr3;\n  ulong value10;\n  ulong *note_ptr;\n  ulong *note_array;\n  ulong index_value;\n  size_t array_length;\n  undefined8 *note_header;\n  ulong *ptr4;\n  byte byte_value;\n  int counter;\n  ulong return_address;\n  ulong output_size;\n  uint version_flag;\n  ulong version;\n  ulong buffer_size;\n  ulong *sorted_notes;\n  undefined *output_buffer;\n  uint excess_data_flag;\n  uint version_note_flag;\n  undefined8 *warning_message;\n  \n  byte_value = 0;\ncode_r0x00116490:\n  length = data_size;\n  value5 = value9;\n  value8 = index_value;\n  if (note_type == 0) {\n    if (note_size == 0x100) {\n      note_ptr[7] = return_address;\n      value6 = return_address;\nLAB_001164af:\n      value4 = index_value;\n      value8 = index_value;\n      return_address = value6;\n    }\n    else {\n      note_ptr[7] = version;\nLAB_0011669e:\n      value5 = value9;\n      value4 = value9;\n    }\nLAB_001164bb:\n    note_ptr[8] = value4;\n    if (*(char *)((note_ptr[3] - 1) + note_name) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    note_array = note_ptr + 9;\n    if (0xb < remaining_data) {\n      value4 = (**(code **)(note_header[1] + 0x40))(length);\n      *note_array = value4;\n      value4 = (**(code **)(note_header[1] + 0x40))(length + 4);\n      note_ptr[10] = value4;\n      note_size = (**(code **)(note_header[1] + 0x40))(length + 8);\n      note_name = *note_array;\n      note_ptr[0xb] = note_size;\n      note_type = note_ptr[10];\n      value4 = note_name + 3 & 0xfffffffffffffffc;\n      note_ptr[0xf] = value4;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < note_size - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      value6 = value4 + note_type + 0xc;\n      if (remaining_data < value6) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (note_name < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      note_ptr[0xc] = length + 0xc;\n      value10 = length + 0xc + value4;\n      note_ptr[0xd] = value10;\n      remaining_data = remaining_data + (-0xc - (value4 + note_type));\n      data_size = length + value6;\n      value9 = value5;\n      note_ptr = note_array;\n      index_value = value8;\n      if (note_name != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            value5 = decode_gnu_build_attributes_00116490();\n            return value5;\n          }\n        }\n        else if ((((4 < note_name) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            value5 = decode_gnu_build_attributes_00116490();\n            return value5;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            value5 = decode_gnu_build_attributes_00116490();\n            return value5;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remaining_data != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((excess_data_flag | version_note_flag | version_flag) == 0) {\n      value1 = *note_header;\n      value2 = *warning_message;\n      value3 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(value3,value1,value2);\nLAB_0011671b:\n      array_length = ((long)note_array - (long)sorted_notes >> 3) * -0x71c71c71c71c71c7;\n      qsort(sorted_notes,array_length,0x48,compare_gnu_build_notes);\n      for (array_ptr = sorted_notes; array_ptr < note_array; array_ptr = array_ptr + 9) {\n        value5 = array_ptr[2];\n        if (value5 != 0) {\n          value8 = array_ptr[7];\n          value4 = array_ptr[8];\n          ptr4 = array_ptr;\n          counter = 0;\n          if (value8 == value4) {\n            array_ptr[2] = 0;\n          }\n          else {\n            do {\n              do {\n                pointer = ptr4;\n                ptr4 = pointer + -9;\n                if (ptr4 < sorted_notes) goto LAB_001167f5;\n                value6 = pointer[-7];\n              } while (value6 == 0);\n              if ((*ptr4 != *array_ptr) ||\n                 (index = memcmp((void *)pointer[-6],(void *)array_ptr[3],*array_ptr), index != 0))\n              break;\n              result = pointer[-2];\n              value7 = pointer[-1];\n              if (value8 == result) {\n                if (value4 == value7) {\n                  array_ptr[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (value4 <= value7) {\n                  array_ptr[2] = 0;\n                  break;\n                }\n                if (value7 < value8) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < value7) ||\n                     (value8 <= (value7 + 0xf & 0xfffffffffffffff0))) goto extract_sorted_notes_00116852;\n                }\nLAB_001167b8:\n                if ((value5 == 0x101) == (value6 == 0x101)) {\n                  if (value7 <= value4) {\n                    value7 = value4;\n                  }\n                  if (result < value8) {\n                    value8 = result;\n                  }\n                  pointer[-1] = value7;\n                  pointer[-2] = value8;\n                  array_ptr[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (result <= value8) goto LAB_001167a6;\n                if (value7 < value8) goto LAB_0010852c;\n                if (value4 < value8) {\n                  if ((0xfffffffffffffff0 < value4) || (result <= (value4 + 0xf & 0xfffffffffffffff0)))\n                  goto extract_sorted_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (value4 != value7) goto LAB_001167b8;\n              }\nextract_sorted_notes_00116852:\n              flag = counter < 0x11;\n              counter = counter + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(sorted_notes,array_length,0x48,sort_gnu_build_notes);\n      ptr = (undefined *)xmalloc(buffer_size * 2);\n      output_size = 0;\n      version = 0;\n      ptr3 = ptr;\n      for (array_ptr = sorted_notes; array_ptr < note_array; array_ptr = array_ptr + 9) {\n        if (array_ptr[2] != 0) {\n          ptr2 = ptr3 + 4;\n          ptr1 = ptr3 + 0xc;\n          if ((array_ptr[7] == version) && (array_ptr[8] == output_size)) {\n            (**(code **)(note_header[1] + 0x50))(*array_ptr,ptr3);\n            (**(code **)(note_header[1] + 0x50))(0,ptr2);\n            (**(code **)(note_header[1] + 0x50))(array_ptr[2],ptr3 + 8);\n            value8 = array_ptr[6];\n            value5 = *array_ptr;\n            ptr3 = (undefined *)array_ptr[3];\n            ptr2 = ptr1;\n            for (value4 = value5; value4 != 0; value4 = value4 - 1) {\n              *ptr2 = *ptr3;\n              ptr3 = ptr3 + (ulong)byte_value * -2 + 1;\n              ptr2 = ptr2 + (ulong)byte_value * -2 + 1;\n            }\n            if (value5 < value8) {\n              for (length = value8 - value5; length != 0; length = length + -1) {\n                *ptr2 = 0;\n                ptr2 = ptr2 + (ulong)byte_value * -2 + 1;\n              }\n            }\n            ptr3 = ptr1 + value8;\n          }\n          else {\n            (**(code **)(note_header[1] + 0x50))();\n            if (*(int *)(note_header[1] + 8) == 5) {\n              character = (*(char *)(note_header[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              character = '\\b';\n            }\n            (**(code **)(note_header[1] + 0x50))(character,ptr2);\n            (**(code **)(note_header[1] + 0x50))(array_ptr[2],ptr3 + 8);\n            value5 = *array_ptr;\n            ptr3 = (undefined *)array_ptr[3];\n            ptr2 = ptr1;\n            for (value8 = value5; value8 != 0; value8 = value8 - 1) {\n              *ptr2 = *ptr3;\n              ptr3 = ptr3 + (ulong)byte_value * -2 + 1;\n              ptr2 = ptr2 + (ulong)byte_value * -2 + 1;\n            }\n            value8 = array_ptr[6];\n            if (value5 < value8) {\n              for (length = value8 - value5; length != 0; length = length + -1) {\n                *ptr2 = 0;\n                ptr2 = ptr2 + (ulong)byte_value * -2 + 1;\n              }\n            }\n            length = note_header[1];\n            ptr1 = ptr1 + value8;\n            ptr3 = ptr1 + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(note_header[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(array_ptr[7],ptr1);\n              (**(code **)(note_header[1] + 0x38))(array_ptr[8],ptr3);\n              ptr3 = ptr1 + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(array_ptr[7],ptr1);\n              (**(code **)(note_header[1] + 0x50))(array_ptr[8],ptr1 + 4);\n            }\n            version = array_ptr[7];\n            output_size = array_ptr[8];\n          }\n        }\n      }\n      value8 = (long)ptr3 - (long)ptr;\n      value5 = value8;\n      ptr3 = ptr;\n      if (value8 < buffer_size) {\n        for (; buffer_size = value8, value5 != 0; value5 = value5 - 1) {\n          *output_buffer = *ptr3;\n          ptr3 = ptr3 + (ulong)byte_value * -2 + 1;\n          output_buffer = output_buffer + (ulong)byte_value * -2 + 1;\n        }\n      }\n      free(ptr);\nLAB_001166f8:\n      free(sorted_notes);\n      return buffer_size;\n    }\n    if (((version_note_flag | version_flag) == 0) || (excess_data_flag == 0)) {\n      if (version_note_flag == 0) {\n        if (version_flag != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (version_flag == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      value6 = (**(code **)(note_header[1] + 0x28))(value10);\n      value4 = (**(code **)(note_header[1] + 0x28))(note_ptr[4] + 8);\n      if (value4 < value6) {\n        value6 = value4;\n      }\nLAB_00116631:\n      if (note_ptr[2] == 0x100) {\n        if (value6 == 0) {\n          value6 = return_address;\n        }\n        note_name = *note_ptr;\n        note_ptr[7] = value6;\n        value8 = value4;\n        return_address = value6;\n        if (value4 == 0) goto LAB_001164af;\n      }\n      else {\n        if (value6 == 0) {\n          value6 = version;\n        }\n        note_name = *note_ptr;\n        note_ptr[7] = value6;\n        value5 = value4;\n        version = value6;\n        if (value4 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        value6 = (**(code **)(note_header[1] + 0x40))(value10);\n        value4 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        value5 = FUNC_001086af();\n        return value5;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,note_header,warning_message,length);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "merge_gnu_build_notes.cold"
            ],
            "imported": false,
            "current_name": "decode_gnu_build_attributes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto extract_sorted_notes_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto extract_sorted_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nextract_sorted_notes_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "FUN_00128118": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128118",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00128118"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptr",
                "fp": "filePointer"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *ptr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    filePointerrintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    filePointerrintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    currentTarget = *ptr;\n    ptr = ptr + 1;\n    if (currentTarget == 0) break;\n    filePointerrintf(outputFile,\" %s\");\n  }\n  filePointerutc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "bfd_target_list",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "copy_usage",
                "strip_usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_001048d0": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001048d0"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "param_1": "function_ptr",
                "param_2": "new_function_ptr",
                "param_3": "unused_param",
                "param_4": "return_value",
                "lVar1": "current_block",
                "uVar2": "error_msg",
                "pcVar3": "error_string",
                "auVar4": "result",
                "_stderr": "error_output"
            },
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_ptr,undefined8 new_function_ptr,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_msg;\n  char *error_string;\n  undefined result [16];\n  \n  if (((*(long *)(function_ptr + 8) == 0) || (current_block = *(long *)(function_ptr + 0x20), current_block == 0)) ||\n     (*(long *)(function_ptr + 0x18) == 0)) {\n    error_string = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = new_function_ptr;\n      error_msg = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_ptr + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_string = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  error_msg = dcgettext(0,error_string,5);\n  fprintf(error_output,\"%s\\n\",error_msg);\n  error_msg = 0;\nLAB_0010be86:\n  result._8_8_ = return_value;\n  result._0_8_ = error_msg;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "parse_stab",
                "FUN_0010554f",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "debug_end_function_0010be1a"
        },
        "FUN_00104270": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "stab_modify_type",
                "display_info.isra.0",
                "stab_class_start_method.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_class_baseclass.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_qualified",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "setup_section",
                "parse_stab_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "parse_flags.cold",
                "stab_int_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "display_info.isra.0.cold",
                "is_dwo_section.constprop.0",
                "stab_typed_constant.lto_priv.0",
                "startswith.lto_priv.0.lto_priv.0",
                "stab_variable.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "FUN_0010554f",
                "convert_efi_target",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104270"
        },
        "FUN_00104150": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104150"
        },
        "FUN_00104390": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "start_stab.constprop.0",
                "debug_make_struct_type.isra.0",
                "display_info.isra.0",
                "stab_record_variable",
                "stab_class_start_method.lto_priv.0",
                "FUN_00116852",
                "stab_set_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "section_add_load_file",
                "debug_make_type.constprop.0",
                "stab_int_constant.lto_priv.0",
                "debug_record_variable",
                "debug_name_type",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "savestring",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "debug_make_enum_type.isra.0",
                "stab_find_tagged_type",
                "template_in_dir",
                "bfd_get_archive_filename",
                "FUN_0010554f",
                "add_redefine_and_check",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "debug_add_to_namespace.constprop.0",
                "stab_modify_type",
                "find_section_list",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "debug_make_indirect_type.isra.0",
                "stab_push_string",
                "stab_demangle_v3_arglist",
                "stab_demangle_args",
                "debug_tag_type",
                "stab_enum_type.lto_priv.0",
                "copy_section",
                "debug_make_array_type.isra.0",
                "coff_get_slot.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_struct_field.lto_priv.0",
                "add_specific_symbols",
                "parse_stab_type",
                "setup_section",
                "debug_record_parameter",
                "debug_make_method_type.isra.0",
                "init_section_add",
                "merge_gnu_build_notes",
                "stab_start_struct_type.lto_priv.0",
                "parse_flags.cold",
                "debug_make_offset_type.isra.0",
                "debug_set_class_id.lto_priv.0",
                "debug_start_block",
                "stab_typed_constant.lto_priv.0",
                "FUN_00104ea2",
                "FUN_00107880",
                "stab_variable.lto_priv.0",
                "debug_set_filename",
                "stab_float_constant.lto_priv.0",
                "debug_record_line",
                "stab_offset_type.lto_priv.0",
                "xstrndup",
                "debug_make_function_type.isra.0",
                "debug_start_source",
                "convert_efi_target",
                "stab_find_slot"
            ],
            "imported": false,
            "current_name": "FUN_00104390"
        },
        "FUN_001047b0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "copy_relocations_in_section",
                "merge_gnu_build_notes",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_001047b0"
        },
        "FUN_00128000": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemps@GLIBC_2.11 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128000",
            "calling": [
                "mkstemps"
            ],
            "imported": false,
            "current_name": "FUN_00128000"
        },
        "FUN_00104030": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104030"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_memory_00113da9",
                "param_1": "inputSize",
                "param_2": "param2",
                "param_3": "input1",
                "param_4": "input2",
                "puVar1": "memoryBlock",
                "lVar2": "loopCounter",
                "puVar3": "currentPtr",
                "bVar4": "byteValue",
                "auVar5": "returnVar"
            },
            "code": "\nundefined  [16] initializeMemory_00113da9(byte inputSize,undefined8 param2,undefined8 input1,undefined8 input2)\n\n{\n  undefined8 *memoryBlock;\n  long loopCounter;\n  undefined8 *currentPtr;\n  byte byteValue;\n  undefined returnVar [16];\n  \n  byteValue = 0;\n  returnVar._0_8_ = debug_make_type_constprop_0(8 - (uint)inputSize);\n  if (returnVar._0_8_ != 0) {\n    memoryBlock = (undefined8 *)xmalloc(0x28);\n    currentPtr = memoryBlock + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)currentPtr = 0;\n      currentPtr = (undefined8 *)((long)currentPtr + (ulong)byteValue * -8 + 4);\n    }\n    *memoryBlock = input1;\n    *(undefined8 **)(returnVar._0_8_ + 0x10) = memoryBlock;\n  }\n  returnVar._8_8_ = input2;\n  return returnVar;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_uniqueValue"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_uniqueValue;\n  \n  record1_uniqueValue = record1[2];\n  if (record1_uniqueValue == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_uniqueValue == 0) || ((record1_uniqueValue != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "sort_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "FUN_00128228": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128228",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_00128228"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "format_and_push_string_0010a69a",
                "param_1": "data",
                "param_2": "size",
                "param_3": "isStruct",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "structIndex",
                "sVar3": "stringLength",
                "uVar4": "allocatedMemory"
            },
            "code": "\nundefined4 formatAndPushString_0010a69a(long data,undefined8 size,int isStruct,char flag,uint value)\n\n{\n  undefined4 result;\n  long structIndex;\n  size_t stringLength;\n  undefined8 allocatedMemory;\n  undefined uVar5;\n  char local_60 [48];\n  \n  if (isStruct == 0) {\n    local_60[0] = '\\0';\n    uVar5 = 0;\n    structIndex = 0;\n  }\n  else {\n    structIndex = stab_get_struct_index();\n    if (structIndex < 0) {\n      return 0;\n    }\n    uVar5 = 1;\n    sprintf(local_60,\"%ld=\",structIndex);\n  }\n  stringLength = strlen(local_60);\n  sprintf(local_60 + stringLength,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = stab_push_string(data,local_60,structIndex,uVar5,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  structIndex = *(long *)(data + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(structIndex + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(data + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_get_struct_index",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "stab_start_class_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_0010a69a"
        },
        "FUN_001048e0": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001048e0"
        },
        "FUN_001047c0": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "stab_end_class_type.lto_priv.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001047c0"
        },
        "FUN_00104160": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00114dc7",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104160"
        },
        "FUN_00104040": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104040"
        },
        "FUN_00104280": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104280"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_properties_00115b70",
                "param_1": "section_names",
                "pcVar1": "current_section_name",
                "iVar2": "section_comparison_result",
                "iVar3": "strip_option",
                "lVar4": "section_list_0",
                "lVar5": "section_list_1",
                "uVar6": "result",
                "plVar7": "update_sections"
            },
            "code": "\nundefined8 check_section_properties_00115b70(char **section_names)\n\n{\n  char *current_section_name;\n  int section_comparison_result;\n  int strip_option;\n  long section_list_0;\n  long section_list_1;\n  undefined8 result;\n  long *update_sections;\n  \n  section_list_0 = find_section_list(*section_names,0,4);\n  if (section_list_0 == 0) {\n    if ((sections_removed != '\\0') || (sections_copied != '\\0')) {\n      section_list_0 = find_section_list(*section_names,0,1);\n      section_list_1 = find_section_list(*section_names,0,2);\n      if (section_list_0 != 0) {\n        if (section_list_1 != 0) {\n          current_section_name = *section_names;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(result,current_section_name);\n        }\n        if (section_list_0 != 0) {\n          if (update_sections == (long *)0x0) {\n            return 1;\n          }\n          current_section_name = *section_names;\n          update_sections = update_sections;\n          do {\n            strip_option = strcmp(current_section_name,(char *)update_sections[1]);\n            if (strip_option == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(result,current_section_name);\n            }\n            update_sections = (long *)*update_sections;\n          } while (update_sections != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((sections_copied != '\\0') && (section_list_1 == 0)) {\n        return 1;\n      }\n    }\n    strip_option = strip_symbols;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((strip_symbols - 2U < 2) || (strip_symbols == 7)) || (discard_locals == 2)) ||\n         (convert_debugging != '\\0')) {\n        current_section_name = *section_names;\n        section_comparison_result = strcmp(current_section_name,\".gnu_debugaltlink\");\n        if ((section_comparison_result != 0) && (section_comparison_result = strcmp(current_section_name,\".gnu_debuglink\"), section_comparison_result != 0)) {\n          strip_option = strcmp(current_section_name,\".reloc\");\n          if (strip_option != 0) {\n            return 1;\n          }\n          result = check_dwo_section_0010829e();\n          return result;\n        }\n      }\n      if (strip_option == 5) {\n        result = is_dwo_section_constprop_0(section_names);\n        return result;\n      }\n      if (strip_option == 4) {\n        return 0;\n      }\n    }\n    if (strip_option == 6) {\n      result = check_dwo_section_constprop_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "find_section_list",
                "dcgettext",
                "FUN_0010829e",
                "fatal",
                "strcmp",
                "is_strip_section_1.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_section_properties_00115b70"
        },
        "FUN_001046a0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001046a0"
        },
        "FUN_00128358": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128358",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_00128358"
        },
        "FUN_00128230": {
            "renaming": {},
            "code": "\n\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128230",
            "calling": [
                "memcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128230"
        },
        "FUN_00116b40": {
            "renaming": {
                "FUN_00116b40": "finalize_registration_00116b40",
                "completed_0": "isCompleted",
                "__cxa_finalize": "cleanUp",
                "__dso_handle": "moduleHandle",
                "deregister_tm_clones": "deregisterClones"
            },
            "code": "\nvoid finalizeRegistration_00116b40(void)\n\n{\n  if (isCompleted != '\\0') {\n    return;\n  }\n  cleanUp(moduleHandle);\n  deregisterClones();\n  isCompleted = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "finalize_registration_00116b40"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_reloc_table_00116030",
                "param_1": "config",
                "param_2": "start_address",
                "plVar1": "reloc_entry",
                "lVar2": "reloc_address",
                "lVar3": "constant1",
                "lVar4": "constant2",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar6": "fwrite_ptr",
                "lVar7": "reloc_count",
                "__ptr": "reloc_buffer",
                "lVar8": "index",
                "uStack_28": "default_result",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "bfd_get_error": "get_error",
                "bfd_nonfatal": "handle_nonfatal_error",
                "xexit": "exit_program",
                "xmalloc": "allocate_memory",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "_fwrite": "fwrite_address",
                "free": "deallocate_memory"
            },
            "code": "\n\n\nundefined8 process_reloc_table_00116030(undefined8 *config,long start_address)\n\n{\n  long *reloc_entry;\n  long reloc_address;\n  long constant1;\n  long constant2;\n  int error_code;\n  undefined8 result;\n  long fwrite_ptr;\n  void *reloc_buffer;\n  long reloc_count;\n  undefined8 extraout_RAX;\n  long index;\n  undefined8 default_result;\n  \n  if (*(long *)(start_address + 0x60) == 0) {\n    return result;\n  }\n  fwrite_ptr = get_reloc_upper_bound();\n  if (fwrite_ptr < 0) {\n    if ((fwrite_ptr != -1) || (error_code = get_error(), error_code != 5)) {\n      handle_nonfatal_error(*config);\n                    \n      exit_program(1);\n    }\n  }\n  else if (fwrite_ptr != 0) {\n    reloc_buffer = (void *)allocate_memory();\n    reloc_count = canonicalize_reloc(config,start_address,reloc_buffer);\n    constant2 = _DAT_00128680;\n    constant1 = _DAT_00128568;\n    fwrite_ptr = fwrite_address;\n    if (reloc_count < 0) {\n      handle_nonfatal_error(*config);\n                    \n      exit_program(1);\n    }\n    if (reloc_count != 0) {\n      index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_address = *reloc_entry, reloc_address != 0)) && (reloc_address != fwrite_ptr)) &&\n           ((reloc_address != constant2 && (reloc_address != constant1)))) {\n          *(uint *)(reloc_address + 0x18) = *(uint *)(reloc_address + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (reloc_count != index);\n    }\n    deallocate_memory(reloc_buffer);\n    return extraout_RAX;\n  }\n  return default_result;\n}\n\n",
            "called": [
                "fwrite",
                "bfd_get_reloc_upper_bound",
                "xexit",
                "xmalloc",
                "free",
                "bfd_canonicalize_reloc",
                "mark_symbols_used_in_relocations.cold",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_reloc_table_00116030"
        },
        "FUN_00128018": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128018",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_00128018"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_if_string_ends_with_00113ede",
                "param_1": "input_strings",
                "__s": "current_string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_if_string_ends_with_00113ede(char **input_strings)\n\n{\n  char *current_string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (input_strings == (char **)0x0) {\n    return 0;\n  }\n  current_string = *input_strings;\n  if (current_string != (char *)0x0) {\n    string_length = strlen(current_string);\n    if (4 < (int)string_length) {\n      result = startswith_lto_priv_0_lto_priv_0(current_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_if_string_ends_with_00113ede"
        },
        "FUN_001047d0": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001047d0"
        },
        "FUN_001046b0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001046b0"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_and_sort_0010875d",
                "param_1": "list1",
                "param_2": "list2",
                "lVar1": "firstElementList1",
                "lVar2": "firstElementList2",
                "iVar3": "comparisonResult",
                "uVar4": "flag"
            },
            "code": "\nint compareAndSort_0010875d(long *list1,long *list2)\n\n{\n  long firstElementList1;\n  long firstElementList2;\n  int comparisonResult;\n  uint flag;\n  \n  firstElementList1 = *list1;\n  firstElementList2 = *list2;\n  flag = *(uint *)(firstElementList2 + 0x24) & 0x102;\n  if ((*(uint *)(firstElementList1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  comparisonResult = 1;\n  if (*(ulong *)(firstElementList1 + 0x38) <= *(ulong *)(firstElementList2 + 0x38)) {\n    comparisonResult = -1;\n    if (*(ulong *)(firstElementList2 + 0x38) <= *(ulong *)(firstElementList1 + 0x38)) {\n      if (*(ulong *)(firstElementList2 + 0x40) < *(ulong *)(firstElementList1 + 0x40)) {\n        comparisonResult = 1;\n      }\n      else {\n        comparisonResult = -1;\n        if (*(ulong *)(firstElementList2 + 0x40) <= *(ulong *)(firstElementList1 + 0x40)) {\n          comparisonResult = 1;\n          if (*(uint *)(firstElementList1 + 0x18) <= *(uint *)(firstElementList2 + 0x18)) {\n            return -(uint)(*(uint *)(firstElementList1 + 0x18) < *(uint *)(firstElementList2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return comparisonResult;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_and_sort_0010875d"
        },
        "FUN_001048f0": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "display_info.isra.0",
                "FUN_00116852",
                "stab_set_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "copy_object.cold",
                "save_stab",
                "stab_class_baseclass.lto_priv.0",
                "free_saved_stabs",
                "stab_int_constant.lto_priv.0",
                "list_supported_targets",
                "stab_class_method_var",
                "stab_demangle_qualified",
                "list_matching_formats",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_find_tagged_type",
                "bfd_get_archive_filename",
                "FUN_00114b84",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_modify_type",
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arglist",
                "stab_demangle_template",
                "stab_enum_type.lto_priv.0",
                "copy_section",
                "parse_coff_struct_type",
                "parse_stab",
                "stab_struct_field.lto_priv.0",
                "parse_stab_type",
                "FUN_00108466",
                "stab_pop_type",
                "merge_gnu_build_notes",
                "make_tempdir.cold",
                "stab_typed_constant.lto_priv.0",
                "FUN_00104ea2",
                "FUN_00107880",
                "stab_emit_pending_vars",
                "stab_variable.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001048f0"
        },
        "FUN_00128260": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128260",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00128260"
        },
        "FUN_00104290": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "init_section_add",
                "main",
                "parse_stab",
                "parse_flags.cold",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104290"
        },
        "FUN_00104050": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUN_00104050"
        },
        "FUN_00104170": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "FUN_00104170"
        },
        "FUN_001048f8": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "htab_hash_redefnode"
            ],
            "imported": false,
            "current_name": "FUN_001048f8"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_types_0010c892",
                "param_1": "input_param",
                "param_2": "data_address",
                "cVar1": "emit_flag",
                "lVar2": "type_result",
                "lVar3": "tagged_type",
                "uVar4": "return_value",
                "puVar5": "list_pointer",
                "iVar6": "kind_flag"
            },
            "code": "\n\n\nundefined8 processDebugTypes_0010c892(undefined8 input_param,long data_address)\n\n{\n  char emit_flag;\n  long type_result;\n  long tagged_type;\n  undefined8 return_value;\n  undefined8 *list_pointer;\n  int kind_flag;\n  \n  if (*(char *)(data_address + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (list_pointer = *(undefined8 **)(data_address + 0x1a0); list_pointer != (undefined8 *)0x0;\n        list_pointer = (undefined8 *)*list_pointer) {\n      kind_flag = *(int *)(list_pointer + 2);\n      tagged_type = list_pointer[1];\n      if (kind_flag != 0) {\n        if (tagged_type != 0) {\n          if (kind_flag - 7U < 5) goto LAB_0010c8d5;\n          return_value = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",return_value);\n        }\nLAB_0010c910:\n        list_pointer[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tagged_type == 0) goto LAB_0010c910;\n      kind_flag = 7;\nLAB_0010c8d5:\n      type_result = debug_make_type_constprop_0(kind_flag,0);\n      if (type_result == 0) goto LAB_0010c910;\n      tagged_type = debug_tag_type(input_param,tagged_type,type_result);\n      list_pointer[3] = tagged_type;\n      if (tagged_type == 0) goto LAB_0010c916;\n    }\n    return_value = 1;\n  }\n  else {\n    emit_flag = stab_emit_pending_vars();\n    if (emit_flag != '\\0') {\n      emit_flag = debug_end_function(input_param,*(undefined8 *)(data_address + 0x68));\n      if (emit_flag != '\\0') {\n        *(undefined *)(data_address + 0x60) = 0;\n        *(undefined8 *)(data_address + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "stab_emit_pending_vars",
                "debug_end_function",
                "dcgettext",
                "debug_tag_type",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_types_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "allocate_and_initialize_00112904",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "allocatedMemory"
            },
            "code": "\nvoid allocateAndInitialize_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *allocatedMemory;\n  \n  allocatedMemory = (undefined4 *)xmalloc(0x18);\n  *allocatedMemory = value1;\n  allocatedMemory[1] = value2;\n  *(undefined (*) [16])(allocatedMemory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "debug_make_struct_type.isra.0",
                "debug_make_method_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_indirect_type.isra.0",
                "debug_make_reference_type.isra.0",
                "stab_demangle_v3_arg",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0",
                "debug_make_offset_type.isra.0",
                "debug_tag_type",
                "debug_make_enum_type.isra.0",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "debug_make_float_type.isra.0",
                "finish_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_00112904"
        },
        "FUN_00128388": {
            "renaming": {},
            "code": "\n\n\n\nchar * mkdtemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkdtemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128388",
            "calling": [
                "mkdtemp"
            ],
            "imported": false,
            "current_name": "FUN_00128388"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_exit_functions_0011a390",
                "plVar4": "exitFunctionsList",
                "uVar5": "counter",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "currIndex"
            },
            "code": "\nvoid executeExitFunctions_0011a390(void)\n\n{\n  long index;\n  long prevIndex;\n  long currIndex;\n  long *exitFunctionsList;\n  uint counter;\n  \n  exitFunctionsList = (long *)xatexit_head_lto_priv_0;\n  if (xatexit_head_lto_priv_0 != (undefined *)0x0) {\n    do {\n      counter = *(int *)(exitFunctionsList + 1) - 1;\n      if (-1 < (int)counter) {\n        index = (long)(int)counter;\n        counter = counter & 7;\n        (*(code *)exitFunctionsList[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          currIndex = prevIndex;\n          if (counter != 0) {\n            if (counter != 1) {\n              if (counter != 2) {\n                if (counter != 3) {\n                  if (counter != 4) {\n                    if (counter != 5) {\n                      if (counter != 6) {\n                        (*(code *)exitFunctionsList[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)exitFunctionsList[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)exitFunctionsList[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)exitFunctionsList[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)exitFunctionsList[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)exitFunctionsList[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)exitFunctionsList[prevIndex + 2])();\n            currIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)exitFunctionsList[currIndex + 2])();\n            index = currIndex + -1;\n            (*(code *)exitFunctionsList[currIndex + 1])();\n            (*(code *)exitFunctionsList[currIndex])();\n            (*(code *)exitFunctionsList[index])();\n            (*(code *)exitFunctionsList[currIndex + -2])();\n            (*(code *)exitFunctionsList[currIndex + -3])();\n            (*(code *)exitFunctionsList[currIndex + -4])();\n            (*(code *)exitFunctionsList[currIndex + -5])();\n            currIndex = currIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      exitFunctionsList = (long *)*exitFunctionsList;\n    } while (exitFunctionsList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_functions_0011a390"
        },
        "FUN_00128008": {
            "renaming": {},
            "code": "\n\n\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128008",
            "calling": [
                "getenv"
            ],
            "imported": false,
            "current_name": "FUN_00128008"
        },
        "FUN_00128128": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128128",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00128128"
        },
        "FUN_001046c0": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001046c0"
        },
        "FUN_001045a0": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "display_info.isra.0",
                "display_info.isra.0.cold",
                "do_display_target",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_001045a0"
        },
        "FUN_001047e0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "stab_modify_type",
                "stab_class_start_method.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "parse_stab_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047e0"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "create_symbol_with_code_and_value_0010e842",
                "param_1": "symbolTable",
                "param_2": "symbolName",
                "param_3": "code",
                "param_4": "value",
                "sVar1": "symbolNameLength",
                "__s": "modifiedSymbol",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] createSymbolWithCodeAndValue_0010e842(undefined8 symbolTable,char *symbolName,undefined8 code,undefined8 value)\n\n{\n  size_t symbolNameLength;\n  char *modifiedSymbol;\n  undefined result [16];\n  \n  symbolNameLength = strlen(symbolName);\n  modifiedSymbol = (char *)xmalloc(symbolNameLength + 0x14);\n  sprintf(modifiedSymbol,\"%s:c=i%ld\",symbolName,code);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,modifiedSymbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(modifiedSymbol);\n  }\n  result._8_8_ = value;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "create_symbol_with_code_and_value_0010e842"
        },
        "FUN_00104060": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00104060"
        },
        "FUN_00128370": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128370",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00128370"
        },
        "FUN_00104180": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104180"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "create_constprop_0_00113cb9",
                "param_1": "input_value",
                "lVar1": "output_value"
            },
            "code": "\nlong create_constprop_0_00113cb9(long input_value)\n\n{\n  long output_value;\n  \n  if (input_value != 0) {\n    output_value = debug_make_type_constprop_0(0xe,0);\n    if (output_value == 0) {\n      output_value = 0;\n    }\n    else {\n      *(long *)(output_value + 0x10) = input_value;\n    }\n    return output_value;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_constprop_0_00113cb9"
        },
        "FUN_00128130": {
            "renaming": {},
            "code": "\n\n\n\nint rmdir(char *__path)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* rmdir@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128130",
            "calling": [
                "rmdir"
            ],
            "imported": false,
            "current_name": "FUN_00128130"
        },
        "FUN_00128498": {
            "renaming": {},
            "code": "\n\n\n\nchar * strdup(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strdup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128498",
            "calling": [
                "strdup"
            ],
            "imported": false,
            "current_name": "FUN_00128498"
        },
        "FUN_00128258": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128258",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128258"
        },
        "FUN_00128138": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128138",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00128138"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "write_symbol_to_symbol_table_0010eafe",
                "param_1": "symbolTableEntry",
                "param_2": "symbolName",
                "param_3": "symbolType",
                "__s": "poppedType",
                "sVar2": "symbolNameLength",
                "sVar3": "poppedTypeLength",
                "__s_00": "newSymbol"
            },
            "code": "\nundefined4 writeSymbolToSymbolTable_0010eafe(long symbolTableEntry,char *symbolName,char symbolType)\n\n{\n  undefined4 uVar1;\n  char *poppedType;\n  size_t symbolNameLength;\n  size_t poppedTypeLength;\n  char *newSymbol;\n  \n  if ((*(int *)(symbolTableEntry + 0x1f8) == 0) && (*(long *)(symbolTableEntry + 0x1e8) == -1)) {\n    poppedType = (char *)stab_pop_type();\n    symbolNameLength = strlen(symbolName);\n    poppedTypeLength = strlen(poppedType);\n    newSymbol = (char *)xmalloc(symbolNameLength + 3 + poppedTypeLength);\n    sprintf(newSymbol,\"%s:%c%s\",symbolName,(ulong)((-(uint)(symbolType == '\\0') & 0x20) + 0x46),poppedType);\n    *(undefined8 *)(symbolTableEntry + 0x1e8) = *(undefined8 *)(symbolTableEntry + 0x10);\n    uVar1 = stab_write_symbol_lto_priv_0(symbolTableEntry,0x24,0,0,newSymbol);\n    if ((char)uVar1 != '\\0') {\n      free(newSymbol);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_symbol_table_0010eafe"
        },
        "FUN_001045b0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001045b0"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "set_constant_type_00113df2",
                "param_1": "value",
                "debug_make_type_constprop_0": "setConstantTypeDebug"
            },
            "code": "\nvoid setConstantType_00113df2(undefined4 value)\n\n{\n  setConstantType_00113df2Debug(4,value);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "set_constant_type_00113df2"
        },
        "FUN_001047f0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "copy_usage",
                "strip_usage",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_001047f0"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "construct_formatted_string_0010a377",
                "param_1": "inputAddress",
                "cVar1": "character",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "formattedString",
                "uVar5": "useDefault"
            },
            "code": "\nundefined4 constructFormattedString_0010a377(long inputAddress)\n\n{\n  char character;\n  undefined4 uVar2;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *formattedString;\n  undefined useDefault;\n  \n  useDefault = 1;\n  character = *(char *)(*(long *)(inputAddress + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  if (character == '\\0') {\n    useDefault = *(undefined *)(*(long *)(inputAddress + 0x60) + 0x1c);\n  }\n  string2 = (char *)stab_pop_type(inputAddress);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  formattedString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(formattedString,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  uVar2 = stab_push_string(inputAddress,formattedString,0,useDefault,0);\n  if ((char)uVar2 != '\\0') {\n    free(formattedString);\n  }\n  return uVar2;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "construct_formatted_string_0010a377"
        },
        "FUN_001046d0": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001046d0"
        },
        "FUN_00128160": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128160",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_00128160"
        },
        "FUN_00104070": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "FUN_00104070"
        },
        "FUN_00104190": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_00104190"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "demangle_and_process_args_0010d882",
                "param_1": "inputArg",
                "param_2": "stringList",
                "param_3": "outputPtr",
                "param_4": "isComplete",
                "iVar1": "loopCounter",
                "pcVar2": "currentChar",
                "cVar3": "currentChar",
                "lVar4": "allocatedMemory",
                "pcVar5": "currentString",
                "uVar6": "stringIndex",
                "bVar7": "isLooping",
                "local_50": "argCount",
                "local_4c": "paramCount",
                "local_48": "localCount",
                "local_44": "typeFlag",
                "local_40": "newArgsBuffer"
            },
            "code": "\nundefined8 demangleAndProcessArgs_0010d882(long inputArg,char **stringList,long *outputPtr,undefined *isComplete)\n\n{\n  int loopCounter;\n  char *currentChar;\n  char currentChar;\n  long allocatedMemory;\n  char *currentString;\n  ulong stringIndex;\n  bool isLooping;\n  uint argCount;\n  undefined4 paramCount;\n  uint localCount;\n  int typeFlag;\n  undefined8 newArgsBuffer [2];\n  \n  currentChar = *stringList;\n  paramCount = 10;\n  if (outputPtr != (long *)0x0) {\n    allocatedMemory = xmalloc();\n    *outputPtr = allocatedMemory;\n    *isComplete = 0;\n  }\n  argCount = 0;\n  while( true ) {\n    currentString = *stringList;\n    currentChar = *currentString;\n    if ((currentChar == '_' || currentChar == '\\0') || (currentChar == 'e')) break;\n    if ((currentChar == 'N') || (currentChar == 'T')) {\n      *stringList = currentString + 1;\n      if (currentChar == 'T') {\n        typeFlag = 1;\n      }\n      else {\n        currentChar = stab_demangle_get_count(stringList,&typeFlag);\n        if (currentChar == '\\0') goto LAB_0010d958;\n      }\n      currentChar = stab_demangle_get_count(stringList,&localCount);\n      if ((currentChar == '\\0') || (*(uint *)(inputArg + 0x28) <= localCount)) {\nLAB_0010d958:\n        stab_bad_demangle(currentChar);\n        return 0;\n      }\n      stringIndex = (ulong)localCount;\n      while (loopCounter = typeFlag + -1, isLooping = typeFlag != 0, typeFlag = loopCounter, isLooping) {\n        newArgsBuffer[0] = *(undefined8 *)(*(long *)(inputArg + 0x20) + stringIndex * 0x10);\n        currentChar = stab_demangle_arg(inputArg,newArgsBuffer,outputPtr,&argCount,&paramCount);\n        if (currentChar == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      currentChar = stab_demangle_arg(inputArg,stringList,outputPtr,&argCount,&paramCount);\n      if (currentChar == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (outputPtr == (long *)0x0) {\n    if (currentChar != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*outputPtr + (ulong)argCount * 8) = 0;\n    if (*currentString != 'e') goto LAB_0010d9fa;\n    *isComplete = 1;\n  }\n  currentString = currentString + 1;\n  *stringList = currentString;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)currentString >> 8),1);\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "stab_demangle_arg",
                "xmalloc",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_and_process_args_0010d882"
        },
        "FUN_00128040": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128040",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00128040"
        },
        "FUN_00128168": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128168",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_00128168"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_array_00112925",
                "param_1": "arrayPointer",
                "param_2": "paramValue",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "allocatedArray",
                "pauVar2": "existingArray",
                "lVar3": "loopCounter",
                "puVar4": "currentPointer",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeArray_00112925(undefined (**arrayPointer) [16],undefined8 paramValue,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *allocatedArray;\n  undefined (*existingArray) [16];\n  long loopCounter;\n  undefined4 *currentPointer;\n  byte byteValue;\n  \n  byteValue = 0;\n  allocatedArray = (undefined4 *)xmalloc(0x28);\n  currentPointer = allocatedArray;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentPointer = 0;\n    currentPointer = currentPointer + (ulong)byteValue * -2 + 1;\n  }\n  existingArray = *arrayPointer;\n  *(undefined8 *)(allocatedArray + 2) = paramValue;\n  allocatedArray[5] = value1;\n  allocatedArray[6] = value2;\n  if (existingArray == (undefined (*) [16])0x0) {\n    existingArray = (undefined (*) [16])xmalloc(0x10);\n    *existingArray = ZEXT816(0);\n    *arrayPointer = existingArray;\n    *(undefined (**) [16])(*existingArray + 8) = existingArray;\n  }\n  **(undefined8 **)(*existingArray + 8) = allocatedArray;\n  *(undefined4 **)(*existingArray + 8) = allocatedArray;\n  return allocatedArray;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "debug_record_function",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "debug_name_type",
                "debug_tag_type"
            ],
            "imported": false,
            "current_name": "initialize_array_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_debug_record_line_0010bf86",
                "param_1": "param",
                "param_2": "newLine",
                "param_3": "sourceFile",
                "uVar1": "errorMessage",
                "puVar2": "currentRecord",
                "uVar3": "counter",
                "puVar4": "allocatedMem",
                "lVar5": "loopVar",
                "puVar6": "tempPtr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 updateDebugRecordLine_0010bf86(long param,undefined8 newLine,undefined8 sourceFile)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentRecord;\n  ulong counter;\n  undefined4 *allocatedMem;\n  long loopVar;\n  undefined4 *tempPtr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(param + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    loopVar = *(long *)(param + 0x28);\n    if ((loopVar != 0) && (*(long *)(loopVar + 8) == *(long *)(param + 0x10))) {\n      counter = 0;\n      do {\n        if (*(long *)(loopVar + 0x10 + counter * 8) == -1) {\n          currentRecord = (undefined8 *)(counter & 0xffffffff);\n          *(undefined8 *)(loopVar + 0x10 + (long)currentRecord * 8) = newLine;\n          *(undefined8 *)(loopVar + 0x60 + (long)currentRecord * 8) = sourceFile;\n          goto LAB_0010c056;\n        }\n        counter = counter + 1;\n      } while (counter != 10);\n    }\n    allocatedMem = (undefined4 *)xmalloc(0xb0);\n    tempPtr = allocatedMem;\n    for (loopVar = 0x2c; loopVar != 0; loopVar = loopVar + -1) {\n      *tempPtr = 0;\n      tempPtr = tempPtr + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(param + 0x10);\n    *(undefined8 *)(allocatedMem + 4) = newLine;\n    *(undefined8 *)(allocatedMem + 2) = errorMessage;\n    *(undefined8 *)(allocatedMem + 0x18) = sourceFile;\n    tempPtr = allocatedMem + 6;\n    for (loopVar = 0x48; loopVar != 0; loopVar = loopVar + -1) {\n      *(undefined *)tempPtr = 0xff;\n      tempPtr = (undefined4 *)((long)tempPtr + (ulong)flag * -2 + 1);\n    }\n    currentRecord = *(undefined8 **)(param + 0x28);\n    if (currentRecord == (undefined8 *)0x0) {\n      currentRecord = *(undefined8 **)(param + 8);\n      currentRecord[2] = allocatedMem;\n    }\n    else {\n      *currentRecord = allocatedMem;\n    }\n    *(undefined4 **)(param + 0x28) = allocatedMem;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentRecord >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_debug_record_line_0010bf86"
        },
        "FUN_00128048": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128048",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_00128048"
        },
        "FUN_00128288": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128288",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128288"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "string",
                "__pattern": "currentPattern",
                "iVar1": "result"
            },
            "code": "\nint patternMatch_0011a170(char **pattern,char **string)\n\n{\n  char *currentPattern;\n  int result;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    result = fnmatch(currentPattern + 1,*string,0);\n    if (result == 0) {\n      *(undefined *)(string + 1) = 0;\n      return result;\n    }\n  }\n  else {\n    result = fnmatch(currentPattern,*string,0);\n    if (result == 0) {\n      *(undefined *)(string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "function_info",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "puVar1": "next_ptr",
                "uVar2": "error_message",
                "puVar3": "new_ptr",
                "puVar4": "temp_ptr",
                "lVar5": "temp_value",
                "puVar6": "last_ptr",
                "puVar7": "ptr_iterator",
                "bVar8": "loop_counter"
            },
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_info,long param1,long param2,undefined4 param3,undefined8 param4)\n\n{\n  undefined8 *next_ptr;\n  undefined8 error_message;\n  undefined4 *new_ptr;\n  undefined8 *temp_ptr;\n  long temp_value;\n  undefined8 *last_ptr;\n  undefined4 *ptr_iterator;\n  byte loop_counter;\n  \n  loop_counter = 0;\n  if (param1 == 0) {\n    return 0;\n  }\n  if (param2 != 0) {\n    if ((*(long *)(function_info + 8) != 0) && (*(long *)(function_info + 0x18) != 0)) {\n      new_ptr = (undefined4 *)xmalloc(0x28);\n      ptr_iterator = new_ptr;\n      for (temp_value = 10; temp_value != 0; temp_value = temp_value + -1) {\n        *ptr_iterator = 0;\n        ptr_iterator = ptr_iterator + (ulong)loop_counter * -2 + 1;\n      }\n      temp_value = *(long *)(function_info + 0x18);\n      *(long *)(new_ptr + 2) = param1;\n      *(long *)(new_ptr + 4) = param2;\n      new_ptr[6] = param3;\n      next_ptr = *(undefined8 **)(temp_value + 8);\n      *(undefined8 *)(new_ptr + 8) = param4;\n      last_ptr = (undefined8 *)(temp_value + 8);\n      while (temp_ptr = next_ptr, temp_ptr != (undefined8 *)0x0) {\n        last_ptr = temp_ptr;\n        next_ptr = (undefined8 *)*temp_ptr;\n      }\n      *last_ptr = new_ptr;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_00104ea2",
                "cVar1": "charVar1",
                "iVar2": "intVar2",
                "ppcVar3": "pointerToPointerCharVar3",
                "pvVar4": "voidVar4",
                "lVar5": "longVar5",
                "ppcVar6": "pointerToPointerCharVar6",
                "pcVar7": "pointerToCharVar7",
                "puVar8": "pointerToUndefined8Var8",
                "piVar9": "pointerToIntVar9",
                "pcVar10": "pointerToCharVar10",
                "uVar11": "undefined8Var11",
                "lVar12": "longVar12",
                "pcVar13": "pointerToCodeVar13",
                "lVar14": "longVar14",
                "unaff_EBX": "unaffected_EBX",
                "unaff_RBP": "unaffected_RBP",
                "pcVar15": "pointerToCharVar15",
                "psVar16": "pointerToStatVar16",
                "unaff_R12": "unaffected_R12",
                "unaff_R13": "pointerToUndefined8Var13",
                "unaff_R15": "pointerToPointerCharVar15",
                "bVar17": "byteVar17",
                "unaff_retaddr": "unaffected_retaddr",
                "param_7": "paramPointerToUndefined8Var7",
                "param_8": "paramPointerToLongVar8",
                "param_9": "paramPointerToCharVar9",
                "param_10": "paramPointerToUndefined8Var10",
                "param_11": "paramUndefined8Var11",
                "param_18": "paramUintVar18",
                "param_19": "paramLongVar19"
            },
            "code": "\nvoid copyArchive_00104ea2(void)\n\n{\n  char charVar1;\n  int intVar2;\n  char **pointerToPointerCharVar3;\n  void *voidVar4;\n  long longVar5;\n  char **pointerToPointerCharVar6;\n  char *pointerToCharVar7;\n  undefined8 *pointerToUndefined8Var8;\n  int *pointerToIntVar9;\n  char *pointerToCharVar10;\n  undefined8 undefined8Var11;\n  long longVar12;\n  code *pointerToCodeVar13;\n  long longVar14;\n  int unaffected_EBX;\n  stat *unaffected_RBP;\n  char *pointerToCharVar15;\n  stat *pointerToStatVar16;\n  char *unaffected_R12;\n  undefined8 *pointerToUndefined8Var13;\n  char **pointerToPointerCharVar15;\n  byte byteVar17;\n  undefined8 unaffected_retaddr;\n  undefined8 *paramPointerToUndefined8Var7;\n  long *paramPointerToLongVar8;\n  char *paramPointerToCharVar9;\n  undefined8 *paramPointerToUndefined8Var10;\n  undefined8 paramUndefined8Var11;\n  undefined8 in_stack_00000030;\n  uint paramUintVar18;\n  long paramLongVar19;\n  \n  byteVar17 = 0;\ncode_r0x00104ea2:\n  pointerToPointerCharVar6 = (char **)bfd_openw(unaffected_R12,paramUndefined8Var11);\n  if (pointerToPointerCharVar6 == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(unaffected_R12,0,0,0);\nLAB_00104e93:\n    status = 1;\n  }\n  else {\nLAB_00114a5f:\n    charVar1 = copy_object(pointerToPointerCharVar15,pointerToPointerCharVar6,unaffected_retaddr);\n    if (charVar1 == '\\0') {\n      intVar2 = bfd_get_arch(pointerToPointerCharVar15);\n      if (intVar2 == 0) goto LAB_00104d75;\n      charVar1 = bfd_close_all_done(pointerToPointerCharVar6);\n      if (charVar1 != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(unaffected_R12,0,0,0);\n      goto LAB_00104ec9;\n    }\n    charVar1 = bfd_close(pointerToPointerCharVar6);\n    pointerToPointerCharVar6 = pointerToPointerCharVar15;\n    if (charVar1 == '\\0') {\n      bfd_nonfatal_message(unaffected_R12,0,0,0);\n      status = 1;\n    }\nLAB_00114a86:\n    if ((preserve_dates != '\\0') && (unaffected_EBX == 0)) {\n      set_times(unaffected_R12,unaffected_RBP);\n    }\n    longVar12 = bfd_openr(unaffected_R12,paramUndefined8Var11);\n    pointerToUndefined8Var13[2] = longVar12;\n    *paramPointerToLongVar8 = longVar12;\n    paramPointerToLongVar8 = (long *)(longVar12 + 0xf0);\n    pointerToPointerCharVar15 = (char **)bfd_openr_next_archived_file(paramPointerToUndefined8Var10,pointerToPointerCharVar6);\n    bfd_close(pointerToPointerCharVar6);\n    while ((status == 0 && (pointerToPointerCharVar15 != (char **)0x0))) {\n      pointerToCharVar10 = *pointerToPointerCharVar15;\n      pointerToCharVar7 = pointerToCharVar10;\n      if (*pointerToCharVar10 == '/') {\nLAB_0010527d:\n        undefined8Var11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(undefined8Var11,pointerToCharVar10);\n        goto LAB_00104e93;\n      }\n      while (*pointerToCharVar7 != '\\0') {\n        pointerToCharVar15 = pointerToCharVar7;\n        if ((*pointerToCharVar7 == '.') && (pointerToCharVar15 = pointerToCharVar7 + 1, pointerToCharVar7[1] == '.')) {\n          pointerToCharVar15 = pointerToCharVar7 + 2;\n          if ((pointerToCharVar7[2] == '\\0') || (pointerToCharVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pointerToCharVar15 != '\\0' && (*pointerToCharVar15 != '/')); pointerToCharVar15 = pointerToCharVar15 + 1) {\n        }\n        pointerToCharVar7 = pointerToCharVar15;\n        if (*pointerToCharVar15 == '/') {\n          copy_archive_001052a2();\n          return;\n        }\n      }\n      unaffected_RBP = (stat *)&stack0x00000050;\n      unaffected_R12 = (char *)concat(paramPointerToCharVar9,&DAT_0011b47d);\n      intVar2 = stat(unaffected_R12,unaffected_RBP);\n      pointerToUndefined8Var8 = pointerToUndefined8Var13;\n      if (-1 < intVar2) {\n        longVar12 = make_tempdir(unaffected_R12);\n        free(unaffected_R12);\n        if (longVar12 == 0) {\n          pointerToIntVar9 = __errno_location();\n          pointerToCharVar10 = strerror(*pointerToIntVar9);\n          undefined8Var11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(undefined8Var11,pointerToCharVar10);\n          goto LAB_00104e93;\n        }\n        pointerToUndefined8Var8 = (undefined8 *)xmalloc(0x18);\n        pointerToCharVar10 = *pointerToPointerCharVar15;\n        *pointerToUndefined8Var8 = pointerToUndefined8Var13;\n        pointerToUndefined8Var8[2] = 0;\n        pointerToUndefined8Var8[1] = longVar12;\n        unaffected_R12 = (char *)concat(longVar12,&DAT_0011b47d,pointerToCharVar10);\n      }\n      unaffected_EBX = 0;\n      if (preserve_dates != '\\0') {\n        pointerToStatVar16 = unaffected_RBP;\n        for (longVar12 = 0x24; longVar12 != 0; longVar12 = longVar12 + -1) {\n          *(undefined4 *)&pointerToStatVar16->st_dev = 0;\n          pointerToStatVar16 = (stat *)((long)pointerToStatVar16 + (ulong)byteVar17 * -8 + 4);\n        }\n        pointerToPointerCharVar6 = (char **)pointerToPointerCharVar15[0x1d];\n        if ((char **)pointerToPointerCharVar15[0x1d] == (char **)0x0) {\n          pointerToPointerCharVar6 = pointerToPointerCharVar15;\n        }\n        unaffected_EBX = (**(code **)(pointerToPointerCharVar6[1] + 0x1e8))(pointerToPointerCharVar15,unaffected_RBP);\n        if (unaffected_EBX != 0) {\n          pointerToCharVar10 = *pointerToPointerCharVar15;\n          undefined8Var11 = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(undefined8Var11,pointerToCharVar10);\n        }\n      }\n      pointerToUndefined8Var13 = (undefined8 *)xmalloc(0x18);\n      pointerToUndefined8Var13[1] = unaffected_R12;\n      *pointerToUndefined8Var13 = pointerToUndefined8Var8;\n      pointerToUndefined8Var13[2] = 0;\n      charVar1 = bfd_check_format(pointerToPointerCharVar15,1);\n      if (charVar1 != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        pointerToPointerCharVar6 = (char **)bfd_openw(unaffected_R12,*(undefined8 *)pointerToPointerCharVar15[1]);\n        if (pointerToPointerCharVar6 == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      undefined8Var11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,pointerToPointerCharVar15,0,undefined8Var11);\n      pointerToPointerCharVar6 = (char **)bfd_openw(unaffected_R12,paramUndefined8Var11);\n      if (pointerToPointerCharVar6 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      pointerToPointerCharVar3 = (char **)pointerToPointerCharVar15[0x1d];\n      if ((char **)pointerToPointerCharVar15[0x1d] == (char **)0x0) {\n        pointerToPointerCharVar3 = pointerToPointerCharVar15;\n      }\n      intVar2 = (**(code **)(pointerToPointerCharVar3[1] + 0x1e8))(pointerToPointerCharVar15);\n      longVar12 = paramLongVar19;\n      if (intVar2 == 0) {\n        if (paramLongVar19 < 0) {\n          bfd_get_archive_filename(pointerToPointerCharVar15);\n          undefined8Var11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          non_fatal(undefined8Var11);\n        }\n        else {\n          intVar2 = bfd_seek(pointerToPointerCharVar15,0,0);\n          if (intVar2 == 0) {\n            if (verbose != '\\0') {\n              pointerToCharVar10 = *pointerToPointerCharVar6;\n              undefined8Var11 = bfd_get_archive_filename(pointerToPointerCharVar15);\n              pointerToCharVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pointerToCharVar7,undefined8Var11,pointerToCharVar10);\n            }\n            voidVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (longVar12 == 0) {\n                chmod(*pointerToPointerCharVar6,paramUintVar18 | 0x100);\n                free(voidVar4);\n                charVar1 = bfd_close_all_done(pointerToPointerCharVar6);\n                pointerToPointerCharVar6 = pointerToPointerCharVar15;\n                if (charVar1 == '\\0') {\n                  bfd_nonfatal_message(unaffected_R12,0,0,0);\n                  status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              longVar14 = 0x2000;\n              if (longVar12 < 0x2001) {\n                longVar14 = longVar12;\n              }\n              longVar5 = bfd_bread(voidVar4,longVar14,pointerToPointerCharVar15);\n              pointerToPointerCharVar3 = pointerToPointerCharVar15;\n              if ((longVar14 != longVar5) ||\n                 (longVar5 = bfd_bwrite(voidVar4,longVar14,pointerToPointerCharVar6), pointerToPointerCharVar3 = pointerToPointerCharVar6, longVar14 != longVar5))\n              break;\n              longVar12 = longVar12 - longVar14;\n            }\n            bfd_nonfatal_message(0,pointerToPointerCharVar3,0,0);\n            free(voidVar4);\n          }\n          else {\n            undefined8Var11 = bfd_get_archive_filename(pointerToPointerCharVar15);\n            bfd_nonfatal(undefined8Var11);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,pointerToPointerCharVar15,0,0);\n      }\n      charVar1 = bfd_close_all_done(pointerToPointerCharVar6);\n      if (charVar1 == '\\0') {\n        bfd_nonfatal_message(unaffected_R12,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(unaffected_R12);\n      status = 1;\n    }\n    *paramPointerToLongVar8 = 0;\n    voidVar4 = (void *)xstrdup(*paramPointerToUndefined8Var7);\n    if (status == 0) {\n      pointerToCodeVar13 = bfd_close;\n    }\n    else {\n      pointerToCodeVar13 = bfd_close_all_done;\n    }\n    charVar1 = (*pointerToCodeVar13)(paramPointerToUndefined8Var7);\n    if (charVar1 == '\\0') {\n      status = 1;\n      bfd_nonfatal_message(voidVar4,0,0,0);\n    }\n    free(voidVar4);\n    voidVar4 = (void *)xstrdup(*paramPointerToUndefined8Var10);\n    charVar1 = bfd_close(paramPointerToUndefined8Var10);\n    if (charVar1 == '\\0') {\n      status = 1;\n      bfd_nonfatal_message(voidVar4,0,0,0);\n    }\n    free(voidVar4);\n  }\n  while (pointerToUndefined8Var13 != (undefined8 *)0x0) {\n    if (pointerToUndefined8Var13[2] == 0) {\n      rmdir((char *)pointerToUndefined8Var13[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)pointerToUndefined8Var13[1]);\n    }\n    free((void *)pointerToUndefined8Var13[1]);\n    pointerToUndefined8Var8 = (undefined8 *)*pointerToUndefined8Var13;\n    free(pointerToUndefined8Var13);\n    pointerToUndefined8Var13 = pointerToUndefined8Var8;\n  }\n  rmdir(paramPointerToCharVar9);\n  free(paramPointerToCharVar9);\n  return;\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_close_all_done",
                "bfd_get_arch",
                "bfd_bwrite",
                "bfd_openw",
                "non_fatal",
                "bfd_close",
                "FUN_001052a2",
                "copy_object",
                "set_times",
                "bfd_bread",
                "unlink",
                "free",
                "bfd_openr",
                "bfd_close",
                "strerror",
                "chmod",
                "rmdir",
                "make_tempdir",
                "dcgettext",
                "xmalloc",
                "__errno_location",
                "bfd_nonfatal_message",
                "bfd_seek",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_check_format",
                "concat",
                "bfd_get_archive_filename",
                "FUN_00114b84",
                "stat",
                "printf",
                "bfd_nonfatal",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_00104ea2"
        },
        "FUN_001044a0": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "main",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001044a0"
        },
        "FUN_001046e0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046e0"
        },
        "FUN_001045c0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "main",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001045c0"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "create_debug_value_00113ce0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "lVar1": "debug_value",
                "plVar2": "debug_value_ptr",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreate_debug_value_00113ce0(long input_1,long input_2,undefined input_3,undefined8 input_4,undefined8 input_5)\n\n{\n  long debug_value;\n  long *debug_value_ptr;\n  undefined result [16];\n  \n  if (input_1 != 0) {\n    debug_value = debug_make_type_constprop_0(0xd,0);\n    if (debug_value != 0) {\n      debug_value_ptr = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)debug_value_ptr + 0x11) = 0;\n      *debug_value_ptr = input_1;\n      *(undefined4 *)((long)debug_value_ptr + 0x14) = 0;\n      debug_value_ptr[1] = input_2;\n      *(undefined *)(debug_value_ptr + 2) = input_3;\n      *(long **)(debug_value + 0x10) = debug_value_ptr;\n      goto LAB_00113d2f;\n    }\n  }\n  debug_value = 0;\nLAB_00113d2f:\n  result._8_8_ = input_5;\n  result._0_8_ = debug_value;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_value_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "startOffset",
                "unaff_R14": "endOffset",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "uVar3": "messageArgument",
                "sVar4": "readSize"
            },
            "code": "\nvoid readAndResizeBuffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 messageArgument;\n  size_t readSize;\n  FILE *file;\n  long buffer;\n  long startOffset;\n  long endOffset;\n  \n  while( true ) {\n    readSize = fread((void *)(*(long *)(buffer + 0x20) + startOffset),1,endOffset - startOffset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      messageArgument = *(undefined8 *)(buffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(errorMessage,messageArgument);\n    }\n    startOffset = startOffset + readSize;\n    error = feof(file);\n    if (error != 0) break;\n    if (startOffset == endOffset) {\n      endOffset = startOffset * 2;\n      messageArgument = xrealloc(*(undefined8 *)(buffer + 0x20),endOffset);\n      *(undefined8 *)(buffer + 0x20) = messageArgument;\n    }\n  }\n  *(long *)(buffer + 0x18) = startOffset;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "FUN_00114dc7",
                "ferror",
                "fread",
                "feof",
                "dcgettext",
                "fclose",
                "fatal",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_buffer_00114dc7"
        },
        "FUN_00116b80": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00116b80"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_binary_data_00119f70",
                "param_1": "header",
                "param_2": "data",
                "uVar1": "format_version",
                "cVar2": "error_flag",
                "iVar3": "arch_mach_value",
                "uVar4": "endian_string1",
                "uVar5": "endian_string2",
                "__format": "format_string",
                "lVar6": "required_size",
                "uVar7": "printable_arch_mach",
                "lVar8": "realloc_pointer"
            },
            "code": "\nundefined4 process_binary_data_00119f70(undefined8 *header,undefined8 *data)\n\n{\n  undefined4 format_version;\n  char error_flag;\n  int arch_mach_value;\n  undefined8 endian_string1;\n  undefined8 endian_string2;\n  char *format_string;\n  long required_size;\n  undefined8 printable_arch_mach;\n  long realloc_pointer;\n  \n  arch_mach_value = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = arch_mach_value;\n  if ((ulong)data[2] < (ulong)((long)arch_mach_value * 0x60)) {\n    required_size = 0x3000;\n    if (0x3f < arch_mach_value) {\n      required_size = (long)arch_mach_value * 0xc0;\n    }\n    realloc_pointer = xrealloc(data[3]);\n    data[3] = realloc_pointer;\n    memset((void *)(realloc_pointer + data[2]),0,required_size - data[2]);\n    data[2] = required_size;\n  }\n  format_version = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header;\n  endian_string1 = endian_string(format_version);\n  endian_string2 = endian_string(*(undefined4 *)(header + 2));\n  printable_arch_mach = *header;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,printable_arch_mach,endian_string2,endian_string1);\n  required_size = bfd_openw(*data,*header);\n  if (required_size == 0) {\n    bfd_nonfatal(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    arch_mach_value = 2;\n    error_flag = bfd_set_format(required_size,1);\n    if (error_flag == '\\0') {\n      arch_mach_value = bfd_get_error();\n      if (arch_mach_value != 5) {\n        bfd_nonfatal(*header);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        error_flag = (**(code **)(*(long *)(required_size + 8) + 0x2a0))(required_size,arch_mach_value,0);\n        if (error_flag != '\\0') {\n          printable_arch_mach = bfd_printable_arch_mach(arch_mach_value,0);\n          printf(\"  %s\\n\",printable_arch_mach);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(arch_mach_value - 2)) =\n               1;\n        }\n        arch_mach_value = arch_mach_value + 1;\n      } while (arch_mach_value != 0x57);\n    }\n    bfd_close_all_done(required_size);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "endian_string",
                "bfd_close_all_done",
                "bfd_get_error",
                "dcgettext",
                "bfd_set_format",
                "do_display_target.cold",
                "bfd_openw",
                "memset",
                "printf",
                "xrealloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "process_binary_data_00119f70"
        },
        "FUN_00128150": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128150",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00128150"
        },
        "FUN_00128030": {
            "renaming": {},
            "code": "\n\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128030",
            "calling": [
                "strcasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128030"
        },
        "FUN_00104080": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104080"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_data_to_file_00115a90",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "param_3": "file_status_pointer",
                "iVar1": "original_errno",
                "__fd": "destination_file_descriptor",
                "iVar2": "bytes_read",
                "_Var3": "seek_offset",
                "uVar4": "return_value",
                "sVar5": "bytes_written",
                "piVar6": "errno_pointer",
                "local_2038": "buffer"
            },
            "code": "\nulong copy_data_to_file_00115a90(int source_file_descriptor,char *destination_file_path,long file_status_pointer)\n\n{\n  int original_errno;\n  int destination_file_descriptor;\n  int bytes_read;\n  __off_t seek_offset;\n  ulong return_value;\n  size_t bytes_written;\n  int *errno_pointer;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (seek_offset = lseek(source_file_descriptor,0,0), seek_offset == 0)) {\n    destination_file_descriptor = open(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      return_value = simple_copy_cold();\n      return return_value;\n    }\n    do {\n      return_value = read(source_file_descriptor,buffer,0x2000);\n      bytes_read = (int)return_value;\n      if (bytes_read < 1) {\n        errno_pointer = __errno_location();\n        original_errno = *errno_pointer;\n        fchmod(destination_file_descriptor,*(__mode_t *)(file_status_pointer + 0x18));\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (bytes_read != 0) {\n          *errno_pointer = original_errno;\n          return 0xffffffff;\n        }\n        return return_value & 0xffffffff;\n      }\n      bytes_written = write(destination_file_descriptor,buffer,(long)bytes_read);\n    } while (bytes_written == (long)bytes_read);\n    errno_pointer = __errno_location();\n    bytes_read = *errno_pointer;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_pointer = bytes_read;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close",
                "simple_copy.cold",
                "read",
                "write",
                "fchmod",
                "lseek",
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_data_to_file_00115a90"
        },
        "FUN_00128390": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128390",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00128390"
        },
        "FUN_00128158": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128158",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00128158"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_with_reason_00108200",
                "unaff_RBP": "filePath",
                "unaff_R12B": "shouldSetTimes",
                "unaff_R13": "errorCode",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] copyFileWithReason_00108200(void)\n\n{\n  int *errnoLocation;\n  undefined8 uVar2;\n  char *filePath;\n  char shouldSetTimes;\n  ulong errorCode;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  uVar2 = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(uVar2);\n  unlink(filePath);\n  if (shouldSetTimes != '\\0') {\n    set_times();\n  }\n  returnValue._0_8_ = errorCode & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "set_times",
                "dcgettext",
                "unlink",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00108200"
        }
    },
    "used_tokens": 260520,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00116aa0",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00104000",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00116b40",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ],
        [
            "FUN_00104cc1",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114690",
            "FUN_00114460",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00116110",
            "FUN_00104ea2"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_00112c1f",
            "FUN_00112b6e",
            "FUN_00113a4d",
            "FUN_0010b0fa",
            "FUN_0010dac0",
            "FUN_0010c95e"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_0010847a",
            "FUN_001163d0"
        ]
    ],
    "locked_functions": []
}