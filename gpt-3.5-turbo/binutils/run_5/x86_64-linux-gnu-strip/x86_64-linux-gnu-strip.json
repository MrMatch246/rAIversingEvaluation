{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "set_param_value_00113dfe",
                "param_1": "param",
                "param_2": "value",
                "lVar1": "dataPointer"
            },
            "code": "\nvoid setParamValue_00113dfe(undefined4 param,undefined value)\n\n{\n  long dataPointer;\n  \n  dataPointer = initialize_data_00112904(3,param);\n  if (dataPointer != 0) {\n    *(undefined *)(dataPointer + 0x10) = value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "set_param_value_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_string_with_delimiter_0010ab4d",
                "param_1": "data",
                "param_2": "string",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "structPtr",
                "lVar2": "structData",
                "auVar3": "result",
                "sVar4": "stringLength",
                "pcVar5": "destination",
                "sVar6": "destinationLength",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16] appendStringWithDelimiter_0010ab4d(long data,char *string,undefined8 value1,undefined8 value2)\n\n{\n  ulong structPtr;\n  long structData;\n  undefined result [16];\n  size_t stringLength;\n  char *destination;\n  size_t destinationLength;\n  undefined returnValue [16];\n  \n  structPtr = *(ulong *)(data + 0x60);\n  if ((structPtr != 0) && (*(long *)(structPtr + 0x20) != 0)) {\n    destination = *(char **)(structPtr + 0x30);\n    stringLength = strlen(string);\n    if (destination == (char *)0x0) {\n      destination = (char *)xmalloc(stringLength + 3);\n      *destination = '\\0';\n    }\n    else {\n      destinationLength = strlen(destination);\n      destination = (char *)xrealloc(destination,stringLength + 4 + destinationLength);\n    }\n    stringLength = strlen(destination);\n    sprintf(destination + stringLength,\"%s::\",string);\n    structData = *(long *)(data + 0x60);\n    *(char **)(structData + 0x30) = destination;\n    returnValue._1_7_ = (undefined7)((ulong)structData >> 8);\n    returnValue[0] = 1;\n    returnValue._8_8_ = value2;\n    return returnValue;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = structPtr;\n  return result << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_string_with_delimiter_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "initialize_debug_name_type_0010c218",
                "param_1": "file_data",
                "param_2": "size",
                "param_3": "value",
                "uVar1": "error_message",
                "lVar2": "data_pointer",
                "pauVar3": "allocated_memory",
                "lVar4": "memory_block"
            },
            "code": "\n\n\nlong initialize_debug_name_type_0010c218(long file_data,long size,long value)\n\n{\n  undefined8 error_message;\n  long data_pointer;\n  undefined (*allocated_memory) [16];\n  long memory_block;\n  \n  if ((size != 0) && (value != 0)) {\n    if ((*(long *)(file_data + 8) == 0) || (*(long *)(file_data + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      data_pointer = initialize_data_00112904(0x16,0);\n      if (data_pointer != 0) {\n        allocated_memory = (undefined (*) [16])xmalloc(0x10);\n        memory_block = *(long *)(file_data + 0x10);\n        *allocated_memory = ZEXT816(0);\n        *(long *)(*allocated_memory + 8) = value;\n        *(undefined (**) [16])(data_pointer + 0x10) = allocated_memory;\n        memory_block = initialize_memory_00112925(memory_block + 0x10,size,0,3);\n        if (memory_block != 0) {\n          *(long *)(memory_block + 0x20) = data_pointer;\n          *(long *)*allocated_memory = memory_block;\n          return data_pointer;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "initialize_debug_name_type_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_00113fb0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    execute_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    execute_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = create_and_initialize_hash_table_00113f20();\n  DAT_00127a10 = create_and_initialize_hash_table_00113f20();\n  DAT_00127a28 = create_and_initialize_hash_table_00113f20();\n  DAT_00127a08 = create_and_initialize_hash_table_00113f20();\n  DAT_00127a00 = create_and_initialize_hash_table_00113f20();\n  DAT_001279f8 = create_and_initialize_hash_table_00113f20();\n  DAT_001279f0 = create_and_initialize_hash_table_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,calculate_hash_00108800,compare_strings_00108898);\n  DAT_001278e8 = create_and_initialize_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = execute_callbacks_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hashtables_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_stripped_file_usage_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        process_data_and_set_flag_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        process_data_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        process_data_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_binutils_version_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_stripped_file_usage_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    print_executable_info_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    print_binutils_version_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = string_comparison_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = extracted_binary_info_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = string_comparison_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = extracted_binary_info_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)create_filepath_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  process_archive_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_remove_file_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = get_file_information_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)create_filepath_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_bfd_error_message_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    process_archive_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_remove_file_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      execute_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  execute_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_file_usage_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          execute_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_file_usage_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    process_data_and_set_flag_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    process_data_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = parse_parameter_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    read_file_contents_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      execute_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_string_with_null_terminator_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_string_with_null_terminator_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            execute_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_string_with_null_terminator_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = check_and_execute_function_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      execute_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = process_data_00114190(pcVar32,1,uVar12);\n    lVar17 = check_and_execute_function_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = check_and_execute_function_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = parse_parameter_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = check_and_execute_function_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)check_and_execute_function_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    read_and_process_file_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = check_and_execute_function_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    read_and_process_file_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    process_data_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    read_and_process_file_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    read_and_process_file_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = check_and_execute_function_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      execute_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_symbol_redefinition_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      execute_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    process_data_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = check_and_execute_function_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      execute_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)process_data_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = process_data_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = check_and_execute_function_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = check_and_execute_function_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    read_and_process_file_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    read_and_process_file_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      execute_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = parse_parameter_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    read_file_contents_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = check_and_execute_function_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    read_and_process_file_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  execute_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "FUN_00114c20",
                "FUN_00119ed0",
                "FUN_00119970",
                "ftell",
                "FUN_00114690",
                "getc",
                "dcgettext",
                "FUN_001054af",
                "malloc",
                "FUN_00113f50",
                "htab_create_alloc",
                "FUN_00114d60",
                "filename_cmp",
                "FUN_00108d9a",
                "strerror",
                "FUN_00108898",
                "htab_find_slot",
                "FUN_00113fb0",
                "bfd_set_default_target",
                "xrealloc",
                "fread",
                "strchr",
                "FUN_00108800",
                "FUN_00119940",
                "memcpy",
                "free",
                "strcasecmp",
                "FUN_001199d0",
                "FUN_0011a480",
                "htab_elements",
                "xexit",
                "bfd_errmsg",
                "xmalloc",
                "bfd_get_error",
                "FUN_00114460",
                "FUN_00113f20",
                "fclose",
                "FUN_00113fe0",
                "textdomain",
                "bindtextdomain",
                "FUN_00115970",
                "fseek",
                "strlen",
                "strtoul",
                "FUN_00108c86",
                "strcpy",
                "strcmp",
                "bfd_set_error_program_name",
                "FUN_00114cf0",
                "close",
                "unlink_if_ordinary",
                "fprintf",
                "FUN_00114c80",
                "setlocale",
                "strncasecmp",
                "FUN_001126c0",
                "dup",
                "free",
                "memmove",
                "strncpy",
                "FUN_00114190",
                "xstrdup",
                "xmalloc_set_program_name",
                "FUN_0011a390",
                "getopt_long",
                "mkstemp",
                "FUN_00108916",
                "bfd_scan_arch",
                "fopen",
                "bfd_init",
                "FUN_00108a2a",
                "FUN_00119dd0",
                "xcalloc",
                "__errno_location",
                "strtol",
                "stat",
                "ferror"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "debug_start_block_0010be88",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "puVar1": "pointer1",
                "uVar2": "return_value",
                "puVar3": "allocated_memory",
                "puVar4": "temp_pointer",
                "lVar5": "temp_long",
                "puVar6": "last_pointer",
                "puVar7": "temp_allocated_memory",
                "bVar8": "temp_byte",
                "auVar9": "output",
                "_stderr": "file_descriptor"
            },
            "code": "\n\n\nundefined  [16] debug_start_block_0010be88(long input_param1,undefined8 input_param2,undefined8 input_param3,undefined8 input_param4)\n\n{\n  undefined8 *pointer1;\n  undefined8 return_value;\n  undefined4 *allocated_memory;\n  undefined8 *temp_pointer;\n  long temp_long;\n  undefined8 *last_pointer;\n  undefined4 *temp_allocated_memory;\n  byte temp_byte;\n  undefined output [16];\n  \n  temp_byte = 0;\n  if ((*(long *)(input_param1 + 8) == 0) || (*(long *)(input_param1 + 0x20) == 0)) {\n    return_value = dcgettext(0,\"debug_start_block_0010be88: no current block\",5);\n    fprintf(file_descriptor,\"%s\\n\",return_value);\n    return_value = 0;\n  }\n  else {\n    allocated_memory = (undefined4 *)xmalloc(0x30);\n    temp_allocated_memory = allocated_memory;\n    for (temp_long = 0xc; temp_long != 0; temp_long = temp_long + -1) {\n      *temp_allocated_memory = 0;\n      temp_allocated_memory = temp_allocated_memory + (ulong)temp_byte * -2 + 1;\n    }\n    temp_long = *(long *)(input_param1 + 0x20);\n    *(undefined8 *)(allocated_memory + 6) = input_param2;\n    *(undefined8 *)(allocated_memory + 8) = 0xffffffffffffffff;\n    *(long *)(allocated_memory + 2) = temp_long;\n    pointer1 = *(undefined8 **)(temp_long + 0x10);\n    last_pointer = (undefined8 *)(temp_long + 0x10);\n    while (temp_pointer = pointer1, temp_pointer != (undefined8 *)0x0) {\n      last_pointer = temp_pointer;\n      pointer1 = (undefined8 *)*temp_pointer;\n    }\n    *last_pointer = allocated_memory;\n    return_value = 1;\n    *(undefined4 **)(input_param1 + 0x20) = allocated_memory;\n  }\n  output._8_8_ = input_param4;\n  output._0_8_ = return_value;\n  return output;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_start_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_00115dc0",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_custom_string_0010ba08",
                "param_1": "customArray",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "structSize",
                "param_5": "param5",
                "cVar1": "charValue",
                "iVar2": "intValue",
                "lVar3": "longValue",
                "__s": "pointer",
                "sVar4": "length1",
                "sVar5": "length2",
                "sVar6": "length3",
                "__s_00": "customString",
                "uVar7": "warningMsg",
                "uVar8": "result",
                "pcVar9": "flagPtr",
                "extract_and_free_ptr_00109b2f": "extractAndFreePtr",
                "xmalloc": "allocateMemory",
                "dcgettext": "getString",
                "print_error_message_00119ed0": "printErrorMessage",
                "sprintf": "formatString",
                "free": "deallocateMemory"
            },
            "code": "\nundefined8\ngenerateCustomString_0010ba08(undefined8 *customArray,char *fieldName,undefined8 param3,ulong structSize,int param5)\n\n{\n  char charValue;\n  int intValue;\n  long longValue;\n  char *pointer;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  char *customString;\n  undefined8 warningMsg;\n  undefined8 result;\n  char *flagPtr;\n  \n  charValue = *(char *)(customArray[0xc] + 0x1c);\n  intValue = *(int *)(customArray[0xc] + 0x18);\n  pointer = (char *)extractAndFreePtr();\n  if (*(char **)(customArray[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length1 = strlen(*(char **)(customArray[0xc] + 0x20));\n    length2 = strlen(fieldName);\n    length3 = strlen(pointer);\n    customString = (char *)xmalloc(length1 + 0x32 + length2 + length3);\n    if (param5 == 1) {\n      flagPtr = \"/1\";\n    }\n    else {\n      flagPtr = \"/0\";\n      if ((param5 != 2) && (flagPtr = \"\", param5 != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((structSize == 0) && (structSize = (ulong)(uint)(intValue * 8), structSize == 0)) {\n      result = *(undefined8 *)*customArray;\n      warningMsg = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      printErrorMessage(warningMsg,result,fieldName);\n    }\n    sprintf(customString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(customArray[0xc] + 0x20),fieldName,flagPtr,pointer,\n            param3,structSize);\n    free(*(void **)(customArray[0xc] + 0x20));\n    longValue = customArray[0xc];\n    *(char **)(longValue + 0x20) = customString;\n    if (charValue != '\\0') {\n      *(undefined *)(longValue + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)longValue >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "abort",
                "xmalloc",
                "strlen",
                "dcgettext",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_custom_string_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "add_entry_to_table_0010aa53",
                "param_1": "tablePtr",
                "param_2": "value",
                "param_3": "character",
                "param_4": "flag",
                "cVar1": "charFlag",
                "__s": "string",
                "sVar5": "stringLength",
                "pcVar6": "newEntry",
                "cVar3": "newFlag",
                "lVar2": "table",
                "uVar8": "success",
                "uVar9": "index",
                "uVar10": "lastIndex",
                "uVar4": "iterator",
                "lVar7": "newTable"
            },
            "code": "\nundefined8 addEntryToTable_0010aa53(long tablePtr,undefined8 value,char character,int flag)\n\n{\n  char charFlag;\n  long table;\n  char newFlag;\n  uint iterator;\n  char *string;\n  size_t stringLength;\n  char *newEntry;\n  long newTable;\n  undefined8 success;\n  ulong index;\n  ulong lastIndex;\n  \n  charFlag = *(char *)(*(long *)(tablePtr + 0x60) + 0x1c);\n  string = (char *)extract_and_free_ptr_00109b2f();\n  stringLength = strlen(string);\n  newEntry = (char *)xmalloc(stringLength + 0x19);\n  *newEntry = character + '0';\n  if (flag == 1) {\n    newFlag = '1';\n  }\n  else {\n    newFlag = '0';\n    if ((flag != 2) && (newFlag = '2', flag != 0)) {\n                    \n      abort();\n    }\n  }\n  newEntry[1] = newFlag;\n  sprintf(newEntry + 2,\"%ld,%s;\",value);\n  free(string);\n  table = *(long *)(tablePtr + 0x60);\n  success = 0;\n  if ((table != 0) && (*(long *)(table + 0x20) != 0)) {\n    table = *(long *)(table + 0x28);\n    lastIndex = 0;\n    if (table != 0) {\n      iterator = 0;\n      do {\n        index = (ulong)iterator;\n        lastIndex = (ulong)iterator;\n        iterator = iterator + 1;\n      } while (*(long *)(table + index * 8) != 0);\n    }\n    newTable = xrealloc(table,(ulong)((int)lastIndex + 2) << 3);\n    *(char **)(newTable + lastIndex * 8) = newEntry;\n    *(undefined8 *)(newTable + (ulong)((int)lastIndex + 1) * 8) = 0;\n    table = *(long *)(tablePtr + 0x60);\n    *(long *)(table + 0x28) = newTable;\n    if (charFlag != '\\0') {\n      *(undefined *)(table + 0x1c) = 1;\n    }\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "xrealloc",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "add_entry_to_table_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "process_debug_info_0011173a",
                "param_1": "functionAddress",
                "param_2": "debugInfo",
                "param_3": "recordType",
                "param_4": "recordLength",
                "param_5": "address",
                "param_6": "name"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined processDebugInfo_0011173a(undefined8 functionAddress,long *debugInfo,int recordType,int recordLength,ulong address,\n                      char *name)\n\n{\n  char cVar1;\n  byte bVar2;\n  void *__ptr;\n  char cVar3;\n  undefined uVar4;\n  int iVar5;\n  undefined8 *puVar6;\n  long *plVar7;\n  char *pcVar8;\n  undefined8 uVar9;\n  long lVar10;\n  long lVar11;\n  long lVar12;\n  long **pplVar13;\n  ulong uVar14;\n  ulong uVar15;\n  char *pcVar16;\n  uint uVar17;\n  long **pplVar18;\n  double dVar19;\n  char *local_48;\n  long **local_40 [2];\n  \n  if (debugInfo[4] != 0) {\n    if (((recordType == 100) && (*name != '\\0')) && (debugInfo[5] == address)) goto LAB_00111a06;\n    cVar3 = initialize_debug_info_0010bbd3(functionAddress);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debugInfo + 0x44) = 0;\n    *(undefined4 *)(debugInfo + 8) = 0;\n    debugInfo[9] = debugInfo[4];\n    if (*(char *)(debugInfo + 1) == '\\0') {\n      debugInfo[6] = debugInfo[5];\n    }\n    *(undefined4 *)(debugInfo + 0x10) = 1;\n    puVar6 = (undefined8 *)xmalloc(8);\n    debugInfo[0x11] = (long)puVar6;\n    *puVar6 = 0;\n    debugInfo[4] = 0;\n  }\n  strlen(name);\n  if (recordType == 0x84) {\nLAB_00111ab7:\n    uVar4 = add_source_file_00108f08(functionAddress,name);\n    return uVar4;\n  }\n  if (recordType < 0x85) {\n    if (recordType == 0x3c) {\n      iVar5 = strcmp(name,\"gcc2_compiled.\");\n      if (iVar5 == 0) {\n        *(undefined4 *)(debugInfo + 8) = 2;\n        return 1;\n      }\n      iVar5 = strcmp(name,\"gcc_compiled.\");\n      if (iVar5 == 0) {\n        *(undefined4 *)(debugInfo + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debugInfo + 0x44) = 1;\n      return 1;\n    }\n    if (recordType < 0x3d) {\n      if (recordType == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(debugInfo + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debugInfo + 1) != '\\0') {\n            address = address + debugInfo[7];\n          }\n          cVar3 = process_records_0010c1c6(functionAddress,debugInfo);\n          if (cVar3 != '\\0') {\n            cVar3 = end_debug_function_0010be1a(functionAddress,address);\n            if (cVar3 != '\\0') {\n              *(undefined *)(debugInfo + 0xc) = 0;\n              debugInfo[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debugInfo + 0xc) != '\\0') &&\n           ((address < (ulong)debugInfo[0xd] || (debugInfo[0xd] == 0xffffffffffffffff)))) {\n          debugInfo[0xd] = address;\n        }\n      }\n      else if (recordType < 0x25) {\n        if (recordType == 0xc) {\n          return 1;\n        }\n        if (recordType - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (recordType == 0x2a) {\n          return 1;\n        }\n        if (recordType == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (recordType == 100) {\nLAB_00111a06:\n        if (*(char *)(debugInfo + 0xc) != '\\0') {\n          uVar14 = address;\n          if (((*name != '\\0') && (uVar15 = debugInfo[0xd], uVar15 != 0xffffffffffffffff)) &&\n             (uVar14 = uVar15, address < uVar15)) {\n            uVar14 = address;\n          }\n          cVar3 = process_records_0010c1c6(functionAddress,debugInfo);\n          if (cVar3 == '\\0') {\n            return 0;\n          }\n          cVar3 = end_debug_function_0010be1a(functionAddress,uVar14);\n          if (cVar3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debugInfo + 0xc) = 0;\n          debugInfo[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        __ptr = (void *)debugInfo[4];\n        if (__ptr == (void *)0x0) {\n          lVar12 = xstrdup(name);\n          debugInfo[4] = lVar12;\n        }\n        else {\n          if (*name == '/') {\n            lVar12 = xstrdup(name);\n          }\n          else {\n            lVar12 = concat(__ptr,name,0);\n          }\n          debugInfo[4] = lVar12;\n          free(__ptr);\n        }\n        debugInfo[5] = address;\n        return 1;\n      }\n      if (recordType < 0x65) {\n        if (recordType == 0x44) {\n          lVar12 = 0;\n          if (*(char *)(debugInfo + 0xc) != '\\0') {\n            lVar12 = debugInfo[7];\n          }\n          uVar4 = record_debug_line_0010bf86(functionAddress,(long)recordLength,lVar12 + address);\n          return uVar4;\n        }\n        if (recordType == 0x62) {\n          return 1;\n        }\n      }\n      else if (recordType == 0x82) {\n        plVar7 = (long *)xmalloc();\n        iVar5 = *(int *)(debugInfo + 0x10);\n        lVar10 = debugInfo[10];\n        lVar11 = debugInfo[0xb];\n        plVar7[5] = 0;\n        lVar12 = debugInfo[0x11];\n        *(int *)(plVar7 + 4) = iVar5;\n        uVar17 = iVar5 + 1;\n        *(uint *)(debugInfo + 0x10) = uVar17;\n        *plVar7 = lVar11;\n        plVar7[1] = lVar10;\n        plVar7[2] = (long)name;\n        plVar7[3] = address;\n        debugInfo[10] = (long)plVar7;\n        debugInfo[0xb] = (long)plVar7;\n        lVar12 = xrealloc(lVar12,(ulong)uVar17 << 3);\n        uVar17 = *(uint *)(plVar7 + 4);\n        debugInfo[0x11] = lVar12;\n        *(undefined8 *)(lVar12 + (ulong)uVar17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    pcVar8 = strchr(name,0x3a);\n    if ((pcVar8 != (char *)0x0) && ((pcVar8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debugInfo + 0xc) != '\\0') {\n        uVar14 = debugInfo[0xd];\n        uVar15 = address;\n        if ((uVar14 != 0xffffffffffffffff) && (uVar15 = uVar14, address < uVar14)) {\n          uVar15 = address;\n        }\n        cVar3 = process_records_0010c1c6(functionAddress,debugInfo);\n        if (cVar3 == '\\0') {\n          return 0;\n        }\n        cVar3 = end_debug_function_0010be1a(functionAddress,uVar15);\n        if (cVar3 == '\\0') {\n          return 0;\n        }\n        debugInfo[0xd] = -1;\n      }\n      if (*(char *)(debugInfo + 1) != '\\0') {\n        debugInfo[7] = address;\n      }\n      *(undefined *)(debugInfo + 0xc) = 1;\n    }\n    local_48 = strchr(name,0x3a);\n    if (local_48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_48[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      cVar3 = name[1];\n      pcVar16 = \"eh_throw\";\n      if (cVar3 != 'e') {\n        if (cVar3 < 'f') {\n          if ((cVar3 != 'X') && (cVar3 != '_')) {\nLAB_00111d1a:\n            uVar9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning_00108fe8(name,uVar9);\n          }\n        }\n        else {\n          pcVar16 = \"this\";\n          if (cVar3 == 't') goto LAB_00111d62;\n          if (cVar3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      pcVar16 = (char *)0x0;\n      if ((name != local_48) && ((*name != ' ' || (local_48 != name + 1)))) {\n        pcVar16 = (char *)copy_and_null_terminate_00109a0b(name,(int)local_48 - (int)name);\n      }\n    }\nLAB_00111d62:\n    bVar2 = local_48[1];\n    pcVar8 = local_48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)bVar2 * 2) >> 2) & 1 |\n        (bVar2 == 0x2d || bVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 4;\n      goto LAB_001123e8;\n    }\n    if (bVar2 == 0) goto switchD_00111de5_caseD_44;\n    pcVar8 = local_48 + 2;\n    cVar3 = local_48[1];\n    switch(cVar3) {\n    case 'C':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      pcVar8 = \"debug_record_label: not implemented\";\n      if (lVar12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      cVar3 = record_debug_function_0010bc80(functionAddress,pcVar16,lVar12,cVar3 == 'F',address);\n      if (cVar3 != '\\0') {\n        do {\n          if (*local_48 != ';') {\n            return 1;\n          }\n          local_48 = local_48 + 1;\n          lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n        } while (lVar12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) goto LAB_0011208f;\n      lVar10 = debugInfo[3];\n      plVar7 = (long *)debugInfo[2];\n      cVar3 = *(char *)(*(long *)(*debugInfo + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (recordType == 0x24) {\n        local_48 = pcVar8;\n        do {\n          if (*local_48 != ';') {\n            return 1;\n          }\n          local_48 = local_48 + 1;\n          lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n        } while (lVar12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 2;\n      break;\n    case 'S':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      cVar3 = local_48[2];\n      if (cVar3 == 't') {\n        pcVar8 = local_48 + 3;\n      }\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,pcVar16,&local_48,local_40);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) {\n        return 1;\n      }\n      cVar1 = *(char *)(debugInfo + 0x35);\n      plVar7 = (long *)debug_tag_type_checker_0010c6be(functionAddress,pcVar16,lVar12);\n      if (plVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_40[0] != (long **)0x0) {\n        *local_40[0] = plVar7;\n      }\n      if (cVar1 != '\\0') goto LAB_001122f0;\n      pplVar13 = (long **)(debugInfo + 0x34);\n      pplVar18 = (long **)debugInfo[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      pcVar8 = local_48 + 3;\n      if (((local_48[2] != '\\0') && (pcVar8 = local_48 + 4, local_48[3] == 'n')) &&\n         (pcVar8 = local_48 + 5, pcVar16 = local_48 + 4, local_48 = pcVar8, *pcVar16 == '0')) {\n        for (; pcVar8 = local_48, *local_48 != '\\0'; local_48 = local_48 + 1) {\n          if (*local_48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 4;\n      break;\n    case 'c':\n      if (local_48[2] == '=') {\n        pcVar8 = local_48 + 4;\n        cVar3 = local_48[3];\n        local_48 = pcVar8;\n        if (cVar3 == 'i') {\n          lVar12 = strtol(pcVar8,(char **)0x0,10);\n          if (pcVar16 == (char *)0x0) {\n            return 0;\n          }\n          lVar10 = initialize_memory_with_file_00112996(functionAddress,pcVar16,4);\n          if (lVar10 != 0) {\n            *(long *)(lVar10 + 0x20) = (long)(int)lVar12;\n            return 1;\n          }\n          return 0;\n        }\n        if (cVar3 == 'r') {\n          dVar19 = strtod(pcVar8,(char **)0x0);\n          if (pcVar16 == (char *)0x0) {\n            return 0;\n          }\n          lVar12 = initialize_memory_with_file_00112996(functionAddress,pcVar16,5);\n          if (lVar12 != 0) {\n            *(double *)(lVar12 + 0x20) = dVar19;\n            return 1;\n          }\n          return 0;\n        }\n        if (cVar3 == 'e') {\n          lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n          if (lVar12 == 0) {\n            return 0;\n          }\n          pcVar8 = local_48;\n          if (*local_48 == ',') {\n            lVar10 = strtol(local_48,(char **)0x0,10);\n            if (pcVar16 == (char *)0x0) {\n              return 0;\n            }\n            lVar11 = initialize_memory_with_file_00112996(functionAddress,pcVar16,6);\n            if (lVar11 != 0) {\n              plVar7 = (long *)xmalloc(0x10);\n              *plVar7 = lVar12;\n              plVar7[1] = (long)(int)lVar10;\n              *(long **)(lVar11 + 0x20) = plVar7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_48[2] == 'F') {\n        local_48 = local_48 + 3;\n        lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n        if (lVar12 == 0) {\n          return 0;\n        }\n        uVar9 = allocate_data_structure_00113ce0(lVar12,0,0);\n        lVar12 = initialize_or_get_data_00113d3a(uVar9);\n      }\n      else {\n        local_48 = pcVar8;\n        lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      }\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 1;\n      break;\n    case 'r':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 5;\nLAB_001123e8:\n      cVar3 = process_data_0010c139(functionAddress,debugInfo,pcVar16,lVar12,uVar9,address);\n      goto joined_r0x001123f8;\n    case 't':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,pcVar16,&local_48,local_40);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) {\n        return 1;\n      }\n      plVar7 = (long *)initialize_debug_name_type_0010c218(functionAddress,pcVar16,lVar12);\n      if (plVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_40[0] = plVar7;\n      return 1;\n    case 'v':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(functionAddress,debugInfo,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 3;\n    }\n    cVar3 = record_parameter_0010bd62(functionAddress,pcVar16,lVar12,uVar9,address);\n    goto joined_r0x001123f8;\n  }\n  if (recordType == 0xe0) {\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (recordLength == 1)) {\n      return 1;\n    }\n    cVar3 = process_records_0010c1c6(functionAddress,debugInfo);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    cVar3 = process_end_of_block_0010bf20(functionAddress,debugInfo[7] + debugInfo[6] + address);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    debugInfo = debugInfo + 0xe;\n    *(int *)debugInfo = *(int *)debugInfo + -1;\n    pcVar8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debugInfo) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < recordType) {\n      if (recordType == 0xe2) {\n        pcVar8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        pcVar8 = \"debug_end_common_block: not implemented\";\n        if (recordType != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      uVar9 = dcgettext(0,pcVar8,5);\n      fprintf(_stderr,\"%s\\n\",uVar9);\n      return 0;\n    }\n    if (recordType != 0xc0) {\n      if (recordType == 0xc2) {\n        iVar5 = *(int *)(debugInfo + 0x10);\n        *(uint *)(debugInfo + 0x10) = iVar5 + 1U;\n        lVar12 = xrealloc(debugInfo[0x11],(ulong)(iVar5 + 1U) << 3);\n        puVar6 = (undefined8 *)debugInfo[0xb];\n        debugInfo[0x11] = lVar12;\n        while( true ) {\n          if (puVar6 == (undefined8 *)0x0) {\n            uVar9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning_00108fe8(name,uVar9);\n            *(undefined8 *)(debugInfo[0x11] + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == puVar6[3]) && (iVar5 = strcmp((char *)puVar6[2],name), iVar5 == 0))\n          break;\n          puVar6 = (undefined8 *)*puVar6;\n        }\n        *(undefined8 *)(lVar12 + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = puVar6[5];\n        return 1;\n      }\n      if (recordType == 0xa2) {\n        lVar12 = debugInfo[10];\n        if (lVar12 != 0) {\n          lVar10 = *(long *)(lVar12 + 8);\n          uVar17 = *(uint *)(lVar12 + 0x20);\n          debugInfo[10] = lVar10;\n          if ((uVar17 < *(uint *)(debugInfo + 0x10)) &&\n             (*(undefined8 *)(lVar12 + 0x28) = *(undefined8 *)(debugInfo[0x11] + (ulong)uVar17 * 8),\n             lVar10 != 0)) {\n            name = *(char **)(lVar10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)debugInfo[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (recordLength == 1)) {\n      return 1;\n    }\n    if (*(char *)(debugInfo + 0xc) != '\\0') {\n      cVar3 = debug_start_block_0010be88(functionAddress,debugInfo[7] + debugInfo[6] + address);\n      if (cVar3 == '\\0') {\n        return 0;\n      }\n      cVar3 = process_records_0010c1c6(functionAddress,debugInfo);\n      if (cVar3 != '\\0') {\n        *(int *)(debugInfo + 0xe) = *(int *)(debugInfo + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    pcVar8 = \"N_LBRAC not within function\\n\";\n  }\n  pcVar8 = (char *)dcgettext(0,pcVar8,5);\n  fprintf(_stderr,pcVar8);\n  return 0;\ncode_r0x00111cc7:\n  local_48 = local_48 + 2;\n  local_48 = strchr(local_48,0x3a);\n  if (local_48 == (char *)0x0) {\n    pcVar8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_48 = pcVar8;\n    print_bad_stab_message_00108fb9(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (cVar3 != 't') {\n      return 1;\n    }\n    plVar7 = (long *)initialize_debug_name_type_0010c218(functionAddress,pcVar16,plVar7);\n    if (plVar7 != (long *)0x0) {\n      if (local_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_40[0] = plVar7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *pcVar16) &&\n     (iVar5 = strcmp((char *)pplVar18[1],pcVar16), iVar5 == 0)) {\n    pplVar18[3] = plVar7;\n    *pplVar13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  pplVar13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (lVar10 < 1) {\nLAB_0011208f:\n    uVar9 = 1;\nLAB_001121c4:\n    cVar3 = record_variable_0010c05d(functionAddress,pcVar16,lVar12,uVar9,address);\njoined_r0x001123f8:\n    if (cVar3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  pcVar8 = *(char **)(*plVar7 + 8);\n  if ((cVar3 != '\\0') && (cVar3 == *pcVar8)) {\n    pcVar8 = pcVar8 + 1;\n  }\n  if ((*pcVar8 == *pcVar16) && (iVar5 = strcmp(pcVar8,pcVar16), iVar5 == 0)) {\n    address = *(long *)(*plVar7 + 0x10) + *(long *)(*(long *)(*plVar7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  lVar10 = lVar10 + -1;\n  plVar7 = plVar7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "strlen",
                "dcgettext",
                "FUN_0010bf86",
                "strtod",
                "FUN_00112996",
                "strcmp",
                "FUN_0010ee3f",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_00108fb9",
                "fprintf",
                "FUN_00108f08",
                "xrealloc",
                "strchr",
                "free",
                "FUN_0010c6be",
                "FUN_0010c139",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010bd62",
                "xstrdup",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "xmalloc",
                "strtol",
                "FUN_00113d3a",
                "FUN_0010bf20",
                "FUN_0010c218",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_info_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "isValid",
                "iVar2": "errorNumber",
                "uVar3": "result",
                "lVar4": "relocData",
                "puVar5": "allocation",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "unrecoveredJumpTable",
                "puVar7": "resultPointer",
                "puVar8": "tempPointer",
                "uVar9": "index",
                "uStack_38": "stackValue"
            },
            "code": "\nvoid process_binary_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char isValid;\n  int errorNumber;\n  undefined8 result;\n  long relocData;\n  undefined8 *allocation;\n  ulong relocCount;\n  code *unrecoveredJumpTable;\n  undefined8 *resultPointer;\n  undefined8 *tempPointer;\n  ulong index;\n  undefined8 stackValue;\n  \n  isValid = validate_selected_item_00115f50(param1,param2,0);\n  if (isValid != '\\0') {\n    return;\n  }\n  result = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (relocData = process_data_00114190(*param2,0,0x100), relocData == 0)) {\n    relocData = bfd_get_reloc_upper_bound(param1,param2);\n    if (relocData < 0) {\n      if ((relocData != -1) || (errorNumber = bfd_get_error(), errorNumber != 5)) {\n        DAT_00127a40 = 1;\n        result = 0;\nLAB_00108315:\n        print_bfd_error_message_001126c0(0,param1,param2,result,stackValue);\n        return;\n      }\n    }\n    else if (relocData != 0) {\n      allocation = (undefined8 *)param2[0xe];\n      if (allocation == (undefined8 *)0x0) {\n        allocation = (undefined8 *)bfd_alloc(param3);\n        if (allocation == (undefined8 *)0x0) {\n          print_bfd_error_message_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(param1,param2,allocation,DAT_001278d0);\n        if ((long)relocCount < 0) {\n          DAT_00127a40 = 1;\n          result = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        resultPointer = allocation;\n        for (index = 0; index != relocCount; index = index + 1) {\n          tempPointer = resultPointer;\n          if (((*(long **)allocation[index] != (long *)0x0) &&\n              (relocData = **(long **)allocation[index], relocData != 0)) &&\n             (isValid = check_pattern_00115d70(*(undefined8 *)(relocData + 8),DAT_00127a28), isValid != '\\0')) {\n            tempPointer = resultPointer + 1;\n            *resultPointer = allocation[index];\n          }\n          resultPointer = tempPointer;\n        }\n        *resultPointer = 0;\n        relocCount = (long)resultPointer - (long)allocation >> 3;\n      }\n      unrecoveredJumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        allocation = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  allocation = (undefined8 *)0x0;\n  unrecoveredJumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)(param3,result,allocation,relocCount);\n  return;\n}\n\n",
            "called": [
                "FUN_001082df",
                "FUN_00115f50",
                "xexit",
                "bfd_alloc",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error",
                "FUN_00114190",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "FUN_0011a110",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_extract_data_0010d559",
                "param_1": "data_ptr",
                "param_2": "byte_stream_ptr",
                "param_3": "data_length_ptr",
                "bVar1": "first_byte",
                "pbVar2": "byte_ptr",
                "cVar3": "parse_result",
                "uVar4": "parsed_integer",
                "iVar5": "comparison_result",
                "ppcVar6": "temporary_ptr",
                "sVar7": "string_length",
                "lVar8": "matching_entry",
                "plVar9": "entry_ptr",
                "pcVar10": "string_ptr",
                "__s1": "entry_string",
                "__ptr": "temp_ptr",
                "pbVar11": "updated_byte_ptr",
                "uVar12": "type_search_flag",
                "local_64": "loop_counter",
                "local_40": "string_array"
            },
            "code": "\nundefined8 parse_and_extract_data_0010d559(undefined8 *data_ptr,byte **byte_stream_ptr,long *data_length_ptr)\n\n{\n  byte first_byte;\n  byte *byte_ptr;\n  char parse_result;\n  uint parsed_integer;\n  int comparison_result;\n  char **temporary_ptr;\n  size_t string_length;\n  long matching_entry;\n  long *entry_ptr;\n  char *string_ptr;\n  char *entry_string;\n  void *temp_ptr;\n  byte *updated_byte_ptr;\n  undefined8 type_search_flag;\n  byte *__nptr;\n  int loop_counter;\n  char *string_array [2];\n  \n  byte_ptr = *byte_stream_ptr;\n  first_byte = byte_ptr[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    loop_counter = (char)first_byte + -0x30;\n    if (byte_ptr[2] == 0x5f) {\n      *byte_stream_ptr = byte_ptr + 1;\n    }\n    updated_byte_ptr = *byte_stream_ptr + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&_sch_istable)[(ulong)byte_ptr[2] * 2] & 4) == 0)) ||\n       (byte_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = byte_ptr + 2;\n    matching_entry = strtol((char *)__nptr,(char **)0x0,10);\n    loop_counter = (int)matching_entry;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    updated_byte_ptr = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *byte_stream_ptr = updated_byte_ptr;\n  temporary_ptr = (char **)0x0;\n  if (data_length_ptr != (long *)0x0) {\n    temporary_ptr = string_array;\n  }\n  matching_entry = 0;\n  while( true ) {\n    while( true ) {\n      loop_counter = loop_counter + -1;\n      if (loop_counter == -1) {\n        if (data_length_ptr != (long *)0x0) {\n          *data_length_ptr = matching_entry;\n        }\n        return 1;\n      }\n      if (**byte_stream_ptr == 0x5f) {\n        *byte_stream_ptr = *byte_stream_ptr + 1;\n      }\n      if (**byte_stream_ptr != 0x74) break;\n      parse_result = parse_and_extract_value_0010d21c(data_ptr,byte_stream_ptr,temporary_ptr);\n      string_ptr = string_array[0];\n      if (parse_result == '\\0') {\n        return 0;\n      }\n      if (data_length_ptr != (long *)0x0) {\n        string_length = strlen(string_array[0]);\n        matching_entry = find_matching_entry_0010afd5(*data_ptr,data_ptr[1],string_ptr,string_length & 0xffffffff,9);\n        free(string_ptr);\n        if (matching_entry == 0) {\n          return 0;\n        }\n      }\n    }\n    parsed_integer = parse_integer_from_byte_stream_00108e76(byte_stream_ptr);\n    string_length = strlen((char *)*byte_stream_ptr);\n    if (string_length < parsed_integer) break;\n    if (data_length_ptr != (long *)0x0) {\n      if ((matching_entry != 0) && (entry_ptr = (long *)extract_real_type_and_value_00113b1e(matching_entry), entry_ptr != (long *)0x0)) {\n        string_ptr = (char *)copy_and_null_terminate_00109a0b(*byte_stream_ptr,parsed_integer);\n        for (; matching_entry = *entry_ptr, matching_entry != 0; entry_ptr = entry_ptr + 1) {\n          matching_entry = *(long *)(matching_entry + 8);\n          if (matching_entry == 0) {\n            free(string_ptr);\n            return 0;\n          }\n          entry_string = (char *)extract_value_from_binary_001129f4(matching_entry);\n          if ((entry_string != (char *)0x0) && (comparison_result = strcmp(entry_string,string_ptr), comparison_result == 0)) break;\n        }\n        free(string_ptr);\n        if (matching_entry != 0) goto LAB_0010d7ad;\n      }\n      type_search_flag = 9;\n      if (loop_counter == 0) {\n        temp_ptr = (void *)copy_and_null_terminate_00109a0b(*byte_stream_ptr,parsed_integer);\n        matching_entry = find_named_type_0010914e(*data_ptr,temp_ptr);\n        free(temp_ptr);\n        if (matching_entry != 0) goto LAB_0010d7ad;\n        type_search_flag = 0;\n      }\n      matching_entry = find_matching_entry_0010afd5(*data_ptr,data_ptr[1],*byte_stream_ptr,parsed_integer,type_search_flag);\n      if (matching_entry == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *byte_stream_ptr = *byte_stream_ptr + parsed_integer;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(byte_ptr);\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010afd5",
                "strlen",
                "FUN_001129f4",
                "strtol",
                "FUN_00109a0b",
                "FUN_00113b1e",
                "FUN_00108e76",
                "strcmp",
                "FUN_0010914e",
                "FUN_0010911f",
                "free",
                "FUN_0010d21c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_extract_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "formatString",
                "param_2": "variableArgs",
                "_stdout": "outputStream",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *formatString,__gnuc_va_list variableArgs)\n\n{\n  fflush(outputStream);\n  fprintf(errorStream,\"%s: \",DAT_00127600);\n  vfprintf(errorStream,formatString,variableArgs);\n  putc(10,errorStream);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memory_to_free"
            },
            "code": "\nvoid cleanup_and_free_memory_00108466(void)\n\n{\n  void *memory_to_free;\n  \n  DAT_00127a40 = 1;\n  print_bfd_error_message_001126c0(0);\n  free(memory_to_free);\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_integer_from_byte_stream_00108e76",
                "param_1": "byteStream",
                "bVar1": "currentByte",
                "iVar2": "parsedInteger"
            },
            "code": "\nint parseIntegerFromByteStream_00108e76(byte **byteStream)\n\n{\n  byte currentByte;\n  int parsedInteger;\n  \n  parsedInteger = 0;\n  while( true ) {\n    currentByte = **byteStream;\n    if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) break;\n    *byteStream = *byteStream + 1;\n    parsedInteger = parsedInteger * 10 + -0x30 + (int)(char)currentByte;\n  }\n  return parsedInteger;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_integer_from_byte_stream_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input",
                "param_2": "hash_param_2",
                "param_3": "hash_param_3",
                "lVar1": "new_hash"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input,undefined8 hash_param_2,undefined8 hash_param_3)\n\n{\n  long new_hash;\n  \n  if (((input != 0) || (input = bfd_hash_allocate(hash_param_2,0x30), input != 0)) &&\n     (new_hash = bfd_hash_newfunc(input,hash_param_2,hash_param_3), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_param_value_thunk_0010e439",
                "param_1": "object_address",
                "param_2": "value",
                "process_string_0010e2f0": "process_string"
            },
            "code": "\nvoid set_param_value_thunk_0010e439(long object_address,undefined8 value)\n\n{\n  *(undefined8 *)(object_address + 0x210) = value;\n  process_string(object_address,0x84,0,0,value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_value_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_permission_0011283f",
                "param_1": "directory_path",
                "param_2": "default_path",
                "iVar1": "access_result",
                "sStack_a8": "stat_info"
            },
            "code": "\nchar * check_directory_permission_0011283f(char *directory_path,char *default_path)\n\n{\n  int access_result;\n  stat stat_info;\n  \n  if ((default_path == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&stat_info);\n      if ((access_result == 0) && ((stat_info.st_mode & 0xf000) == 0x4000)) {\n        default_path = directory_path;\n      }\n    }\n  }\n  return default_path;\n}\n\n",
            "called": [
                "access",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_permission_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_set_error_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPointer"
            },
            "code": "\nundefined8 closeFileAndSetError_00108237(void)\n\n{\n  int iVar1;\n  int *errnoPointer;\n  int fileDescriptor;\n  \n  errnoPointer = __errno_location();\n  iVar1 = *errnoPointer;\n  close(fileDescriptor);\n  *errnoPointer = iVar1;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "functionContext",
                "param_2": "filename",
                "param_3": "recordSize",
                "param_4": "debugLevel",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "errorString",
                "plVar2": "record",
                "puVar3": "debugBuffer",
                "lVar4": "index",
                "puVar5": "bufferPtr",
                "pcVar6": "defaultFilename",
                "bVar7": "flag",
                "auVar8": "returnVal"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long functionContext,char *filename,long recordSize,uint debugLevel,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined8 errorString;\n  long *record;\n  undefined4 *debugBuffer;\n  long index;\n  undefined4 *bufferPtr;\n  char *defaultFilename;\n  byte flag;\n  undefined returnVal [16];\n  \n  flag = 0;\n  defaultFilename = \"\";\n  if (filename != (char *)0x0) {\n    defaultFilename = filename;\n  }\n  if (recordSize != 0) {\n    if (*(long *)(functionContext + 8) == 0) {\n      errorString = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",errorString);\n    }\n    else {\n      record = (long *)xmalloc(0x18);\n      *record = recordSize;\n      *(undefined (*) [16])(record + 1) = ZEXT816(0);\n      debugBuffer = (undefined4 *)xmalloc(0x30);\n      *(long **)(functionContext + 0x18) = record;\n      record[2] = (long)debugBuffer;\n      bufferPtr = debugBuffer;\n      for (index = 0xc; index != 0; index = index + -1) {\n        *bufferPtr = 0;\n        bufferPtr = bufferPtr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(functionContext + 0x20) = debugBuffer;\n      index = *(long *)(functionContext + 0x10);\n      *(undefined8 *)(debugBuffer + 6) = param5;\n      *(undefined8 *)(debugBuffer + 8) = 0xffffffffffffffff;\n      index = initialize_memory_00112925(index + 0x10,defaultFilename,3,(debugLevel & 0xff) + 1);\n      if (index != 0) {\n        *(long **)(index + 0x20) = record;\n        errorString = CONCAT71((int7)((ulong)index >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  errorString = 0;\nLAB_0010bd56:\n  returnVal._8_8_ = param6;\n  returnVal._0_8_ = errorString;\n  return returnVal;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = get_formatted_string_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = identify_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_bfd_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_bfd_error_message_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_data_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_output_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_bfd_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_bfd_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_bfd_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = extract_and_process_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)create_initialized_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_and_reset_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_and_reset_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_records_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = create_initialized_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_and_reset_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_and_reset_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_records_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_and_initialize_data_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = check_and_record_variable_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = process_end_of_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_and_initialize_data_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = record_debug_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debug_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_from_binary_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                execute_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_selected_item_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_from_binary_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            execute_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = parse_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_bfd_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_and_update_section_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_bfd_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_bfd_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_bfd_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)process_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_bfd_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "dcgettext",
                "FUN_00107880"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "create_filepath_00114cf0",
                "param_1": "path",
                "pcVar1": "lastSlash",
                "lVar2": "offset",
                "lVar3": "length",
                "lVar4": "position",
                "pcVar5": "newPath",
                "bVar6": "foundSlash"
            },
            "code": "\nvoid createFilepath_00114cf0(char *path)\n\n{\n  char *lastSlash;\n  long offset;\n  long length;\n  long position;\n  char *newPath;\n  byte foundSlash;\n  \n  foundSlash = 0;\n  lastSlash = strrchr(path,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    length = 0;\n  }\n  else {\n    position = (long)lastSlash - (long)path;\n    lastSlash = (char *)xmalloc(position + 0xb);\n    length = position + 1;\n    newPath = lastSlash;\n    for (offset = position; offset != 0; offset = offset + -1) {\n      *newPath = *path;\n      path = path + (ulong)foundSlash * -2 + 1;\n      newPath = newPath + (ulong)foundSlash * -2 + 1;\n    }\n    lastSlash[position] = '/';\n  }\n  *(undefined8 *)(lastSlash + length) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + length) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "create_filepath_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "parse_data_and_initialize_structure_0010a181",
                "param_1": "inputStruct",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "flag",
                "cVar1": "flagValue",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "concatenatedString",
                "local_41": "localFlag",
                "iVar2": "var2",
                "iVar3": "result",
                "uVar4": "returnValue",
                "lVar7": "counter"
            },
            "code": "\nundefined4 parseDataAndInitializeStructure_0010a181(long inputStruct,long startValue,long endValue,byte flag)\n\n{\n  char flagValue;\n  int var2;\n  int result;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *concatenatedString;\n  long counter;\n  byte localFlag;\n  \n  flagValue = *(char *)(*(long *)(inputStruct + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_ptr_00109b2f();\n  localFlag = 1;\n  if (flagValue == '\\0') {\n    localFlag = *(byte *)(*(long *)(inputStruct + 0x60) + 0x1c);\n  }\n  var2 = *(int *)(*(long *)(inputStruct + 0x60) + 0x18);\n  string2 = (char *)extract_and_free_ptr_00109b2f(inputStruct);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  concatenatedString = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *concatenatedString = '\\0';\n    counter = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    counter = *(long *)(inputStruct + 0x68);\n    *(long *)(inputStruct + 0x68) = counter + 1;\n    sprintf(concatenatedString,\"%ld=@S;\",counter);\n    localFlag = flag;\n  }\n  length1 = strlen(concatenatedString);\n  sprintf(concatenatedString + length1,\"ar%s;%ld;%ld;%s\",string1,startValue,endValue,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (startValue <= endValue) {\n    result = var2 * (((int)endValue - (int)startValue) + 1);\n  }\n  returnValue = initialize_data_structure_00109b52(inputStruct,concatenatedString,counter,localFlag,result);\n  if ((char)returnValue != '\\0') {\n    free(concatenatedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "parse_data_and_initialize_structure_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_executable_info_001199d0",
                "pcVar4": "headerMessage",
                "iVar1": "numColumns",
                "iVar2": "iter",
                "iVar3": "compareResult",
                "pcVar6": "tempFilePath",
                "uVar7": "archMach",
                "piVar8": "errnoPtr",
                "iVar9": "numArchMach",
                "lVar10": "nameIndex",
                "lVar11": "archIndex",
                "ppcVar12": "archMachPtr",
                "uVar13": "maxArchMachLen",
                "uVar14": "charLen",
                "sVar5": "nameLen"
            },
            "code": "\n\n\nvoid printExecutableInfo_001199d0(void)\n\n{\n  int numColumns;\n  int iter;\n  int compareResult;\n  char *headerMessage;\n  size_t nameLen;\n  char *tempFilePath;\n  undefined8 archMach;\n  int *errnoPtr;\n  int numArchMach;\n  long nameIndex;\n  long archIndex;\n  char **archMachPtr;\n  uint maxArchMachLen;\n  ulong charLen;\n  int local_70;\n  \n  headerMessage = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerMessage,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    headerMessage = getenv(\"TMPDIR\");\n    archMach = check_directory_permission_0011283f(headerMessage,0);\n    headerMessage = getenv(\"TMP\");\n    archMach = check_directory_permission_0011283f(headerMessage,archMach);\n    headerMessage = getenv(\"TEMP\");\n    archMach = check_directory_permission_0011283f(headerMessage,archMach);\n    archMach = check_directory_permission_0011283f(&DAT_0011b39a,archMach);\n    archMach = check_directory_permission_0011283f(\"/var/tmp\",archMach);\n    headerMessage = (char *)check_directory_permission_0011283f(&DAT_00120324,archMach);\n    if (headerMessage == (char *)0x0) {\n      headerMessage = \".\";\n    }\n    nameLen = strlen(headerMessage);\n    tempFilePath = (char *)xmalloc((int)nameLen + 2);\n    DAT_001278e0 = strcpy(tempFilePath,headerMessage);\n    DAT_001278e0[nameLen & 0xffffffff] = '/';\n    DAT_001278e0[(int)nameLen + 1] = '\\0';\n  }\n  headerMessage = DAT_001278e0;\n  nameLen = strlen(DAT_001278e0);\n  nameIndex = (long)(int)nameLen;\n  tempFilePath = (char *)xmalloc(nameIndex + 9);\n  strcpy(tempFilePath,headerMessage);\n  *(undefined2 *)(tempFilePath + nameIndex) = 0x6363;\n  *(undefined4 *)(tempFilePath + nameIndex + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilePath + nameIndex + 2) + 3) = 0x585858;\n  tempFilePath[nameIndex + 8] = '\\0';\n  iter = mkstemps(tempFilePath,0);\n  if (iter == -1) {\n    errnoPtr = __errno_location();\n    tempFilePath = strerror(*errnoPtr);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerMessage,tempFilePath);\n                    \n    abort();\n  }\n  iter = close(iter);\n  if (iter != 0) {\n                    \n    abort();\n  }\n  maxArchMachLen = 0;\n  iter = 2;\n  bfd_iterate_over_targets(process_header_00119f70);\n  unlink(tempFilePath);\n  free(tempFilePath);\n  local_70 = 0;\n  do {\n    headerMessage = (char *)bfd_printable_arch_mach(iter);\n    nameLen = strlen(headerMessage);\n    if ((int)maxArchMachLen < (int)(uint)nameLen) {\n      maxArchMachLen = (uint)nameLen;\n    }\n    iter = iter + 1;\n  } while (iter != 0x57);\n  headerMessage = getenv(\"COLUMNS\");\n  iter = local_70;\n  if (headerMessage != (char *)0x0) {\n    nameIndex = strtol(headerMessage,(char **)0x0,10);\n    numColumns = (int)nameIndex;\n    if (numColumns != 0) goto LAB_00119b11;\n  }\n  numColumns = 0x50;\nLAB_00119b11:\n  do {\n    local_70 = iter;\n    if (-1 < local_70) {\n      return;\n    }\n    archIndex = (long)local_70;\n    numArchMach = (numColumns - maxArchMachLen) + -1;\n    nameIndex = archIndex;\n    do {\n      iter = (int)nameIndex;\n      if (-1 < iter) break;\n      nameLen = strlen(*(char **)(nameIndex * 0x60));\n      nameIndex = nameIndex + 1;\n      numArchMach = (numArchMach - (int)nameLen) + -1;\n    } while (-1 < numArchMach);\n    printf(\"\\n%*s\",(ulong)(maxArchMachLen + 1),&DAT_0011b4a1);\n    for (archMachPtr = (char **)(archIndex * 0x60);\n        ((ulong)(uint)(iter - local_70) + archIndex) * 0x60 - (long)archMachPtr != 0;\n        archMachPtr = archMachPtr + 0xc) {\n      printf(\"%s \",*archMachPtr);\n    }\n    numArchMach = 2;\n    putc(10,_stdout);\n    do {\n      headerMessage = (char *)bfd_printable_arch_mach(numArchMach,0);\n      compareResult = strcmp(headerMessage,\"UNKNOWN!\");\n      if (compareResult != 0) {\n        archMach = bfd_printable_arch_mach(numArchMach,0);\n        printf(\"%*s \",(ulong)maxArchMachLen,archMach);\n        archMachPtr = (char **)(archIndex * 0x60);\n        compareResult = local_70;\n        while (iter != compareResult) {\n          if (*(char *)((long)archMachPtr + (ulong)(numArchMach - 2) + 8) == '\\0') {\n            nameLen = strlen(*archMachPtr);\n            for (charLen = nameLen & 0xffffffff; (int)charLen != 0; charLen = (ulong)((int)charLen - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachPtr,_stdout);\n          }\n          compareResult = compareResult + 1;\n          if (iter != compareResult) {\n            putc(0x20,_stdout);\n          }\n          archMachPtr = archMachPtr + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      numArchMach = numArchMach + 1;\n    } while (numArchMach != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "getenv",
                "abort",
                "bfd_iterate_over_targets",
                "FUN_00119f70",
                "strlen",
                "mkstemps",
                "FUN_00104943",
                "dcgettext",
                "FUN_0011283f",
                "strcpy",
                "unlink",
                "printf",
                "strerror",
                "xmalloc",
                "close",
                "fprintf",
                "bfd_printable_arch_mach",
                "__errno_location",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_executable_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "code": "\nvoid initializeSystem_0010847a(void)\n\n{\n  process_attributes_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_system_0010847a",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "parse_and_extract_value_0010d21c",
                "param_1": "param1",
                "param_2": "byteStream",
                "param_3": "outputString",
                "bVar1": "byteVar1",
                "pbVar2": "bytePtr",
                "bVar3": "byteVar2",
                "cVar4": "charVar",
                "bVar5": "byteVar3",
                "uVar6": "result",
                "iVar7": "intVar1",
                "uVar8": "uintVar1",
                "sVar9": "size",
                "pbVar10": "bytePtr2",
                "__ptr": "pointer1",
                "__ptr_00": "pointer2",
                "__haystack": "haystack",
                "pcVar11": "var11",
                "uVar12": "stringPtr",
                "pcVar13": "var13",
                "bVar14": "byteVar4",
                "pcVar15": "var15",
                "bVar16": "byteVar5",
                "bVar17": "byteVar6",
                "bVar18": "byteVar7",
                "bVar19": "byteVar8",
                "uVar20": "count",
                "uVar21": "length",
                "local_3c": "numArray"
            },
            "code": "\nundefined4 parseAndExtractValue_0010d21c(undefined8 param1,byte **byteStream,undefined8 *outputString)\n\n{\n  byte byteVar1;\n  byte *bytePtr;\n  byte byteVar2;\n  char charVar;\n  byte byteVar3;\n  undefined4 result;\n  int intVar1;\n  uint uintVar1;\n  size_t size;\n  byte *bytePtr2;\n  void *pointer1;\n  void *pointer2;\n  char *haystack;\n  char *var11;\n  undefined8 stringPtr;\n  char *var13;\n  byte byteVar4;\n  char *var15;\n  byte byteVar5;\n  byte byteVar6;\n  byte byteVar7;\n  byte byteVar8;\n  uint count;\n  ulong length;\n  uint numArray [3];\n  \n  bytePtr = *byteStream;\n  *byteStream = bytePtr + 1;\n  numArray[0] = parse_integer_from_byte_stream_00108e76(byteStream);\n  length = (ulong)numArray[0];\n  if (numArray[0] != 0) {\n    bytePtr2 = *byteStream;\n    size = strlen((char *)bytePtr2);\n    if (length <= size) {\n      *byteStream = bytePtr2 + length;\n      count = 0;\n      result = extract_and_convert_number_00108ea1(byteStream,numArray);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (numArray[0] <= count) {\n          if (outputString == (undefined8 *)0x0) {\n            return result;\n          }\n          pointer1 = (void *)copy_and_null_terminate_00109a0b(bytePtr,(int)*byteStream - (int)bytePtr);\n          pointer2 = (void *)concat(\"NoSuchStrinG__\",pointer1,0);\n          free(pointer1);\n          haystack = (char *)cplus_demangle(pointer2,2);\n          free(pointer2);\n          if ((haystack != (char *)0x0) &&\n             (var11 = strstr(haystack,\"::NoSuchStrinG\"), var13 = haystack,\n             var15 = haystack, var11 != (char *)0x0)) {\n            for (; var13 != var11; var13 = var13 + 1) {\n              if ((*var13 != ' ') ||\n                 (((var13[1] == '>' && (haystack < var13)) && (var13[-1] == '>')))) {\n                *var15 = *var13;\n                var15 = var15 + 1;\n              }\n            }\n            stringPtr = copy_and_null_terminate_00109a0b(haystack,(int)var15 - (int)haystack);\n            *outputString = stringPtr;\n            free(haystack);\n            return result;\n          }\n          print_error_message_0010911f(bytePtr);\n          free(haystack);\n          return 0;\n        }\n        bytePtr2 = *byteStream;\n        if (*bytePtr2 != 0x5a) {\n          byteVar3 = parse_and_execute_command_0010c95e(param1,byteStream,0);\n          if (byteVar3 == 0) {\n            return 0;\n          }\n          byteVar2 = 0;\n          byteVar4 = 0;\n          byteVar7 = 0;\n          byteVar6 = 0;\n          byteVar8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byteVar5 = byteVar2;\n              byteVar1 = *bytePtr2;\n              if ((byteVar4 | byteVar1 == 0) != 0) {\n                byteVar3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byteVar2 = byteVar3;\n              byteVar4 = byteVar3;\n            } while ('v' < (char)byteVar1);\n            if ((char)byteVar1 < 'b') {\n              if ((char)byteVar1 < 'U') {\n                if ((char)byteVar1 < 'C') goto LAB_0010d2e9;\n                length = 1L << (byteVar1 + 0xbd & 0x3f);\n                if ((length & 0x11409) == 0) {\n                  if ((length & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byteVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byteVar1 + 0xab)) goto LAB_0010d2e9;\n              bytePtr2 = bytePtr2 + 1;\n              byteVar2 = byteVar5;\n              byteVar4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byteVar1) {\n            case 0x62:\n              byteVar2 = byteVar5;\n              byteVar7 = byteVar3;\n              break;\n            case 99:\n              byteVar2 = byteVar5;\n              byteVar8 = byteVar3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byteVar2 = byteVar5;\n              byteVar6 = byteVar3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *byteStream = bytePtr2 + 1;\n        charVar = parse_and_execute_command_0010c95e(param1,byteStream,0);\n        if (charVar == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(bytePtr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byteVar5 == 0) {\n    if (byteVar8 == 0) {\n      if (byteVar7 == 0) {\n        if (byteVar6 == 0) {\n          if (byteVar3 != 0) {\n            uintVar1 = parse_integer_from_byte_stream_00108e76(byteStream);\n            if (uintVar1 == 0) goto LAB_0010d280;\n            *byteStream = *byteStream + uintVar1;\n          }\n        }\n        else {\n          if (**byteStream == 0x6d) {\n            *byteStream = *byteStream + 1;\n          }\n          while( true ) {\n            bytePtr2 = *byteStream;\n            if (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) == 0) break;\n            *byteStream = bytePtr2 + 1;\n          }\n          if (*bytePtr2 == 0x2e) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *byteStream = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n          bytePtr2 = *byteStream;\n          if (*bytePtr2 == 0x65) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *byteStream = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar1 = parse_integer_from_byte_stream_00108e76(byteStream);\n        if (1 < uintVar1) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**byteStream == 0x6d) {\n        *byteStream = *byteStream + 1;\n      }\n      intVar1 = parse_integer_from_byte_stream_00108e76(byteStream);\n      if (intVar1 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**byteStream == 0x6d) {\n      *byteStream = *byteStream + 1;\n    }\n    while (((&_sch_istable)[(ulong)**byteStream * 2] & 4) != 0) {\n      *byteStream = *byteStream + 1;\n    }\n  }\nLAB_0010d2b1:\n  count = count + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "abort",
                "FUN_00108ea1",
                "strstr",
                "strlen",
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00108e76",
                "concat",
                "FUN_0010911f",
                "cplus_demangle",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_extract_value_0010d21c",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = parse_integer_from_byte_stream_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = extract_and_convert_number_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_null_terminate_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_null_terminate_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = parse_integer_from_byte_stream_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = parse_integer_from_byte_stream_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = parse_integer_from_byte_stream_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hashtables_001054af"
            },
            "code": "\nvoid cleanupHashtables_001054af(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined8 in_RAX;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,param_2,in_RAX);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hashtables_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "process_data_0010c139",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "returnValue",
                "cVar2": "charValue",
                "uVar3": "result",
                "puVar4": "newData",
                "in_R10": "additionalParam",
                "unaff_R15": "extraParam"
            },
            "code": "\nulong processData_0010c139(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 returnValue;\n  char charValue;\n  ulong result;\n  undefined8 *newData;\n  undefined8 additionalParam;\n  undefined8 extraParam;\n  \n  charValue = *(char *)(param2 + 0x60);\n  if ((charValue != '\\0') && ((*(int *)(param2 + 0x40) != 0 || (*(char *)(param2 + 0x44) == '\\0')))) {\n    newData = (undefined8 *)xmalloc(0x28);\n    returnValue = *(undefined8 *)(param2 + 0x78);\n    *(undefined8 *)((long)newData + 0x1c) = 0;\n    newData[2] = param4;\n    *(undefined4 *)(newData + 3) = param5;\n    newData[4] = param6;\n    *(undefined8 **)(param2 + 0x78) = newData;\n    *newData = returnValue;\n    newData[1] = param3;\n    return CONCAT71((int7)((ulong)extraParam >> 8),charValue) & 0xffffffff;\n  }\n  result = record_variable_0010c05d(param1,param3,param4,param5,param6,additionalParam);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_data_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_string_in_memory_0010e439",
                "param_1": "memoryAddress",
                "param_2": "stringValue",
                "process_string_0010e2f0": "processString"
            },
            "code": "\nvoid setStringInMemory_0010e439(long memoryAddress,undefined8 stringValue)\n\n{\n  *(undefined8 *)(memoryAddress + 0x210) = stringValue;\n  processString(memoryAddress,0x84,0,0,stringValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "thunk_FUN_0010e439",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_string_in_memory_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109cf4",
                "FUN_0010ee3f",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00109d97",
                "FUN_0010e9a0",
                "FUN_0010b800",
                "FUN_00109e76",
                "FUN_0010e918",
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010eafe",
                "FUN_0010abdd",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_001125fa",
                "FUN_0011173a",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_0010e2f0",
                "FUN_0010ee3f",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010554f",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00113ede",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_00113fb0",
                "FUN_0010b800",
                "FUN_0010e918",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_001199d0",
                "FUN_00104ad6",
                "FUN_00109bbb",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010eafe",
                "FUN_0010c95e",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "initialize_data_structure_00109d3e",
                "param_1": "param_address",
                "param_2": "param_size",
                "uVar1": "default_value"
            },
            "code": "\nvoid initialize_data_structure_00109d3e(undefined8 param_address,int param_size)\n\n{\n  undefined8 default_value;\n  \n  default_value = 0xfffffffffffffff0;\n  if (param_size - 1U < 8) {\n    default_value = *(undefined8 *)(&DAT_00121360 + (ulong)(param_size - 1U) * 8);\n  }\n  initialize_data_structure_00109d3e_00109cf4(param_address,default_value,param_size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "process_files_00112502",
                "param_1": "fileData",
                "param_2": "filePointer",
                "param_3": "fileSize",
                "uVar1": "iteration",
                "puVar2": "fileTable",
                "uVar3": "currentFile",
                "cVar4": "processingResult"
            },
            "code": "\nundefined processFiles_00112502(long fileData,undefined8 filePointer,ulong fileSize)\n\n{\n  uint iteration;\n  undefined8 *fileTable;\n  undefined8 currentFile;\n  char processingResult;\n  \n  do {\n    fileTable = *(undefined8 **)(fileData + 0x40);\n    if (fileTable == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((iteration = *(uint *)(fileData + 0x48), iteration < 10 && (fileTable[(ulong)iteration + 2] != -1))) {\n      if (fileSize <= (ulong)fileTable[(ulong)iteration + 0xc]) {\n        return 1;\n      }\n      processingResult = process_file_0010edb4(filePointer,*(undefined8 *)(fileTable[1] + 8));\n      if (processingResult == '\\0') {\n        return 0;\n      }\n      *(int *)(fileData + 0x48) = *(int *)(fileData + 0x48) + 1;\n    }\n    currentFile = *fileTable;\n    *(undefined4 *)(fileData + 0x48) = 0;\n    *(undefined8 *)(fileData + 0x40) = currentFile;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_files_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "param_7": "line_number",
                "param_8": "output_list",
                "param_9": "input_line",
                "uVar1": "error_message",
                "ppbVar2": "slot_ptr",
                "pbVar3": "current_char",
                "bVar4": "next_char",
                "unaff_RBX": "input_ptr",
                "pbVar5": "line_start",
                "unaff_EBP": "line_count",
                "in_R10": "line_end",
                "unaff_R13": "output_value",
                "unaff_R14": "line_temp",
                "unaff_R15": "search_ptr"
            },
            "code": "\nvoid process_lines_00104cc1(void)\n\n{\n  undefined8 error_message;\n  byte **slot_ptr;\n  byte *current_char;\n  byte next_char;\n  byte *input_ptr;\n  byte *line_start;\n  int line_count;\n  byte *line_end;\n  undefined8 output_value;\n  byte *line_temp;\n  byte *search_ptr;\n  undefined8 line_number;\n  undefined8 *output_list;\n  byte *input_line;\n  \ncode_r0x00104cc1:\n  input_line = line_end;\n  error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_message_00119ed0(error_message,line_number,line_count);\n  line_start = input_ptr;\n  line_end = input_line;\nLAB_00114599:\n  do {\n    *line_end = 0;\n    if (search_ptr < line_end) {\n      slot_ptr = (byte **)htab_find_slot();\n      *slot_ptr = search_ptr;\n    }\n    line_count = line_count + 1;\n    current_char = line_start;\n    if (line_temp[1] == 0) {\n      *output_list = output_value;\n      return;\n    }\n    for (; next_char = *current_char, line_temp = current_char, next_char != 10; current_char = current_char + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          input_ptr = current_char + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_char = 0;\n          input_ptr = current_char + 1;\n          if (current_char[1] == 10) {\n            input_ptr = current_char + 2;\n            line_temp = current_char + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          process_lines_00104cc1_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_char = 0;\n    if (current_char[1] == 0xd) {\n      line_temp = current_char + 1;\n      input_ptr = current_char + 2;\n    }\n    else {\n      input_ptr = current_char + 1;\n    }\nLAB_00114553:\n    next_char = *line_start;\n    search_ptr = line_start;\n    while ((next_char == 0x20 || (line_end = search_ptr, next_char == 9))) {\n      line_start = search_ptr + 1;\n      search_ptr = search_ptr + 1;\n      next_char = *line_start;\n    }\n    do {\n      line_start = input_ptr;\n      if ((next_char == 10) || (next_char == 0xd)) goto LAB_00114676;\n      if (next_char == 0) goto LAB_00114599;\n      next_char = line_end[1];\n      line_end = line_end + 1;\n    } while ((next_char != 0x20) && (next_char != 9));\n    if ((char)next_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (next_char & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    next_char = line_end[1];\n    if ((((((next_char == 9) || (next_char == 0x20)) && ((next_char = line_end[2], next_char == 9 || (next_char == 0x20)))\n          ) && ((next_char = line_end[3], next_char == 9 || (next_char == 0x20)))) &&\n        ((next_char = line_end[4], next_char == 9 || (next_char == 0x20)))) &&\n       ((next_char = line_end[5], next_char == 9 || (next_char == 0x20)))) {\n      next_char = line_end[6];\n      current_char = line_end + 6;\n      if ((next_char == 9) || (next_char == 0x20)) {\n        do {\n          do {\n            next_char = current_char[1];\n            current_char = current_char + 1;\n          } while (next_char == 0x20);\n        } while (next_char == 9);\n      }\n    }\n    if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00104c36",
                "htab_find_slot",
                "FUN_00104d1c",
                "dcgettext",
                "FUN_00104cc1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_0011173a",
                "FUN_00119f70",
                "FUN_0010aa53",
                "FUN_0010ab4d",
                "FUN_0010e2f0",
                "FUN_0010ee3f",
                "FUN_00109ed3",
                "FUN_0010d7d4",
                "FUN_00109c2e",
                "FUN_0010b6ea",
                "FUN_00109be3",
                "FUN_0010dac0",
                "FUN_0010abdd",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "initialize_and_store_data_00113bfa",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "lVar1": "data_address",
                "plVar2": "data_ptr"
            },
            "code": "\nlong initialize_and_store_data_00113bfa(long input_param_1,long input_param_2)\n\n{\n  long data_address;\n  long *data_ptr;\n  \n  if (((input_param_1 != 0) && (input_param_2 != 0)) && (data_address = initialize_data_00112904(0x12,0), data_address != 0)) {\n    data_ptr = (long *)xmalloc(0x10);\n    *data_ptr = input_param_1;\n    data_ptr[1] = input_param_2;\n    *(long **)(data_address + 0x10) = data_ptr;\n    return data_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_store_data_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_and_print_error_message_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "var1",
                "uVar2": "var2",
                "unaff_EBX": "registerEBX"
            },
            "code": "\nuint checkAndPrintErrorMessage_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  uint registerEBX;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    var1 = *param2;\n    registerEBX = registerEBX & 0xf7ffffff;\n    var2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(var2,var1,param3);\n  }\n  return registerEBX;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "check_and_print_error_message_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_structure_and_increment_00109e76",
                "param_1": "dataStructure",
                "param_2": "value",
                "lVar1": "currentValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateStructureAndIncrement_00109e76(long dataStructure,uint value)\n\n{\n  long currentValue;\n  char formattedString [58];\n  \n  currentValue = *(long *)(dataStructure + 0x68);\n  *(long *)(dataStructure + 0x68) = currentValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",currentValue,currentValue,(ulong)value);\n  initialize_data_structure_00109b52(dataStructure,formattedString,currentValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_structure_and_increment_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "iVar1": "currentIndex",
                "lVar2": "oldIndex",
                "lVar3": "arrayIndex",
                "uVar4": "duplicatedValue"
            },
            "code": "\nulong updateData_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int currentIndex;\n  long oldIndex;\n  long arrayIndex;\n  undefined8 duplicatedValue;\n  \n  oldIndex = (long)DAT_001278c0;\n  arrayIndex = oldIndex * 0x18;\n  free((void *)(&DAT_00127750)[oldIndex * 3]);\n  *(undefined4 *)(&DAT_00127740 + arrayIndex) = newValue1;\n  *(undefined4 *)(&DAT_00127744 + arrayIndex) = newValue2;\n  *(undefined8 *)(&DAT_00127748 + arrayIndex) = newValue3;\n  duplicatedValue = xstrdup(newValue4);\n  (&DAT_00127750)[oldIndex * 3] = duplicatedValue;\n  currentIndex = DAT_001278c0 + 1;\n  DAT_001278c0 = currentIndex % 0x10;\n  return (long)currentIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_matching_entry_0010afd5",
                "param_1": "list",
                "param_2": "data",
                "param_3": "str_ptr",
                "param_4": "str_len",
                "param_5": "value",
                "param_6": "result",
                "iVar1": "cmp_result",
                "__s2": "search_str",
                "puVar2": "entry",
                "uVar3": "temp",
                "lVar4": "entry_value",
                "puVar5": "inner_entry",
                "puVar6": "inner_value",
                "bVar7": "counter",
                "auVar8": "return_val"
            },
            "code": "\nundefined  [16]\nfindMatchingEntry_0010afd5(undefined8 *list,long data,undefined8 str_ptr,undefined4 str_len,\n            undefined4 value,undefined8 result)\n\n{\n  int cmp_result;\n  char *search_str;\n  undefined8 *entry;\n  undefined8 temp;\n  long entry_value;\n  undefined8 *inner_entry;\n  undefined4 *inner_value;\n  byte counter;\n  undefined return_val [16];\n  \n  counter = 0;\n  search_str = (char *)copy_and_null_terminate_00109a0b(str_ptr,str_len);\n  for (list = (undefined8 *)*list; list != (undefined8 *)0x0;\n      list = (undefined8 *)*list) {\n    for (entry = (undefined8 *)list[1]; entry != (undefined8 *)0x0;\n        entry = (undefined8 *)*entry) {\n      if ((undefined8 *)entry[2] != (undefined8 *)0x0) {\n        for (inner_entry = *(undefined8 **)(undefined8 *)entry[2]; inner_entry != (undefined8 *)0x0;\n            inner_entry = (undefined8 *)*inner_entry) {\n          if ((*(int *)((long)inner_entry + 0x14) == 1) && (*(char *)inner_entry[1] == *search_str)) {\n            cmp_result = strcmp((char *)inner_entry[1],search_str);\n            if (cmp_result == 0) {\n              entry_value = inner_entry[4];\n              if (entry_value == 0) goto LAB_0010b05b;\n              free(search_str);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  entry = *(undefined8 **)(data + 0x1a0);\n  do {\n    if (entry == (undefined8 *)0x0) {\n      entry = (undefined8 *)xmalloc(0x28);\n      temp = *(undefined8 *)(data + 0x1a0);\n      inner_value = (undefined4 *)((long)entry + 0x14);\n      for (entry_value = 5; entry_value != 0; entry_value = entry_value + -1) {\n        *inner_value = 0;\n        inner_value = inner_value + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(entry + 2) = value;\n      *entry = temp;\n      entry[1] = search_str;\n      temp = create_data_entry_00113e23(entry + 3,search_str);\n      *(undefined8 **)(data + 0x1a0) = entry;\n      entry[4] = temp;\nLAB_0010b0e7:\n      entry_value = entry[4];\nLAB_0010b0eb:\n      return_val._8_8_ = result;\n      return_val._0_8_ = entry_value;\n      return return_val;\n    }\n    if (*(char *)entry[1] == *search_str) {\n      cmp_result = strcmp((char *)entry[1],search_str);\n      if (cmp_result == 0) {\n        if (*(int *)(entry + 2) == 0) {\n          *(undefined4 *)(entry + 2) = value;\n        }\n        free(search_str);\n        goto LAB_0010b0e7;\n      }\n    }\n    entry = (undefined8 *)*entry;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109a0b",
                "strcmp",
                "FUN_00113e23",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_matching_entry_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_info_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)convert_xcoff_type_to_debug_type_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = extract_file_info_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)initialize_and_store_data_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_info_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_data_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)extract_file_info_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)extract_file_info_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)initialize_and_store_data_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_bad_stab_message_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)find_real_type_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)initialize_and_store_data_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_data_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_or_get_data_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_numeric_string_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_data_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_data_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_data_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_info_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = set_param_value_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_bad_stab_message_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)initialize_and_allocate_data_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)set_param_value_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_data_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_bad_stab_message_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_bad_stab_message_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)create_data_structure_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)allocate_data_structure_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_with_param_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_info_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_numeric_string_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_numeric_string_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)set_param_value_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)set_param_value_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_data_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_bad_stab_message_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = convert_xcoff_type_to_debug_type_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_00108fe8(pbVar27,uVar15);\n                lVar38 = set_param_value_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_data_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)set_param_value_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_data_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)set_param_value_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)set_param_value_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)set_param_value_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)set_param_value_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)set_param_value_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = string_comparison_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = string_comparison_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = string_comparison_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)set_param_value_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)set_param_value_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_bad_stab_message_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_numeric_string_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)extract_value_from_binary_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_numeric_string_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_bad_stab_message_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_bad_stab_message_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_null_terminate_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_bad_stab_message_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_numeric_string_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_numeric_string_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_bad_stab_message_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)find_real_type_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)find_real_type_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_null_terminate_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = convert_xcoff_type_to_debug_type_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)find_real_type_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = string_comparison_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = demangle_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = parse_and_extract_data_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = expand_and_add_item_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_and_extract_value_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = expand_and_add_item_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = parse_integer_from_byte_stream_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = expand_and_add_item_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)initialize_and_store_data_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = check_function_validity_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = check_function_validity_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = string_comparison_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = string_comparison_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)initialize_and_store_data_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_info_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_bad_stab_message_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_and_allocate_memory_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_data_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_bad_stab_message_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_matching_entry_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)extract_file_info_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_bad_stab_message_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "cplus_demangle_init_info",
                "dcgettext",
                "malloc",
                "FUN_0010ee3f",
                "FUN_00109a32",
                "FUN_0010b6ea",
                "FUN_00113fb0",
                "xrealloc",
                "strchr",
                "FUN_00112904",
                "cplus_demangle_mangled_name",
                "FUN_00113da9",
                "FUN_0010afd5",
                "strcat",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_00112b6e",
                "xmalloc",
                "FUN_00113b98",
                "strspn",
                "strncmp",
                "FUN_00113cb9",
                "sprintf",
                "strlen",
                "FUN_00113bfa",
                "strcpy",
                "strcmp",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_00109ab1",
                "FUN_00108fb9",
                "fprintf",
                "FUN_00109be3",
                "FUN_00113d6e",
                "FUN_00108e76",
                "free",
                "FUN_00113b71",
                "FUN_0010c2d2",
                "FUN_00108fe8",
                "FUN_00113c43",
                "FUN_00113e5e",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010914e",
                "FUN_00113dfe",
                "strstr",
                "FUN_00113d3a",
                "strtol",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113e17",
                "concat",
                "FUN_0010d21c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00104966",
                "FUN_0010543c",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690",
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stabEntry",
                "iVar5": "counter"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long index;\n  long offset;\n  int *stabEntry;\n  int counter;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  counter = DAT_001278c0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stabEntry = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stabName = bfd_get_stab_name(*stabEntry);\n      if (stabName == 0) {\n        if (*stabEntry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*stabEntry != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278c0 != counter);\n  return param_3;\n}\n\n",
            "called": [
                "fwrite",
                "fprintf",
                "bfd_get_stab_name",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "process_and_update_data_0010a083",
                "param_1": "data_pointer",
                "process_data_00109ed3": "process_data"
            },
            "code": "\nvoid process_and_update_data_0010a083(long data_pointer)\n\n{\n  process_data(data_pointer,0x2a,4,data_pointer + 0x178,data_pointer + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_and_update_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "data",
                "lVar1": "newValue",
                "plVar2": "currentElement",
                "lVar3": "remainingElements",
                "puVar4": "currentByte",
                "uVar5": "arraySize",
                "bVar6": "increment",
                "auVar7": "returnVal"
            },
            "code": "\nundefined  [16]\nresizeAndInitializeArray_00109c2e(long array,long value,ulong size,int flag,undefined4 *result,\n            undefined8 data)\n\n{\n  long newValue;\n  long *currentElement;\n  long remainingElements;\n  undefined *currentByte;\n  ulong arraySize;\n  byte increment;\n  undefined returnVal [16];\n  \n  increment = 0;\n  size = size & 0xffffffff;\n  arraySize = *(ulong *)(array + 0x1b0);\n  if (arraySize <= size) {\n    if (arraySize == 0) {\n      arraySize = 10;\n    }\n    for (; arraySize <= size; arraySize = arraySize * 2) {\n    }\n    newValue = xrealloc(*(undefined8 *)(array + 0x1a8),arraySize * 0x18);\n    *(long *)(array + 0x1a8) = newValue;\n    currentByte = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newValue);\n    for (remainingElements = (arraySize - *(long *)(array + 0x1b0)) * 0x18; remainingElements != 0; remainingElements = remainingElements + -1) {\n      *currentByte = 0;\n      currentByte = currentByte + (ulong)increment * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = arraySize;\n  }\n  currentElement = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*currentElement == 0) {\n    newValue = *(long *)(array + 0x68);\n    *currentElement = newValue;\n    *(long *)(array + 0x68) = newValue + 1;\n    currentElement[1] = value;\n    *(int *)(currentElement + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(currentElement + 2) = 0;\n    *(undefined4 *)((long)currentElement + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)currentElement + 0x14);\n  }\n  returnVal._8_8_ = data;\n  returnVal._0_8_ = *currentElement;\n  return returnVal;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "resize_and_initialize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "display_bad_format_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getTranslatedMessage",
                "execute_and_exit_00119dd0": "executeAndExit"
            },
            "code": "\nvoid displayBadFormatErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  executeAndExit(errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "display_bad_format_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "initialize_memory_with_file_00112996",
                "param_1": "fileParameter",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "fileOffset"
            },
            "code": "\n\n\nundefined8 initializeMemoryWithFile_00112996(long fileParameter,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long fileOffset;\n  \n  if ((*(long *)(fileParameter + 8) != 0) && (*(long *)(fileParameter + 0x10) != 0)) {\n    fileOffset = *(long *)(fileParameter + 0x10) + 0x10;\n    if (*(long *)(fileParameter + 0x20) != 0) {\n      fileOffset = *(long *)(fileParameter + 0x20) + 0x28;\n    }\n    result = initialize_memory_00112925(fileOffset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_memory_with_file_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "param_1": "class",
                "param_2": "name",
                "param_3": "type",
                "param_4": "id",
                "uVar1": "result",
                "uVar2": "newId",
                "lVar3": "structPtr",
                "piVar4": "typePtr",
                "__s1": "typeName",
                "cVar5": "compareResult",
                "iVar6": "newId2",
                "puVar7": "node",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long class,char *name,int *type,undefined8 id)\n\n{\n  undefined8 result;\n  uint newId;\n  long structPtr;\n  int *typePtr;\n  char *typeName;\n  char compareResult;\n  int newId2;\n  undefined8 *node;\n  undefined returnValue [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  structPtr = *(long *)(type + 4);\n  node = (undefined8 *)(ulong)*(uint *)(structPtr + 0xc);\n  if (*(uint *)(structPtr + 0xc) <= *(uint *)(class + 0x38)) {\n    for (node = *(undefined8 **)(class + 0x50); node != (undefined8 *)0x0;\n        node = (undefined8 *)*node) {\n      typePtr = (int *)node[1];\n      if (*typePtr == *type) {\n        typeName = (char *)node[2];\n        if (name == (char *)0x0) {\n          if (typeName == (char *)0x0) {\nLAB_0010c82c:\n            compareResult = compare_data_0010922b(class,typePtr,type);\n            if (compareResult != '\\0') {\n              newId = *(uint *)(*(long *)(node[1] + 0x10) + 0xc);\n              node = (undefined8 *)(ulong)newId;\n              *(uint *)(structPtr + 0xc) = newId;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((typeName != (char *)0x0) && (*typeName == *name)) &&\n                (newId2 = strcmp(typeName,name), newId2 == 0)) goto LAB_0010c82c;\n      }\n    }\n    newId2 = *(int *)(class + 0x34) + 1;\n    *(int *)(class + 0x34) = newId2;\n    *(int *)(structPtr + 0xc) = newId2;\n    node = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(class + 0x50);\n    node[2] = name;\n    *(undefined8 **)(class + 0x50) = node;\n    *node = result;\n    node[1] = type;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)node >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = id;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail",
                "strcmp",
                "FUN_0010922b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "debug_set_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "compare_data_0010922b",
                "param_1": "param_ptr",
                "param_2": "data1_ptr",
                "param_3": "data2_ptr",
                "uVar1": "dataType1",
                "uVar2": "dataType2",
                "pplVar3": "dataType1_ptr",
                "ppcVar4": "str1_ptr",
                "ppcVar5": "str2_ptr",
                "lVar6": "longVar1",
                "lVar7": "longVar2",
                "lVar8": "longVar3",
                "pcVar9": "charVar1",
                "pcVar10": "charVar2",
                "cVar11": "comparisonResult",
                "bVar12": "result",
                "iVar13": "loopIndex",
                "uVar14": "type1",
                "uVar15": "type2",
                "puVar16": "type_ptr1",
                "puVar17": "type_ptr2",
                "plVar18": "longVar_ptr1",
                "lVar19": "longVarIndex",
                "plVar20": "longVar_ptr2",
                "plVar21": "longVar_ptr3",
                "lVar22": "tempLongVar",
                "local_70": "local_ptr1",
                "local_58": "local_ptr2",
                "plStack_50": "stack_ptr1",
                "local_48": "local_ptr3"
            },
            "code": "\nbyte compareData_0010922b(long param_ptr,long *data1_ptr,long *data2_ptr)\n\n{\n  uint dataType1;\n  uint dataType2;\n  long **dataType1_ptr;\n  char **str1_ptr;\n  char **str2_ptr;\n  long longVar1;\n  long longVar2;\n  long longVar3;\n  char *charVar1;\n  char *charVar2;\n  char comparisonResult;\n  byte result;\n  int loopIndex;\n  undefined8 type1;\n  undefined8 type2;\n  undefined8 *type_ptr1;\n  undefined8 *type_ptr2;\n  long *longVar_ptr1;\n  long longVarIndex;\n  long *longVar_ptr2;\n  long *longVar_ptr3;\n  long tempLongVar;\n  long *local_ptr1;\n  undefined8 *local_ptr2;\n  long *stack_ptr1;\n  long *local_ptr3;\n  \n  longVar_ptr1 = data2_ptr;\n  if (data1_ptr == (long *)0x0) {\nLAB_00109241:\n    return data2_ptr == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (longVar_ptr1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    dataType1 = *(uint *)data1_ptr;\n    if (dataType1 == 1) goto code_r0x00109263;\n    while (dataType2 = *(uint *)data2_ptr, dataType2 == 1) {\n      data2_ptr = **(long ***)data2_ptr[2];\n      if (data2_ptr == (long *)0x0) {\n        return false;\n      }\n    }\n    if (data1_ptr == data2_ptr) {\n      return true;\n    }\n    if (dataType1 != 0x16) break;\n    if (dataType2 != 0x17) goto LAB_001092cb;\n    data1_ptr = *(long **)(data1_ptr[2] + 8);\n    if (data1_ptr == (long *)0x0) goto LAB_00109241;\n  }\n  if ((dataType1 == 0x17) && (dataType2 == 0x16)) {\n    data2_ptr = *(long **)(data2_ptr[2] + 8);\n    longVar_ptr1 = data2_ptr;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*data1_ptr != *data2_ptr) {\n    return false;\n  }\n  if (dataType1 == 3) {\n    return *(char *)(data1_ptr + 2) == *(char *)(data2_ptr + 2);\n  }\n  if (dataType1 < 4) {\n    if (dataType1 == 2) {\n      return true;\n    }\n  }\n  else if (dataType1 - 4 < 3) {\n    return true;\n  }\n  local_ptr2 = *(undefined8 **)(param_ptr + 0x58);\n  for (type_ptr2 = local_ptr2; type_ptr2 != (undefined8 *)0x0; type_ptr2 = (undefined8 *)*type_ptr2) {\n    if (((long *)type_ptr2[1] == data1_ptr) && ((long *)type_ptr2[2] == data2_ptr)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param_ptr + 0x58) = &local_ptr2;\n  stack_ptr1 = data1_ptr;\n  local_ptr3 = data2_ptr;\n  switch(dataType1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    longVar_ptr1 = (long *)data1_ptr[2];\n    dataType1_ptr = (long **)data2_ptr[2];\n    if (longVar_ptr1 == (long *)0x0) {\n      result = dataType1_ptr == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (dataType1_ptr == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param_ptr + 0x38) < *(uint *)((long)longVar_ptr1 + 0xc)) &&\n       (*(uint *)((long)longVar_ptr1 + 0xc) == *(uint *)((long)dataType1_ptr + 0xc))) goto LAB_001097af;\n    type_ptr2 = (undefined8 *)*longVar_ptr1;\n    local_ptr1 = *dataType1_ptr;\n    if (((type_ptr2 == (undefined8 *)0x0) == (local_ptr1 == (long *)0x0)) &&\n       ((((longVar_ptr1[2] == 0) == (dataType1_ptr[2] == (long *)0x0) &&\n         ((longVar_ptr1[3] == 0) == (dataType1_ptr[3] == (long *)0x0))) &&\n        ((longVar_ptr1[4] == 0) == (dataType1_ptr[4] == (long *)0x0))))) {\n      if (type_ptr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((longVar_ptr1[4] != 0) &&\n           (comparisonResult = compareData_0010922b(param_ptr,longVar_ptr1[4],dataType1_ptr[4]), comparisonResult == '\\0'))\n        goto LAB_00109382;\n        longVar_ptr3 = (long *)longVar_ptr1[2];\n        if (longVar_ptr3 == (long *)0x0) {\nLAB_00109540:\n          type_ptr2 = (undefined8 *)longVar_ptr1[3];\n          if (type_ptr2 == (undefined8 *)0x0) goto LAB_001097af;\n          longVar_ptr1 = dataType1_ptr[3];\n          while( true ) {\n            str2_ptr = (char **)*type_ptr2;\n            if (str2_ptr == (char **)0x0) {\n              result = *longVar_ptr1 == 0;\n              goto LAB_001099c4;\n            }\n            str1_ptr = (char **)*longVar_ptr1;\n            if (str1_ptr == (char **)0x0) break;\n            if ((**str2_ptr != **str1_ptr) || (loopIndex = strcmp(*str2_ptr,*str1_ptr), loopIndex != 0))\n            break;\n            charVar1 = str2_ptr[1];\n            charVar2 = str1_ptr[1];\n            if ((charVar1 == (char *)0x0) != (charVar2 == (char *)0x0)) break;\n            if (charVar1 != (char *)0x0) {\n              tempLongVar = 0;\n              while( true ) {\n                str2_ptr = *(char ***)(charVar1 + tempLongVar);\n                str1_ptr = *(char ***)(charVar2 + tempLongVar);\n                if (str2_ptr == (char **)0x0) break;\n                if (str1_ptr == (char **)0x0) goto LAB_00109382;\n                if ((((**str2_ptr != **str1_ptr) ||\n                     ((((ulong)str2_ptr[2] ^ (ulong)str1_ptr[2]) & 0xffffffffffff) != 0)) ||\n                    ((str2_ptr[3] != str1_ptr[3] ||\n                     ((((str2_ptr[4] == (char *)0x0) != (str1_ptr[4] == (char *)0x0) ||\n                       (loopIndex = strcmp(*str2_ptr,*str1_ptr), loopIndex != 0)) ||\n                      (comparisonResult = compareData_0010922b(param_ptr,str2_ptr[1],str1_ptr[1]), comparisonResult == '\\0')))))) ||\n                   ((str2_ptr[4] != (char *)0x0 &&\n                    (comparisonResult = compareData_0010922b(param_ptr,str2_ptr[4],str1_ptr[4]), comparisonResult == '\\0'))))\n                goto LAB_00109382;\n                tempLongVar = tempLongVar + 8;\n              }\n              if (str1_ptr == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            type_ptr2 = type_ptr2 + 1;\n            longVar_ptr1 = longVar_ptr1 + 1;\n          }\n        }\n        else {\n          longVar_ptr2 = dataType1_ptr[2];\n          for (; type_ptr2 = (undefined8 *)*longVar_ptr3, type_ptr2 != (undefined8 *)0x0;\n              longVar_ptr3 = longVar_ptr3 + 1) {\n            type_ptr1 = (undefined8 *)*longVar_ptr2;\n            if ((((type_ptr1 == (undefined8 *)0x0) ||\n                 (((type_ptr2[1] ^ type_ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(type_ptr2 + 2) != *(int *)(type_ptr1 + 2))) ||\n               (comparisonResult = compareData_0010922b(param_ptr,*type_ptr2,*type_ptr1), comparisonResult == '\\0'))\n            goto LAB_00109382;\n            longVar_ptr2 = longVar_ptr2 + 1;\n          }\n          if (*longVar_ptr2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; str2_ptr = (char **)*type_ptr2, str2_ptr != (char **)0x0; type_ptr2 = type_ptr2 + 1) {\n          str1_ptr = (char **)*local_ptr1;\n          if (str1_ptr == (char **)0x0) goto LAB_00109382;\n          charVar1 = *str1_ptr;\n          charVar2 = *str2_ptr;\n          if ((*charVar2 != *charVar1) ||\n             ((((ulong)str2_ptr[2] ^ (ulong)str1_ptr[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)str2_ptr + 0x14) == '\\0') {\n            if (str2_ptr[3] == str1_ptr[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          loopIndex = strcmp(str2_ptr[3],str1_ptr[3]);\n          if (loopIndex != 0) goto LAB_00109382;\nLAB_00109480:\n          loopIndex = strcmp(charVar2,charVar1);\n          if (((loopIndex != 0) || (str2_ptr[1] == (char *)0x0)) || (str1_ptr[1] == (char *)0x0))\n          goto LAB_00109382;\n          type1 = find_real_type_00112b6e(str1_ptr[1],0);\n          type2 = find_real_type_00112b6e(str2_ptr[1],0);\n          comparisonResult = compareData_0010922b(param_ptr,type2,type1);\n          if (comparisonResult == '\\0') goto LAB_00109382;\n          local_ptr1 = local_ptr1 + 1;\n        }\n        if (*local_ptr1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    longVar_ptr1 = (long *)data1_ptr[2];\n    longVar_ptr3 = (long *)data2_ptr[2];\n    if (longVar_ptr1 == (long *)0x0) {\n      result = longVar_ptr3 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (longVar_ptr3 == (long *)0x0) goto LAB_00109382;\n    tempLongVar = *longVar_ptr1;\n    longVar1 = *longVar_ptr3;\n    longVarIndex = 0;\n    longVar2 = longVar_ptr1[1];\n    longVar3 = longVar_ptr3[1];\n    do {\n      charVar1 = *(char **)(tempLongVar + longVarIndex);\n      if (charVar1 == (char *)0x0) {\n        result = *(long *)(longVar1 + longVarIndex) == 0;\n        goto LAB_001099c1;\n      }\n      charVar2 = *(char **)(longVar1 + longVarIndex);\n      if (((charVar2 == (char *)0x0) || (*charVar1 != *charVar2)) ||\n         (*(long *)(longVar2 + longVarIndex) != *(long *)(longVar3 + longVarIndex))) break;\n      loopIndex = strcmp(charVar1,charVar2);\n      longVarIndex = longVarIndex + 8;\n    } while (loopIndex == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = compareData_0010922b(param_ptr,data1_ptr[2],data2_ptr[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)data1_ptr[2] + 2) == *(char *)((undefined8 *)data2_ptr[2] + 2)) &&\n       (comparisonResult = compareData_0010922b(param_ptr,*(undefined8 *)data1_ptr[2],*(undefined8 *)data2_ptr[2]),\n       comparisonResult != '\\0')) {\n      longVar_ptr1 = *(long **)(data1_ptr[2] + 8);\n      longVar_ptr3 = *(long **)(data2_ptr[2] + 8);\n      if ((longVar_ptr1 == (long *)0x0) == (longVar_ptr3 == (long *)0x0)) {\n        if (longVar_ptr1 == (long *)0x0) goto LAB_001097af;\n        while (((*longVar_ptr1 != 0 && (*longVar_ptr3 != 0)) &&\n               (comparisonResult = compareData_0010922b(param_ptr), comparisonResult != '\\0'))) {\n          longVar_ptr1 = longVar_ptr1 + 1;\n          longVar_ptr3 = longVar_ptr3 + 1;\n        }\nLAB_0010995d:\n        if (*longVar_ptr1 != 0) goto LAB_00109964;\n        result = *longVar_ptr3 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    type_ptr2 = (undefined8 *)data2_ptr[2];\n    type_ptr1 = (undefined8 *)data1_ptr[2];\n    result = 0;\n    if ((type_ptr1[1] == type_ptr2[1]) && (type_ptr1[2] == type_ptr2[2])) {\nLAB_00109862:\n      result = compareData_0010922b(param_ptr,*type_ptr1,*type_ptr2);\n    }\n    break;\n  case 0x10:\n    type_ptr2 = (undefined8 *)data2_ptr[2];\n    type_ptr1 = (undefined8 *)data1_ptr[2];\n    result = 0;\n    if (((type_ptr1[2] == type_ptr2[2]) && (type_ptr1[3] == type_ptr2[3])) &&\n       (*(char *)(type_ptr1 + 4) == *(char *)(type_ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    type_ptr2 = (undefined8 *)data2_ptr[2];\n    type_ptr1 = (undefined8 *)data1_ptr[2];\n    result = 0;\n    if (*(char *)(type_ptr1 + 1) == *(char *)(type_ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    comparisonResult = compareData_0010922b(param_ptr,*(undefined8 *)data1_ptr[2],*(undefined8 *)data2_ptr[2]);\n    result = 0;\n    if (comparisonResult != '\\0') {\n      result = compareData_0010922b(param_ptr,*(undefined8 *)(data1_ptr[2] + 8),*(undefined8 *)(data2_ptr[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)data1_ptr[2] + 3) == *(char *)((undefined8 *)data2_ptr[2] + 3)) &&\n        (comparisonResult = compareData_0010922b(param_ptr,*(undefined8 *)data1_ptr[2],*(undefined8 *)data2_ptr[2]),\n        comparisonResult != '\\0')) &&\n       (comparisonResult = compareData_0010922b(param_ptr,*(undefined8 *)(data1_ptr[2] + 8),\n                              *(undefined8 *)(data2_ptr[2] + 8)), comparisonResult != '\\0')) {\n      longVar_ptr1 = *(long **)(data1_ptr[2] + 0x10);\n      longVar_ptr3 = *(long **)(data2_ptr[2] + 0x10);\n      if ((longVar_ptr1 == (long *)0x0) == (longVar_ptr3 == (long *)0x0)) {\n        if (longVar_ptr1 != (long *)0x0) {\n          while (((*longVar_ptr1 != 0 && (*longVar_ptr3 != 0)) &&\n                 (comparisonResult = compareData_0010922b(param_ptr), comparisonResult != '\\0'))) {\n            longVar_ptr1 = longVar_ptr1 + 1;\n            longVar_ptr3 = longVar_ptr3 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    longVar_ptr1 = (long *)data2_ptr[2];\n    longVar_ptr3 = (long *)data1_ptr[2];\n    loopIndex = strcmp(*(char **)(*longVar_ptr3 + 8),*(char **)(*longVar_ptr1 + 8));\n    result = 0;\n    if (loopIndex == 0) {\n      result = compareData_0010922b(param_ptr,longVar_ptr3[1],longVar_ptr1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(param_ptr + 0x58) = local_ptr2;\n  return result;\ncode_r0x00109263:\n  data1_ptr = **(long ***)data1_ptr[2];\n  longVar_ptr1 = data1_ptr;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "abort",
                "strcmp",
                "FUN_00112b6e",
                "FUN_0010922b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "compare_data_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "copy_archive_contents_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "charVar1",
                "iVar2": "intVar2",
                "iVar3": "intVar3",
                "ppcVar4": "charPtrPtrVar",
                "lVar5": "longVar5",
                "uVar6": "uintVar6",
                "__format": "formatString",
                "puVar7": "undefinedVar7",
                "piVar8": "intPtrVar8",
                "uVar9": "uintVar9",
                "in_RAX": "raxValue",
                "pcVar10": "pathStr",
                "ppcVar11": "charPtrPtrVar2",
                "lVar12": "longVar12",
                "pvVar13": "voidPtrVar",
                "pcVar14": "functionPointer",
                "lVar15": "longVar15",
                "pcVar16": "pathStr2",
                "psVar17": "statStructVar",
                "unaff_R14": "undefinedVar14",
                "unaff_R15": "undefinedVar15",
                "bVar18": "byteVar18",
                "unaff_retaddr": "undefinedRetaddr",
                "in_stack_00000008": "inStackVar8",
                "in_stack_00000010": "inStackVar10",
                "in_stack_00000018": "inStackVar18",
                "in_stack_00000020": "inStackVar20",
                "in_stack_00000028": "inStackVar28",
                "in_stack_00000030": "inStackVar30",
                "in_stack_000000f8": "inStackVarF8",
                "in_stack_00000110": "inStackVar110"
            },
            "code": "\nvoid copyArchiveContents_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char charVar1;\n  int intVar2;\n  int intVar3;\n  char **charPtrPtrVar;\n  long longVar5;\n  undefined8 uintVar6;\n  char *formatString;\n  undefined8 *undefinedVar7;\n  int *intPtrVar8;\n  undefined8 uintVar9;\n  long raxValue;\n  char *pathStr;\n  char **charPtrPtrVar2;\n  long longVar12;\n  void *voidPtrVar;\n  code *functionPointer;\n  long longVar15;\n  char *pathStr2;\n  stat *statStructVar;\n  undefined8 *undefinedVar14;\n  char **undefinedVar15;\n  byte byteVar18;\n  undefined8 undefinedRetaddr;\n  undefined8 *inStackVar8;\n  long *inStackVar10;\n  char *inStackVar18;\n  undefined8 *inStackVar20;\n  undefined8 inStackVar28;\n  undefined8 inStackVar30;\n  uint inStackVarF8;\n  long inStackVar110;\n  \n  byteVar18 = 0;\n  pathStr = (char *)(raxValue + 1);\n  do {\n    if (*pathStr == '/') {\n      copyArchiveContents_001052a2();\n      return;\n    }\n    while (*pathStr == '\\0') {\n      pathStr = (char *)concat(inStackVar18,&DAT_0011b47d);\n      intVar3 = stat(pathStr,(stat *)&stack0x00000050);\n      undefinedVar7 = undefinedVar14;\n      if (-1 < intVar3) {\n        longVar12 = create_temporary_directory_0011a0e0(pathStr);\n        free(pathStr);\n        if (longVar12 == 0) {\n          intPtrVar8 = __errno_location();\n          pathStr = strerror(*intPtrVar8);\n          uintVar9 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(uintVar9,pathStr);\n          goto LAB_00104e93;\n        }\n        undefinedVar7 = (undefined8 *)xmalloc(0x18);\n        pathStr = *undefinedVar15;\n        *undefinedVar7 = undefinedVar14;\n        undefinedVar7[2] = 0;\n        undefinedVar7[1] = longVar12;\n        pathStr = (char *)concat(longVar12,&DAT_0011b47d,pathStr);\n      }\n      intVar3 = 0;\n      if (DAT_001279eb != '\\0') {\n        statStructVar = (stat *)&stack0x00000050;\n        for (longVar12 = 0x24; longVar12 != 0; longVar12 = longVar12 + -1) {\n          *(undefined4 *)&statStructVar->st_dev = 0;\n          statStructVar = (stat *)((long)statStructVar + (ulong)byteVar18 * -8 + 4);\n        }\n        charPtrPtrVar2 = (char **)undefinedVar15[0x1d];\n        if ((char **)undefinedVar15[0x1d] == (char **)0x0) {\n          charPtrPtrVar2 = undefinedVar15;\n        }\n        intVar3 = (**(code **)(charPtrPtrVar2[1] + 0x1e8))(undefinedVar15,(stat *)&stack0x00000050);\n        if (intVar3 != 0) {\n          pathStr2 = *undefinedVar15;\n          uintVar9 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(uintVar9,pathStr2);\n        }\n      }\n      undefinedVar14 = (undefined8 *)xmalloc(0x18);\n      undefinedVar14[1] = pathStr;\n      *undefinedVar14 = undefinedVar7;\n      undefinedVar14[2] = 0;\n      charVar1 = bfd_check_format(undefinedVar15,1);\n      if (charVar1 == '\\0') {\n        uintVar9 = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_bfd_error_message_001126c0(0,undefinedVar15,0,uintVar9);\n        charPtrPtrVar2 = (char **)bfd_openw(pathStr,inStackVar28);\n        if (charPtrPtrVar2 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        charPtrPtrVar = (char **)undefinedVar15[0x1d];\n        if ((char **)undefinedVar15[0x1d] == (char **)0x0) {\n          charPtrPtrVar = undefinedVar15;\n        }\n        intVar2 = (**(code **)(charPtrPtrVar[1] + 0x1e8))(undefinedVar15,&stack0x000000e0);\n        longVar12 = inStackVar110;\n        if (intVar2 == 0) {\n          if (inStackVar110 < 0) {\n            uintVar9 = get_formatted_string_001125fa(undefinedVar15);\n            uintVar6 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_message_00119ed0(uintVar6,uintVar9);\n          }\n          else {\n            intVar2 = bfd_seek(undefinedVar15,0,0);\n            if (intVar2 == 0) {\n              if (DAT_001279e9 != '\\0') {\n                pathStr2 = *charPtrPtrVar2;\n                uintVar9 = get_formatted_string_001125fa(undefinedVar15);\n                formatString = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(formatString,uintVar9,pathStr2);\n              }\n              voidPtrVar = (void *)xmalloc(0x2000);\n              for (; longVar12 != 0; longVar12 = longVar12 - longVar15) {\n                longVar15 = 0x2000;\n                if (longVar12 < 0x2001) {\n                  longVar15 = longVar12;\n                }\n                longVar5 = bfd_bread(voidPtrVar,longVar15,undefinedVar15);\n                charPtrPtrVar = undefinedVar15;\n                if ((longVar15 != longVar5) ||\n                   (longVar5 = bfd_bwrite(voidPtrVar,longVar15,charPtrPtrVar2), charPtrPtrVar = charPtrPtrVar2, longVar15 != longVar5\n                   )) {\n                  print_bfd_error_message_001126c0(0,charPtrPtrVar,0,0);\n                  free(voidPtrVar);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*charPtrPtrVar2,inStackVarF8 | 0x100);\n              free(voidPtrVar);\n              charVar1 = bfd_close_all_done(charPtrPtrVar2);\n              if (charVar1 == '\\0') {\n                print_bfd_error_message_001126c0(pathStr,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            uintVar9 = get_formatted_string_001125fa(undefinedVar15);\n            print_bfd_error_message_0011a110(uintVar9);\n          }\n        }\n        else {\n          print_bfd_error_message_001126c0(0,undefinedVar15,0,0);\n        }\nLAB_00104f00:\n        charVar1 = bfd_close_all_done(charPtrPtrVar2);\n        if (charVar1 == '\\0') {\n          print_bfd_error_message_001126c0(pathStr,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(pathStr);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (inStackVar30._7_1_ == '\\0') {\n          charPtrPtrVar2 = (char **)bfd_openw(pathStr,*(undefined8 *)undefinedVar15[1]);\n        }\n        else {\n          charPtrPtrVar2 = (char **)bfd_openw(pathStr,inStackVar28);\n        }\n        if (charPtrPtrVar2 == (char **)0x0) {\nLAB_00104e80:\n          print_bfd_error_message_001126c0(pathStr,0,0,0);\n          goto LAB_00104e93;\n        }\n        charVar1 = FUNC_00114e50(undefinedVar15,charPtrPtrVar2,undefinedRetaddr);\n        if (charVar1 == '\\0') {\n          intVar2 = bfd_get_arch(undefinedVar15);\n          if (intVar2 == 0) goto LAB_00104d75;\n          charVar1 = bfd_close_all_done(charPtrPtrVar2);\n          if (charVar1 == '\\0') {\n            print_bfd_error_message_001126c0(pathStr,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        charVar1 = bfd_close(charPtrPtrVar2);\n        if (charVar1 == '\\0') {\n          print_bfd_error_message_001126c0(pathStr,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (intVar3 == 0)) {\n          set_time_0011a350(pathStr,(stat *)&stack0x00000050);\n        }\n        longVar12 = bfd_openr(pathStr,inStackVar28);\n        undefinedVar14[2] = longVar12;\n        *inStackVar10 = longVar12;\n        inStackVar10 = (long *)(longVar12 + 0xf0);\n        charPtrPtrVar2 = (char **)bfd_openr_next_archived_file(inStackVar20,undefinedVar15);\n        bfd_close(undefinedVar15);\n        undefinedVar15 = charPtrPtrVar2;\n      }\n      if ((DAT_00127a40 != 0) || (undefinedVar15 == (char **)0x0)) {\n        *inStackVar10 = 0;\n        voidPtrVar = (void *)xstrdup(*inStackVar8);\n        if (DAT_00127a40 == 0) {\n          functionPointer = bfd_close;\n        }\n        else {\n          functionPointer = bfd_close_all_done;\n        }\n        charVar1 = (*functionPointer)(inStackVar8);\n        if (charVar1 == '\\0') {\n          DAT_00127a40 = 1;\n          print_bfd_error_message_001126c0(voidPtrVar,0,0,0);\n        }\n        free(voidPtrVar);\n        voidPtrVar = (void *)xstrdup(*inStackVar20);\n        charVar1 = bfd_close(inStackVar20);\n        if (charVar1 == '\\0') {\n          DAT_00127a40 = 1;\n          print_bfd_error_message_001126c0(voidPtrVar,0,0,0);\n        }\n        free(voidPtrVar);\n        goto LAB_00114b4b;\n      }\n      pathStr = *undefinedVar15;\n      param3 = pathStr;\n      if (*pathStr == '/') goto LAB_0010527d;\n    }\n    pathStr2 = pathStr;\n    if ((*pathStr == '.') && (pathStr2 = pathStr + 1, pathStr[1] == '.')) {\n      pathStr2 = pathStr + 2;\n      if ((pathStr[2] == '\\0') || (pathStr[2] == '/')) {\nLAB_0010527d:\n        uintVar9 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(uintVar9,param3);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (undefinedVar14 != (undefined8 *)0x0) {\n          if (undefinedVar14[2] == 0) {\n            rmdir((char *)undefinedVar14[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)undefinedVar14[1]);\n          }\n          free((void *)undefinedVar14[1]);\n          undefinedVar7 = (undefined8 *)*undefinedVar14;\n          free(undefinedVar14);\n          undefinedVar14 = undefinedVar7;\n        }\n        rmdir(inStackVar18);\n        free(inStackVar18);\n        return;\n      }\n    }\n    for (; (pathStr = pathStr2, *pathStr2 != '\\0' && (*pathStr2 != '/')); pathStr2 = pathStr2 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_contents_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "initialize_structure_0010e453",
                "param_1": "data",
                "param_2": "inputString",
                "param_3": "stringArray",
                "lVar1": "length",
                "cVar2": "result",
                "sVar3": "stringLength",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "totalLength",
                "ppcVar6": "currentString",
                "lVar7": "offset"
            },
            "code": "\nundefined8 initializeStructure_0010e453(long data,char *inputString,char **stringArray)\n\n{\n  long length;\n  char result;\n  size_t stringLength;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long totalLength;\n  char **currentString;\n  long offset;\n  \n  if (stringArray == (char **)0x0) {\n    if (inputString != (char *)0x0) {\n      stringLength = strlen(inputString);\n      formattedString = (undefined2 *)xmalloc(stringLength + 10);\n      sprintf((char *)formattedString,\"xe%s:\",inputString);\nLAB_0010e578:\n      result = initialize_data_structure_00109b52(data,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    totalLength = 10;\n    currentString = stringArray;\n    if (inputString != (char *)0x0) {\n      stringLength = strlen(inputString);\n      totalLength = stringLength + 10;\n    }\n    for (; *currentString != (char *)0x0; currentString = currentString + 1) {\n      stringLength = strlen(*currentString);\n      totalLength = totalLength + 0x14 + stringLength;\n    }\n    formattedString = (undefined2 *)xmalloc(totalLength);\n    if (inputString == (char *)0x0) {\n      *formattedString = 0x65;\n      totalLength = 0;\n    }\n    else {\n      totalLength = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = totalLength + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",inputString,totalLength);\n    }\n    offset = 0;\n    while( true ) {\n      length = *(long *)((long)stringArray + offset);\n      stringLength = strlen((char *)formattedString);\n      if (length == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + stringLength),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + stringLength) = 0x3b;\n    if (inputString == (char *)0x0) goto LAB_0010e578;\n    result = process_string_0010e2f0(data,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = initialize_data_structure_00109cf4(data,totalLength,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_structure_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "initialize_array_and_data_structure_00109d5c",
                "param_1": "inputData",
                "lVar1": "arraySize",
                "uVar2": "dataStructure"
            },
            "code": "\nundefined8 initializeArrayAndDataStructure_00109d5c(undefined8 inputData)\n\n{\n  long arraySize;\n  undefined8 dataStructure;\n  \n  arraySize = resize_and_initialize_array_00109c2e();\n  if (-1 < arraySize) {\n    dataStructure = initialize_data_structure_00109cf4(inputData,arraySize,0);\n    return dataStructure;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_array_and_data_structure_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_parameters_0010ed2c",
                "param_1": "param_ptr",
                "param_2": "new_value",
                "param_3": "return_value",
                "extraout_RDX": "extra_out",
                "in_R10": "in_register",
                "cVar1": "result",
                "iVar2": "count",
                "uVar3": "updated_value",
                "auVar4": "processed_string"
            },
            "code": "\nundefined  [16] update_parameters_0010ed2c(long param_ptr,ulong new_value,undefined8 return_value)\n\n{\n  char result;\n  int count;\n  undefined8 extra_out;\n  ulong updated_value;\n  undefined8 in_register;\n  undefined processed_string [16];\n  \n  if (*(ulong *)(param_ptr + 0x1f0) < new_value) {\n    *(ulong *)(param_ptr + 0x1f0) = new_value;\n  }\n  if (*(long *)(param_ptr + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(param_ptr + 0x1f8) != 0) {\n      count = *(int *)(param_ptr + 0x1f8) + -1;\n      updated_value = CONCAT71((int7)((ulong)return_value >> 8),1);\n      *(int *)(param_ptr + 0x1f8) = count;\n      if (count != 0) {\n        processed_string = process_string_0010e2f0(param_ptr,0xe0,0,new_value - *(long *)(param_ptr + 0x200),0,in_register);\n        return processed_string;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    result = process_string_0010e2f0(param_ptr,0xc0,0,*(long *)(param_ptr + 0x208),0);\n    if (result != '\\0') {\n      *(undefined8 *)(param_ptr + 0x208) = 0xffffffffffffffff;\n      return_value = extra_out;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_value = 0;\nLAB_0010edae:\n  processed_string._0_8_ = updated_value & 0xffffffff;\n  processed_string._8_8_ = in_register;\n  return processed_string;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_parameters_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_records_0011a1b0",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "record1_size",
                "uVar2": "record2_size",
                "iVar3": "comparison_result",
                "extraout_var": "extra_var",
                "uVar4": "final_result",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] compareRecords_0011a1b0(ulong *param_1,ulong *param_2,undefined8 param1,undefined8 param2)\n\n{\n  ulong record1_size;\n  ulong record2_size;\n  int comparison_result;\n  undefined4 extra_var;\n  ulong final_result;\n  undefined result [16];\n  \n  final_result = *param_1;\n  if (*param_2 <= *param_1) {\n    final_result = *param_2;\n  }\n  comparison_result = memcmp((void *)(param_1[3] + 3),(void *)(param_2[3] + 3),final_result - 3);\n  final_result = CONCAT44(extra_var,comparison_result);\n  if (comparison_result == 0) {\n    record1_size = param_1[8];\n    if (record1_size < param_2[7]) {\n      final_result = 0xffffffff;\n    }\n    else {\n      record2_size = param_2[8];\n      if (record2_size < param_1[7]) {\n        final_result = 1;\n      }\n      else {\n        final_result = 0xffffffff;\n        if (param_2[7] <= param_1[7]) {\n          if (record2_size < record1_size) {\n            final_result = 1;\n          }\n          else {\n            final_result = 0xffffffff;\n            if (record2_size <= record1_size) {\n              if (param_1[2] == 0x100) {\n                final_result = (ulong)-(uint)(param_2[2] != 0x100);\n              }\n              else {\n                final_result = (ulong)(param_2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = param2;\n  result._0_8_ = final_result;\n  return result;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_records_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "process_build_attribute_notes_001163d0",
                "param_1": "param_reloc_info",
                "param_2": "param_reloc_tgt",
                "param_3": "param_reloc_size",
                "param_4": "param_output_buffer",
                "uVar1": "rel_size",
                "uVar2": "reloc_tgt_upper_bound",
                "uVar3": "reloc_info_upper_bound",
                "bVar4": "is_reloc_tgt",
                "puVar5": "ptr_reloc_info",
                "iVar6": "cmp_result",
                "uVar7": "err_msg",
                "lVar8": "result",
                "__ptr": "ptr_bfd_reloc",
                "uVar9": "name_desc_size",
                "uVar10": "name",
                "uVar11": "note_type",
                "uVar12": "desc_size",
                "uVar13": "desc_align",
                "uVar14": "note_version",
                "uVar15": "start_addr",
                "uVar16": "remaining_size",
                "puVar17": "ptr_note",
                "cVar19": "note_version_2",
                "puVar18": "output_buffer_ptr",
                "local_88": "section_reloc_tgt",
                "uStack_80": "section_reloc_tgt_lower",
                "local_70": "note_reloc_tgt",
                "local_68": "total_reloc_size",
                "local_60": "arr_notes",
                "puVar20": "record_ptr",
                "iVar21": "record_index",
                "puVar22": "note_ptr",
                "puVar23": "note_desc",
                "puVar25": "prev_note_ptr",
                "bVar26": "is_32_bit_reloc",
                "__nmemb": "num_notes",
                "__ptr_00": "output_buffer"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong process_build_attribute_notes_001163d0(undefined8 *param_reloc_info,undefined8 *param_reloc_tgt,ulong param_reloc_size,undefined *param_output_buffer)\n\n{\n  ulong rel_size;\n  undefined8 reloc_tgt_upper_bound;\n  undefined8 reloc_info_upper_bound;\n  bool is_reloc_tgt;\n  ulong *ptr_reloc_info;\n  int cmp_result;\n  undefined8 err_msg;\n  long result;\n  void *ptr_bfd_reloc;\n  ulong name_desc_size;\n  ulong name;\n  ulong note_type;\n  ulong desc_size;\n  undefined *output_buffer;\n  ulong desc_align;\n  ulong note_version;\n  ulong start_addr;\n  ulong remaining_size;\n  ulong *ptr_note;\n  undefined *output_buffer_ptr;\n  char note_version_2;\n  undefined *record_ptr;\n  int record_index;\n  undefined *note_ptr;\n  ulong *note_desc;\n  ulong reloc_tgt_upper_bound4;\n  size_t num_notes;\n  ulong *prev_note_ptr;\n  byte is_32_bit_reloc;\n  ulong section_reloc_tgt;\n  ulong section_reloc_tgt_lower;\n  ulong note_reloc_tgt;\n  ulong total_reloc_size;\n  ulong *arr_notes;\n  \n  is_32_bit_reloc = 0;\n  result = bfd_get_reloc_upper_bound();\n  total_reloc_size = param_reloc_size;\n  if (0 < result) {\n    ptr_bfd_reloc = (void *)xmalloc(result);\n    result = bfd_canonicalize_reloc(param_reloc_info,param_reloc_tgt,ptr_bfd_reloc,DAT_001278d0);\n    free(ptr_bfd_reloc);\n    if (result != 0) {\n      if (_DAT_001264c0 == 0) {\n        reloc_tgt_upper_bound = *param_reloc_info;\n        reloc_info_upper_bound = *param_reloc_tgt;\n        err_msg = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message_00119ed0(err_msg,reloc_tgt_upper_bound,reloc_info_upper_bound);\n      }\n      arr_notes = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  arr_notes = (ulong *)xcalloc(param_reloc_size / 0xc,0x48,param_reloc_size % 0xc);\n  section_reloc_tgt = 0;\n  note_reloc_tgt = 0;\n  remaining_size = param_reloc_size;\n  start_addr = 0;\n  note_desc = arr_notes;\n  note_version = 0;\n  note_ptr = param_output_buffer;\n  while (0xb < remaining_size) {\n    name = (**(code **)(param_reloc_info[1] + 0x40))(note_ptr);\n    *note_desc = name;\n    name = (**(code **)(param_reloc_info[1] + 0x40))(note_ptr + 4);\n    note_desc[1] = name;\n    note_type = (**(code **)(param_reloc_info[1] + 0x40))(note_ptr + 8);\n    name = *note_desc;\n    note_desc[2] = note_type;\n    desc_size = note_desc[1];\n    desc_align = name + 3 & 0xfffffffffffffffc;\n    note_desc[6] = desc_align;\n    if (desc_size != (desc_size + 3 & 0xfffffffffffffffc)) {\n      result = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note_type - 0x100) {\n      result = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    rel_size = desc_align + desc_size + 0xc;\n    if (remaining_size < rel_size) {\n      result = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (name < 2) {\n      result = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    note_desc[3] = (ulong)(note_ptr + 0xc);\n    note_desc[4] = (ulong)(note_ptr + desc_align + 0xc);\n    remaining_size = remaining_size + (-0xc - (desc_align + desc_size));\n    if (name != 2) {\n      if (note_ptr[0xc] == '$') {\n        if ((note_ptr[0xd] == '\\x01') && (note_ptr[0xe] == '1')) {\n          remaining_size = process_attributes_00116490();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < name) && (note_ptr[0xc] == 'G')) && (note_ptr[0xd] == 'A')) &&\n              ((note_ptr[0xe] == '$' && (note_ptr[0xf] == '\\x01')))) {\n        if (note_ptr[0x10] == '2') {\n          remaining_size = process_attributes_00116490();\n          return remaining_size;\n        }\n        if (note_ptr[0x10] == '3') {\n          remaining_size = process_attributes_00116490();\n          return remaining_size;\n        }\n        result = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    name_desc_size = start_addr;\n    reloc_tgt_upper_bound4 = note_version;\n    if (desc_size == 0) {\n      if (note_type == 0x100) {\n        note_desc[7] = section_reloc_tgt;\nLAB_001164af:\n        desc_size = note_version;\n        reloc_tgt_upper_bound4 = note_version;\n      }\n      else {\n        note_desc[7] = note_reloc_tgt;\nLAB_0011669e:\n        name_desc_size = start_addr;\n        desc_size = start_addr;\n      }\n    }\n    else {\n      if (desc_size != 0x10) {\n        if (desc_size < 0x11) {\n          if (desc_size == 4) {\n            note_type = (**(code **)(param_reloc_info[1] + 0x40))();\n            desc_size = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (desc_size == 8) {\n            remaining_size = process_build_attribute_notes_001163d0_001086af();\n            return remaining_size;\n          }\n        }\n        result = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      note_type = (**(code **)(param_reloc_info[1] + 0x28))(note_ptr + desc_align + 0xc);\n      desc_size = (**(code **)(param_reloc_info[1] + 0x28))();\n      if (desc_size < note_type) {\n        note_type = desc_size;\n      }\nLAB_00116631:\n      if (note_desc[2] == 0x100) {\n        if (note_type == 0) {\n          note_type = section_reloc_tgt;\n        }\n        name = *note_desc;\n        note_desc[7] = note_type;\n        reloc_tgt_upper_bound4 = desc_size;\n        section_reloc_tgt = note_type;\n        if (desc_size == 0) goto LAB_001164af;\n      }\n      else {\n        if (note_type == 0) {\n          note_type = note_reloc_tgt;\n        }\n        name = *note_desc;\n        note_desc[7] = note_type;\n        name_desc_size = desc_size;\n        note_reloc_tgt = note_type;\n        if (desc_size == 0) goto LAB_0011669e;\n      }\n    }\n    note_desc[8] = desc_size;\n    if (*(char *)((note_desc[3] - 1) + name) != '\\0') {\n      result = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    note_desc = note_desc + 9;\n    start_addr = name_desc_size;\n    note_version = reloc_tgt_upper_bound4;\n    note_ptr = note_ptr + rel_size;\n  }\n  if (remaining_size == 0) {\n    reloc_tgt_upper_bound = *param_reloc_info;\n    reloc_info_upper_bound = *param_reloc_tgt;\n    err_msg = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message_00119ed0(err_msg,reloc_tgt_upper_bound,reloc_info_upper_bound);\n    num_notes = ((long)note_desc - (long)arr_notes >> 3) * -0x71c71c71c71c71c7;\n    qsort(arr_notes,num_notes,0x48,compare_records_0011a1b0);\n    for (ptr_note = arr_notes; ptr_note < note_desc; ptr_note = ptr_note + 9) {\n      remaining_size = ptr_note[2];\n      if (remaining_size != 0) {\n        start_addr = ptr_note[7];\n        note_version = ptr_note[8];\n        prev_note_ptr = ptr_note;\n        record_index = 0;\n        if (start_addr == note_version) {\n          ptr_note[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr_reloc_info = prev_note_ptr;\n              prev_note_ptr = ptr_reloc_info + -9;\n              if (prev_note_ptr < arr_notes) goto LAB_001167f5;\n              name = ptr_reloc_info[-7];\n            } while (name == 0);\n            if ((*prev_note_ptr != *ptr_note) ||\n               (cmp_result = memcmp((void *)ptr_reloc_info[-6],(void *)ptr_note[3],*ptr_note), cmp_result != 0)) break;\n            desc_size = ptr_reloc_info[-2];\n            note_type = ptr_reloc_info[-1];\n            if (start_addr == desc_size) {\n              if (note_version == note_type) {\n                ptr_note[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (note_version <= note_type) {\n                ptr_note[2] = 0;\n                break;\n              }\n              if (note_type < start_addr) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < note_type) || (start_addr <= (note_type + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (name == 0x101)) {\n                if (note_type <= note_version) {\n                  note_type = note_version;\n                }\n                if (desc_size < start_addr) {\n                  start_addr = desc_size;\n                }\n                ptr_reloc_info[-1] = note_type;\n                ptr_reloc_info[-2] = start_addr;\n                ptr_note[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (desc_size <= start_addr) goto LAB_001167a6;\n              if (note_type < start_addr) goto LAB_0010852c;\n              if (note_version < start_addr) {\n                if ((0xfffffffffffffff0 < note_version) || (desc_size <= (note_version + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n                goto LAB_001167b8;\n              }\n              if (note_version != note_type) goto LAB_001167b8;\n            }\nprocess_records_00116852:\n            is_reloc_tgt = record_index < 0x11;\n            record_index = record_index + 1;\n          } while (is_reloc_tgt);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(arr_notes,num_notes,0x48,compare_records_0011a250);\n    output_buffer = (undefined *)xmalloc(param_reloc_size * 2);\n    section_reloc_tgt_lower = 0;\n    note_reloc_tgt = 0;\n    note_ptr = output_buffer;\n    for (ptr_note = arr_notes; ptr_note < note_desc; ptr_note = ptr_note + 9) {\n      if (ptr_note[2] != 0) {\n        output_buffer_ptr = note_ptr + 0xc;\n        if ((ptr_note[7] == note_reloc_tgt) && (ptr_note[8] == section_reloc_tgt_lower)) {\n          (**(code **)(param_reloc_info[1] + 0x50))(*ptr_note,note_ptr);\n          (**(code **)(param_reloc_info[1] + 0x50))(0,note_ptr + 4);\n          (**(code **)(param_reloc_info[1] + 0x50))(ptr_note[2],note_ptr + 8);\n          start_addr = ptr_note[6];\n          remaining_size = *ptr_note;\n          note_ptr = (undefined *)ptr_note[3];\n          record_ptr = output_buffer_ptr;\n          for (note_version = remaining_size; note_version != 0; note_version = note_version - 1) {\n            *record_ptr = *note_ptr;\n            note_ptr = note_ptr + (ulong)is_32_bit_reloc * -2 + 1;\n            record_ptr = record_ptr + (ulong)is_32_bit_reloc * -2 + 1;\n          }\n          if (remaining_size < start_addr) {\n            for (result = start_addr - remaining_size; result != 0; result = result + -1) {\n              *record_ptr = 0;\n              record_ptr = record_ptr + (ulong)is_32_bit_reloc * -2 + 1;\n            }\n          }\n          note_ptr = output_buffer_ptr + start_addr;\n        }\n        else {\n          (**(code **)(param_reloc_info[1] + 0x50))();\n          if (*(int *)(param_reloc_info[1] + 8) == 5) {\n            note_version_2 = (*(char *)(param_reloc_info[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            note_version_2 = '\\b';\n          }\n          (**(code **)(param_reloc_info[1] + 0x50))(note_version_2,note_ptr + 4);\n          (**(code **)(param_reloc_info[1] + 0x50))(ptr_note[2],note_ptr + 8);\n          remaining_size = *ptr_note;\n          note_ptr = (undefined *)ptr_note[3];\n          record_ptr = output_buffer_ptr;\n          for (start_addr = remaining_size; start_addr != 0; start_addr = start_addr - 1) {\n            *record_ptr = *note_ptr;\n            note_ptr = note_ptr + (ulong)is_32_bit_reloc * -2 + 1;\n            record_ptr = record_ptr + (ulong)is_32_bit_reloc * -2 + 1;\n          }\n          start_addr = ptr_note[6];\n          if (remaining_size < start_addr) {\n            for (result = start_addr - remaining_size; result != 0; result = result + -1) {\n              *record_ptr = 0;\n              record_ptr = record_ptr + (ulong)is_32_bit_reloc * -2 + 1;\n            }\n          }\n          result = param_reloc_info[1];\n          output_buffer_ptr = output_buffer_ptr + start_addr;\n          note_ptr = output_buffer_ptr + 8;\n          if ((*(int *)(result + 8) == 5) && (*(char *)(param_reloc_info[0x22] + 4) == '\\x02')) {\n            (**(code **)(result + 0x38))(ptr_note[7],output_buffer_ptr);\n            (**(code **)(param_reloc_info[1] + 0x38))(ptr_note[8],note_ptr);\n            note_ptr = output_buffer_ptr + 0x10;\n          }\n          else {\n            (**(code **)(result + 0x50))(ptr_note[7],output_buffer_ptr);\n            (**(code **)(param_reloc_info[1] + 0x50))(ptr_note[8],output_buffer_ptr + 4);\n          }\n          note_reloc_tgt = ptr_note[7];\n          section_reloc_tgt_lower = ptr_note[8];\n        }\n      }\n    }\n    start_addr = (long)note_ptr - (long)output_buffer;\n    remaining_size = start_addr;\n    note_ptr = output_buffer;\n    total_reloc_size = param_reloc_size;\n    if (start_addr < param_reloc_size) {\n      for (; total_reloc_size = start_addr, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *param_output_buffer = *note_ptr;\n        note_ptr = note_ptr + (ulong)is_32_bit_reloc * -2 + 1;\n        param_output_buffer = param_output_buffer + (ulong)is_32_bit_reloc * -2 + 1;\n      }\n    }\n    free(output_buffer);\n  }\n  else {\n    result = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (result != 0) {\n      bfd_set_error(0x11);\n      print_bfd_error_message_001126c0(0,param_reloc_info,param_reloc_tgt,result);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(arr_notes);\n  return total_reloc_size;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "xcalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_stripped_file_usage_00108a2a",
                "param_1": "file",
                "param_2": "exitCode",
                "uVar1": "versionNumber",
                "pcVar2": "message"
            },
            "code": "\nvoid printStrippedFileUsage_00108a2a(FILE *file,int exitCode)\n\n{\n  undefined8 versionNumber;\n  char *message;\n  \n  versionNumber = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(file,message,versionNumber);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(file,message);\n  print_supported_targets_00104a35(DAT_00127600,file);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "FUN_00104a35",
                "exit",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_stripped_file_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extracted_binary_info_00108c86",
                "param_1": "binaryAddress",
                "cVar1": "comparisonResult",
                "iVar2": "comparisonValue",
                "sVar3": "stringLength",
                "puVar4": "allocatedMemory",
                "lVar5": "addressValue",
                "__s": "stringPtr",
                "__s1": "platformString",
                "puVar6": "copyPtr",
                "uVar7": "returnValue",
                "bVar8": "byteVar"
            },
            "code": "\nundefined8 extractedBinaryInfo_00108c86(long *binaryAddress)\n\n{\n  char comparisonResult;\n  int comparisonValue;\n  size_t stringLength;\n  undefined2 *allocatedMemory;\n  long addressValue;\n  char *stringPtr;\n  char *platformString;\n  undefined2 *copyPtr;\n  undefined8 returnValue;\n  byte byteVar;\n  \n  byteVar = 0;\n  addressValue = *binaryAddress;\n  stringPtr = (char *)(addressValue + 4);\n  comparisonResult = string_comparison_00113fb0(stringPtr,&DAT_0011b73b);\n  if (comparisonResult == '\\0') {\n    comparisonResult = string_comparison_00113fb0(stringPtr,\"bsdrv-\");\n    if (comparisonResult == '\\0') {\n      comparisonResult = string_comparison_00113fb0(stringPtr,\"rtdrv-\");\n      if (comparisonResult == '\\0') {\n        return 0xffffffff;\n      }\n      stringPtr = (char *)(addressValue + 6);\n      returnValue = 0xc;\n    }\n    else {\n      stringPtr = (char *)(addressValue + 6);\n      returnValue = 0xb;\n    }\n  }\n  else {\n    returnValue = 10;\n  }\n  stringLength = strlen(stringPtr);\n  allocatedMemory = (undefined2 *)xmalloc(stringLength + 8);\n  platformString = stringPtr + 4;\n  copyPtr = allocatedMemory;\n  for (addressValue = stringLength + 1; addressValue != 0; addressValue = addressValue + -1) {\n    *(char *)copyPtr = *stringPtr;\n    stringPtr = stringPtr + (ulong)byteVar * -2 + 1;\n    copyPtr = (undefined2 *)((long)copyPtr + (ulong)byteVar * -2 + 1);\n  }\n  *(undefined *)(allocatedMemory + 1) = 0x69;\n  *allocatedMemory = 0x6570;\n  comparisonValue = strcmp(platformString,\"ia32\");\n  if (comparisonValue == 0) {\n    *(undefined *)((long)allocatedMemory + 7) = 0x36;\n    *(undefined2 *)((long)allocatedMemory + 5) = 0x3833;\n  }\n  else {\n    comparisonValue = strcmp(platformString,\"x86_64\");\n    if (comparisonValue == 0) {\n      *(undefined *)((long)allocatedMemory + 7) = 0x2d;\n    }\n    else {\n      comparisonValue = strcmp(platformString,\"aarch64\");\n      if (comparisonValue == 0) {\n        *(undefined8 *)((long)allocatedMemory + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *binaryAddress = (long)allocatedMemory;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "FUN_00113fb0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extracted_binary_info_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "print_error_message_and_close_bfd_001053d5",
                "unaff_R12": "fileDescriptor",
                "unaff_R14": "bfdPointer"
            },
            "code": "\nundefined4 printErrorMessageAndCloseBFD_001053d5(void)\n\n{\n  long fileDescriptor;\n  undefined8 *bfdPointer;\n  \n  print_bfd_error_message_0011a110(*bfdPointer);\n  *(undefined4 *)(fileDescriptor + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(fileDescriptor + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "print_error_message_and_close_bfd_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "validate_memory_permissions_00104bba",
                "in_EAX": "eaxValue",
                "uVar1": "errorMessage",
                "unaff_EBP": "ebpValue",
                "unaff_R14": "r14Value"
            },
            "code": "\nvoid validateMemoryPermissions_00104bba(void)\n\n{\n  uint eaxValue;\n  undefined8 errorMessage;\n  uint ebpValue;\n  long r14Value;\n  \n  if ((eaxValue & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    execute_and_exit_00119dd0(errorMessage);\n  }\n  if ((((eaxValue & 8) == 0) || ((ebpValue & 0x10) == 0)) && ((ebpValue & 0x18) != 0x18)) {\n    if ((((eaxValue & 0x20) == 0) || ((ebpValue & 0x40) == 0)) && ((ebpValue & 0x60) != 0x60)) {\n      *(uint *)(r14Value + 0x14) = eaxValue | ebpValue;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    execute_and_exit_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  execute_and_exit_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "validate_memory_permissions_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "copiedString",
                "lVar2": "remainingLength",
                "puVar3": "destination",
                "bVar4": "isIncremented"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *copiedString;\n  long remainingLength;\n  undefined *destination;\n  byte isIncremented;\n  \n  isIncremented = 0;\n  copiedString = (undefined *)xmalloc((long)(length + 1));\n  destination = copiedString;\n  for (remainingLength = (long)length; remainingLength != 0; remainingLength = remainingLength + -1) {\n    *destination = *source;\n    source = source + (ulong)isIncremented * -2 + 1;\n    destination = destination + (ulong)isIncremented * -2 + 1;\n  }\n  copiedString[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0011173a",
                "FUN_0010afd5",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slot_list",
                "param_2": "slot_index",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "error_message",
                "plVar2": "new_slot",
                "lVar3": "slot_offset",
                "lVar4": "loop_counter",
                "uVar5": "remaining_slots",
                "bVar6": "unused",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_list,ulong slot_index,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  undefined8 error_message;\n  long *new_slot;\n  long slot_offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte unused;\n  undefined return_value [16];\n  \n  unused = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_list == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_list = new_slot;\n        for (slot_offset = 0x22; slot_offset != 0; slot_offset = slot_offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)unused * -8 + 4);\n        }\n      }\n      slot_list = (long **)*slot_list;\n    }\n    slot_offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      slot_offset = 0;\n    }\n    if (*slot_list == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_list = new_slot;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)unused * -8 + 4);\n      }\n    }\n    return_value._8_8_ = unused_param_2;\n    return_value._0_8_ = *slot_list + slot_index + slot_offset + 1;\n    return return_value;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  execute_and_exit_00119dd0(error_message,slot_index);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "create_initialized_data_structure_00112894",
                "param_1": "data",
                "param_2": "value",
                "puVar1": "data_structure",
                "puVar2": "ptr",
                "lVar3": "counter",
                "bVar4": "byte_val"
            },
            "code": "\nundefined8 *\ncreate_initialized_data_structure_00112894(undefined8 data,undefined value,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *data_structure;\n  undefined8 *ptr;\n  long counter;\n  byte byte_val;\n  \n  byte_val = 0;\n  data_structure = (undefined8 *)xmalloc(0x1b0);\n  ptr = data_structure;\n  for (counter = 0x6c; counter != 0; counter = counter + -1) {\n    *(undefined4 *)ptr = 0;\n    ptr = (undefined8 *)((long)ptr + (ulong)byte_val * -8 + 4);\n  }\n  *data_structure = data;\n  *(undefined *)(data_structure + 1) = value;\n  data_structure[2] = param_3;\n  data_structure[3] = param_4;\n  *(undefined4 *)(data_structure + 0x10) = 1;\n  ptr = (undefined8 *)xmalloc(8);\n  data_structure[0xd] = 0xffffffffffffffff;\n  data_structure[0x11] = ptr;\n  *ptr = 0;\n  return data_structure;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "create_initialized_data_structure_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_ptr_00109b2f",
                "param_1": "original_ptr_address",
                "__ptr": "ptr_to_extracted_value",
                "puVar1": "extracted_value"
            },
            "code": "\nundefined8 * extract_and_free_ptr_00109b2f(long original_ptr_address)\n\n{\n  undefined8 *ptr_to_extracted_value;\n  undefined8 *extracted_value;\n  \n  ptr_to_extracted_value = *(undefined8 **)(original_ptr_address + 0x60);\n  if (ptr_to_extracted_value != (undefined8 *)0x0) {\n    extracted_value = (undefined8 *)ptr_to_extracted_value[1];\n    *(undefined8 *)(original_ptr_address + 0x60) = *ptr_to_extracted_value;\n    free(ptr_to_extracted_value);\n    return extracted_value;\n  }\n  return ptr_to_extracted_value;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_0010e5db",
                "FUN_0010eafe",
                "FUN_0010a2b9",
                "FUN_0010e9a0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e918"
            ],
            "imported": false,
            "current_name": "extract_and_free_ptr_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "param_1": "arg1",
                "param_2": "symbol_name_1",
                "param_3": "symbol_name_2",
                "param_4": "arg2",
                "ppcVar1": "symbol_names",
                "pcVar2": "symbol_name",
                "lVar3": "symbol_found",
                "uVar4": "message",
                "plVar5": "slot_address"
            },
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 arg1,char *symbol_name_1,char *symbol_name_2,undefined8 arg2)\n\n{\n  char **symbol_names;\n  char *symbol_name;\n  long symbol_found;\n  undefined8 message;\n  long *slot_address;\n  \n  symbol_names = (char **)xmalloc(0x10);\n  symbol_name = strdup(symbol_name_1);\n  *symbol_names = symbol_name;\n  symbol_name = strdup(symbol_name_2);\n  message = DAT_001278f0;\n  symbol_names[1] = symbol_name;\n  symbol_found = htab_find(message,symbol_names);\n  if (symbol_found != 0) {\n    message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    execute_and_exit_00119dd0(message,arg1,symbol_name_1);\n  }\n  symbol_found = htab_find(DAT_001278e8,symbol_name_2);\n  if (symbol_found != 0) {\n    message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    execute_and_exit_00119dd0(message,arg1,symbol_name_2);\n  }\n  slot_address = (long *)htab_find_slot(DAT_001278f0,symbol_names,1);\n  message = DAT_001278e8;\n  *slot_address = (long)symbol_names;\n  symbol_name = symbol_names[1];\n  symbol_names = (char **)htab_find_slot(message,symbol_name,1);\n  *symbol_names = symbol_name;\n  return arg2;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "dcgettext",
                "strdup",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_symbol_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "process_and_send_data_0010e9a0",
                "param_1": "data",
                "param_2": "prefix",
                "param_3": "type",
                "param_4": "timestamp",
                "lVar1": "counter",
                "uVar2": "result",
                "__s": "extractedData",
                "__s_00": "formattedData",
                "sVar3": "dataLength",
                "sVar4": "formattedDataLength",
                "__s_01": "finalData",
                "pcVar5": "typeChar",
                "uVar6": "typeCode"
            },
            "code": "\nundefined4 processAndSendData_0010e9a0(long data,char *prefix,undefined4 type,undefined8 timestamp)\n\n{\n  long counter;\n  undefined4 result;\n  byte *extractedData;\n  byte *formattedData;\n  size_t dataLength;\n  size_t formattedDataLength;\n  char *finalData;\n  char *typeChar;\n  undefined8 typeCode;\n  \n  extractedData = (byte *)extract_and_free_ptr_00109b2f();\n  switch(type) {\n  case 1:\n    typeChar = \"G\";\n    typeCode = 0x20;\n    break;\n  case 2:\n    typeChar = \"S\";\n    typeCode = 0x26;\n    break;\n  case 3:\n    typeChar = \"V\";\n    typeCode = 0x26;\n    break;\n  case 4:\n    typeChar = \"\";\n    typeCode = 0x80;\n    if (((&_sch_istable)[(ulong)*extractedData * 2] & 4) == 0) {\n      counter = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = counter + 1;\n      dataLength = strlen((char *)extractedData);\n      formattedData = (byte *)xmalloc(dataLength + 0x14);\n      sprintf((char *)formattedData,\"%ld=%s\",counter,extractedData);\n      free(extractedData);\n      extractedData = formattedData;\n    }\n    break;\n  case 5:\n    typeChar = \"r\";\n    typeCode = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  dataLength = strlen(prefix);\n  formattedDataLength = strlen((char *)extractedData);\n  finalData = (char *)xmalloc(dataLength + 3 + formattedDataLength);\n  sprintf(finalData,\"%s:%s%s\",prefix,typeChar,extractedData);\n  free(extractedData);\n  result = process_string_0010e2f0(data,typeCode,0,timestamp,finalData);\n  if ((char)result != '\\0') {\n    free(finalData);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_send_data_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_error_0010827b",
                "unaff_RBX": "ptrData",
                "uVar1": "firstValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleError_0010827b(void)\n\n{\n  undefined8 firstValue;\n  undefined8 errorMessage;\n  undefined8 *ptrData;\n  \n  firstValue = *ptrData;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  execute_and_exit_00119dd0(errorMessage,firstValue);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "handle_error_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_invalid_number_00104920",
                "uVar1": "errorString",
                "dcgettext": "getTranslatedString",
                "execute_and_exit_00119dd0": "exitWithError"
            },
            "code": "\nvoid handleInvalidNumber_00104920(void)\n\n{\n  undefined8 errorString;\n  \n  errorString = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  exitWithError(errorString);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "handle_invalid_number_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "create_and_initialize_hash_table_00113f20",
                "htab_create_alloc": "createAndAllocateHashTable",
                "htab_hash_string": "hashStringForHashTable",
                "htab_eq_string": "compareStringsForHashTable",
                "xcalloc": "safeAllocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid createAndInitializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,compareStringsForHashTable,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "xcalloc",
                "free",
                "htab_hash_string",
                "htab_eq_string",
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "create_and_initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108d9a",
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "unaff_RBX": "rbx",
                "unaff_RBP": "rbp",
                "unaff_R12": "r12",
                "unaff_R14B": "r14b",
                "unaff_R15": "r15",
                "lVar1": "result1",
                "lVar2": "result2",
                "cVar3": "charVar",
                "lVar4": "errorMessage",
                "lVar5": "selectedItem",
                "dcgettext": "getErrorMessage",
                "get_selected_item_index_00115d00": "getSelectedItemIndex",
                "copy_private_data_0010808f": "copyPrivateData",
                "print_bfd_error_message_001126c0": "printErrorMessage"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long result1;\n  long result2;\n  char charVar;\n  long errorMessage;\n  long selectedItem;\n  long rbx;\n  long rbp;\n  long r12;\n  char r14b;\n  long r15;\n  \n  errorMessage = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(rbx + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(rbx + 0x28) & 0x30;\n  *(long *)(rbx + 0x60) = r15;\n  *(undefined8 *)(rbx + 0x58) = 0;\n  if ((*(byte *)(rbx + 0x27) & 2) != 0) {\n    result1 = *(long *)(rbx + 0xd0);\n    selectedItem = getSelectedItemIndex(result1,*(undefined8 *)(rbx + 0xe0));\n    if ((selectedItem != 0) &&\n       (result2 = *(long *)(r12 + 8), *(uint *)(selectedItem + 0x18) = *(uint *)(selectedItem + 0x18) | 0x20,\n       *(int *)(result2 + 8) == 5)) {\n      *(long *)(result1 + 0xb0) = selectedItem;\n      charVar = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n      if (charVar == '\\0') {\n        copyPrivateData();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n  if (charVar == '\\0') {\n    copyPrivateData();\n    return;\n  }\nLAB_0011571e:\n  if (r14b != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    printErrorMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_0010808f",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "extract_file_info_00109022",
                "param_1": "fileInfo",
                "param_2": "fileNumbers",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "fileIndex",
                "pcVar2": "errorString",
                "plVar3": "result",
                "lVar4": "iterationCount",
                "uVar5": "offset",
                "pplVar6": "ptrToPtr",
                "bVar7": "counter",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16] extractFileInfo_00109022(long fileInfo,uint *fileNumbers,undefined8 param3,undefined8 param4)\n\n{\n  uint fileIndex;\n  char *errorString;\n  long *result;\n  long iterationCount;\n  uint offset;\n  long **ptrToPtr;\n  byte counter;\n  undefined returnValue [16];\n  \n  counter = 0;\n  offset = *fileNumbers;\n  fileIndex = fileNumbers[1];\n  if (((int)offset < 0) || (*(uint *)(fileInfo + 0x80) <= offset)) {\n    errorString = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorString,(ulong)offset);\n  }\n  else {\n    if (-1 < (int)fileIndex) {\n      ptrToPtr = (long **)(*(long *)(fileInfo + 0x88) + (long)(int)offset * 8);\n      for (offset = fileIndex; 0xf < (int)offset; offset = offset - 0x10) {\n        if (*ptrToPtr == (long *)0x0) {\n          result = (long *)xmalloc(0x88);\n          *ptrToPtr = result;\n          for (iterationCount = 0x22; iterationCount != 0; iterationCount = iterationCount + -1) {\n            *(undefined4 *)result = 0;\n            result = (long *)((long)result + (ulong)counter * -8 + 4);\n          }\n        }\n        ptrToPtr = (long **)*ptrToPtr;\n      }\n      if (*ptrToPtr == (long *)0x0) {\n        result = (long *)xmalloc(0x88);\n        *ptrToPtr = result;\n        for (iterationCount = 0x22; iterationCount != 0; iterationCount = iterationCount + -1) {\n          *(undefined4 *)result = 0;\n          result = (long *)((long)result + (ulong)counter * -8 + 4);\n        }\n      }\n      result = *ptrToPtr + (long)(int)((fileIndex >> 4) * -0x10 + fileIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorString = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorString,(ulong)fileIndex);\n  }\n  result = (long *)0x0;\nLAB_00109117:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_file_info_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "filePtr",
                "param_2": "recordSize",
                "param_3": "variablePtr",
                "param_4": "recordType",
                "param_5": "param5",
                "param_6": "param6",
                "piVar3": "recordPtr",
                "piVar7": "recordPtrNext",
                "bVar8": "byteFlag",
                "auVar1": "result",
                "uVar2": "returnValue",
                "cVar4": "recordFlag",
                "lVar5": "counter",
                "lVar6": "currentFilePtr",
                "auVar9": "result2"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariable_0010c05d(long filePtr,long recordSize,ulong variablePtr,int recordType,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined result [16];\n  undefined8 returnValue;\n  int *recordPtr;\n  char recordFlag;\n  long counter;\n  long currentFilePtr;\n  int *recordPtrNext;\n  byte byteFlag;\n  undefined result2 [16];\n  \n  byteFlag = 0;\n  if (recordSize == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = variablePtr;\n    return result << 0x40;\n  }\n  if (variablePtr != 0) {\n    if ((*(long *)(filePtr + 8) == 0) || (currentFilePtr = *(long *)(filePtr + 0x10), currentFilePtr == 0)) {\n      returnValue = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",returnValue);\n    }\n    else {\n      if (recordType - 1U < 2) {\n        currentFilePtr = currentFilePtr + 0x10;\n        recordFlag = (recordType == 1) + '\\x01';\n      }\n      else if (*(long *)(filePtr + 0x20) == 0) {\n        currentFilePtr = currentFilePtr + 0x10;\n        recordFlag = '\\0';\n      }\n      else {\n        currentFilePtr = *(long *)(filePtr + 0x20) + 0x28;\n        recordFlag = '\\0';\n      }\n      currentFilePtr = initialize_memory_00112925(currentFilePtr,recordSize,2,recordFlag);\n      if (currentFilePtr != 0) {\n        recordPtr = (int *)xmalloc(0x18);\n        recordPtrNext = recordPtr + 1;\n        for (counter = 5; counter != 0; counter = counter + -1) {\n          *recordPtrNext = 0;\n          recordPtrNext = recordPtrNext + (ulong)byteFlag * -2 + 1;\n        }\n        *recordPtr = recordType;\n        returnValue = 1;\n        *(ulong *)(recordPtr + 2) = variablePtr;\n        *(undefined8 *)(recordPtr + 4) = param5;\n        *(int **)(currentFilePtr + 0x20) = recordPtr;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  returnValue = 0;\nLAB_0010c12e:\n  result2._8_8_ = param6;\n  result2._0_8_ = returnValue;\n  return result2;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "initialize_or_increment_00109d97",
                "param_1": "data",
                "local_40": "formatted_string",
                "lVar1": "counter"
            },
            "code": "\nvoid initialize_or_increment_00109d97(long data)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    initialize_data_structure_00109cf4(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = counter + 1;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  initialize_data_structure_00109b52(data,formatted_string,counter,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_increment_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "process_build_attribute_notes_001086af",
                "uVar1": "result",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "check",
                "puVar5": "ptr5",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "__ptr": "ptr",
                "in_RCX": "param1",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "unaff_RBX": "unaffected_RBX",
                "unaff_RBP": "unaffected_RBP",
                "puVar15": "ptr1",
                "puVar16": "ptr2",
                "cVar17": "char1",
                "puVar18": "ptr3",
                "puVar19": "ptr4",
                "unaff_R12": "unaffected_R12",
                "unaff_R13": "unaffected_R13",
                "uVar20": "var20",
                "__nmemb": "size",
                "unaff_R14": "unaffected_R14",
                "puVar21": "ptr6",
                "bVar22": "byteVar",
                "iVar23": "indexVar",
                "unaff_retaddr": "unaffected_retaddr",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "in_stack_00000030": "stack30",
                "in_stack_00000038": "stack38",
                "param_13": "param13",
                "param_14": "param14"
            },
            "code": "\nulong process_build_attribute_notes_001086af(void)\n\n{\n  ulong result;\n  undefined8 var2;\n  undefined8 var3;\n  bool check;\n  ulong *ptr5;\n  int index;\n  long length;\n  undefined8 var8;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  undefined *ptr;\n  ulong param1;\n  ulong var12;\n  ulong var13;\n  ulong var14;\n  ulong unaffected_RBX;\n  ulong unaffected_RBP;\n  ulong *ptr1;\n  undefined *ptr2;\n  char char1;\n  undefined *ptr3;\n  undefined *ptr4;\n  ulong *unaffected_R12;\n  ulong unaffected_R13;\n  ulong var20;\n  size_t size;\n  undefined8 *unaffected_R14;\n  ulong *ptr6;\n  byte byteVar;\n  int indexVar;\n  ulong unaffected_retaddr;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong param10;\n  ulong *param11;\n  undefined *stack30;\n  uint stack38;\n  uint param13;\n  undefined8 *param14;\n  \n  byteVar = 0;\n  param7 = param1;\n  var9 = (**(code **)(unaffected_R14[1] + 0x40))();\n  var10 = (**(code **)(unaffected_R14[1] + 0x40))(unaffected_R12[4] + 4);\nLAB_0011662a:\n  var13 = unaffected_RBP;\n  var20 = unaffected_R13;\n  if (var10 < var9) {\n    var9 = var10;\n  }\n  do {\n    var11 = param7;\n    var12 = param7;\n    ptr1 = unaffected_R12;\n    if (unaffected_R12[2] == 0x100) {\n      if (var9 == 0) {\n        var9 = unaffected_retaddr;\n      }\n      var14 = *unaffected_R12;\n      unaffected_R12[7] = var9;\n      unaffected_RBP = var13;\n      unaffected_R13 = var10;\n      unaffected_retaddr = var9;\n      if (var10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (var9 == 0) {\n        var9 = param9;\n      }\n      var14 = *unaffected_R12;\n      unaffected_R12[7] = var9;\n      unaffected_RBP = var10;\n      unaffected_R13 = var20;\n      param9 = var9;\n      if (var10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    ptr1[8] = var10;\n    if (*(char *)((ptr1[3] - 1) + var14) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaffected_R12 = ptr1 + 9;\n    if (unaffected_RBX < 0xc) {\n      if (unaffected_RBX != 0) {\n        length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stack38 | param13 | param8) != 0) {\n        if (((param13 | param8) == 0) || (stack38 == 0)) {\n          if (param13 == 0) {\n            if (param8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param8 == 0) goto LAB_001166f8;\n        }\n        length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      var2 = *unaffected_R14;\n      var3 = *param14;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(var8,var2,var3);\nLAB_0011671b:\n      size = ((long)unaffected_R12 - (long)param11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param11,size,0x48,compare_records_0011a1b0);\n      ptr1 = param11;\n      goto LAB_001167f9;\n    }\n    var10 = (**(code **)(unaffected_R14[1] + 0x40))(var12);\n    *unaffected_R12 = var10;\n    var10 = (**(code **)(unaffected_R14[1] + 0x40))(var12 + 4);\n    ptr1[10] = var10;\n    var9 = (**(code **)(unaffected_R14[1] + 0x40))(var12 + 8);\n    var14 = *unaffected_R12;\n    ptr1[0xb] = var9;\n    var10 = ptr1[10];\n    var13 = var14 + 3 & 0xfffffffffffffffc;\n    ptr1[0xf] = var13;\n    if (var10 != (var10 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var9 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    var11 = var13 + var10 + 0xc;\n    if (unaffected_RBX < var11) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var14 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr1[0xc] = var12 + 0xc;\n    result = var12 + 0xc + var13;\n    ptr1[0xd] = result;\n    unaffected_RBX = unaffected_RBX + (-0xc - (var13 + var10));\n    var11 = var12 + var11;\n    if (var14 != 2) {\n      if (*(char *)(var12 + 0xc) == '$') {\n        if ((*(char *)(var12 + 0xd) == '\\x01') && (*(char *)(var12 + 0xe) == '1')) {\n          var10 = process_attributes_00116490();\n          return var10;\n        }\n      }\n      else if ((((4 < var14) && (*(char *)(var12 + 0xc) == 'G')) &&\n               (*(char *)(var12 + 0xd) == 'A')) &&\n              ((*(char *)(var12 + 0xe) == '$' && (*(char *)(var12 + 0xf) == '\\x01')))) {\n        if (*(char *)(var12 + 0x10) == '2') {\n          var10 = process_attributes_00116490();\n          return var10;\n        }\n        if (*(char *)(var12 + 0x10) == '3') {\n          var10 = process_attributes_00116490();\n          return var10;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var13 = unaffected_RBP;\n    var20 = unaffected_R13;\n    if (var10 == 0) {\n      if (var9 == 0x100) {\n        ptr1[0x10] = unaffected_retaddr;\nLAB_001164af:\n        var12 = var11;\n        var10 = var20;\n        ptr1 = unaffected_R12;\n        unaffected_R13 = var20;\n      }\n      else {\n        ptr1[0x10] = param9;\nLAB_0011669e:\n        unaffected_RBP = var13;\n        var12 = var11;\n        var10 = var13;\n        ptr1 = unaffected_R12;\n        unaffected_R13 = var20;\n      }\n      goto LAB_001164bb;\n    }\n    if (var10 == 0x10) break;\n    if (0x10 < var10) {\nLAB_00116679:\n      length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (length != 0) {\n        bfd_set_error(0x11);\n        print_bfd_error_message_001126c0(0,unaffected_R14,param14,length);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (var10 != 4) {\n      if (var10 == 8) {\n        var10 = process_build_attribute_notes_001086af();\n        return var10;\n      }\n      goto LAB_00116679;\n    }\n    param7 = var11;\n    var9 = (**(code **)(unaffected_R14[1] + 0x40))();\n    var10 = 0xffffffffffffffff;\n  } while( true );\n  param7 = var11;\n  var9 = (**(code **)(unaffected_R14[1] + 0x28))(result);\n  var10 = (**(code **)(unaffected_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaffected_R12 <= ptr1) {\n    qsort(param11,size,0x48,compare_records_0011a250);\n    ptr = (undefined *)xmalloc(param10 * 2);\n    param7 = 0;\n    param9 = 0;\n    ptr4 = ptr;\n    for (ptr1 = param11; ptr1 < unaffected_R12; ptr1 = ptr1 + 9) {\n      if (ptr1[2] != 0) {\n        ptr3 = ptr4 + 4;\n        ptr2 = ptr4 + 0xc;\n        if ((ptr1[7] == param9) && (ptr1[8] == param7)) {\n          (**(code **)(unaffected_R14[1] + 0x50))(*ptr1,ptr4);\n          (**(code **)(unaffected_R14[1] + 0x50))(0,ptr3);\n          (**(code **)(unaffected_R14[1] + 0x50))(ptr1[2],ptr4 + 8);\n          var9 = ptr1[6];\n          var10 = *ptr1;\n          ptr4 = (undefined *)ptr1[3];\n          ptr3 = ptr2;\n          for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n            *ptr3 = *ptr4;\n            ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n            ptr3 = ptr3 + (ulong)byteVar * -2 + 1;\n          }\n          if (var10 < var9) {\n            for (length = var9 - var10; length != 0; length = length + -1) {\n              *ptr3 = 0;\n              ptr3 = ptr3 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          ptr4 = ptr2 + var9;\n        }\n        else {\n          (**(code **)(unaffected_R14[1] + 0x50))();\n          if (*(int *)(unaffected_R14[1] + 8) == 5) {\n            char1 = (*(char *)(unaffected_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char1 = '\\b';\n          }\n          (**(code **)(unaffected_R14[1] + 0x50))(char1,ptr3);\n          (**(code **)(unaffected_R14[1] + 0x50))(ptr1[2],ptr4 + 8);\n          var10 = *ptr1;\n          ptr4 = (undefined *)ptr1[3];\n          ptr3 = ptr2;\n          for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n            *ptr3 = *ptr4;\n            ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n            ptr3 = ptr3 + (ulong)byteVar * -2 + 1;\n          }\n          var9 = ptr1[6];\n          if (var10 < var9) {\n            for (length = var9 - var10; length != 0; length = length + -1) {\n              *ptr3 = 0;\n              ptr3 = ptr3 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          length = unaffected_R14[1];\n          ptr2 = ptr2 + var9;\n          ptr4 = ptr2 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(unaffected_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(ptr1[7],ptr2);\n            (**(code **)(unaffected_R14[1] + 0x38))(ptr1[8],ptr4);\n            ptr4 = ptr2 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(ptr1[7],ptr2);\n            (**(code **)(unaffected_R14[1] + 0x50))(ptr1[8],ptr2 + 4);\n          }\n          param9 = ptr1[7];\n          param7 = ptr1[8];\n        }\n      }\n    }\n    var9 = (long)ptr4 - (long)ptr;\n    var10 = var9;\n    ptr4 = ptr;\n    if (var9 < param10) {\n      for (; param10 = var9, var10 != 0; var10 = var10 - 1) {\n        *stack30 = *ptr4;\n        ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n        stack30 = stack30 + (ulong)byteVar * -2 + 1;\n      }\n    }\n    free(ptr);\nLAB_001166f8:\n    free(param11);\n    return param10;\n  }\n  if (ptr1[2] != 0) {\n    var10 = ptr1[7];\n    var9 = ptr1[8];\n    var13 = ptr1[2];\n    ptr6 = ptr1;\n    indexVar = 0;\n    if (var10 == var9) {\n      ptr1[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptr5 = ptr6;\n          ptr6 = ptr5 + -9;\n          if (ptr6 < param11) goto LAB_001167f5;\n          var20 = ptr5[-7];\n        } while (var20 == 0);\n        param7 = var13;\n        if ((*ptr6 != *ptr1) ||\n           (index = memcmp((void *)ptr5[-6],(void *)ptr1[3],*ptr1), index != 0)) break;\n        var13 = ptr5[-2];\n        var11 = ptr5[-1];\n        if (var10 == var13) {\n          if (var9 == var11) {\n            ptr1[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (var9 <= var11) {\n            ptr1[2] = 0;\n            break;\n          }\n          if (var11 < var10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < var11) || (var10 <= (var11 + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n          }\nLAB_001167b8:\n          if ((param7 == 0x101) == (var20 == 0x101)) {\n            if (var11 <= var9) {\n              var11 = var9;\n            }\n            if (var13 < var10) {\n              var10 = var13;\n            }\n            ptr5[-1] = var11;\n            ptr5[-2] = var10;\n            ptr1[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (var13 <= var10) goto LAB_001167a6;\n          if (var11 < var10) goto LAB_0010852c;\n          if (var9 < var10) {\n            if ((0xfffffffffffffff0 < var9) || (var13 <= (var9 + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n            goto LAB_001167b8;\n          }\n          if (var9 != var11) goto LAB_001167b8;\n        }\nprocess_records_00116852:\n        check = indexVar < 0x11;\n        var13 = param7;\n        indexVar = indexVar + 1;\n      } while (check);\n    }\n  }\nLAB_001167f5:\n  ptr1 = ptr1 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_0010847a",
                "FUN_00116490",
                "bfd_set_error",
                "FUN_0011a1b0",
                "dcgettext",
                "qsort",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "process_build_attribute_notes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "log_entry_generation_0010add5",
                "generate_log_entry_0010abdd": "generateLogEntry"
            },
            "code": "\nvoid logEntryGeneration_0010add5(void)\n\n{\n  generateLogEntry();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "log_entry_generation_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_data_00113e17"
            },
            "code": "\nvoid initialize_data_00113e17(void)\n\n{\n  initialize_data_00113e17_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "dataStructurePointer",
                "param_2": "sourceString",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar2": "allocatedMemory",
                "uVar1": "tempVariable1",
                "uVar3": "tempVariable2"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long dataStructurePointer,undefined8 sourceString,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 tempVariable1;\n  undefined8 *allocatedMemory;\n  undefined8 tempVariable2;\n  \n  allocatedMemory = (undefined8 *)xmalloc(0x40);\n  tempVariable2 = xstrdup(sourceString);\n  allocatedMemory[2] = param3;\n  *(undefined (*) [16])(allocatedMemory + 4) = ZEXT816(0);\n  *(undefined (*) [16])(allocatedMemory + 6) = ZEXT816(0);\n  tempVariable1 = *(undefined8 *)(dataStructurePointer + 0x60);\n  *(undefined *)((long)allocatedMemory + 0x1c) = param4;\n  *(undefined4 *)(allocatedMemory + 3) = param5;\n  *(undefined8 **)(dataStructurePointer + 0x60) = allocatedMemory;\n  *allocatedMemory = tempVariable1;\n  allocatedMemory[1] = tempVariable2;\n  return 1;\n}\n\n",
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109cf4",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e453",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_00109e76"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "param_1": "string_array",
                "param_2": "error_flag",
                "param_3": "end_of_string",
                "param_4": "unused_1",
                "param_5": "unused_2",
                "__nptr": "string_ptr",
                "piVar1": "errno_ptr",
                "uVar2": "converted_value",
                "uVar3": "error_msg",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **string_array,undefined *error_flag,char *end_of_string,undefined8 unused_1,undefined8 unused_2)\n\n{\n  char *string_ptr;\n  int *errno_ptr;\n  ulong converted_value;\n  undefined8 error_msg;\n  undefined return_value [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  string_ptr = *string_array;\n  if ((string_ptr < end_of_string) && (*string_ptr != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    converted_value = strtoul(string_ptr,string_array,0);\n    if ((converted_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag == (undefined *)0x0) {\n      error_msg = dcgettext(0,\"numeric overflow\",5);\n      print_warning_00108fe8(string_ptr,error_msg);\n    }\n    else {\n      *error_flag = 1;\n    }\n  }\n  converted_value = 0;\nLAB_00109aa9:\n  return_value._8_8_ = unused_2;\n  return_value._0_8_ = converted_value;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00108fe8",
                "strtoul",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_numeric_string_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "debug_tag_type_checker_0010c6be",
                "param_1": "file_address",
                "param_2": "tag",
                "param_3": "tag_data",
                "iVar1": "comparison_result",
                "uVar2": "localized_message",
                "piVar3": "initialized_data",
                "pauVar4": "allocated_memory",
                "lVar5": "result",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * debug_tag_type_checker_0010c6be(long file_address,char *tag,int *tag_data)\n\n{\n  int comparison_result;\n  undefined8 localized_message;\n  int *initialized_data;\n  undefined (*allocated_memory) [16];\n  long result;\n  char *error_message;\n  \n  if ((tag != (char *)0x0) && (tag_data != (int *)0x0)) {\n    if (*(long *)(file_address + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tag_data != 0x17) {\n        initialized_data = (int *)initialize_data_00112904(0x17,0);\n        if (initialized_data == (int *)0x0) {\n          return (int *)0x0;\n        }\n        allocated_memory = (undefined (*) [16])xmalloc(0x10);\n        result = *(long *)(file_address + 0x10);\n        *allocated_memory = ZEXT816(0);\n        *(int **)(*allocated_memory + 8) = tag_data;\n        *(undefined (**) [16])(initialized_data + 4) = allocated_memory;\n        result = initialize_memory_00112925(result + 0x10,tag,1,3);\n        if (result == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(result + 0x20) = initialized_data;\n        *(long *)*allocated_memory = result;\n        return initialized_data;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag_data + 4) + 8),tag);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag_data;\n      }\n    }\n    localized_message = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",localized_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext",
                "strcmp",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "debug_tag_type_checker_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00108a2a",
                "FUN_00119970",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "failure_flag",
                "__ptr": "result",
                "__format": "error_message",
                "lVar1": "return_code",
                "uVar2": "index",
                "uVar3": "capacity",
                "uVar4": "count",
                "local_39": "type_name"
            },
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *failure_flag)\n\n{\n  void *result;\n  char *error_message;\n  long return_code;\n  ulong index;\n  ulong capacity;\n  uint count;\n  char type_name [9];\n  \n  capacity = 10;\n  index = 0;\n  result = (void *)xmalloc(0x50);\n  *failure_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    return_code = initialize_data_structure_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,type_name);\n    if (return_code == 0) {\n      if (type_name[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *failure_flag = 1;\n    }\n    else {\n      count = (int)index + 1;\n      if ((uint)capacity <= count) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + index * 8) = return_code;\n      index = (ulong)count;\n    }\n  }\n  *(undefined8 *)((long)result + index * 8) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010b0fa",
                "xmalloc",
                "fprintf",
                "dcgettext",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_from_binary_0011a2e0",
                "param_1": "binary_data",
                "param_2": "binary_file",
                "uVar1": "section_size",
                "uVar2": "section_not_found_message",
                "lVar3": "extracted_section",
                "lVar4": "section_pointer"
            },
            "code": "\nlong extract_section_from_binary_0011a2e0(long binary_data,long binary_file)\n\n{\n  undefined8 section_size;\n  undefined8 section_not_found_message;\n  long extracted_section;\n  long section_pointer;\n  \n  extracted_section = (**(code **)(*(long *)(binary_file + 8) + 0x208))(binary_file);\n  section_pointer = *(long *)(binary_data + 0x20);\n  *(undefined8 *)(extracted_section + 8) = *(undefined8 *)(binary_data + 8);\n  *(undefined8 *)(extracted_section + 0x10) = *(undefined8 *)(binary_data + 0x10);\n  *(undefined4 *)(extracted_section + 0x18) = *(undefined4 *)(binary_data + 0x18);\n  if (section_pointer == 0) {\n    section_pointer = 0x128598;\n  }\n  else {\n    section_pointer = bfd_get_section_by_name(binary_file);\n    if (section_pointer == 0) {\n      section_size = *(undefined8 *)(binary_data + 0x20);\n      section_not_found_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      execute_and_exit_00119dd0(section_not_found_message,section_size);\n    }\n  }\n  *(long *)(extracted_section + 0x20) = section_pointer;\n  return extracted_section;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_from_binary_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "process_and_free_string_0010e8a9",
                "param_1": "input_string",
                "param_2": "param",
                "param_3": "append_string",
                "uVar1": "result",
                "sVar2": "append_length",
                "__s": "new_string"
            },
            "code": "\nundefined4 process_and_free_string_0010e8a9(undefined8 input_string,undefined8 param,char *append_string)\n\n{\n  undefined4 result;\n  size_t append_length;\n  char *new_string;\n  \n  append_length = strlen(append_string);\n  new_string = (char *)xmalloc(append_length + 0x14);\n  sprintf(new_string,\"%s:c=f%g\",input_string,append_string);\n  result = process_string_0010e2f0(param,0x80,0,0,new_string);\n  if ((char)result != '\\0') {\n    free(new_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_string_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "find_section_flag_00104ad6",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "sectionName",
                "unaff_RBP": "sectionPosition",
                "unaff_retaddr": "returnAddress",
                "auVar6": "result",
                "iVar1": "comparisonResult",
                "uVar2": "errorMessage",
                "pcVar3": "commaPosition",
                "__s": "currentSection",
                "sVar4": "sectionLength",
                "iVar5": "sectionSize"
            },
            "code": "\nundefined  [16] findSectionFlag_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 errorMessage;\n  char *commaPosition;\n  char *sectionPosition;\n  char *currentSection;\n  size_t sectionLength;\n  int sectionSize;\n  uint sectionFlags;\n  char *sectionName;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    currentSection = sectionPosition;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (currentSection == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = sectionFlags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              commaPosition = strchr(currentSection,0x2c);\n              if (commaPosition == (char *)0x0) {\n                sectionLength = strlen(currentSection);\n                sectionSize = (int)sectionLength;\n                sectionPosition = (char *)0x0;\n              }\n              else {\n                sectionPosition = commaPosition + 1;\n                sectionSize = (int)commaPosition - (int)currentSection;\n              }\n              sectionLength = (size_t)sectionSize;\n              comparisonResult = strncasecmp(sectionName,currentSection,sectionLength);\n              if (comparisonResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              currentSection = sectionPosition;\n            }\n            comparisonResult = strncasecmp(\"load\",currentSection,sectionLength);\n            if (comparisonResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            currentSection = sectionPosition;\n          }\n          comparisonResult = strncasecmp(\"noload\",currentSection,sectionLength);\n          if (comparisonResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          currentSection = sectionPosition;\n        }\n        comparisonResult = strncasecmp(\"readonly\",currentSection,sectionLength);\n        if (comparisonResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        currentSection = sectionPosition;\n      }\n      comparisonResult = strncasecmp(\"debug\",currentSection,sectionLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",currentSection,sectionLength);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        currentSection = sectionPosition;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",currentSection,sectionLength);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          currentSection = sectionPosition;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",currentSection,sectionLength);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            currentSection = sectionPosition;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",currentSection,sectionLength);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              currentSection = sectionPosition;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",currentSection,sectionLength);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                currentSection = sectionPosition;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",currentSection,sectionLength);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  currentSection = sectionPosition;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",currentSection,sectionLength);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    currentSection = sectionPosition;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",currentSection,sectionLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(sectionSize + 1));\n                      strncpy(commaPosition,currentSection,sectionLength);\n                      commaPosition[sectionLength] = '\\0';\n                      errorMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_00119ed0(errorMessage,commaPosition);\n                      errorMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      execute_and_exit_00119dd0(errorMessage,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    currentSection = sectionPosition;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00119dd0",
                "xmalloc",
                "strncpy",
                "strlen",
                "dcgettext",
                "strncasecmp",
                "FUN_00104ad6",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "find_section_flag_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_value_001087da",
                "in_RAX": "input",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkValue_001087da(void)\n\n{\n  long input;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = input == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_value_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "arg_1",
                "param_4": "arg_2",
                "lVar1": "current_unit",
                "iVar2": "comparison_result",
                "uVar3": "translation",
                "puVar4": "ptr_1",
                "lVar5": "ptr_2",
                "puVar6": "ptr_3",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 arg_1,undefined8 arg_2)\n\n{\n  long current_unit;\n  int comparison_result;\n  undefined8 translation;\n  undefined8 *ptr_1;\n  long ptr_2;\n  undefined8 *ptr_3;\n  undefined result [16];\n  \n  current_unit = *(long *)(compilation_unit + 8);\n  if (current_unit == 0) {\n    translation = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",translation);\n  }\n  else {\n    for (ptr_2 = *(long *)(compilation_unit + 0x20); ptr_2 != 0; ptr_2 = *(long *)(ptr_2 + 8)) {\n      if (*(undefined8 **)(ptr_2 + 0x28) != (undefined8 *)0x0) {\n        for (ptr_1 = (undefined8 *)**(undefined8 **)(ptr_2 + 0x28); ptr_1 != (undefined8 *)0x0;\n            ptr_1 = (undefined8 *)*ptr_1) {\n          if (*(int *)((long)ptr_1 + 0x14) == 0) {\n            if (*(char *)ptr_1[1] == *type_name) {\n              comparison_result = strcmp((char *)ptr_1[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (ptr_3 = *(undefined8 **)(current_unit + 8); ptr_3 != (undefined8 *)0x0;\n        ptr_3 = (undefined8 *)*ptr_3) {\n      if ((undefined8 *)ptr_3[2] != (undefined8 *)0x0) {\n        for (ptr_1 = *(undefined8 **)(undefined8 *)ptr_3[2]; ptr_1 != (undefined8 *)0x0;\n            ptr_1 = (undefined8 *)*ptr_1) {\n          if (*(int *)((long)ptr_1 + 0x14) == 0) {\n            if (*(char *)ptr_1[1] == *type_name) {\n              comparison_result = strcmp((char *)ptr_1[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  translation = 0;\nLAB_00109223:\n  result._8_8_ = arg_2;\n  result._0_8_ = translation;\n  return result;\nLAB_00109216:\n  translation = ptr_1[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "process_input_0010829e",
                "unaff_EBP": "parameter",
                "uVar1": "result",
                "check_string_length_00113ede": "check_string_length",
                "invert_and_check_string_length_001082b3": "invert_and_check_string_length"
            },
            "code": "\nundefined8 process_input_0010829e(void)\n\n{\n  undefined8 result;\n  int parameter;\n  \n  if (parameter == 5) {\n    result = check_string_length();\n    return result;\n  }\n  if ((parameter != 4) && (parameter == 6)) {\n    result = invert_and_check_string_length();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "process_input_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_arch_machines_00104943",
                "in_RAX": "inputString",
                "iVar1": "inputInt",
                "iVar2": "archComparison",
                "lVar3": "count",
                "sVar4": "stringLength",
                "pcVar5": "archString",
                "uVar6": "printableString",
                "iVar7": "archIndex",
                "lVar8": "startIndex",
                "iVar9": "param_7",
                "unaff_R15D": "uStack000000000000000c",
                "uVar10": "loopCounter",
                "uVar11": "archOffset"
            },
            "code": "\n\n\nvoid printReverseArchMachines_00104943(void)\n\n{\n  int inputInt;\n  int archComparison;\n  char *inputString;\n  long count;\n  size_t stringLength;\n  char *archString;\n  undefined8 printableString;\n  int archIndex;\n  long startIndex;\n  int param_7;\n  uint uStack000000000000000c;\n  ulong loopCounter;\n  uint archOffset;\n  int param_7;\n  uint uStack000000000000000c;\n  undefined8 param_11;\n  long param_13;\n  \n  count = strtol(inputString,(char **)0x0,10);\n  inputInt = (int)count;\n  param_7 = param_7;\n  uStack000000000000000c = uStack000000000000000c;\n  if (inputInt == 0) {\n    inputInt = 0x50;\n  }\n  do {\n    param_7 = param_7;\n    if (param_11._4_4_ <= param_7) {\n      return;\n    }\n    startIndex = (long)param_7;\n    archIndex = (inputInt - uStack000000000000000c) + -1;\n    count = startIndex;\n    do {\n      param_7 = (int)count;\n      if (param_11._4_4_ <= param_7) break;\n      stringLength = strlen(*(char **)(param_13 + count * 0x60));\n      count = count + 1;\n      archIndex = (archIndex - (int)stringLength) + -1;\n    } while (-1 < archIndex);\n    printf(\"\\n%*s\",(ulong)(uStack000000000000000c + 1),&DAT_0011b4a1);\n    for (count = startIndex * 0x60; ((ulong)(uint)(param_7 - param_7) + startIndex) * 0x60 - count != 0;\n        count = count + 0x60) {\n      printf(\"%s \",*(undefined8 *)(param_13 + count));\n    }\n    archIndex = 2;\n    putc(10,_stdout);\n    do {\n      archString = (char *)bfd_printable_arch_mach(archIndex,0);\n      archComparison = strcmp(archString,\"UNKNOWN!\");\n      if (archComparison != 0) {\n        printableString = bfd_printable_arch_mach(archIndex,0);\n        printf(\"%*s \",(ulong)uStack000000000000000c,printableString);\n        archOffset = archIndex - 2;\n        count = startIndex * 0x60;\n        archComparison = param_7;\n        while (param_7 != archComparison) {\n          archString = *(char **)(param_13 + count);\n          if (*(char *)((long)(char **)(param_13 + count) + (ulong)archOffset + 8) == '\\0') {\n            stringLength = strlen(archString);\n            for (loopCounter = stringLength & 0xffffffff; (int)loopCounter != 0; loopCounter = (ulong)((int)loopCounter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archString,_stdout);\n          }\n          archComparison = archComparison + 1;\n          if (param_7 != archComparison) {\n            putc(0x20,_stdout);\n          }\n          count = count + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archIndex = archIndex + 1;\n    } while (archIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "bfd_printable_arch_mach",
                "putc",
                "strlen",
                "strtol",
                "strcmp",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_reverse_arch_machines_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_data_entry_00113e23",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "lVar1": "data_entry",
                "puVar2": "allocated_memory"
            },
            "code": "\nlong create_data_entry_00113e23(undefined8 input_value_1,undefined8 input_value_2)\n\n{\n  long data_entry;\n  undefined8 *allocated_memory;\n  \n  data_entry = initialize_data_00112904(1,0);\n  if (data_entry != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_value_1;\n    allocated_memory[1] = input_value_2;\n    *(undefined8 **)(data_entry + 0x10) = allocated_memory;\n  }\n  return data_entry;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_data_entry_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00104a35",
                "FUN_00108b3e",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_message_00108fb9",
                "param_1": "stab",
                "__format": "format",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printBadStabMessage_00108fb9(undefined8 stab)\n\n{\n  char *format;\n  \n  format = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(errorStream,format,stab);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_00109ab1",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "print_bad_stab_message_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "extract_and_convert_number_00108ea1",
                "param_1": "input",
                "param_2": "output",
                "iVar1": "parsed_digit",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result",
                "&_sch_istable": "character_table"
            },
            "code": "\nulong extract_and_convert_number_00108ea1(byte **input,int *output)\n\n{\n  int parsed_digit;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input;\n  result = 0;\n  if (((character_table)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    parsed_digit = (char)*current_byte + -0x30;\n    *output = parsed_digit;\n    *input = next_byte;\n    if (((character_table)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        parsed_digit = parsed_digit * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((character_table)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input = next_byte;\n        *output = parsed_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "extract_and_convert_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_alignment_and_copy_data_00108072",
                "unaff_RBX": "ptrToVariables",
                "unaff_RBP": "variable_RBP",
                "unaff_R12": "variable_R12",
                "unaff_R15": "variable_R15",
                "dcgettext": "getLocalizedText",
                "process_data_00114190": "processData",
                "set_alignment_00108179": "setAlignment",
                "get_selected_item_index_00115d00": "getSelectedItemIndex",
                "copy_private_data_0010808f": "copyPrivateData",
                "print_bfd_error_message_001126c0": "printBfdErrorMessage",
                "lVar5": "errorMsg",
                "lVar6": "result_1",
                "lVar7": "result_2",
                "lVar8": "result_3",
                "bVar1": "byteVar",
                "uVar2": "undefinedVar",
                "uVar4": "uintVar",
                "cVar3": "charVar"
            },
            "code": "\n\n\nvoid setAlignmentAndCopyData_00108072(void)\n\n{\n  byte byteVar;\n  undefined8 undefinedVar;\n  char charVar;\n  uint uintVar;\n  long errorMsg;\n  long result_1;\n  long result_2;\n  undefined8 *ptrToVariables;\n  long variable_RBP;\n  long variable_R12;\n  long result_3;\n  char unaff_R14B;\n  long variable_R15;\n  \n  errorMsg = dcgettext(0,\"failed to set size\",5);\n  result_3 = ptrToVariables[6];\n  result_1 = processData(*ptrToVariables,0,0x18);\n  if (result_1 == 0) {\n    *(byte *)(variable_R15 + 0x28) = *(byte *)(variable_R15 + 0x28) | 1;\n    undefinedVar = *ptrToVariables;\n    result_3 = result_3 + _DAT_001279b0;\n    *(long *)(variable_R15 + 0x30) = result_3;\n    *(long *)(variable_R15 + 0x38) = result_3;\n    result_3 = ptrToVariables[7];\n    result_1 = processData(undefinedVar,0,0x60);\n    if (result_1 == 0) goto LAB_00115695;\nLAB_00115860:\n    result_2 = *(long *)(result_1 + 0x20);\n    if ((*(byte *)(result_1 + 0x14) & 0x40) != 0) {\n      result_2 = result_2 + result_3;\n    }\n    *(long *)(variable_R15 + 0x38) = result_2;\n    result_3 = processData(*ptrToVariables,0,0x200);\n    if (result_3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar = *(uint *)((long)ptrToVariables + 0x7c);\n    if (uintVar < 0x3f) goto LAB_001156c4;\n    errorMsg = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(variable_R15 + 0xb4) = *(undefined4 *)((long)ptrToVariables + 0xb4);\n    *(byte *)(variable_R15 + 0x28) =\n         *(byte *)(variable_R15 + 0x28) & 0xcf | *(byte *)(ptrToVariables + 5) & 0x30;\n    ptrToVariables[0xc] = variable_R15;\n    ptrToVariables[0xb] = 0;\n    byteVar = *(byte *)((long)ptrToVariables + 0x27);\n  }\n  else {\n    result_2 = *(long *)(result_1 + 0x18);\n    if ((*(byte *)(result_1 + 0x14) & 8) == 0) {\n      result_2 = result_2 + result_3;\n    }\n    *(byte *)(variable_R15 + 0x28) = *(byte *)(variable_R15 + 0x28) | 1;\n    undefinedVar = *ptrToVariables;\n    *(long *)(variable_R15 + 0x30) = result_2;\n    *(long *)(variable_R15 + 0x38) = result_2;\n    result_3 = ptrToVariables[7];\n    result_1 = processData(undefinedVar,0,0x60);\n    if (result_1 != 0) goto LAB_00115860;\nLAB_00115695:\n    undefinedVar = *ptrToVariables;\n    *(long *)(variable_R15 + 0x38) = result_3 + _DAT_001279b0;\n    result_3 = processData(undefinedVar,0,0x200);\n    if (result_3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar = *(uint *)(result_3 + 0x2c);\n    if (0x3e < uintVar) {\n      setAlignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(variable_R15 + 0x7c) = uintVar;\n    *(undefined4 *)(variable_R15 + 0xb4) = *(undefined4 *)((long)ptrToVariables + 0xb4);\n    *(byte *)(variable_R15 + 0x28) =\n         *(byte *)(variable_R15 + 0x28) & 0xcf | *(byte *)(ptrToVariables + 5) & 0x30;\n    ptrToVariables[0xc] = variable_R15;\n    ptrToVariables[0xb] = 0;\n    byteVar = *(byte *)((long)ptrToVariables + 0x27);\n  }\n  if ((byteVar & 2) != 0) {\n    result_3 = ptrToVariables[0x1a];\n    result_1 = getSelectedItemIndex(result_3,ptrToVariables[0x1c]);\n    if ((result_1 != 0) &&\n       (result_2 = *(long *)(variable_R12 + 8), *(uint *)(result_1 + 0x18) = *(uint *)(result_1 + 0x18) | 0x20,\n       *(int *)(result_2 + 8) == 5)) {\n      *(long *)(result_3 + 0xb0) = result_1;\n      charVar = (**(code **)(*(long *)(variable_RBP + 8) + 0x158))();\n      if (charVar == '\\0') {\n        copyPrivateData();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar = (**(code **)(*(long *)(variable_RBP + 8) + 0x158))();\n  if (charVar == '\\0') {\n    copyPrivateData();\n    return;\n  }\nLAB_0011571e:\n  if (unaff_R14B != '\\0') {\n    *(undefined4 *)(*(long *)(variable_R15 + 0xd0) + 4) = 8;\n  }\n  if (errorMsg != 0) {\n    DAT_00127a40 = 1;\n    printBfdErrorMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "set_alignment_and_copy_data_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "extract_and_initialize_data_0010a2b9",
                "param_1": "data_ptr",
                "param_2": "flag",
                "cVar1": "flag_value",
                "__s": "extracted_string",
                "sVar2": "extracted_string_length",
                "__s_00": "modified_string",
                "lVar3": "index",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] extract_and_initialize_data_0010a2b9(long data_ptr,char flag,undefined8 param_3,undefined8 param_4)\n\n{\n  char flag_value;\n  char *extracted_string;\n  size_t extracted_string_length;\n  char *modified_string;\n  long index;\n  undefined result [16];\n  \n  flag_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  extracted_string_length = strlen(extracted_string);\n  modified_string = (char *)xmalloc(extracted_string_length + 0x1e);\n  if (flag == '\\0') {\n    *modified_string = '\\0';\n    index = 0;\n    flag = flag_value;\n  }\n  else {\n    index = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = index + 1;\n    sprintf(modified_string,\"%ld=@S;\",index);\n  }\n  extracted_string_length = strlen(modified_string);\n  sprintf(modified_string + extracted_string_length,\"S%s\",extracted_string);\n  free(extracted_string);\n  result._0_4_ = initialize_data_structure_00109b52(data_ptr,modified_string,index,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(modified_string);\n  }\n  result._8_8_ = param_4;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_initialize_data_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_and_process_data_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "iVar1": "count",
                "cVar2": "result",
                "process_string_0010e2f0": "processString"
            },
            "code": "\nundefined updateAndProcessData_0010ec73(long *data,long value,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  int count;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  count = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = count + 1;\n  if (count == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = processString(data,0xc0,0,data[0x41],0,param_6,param_4), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_and_process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "endian_check_00114e00",
                "param_1": "endian_type",
                "dcgettext": "print_message"
            },
            "code": "\nvoid endian_check_00114e00(int endian_type)\n\n{\n  if (endian_type == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endian_type == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "endian_check_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_remove_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "bufferSize",
                "param_4": "fileSize",
                "param_5": "setTimestamp",
                "param_6": "returnCode",
                "uVar1": "copyResult",
                "piVar2": "errnoPointer",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "copySize",
                "auVar6": "output"
            },
            "code": "\nundefined  [16]\ncopyAndRemoveFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 bufferSize,undefined8 fileSize,char setTimestamp,\n            undefined8 returnCode)\n\n{\n  uint copyResult;\n  int *errnoPointer;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong copySize;\n  undefined output [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    copySize = 0;\n  }\n  else {\n    copyResult = copy_and_write_file_00115a90(bufferSize,destinationFilePath,fileSize);\n    copySize = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoPointer = __errno_location();\n      errorString = strerror(*errnoPointer);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00119ed0(errorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  if (setTimestamp != '\\0') {\n    set_time_0011a350(destinationFilePath,fileSize);\n  }\n  output._8_8_ = returnCode;\n  output._0_8_ = copySize;\n  return output;\n}\n\n",
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_remove_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "generate_log_entries_0010adf2",
                "generate_log_entry_0010abdd": "log_entry_generator"
            },
            "code": "\nvoid generate_log_entries_0010adf2(void)\n\n{\n  log_entry_generator();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_log_entries_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "process_data_0010d7d4",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "output_param_1",
                "param_4": "output_param_2",
                "param_5": "output_param_3",
                "uVar1": "input_value",
                "cVar2": "result",
                "uVar3": "expanded_item",
                "lVar4": "temp_var",
                "plVar5": "local_array",
                "uVar6": "temp_value",
                "local_40": "local_array",
                "expand_and_add_item_00109be3": "expand_and_add_item",
                "xrealloc": "resize_memory"
            },
            "code": "\nundefined4\nprocess_data_0010d7d4(undefined8 input_param_1,undefined8 *input_param_2,long *output_param_1,uint *output_param_2,uint *output_param_3)\n\n{\n  undefined8 input_value;\n  char result;\n  undefined4 expanded_item;\n  long temp_var;\n  long *local_array;\n  uint temp_value;\n  long local_array [2];\n  \n  input_value = *input_param_2;\n  local_array = local_array;\n  if (output_param_1 == (long *)0x0) {\n    local_array = (long *)0x0;\n  }\n  result = parse_and_execute_command_0010c95e(input_param_1,input_param_2,local_array);\n  if ((result != '\\0') &&\n     (expanded_item = expand_and_add_item(input_param_1,input_value,(int)*input_param_2 - (int)input_value), (char)expanded_item != '\\0')) {\n    if (output_param_1 == (long *)0x0) {\n      return expanded_item;\n    }\n    if (local_array[0] != 0) {\n      if (*output_param_3 <= *output_param_2 + 1) {\n        temp_value = *output_param_3 + 10;\n        temp_var = *output_param_1;\n        *output_param_3 = temp_value;\n        temp_var = xrealloc(temp_var,(ulong)temp_value << 3);\n        *output_param_1 = temp_var;\n      }\n      temp_value = *output_param_2;\n      *(long *)(*output_param_1 + (ulong)temp_value * 8) = local_array[0];\n      *output_param_2 = temp_value + 1;\n      return expanded_item;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109be3",
                "FUN_0010c95e",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "process_data_0010d7d4",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = expand_and_add_item_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "get_file_information_00113f50",
                "param_1": "filePath",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong getFileInformation_00113f50(char *filePath)\n\n{\n  int result;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    result = stat(filePath,&fileStats);\n    if (result < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00119ed0(errorMessage,filePath);\n      }\n      else {\n        errorReason = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00119ed0(errorMessage,filePath,errorReason);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_00104966",
                "FUN_00119ed0",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "get_file_information_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd"
            },
            "code": "\nundefined8 initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formats",
                "uVar1": "defaultFormat",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "_stdout": "stdout",
                "_stderr": "stderr"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formats)\n\n{\n  undefined8 defaultFormat;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(stdout);\n  defaultFormat = DAT_00127600;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(stderr,formatString,defaultFormat);\n  for (currentFormat = formats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fputc",
                "fflush",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "parse_binary_0011378f",
                "param_1": "input_files",
                "param_2": "output_file",
                "param_3": "memory_address",
                "param_4": "hash_table",
                "param_5": "strings",
                "param_6": "status",
                "auVar1": "temp_memory",
                "cVar2": "result",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "puVar5": "new_string",
                "sVar6": "string_length",
                "lVar7": "loop_counter",
                "puVar8": "linked_list",
                "puVar9": "array",
                "__dest": "destination_string",
                "puVar10": "current_node",
                "plVar11": "current_list",
                "bVar12": "flag",
                "local_258": "input_files_ptr",
                "local_250": "memory_buffer",
                "local_248": "var_248",
                "uStack_244": "var_244",
                "uStack_240": "constant_500",
                "uStack_23c": "var_23c",
                "local_238": "temp_memory_array",
                "local_228": "var_228",
                "local_220": "hash_table_memory",
                "local_1f8": "var_1f8",
                "local_1f0": "var_1f0",
                "local_1e8": "hash_table_entries",
                "local_a0": "strings_memory",
                "local_78": "var_78",
                "uStack_70": "temp_variable",
                "local_68": "var_68",
                "local_60": "var_60",
                "local_58": "var_58",
                "uStack_54": "var_54",
                "uStack_50": "var_50",
                "uStack_4c": "var_4c"
            },
            "code": "\nundefined4\nparseBinary_0011378f(undefined8 *input_files,undefined8 *output_file,long *memory_address,undefined8 *hash_table,\n            undefined8 *strings,undefined8 *status)\n\n{\n  undefined temp_memory [16];\n  char result;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *new_string;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *linked_list;\n  undefined4 *array;\n  char *destination_string;\n  undefined8 *current_node;\n  long *current_list;\n  byte flag;\n  undefined8 *input_files_ptr;\n  long memory_buffer;\n  undefined4 var_248;\n  undefined4 var_244;\n  undefined4 constant_500;\n  undefined4 var_23c;\n  undefined temp_memory_array [16];\n  undefined8 var_228;\n  undefined hash_table_memory [40];\n  undefined8 var_1f8;\n  undefined8 var_1f0;\n  undefined4 hash_table_entries [82];\n  undefined strings_memory [40];\n  undefined var_78 [8];\n  undefined8 temp_variable;\n  undefined8 var_68;\n  undefined4 var_60;\n  undefined4 var_58;\n  undefined4 var_54;\n  undefined4 var_50;\n  undefined4 var_4c;\n  \n  flag = 0;\n  var_248 = 0;\n  var_244 = 0;\n  constant_500 = 500;\n  var_23c = 0;\n  input_files_ptr = input_files;\n  memory_buffer = xmalloc(500);\n  var_228 = 1;\n  temp_memory_array = ZEXT816(0);\n  result = bfd_hash_table_init(hash_table_memory,allocate_and_initialize_hash_0010bb52,0x30);\n  if ((result == '\\0') || (result = bfd_hash_table_init(strings_memory,allocate_and_initialize_hash_0010bb52,0x30), result == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    var_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    var_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    array = hash_table_entries;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *array = 0;\n      array = array + (ulong)flag * -2 + 1;\n    }\n    var_68 = 0;\n    var_60 = 0;\n    var_1f0 = 1;\n    var_58 = 0;\n    var_54 = 0;\n    var_50 = 0xffffffff;\n    var_4c = 0xffffffff;\n    result = process_string_0010e2f0(&input_files_ptr,0,0,0,0);\n    temp_memory = _var_78;\n    if (result != '\\0') {\n      var_78._4_4_ = var_244;\n      var_78._0_4_ = var_248;\n      temp_variable = temp_memory._8_8_;\n      result = process_string_0010e2f0(&input_files_ptr,100,0,0,*input_files);\n      if (result != '\\0') {\n        *(int *)(output_file + 6) = *(int *)(output_file + 6) + 1;\n        output_file[10] = 0;\n        current_node = (undefined8 *)*output_file;\n        *(undefined4 *)(output_file + 7) = *(undefined4 *)((long)output_file + 0x34);\n        for (; current_node != (undefined8 *)0x0; current_node = (undefined8 *)*current_node) {\n          output_file[8] = current_node[2];\n          *(undefined4 *)(output_file + 9) = 0;\n          result = set_param_value_thunk_0010e439(&input_files_ptr,*(undefined8 *)(current_node[1] + 8));\n          if (result == '\\0') {\n            return 0;\n          }\n          current_list = (long *)current_node[1];\n          if (current_list != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)current_list[2] != (undefined8 *)0x0) {\n                for (linked_list = *(undefined8 **)(undefined8 *)current_list[2]; linked_list != (undefined8 *)0x0;\n                    linked_list = (undefined8 *)*linked_list) {\n                  result = process_data_001135a5(output_file,&input_files_ptr);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              current_list = (long *)*current_list;\n              if (current_list == (long *)0x0) break;\n              result = set_string_in_memory_0010e439(&input_files_ptr,current_list[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = process_files_00112502(output_file,&input_files_ptr,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var_4c,var_50) == -1) &&\n           (error_code = process_string_0010e2f0(&input_files_ptr,100,0,var_68,0), (char)error_code != '\\0')) {\n          (**(code **)(input_files[1] + 0x50))(var_228,memory_buffer + 8);\n          *memory_address = memory_buffer;\n          *hash_table = CONCAT44(var_244,var_248);\n          *status = var_228;\n          new_string = (undefined *)xmalloc();\n          *new_string = 0;\n          destination_string = new_string + 1;\n          *strings = new_string;\n          for (loop_counter = temp_memory_array._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(destination_string,*(char **)(loop_counter + 8));\n            string_length = strlen(destination_string);\n            destination_string = destination_string + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_hash_table_init",
                "strlen",
                "strcpy",
                "FUN_0010e439",
                "FUN_0010e2f0",
                "bfd_errmsg",
                "bfd_get_error",
                "FUN_0010bb52",
                "FUN_001135a5",
                "xmalloc",
                "thunk_FUN_0010e439",
                "FUN_00112502"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_binary_0011378f",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,allocate_and_initialize_hash_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,allocate_and_initialize_hash_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_string_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_string_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = set_param_value_thunk_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = set_string_in_memory_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = process_files_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_string_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errnoAddress",
                "uVar2": "errorMessage",
                "__errno_location": "getErrnoLocation",
                "dcgettext": "translateMessage",
                "print_error_message_00119ed0": "printErrorMessage",
                "strerror": "getErrorString"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errnoAddress;\n  undefined8 errorMessage;\n  \n  errnoAddress = __errno_location();\n  if (*errnoAddress == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    printErrorMessage(errorMessage);\n  }\n  else {\n    strerror(*errnoAddress);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    printErrorMessage(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "data"
            },
            "code": "\nvoid processData_0010a0a0(long data)\n\n{\n  process_data_00109ed3(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "print_error_message_00119ed0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMsg",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "inputFlag",
                "local_d8": "bufferSize",
                "local_d4": "localVar2",
                "local_d0": "buffer",
                "local_c8": "localArray",
                "local_b8": "localBuffer",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "errorCodeCopy",
                "local_78": "param2Copy",
                "local_68": "param3Copy",
                "local_58": "param4Copy",
                "local_48": "param5Copy",
                "local_38": "param6Copy",
                "local_28": "param7Copy",
                "local_18": "param8Copy"
            },
            "code": "\nvoid printErrorMessage_00119ed0(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMsg,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char inputFlag;\n  undefined4 bufferSize;\n  undefined4 localVar2;\n  undefined *buffer;\n  undefined *localArray;\n  undefined localBuffer [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCodeCopy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  undefined4 param5Copy;\n  undefined4 param6Copy;\n  undefined4 param7Copy;\n  undefined4 param8Copy;\n  \n  if (inputFlag != '\\0') {\n    errorCodeCopy = errorCode;\n    param2Copy = param2;\n    param3Copy = param3;\n    param4Copy = param4;\n    param5Copy = param5;\n    param6Copy = param6;\n    param7Copy = param7;\n    param8Copy = param8;\n  }\n  buffer = &stack0x00000008;\n  bufferSize = 8;\n  localArray = localBuffer;\n  localVar2 = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  print_error_message_00119e70(errorMsg,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104966",
                "FUN_001086af",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010e6a8",
                "FUN_00108375",
                "FUN_00104ad6",
                "FUN_00108200",
                "FUN_0010e2f0",
                "FUN_00113f50",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_0011378f",
                "FUN_0010ba08",
                "FUN_001152b6",
                "FUN_0010b800",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_message_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "process_debug_data_00112c1f",
                "param_1": "debug_info_address",
                "param_2": "param_list",
                "param_3": "type_info",
                "param_4": "current_type",
                "plVar1": "type_pointer",
                "lVar2": "current_type",
                "puVar3": "ptr1",
                "puVar4": "ptr2",
                "cVar5": "result",
                "piVar6": "real_type",
                "uVar7": "output",
                "uVar8": "var1",
                "iVar9": "case_value",
                "uVar10": "var2",
                "uVar11": "var3",
                "uVar12": "var4",
                "uVar13": "var5",
                "bVar14": "flag",
                "local_3c": "local_var"
            },
            "code": "\n\n\nundefined8 process_debug_data_00112c1f(ulong debug_info_address,undefined8 param_list,int *type_info,long current_type)\n\n{\n  long *type_pointer;\n  long current_type;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  char result;\n  int *real_type;\n  undefined8 output;\n  undefined8 var1;\n  int case_value;\n  undefined4 var2;\n  undefined8 var3;\n  ulong var4;\n  uint var5;\n  bool flag;\n  uint local_var;\n  \n  var4 = debug_info_address;\nLAB_00112c39:\n  if (type_info != (int *)0x0) {\n    case_value = *type_info;\n    if (case_value - 0x16U < 2) {\n      do {\n        type_pointer = *(long **)(type_info + 4);\n        var5 = *(uint *)(debug_info_address + 0x30);\n        var4 = (ulong)var5;\n        current_type = *type_pointer;\n        if (*(uint *)(current_type + 0x10) == var5) {\n          if (case_value == 0x16) {\n            output = lookup_and_initialize_data_structure_0010bba1(param_list,*(undefined8 *)(current_type + 8));\n            return output;\n          }\nLAB_00112c94:\n          real_type = (int *)find_real_type_00112b6e(type_info,0);\n          if (real_type == (int *)0x0) goto LAB_00112dd6;\n          if ((*real_type - 7U < 4) && (*(long *)(real_type + 4) != 0)) {\n            if ((*(uint *)(*(long *)(real_type + 4) + 0xc) <= *(uint *)(debug_info_address + 0x38)) &&\n               (result = debug_set_class_id_0010c7a0(debug_info_address,*(undefined8 *)(**(long **)(type_info + 4) + 8),real_type),\n               result == '\\0')) {\n              return 0;\n            }\n            var5 = *(uint *)(*(long *)(real_type + 4) + 0xc);\n          }\n          else {\n            var5 = 0;\n          }\n          case_value = *real_type;\n          output = *(undefined8 *)(**(long **)(type_info + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (case_value == 0x17) {\n          if (current_type != current_type) goto LAB_00112c94;\n          *(uint *)(current_type + 0x10) = var5;\n          current_type = *type_pointer;\n          type_info = (int *)type_pointer[1];\n          goto LAB_00112c39;\n        }\n        if (current_type != 0) {\n          *(uint *)(current_type + 0x10) = var5;\n        }\n        type_info = (int *)type_pointer[1];\n        if (type_info == (int *)0x0) goto LAB_00112dd6;\n        case_value = *type_info;\n        current_type = 0;\n      } while (case_value - 0x16U < 2);\nLAB_00112d74:\n      output = 0;\n    }\n    else {\n      if (current_type == 0) goto LAB_00112d74;\n      *(undefined4 *)(current_type + 0x10) = *(undefined4 *)(debug_info_address + 0x30);\n      if (*(int *)(current_type + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      output = *(undefined8 *)(current_type + 8);\n    }\n    switch(case_value) {\n    case 0:\n      output = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",output);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      output = initialize_or_increment_00109dfe(param_list);\n      return output;\n    case 3:\n      output = initialize_data_structure_0010b800(param_list,type_info[1],*(undefined *)(type_info + 4));\n      return output;\n    case 4:\n      output = initialize_data_structure_0010b948(param_list,type_info[1]);\n      return output;\n    case 5:\n      output = update_structure_and_increment_00109e76(param_list,type_info[1]);\n      return output;\n    case 6:\n      output = initialize_data_structure_00109d3e(param_list,type_info[1]);\n      return output;\n    case 7:\n    case 8:\n      if (*(long *)(type_info + 4) != 0) {\n        if ((*(uint *)(*(long *)(type_info + 4) + 0xc) <= *(uint *)(debug_info_address + 0x38)) &&\n           (result = debug_set_class_id_0010c7a0(debug_info_address,output,type_info), result == '\\0')) {\n          return 0;\n        }\n        current_type = *(long *)(type_info + 4);\n        if (*(int *)(debug_info_address + 0x30) == *(int *)(current_type + 8)) {\n          var5 = *(uint *)(current_type + 0xc);\n          if (var5 <= *(uint *)(debug_info_address + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          case_value = *type_info;\nLAB_00112ed2:\n          output = initialize_array_and_data_structure_00109d5c(param_list,output,var5,case_value);\n          return output;\n        }\n        *(int *)(current_type + 8) = *(int *)(debug_info_address + 0x30);\n      }\n      var2 = 0;\n      if (*(long *)(type_info + 4) != 0) {\n        var2 = *(undefined4 *)(*(long *)(type_info + 4) + 0xc);\n      }\n      result = initialize_data_structure_0010a69a(param_list,output,var2,*type_info == 7,type_info[1]);\n      if (result == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(type_info + 4) != (long *)0x0) && (var4 = 0, **(long **)(type_info + 4) != 0)) {\n        while( true ) {\n          ptr2 = *(undefined8 **)(**(long **)(type_info + 4) + var4 * 8);\n          if (ptr2 == (undefined8 *)0x0) break;\n          result = process_debug_data_00112c1f(debug_info_address,param_list,ptr2[1],0);\n          if (result == '\\0') {\n            return 0;\n          }\n          result = generate_custom_string_0010ba08(param_list,*ptr2,*(undefined4 *)(ptr2 + 3),\n                               *(undefined4 *)((long)ptr2 + 0x1c),*(undefined4 *)(ptr2 + 2));\n          if (result == '\\0') {\n            return 0;\n          }\n          var4 = (ulong)((int)var4 + 1);\n        }\n      }\n      output = initialize_data_structure_0010a77a(param_list);\n      return output;\n    case 9:\n    case 10:\n      if (*(long *)(type_info + 4) == 0) {\n        var5 = 0;\n        real_type = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(type_info + 4) + 0xc) <= *(uint *)(debug_info_address + 0x38)) &&\n           (var4 = debug_info_address, result = debug_set_class_id_0010c7a0(debug_info_address,output,type_info), result == '\\0')) {\n          return 0;\n        }\n        current_type = *(long *)(type_info + 4);\n        var5 = *(uint *)(current_type + 0xc);\n        if (*(int *)(debug_info_address + 0x30) == *(int *)(current_type + 8)) {\n          if (var5 <= *(uint *)(debug_info_address + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          case_value = *type_info;\n          goto LAB_00112ed2;\n        }\n        real_type = *(int **)(current_type + 0x20);\n        *(int *)(current_type + 8) = *(int *)(debug_info_address + 0x30);\n        if (((real_type != (int *)0x0) && (type_info != real_type)) &&\n           (var4 = debug_info_address, result = process_debug_data_00112c1f(debug_info_address,param_list,real_type,0), result == '\\0')) {\n          return 0;\n        }\n      }\n      result = process_data_0010a83e(param_list,output,var5,*type_info == 9,type_info[1],real_type != (int *)0x0,\n                           type_info == real_type,var4);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (*(long **)(type_info + 4) != (long *)0x0) {\n        var5 = 0;\n        if (**(long **)(type_info + 4) != 0) {\n          while (ptr2 = *(undefined8 **)(**(long **)(type_info + 4) + (ulong)var5 * 8),\n                ptr2 != (undefined8 *)0x0) {\n            result = process_debug_data_00112c1f(debug_info_address,param_list,ptr2[1],0);\n            if (result == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr2 + 0x14) == '\\0') {\n              result = generate_custom_string_0010ba08(param_list,*ptr2,*(undefined4 *)(ptr2 + 3));\n            }\n            else {\n              result = create_connection_0010a94e(param_list,*ptr2,ptr2[3]);\n            }\n            if (result == '\\0') {\n              return 0;\n            }\n            var5 = var5 + 1;\n          }\n        }\n        var5 = 0;\n        if (*(long *)(*(long *)(type_info + 4) + 0x10) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(type_info + 4) + 0x10) + (ulong)var5 * 8),\n                ptr2 != (undefined8 *)0x0) {\n            result = process_debug_data_00112c1f(debug_info_address,param_list,*ptr2,0);\n            if (result == '\\0') {\n              return 0;\n            }\n            result = add_entry_to_table_0010aa53(param_list,*(undefined4 *)(ptr2 + 1),\n                                 *(undefined *)((long)ptr2 + 0xc));\n            if (result == '\\0') {\n              return 0;\n            }\n            var5 = var5 + 1;\n          }\n        }\n        local_var = 0;\n        if (*(long *)(*(long *)(type_info + 4) + 0x18) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(type_info + 4) + 0x18) + (ulong)local_var * 8),\n                ptr2 != (undefined8 *)0x0) {\n            result = append_string_with_delimiter_0010ab4d(param_list,*ptr2);\n            if (result == '\\0') {\n              return 0;\n            }\n            var5 = 0;\n            while (ptr1 = *(undefined8 **)(ptr2[1] + (ulong)var5 * 8),\n                  ptr1 != (undefined8 *)0x0) {\n              if ((ptr1[4] != 0) &&\n                 (result = process_debug_data_00112c1f(debug_info_address,param_list,ptr1[4],0), result == '\\0')) {\n                return 0;\n              }\n              result = process_debug_data_00112c1f(debug_info_address,param_list,ptr1[1],0);\n              if (result == '\\0') {\n                return 0;\n              }\n              if (ptr1[3] == -1) {\n                result = generate_log_entries_0010adf2(param_list,*ptr1,*(undefined4 *)(ptr1 + 2),\n                                     *(undefined *)((long)ptr1 + 0x14),\n                                     *(undefined *)((long)ptr1 + 0x15));\n              }\n              else {\n                result = log_entry_generation_0010add5(param_list);\n              }\n              if (result == '\\0') {\n                return 0;\n              }\n              var5 = var5 + 1;\n            }\n            result = check_string_ending_with_semicolon_00109bbb(param_list);\n            if (result == '\\0') {\n              return 0;\n            }\n            local_var = local_var + 1;\n          }\n        }\n      }\n      output = extract_and_concatenate_strings_0010ae0e(param_list);\n      return output;\n    case 0xb:\n      ptr2 = *(undefined8 **)(type_info + 4);\n      if (ptr2 == (undefined8 *)0x0) {\n        var1 = 0;\n        var3 = 0;\n      }\n      else {\n        var1 = ptr2[1];\n        var3 = *ptr2;\n      }\n      output = initialize_structure_0010e453(param_list,output,var3,var1);\n      return output;\n    case 0xc:\n      result = process_debug_data_00112c1f(debug_info_address,param_list,*(undefined8 *)(type_info + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = process_and_update_data_0010a083(param_list);\n      return output;\n    case 0xd:\n      result = process_debug_data_00112c1f(debug_info_address,param_list,**(undefined8 **)(type_info + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      var4 = 0;\n      if (*(long *)(*(long *)(type_info + 4) + 8) == 0) {\n        var4 = 0xffffffff;\n      }\n      else {\n        while (current_type = *(long *)(*(long *)(*(long *)(type_info + 4) + 8) + var4 * 8), current_type != 0) {\n          var4 = var4 + 1;\n          result = process_debug_data_00112c1f(debug_info_address,param_list,current_type,0);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        var4 = var4 & 0xffffffff;\n      }\n      output = process_data_0010e5db(param_list,var4,*(undefined *)(*(long *)(type_info + 4) + 0x10));\n      return output;\n    case 0xe:\n      result = process_debug_data_00112c1f(debug_info_address,param_list,*(undefined8 *)(type_info + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = process_data_0010a0a0(param_list);\n      return output;\n    case 0xf:\n      result = process_debug_data_00112c1f(debug_info_address,param_list,**(undefined8 **)(type_info + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = process_data_0010a0e9(param_list,*(undefined8 *)(*(long *)(type_info + 4) + 8),\n                           *(undefined8 *)(*(long *)(type_info + 4) + 0x10));\n      return output;\n    case 0x10:\n      result = process_debug_data_00112c1f(debug_info_address,param_list,**(undefined8 **)(type_info + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      result = process_debug_data_00112c1f(debug_info_address,param_list,*(undefined8 *)(*(long *)(type_info + 4) + 8),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      current_type = *(long *)(type_info + 4);\n      output = parse_data_and_initialize_structure_0010a181(param_list,*(undefined8 *)(current_type + 0x10),*(undefined8 *)(current_type + 0x18),\n                           *(undefined *)(current_type + 0x20));\n      return output;\n    case 0x11:\n      result = process_debug_data_00112c1f(debug_info_address,param_list,**(undefined8 **)(type_info + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = extract_and_initialize_data_0010a2b9(param_list,*(undefined *)(*(long *)(type_info + 4) + 8));\n      return output;\n    case 0x12:\n      result = process_debug_data_00112c1f(debug_info_address,param_list,**(undefined8 **)(type_info + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      result = process_debug_data_00112c1f(debug_info_address,param_list,*(undefined8 *)(*(long *)(type_info + 4) + 8),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = process_data_0010a377(param_list);\n      return output;\n    case 0x13:\n      result = process_debug_data_00112c1f(debug_info_address,param_list,**(undefined8 **)(type_info + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      var4 = 0;\n      if (*(long *)(*(long *)(type_info + 4) + 0x10) == 0) {\n        var4 = 0xffffffff;\n      }\n      else {\n        while (current_type = *(long *)(*(long *)(*(long *)(type_info + 4) + 0x10) + var4 * 8), current_type != 0)\n        {\n          var4 = var4 + 1;\n          result = process_debug_data_00112c1f(debug_info_address,param_list,current_type,0);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(type_info + 4) + 8) != 0) &&\n         (result = process_debug_data_00112c1f(debug_info_address,param_list,*(long *)(*(long *)(type_info + 4) + 8),0),\n         result == '\\0')) {\n        return 0;\n      }\n      output = process_data_0010a424(param_list,*(long *)(*(long *)(type_info + 4) + 8) != 0,var4 & 0xffffffff,\n                           *(undefined *)(*(long *)(type_info + 4) + 0x18));\n      return output;\n    case 0x14:\n      result = process_debug_data_00112c1f(debug_info_address,param_list,*(undefined8 *)(type_info + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = process_data_0010a0bd(param_list);\n      return output;\n    case 0x15:\n      result = process_debug_data_00112c1f(debug_info_address,param_list,*(undefined8 *)(type_info + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = process_data_0010a0d3(param_list);\n      return output;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  flag = *(int **)**(undefined8 **)(type_info + 4) == type_info;\n  type_info = *(int **)**(undefined8 **)(type_info + 4);\n  if (flag) {\nLAB_00112dd6:\n    output = initialize_or_increment_00109d97(param_list);\n    return output;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "abort",
                "FUN_0010ab4d",
                "FUN_0010a94e",
                "dcgettext",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010a0d3",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "fprintf",
                "FUN_00109d97",
                "FUN_0010c7a0",
                "FUN_0010adf2",
                "FUN_00109d3e",
                "FUN_0010b800",
                "FUN_0010a0a0",
                "FUN_00109e76",
                "FUN_0010a083",
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "__assert_fail",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010a0bd",
                "FUN_0010ae0e",
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_00109d5c",
                "FUN_00109bbb",
                "FUN_0010a83e",
                "FUN_0010e453",
                "FUN_0010add5",
                "FUN_0010bba1",
                "FUN_0010ba08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_debug_data_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "copySuccessful",
                "unaff_R15": "dataPointer",
                "lVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "print_bfd_error_message_001126c0": "printErrorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char copySuccessful;\n  long dataPointer;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (copySuccessful != '\\0') {\n    *(undefined4 *)(*(long *)(dataPointer + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    printErrorMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "message1",
                "param_2": "message2",
                "in_RAX": "returnValue",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 message1,undefined8 message2)\n\n{\n  undefined8 returnValue;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,message2,message1,returnValue);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0011173a",
                "FUN_00109a32",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "identify_architecture_00105828",
                "iVar1": "architectureCode",
                "uVar2": "arch",
                "uVar3": "formattedString",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 identifyArchitecture_00105828(void)\n\n{\n  int architectureCode;\n  undefined4 arch;\n  undefined8 formattedString;\n  undefined8 errorMessage;\n  \n  architectureCode = bfd_get_arch();\n  if (architectureCode == 0) {\n    formattedString = get_formatted_string_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,formattedString);\n  }\n  else {\n    formattedString = bfd_get_mach();\n    arch = bfd_get_arch();\n    formattedString = bfd_printable_arch_mach(arch,formattedString);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,formattedString);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "bfd_get_arch",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "identify_architecture_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temporary_directory_0011a0e0",
                "__template": "template_path",
                "pcVar1": "temporary_directory_path"
            },
            "code": "\nchar * create_temporary_directory_0011a0e0(void)\n\n{\n  char *template_path;\n  char *temporary_directory_path;\n  \n  template_path = (char *)create_filepath_00114cf0();\n  temporary_directory_path = mkdtemp(template_path);\n  if (temporary_directory_path == (char *)0x0) {\n    free(template_path);\n  }\n  return temporary_directory_path;\n}\n\n",
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temporary_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_initialize_data_structure_0010bba1",
                "param_1": "input_hash",
                "param_2": "input_data",
                "lVar1": "hash_lookup_result",
                "uVar2": "initialized_data_structure"
            },
            "code": "\nundefined8 lookup_and_initialize_data_structure_0010bba1(long input_hash,undefined8 input_data)\n\n{\n  long hash_lookup_result;\n  undefined8 initialized_data_structure;\n  \n  hash_lookup_result = bfd_hash_lookup(input_hash + 0x1b8,input_data,0,0);\n  if ((hash_lookup_result != 0) && (0 < *(long *)(hash_lookup_result + 0x20))) {\n    initialized_data_structure = initialize_data_structure_00109cf4(input_hash,*(long *)(hash_lookup_result + 0x20),*(undefined4 *)(hash_lookup_result + 0x28));\n    return initialized_data_structure;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_initialize_data_structure_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_and_store_string_0010e6a8",
                "param_1": "data",
                "param_2": "input_key",
                "__s": "extracted_string",
                "sVar3": "input_key_length",
                "sVar4": "extracted_string_length",
                "__s_00": "composed_string",
                "lVar8": "counter",
                "uVar9": "result",
                "uVar1": "string_processing_result",
                "uVar2": "extracted_string_type",
                "auVar10": "return_value",
                "lVar5": "lookup_result",
                "uVar6": "error_message",
                "uVar7": "error_format"
            },
            "code": "\nundefined  [16] process_and_store_string_0010e6a8(long data,char *input_key,undefined8 param_3,undefined8 param_4)\n\n{\n  uint string_processing_result;\n  undefined4 extracted_string_type;\n  char *extracted_string;\n  size_t input_key_length;\n  size_t extracted_string_length;\n  char *composed_string;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_format;\n  long counter;\n  ulong result;\n  undefined return_value [16];\n  \n  counter = *(long *)(*(long *)(data + 0x60) + 0x10);\n  extracted_string_type = *(undefined4 *)(*(long *)(data + 0x60) + 0x18);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  input_key_length = strlen(input_key);\n  extracted_string_length = strlen(extracted_string);\n  composed_string = (char *)xmalloc(input_key_length + 0x14 + extracted_string_length);\n  if (counter < 1) {\n    counter = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = counter + 1;\n    sprintf(composed_string,\"%s:t%ld=%s\",input_key,counter,extracted_string);\n  }\n  else {\n    sprintf(composed_string,\"%s:t%s\",input_key,extracted_string);\n  }\n  free(extracted_string);\n  string_processing_result = process_string_0010e2f0(data,0x80,0,0,composed_string);\n  result = (ulong)string_processing_result;\n  if ((char)string_processing_result != '\\0') {\n    free(composed_string);\n    lookup_result = bfd_hash_lookup(data + 0x1b8,input_key,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = counter;\n      *(undefined4 *)(lookup_result + 0x28) = extracted_string_type;\n      goto LAB_0010e7b3;\n    }\n    extracted_string_type = bfd_get_error();\n    error_message = bfd_errmsg(extracted_string_type);\n    error_format = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_message_00119ed0(error_format,error_message);\n  }\n  result = 0;\nLAB_0010e7b3:\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "xmalloc",
                "bfd_get_error",
                "strlen",
                "dcgettext",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_store_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "concatenate_strings_0010e7c2",
                "param_1": "inputParam1",
                "param_2": "inputString",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "extractedString",
                "sVar1": "inputStringLength",
                "sVar2": "extractedStringLength",
                "__s_00": "concatenatedString",
                "auVar3": "outputVariable"
            },
            "code": "\nundefined  [16] concatenateStrings_0010e7c2(undefined8 inputParam1,char *inputString,undefined8 param3,undefined8 param4)\n\n{\n  char *extractedString;\n  size_t inputStringLength;\n  size_t extractedStringLength;\n  char *concatenatedString;\n  undefined outputVariable [16];\n  \n  extractedString = (char *)extract_and_free_ptr_00109b2f();\n  inputStringLength = strlen(inputString);\n  extractedStringLength = strlen(extractedString);\n  concatenatedString = (char *)xmalloc(inputStringLength + 3 + extractedStringLength);\n  sprintf(concatenatedString,\"%s:T%s\",inputString,extractedString);\n  free(extractedString);\n  outputVariable._0_4_ = process_string_0010e2f0(inputParam1,0x80,0,0,concatenatedString);\n  outputVariable._4_4_ = 0;\n  if ((char)outputVariable._0_4_ != '\\0') {\n    free(concatenatedString);\n  }\n  outputVariable._8_8_ = param4;\n  return outputVariable;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "concatenate_strings_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "execute_and_exit_00119dd0",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "is_error",
                "local_d8": "buffer_size",
                "local_d0": "buffer_address",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy"
            },
            "code": "\nvoid execute_and_exit_00119dd0(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char is_error;\n  undefined4 buffer_size;\n  undefined4 local_d4;\n  undefined *buffer_address;\n  undefined *local_c8;\n  undefined local_b8 [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (is_error != '\\0') {\n    local_88 = error_code;\n    local_78 = param_2;\n    local_68 = param_3;\n    local_58 = param_4;\n    local_48 = param_5;\n    local_38 = param_6;\n    local_28 = param_7;\n    local_18 = param_8;\n  }\n  buffer_address = &stack0x00000008;\n  buffer_size = 8;\n  local_c8 = local_b8;\n  local_d4 = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message_00119e70(error_message,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00114190",
                "FUN_00104920",
                "FUN_00104ad6",
                "FUN_0010827b",
                "FUN_001083de",
                "FUN_00115b70",
                "FUN_00108808",
                "FUN_0010543c",
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00114460",
                "FUN_0010da0b",
                "FUN_00114dc7",
                "FUN_001053b5"
            ],
            "imported": false,
            "current_name": "execute_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_bfd_error_001083b7",
                "param_1": "error_code",
                "iVar1": "bfd_error",
                "unaff_RBP": "error_message",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined8 handle_bfd_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *error_message;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  print_bfd_error_message_0011a110(*error_message);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "bfd_get_error",
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_bfd_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_records_00116852",
                "in_R10": "recordIndex",
                "in_RCX": "recordArray",
                "unaff_RBX": "minRecordSize",
                "unaff_RBP": "currentRecord",
                "unaff_R13": "recordEnd",
                "unaff_R14": "currentRecordPtr",
                "unaff_R15": "maxRecordSize",
                "psVar13": "recordPtr",
                "bVar14": "tempVar",
                "param_7": "param7",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14"
            },
            "code": "\nulong processRecords_00116852(void)\n\n{\n  size_t sVar1;\n  code *pcVar2;\n  int iVar3;\n  uint uVar4;\n  undefined *__ptr;\n  size_t *recordArray;\n  ulong uVar5;\n  ulong uVar6;\n  long lVar7;\n  ulong uVar8;\n  size_t minRecordSize;\n  size_t *currentRecord;\n  undefined *puVar9;\n  char cVar10;\n  undefined *puVar11;\n  ulong recordIndex;\n  undefined *puVar12;\n  size_t in_R11;\n  size_t *recordEnd;\n  size_t *currentRecordPtr;\n  size_t maxRecordSize;\n  size_t *recordPtr;\n  byte tempVar;\n  size_t param7;\n  size_t param9;\n  ulong param10;\n  size_t *param11;\n  undefined *param12;\n  long param13;\n  size_t param14;\n  \n  tempVar = 0;\ncode_r0x00116852:\n  uVar4 = (int)recordIndex + 1;\n  if (0x10 < (int)recordIndex) goto LAB_001167f5;\nLAB_00116863:\n  currentRecordPtr = currentRecordPtr + -9;\n  do {\n    if (recordEnd <= currentRecordPtr) {\n      sVar1 = currentRecordPtr[2];\n      if (sVar1 == 0) goto LAB_00116863;\n      uVar8 = (ulong)uVar4;\n      if ((*currentRecordPtr == *currentRecord) &&\n         (iVar3 = memcmp((void *)currentRecordPtr[3],(void *)currentRecord[3],*currentRecord), iVar3 == 0)) {\n        uVar6 = currentRecordPtr[7];\n        uVar5 = currentRecordPtr[8];\n        recordIndex = uVar8 & 0xffffffff;\n        if (maxRecordSize == uVar6) {\n          if (minRecordSize != uVar5) goto LAB_001167a6;\n          currentRecord[2] = 0;\n        }\n        else {\n          if (maxRecordSize < uVar6) {\n            if (uVar5 < maxRecordSize) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < uVar5) || (maxRecordSize <= (uVar5 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (minRecordSize < maxRecordSize) {\n              if ((0xfffffffffffffff0 < minRecordSize) ||\n                 (uVar6 <= (minRecordSize + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (minRecordSize == uVar5) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (minRecordSize <= uVar5) {\n              currentRecord[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (uVar5 < maxRecordSize) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (sVar1 == 0x101)) goto code_r0x00116852;\n          if (uVar5 <= minRecordSize) {\n            uVar5 = minRecordSize;\n          }\n          if (uVar6 < maxRecordSize) {\n            maxRecordSize = uVar6;\n          }\n          currentRecordPtr[8] = uVar5;\n          currentRecordPtr[7] = maxRecordSize;\n          currentRecord[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        currentRecordPtr = currentRecord;\n        currentRecord = currentRecordPtr + 9;\n        if (recordArray <= currentRecord) {\n          qsort(param11,param14,0x48,compare_records_0011a250);\n          __ptr = (undefined *)xmalloc(param10 * 2);\n          param7 = 0;\n          puVar12 = __ptr;\n          for (recordPtr = param11; recordPtr < recordArray; recordPtr = recordPtr + 9) {\n            if (recordPtr[2] != 0) {\n              puVar11 = puVar12 + 4;\n              puVar9 = puVar12 + 0xc;\n              pcVar2 = *(code **)(*(long *)(param13 + 8) + 0x50);\n              if ((recordPtr[7] == param9) && (recordPtr[8] == param7)) {\n                (*pcVar2)(*recordPtr,puVar12);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(0,puVar11);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(recordPtr[2],puVar12 + 8);\n                uVar6 = recordPtr[6];\n                uVar8 = *recordPtr;\n                puVar12 = (undefined *)recordPtr[3];\n                puVar11 = puVar9;\n                for (uVar5 = uVar8; uVar5 != 0; uVar5 = uVar5 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)tempVar * -2 + 1;\n                  puVar11 = puVar11 + (ulong)tempVar * -2 + 1;\n                }\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)tempVar * -2 + 1;\n                  }\n                }\n                puVar12 = puVar9 + uVar6;\n              }\n              else {\n                (*pcVar2)();\n                if (*(int *)(*(long *)(param13 + 8) + 8) == 5) {\n                  cVar10 = (*(char *)(*(long *)(param13 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  cVar10 = '\\b';\n                }\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(cVar10,puVar11);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(recordPtr[2],puVar12 + 8);\n                uVar8 = *recordPtr;\n                puVar12 = (undefined *)recordPtr[3];\n                puVar11 = puVar9;\n                for (uVar6 = uVar8; uVar6 != 0; uVar6 = uVar6 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)tempVar * -2 + 1;\n                  puVar11 = puVar11 + (ulong)tempVar * -2 + 1;\n                }\n                uVar6 = recordPtr[6];\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)tempVar * -2 + 1;\n                  }\n                }\n                lVar7 = *(long *)(param13 + 8);\n                puVar9 = puVar9 + uVar6;\n                puVar12 = puVar9 + 8;\n                if ((*(int *)(lVar7 + 8) == 5) &&\n                   (*(char *)(*(long *)(param13 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(lVar7 + 0x38))(recordPtr[7],puVar9);\n                  (**(code **)(*(long *)(param13 + 8) + 0x38))(recordPtr[8],puVar12);\n                  puVar12 = puVar9 + 0x10;\n                }\n                else {\n                  (**(code **)(lVar7 + 0x50))(recordPtr[7],puVar9);\n                  (**(code **)(*(long *)(param13 + 8) + 0x50))(recordPtr[8],puVar9 + 4);\n                }\n                param9 = recordPtr[7];\n                param7 = recordPtr[8];\n              }\n            }\n          }\n          uVar6 = (long)puVar12 - (long)__ptr;\n          uVar8 = uVar6;\n          puVar12 = __ptr;\n          if (uVar6 < param10) {\n            for (; param10 = uVar6, uVar8 != 0; uVar8 = uVar8 - 1) {\n              *param12 = *puVar12;\n              puVar12 = puVar12 + (ulong)tempVar * -2 + 1;\n              param12 = param12 + (ulong)tempVar * -2 + 1;\n            }\n          }\n          free(__ptr);\n          free(param11);\n          return param10;\n        }\n        in_R11 = currentRecordPtr[0xb];\n      } while (in_R11 == 0);\n      maxRecordSize = currentRecordPtr[0x10];\n      minRecordSize = currentRecordPtr[0x11];\n      uVar4 = 0;\n      if (maxRecordSize != minRecordSize) break;\n      currentRecordPtr[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a250",
                "FUN_00116852",
                "qsort",
                "memcmp",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_records_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_or_get_data_00113d3a",
                "param_1": "data_pointer",
                "lVar1": "new_data_pointer"
            },
            "code": "\nlong initialize_or_get_data_00113d3a(long data_pointer)\n\n{\n  long new_data_pointer;\n  \n  if (data_pointer != 0) {\n    new_data_pointer = *(long *)(data_pointer + 8);\n    if (new_data_pointer == 0) {\n      new_data_pointer = initialize_data_00112904(0xc,0);\n      if (new_data_pointer == 0) {\n        new_data_pointer = 0;\n      }\n      else {\n        *(long *)(new_data_pointer + 0x10) = data_pointer;\n        *(long *)(data_pointer + 8) = new_data_pointer;\n      }\n    }\n    return new_data_pointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_or_get_data_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010bba1",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "process_data_0010a0d3",
                "param_1": "data"
            },
            "code": "\nvoid process_data_0010a0d3(long data)\n\n{\n  process_data_0010a0d3_00109ed3(data,0x42,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_compiled_data_00115530",
                "param_2": "param_list",
                "lVar1": "lengthVar1",
                "pcVar2": "ptrVar2",
                "ppcVar3": "ptrPtrVar3",
                "cVar4": "charVar4",
                "iVar5": "intVar5",
                "uVar6": "uintVar6",
                "sVar7": "sizeVar7",
                "sVar8": "sizeVar8",
                "lVar9": "lengthVar9",
                "pcVar10": "ptrVar10",
                "pcVar11": "ptrVar11",
                "pcVar12": "ptrVar12",
                "uVar13": "uintVar13",
                "bVar14": "boolVar14",
                "local_50": "localVar50",
                "local_48": "localVar48",
                "local_40": "localArrayVar40"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid processCompiledData_00115530(long param_1,char **param_list,long param_3)\n\n{\n  long lengthVar1;\n  char *ptrVar2;\n  char **ptrPtrVar3;\n  char charVar4;\n  int intVar5;\n  uint uintVar6;\n  size_t sizeVar7;\n  size_t sizeVar8;\n  long lengthVar9;\n  char *ptrVar10;\n  char *ptrVar11;\n  char *ptrVar12;\n  uint uintVar13;\n  bool boolVar14;\n  long localVar50;\n  char *localVar48;\n  long localArrayVar40 [2];\n  \n  charVar4 = check_selected_item_001159d0(param_list);\n  if (charVar4 != '\\0') {\n    return;\n  }\n  ptrVar10 = *param_list;\n  uintVar13 = *(uint *)((long)param_list + 0x24);\n  localVar48 = ptrVar10;\n  ptrPtrVar3 = DAT_001278f8;\n  if (*(int *)(*(long *)(param_1 + 8) + 8) != *(int *)(*(long *)(param_3 + 8) + 8)) {\n    uintVar13 = uintVar13 & *(uint *)(*(long *)(param_1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param_3 + 8) + 0x18);\n  }\n  for (; ptrPtrVar3 != (char **)0x0; ptrPtrVar3 = (char **)ptrPtrVar3[3]) {\n    intVar5 = strcmp(*ptrPtrVar3,ptrVar10);\n    if (intVar5 == 0) {\n      if (*(uint *)(ptrPtrVar3 + 2) != 0xffffffff) {\n        uintVar13 = *(uint *)(ptrPtrVar3 + 2);\n      }\n      if (ptrVar10 != ptrPtrVar3[1]) {\n        localVar48 = ptrPtrVar3[1];\n        uintVar13 = drop_share_flag_if_output_not_coff_00115f30(uintVar13,param_3);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (ptrVar10 = DAT_00127918, (*(byte *)((long)param_list + 0x24) & 1) != 0)) ||\n     (ptrVar10 = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    sizeVar7 = strlen(ptrVar10);\n    sizeVar8 = strlen(localVar48);\n    ptrVar12 = (char *)xmalloc(sizeVar7 + 1 + sizeVar8);\n    ptrVar10 = strcpy(ptrVar12,ptrVar10);\n    localVar48 = strcat(ptrVar10,localVar48);\n  }\n  lengthVar9 = process_data_00114190(*param_list,0,0x80);\n  boolVar14 = false;\n  if (lengthVar9 == 0) {\n    if ((DAT_00127a48 == 4) && ((uintVar13 & 0x2000001) != 0)) {\n      intVar5 = *(int *)(*(long *)(param_1 + 8) + 8);\n      if (intVar5 == 5) {\n        if (*(int *)(param_list[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param_3 + 8) + 8) == 5) {\n            boolVar14 = (uintVar13 & 0x2000000) == 0;\n            uintVar6 = ~((-(uint)((uintVar13 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param_list + 0x24) = *(uint *)((long)param_list + 0x24) & uintVar6;\n          }\n          else {\n            uintVar6 = 0xfdfffefd;\n          }\n          uintVar13 = uintVar13 & uintVar6;\n        }\n      }\n      else if ((intVar5 != 2) || (intVar5 = strcmp(*param_list,\".buildid\"), intVar5 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    uintVar13 = drop_share_flag_if_output_not_coff_00115f30(uintVar13 & 0x104 | *(uint *)(lengthVar9 + 0x28),param_3,*param_list);\n  }\n  charVar4 = bfd_convert_section_setup(param_1,param_list,param_3,&localVar48,localArrayVar40);\n  if (charVar4 == '\\0') {\n    ptrVar10 = (char *)0x0;\n    localVar50 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  ptrVar10 = (char *)bfd_make_section_anyway_with_flags(param_3,localVar48,uintVar13);\n  if (ptrVar10 == (char *)0x0) {\n    localVar50 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      localArrayVar40[0] = 0;\n      goto LAB_001158e7;\n    }\n    charVar4 = bfd_set_section_size(ptrVar10,localArrayVar40[0]);\n    if (charVar4 == '\\0') {\n      set_alignment_and_copy_data_00108072();\n      return;\n    }\n  }\n  else {\n    localArrayVar40[0] = ((((long)DAT_00127a3c - 1U) + localArrayVar40[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    charVar4 = bfd_set_section_size(ptrVar10);\n    if (charVar4 == '\\0') {\n      set_alignment_and_copy_data_00108072();\n      return;\n    }\n  }\n  localVar50 = 0;\n  ptrVar12 = param_list[6];\n  lengthVar9 = process_data_00114190(*param_list,0,0x18);\n  if (lengthVar9 == 0) {\n    ptrVar10[0x28] = ptrVar10[0x28] | 1;\n    ptrVar11 = *param_list;\n    ptrVar12 = ptrVar12 + _DAT_001279b0;\n    *(char **)(ptrVar10 + 0x30) = ptrVar12;\n    *(char **)(ptrVar10 + 0x38) = ptrVar12;\n    ptrVar12 = param_list[7];\n    lengthVar9 = process_data_00114190(ptrVar11,0,0x60);\n    if (lengthVar9 == 0) goto LAB_00115695;\nLAB_00115860:\n    ptrVar11 = *(char **)(lengthVar9 + 0x20);\n    if ((*(byte *)(lengthVar9 + 0x14) & 0x40) != 0) {\n      ptrVar11 = ptrVar11 + (long)ptrVar12;\n    }\n    *(char **)(ptrVar10 + 0x38) = ptrVar11;\n    lengthVar9 = process_data_00114190(*param_list,0,0x200);\n    if (lengthVar9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar13 = *(uint *)((long)param_list + 0x7c);\n    if (uintVar13 < 0x3f) goto LAB_001156c4;\n    localVar50 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(ptrVar10 + 0xb4) = *(undefined4 *)((long)param_list + 0xb4);\n    ptrVar10[0x28] = ptrVar10[0x28] & 0xcfU | *(byte *)(param_list + 5) & 0x30;\n    param_list[0xc] = ptrVar10;\n    param_list[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param_list + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    charVar4 = (**(code **)(*(long *)(param_3 + 8) + 0x158))(param_1,param_list,param_3,ptrVar10);\n    if (charVar4 == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    ptrVar11 = *(char **)(lengthVar9 + 0x18);\n    if ((*(byte *)(lengthVar9 + 0x14) & 8) == 0) {\n      ptrVar11 = ptrVar11 + (long)ptrVar12;\n    }\n    ptrVar10[0x28] = ptrVar10[0x28] | 1;\n    ptrVar2 = *param_list;\n    *(char **)(ptrVar10 + 0x30) = ptrVar11;\n    *(char **)(ptrVar10 + 0x38) = ptrVar11;\n    ptrVar12 = param_list[7];\n    lengthVar9 = process_data_00114190(ptrVar2,0,0x60);\n    if (lengthVar9 != 0) goto LAB_00115860;\nLAB_00115695:\n    ptrVar11 = *param_list;\n    *(char **)(ptrVar10 + 0x38) = ptrVar12 + _DAT_001279b0;\n    lengthVar9 = process_data_00114190(ptrVar11,0,0x200);\n    if (lengthVar9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar13 = *(uint *)(lengthVar9 + 0x2c);\n    if (0x3e < uintVar13) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(ptrVar10 + 0x7c) = uintVar13;\n    *(undefined4 *)(ptrVar10 + 0xb4) = *(undefined4 *)((long)param_list + 0xb4);\n    ptrVar10[0x28] = ptrVar10[0x28] & 0xcfU | *(byte *)(param_list + 5) & 0x30;\n    param_list[0xc] = ptrVar10;\n    param_list[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param_list + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    ptrVar12 = param_list[0x1a];\n    lengthVar9 = get_selected_item_index_00115d00(ptrVar12,param_list[0x1c]);\n    if ((lengthVar9 == 0) ||\n       (lengthVar1 = *(long *)(param_1 + 8), *(uint *)(lengthVar9 + 0x18) = *(uint *)(lengthVar9 + 0x18) | 0x20,\n       *(int *)(lengthVar1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(ptrVar12 + 0xb0) = lengthVar9;\n    charVar4 = (**(code **)(*(long *)(param_3 + 8) + 0x158))(param_1,param_list,param_3,ptrVar10);\n    if (charVar4 == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (boolVar14) {\n    *(undefined4 *)(*(long *)(ptrVar10 + 0xd0) + 4) = 8;\n  }\n  if (localVar50 == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  print_bfd_error_message_001126c0(0,param_3,ptrVar10,localVar50);\n  return;\n}\n\n",
            "called": [
                "FUN_00108072",
                "FUN_00115f30",
                "FUN_00114190",
                "strlen",
                "strcat",
                "dcgettext",
                "strcpy",
                "strcmp",
                "FUN_001159d0",
                "xmalloc",
                "bfd_set_section_size",
                "bfd_make_section_anyway_with_flags",
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_compiled_data_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "process_data_0010a0bd",
                "param_1": "data"
            },
            "code": "\nvoid process_data_0010a0bd(long data)\n\n{\n  process_data_0010a0bd_00109ed3(data,0x6b,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "check_function_validity_00113e5e",
                "cVar1": "comparisonResult",
                "local_20": "localVariables"
            },
            "code": "\nundefined8 checkFunctionValidity_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char comparisonResult;\n  char *localVariables [2];\n  \n  localVariables[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)localVariables[0] < 5) ||\n      (comparisonResult = string_comparison_00113fb0(localVariables[0],\"type\"), comparisonResult == '\\0')) ||\n     ((localVariables[0][4] != '$' && (localVariables[0][4] != '.')))) {\n    if (*localVariables[0] != '_') {\n      return 1;\n    }\n    if (localVariables[0][1] != '_') {\n      return 1;\n    }\n    if (localVariables[0][2] != 'o') {\n      return 1;\n    }\n    if (localVariables[0][3] != 'p') {\n      return 1;\n    }\n    localVariables[0] = localVariables[0] + 4;\n  }\n  else {\n    localVariables[0] = localVariables[0] + 5;\n  }\n  comparisonResult = parse_and_execute_command_0010c95e(param_1,localVariables,0);\n  if (comparisonResult != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c95e",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "check_function_validity_00113e5e",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = string_comparison_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "generate_log_entry_0010abdd",
                "param_1": "logManager",
                "param_2": "source",
                "param_3": "level",
                "param_4": "useTimestamp",
                "param_5": "useDate",
                "param_6": "useTime",
                "param_7": "timestamp",
                "param_8": "useMetadata",
                "lVar1": "logInfo",
                "pcVar2": "logMessage",
                "bVar3": "defaultFlag",
                "pcVar4": "formattedMessage",
                "__s": "extraData",
                "sVar5": "logMessageLength",
                "sVar6": "formattedMessageLength",
                "sVar7": "sourceLength",
                "sVar8": "extraDataLength",
                "uVar9": "result",
                "cVar10": "timestampFlag",
                "cVar11": "levelFlag",
                "local_52": "dynamicFlag"
            },
            "code": "\nundefined8\ngenerateLogEntry_0010abdd(long logManager,char *source,uint level,char useTimestamp,char useDate,char useTime,\n            undefined8 timestamp,char useMetadata)\n\n{\n  long logInfo;\n  char *logMessage;\n  byte defaultFlag;\n  char *formattedMessage;\n  char *extraData;\n  size_t logMessageLength;\n  size_t formattedMessageLength;\n  size_t sourceLength;\n  size_t extraDataLength;\n  undefined8 result;\n  char timestampFlag;\n  char levelFlag;\n  byte dynamicFlag;\n  \n  extraData = (char *)0x0;\n  dynamicFlag = *(byte *)(*(long *)(logManager + 0x60) + 0x1c);\n  formattedMessage = (char *)extract_and_free_ptr_00109b2f();\n  if (useMetadata != '\\0') {\n    defaultFlag = 1;\n    if (dynamicFlag == 0) {\n      defaultFlag = *(byte *)(*(long *)(logManager + 0x60) + 0x1c);\n    }\n    dynamicFlag = defaultFlag & 1;\n    extraData = (char *)extract_and_free_ptr_00109b2f(logManager);\n  }\n  logInfo = *(long *)(logManager + 0x60);\n  if ((logInfo == 0) || (logMessage = *(char **)(logInfo + 0x30), logMessage == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < level) {\n                    \n      abort();\n    }\n    if (useDate == '\\0') {\n      levelFlag = (-(useTime == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      levelFlag = (-(useTime == '\\0') & 0xfeU) + 0x44;\n    }\n    timestampFlag = '?';\n    if (useTimestamp == '\\0') {\n      timestampFlag = (-(useMetadata == '\\0') & 4U) + 0x2a;\n    }\n    logMessageLength = strlen(logMessage);\n    formattedMessageLength = strlen(formattedMessage);\n    sourceLength = strlen(source);\n    extraDataLength = 0;\n    if (useMetadata != '\\0') {\n      extraDataLength = strlen(extraData);\n    }\n    result = xrealloc(logMessage,sourceLength + logMessageLength + 0x28 + formattedMessageLength + extraDataLength);\n    *(undefined8 *)(logInfo + 0x30) = result;\n    logMessage = *(char **)(*(long *)(logManager + 0x60) + 0x30);\n    logMessageLength = strlen(logMessage);\n    sprintf(logMessage + logMessageLength,\"%s:%s;%c%c%c\",formattedMessage,source,(ulong)(byte)(0x32 - (char)level),\n            (ulong)(uint)(int)levelFlag,(ulong)(uint)(int)timestampFlag,logMessageLength);\n    free(formattedMessage);\n    if (useMetadata != '\\0') {\n      formattedMessage = *(char **)(*(long *)(logManager + 0x60) + 0x30);\n      logMessageLength = strlen(formattedMessage);\n      sprintf(formattedMessage + logMessageLength,\"%ld;%s;\",timestamp,extraData);\n      free(extraData);\n    }\n    if (dynamicFlag != 0) {\n      *(undefined *)(*(long *)(logManager + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "sprintf",
                "xrealloc",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "generate_log_entry_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_output_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "args",
                "param_3": "outputFormat",
                "uVar1": "arg1Copy",
                "uVar2": "errorMessage",
                "print_error_message_00119ed0": "printErrorMessage"
            },
            "code": "\nuint dropShareFlagIfOutputNotCOFF_00115f30(uint flags,undefined8 *args,undefined8 outputFormat)\n\n{\n  undefined8 arg1Copy;\n  undefined8 errorMessage;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(args[1] + 8) != 2)) {\n    arg1Copy = *args;\n    flags = flags & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    printErrorMessage(errorMessage,arg1Copy,outputFormat);\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00115530",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_output_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "extract_value_from_binary_001129f4",
                "param_1": "inputArray",
                "puVar1": "pointerToArray",
                "piVar2": "currentPointer"
            },
            "code": "\nundefined8 extractValueFromBinary_001129f4(int *inputArray)\n\n{\n  undefined8 *pointerToArray;\n  int *currentPointer;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    pointerToArray = (undefined8 *)(inputArray + 4);\n    currentPointer = **(int ***)(undefined8 *)*pointerToArray;\n  } while ((inputArray != currentPointer) && (inputArray = currentPointer, currentPointer != (int *)0x0));\n  return ((undefined8 *)*pointerToArray)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010b0fa",
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_value_from_binary_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_00114c80",
                "FUN_00104ad6",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "invert_and_check_string_length_001082b3",
                "uVar1": "string_length",
                "check_string_length_00113ede": "get_string_length"
            },
            "code": "\nuint invert_and_check_string_length_001082b3(void)\n\n{\n  uint string_length;\n  \n  string_length = get_string_length();\n  return string_length ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "invert_and_check_string_length_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "process_archive_00114690",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "fileDescriptor",
                "param_4": "statStruct",
                "param_5": "bfdOpenFlags",
                "param_6": "tempDirLength",
                "param_7": "bfdSetFlags",
                "bVar1": "byteVar1",
                "cVar2": "charVar2",
                "cVar3": "charVar3",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "pointerArrayVar",
                "pvVar7": "voidPointerVar",
                "lVar8": "longVar1",
                "puVar9": "pointerVar1",
                "piVar10": "intPointerVar",
                "uVar11": "unknownVar1",
                "uVar12": "unknownVar2",
                "lVar13": "longVar2",
                "puVar14": "bfdFilePointer",
                "pcVar15": "tempDirName",
                "pcVar17": "currentPath",
                "pcVar18": "concatenatedPath",
                "pcVar20": "closeFunc",
                "pcVar23": "innerPath",
                "ppcVar16": "currentFile",
                "ppcVar19": "outputFilePtr",
                "local_1a0": "outputFileVar",
                "local_198": "outputFilePtrVar",
                "local_158": "fileStatStruct",
                "local_c8": "temporaryDirArray",
                "uStack_b0": "chmodValue",
                "lStack_98": "fileSize"
            },
            "code": "\n\n\nvoid processArchive_00114690(undefined8 inputFile,undefined8 outputFile,int fileDescriptor,undefined8 statStruct,\n                 undefined8 bfdOpenFlags,long tempDirLength,undefined8 bfdSetFlags)\n\n{\n  byte byteVar1;\n  char charVar2;\n  char charVar3;\n  int intVar1;\n  int intVar2;\n  char **pointerArrayVar;\n  void *voidPointerVar;\n  long longVar1;\n  undefined8 *pointerVar1;\n  int *intPointerVar;\n  undefined8 unknownVar1;\n  undefined8 unknownVar2;\n  long longVar2;\n  undefined8 *bfdFilePointer;\n  char *tempDirName;\n  char **currentFile;\n  char *currentPath;\n  char *concatenatedPath;\n  undefined8 *__ptr;\n  char **outputFilePtr;\n  code *closeFunc;\n  long lVar21;\n  uint uVar22;\n  char *innerPath;\n  stat *psVar24;\n  bool bVar25;\n  byte bVar26;\n  undefined8 *outputFileVar;\n  long *outputFilePtrVar;\n  stat fileStatStruct;\n  void *temporaryDirArray [3];\n  uint chmodValue;\n  long fileSize;\n  \n  bVar26 = 0;\n  longVar2 = get_file_information_00113f50();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      unknownVar2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_00119ed0(unknownVar2,inputFile);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  bfdFilePointer = (undefined8 *)bfd_openr(inputFile,bfdOpenFlags);\n  if ((bfdFilePointer == (undefined8 *)0x0) || (intVar2 = bfd_stat(bfdFilePointer,statStruct), intVar2 != 0)) {\n    print_bfd_error_message_001126c0(inputFile,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0x40000;\n  }\n  charVar2 = bfd_check_format(bfdFilePointer,2);\n  if (charVar2 != '\\0') {\n    if (tempDirLength == 0) {\n      charVar2 = '\\0';\n      tempDirLength = *(long *)bfdFilePointer[1];\n    }\n    if (fileDescriptor < 0) {\n      outputFileVar = (undefined8 *)bfd_openw(outputFile,tempDirLength);\n    }\n    else {\n      outputFileVar = (undefined8 *)bfd_fdopenw(outputFile,tempDirLength,fileDescriptor);\n    }\n    if (outputFileVar != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        unknownVar2 = *bfdFilePointer;\n        unknownVar1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_00119ed0(unknownVar1,unknownVar2);\n        DAT_00127a30 = 0;\n      }\n      process_data_00114d50(outputFileVar,bfdFilePointer,DAT_001264b4);\n      outputFilePtrVar = outputFileVar + 0x1f;\n      if ((*(byte *)((long)bfdFilePointer + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        unknownVar2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_bfd_error_message_001126c0(0,bfdFilePointer,0,unknownVar2);\n        return;\n      }\n      tempDirName = (char *)create_temporary_directory_0011a0e0(*outputFileVar);\n      if (tempDirName == (char *)0x0) {\n        intPointerVar = __errno_location();\n        tempDirName = strerror(*intPointerVar);\n        unknownVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        execute_and_exit_00119dd0(unknownVar2,tempDirName);\n      }\n      if (DAT_00127a48 == 7) {\n        byteVar1 = *(byte *)((long)bfdFilePointer + 0x49);\n        uVar22 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)bfdFilePointer + 0x49);\n        uVar22 = byteVar1 >> 3 & 1;\n      }\n      bVar25 = _DAT_001264b0 != 0;\n      *(byte *)((long)outputFileVar + 0x49) =\n           byteVar1 & 0x10 | (byte)(uVar22 << 3) | *(byte *)((long)outputFileVar + 0x49) & 0xe7;\n      if (bVar25) {\n        *(uint *)((long)outputFileVar + 0x44) = *(uint *)((long)outputFileVar + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      currentFile = (char **)bfd_openr_next_archived_file(bfdFilePointer,0);\n      charVar3 = bfd_set_format(outputFileVar,*(byte *)(bfdFilePointer + 9) & 7);\n      if (charVar3 == '\\0') {\n        DAT_00127a40 = 1;\n        print_bfd_error_message_001126c0(0,outputFileVar,0,0);\n        remove_and_free_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (currentFile != (char **)0x0))) {\n        concatenatedPath = *currentFile;\n        currentPath = concatenatedPath;\n        if (*concatenatedPath == '/') {\nLAB_0010527d:\n          unknownVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_00119ed0(unknownVar2,concatenatedPath);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*currentPath != '\\0') {\n          innerPath = currentPath;\n          if ((*currentPath == '.') && (innerPath = currentPath + 1, currentPath[1] == '.')) {\n            innerPath = currentPath + 2;\n            if ((currentPath[2] == '\\0') || (currentPath[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*innerPath != '\\0' && (*innerPath != '/')); innerPath = innerPath + 1) {\n          }\n          currentPath = innerPath;\n          if (*innerPath == '/') {\n            copy_archive_contents_001052a2();\n            return;\n          }\n        }\n        concatenatedPath = (char *)concat(tempDirName,&DAT_0011b47d);\n        intVar2 = stat(concatenatedPath,&fileStatStruct);\n        pointerVar1 = __ptr;\n        if (-1 < intVar2) {\n          longVar2 = create_temporary_directory_0011a0e0(concatenatedPath);\n          free(concatenatedPath);\n          if (longVar2 == 0) {\n            intPointerVar = __errno_location();\n            concatenatedPath = strerror(*intPointerVar);\n            unknownVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_00119ed0(unknownVar2,concatenatedPath);\n            goto LAB_00104e93;\n          }\n          pointerVar1 = (undefined8 *)xmalloc(0x18);\n          concatenatedPath = *currentFile;\n          *pointerVar1 = __ptr;\n          pointerVar1[2] = 0;\n          pointerVar1[1] = longVar2;\n          concatenatedPath = (char *)concat(longVar2,&DAT_0011b47d,concatenatedPath);\n        }\n        intVar2 = 0;\n        if (DAT_001279eb != '\\0') {\n          psVar24 = &fileStatStruct;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&psVar24->st_dev = 0;\n            psVar24 = (stat *)((long)psVar24 + (ulong)bVar26 * -8 + 4);\n          }\n          outputFilePtr = (char **)currentFile[0x1d];\n          if ((char **)currentFile[0x1d] == (char **)0x0) {\n            outputFilePtr = currentFile;\n          }\n          intVar2 = (**(code **)(outputFilePtr[1] + 0x1e8))(currentFile,&fileStatStruct);\n          if (intVar2 != 0) {\n            currentPath = *currentFile;\n            unknownVar2 = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_00119ed0(unknownVar2,currentPath);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = concatenatedPath;\n        *__ptr = pointerVar1;\n        __ptr[2] = 0;\n        charVar3 = bfd_check_format(currentFile,1);\n        if (charVar3 == '\\0') {\n          unknownVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_bfd_error_message_001126c0(0,currentFile,0,unknownVar2);\n          outputFilePtr = (char **)bfd_openw(concatenatedPath,tempDirLength);\n          if (outputFilePtr == (char **)0x0) {\nLAB_00104e80:\n            print_bfd_error_message_001126c0(concatenatedPath,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerArrayVar = (char **)currentFile[0x1d];\n          if ((char **)currentFile[0x1d] == (char **)0x0) {\n            pointerArrayVar = currentFile;\n          }\n          intVar1 = (**(code **)(pointerArrayVar[1] + 0x1e8))(currentFile);\n          longVar2 = fileSize;\n          if (intVar1 == 0) {\n            if (fileSize < 0) {\n              get_formatted_string_001125fa(currentFile);\n              unknownVar2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_00119ed0(unknownVar2);\n            }\n            else {\n              intVar1 = bfd_seek(currentFile,0,0);\n              if (intVar1 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  currentPath = *outputFilePtr;\n                  unknownVar2 = get_formatted_string_001125fa(currentFile);\n                  innerPath = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(innerPath,unknownVar2,currentPath);\n                }\n                voidPointerVar = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - lVar21) {\n                  lVar21 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    lVar21 = longVar2;\n                  }\n                  longVar1 = bfd_bread(voidPointerVar,lVar21,currentFile);\n                  pointerArrayVar = currentFile;\n                  if ((lVar21 != longVar1) ||\n                     (longVar1 = bfd_bwrite(voidPointerVar,lVar21,outputFilePtr), pointerArrayVar = outputFilePtr,\n                     lVar21 != longVar1)) {\n                    print_bfd_error_message_001126c0(0,pointerArrayVar,0,0);\n                    free(voidPointerVar);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*outputFilePtr,chmodValue | 0x100);\n                free(voidPointerVar);\n                charVar3 = bfd_close_all_done(outputFilePtr);\n                if (charVar3 == '\\0') {\n                  print_bfd_error_message_001126c0(concatenatedPath,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              unknownVar2 = get_formatted_string_001125fa(currentFile);\n              print_bfd_error_message_0011a110(unknownVar2);\n            }\n          }\n          else {\n            print_bfd_error_message_001126c0(0,currentFile,0,0);\n          }\nLAB_00104f00:\n          charVar3 = bfd_close_all_done(outputFilePtr);\n          if (charVar3 == '\\0') {\n            print_bfd_error_message_001126c0(concatenatedPath,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(concatenatedPath);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (charVar2 == '\\0') {\n            outputFilePtr = (char **)bfd_openw(concatenatedPath,*(undefined8 *)currentFile[1]);\n          }\n          else {\n            outputFilePtr = (char **)bfd_openw(concatenatedPath,tempDirLength);\n          }\n          if (outputFilePtr == (char **)0x0) goto LAB_00104e80;\n          charVar3 = FUNC_00114e50(currentFile,outputFilePtr,bfdSetFlags);\n          if (charVar3 == '\\0') {\n            intVar1 = bfd_get_arch(currentFile);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charVar3 = bfd_close_all_done(outputFilePtr);\n            if (charVar3 == '\\0') {\n              print_bfd_error_message_001126c0(concatenatedPath,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar3 = bfd_close(outputFilePtr);\n          if (charVar3 == '\\0') {\n            print_bfd_error_message_001126c0(concatenatedPath,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (intVar2 == 0)) {\n            set_time_0011a350(concatenatedPath,&fileStatStruct);\n          }\n          longVar2 = bfd_openr(concatenatedPath,tempDirLength);\n          __ptr[2] = longVar2;\n          *outputFilePtrVar = longVar2;\n          outputFilePtrVar = (long *)(longVar2 + 0xf0);\n          outputFilePtr = (char **)bfd_openr_next_archived_file(bfdFilePointer);\n          bfd_close(currentFile);\n          currentFile = outputFilePtr;\n        }\n      }\n      *outputFilePtrVar = 0;\n      voidPointerVar = (void *)xstrdup(*outputFileVar);\n      if (DAT_00127a40 == 0) {\n        closeFunc = bfd_close;\n      }\n      else {\n        closeFunc = bfd_close_all_done;\n      }\n      charVar2 = (*closeFunc)(outputFileVar);\n      if (charVar2 == '\\0') {\n        DAT_00127a40 = 1;\n        print_bfd_error_message_001126c0(voidPointerVar,0,0,0);\n      }\n      free(voidPointerVar);\n      voidPointerVar = (void *)xstrdup(*bfdFilePointer);\n      charVar2 = bfd_close(bfdFilePointer);\n      if (charVar2 == '\\0') {\n        DAT_00127a40 = 1;\n        print_bfd_error_message_001126c0(voidPointerVar,0,0,0);\n      }\n      free(voidPointerVar);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        bfdFilePointer = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = bfdFilePointer;\n      }\n      rmdir(tempDirName);\n      free(tempDirName);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    print_bfd_error_message_001126c0(outputFile,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  charVar2 = bfd_check_format_matches(bfdFilePointer,1,temporaryDirArray);\n  if (charVar2 == '\\0') {\n    intVar2 = bfd_get_error();\n    charVar2 = bfd_check_format_matches(bfdFilePointer,3,&fileStatStruct);\n    if (charVar2 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      print_bfd_error_message_001126c0(inputFile,0,0,0);\n      if (intVar2 == 0xd) {\n        print_matching_formats_0011256b(temporaryDirArray[0]);\n      }\n      if (intVar1 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(fileStatStruct.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(temporaryDirArray[0]);\n    }\n  }\n  if (tempDirLength == 0) {\n    tempDirLength = *(long *)bfdFilePointer[1];\n  }\n  if (fileDescriptor < 0) {\n    longVar2 = bfd_openw(outputFile,tempDirLength);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFile,tempDirLength,fileDescriptor);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  process_data_00114d50(longVar2,bfdFilePointer,DAT_001264b4);\n  charVar2 = FUNC_00114e50(bfdFilePointer,longVar2,bfdSetFlags);\n  if (charVar2 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    charVar2 = bfd_close(longVar2);\n    goto LAB_001147d5;\n  }\n  charVar2 = bfd_close_all_done(longVar2);\nLAB_001147d5:\n  if (charVar2 != '\\x01') {\n    DAT_00127a40 = 1;\n    print_bfd_error_message_001126c0(outputFile,0,0,0);\n    return;\n  }\n  charVar2 = bfd_close(bfdFilePointer);\n  if (charVar2 == '\\0') {\n    DAT_00127a40 = 1;\n    print_bfd_error_message_001126c0(inputFile,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_close",
                "dcgettext",
                "FUN_00113f50",
                "close",
                "strerror",
                "FUN_00104d25",
                "bfd_check_format",
                "bfd_close_all_done",
                "FUN_0011256b",
                "FUN_001126c0",
                "FUN_0011a0e0",
                "free",
                "bfd_stat",
                "bfd_openr_next_archived_file",
                "FUN_00114d50",
                "bfd_check_format_matches",
                "FUN_00119dd0",
                "bfd_openw",
                "bfd_get_error",
                "__errno_location",
                "bfd_set_error",
                "bfd_fdopenw",
                "bfd_set_format",
                "bfd_openr",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_archive_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "initialize_data_structure_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "pointer",
                "uVar2": "returnValue",
                "sVar3": "length",
                "lVar4": "tempValue1",
                "lVar5": "tempValue2",
                "local_8c": "string",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 initializeDataStructure_0010b800(long baseAddress,int size,char flag)\n\n{\n  long *pointer;\n  undefined8 returnValue;\n  size_t length;\n  long tempValue1;\n  long tempValue2;\n  undefined2 string;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    tempValue1 = baseAddress + 0xb8;\n    if (flag != '\\0') {\n      tempValue1 = baseAddress + 0x78;\n    }\n    pointer = (long *)(tempValue1 + (ulong)(size - 1U) * 8);\n    tempValue1 = *pointer;\n    if (tempValue1 != 0) {\n      returnValue = initialize_data_structure_00109cf4(baseAddress,tempValue1,size);\n      return returnValue;\n    }\n    tempValue1 = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = tempValue1 + 1;\n    *pointer = tempValue1;\n    sprintf((char *)&string,\"%ld=r%ld;\",tempValue1,tempValue1);\n    if (flag == '\\0') {\n      tempValue2 = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      length = strlen((char *)&string);\n      sprintf((char *)((long)&string + length),\"%ld;%ld;\",-tempValue2,tempValue2 + -1);\n    }\n    else {\n      length = strlen((char *)&string);\n      *(undefined2 *)((long)&string + length) = 0x3b30;\n      *(undefined *)((long)&string + length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&string + length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&string + length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    returnValue = initialize_data_structure_00109b52(baseAddress,&string,tempValue1,1,size);\n  }\n  else {\n    returnValue = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_00119ed0(returnValue,size);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00109b52",
                "strlen",
                "dcgettext",
                "FUN_00109cf4",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "data_ptr",
                "param_2": "character",
                "param_3": "flag",
                "param_4": "data_array",
                "param_5": "array_size",
                "uVar1": "size_threshold",
                "uVar2": "new_size",
                "cVar3": "result",
                "pcVar4": "extracted_str",
                "sVar5": "str_len",
                "__s": "formatted_str",
                "lVar6": "count",
                "__ptr": "extracted_data",
                "uVar7": "init_result",
                "uVar8": "init_flag",
                "lVar9": "loop_count",
                "uVar10": "cur_size",
                "puVar11": "data_ptr_end",
                "bVar12": "byte_var"
            },
            "code": "\nundefined8 processData_00109ed3(long data_ptr,uint character,undefined4 flag,long *data_array,ulong *array_size)\n\n{\n  ulong size_threshold;\n  ulong new_size;\n  char result;\n  char *extracted_str;\n  size_t str_len;\n  char *formatted_str;\n  long count;\n  void *extracted_data;\n  undefined8 init_result;\n  undefined init_flag;\n  long loop_count;\n  ulong cur_size;\n  undefined *data_ptr_end;\n  byte byte_var;\n  \n  byte_var = 0;\n  count = *(long *)(data_ptr + 0x60);\n  if (count != 0) {\n    size_threshold = *(ulong *)(count + 0x10);\n    if (((long)size_threshold < 1) || (data_array == (long *)0x0)) {\n      init_flag = *(undefined *)(count + 0x1c);\n      extracted_str = (char *)extract_and_free_ptr_00109b2f(data_ptr);\n      str_len = strlen(extracted_str);\n      formatted_str = (char *)xmalloc(str_len + 2);\n      sprintf(formatted_str,\"%c%s\",(ulong)character,extracted_str);\n      free(extracted_str);\n      count = 0;\n    }\n    else {\n      cur_size = *array_size;\n      if (cur_size <= size_threshold) {\n        if (cur_size == 0) {\n          cur_size = 10;\n        }\n        for (; cur_size <= size_threshold; cur_size = cur_size * 2) {\n        }\n        count = xrealloc(*data_array,cur_size * 8);\n        new_size = *array_size;\n        *data_array = count;\n        data_ptr_end = (undefined *)(count + new_size * 8);\n        for (loop_count = (cur_size - new_size) * 8; loop_count != 0; loop_count = loop_count + -1) {\n          *data_ptr_end = 0;\n          data_ptr_end = data_ptr_end + (ulong)byte_var * -2 + 1;\n        }\n        *array_size = cur_size;\n      }\n      count = *(long *)(*data_array + size_threshold * 8);\n      if ((count != 0) && (*(char *)(*(long *)(data_ptr + 0x60) + 0x1c) == '\\0')) {\n        extracted_data = (void *)extract_and_free_ptr_00109b2f(data_ptr);\n        free(extracted_data);\n        init_result = initialize_data_structure_00109cf4(data_ptr,count,flag);\n        return init_result;\n      }\n      count = *(long *)(data_ptr + 0x68);\n      *(long *)(data_ptr + 0x68) = count + 1;\n      extracted_str = (char *)extract_and_free_ptr_00109b2f(data_ptr);\n      str_len = strlen(extracted_str);\n      formatted_str = (char *)xmalloc(str_len + 0x14);\n      sprintf(formatted_str,\"%ld=%c%s\",count,(ulong)character,extracted_str);\n      free(extracted_str);\n      init_flag = 1;\n      *(long *)(*data_array + size_threshold * 8) = count;\n    }\n    result = initialize_data_structure_00109b52(data_ptr,formatted_str,count,init_flag,flag);\n    if (result != '\\0') {\n      free(formatted_str);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109cf4",
                "xrealloc",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0d3",
                "FUN_0010a0bd",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e07c",
                "FUN_0010e7c2",
                "FUN_0010bf86",
                "FUN_0010a377",
                "FUN_0010ee3f",
                "FUN_00114d60",
                "FUN_0010a77a",
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0011378f",
                "FUN_00116852",
                "FUN_00112904",
                "FUN_0010c139",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_00113da9",
                "FUN_0010afd5",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "FUN_001199d0",
                "FUN_0011a480",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_00113b98",
                "FUN_00114460",
                "FUN_00109b52",
                "FUN_0010dac0",
                "FUN_00107880",
                "FUN_00112894",
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_0010e6a8",
                "FUN_00113bfa",
                "FUN_00108c86",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_00116110",
                "FUN_0010a181",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_00114cf0",
                "FUN_001163d0",
                "FUN_0010a2b9",
                "FUN_00116030",
                "FUN_0010a69a",
                "FUN_00112925",
                "FUN_00113d6e",
                "FUN_00114c80",
                "FUN_0010c7a0",
                "FUN_0010e9a0",
                "FUN_0010da0b",
                "FUN_0010e918",
                "FUN_0010c6be",
                "FUN_00113c43",
                "FUN_0010be88",
                "FUN_0010a0e9",
                "FUN_0010bd62",
                "FUN_00114190",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010d882",
                "FUN_00104ad6",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010ba08",
                "FUN_00113e23"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "lVar4": "count",
                "puVar5": "ptr5",
                "pcVar6": "filenamePtr",
                "bVar7": "byteVar",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long count;\n  undefined4 *ptr5;\n  char *filenamePtr;\n  byte byteVar;\n  undefined result [16];\n  \n  byteVar = 0;\n  filenamePtr = \"\";\n  if (filename != (char *)0x0) {\n    filenamePtr = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr5 = ptr2;\n  for (count = 6; count != 0; count = count + -1) {\n    *ptr5 = 0;\n    ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = filenamePtr;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)ptr2;\n  ptr5 = ptr3;\n  for (count = 6; count != 0; count = count + -1) {\n    *ptr5 = 0;\n    ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debugInfo[1] = (long)ptr3;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  result._8_8_ = param4;\n  result._0_8_ = 1;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_bfd_error_message_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = get_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = get_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = get_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = get_formatted_string_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = identify_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_bfd_error_message_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = string_comparison_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = string_comparison_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,process_compiled_data_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_bfd_error_message_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = process_data_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = drop_share_flag_if_output_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = process_data_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = process_data_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_bfd_error_message_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_bfd_error_message_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_bfd_error_message_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_bfd_error_message_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_bfd_error_message_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = extract_and_process_debug_info_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)create_initialized_data_structure_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = process_debug_info_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_and_reset_memory_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_and_reset_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = process_debug_records_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = create_initialized_data_structure_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = process_debug_info_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_and_reset_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_and_reset_memory_00108863();\n      if ((lVar35 != 0) && (cVar11 = process_debug_records_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_and_initialize_data_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = check_and_record_variable_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = process_end_of_block_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_and_initialize_data_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = record_debug_function_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_debug_line_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = end_debug_function_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = extract_section_from_binary_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                execute_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,match_pattern_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,match_pattern_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,match_pattern_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,match_pattern_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = check_selected_item_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_pattern_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = check_pattern_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_pattern_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = check_pattern_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = extract_section_from_binary_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            execute_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = parse_binary_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_bfd_error_message_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,process_relocs_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_binary_00115dc0,param_2);\n    bfd_map_over_sections(param_1,process_and_update_section_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = string_comparison_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_bfd_error_message_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_bfd_error_message_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = string_comparison_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_bfd_error_message_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)process_build_attribute_notes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_bfd_error_message_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "FUN_00107976",
                "dcgettext",
                "bfd_set_format",
                "FUN_001126c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "get_selected_item_index_00115d00",
                "param_1": "itemList",
                "param_2": "dataStruct",
                "uVar1": "selectedItemIndex",
                "lVar2": "result"
            },
            "code": "\nlong getSelectedItemIndex_00115d00(long itemList,long dataStruct)\n\n{\n  uint selectedItemIndex;\n  long result;\n  \n  result = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(dataStruct + 8) + 8) == 5) {\n      if (*(int *)(itemList + 0x28) == *(int *)(*(long *)(dataStruct + 0x110) + 0xd40)) {\n        selectedItemIndex = *(uint *)(itemList + 0x2c);\n        if (selectedItemIndex == 0) {\n          result = 0;\n        }\n        else if ((ulong)selectedItemIndex <\n                 *(ulong *)(*(long *)(dataStruct + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(dataStruct + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278d0 + (ulong)(selectedItemIndex - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "get_selected_item_index_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_and_allocate_data_00113c43",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "lVar1": "data_buffer",
                "plVar2": "data_array",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ninitialize_and_allocate_data_00113c43(long input_1,long input_2,long input_3,long input_4,undefined input_5,\n            undefined8 input_6)\n\n{\n  long data_buffer;\n  long *data_array;\n  undefined result [16];\n  \n  if ((input_1 != 0) && (input_2 != 0)) {\n    data_buffer = initialize_data_00112904(0x10,0);\n    if (data_buffer != 0) {\n      data_array = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)data_array + 0x21) = 0;\n      *data_array = input_1;\n      *(undefined4 *)((long)data_array + 0x24) = 0;\n      data_array[1] = input_2;\n      data_array[2] = input_3;\n      data_array[3] = input_4;\n      *(undefined *)(data_array + 4) = input_5;\n      *(long **)(data_buffer + 0x10) = data_array;\n      goto LAB_00113caa;\n    }\n  }\n  data_buffer = 0;\nLAB_00113caa:\n  result._8_8_ = input_6;\n  result._0_8_ = data_buffer;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_data_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "check_and_record_variable_00112a33",
                "param_1": "param",
                "param_2": "record",
                "param_3": "param3",
                "param_4": "type",
                "param_5": "variable",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "lVar2": "length",
                "plVar3": "ptr",
                "record_variable_0010c05d": "record_variable",
                "record_parameter_0010bd62": "record_parameter",
                "debug_tag_type_checker_0010c6be": "debug_tag_type_checker",
                "allocate_and_initialize_slots_0010da0b": "allocate_and_initialize_slots",
                "initialize_debug_name_type_0010c218": "initialize_debug_name_type"
            },
            "code": "\nbool check_and_record_variable_00112a33(undefined8 param,long record,undefined8 param3,byte type,undefined8 variable\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long length;\n  long *ptr;\n  \n  if (type < 0x12) {\n    if (type != 0) {\n      switch(type) {\n      case 1:\n        result = record_variable(variable,*(undefined8 *)(record + 8),param6,4,\n                             *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = record_variable(variable,*(undefined8 *)(record + 8),param6,(param7 & 0xff) + 2,\n                             *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = record_variable(variable,*(undefined8 *)(record + 8),param6,5,\n                             *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = record_parameter(variable,*(undefined8 *)(record + 8),param6,1,\n                             *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        length = debug_tag_type_checker(variable,*(undefined8 *)(record + 8));\n        if (length == 0) {\n          return false;\n        }\n        ptr = (long *)allocate_and_initialize_slots(param,param3);\n        *ptr = length;\n        break;\n      case 0xd:\n        length = initialize_debug_name_type(variable,*(undefined8 *)(record + 8));\n        return length != 0;\n      case 0x11:\n        result = record_parameter(variable,*(undefined8 *)(record + 8),param6,2,\n                             *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (type == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = record_variable(variable,*(undefined8 *)(record + 8),param6,1,\n                         *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_and_record_variable_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "convert_xcoff_type_to_debug_type_0010c2d2",
                "param_1": "unknown_value",
                "param_2": "base_address",
                "param_3": "type_info",
                "uVar1": "type_code",
                "pcVar2": "type_name",
                "uVar3": "type_value",
                "lVar4": "debug_type",
                "plVar5": "file_info",
                "uVar6": "index"
            },
            "code": "\n\n\nlong convertXCOFFTypeToDebugType_0010c2d2(undefined8 unknown_value,long base_address,int *type_info)\n\n{\n  uint type_code;\n  char *type_name;\n  undefined8 type_value;\n  long debug_type;\n  long *file_info;\n  uint index;\n  \n  if ((*type_info == 0) && (type_code = type_info[1], (int)type_code < 0)) {\n    index = ~type_code;\n    if (index < 0x22) {\n      debug_type = *(long *)(base_address + 0x90 + (ulong)index * 8);\n      if (debug_type == 0) {\n        switch(index) {\n        case 1:\n          type_value = set_param_value_00113dfe(1,0);\n          type_name = \"char\";\n          break;\n        case 2:\n          type_value = set_param_value_00113dfe(2,0);\n          type_name = \"short\";\n          break;\n        case 3:\n          type_value = set_param_value_00113dfe(4,0);\n          type_name = \"long\";\n          break;\n        case 4:\n          type_value = set_param_value_00113dfe(1,1);\n          type_name = \"unsigned char\";\n          break;\n        case 5:\n          type_value = set_param_value_00113dfe(1,0);\n          type_name = \"signed char\";\n          break;\n        case 6:\n          type_value = set_param_value_00113dfe(2,1);\n          type_name = \"unsigned short\";\n          break;\n        case 7:\n          type_value = set_param_value_00113dfe(4,1);\n          type_name = \"unsigned int\";\n          break;\n        case 8:\n          type_value = set_param_value_00113dfe(4,1);\n          type_name = \"unsigned\";\n          break;\n        case 9:\n          type_value = set_param_value_00113dfe(4,1);\n          type_name = \"unsigned long\";\n          break;\n        case 10:\n          type_value = initialize_data_00113e17();\n          type_name = \"void\";\n          break;\n        case 0xb:\n          type_value = initialize_data_00113df2(4);\n          type_name = \"float\";\n          break;\n        case 0xc:\n          type_value = initialize_data_00113df2(8);\n          type_name = \"double\";\n          break;\n        case 0xd:\n          type_value = initialize_data_00113df2(8);\n          type_name = \"long double\";\n          break;\n        case 0xe:\n          type_value = set_param_value_00113dfe(4,0);\n          type_name = \"integer\";\n          break;\n        case 0xf:\n          type_value = initialize_data_00112904(6,4);\n          type_name = \"boolean\";\n          break;\n        case 0x10:\n          type_value = initialize_data_00113df2(4);\n          type_name = \"short real\";\n          break;\n        case 0x11:\n          type_value = initialize_data_00113df2(8);\n          type_name = \"real\";\n          break;\n        case 0x12:\n          type_name = \"stringptr\";\n          type_value = 0;\n          break;\n        case 0x13:\n          type_value = set_param_value_00113dfe(1,1);\n          type_name = \"character\";\n          break;\n        case 0x14:\n          type_value = initialize_data_00112904(6,1);\n          type_name = \"logical*1\";\n          break;\n        case 0x15:\n          type_value = initialize_data_00112904(6,2);\n          type_name = \"logical*2\";\n          break;\n        case 0x16:\n          type_value = initialize_data_00112904(6,4);\n          type_name = \"logical*4\";\n          break;\n        case 0x17:\n          type_value = initialize_data_00112904(6,4);\n          type_name = \"logical\";\n          break;\n        case 0x18:\n          type_value = initialize_data_00112904(5,8);\n          type_name = \"complex\";\n          break;\n        case 0x19:\n          type_value = initialize_data_00112904(5,0x10);\n          type_name = \"double complex\";\n          break;\n        case 0x1a:\n          type_value = set_param_value_00113dfe(1,0);\n          type_name = \"integer*1\";\n          break;\n        case 0x1b:\n          type_value = set_param_value_00113dfe(2,0);\n          type_name = \"integer*2\";\n          break;\n        case 0x1c:\n          type_value = set_param_value_00113dfe(4,0);\n          type_name = \"integer*4\";\n          break;\n        case 0x1d:\n          type_value = set_param_value_00113dfe(2,0);\n          type_name = \"wchar\";\n          break;\n        case 0x1e:\n          type_value = set_param_value_00113dfe(8,0);\n          type_name = \"long long\";\n          break;\n        case 0x1f:\n          type_value = set_param_value_00113dfe(8,1);\n          type_name = \"unsigned long long\";\n          break;\n        case 0x20:\n          type_value = initialize_data_00112904(6,8);\n          type_name = \"logical*8\";\n          break;\n        case 0x21:\n          type_value = set_param_value_00113dfe(8,0);\n          type_name = \"integer*8\";\n          break;\n        default:\n          type_value = set_param_value_00113dfe(4,0);\n          type_name = \"int\";\n        }\n        debug_type = initialize_debug_name_type_0010c218(unknown_value,type_name,type_value);\n        *(long *)(base_address + 0x90 + (ulong)index * 8) = debug_type;\n        return debug_type;\n      }\n      return debug_type;\n    }\n    type_name = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,type_name,(ulong)type_code);\n  }\n  else {\n    file_info = (long *)extract_file_info_00109022(base_address);\n    if (file_info != (long *)0x0) {\n      if (*file_info == 0) {\n        debug_type = create_data_entry_00113e23(file_info,0);\n        return debug_type;\n      }\n      return *file_info;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00113e23",
                "FUN_00112904",
                "FUN_00109022"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "convert_xcoff_type_to_debug_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "process_binary_file_0010e07c",
                "param_2": "recordPointers",
                "lVar1": "sectionHeader",
                "lVar2": "symbolTableEntry",
                "lVar3": "recordCounter",
                "cVar4": "result",
                "uVar5": "errorNumber",
                "__ptr": "memoryBlock",
                "uVar6": "returnValue",
                "uVar7": "errorMessage",
                "puVar8": "recordPointer",
                "pcVar9": "errorFormat",
                "puVar10": "auxiliaryData",
                "uVar11": "auxiliaryValue",
                "lVar12": "recordIndex",
                "iVar13": "bytesOffset",
                "iVar14": "allocationSize",
                "local_a8": "local_1",
                "uStack_a4": "local_2",
                "uStack_a0": "local_3",
                "uStack_9c": "local_4",
                "local_88": "symbolName",
                "local_6a": "symbolIndex",
                "local_68": "symbolType",
                "local_67": "symbolAux"
            },
            "code": "\nundefined8\nprocessBinaryFile_0010e07c(undefined8 param_1,long *recordPointers,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long sectionHeader;\n  long symbolTableEntry;\n  long recordCounter;\n  char result;\n  undefined4 errorNumber;\n  void *memoryBlock;\n  undefined8 returnValue;\n  undefined8 errorMessage;\n  undefined4 *recordPointer;\n  char *errorFormat;\n  undefined *auxiliaryData;\n  uint auxiliaryValue;\n  long recordIndex;\n  int bytesOffset;\n  int allocationSize;\n  undefined4 local_1;\n  undefined4 local_2;\n  undefined4 local_3;\n  undefined4 local_4;\n  undefined symbolName [30];\n  undefined2 symbolIndex;\n  byte symbolType;\n  byte symbolAux;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  allocationSize = 10;\n  recordIndex = 0;\n  sectionHeader = *(long *)(param_5 + 0x18);\n  memoryBlock = (void *)xmalloc(0x50);\n  while ((recordPointers[3] < sectionHeader && (recordPointers[2] < recordPointers[1]))) {\n    symbolTableEntry = *(long *)(*recordPointers + recordPointers[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbolTableEntry,symbolName);\n    if (result == '\\0') {\n      errorNumber = bfd_get_error();\n      returnValue = bfd_errmsg(errorNumber);\n      errorFormat = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      errorMessage = dcgettext(0,errorFormat,5);\n      print_error_message_00119ed0(errorMessage,returnValue);\n      free(memoryBlock);\n      return 0;\n    }\n    recordCounter = recordPointers[3];\n    auxiliaryData = (undefined *)0x0;\n    recordPointers[2] = recordPointers[2] + 1;\n    recordPointers[3] = recordCounter + 1 + (ulong)symbolAux;\n    if (symbolAux != 0) {\n      auxiliaryData = local_60;\n      result = bfd_coff_get_auxent(param_1,symbolTableEntry,0,auxiliaryData);\n      if (result == '\\0') {\n        errorNumber = bfd_get_error();\n        returnValue = bfd_errmsg(errorNumber);\n        errorFormat = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbolType == 0x12) {\n      auxiliaryValue = (uint)local_56;\n      bytesOffset = (int)*(undefined8 *)(symbolTableEntry + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbolTableEntry + 0x20) + 0x30);\n    }\n    else {\n      if (symbolType < 0x13) {\n        if ((symbolType == 8) || (symbolType == 0xb)) {\n          auxiliaryValue = 0;\n          bytesOffset = ((int)*(undefined8 *)(symbolTableEntry + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbolTableEntry + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbolType == 0x66) break;\n      auxiliaryValue = 0;\n      bytesOffset = 0;\n    }\nLAB_0010e214:\n    errorMessage = parse_and_initialize_data_0010dac0(param_1,recordPointers,param_3,recordCounter,symbolIndex,auxiliaryData,1);\n    returnValue = *(undefined8 *)(symbolTableEntry + 8);\n    recordPointer = (undefined4 *)xmalloc(0x20);\n    local_1 = (undefined4)returnValue;\n    local_2 = (undefined4)((ulong)returnValue >> 0x20);\n    local_3 = (undefined4)errorMessage;\n    local_4 = (undefined4)((ulong)errorMessage >> 0x20);\n    *(undefined8 *)(recordPointer + 5) = 0;\n    recordPointer[6] = bytesOffset;\n    recordPointer[7] = auxiliaryValue;\n    recordPointer[4] = 0;\n    *recordPointer = local_1;\n    recordPointer[1] = local_2;\n    recordPointer[2] = local_3;\n    recordPointer[3] = local_4;\n    if (allocationSize <= (int)recordIndex + 1) {\n      allocationSize = allocationSize + 10;\n      memoryBlock = (void *)xrealloc(memoryBlock,(long)allocationSize << 3,recordPointer,0,param_6);\n    }\n    *(undefined4 **)((long)memoryBlock + recordIndex * 8) = recordPointer;\n    recordIndex = recordIndex + 1;\n  }\n  *(undefined8 *)((long)memoryBlock + (long)(int)recordIndex * 8) = 0;\n  returnValue = initialize_and_allocate_memory_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),memoryBlock);\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xmalloc",
                "FUN_00113da9",
                "dcgettext",
                "FUN_0010dac0",
                "bfd_coff_get_auxent",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "process_binary_file_0010e07c",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_and_allocate_memory_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_app_001082c3"
            },
            "code": "\nundefined8 initializeApp_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "initialize_app_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "param_1": "filename",
                "param_3": "data",
                "param_2": "hashTable",
                "iVar1": "lineNumber",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "translatedString",
                "__n": "fileSize",
                "__ptr": "fileData",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "hashTableSlot",
                "pbVar7": "currentLine",
                "bVar8": "currentChar",
                "pbVar9": "nextChar",
                "pbVar10": "currentCharPtr",
                "pbVar11": "nextCharPtr",
                "pbVar12": "lineStartPtr"
            },
            "code": "\nvoid readAndProcessFile_00114460(char *filename,undefined8 hashTable,byte **data)\n\n{\n  int lineNumber;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 translatedString;\n  size_t fileSize;\n  byte *fileData;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **hashTableSlot;\n  byte *currentLine;\n  byte currentChar;\n  byte *nextChar;\n  byte *currentCharPtr;\n  byte *nextCharPtr;\n  byte *lineStartPtr;\n  \n  fileSize = get_file_information_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    fileData = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(filename,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      translatedString = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      execute_and_exit_00119dd0(translatedString,filename,errorString);\n    }\n    bytesRead = fread(fileData,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (lineNumber = ferror(fileStream), lineNumber != 0)) {\n      translatedString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      execute_and_exit_00119dd0(translatedString,filename);\n    }\n    lineNumber = 1;\n    fclose(fileStream);\n    *(undefined2 *)(fileData + fileSize) = 10;\n    currentChar = *fileData;\n    lineStartPtr = fileData;\n    while (currentCharPtr = lineStartPtr, currentChar != 0) {\n      for (; currentChar = *currentCharPtr, nextCharPtr = currentCharPtr, currentChar != 10; currentCharPtr = currentCharPtr + 1) {\n        if ((char)currentChar < '\\v') {\n          if (currentChar == 0) {\n            nextChar = currentCharPtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentChar == 0xd) {\n            *currentCharPtr = 0;\n            nextChar = currentCharPtr + 1;\n            if (currentCharPtr[1] == 10) {\n              nextChar = currentCharPtr + 2;\n              nextCharPtr = currentCharPtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentChar == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentCharPtr = 0;\n      if (currentCharPtr[1] == 0xd) {\n        nextCharPtr = currentCharPtr + 1;\n        nextChar = currentCharPtr + 2;\n      }\n      else {\n        nextChar = currentCharPtr + 1;\n      }\nLAB_00114553:\n      currentChar = *lineStartPtr;\n      while ((currentChar == 0x20 || (currentCharPtr = lineStartPtr, currentChar == 9))) {\n        currentCharPtr = lineStartPtr + 1;\n        lineStartPtr = lineStartPtr + 1;\n        currentChar = *currentCharPtr;\n      }\n      do {\n        if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n        if (currentChar == 0) goto LAB_00114599;\n        currentChar = currentCharPtr[1];\n        currentCharPtr = currentCharPtr + 1;\n      } while ((currentChar != 0x20) && (currentChar != 9));\n      if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentChar = currentCharPtr[1];\n        if ((((((currentChar == 9) || (currentChar == 0x20)) &&\n              ((currentChar = currentCharPtr[2], currentChar == 9 || (currentChar == 0x20)))) &&\n             ((currentChar = currentCharPtr[3], currentChar == 9 || (currentChar == 0x20)))) &&\n            ((currentChar = currentCharPtr[4], currentChar == 9 || (currentChar == 0x20)))) &&\n           ((currentChar = currentCharPtr[5], currentChar == 9 || (currentChar == 0x20)))) {\n          currentChar = currentCharPtr[6];\n          currentLine = currentCharPtr + 6;\n          if ((currentChar == 9) || (currentChar == 0x20)) {\n            do {\n              do {\n                currentChar = currentLine[1];\n                currentLine = currentLine + 1;\n              } while (currentChar == 0x20);\n            } while (currentChar == 9);\n          }\n        }\n        if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) {\n          translatedString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message_00119ed0(translatedString,filename,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentCharPtr = 0;\n      if (lineStartPtr < currentCharPtr) {\n        hashTableSlot = (byte **)htab_find_slot(hashTable,lineStartPtr,1);\n        *hashTableSlot = lineStartPtr;\n      }\n      lineNumber = lineNumber + 1;\n      lineStartPtr = nextChar;\n      currentChar = nextCharPtr[1];\n    }\n    *data = fileData;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "strerror",
                "xmalloc",
                "fclose",
                "__errno_location",
                "dcgettext",
                "ferror",
                "fopen",
                "fread",
                "FUN_00113f50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "create_connection_0010a94e",
                "param_1": "connectionManager",
                "param_2": "serverAddress",
                "param_3": "username",
                "param_4": "connectionType",
                "cVar1": "isConnected",
                "__s": "password",
                "sVar3": "serverAddressLen",
                "sVar4": "usernameLen",
                "sVar5": "passwordLen",
                "sVar6": "connectionTypeLen",
                "pcVar7": "connectionString",
                "uVar8": "result",
                "pcVar9": "connectionStatus",
                "lVar2": "connectionInfo"
            },
            "code": "\nundefined8 createConnection_0010a94e(long connectionManager,char *serverAddress,char *username,int connectionType)\n\n{\n  char isConnected;\n  long connectionInfo;\n  char *password;\n  size_t serverAddressLen;\n  size_t usernameLen;\n  size_t passwordLen;\n  size_t connectionTypeLen;\n  char *connectionString;\n  undefined8 result;\n  char *connectionStatus;\n  \n  isConnected = *(char *)(*(long *)(connectionManager + 0x60) + 0x1c);\n  password = (char *)extract_and_free_ptr_00109b2f();\n  connectionString = *(char **)(*(long *)(connectionManager + 0x60) + 0x20);\n  if (connectionString == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    serverAddressLen = strlen(connectionString);\n    usernameLen = strlen(serverAddress);\n    passwordLen = strlen(password);\n    connectionTypeLen = strlen(username);\n    connectionString = (char *)xmalloc(serverAddressLen + 10 + usernameLen + passwordLen + connectionTypeLen);\n    if (connectionType == 1) {\n      connectionStatus = \"/1\";\n    }\n    else {\n      connectionStatus = \"/0\";\n      if ((connectionType != 2) && (connectionStatus = \"\", connectionType != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(connectionString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(connectionManager + 0x60) + 0x20),serverAddress,connectionStatus,\n            password,username,*(long *)(connectionManager + 0x60));\n    free(*(void **)(*(long *)(connectionManager + 0x60) + 0x20));\n    connectionInfo = *(long *)(connectionManager + 0x60);\n    *(char **)(connectionInfo + 0x20) = connectionString;\n    if (isConnected != '\\0') {\n      *(undefined *)(connectionInfo + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)connectionInfo >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_connection_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_real_type_and_value_00113b1e",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "requested_value",
                "auVar1": "result1",
                "piVar2": "ptr_real_type_info",
                "uVar3": "real_type_value",
                "auVar4": "result2"
            },
            "code": "\nundefined  [16] extract_real_type_and_value_00113b1e(long input_value,undefined8 unused_param,ulong default_value,undefined8 requested_value)\n\n{\n  undefined result1 [16];\n  int *ptr_real_type_info;\n  undefined8 real_type_value;\n  undefined result2 [16];\n  \n  if (input_value != 0) {\n    ptr_real_type_info = (int *)find_real_type_00112b6e(input_value,0);\n    if ((ptr_real_type_info == (int *)0x0) || (3 < *ptr_real_type_info - 7U)) {\n      real_type_value = 0;\n    }\n    else {\n      real_type_value = **(undefined8 **)(ptr_real_type_info + 4);\n    }\n    result2._8_8_ = requested_value;\n    result2._0_8_ = real_type_value;\n    return result2;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = default_value;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_real_type_and_value_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "process_data_0010a0e9",
                "param_1": "data_ptr",
                "param_2": "param_2_val",
                "param_3": "param_3_val",
                "uVar1": "data_value",
                "uVar2": "result",
                "__s": "input_string",
                "sVar3": "input_length",
                "__s_00": "processed_string"
            },
            "code": "\nundefined4 process_data_0010a0e9(long data_ptr,undefined8 param_2_val,undefined8 param_3_val)\n\n{\n  undefined data_value;\n  undefined4 result;\n  char *input_string;\n  size_t input_length;\n  char *processed_string;\n  \n  data_value = *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(data_ptr + 0x60) + 0x18);\n  input_string = (char *)extract_and_free_ptr_00109b2f();\n  input_length = strlen(input_string);\n  processed_string = (char *)xmalloc(input_length + 100);\n  sprintf(processed_string,\"r%s;%ld;%ld;\",input_string,param_2_val,param_3_val);\n  free(input_string);\n  result = initialize_data_structure_00109b52(data_ptr,processed_string,0,data_value,result);\n  if ((char)result != '\\0') {\n    free(processed_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "process_data_and_set_flag_00114c20",
                "param_1": "data",
                "cVar1": "isMatch",
                "pcVar2": "ptrNextChar"
            },
            "code": "\nvoid processDataAndSetFlag_00114c20(long data)\n\n{\n  char isMatch;\n  char *ptrNextChar;\n  \n  process_data_00114190(data,1,1);\n  isMatch = string_comparison_00113fb0(data,&DAT_0011b499);\n  if (isMatch != '\\0') {\n    ptrNextChar = (char *)(data + 5);\n    if (*(char *)(data + 4) != 'a') {\n      ptrNextChar = (char *)(data + 4);\n    }\n    if (*ptrNextChar != '\\0') {\n      process_data_00114190(ptrNextChar,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_data_and_set_flag_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "validate_selected_item_00115f50",
                "param_1": "selectedItemId",
                "param_2": "selectedItemArray",
                "param_3": "flag",
                "__s1": "selectedItem",
                "uVar1": "comparisonResult",
                "uVar2": "extraValue",
                "extraout_EDX": "extraOutValue",
                "plVar3": "linkedListItem",
                "auVar4": "comparisonResultArray"
            },
            "code": "\nuint validateSelectedItem_00115f50(long selectedItemId,char **selectedItemArray,char flag)\n\n{\n  char *selectedItem;\n  uint comparisonResult;\n  undefined4 extraValue;\n  undefined4 extraOutValue;\n  long *linkedListItem;\n  undefined comparisonResultArray [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  comparisonResultArray = check_selected_item_001159d0(selectedItemArray);\n  if (comparisonResultArray[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      selectedItem = *selectedItemArray;\n      linkedListItem = DAT_001279d8;\n      do {\n        comparisonResult = strcmp(selectedItem,(char *)linkedListItem[1]);\n        comparisonResultArray._4_4_ = 0;\n        comparisonResultArray._0_4_ = comparisonResult;\n        comparisonResultArray._8_4_ = extraOutValue;\n        if (comparisonResult == 0) {\n          return 1;\n        }\n        linkedListItem = (long *)*linkedListItem;\n      } while (linkedListItem != (long *)0x0);\n    }\n    extraValue = comparisonResultArray._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (comparisonResultArray._8_4_ = extraValue, comparisonResultArray._0_8_ = *(long *)(selectedItemId + 8),\n         *(int *)(*(long *)(selectedItemId + 8) + 8) != 5)) ||\n        ((comparisonResultArray._0_8_ = (ulong)selectedItemArray[0x1a], *(int *)(selectedItemArray[0x1a] + 4) != 7 ||\n         (comparisonResultArray = string_comparison_00113fb0(*selectedItemArray,\".gnu.build.attributes\"), comparisonResultArray[0] == '\\0')))) &&\n       ((*(byte *)((long)selectedItemArray + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(comparisonResultArray._1_7_,selectedItemArray[8] == (char *)0x0) |\n             CONCAT31(comparisonResultArray._9_3_,selectedItemArray[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_001159d0",
                "FUN_00113fb0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00116110",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "validate_selected_item_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "reverse_bytes_and_exit_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid reverseBytesAndExit_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 sectionLength;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  execute_and_exit_00119dd0(errorMessage,sectionValue,sectionLength);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "reverse_bytes_and_exit_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "FUN_0011a2e0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "initialize_data_structure_0010b948",
                "param_1": "dataStructurePtr",
                "param_2": "size",
                "lVar1": "ptr1",
                "cVar2": "result",
                "__ptr": "ptr2",
                "uVar3": "size64",
                "uVar4": "sizeMinusOne",
                "local_5a": "formatString"
            },
            "code": "\nvoid initializeDataStructure_0010b948(long dataStructurePtr,uint size)\n\n{\n  long ptr1;\n  char result;\n  void *ptr2;\n  ulong size64;\n  uint sizeMinusOne;\n  char formatString [50];\n  \n  sizeMinusOne = size - 1;\n  size64 = (ulong)size;\n  if ((sizeMinusOne < 0x10) && (ptr1 = *(long *)(dataStructurePtr + 0xf8 + (ulong)sizeMinusOne * 8), ptr1 != 0)) {\n    initialize_data_structure_00109cf4(dataStructurePtr,ptr1,size64);\n    return;\n  }\n  result = initialize_data_structure_0010b800(dataStructurePtr,4,0);\n  if (result != '\\0') {\n    ptr2 = (void *)extract_and_free_ptr_00109b2f(dataStructurePtr);\n    ptr1 = *(long *)(dataStructurePtr + 0x68);\n    *(long *)(dataStructurePtr + 0x68) = ptr1 + 1;\n    if (sizeMinusOne < 0x10) {\n      *(long *)(dataStructurePtr + 0xf8 + (ulong)sizeMinusOne * 8) = ptr1;\n    }\n    sprintf(formatString,\"%ld=r%s;%u;0;\",ptr1,ptr2,size64);\n    free(ptr2);\n    initialize_data_structure_00109b52(dataStructurePtr,formatString,ptr1,1,size64);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010b800",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_0010e07c",
                "FUN_00119970",
                "FUN_00114690",
                "FUN_00116490",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "FUN_00108200",
                "FUN_0010ee3f",
                "FUN_0010e2f0",
                "FUN_00115b70",
                "FUN_00113f50",
                "FUN_0010be1a",
                "FUN_00108d9a",
                "FUN_00109a32",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0010808f",
                "FUN_0011256b",
                "FUN_00104966",
                "FUN_001086af",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_00119f70",
                "FUN_00108375",
                "FUN_00104920",
                "FUN_0010bc80",
                "FUN_00112b6e",
                "FUN_001199d0",
                "FUN_0010b0fa",
                "FUN_0010543c",
                "FUN_00105828",
                "FUN_00104a35",
                "FUN_00114460",
                "FUN_00107976",
                "FUN_0010551d",
                "FUN_0010bf20",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_001152b6",
                "FUN_00114dc7",
                "FUN_001053b5",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_0010882c",
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_0010e6a8",
                "FUN_00112996",
                "FUN_0010871c",
                "FUN_001083de",
                "FUN_00108808",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_00108fb9",
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_0010da0b",
                "FUN_0010c892",
                "FUN_0010b800",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_0010c2d2",
                "FUN_00108072",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010bd62",
                "FUN_00108179",
                "FUN_00114190",
                "FUN_00108916",
                "FUN_0010914e",
                "FUN_00112c1f",
                "FUN_00104ad6",
                "FUN_0010827b",
                "FUN_00108a2a",
                "FUN_00114e00",
                "FUN_0010c218",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_real_type_00112b6e",
                "param_1": "inputList",
                "param_2": "debugInfoList",
                "iVar1": "listSize",
                "uVar2": "value",
                "__format": "formatString",
                "piVar3": "result",
                "plVar4": "currentDebugInfo",
                "bVar5": "isCircular",
                "local_18": "tempDebugInfoList",
                "local_10": "tempInputList"
            },
            "code": "\n\n\nint * findRealType_00112b6e(int *inputList,long *debugInfoList)\n\n{\n  int listSize;\n  undefined8 value;\n  char *formatString;\n  int *result;\n  long *currentDebugInfo;\n  bool isCircular;\n  long *tempDebugInfoList;\n  int *tempInputList;\n  \n  listSize = *inputList;\n  if ((listSize != 1) && (1 < listSize - 0x16U)) {\n    return inputList;\n  }\n  currentDebugInfo = debugInfoList;\n  while (currentDebugInfo != (long *)0x0) {\n    if ((inputList == (int *)currentDebugInfo[1]) ||\n       (isCircular = currentDebugInfo == (long *)*currentDebugInfo, currentDebugInfo = (long *)*currentDebugInfo, isCircular)) {\n      value = extract_value_from_binary_001129f4(inputList,\"debug_get_real_type: circular debug information for %s\\n\");\n      formatString = (char *)dcgettext(0);\n      fprintf(_stderr,formatString,value);\n      return (int *)0x0;\n    }\n  }\n  tempDebugInfoList = debugInfoList;\n  tempInputList = inputList;\n  if (listSize - 0x16U < 2) {\n    result = (int *)findRealType_00112b6e((*(undefined8 **)(inputList + 4))[1],&tempDebugInfoList);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(inputList + 4);\n  if (inputList == result) {\n    return inputList;\n  }\n  if (result == (int *)0x0) {\n    return inputList;\n  }\n  result = (int *)findRealType_00112b6e(result,&tempDebugInfoList);\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_001129f4",
                "dcgettext",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010922b",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "extracted_data",
                "param_4": "flag",
                "param_5": "mask",
                "param_6": "condition1",
                "param_7": "condition2",
                "uVar1": "result",
                "__s": "str_ptr",
                "__s_00": "new_str_ptr",
                "sVar2": "str_length",
                "cVar3": "char_flag"
            },
            "code": "\nundefined4\nprocess_data_0010a83e(long data_ptr,undefined8 data_size,ulong extracted_data,undefined flag,ulong mask,\n            byte condition1,byte condition2)\n\n{\n  undefined4 result;\n  char *str_ptr;\n  char *new_str_ptr;\n  size_t str_length;\n  char char_flag;\n  \n  if (((condition2 ^ 1) & condition1) == 0) {\n    str_ptr = (char *)0x0;\n    char_flag = '\\0';\n  }\n  else {\n    char_flag = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    str_ptr = (char *)extract_and_free_ptr_00109b2f();\n    mask = mask & 0xffffffff;\n    extracted_data = extracted_data & 0xffffffff;\n  }\n  result = initialize_data_structure_0010a69a(data_ptr,data_size,extracted_data,flag,mask);\n  if ((char)result != '\\0') {\n    if (condition1 == 0) {\n      return result;\n    }\n    if (condition2 == 0) {\n      if (str_ptr == (char *)0x0) {\n        return 0;\n      }\n      str_length = strlen(str_ptr);\n      new_str_ptr = (char *)xmalloc(str_length + 3);\n      sprintf(new_str_ptr,\"~%%%s\",str_ptr);\n      free(str_ptr);\n      if (char_flag != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      new_str_ptr = (char *)xmalloc(0x14);\n      sprintf(new_str_ptr,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = new_str_ptr;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010a69a",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_data_structure_00113d6e",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "lVar1": "dataStructure",
                "puVar2": "newData",
                "initialize_data_00112904": "initializeData",
                "xmalloc": "allocateMemory"
            },
            "code": "\nlong createDataStructure_00113d6e(undefined8 inputValue1,undefined8 inputValue2)\n\n{\n  long dataStructure;\n  undefined8 *newData;\n  \n  dataStructure = initializeData(0xb,0);\n  if (dataStructure != 0) {\n    newData = (undefined8 *)xmalloc(0x10);\n    *newData = inputValue1;\n    newData[1] = inputValue2;\n    *(undefined8 **)(dataStructure + 0x10) = newData;\n  }\n  return dataStructure;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e07c",
                "FUN_0010e7c2",
                "FUN_00114690",
                "FUN_0010a377",
                "FUN_0010ee3f",
                "FUN_0010c1c6",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_0011256b",
                "FUN_00116852",
                "FUN_00109b2f",
                "FUN_00116b90",
                "FUN_0010afd5",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_00108466",
                "FUN_001199d0",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010e453",
                "FUN_00104a35",
                "FUN_0010551d",
                "FUN_0010dac0",
                "FUN_00108863",
                "FUN_00107880",
                "FUN_0011173a",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_00116110",
                "FUN_0010a181",
                "FUN_00104ea2",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_001163d0",
                "FUN_0010a2b9",
                "FUN_00116030",
                "FUN_0010e9a0",
                "FUN_001081e9",
                "FUN_0010e918",
                "FUN_001088ae",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00114b84",
                "FUN_0010c95e",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "process_data_00114d50",
                "param_1": "dataPointer1",
                "param_2": "dataPointer2",
                "param_3": "status",
                "byte": "byteValue"
            },
            "code": "\nvoid processData_00114d50(long dataPointer1,long dataPointer2,uint status)\n\n{\n  if (*(int *)(*(long *)(dataPointer1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((status == 2) && (*(int *)(*(long *)(dataPointer2 + 8) + 8) == 2)) {\n    status = (uint)*(byteValue *)(*(long *)(*(long *)(dataPointer2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(dataPointer1 + 8) + 0x380) + 0x78))(dataPointer1,status != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "process_data_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011283f",
                "FUN_00113f50",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_file_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "data",
                "pcVar2": "localizedText"
            },
            "code": "\nvoid printFileUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 data;\n  char *localizedText;\n  \n  data = DAT_00127600;\n  localizedText = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,localizedText,data);\n  localizedText = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,localizedText);\n  print_supported_targets_00104a35(DAT_00127600,outputFile);\n  if (exitCode == 0) {\n    localizedText = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedText,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "FUN_00104a35",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_file_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_bfd_error_message_001126c0",
                "param_1": "bfdErrorCode",
                "param_9": "errorMessage",
                "param_10": "errorLength",
                "param_11": "errorObject",
                "param_12": "formatString"
            },
            "code": "\n\n\nvoid printBFDErrorMessage_001126c0(undefined4 bfdErrorCode,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 long errorMessage,long errorLength,long *errorObject,char *formatString,undefined8 bfdErrorCode3,\n                 undefined8 bfdErrorCode4)\n\n{\n  char in_AL;\n  int iVar1;\n  undefined8 uVar2;\n  undefined4 local_100;\n  undefined4 local_fc;\n  undefined *local_f8;\n  undefined *local_f0;\n  undefined local_e8 [32];\n  undefined8 local_c8;\n  undefined8 local_c0;\n  undefined4 local_b8;\n  undefined4 local_a8;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  \n  if (in_AL != '\\0') {\n    local_b8 = bfdErrorCode;\n    local_a8 = param_2;\n    local_98 = param_3;\n    local_88 = param_4;\n    local_78 = param_5;\n    local_68 = param_6;\n    local_58 = param_7;\n    local_48 = param_8;\n  }\n  local_c8 = bfdErrorCode3;\n  local_c0 = bfdErrorCode4;\n  iVar1 = bfd_get_error();\n  if (iVar1 == 0) {\n    uVar2 = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    uVar2 = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_00127600,_stderr);\n  if (errorLength != 0) {\n    if (errorMessage == 0) {\n      errorMessage = get_formatted_string_001125fa(errorLength);\n    }\n    if ((errorObject != (long *)0x0) && (*errorObject != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMessage);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMessage);\nLAB_001127c1:\n  if (formatString != (char *)0x0) {\n    local_f8 = &stack0x00000008;\n    local_f0 = local_e8;\n    local_100 = 0x20;\n    local_fc = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,formatString,&local_100);\n  }\n  fprintf(_stderr,\": %s\\n\",uVar2);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "fwrite",
                "bfd_errmsg",
                "bfd_get_error",
                "fprintf",
                "dcgettext",
                "vfprintf",
                "fflush",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_001086af",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108466",
                "FUN_00116110",
                "FUN_00104ea2",
                "FUN_00104d25",
                "FUN_0010554f",
                "FUN_0010551d",
                "FUN_0010808f",
                "FUN_00115dc0",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001088ae",
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00109b52",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_data_00113b4a",
                "param_1": "inputValue",
                "lVar1": "dataPointer"
            },
            "code": "\nlong initializeData_00113b4a(long inputValue)\n\n{\n  long dataPointer;\n  \n  if (inputValue != 0) {\n    dataPointer = initialize_data_00112904(0x15,0);\n    if (dataPointer == 0) {\n      dataPointer = 0;\n    }\n    else {\n      *(long *)(dataPointer + 0x10) = inputValue;\n    }\n    return dataPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "process_file_0010edb4",
                "param_1": "file_handle",
                "param_2": "file_name",
                "param_3": "file_mode",
                "param_4": "file_size",
                "cVar1": "comparison_result",
                "iVar2": "filename_comparison",
                "uVar3": "string_processing_result",
                "in_R10": "additional_param"
            },
            "code": "\nundefined8 process_file_0010edb4(long file_handle,undefined8 file_name,undefined4 file_mode,ulong file_size)\n\n{\n  char comparison_result;\n  int filename_comparison;\n  undefined8 string_processing_result;\n  undefined8 additional_param;\n  \n  if (*(long *)(file_handle + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_handle + 0x1f0) < file_size) {\n    *(ulong *)(file_handle + 0x1f0) = file_size;\n  }\n  filename_comparison = filename_cmp(file_name);\n  if (filename_comparison != 0) {\n    comparison_result = process_string_0010e2f0(file_handle,0x84,0,file_size,file_name);\n    if (comparison_result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_handle + 0x210) = file_name;\n  }\n  string_processing_result = process_string_0010e2f0(file_handle,0x44,file_mode,file_size - *(long *)(file_handle + 0x200),0,additional_param);\n  return string_processing_result;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "process_file_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "FUN_00112996",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_0010ee3f",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_0010be1a",
                "FUN_0010554f",
                "FUN_00108fb9",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0011256b",
                "FUN_0010c892",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_00116b90",
                "FUN_0010c2d2",
                "FUN_0010be88",
                "FUN_0010bd62",
                "FUN_00108fe8",
                "FUN_00108916",
                "FUN_0010bc80",
                "FUN_0010914e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_001199d0",
                "FUN_00108a2a",
                "FUN_0010b0fa",
                "FUN_00104a35",
                "FUN_0010bf20",
                "FUN_0010c218"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "dataPointer",
                "param_2": "numIterations",
                "cVar1": "resultChar",
                "__ptr": "ptr",
                "__s": "string",
                "sVar2": "stringLength",
                "__s_00": "modifiedString",
                "in_R10": "inParameter",
                "iVar3": "iterationCount",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] processData_0010e5db(long dataPointer,int numIterations)\n\n{\n  char resultChar;\n  void *ptr;\n  char *string;\n  size_t stringLength;\n  char *modifiedString;\n  ulong inParameter;\n  int iterationCount;\n  undefined returnValue [16];\n  \n  iterationCount = 0;\n  do {\n    if (numIterations <= iterationCount) {\n      returnValue = process_data_00109ed3(dataPointer,0x66,0,dataPointer + 0x188,dataPointer + 400,inParameter);\n      return returnValue;\n    }\n    if (*(char *)(*(long *)(dataPointer + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)extract_and_free_ptr_00109b2f(dataPointer);\n      free(ptr);\n    }\n    else {\n      string = (char *)extract_and_free_ptr_00109b2f(dataPointer);\n      stringLength = strlen(string);\n      modifiedString = (char *)xmalloc(stringLength + 3);\n      sprintf(modifiedString,\":t%s\",string);\n      free(string);\n      resultChar = process_string_0010e2f0(dataPointer,0x80,0,0,modifiedString);\n      if (resultChar == '\\0') {\n        returnValue._8_8_ = 0;\n        returnValue._0_8_ = inParameter;\n        return returnValue << 0x40;\n      }\n      free(modifiedString);\n    }\n    iterationCount = iterationCount + 1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free",
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_print_error_00104d25",
                "param_7": "errorCode",
                "print_bfd_error_message_001126c0": "printBfdErrorMessage",
                "remove_and_free_directory_00114b84": "removeAndFreeDirectory"
            },
            "code": "\nvoid cleanupAndPrintError_00104d25(void)\n\n{\n  undefined8 errorCode;\n  \n  DAT_00127a40 = 1;\n  printBfdErrorMessage(0,errorCode,0,0);\n  removeAndFreeDirectory();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "merge_debug_sections_0010551d",
                "puVar1": "ptrCount",
                "bVar2": "byteVar",
                "puVar3": "ptrVar",
                "pcVar4": "sectionContentsFn",
                "puVar5": "noteSectionPtrs",
                "uVar6": "noteSectionCount",
                "uVar7": "mergedNoteSize",
                "__s": "noteSectionName",
                "cVar8": "comparisonResult",
                "cVar9": "charVar",
                "uVar10": "unsignedVar",
                "iVar11": "intVar",
                "uVar12": "unsignedVar2",
                "uVar13": "unsignedVar3",
                "iVar14": "intVar2",
                "plVar15": "currentSection",
                "lVar21": "sectionSize",
                "lVar25": "loopVar",
                "sVar26": "sizeVar",
                "lVar27": "loopVar2",
                "plVar32": "mergedNoteSections",
                "uVar30": "lastSortedEntry",
                "lVar32": "noteSectionSize",
                "bVar39": "unreachableCodeBool",
                "in_stack_000000e0": "noteSections",
                "unaff_RBP": "basePointer",
                "unaff_RBX": "outputSections",
                "unaff_R13": "mergedNoteSections",
                "unaff_R14": "bfdObject",
                "in_stack_00000008": "binaryFile",
                "in_stack_00000010": "noteSectionCount",
                "in_stack_000000c0": "sectionAddress",
                "in_stack_000000c8": "mergedNoteSize",
                "in_stack_000000f0": "mergedNoteSections",
                "in_stack_00000110": "mergedNoteStrings"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong mergeDebugSections_0010551d(void)\n\n{\n  uint *ptrCount;\n  byte byteVar;\n  undefined *ptrVar;\n  code *sectionContentsFn;\n  undefined8 *noteSectionPtrs;\n  ulong noteSectionCount;\n  ulong mergedNoteSize;\n  char *noteSectionName;\n  char comparisonResult;\n  char charVar;\n  uint unsignedVar;\n  int intVar;\n  uint unsignedVar2;\n  undefined4 unsignedVar3;\n  int intVar2;\n  long *currentSection;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  size_t sVar18;\n  char *pcVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long sectionSize;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long loopVar;\n  FILE *noteSectionName_00;\n  size_t sizeVar;\n  long loopVar2;\n  long *outputSections;\n  char *pcVar28;\n  undefined8 *puVar29;\n  ulong lastSortedEntry;\n  int iVar31;\n  long basePointer;\n  long *mergedNoteSections;\n  char *pcVar33;\n  undefined4 *ptrVar4;\n  char **ppcVar35;\n  long *mergedNoteSections;\n  void *pvVar36;\n  undefined8 *bfdObject;\n  undefined **pptrVar7;\n  bool bVar38;\n  byte unreachableCodeBool;\n  long binaryFile;\n  ulong noteSectionCount;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *sectionAddress;\n  ulong mergedNoteSize;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *noteSections;\n  long mergedNoteSections;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 mergedNoteStrings;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  unreachableCodeBool = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_bfd_error_message_001126c0(0);\n  free(outputSections);\nLAB_001151a2:\n  basePointer = *(long *)(basePointer + 8);\n  puVar29 = DAT_001279d0;\n  if (basePointer == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(bfdObject[1] + 8) != 5) || (*(int *)(*(long *)(basePointer + 0xd0) + 4) != 7)) ||\n        (charVar = string_comparison_00113fb0(), charVar == '\\0')) ||\n       ((*(long *)(basePointer + 0x60) == 0 || (loopVar = *(long *)(basePointer + 0x40), loopVar == 0))))\n    goto LAB_001151a2;\n    outputSections = (long *)xmalloc(0x20);\n    outputSections[1] = 0;\n    charVar = bfd_get_full_section_contents();\n    if (charVar != '\\0') {\n      loopVar2 = process_build_attribute_notes_001163d0();\n      outputSections[2] = loopVar2;\n      if ((loopVar2 == loopVar) || (charVar = bfd_set_section_size(), charVar != '\\0')) {\n        outputSections[3] = (long)mergedNoteSections;\n        *outputSections = basePointer;\n        mergedNoteSections = outputSections;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_bfd_error_message_001126c0(0,binaryFile,basePointer);\n        free((void *)outputSections[1]);\n        free(outputSections);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (loopVar = *(long *)(basePointer + 8); loopVar != 0; loopVar = *(long *)(loopVar + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    loopVar = bfd_get_section_by_name();\n    if (loopVar == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(loopVar + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else {\n      sVar18 = *(size_t *)(loopVar + 0x40);\n      noteSectionName_00 = fopen((char *)puVar29[2],\"w\");\n      if (noteSectionName_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_bfd_error_message_001126c0(puVar29[2],0,0);\n      }\n      else {\n        charVar = bfd_malloc_and_get_section();\n        if (charVar == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_bfd_error_message_001126c0(0);\n        }\n        else if ((sVar18 != 0) &&\n                (sizeVar = fwrite(in_stack_00000140,1,sVar18,noteSectionName_00), sizeVar != sVar18)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          uVar17 = puVar29[2];\n          uVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar16,uVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(noteSectionName_00);\n          return 0;\n        }\n        fclose(noteSectionName_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    loopVar = bfd_get_section_by_name(binaryFile,\".gnu_debuglink\");\n    if (loopVar != 0) {\n      uVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar17);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(binaryFile);\n    loopVar = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,binaryFile,0,uVar17,loopVar);\n      return 0;\n    }\n    if (*(int *)(*(long *)(binaryFile + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(binaryFile + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        lastSortedEntry = uVar20;\n        noteSectionCount = uVar24;\n        mergedNoteSize = uVar20;\n        if (uVar22 != 0) {\n          while ((lastSortedEntry = noteSectionCount, mergedNoteSize != 0 &&\n                 (lastSortedEntry = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            noteSectionCount = uVar20;\n            mergedNoteSize = uVar22;\n          }\n        }\n        uVar20 = lastSortedEntry;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  mergedNoteSections = DAT_001278d0;\n  iStack000000000000006c = *(int *)(binaryFile + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = extract_and_process_debug_info_0010554f();\n    return uVar24;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pptrVar7 = &PTR_snoteSectionNametab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    ptrVar4 = puStack0000000000000020;\n    for (loopVar = 0x18; loopVar != 0; loopVar = loopVar + -1) {\n      *ptrVar4 = 0;\n      ptrVar4 = ptrVar4 + (ulong)unreachableCodeBool * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      ptrVar = *pptrVar7;\n      loopVar = bfd_get_section_by_name();\n      loopVar2 = bfd_get_section_by_name();\n      if ((loopVar != 0) && (loopVar2 != 0)) {\n        loopVar = *(long *)(loopVar + 0x40);\n        __ptr = (void *)xmalloc(loopVar);\n        charVar = bfd_get_section_contents();\n        if (charVar == '\\0') {\n          unsignedVar3 = bfd_get_error();\n          bfd_errmsg(unsignedVar3);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*bfdObject);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(loopVar2 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            unsignedVar3 = bfd_get_error();\n            bfd_errmsg(unsignedVar3);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*bfdObject);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)create_initialized_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + loopVar + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(bfdObject[1] + 0x40))(pvVar36);\n                byteVar = *(byte *)((long)pvVar36 + 4);\n                unsignedVar3 = (**(code **)(bfdObject[1] + 0x58))((long)pvVar36 + 6);\n                loopVar2 = (**(code **)(bfdObject[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + loopVar2;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar33);\n                      if (((sVar18 == 0) || (pcVar28 = pcVar33 + (sVar18 - 1), *pcVar28 != '\\')) ||\n                         ((ulong)((long)__ptr + loopVar) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intVar = (**(code **)(bfdObject[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(intVar + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *pcVar28 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    uVar17 = *bfdObject;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,uVar17,ptrVar,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)byteVar,unsignedVar3,loopVar2,pcVar33);\n                    charVar = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar);\n                    if (charVar == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_and_reset_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *bfdObject;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,uVar17,ptrVar,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVar,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_and_reset_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pptrVar7 = pptrVar7 + 2;\n    } while (pptrVar7 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar = process_debug_records_0010c892(), charVar == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(bfdObject[1] + 8) == 1) {\n      loopVar = 0;\n      for (currentSection = mergedNoteSections; currentSection < mergedNoteSections + noteSectionCount; currentSection = currentSection + 1) {\n        (**(code **)(bfdObject[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((loopVar != 0) || (loopVar = create_initialized_data_structure_00112894(), loopVar != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (sVar18 = strlen(pcVar28), pcVar28[sVar18 - 1] == '\\')) &&\n                   (currentSection + 1 < mergedNoteSections + noteSectionCount))) {\n              pcVar19 = (char *)xstrdup(pcVar28);\n              sVar18 = strlen(pcVar19);\n              pcVar19[sVar18 - 1] = '\\0';\n              pcVar28 = (char *)concat(pcVar19,*(undefined8 *)(currentSection[1] + 8),0);\n              free(pcVar19);\n              free(pcVar33);\n              currentSection = currentSection + 1;\n              pcVar33 = pcVar28;\n            }\n            update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         pcVar28);\n            in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,loopVar,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            print_last_stabs_entries_00108b3e();\n            cleanup_and_reset_memory_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      cleanup_and_reset_memory_00108863();\n      if ((loopVar != 0) && (charVar = process_debug_records_0010c892(), charVar == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(bfdObject[1] + 8) != 2) || (noteSectionCount == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      sectionAddress = mergedNoteSections;\n      in_stack_000000d0 = 0;\n      mergedNoteSize = noteSectionCount;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (loopVar = 0x22; loopVar != 0; loopVar = loopVar + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)unreachableCodeBool * -8 + 4);\n      }\n      charVar = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)noteSectionCount <= in_stack_000000d0) break;\n        loopVar = mergedNoteSections[in_stack_000000d0];\n        comparisonResult = bfd_coff_get_syment();\n        loopVar2 = in_stack_000000d8;\n        if (comparisonResult == '\\0') {\n          unsignedVar3 = bfd_get_error();\n          bfd_errmsg(unsignedVar3);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          uVar17 = dcgettext(0,pcVar33,5);\n          print_error_message_00119ed0(uVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(loopVar + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (comparisonResult = bfd_coff_get_auxent(), comparisonResult == '\\0')) {\n          unsignedVar3 = bfd_get_error();\n          bfd_errmsg(unsignedVar3);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)loopVar2) {\n          if (bStack0000000000000100 != 0x67) {\n            comparisonResult = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (comparisonResult == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)mergedNoteSections;\n          comparisonResult = initialize_debug_info_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(bfdObject[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(bfdObject[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(bfdObject[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar = strcmp(pcVar33,\".bb\");\n              if (intVar == 0) {\n                comparisonResult = debug_start_block_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar = strcmp(pcVar33,\".eb\");\n              if (intVar == 0) {\n                comparisonResult = process_end_of_block_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar = strcmp(pcVar33,\".bf\");\n              if (intVar == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  loopVar2 = parse_and_initialize_data_0010dac0();\n                  if ((loopVar2 == 0) ||\n                     (charVar = record_debug_function_0010bc80(puStack0000000000000020), charVar == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar = in_stack_00000118 - 1;\n                    }\n                    loopVar = *(long *)(*(long *)(loopVar + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      comparisonResult = record_debug_line_0010bf86(puStack0000000000000020,intVar + iVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + loopVar);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (comparisonResult == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar = strcmp(pcVar33,\".ef\");\n                if (intVar != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar != '\\0') {\n                  charVar = end_debug_function_0010be1a(puStack0000000000000020);\n                  if (charVar == '\\0') goto LAB_00105981;\n                  charVar = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar33,5);\n              print_error_message_00119ed0(uVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          sectionSize = parse_and_initialize_data_0010dac0();\n          if (sectionSize == 0) goto LAB_00105981;\n          comparisonResult = check_and_record_variable_00112a33(&stack0x00000140,loopVar,loopVar2);\n        }\njoined_r0x00107247:\n        if (comparisonResult == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(binaryFile + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(binaryFile + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binaryFile + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (noteSectionCount != 0) {\n        mergedNoteSections = DAT_001278d0 + noteSectionCount;\n        currentSection = DAT_001278d0;\n        do {\n          unsignedVar = *(uint *)(*currentSection + 0x18);\n          if ((unsignedVar & 0x1000000) != 0) {\n            *(uint *)(*currentSection + 0x18) = unsignedVar & 0xfeffffff;\n          }\n          currentSection = currentSection + 1;\n        } while (mergedNoteSections != currentSection);\n      }\n    }\n    else {\n      for (loopVar = *(long *)(binaryFile + 0x90); loopVar != 0; loopVar = *(long *)(loopVar + 8)\n          ) {\n        if (*(long *)(loopVar + 0xe8) != 0) {\n          ptrCount = (uint *)(*(long *)(loopVar + 0xe8) + 0x18);\n          *ptrCount = *ptrCount | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar = bfd_get_error();\n      if (intVar != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    loopVar = xmalloc();\n    mergedNoteSections = DAT_001278d0;\n    uStack0000000000000048 = *(uint *)((long)bfdObject + 0x44) & 0x42;\n    DAT_001278c8 = loopVar;\n    if (noteSectionCount == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intVar = DAT_001279c0;\n        currentSection = (long *)mergedNoteSections[_in_stack_00000018];\n        sectionContentsFn = (code *)currentSection[4];\n        unsignedVar = *(uint *)(currentSection + 3);\n        pcVar33 = (char *)currentSection[1];\n        pcVar28 = pcVar33;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = DAT_001279c8;\n          while( true ) {\n            if ((intVar <= iVar31) || (pcVar19 = (char *)puVar29[5], pcVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pcVar19 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          intVar2 = strcmp(pcVar19,pcVar33);\n          if (intVar2 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pcVar19);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          uVar16 = extract_section_from_binary_0011a2e0(puVar29);\n          uVar17 = DAT_001278f0;\n          *(undefined8 *)(loopVar + uVar24 * 8) = uVar16;\n          loopVar2 = htab_elements(uVar17);\n          if ((loopVar2 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar = *pcVar33;\n          if (charVar != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(binaryFile + 8) + 0x1c) != '\\0')\n             ) {\n            loopVar2 = bfdObject[1];\n            charVar = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        loopVar2 = htab_elements(DAT_001278f0);\n        uVar20 = uVar24;\n        if ((loopVar2 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (intVar = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), intVar == 0)) {\n            uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            execute_and_exit_00119dd0(uVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        loopVar2 = htab_find(DAT_001278f0);\n        if (((loopVar2 == 0) || (pcVar28 = *(char **)(loopVar2 + 8), pcVar33 == pcVar28)) &&\n           (pcVar28 = pcVar33, ppcVar35 = DAT_001278f8, (unsignedVar & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            intVar = strcmp(*ppcVar35,pcVar33);\n            if (intVar == 0) {\n              pcVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        currentSection[1] = (long)pcVar28;\n        charVar = *pcVar28;\n        if (charVar == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = DAT_00127928;\n        loopVar2 = bfdObject[1];\n        if (*(char *)(loopVar2 + 0x1c) == charVar) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((unsignedVar & 0x82) == 0 && (sectionContentsFn != bfd_map_over_sections)) &&\n                ((*(byte *)(currentSection[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            currentSection[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          charVar = *(char *)(*(long *)(binaryFile + 8) + 0x1c);\n          if (charVar == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            currentSection[1] = (long)pcVar28;\n            sVar18 = strlen(pcVar28);\n            loopVar2 = sVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = charVar;\n          currentSection[1] = (long)pcVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(binaryFile + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sVar18 = strlen(pcVar28);\n            sizeVar = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sizeVar + sVar18 + 1);\n            pcVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = DAT_00127928;\n            if ((*(char *)(loopVar2 + 0x1c) != '\\0') && (charVar != *(char *)(loopVar2 + 0x1c)))\n            goto joined_r0x00106565;\n            sVar18 = strlen(pcVar28);\n            loopVar2 = sVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              pcVar19 = (char *)xmalloc(loopVar2);\n            }\n            else {\nLAB_001066bc:\n              sVar18 = strlen(pcVar33);\n              pcVar19 = (char *)xmalloc(sVar18 + loopVar2);\n            }\n            pcVar33 = pcVar19 + 1;\n            *pcVar19 = *(char *)(*(long *)(binaryFile + 8) + 0x1c);\n          }\n          noteSectionName = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(pcVar33,DAT_00127928);\n            sVar18 = strlen(noteSectionName);\n            pcVar33 = pcVar33 + sVar18;\n          }\n          strcpy(pcVar33,pcVar28);\n          currentSection[1] = (long)pcVar19;\n          pcVar28 = pcVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((unsignedVar & 0x20) == 0) &&\n           (((unsignedVar & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(currentSection[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((unsignedVar & 0x82) != 0 || ((*(byte *)(currentSection[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar = bfd_decode_symclass(currentSection), intVar == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              loopVar2 = htab_find();\n              if (loopVar2 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar28;\n              htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((unsignedVar & 0x82) == 0) && (sectionContentsFn != bfd_map_over_sections)) &&\n                  ((*(byte *)(currentSection[4] + 0x25) & 0x10) == 0)) {\n            if ((unsignedVar & 4) == 0) {\n              if (((*(int *)(bfdObject[1] + 8) != 2) ||\n                  (loopVar2 = *(long *)(currentSection[4] + 0xd0), loopVar2 == 0)) ||\n                 (*(long *)(loopVar2 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  charVar = bfd_is_local_label(bfdObject);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (charVar == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          loopVar2 = htab_find();\n          if (loopVar2 != 0) {\nLAB_0010687f:\n            uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_00119ed0(uVar17);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pcVar28;\n          htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((unsignedVar & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_00127a10,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          loopVar2 = htab_find();\n          if (loopVar2 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((unsignedVar & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            loopVar2 = htab_find();\n            if (loopVar2 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_00127a28,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar = check_selected_item_001159d0(currentSection[4]);\n          if (charVar == '\\0') {\n            if (((unsignedVar & 0x800002) == 0) && (sectionContentsFn != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((unsignedVar & 0x82) != 0) {\n                charVar = check_pattern_00115d70(pcVar28);\n                if ((charVar == '\\0') &&\n                   ((loopVar2 = htab_elements(DAT_001279f8), loopVar2 == 0 ||\n                    (charVar = check_pattern_00115d70(pcVar28), charVar != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (unsignedVar2 = *(uint *)(currentSection + 3), (unsignedVar2 & 0x200000) != 0)) ||\n                       (loopVar2 = *currentSection, loopVar2 == 0)) ||\n                      ((*(int *)(*(long *)(loopVar2 + 8) + 8) != 5 || (*(long *)(loopVar2 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)currentSection + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  unsignedVar2 = *(uint *)(currentSection + 3);\n                }\n                *(uint *)(currentSection + 3) = unsignedVar2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((unsignedVar & 1) != 0) && (charVar = check_pattern_00115d70(pcVar28), charVar != '\\0')) {\n                *(uint *)(currentSection + 3) = *(uint *)(currentSection + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (charVar = check_pattern_00115d70(pcVar28), charVar != '\\0')) {\n                *(uint *)(currentSection + 3) = *(uint *)(currentSection + 3) & 0xff7ffffd | 0x80;\n              }\n              if (sectionContentsFn != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(loopVar + uVar24 * 8) = currentSection;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (noteSectionCount != _in_stack_00000018);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279c8;\n      intVar = DAT_001279c0;\n      for (loopVar2 = 0; loopVar2 < intVar; loopVar2 = loopVar2 + 1) {\n        pcVar33 = (char *)puVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          sectionSize = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          uVar17 = extract_section_from_binary_0011a2e0(puVar29,binaryFile);\n          *(undefined8 *)(loopVar + sectionSize) = uVar17;\n          intVar = DAT_001279c0;\n        }\n        else if (pcVar33 != \"\") {\n          uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          execute_and_exit_00119dd0(uVar17,pcVar33);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    bVar38 = DAT_001279a0 != '\\0';\n    *(undefined8 *)(loopVar + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar = *(int *)(*(undefined8 **)(binaryFile + 8) + 1);\n      if ((intVar != 5) && (intVar != 2)) {\n        uVar17 = **(undefined8 **)(binaryFile + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,binaryFile,0,uVar16,uVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      noteSections = (void *)0x0;\n      charVar = parse_binary_0011378f(binaryFile,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar == '\\0') goto LAB_00105d8c;\n      loopVar = bfd_make_section_with_flags(binaryFile,\".stab\",0x2108);\n      loopVar2 = bfd_make_section_with_flags(binaryFile,\".stabstr\",0x2108);\n      if ((((loopVar == 0) || (loopVar2 == 0)) ||\n          (charVar = bfd_set_section_size(loopVar,mergedNoteStrings), charVar == '\\0')) ||\n         (charVar = bfd_set_section_size(loopVar2,in_stack_00000140), charVar == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        uVar17 = dcgettext(0,pcVar33,5);\n        print_bfd_error_message_001126c0(0,binaryFile,0,uVar17);\n        free(noteSections);\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(loopVar + 0x7c) = 2;\n      *(undefined4 *)(loopVar2 + 0x7c) = 0;\n      charVar = bfd_set_section_contents\n                        (binaryFile,loopVar,sectionAddress,0,mergedNoteStrings);\n      if ((charVar == '\\0') ||\n         (charVar = bfd_set_section_contents\n                            (binaryFile,loopVar2,noteSections,0,in_stack_00000140),\n         charVar == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    noteSectionCount = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    loopVar = htab_elements(DAT_00127a18);\n    if (((loopVar != 0) ||\n        (((((((loopVar = htab_elements(DAT_00127a28), loopVar != 0 ||\n              (loopVar = htab_elements(DAT_00127a08), loopVar != 0)) ||\n             (loopVar = htab_elements(DAT_00127a00), loopVar != 0)) ||\n            ((loopVar = htab_elements(DAT_001279f8), loopVar != 0 ||\n             (loopVar = htab_elements(DAT_001279f0), loopVar != 0)))) ||\n           (loopVar = htab_elements(DAT_001278f0), loopVar != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(binaryFile,DAT_001278c8,noteSectionCount & 0xffffffff);\n  bfd_map_over_sections(bfdObject,process_binary_00115dc0,binaryFile);\n  bfd_map_over_sections(bfdObject,process_and_update_section_00116110,binaryFile);\n  for (puVar29 = DAT_001279e0; noteSectionPtrs = DAT_001279d8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    charVar = bfd_set_section_contents(binaryFile,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (charVar == '\\0') {\n      print_bfd_error_message_001126c0(0,binaryFile,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; noteSectionPtrs != (undefined8 *)0x0; noteSectionPtrs = (undefined8 *)*noteSectionPtrs) {\n    uVar17 = *(undefined8 *)(noteSectionPtrs[5] + 0x60);\n    charVar = bfd_set_section_contents(binaryFile,uVar17,noteSectionPtrs[4],0,noteSectionPtrs[3]);\n    if (charVar == '\\0') {\n      print_bfd_error_message_001126c0(0,binaryFile,uVar17,0);\n      return 0;\n    }\n  }\n  if (mergedNoteSections == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      uVar17 = *bfdObject;\n      uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_00119ed0(uVar16,uVar17);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (charVar = bfd_fill_in_gnu_debuglink_section(binaryFile,lStack0000000000000078),\n       loopVar = DAT_00127a30, charVar != '\\0')) {\n      unsignedVar = (**(code **)(*(long *)(binaryFile + 8) + 0x140))(bfdObject);\n      uVar24 = (ulong)unsignedVar;\n      if ((char)unsignedVar != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar24;\n        }\n        charVar = bfd_alt_mach_code(binaryFile,DAT_00127930 & 0xffffffff);\n        uVar20 = DAT_00127930;\n        if (charVar != '\\0') {\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_00119ed0(uVar17,uVar20);\n        if (*(int *)(*(long *)(binaryFile + 8) + 8) != 5) {\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar17);\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_00119ed0(uVar17);\n        *(short *)(*(long *)(binaryFile + 0x110) + 0x3a) = (short)DAT_00127930;\n        return uVar24;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,binaryFile,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,binaryFile,0,uVar17,loopVar);\n    }\n    return 0;\n  }\n  mergedNoteSections = (long *)0x0;\n  puVar29 = *(undefined8 **)(binaryFile + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        mergedNoteSections = (long *)mergedNoteSections[3];\n        free((void *)mergedNoteSections[1]);\n        free(mergedNoteSections);\n        mergedNoteSections = mergedNoteSections;\n      } while (mergedNoteSections != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(binaryFile + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (charVar = string_comparison_00113fb0(*puVar29,\".gnu.build.attributes\"), charVar != '\\0')) {\n      if (mergedNoteSections == (long *)0x0) {\n        mergedNoteSections = mergedNoteSections;\n      }\n      currentSection = mergedNoteSections;\n      if (*(undefined8 **)(*mergedNoteSections + 0x60) == puVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (mergedNoteSections[1] != 0) {\n          charVar = bfd_set_section_contents(binaryFile,puVar29,mergedNoteSections[1],0,mergedNoteSections[2]);\n          if (charVar == '\\0') {\n            uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_bfd_error_message_001126c0(0,binaryFile,puVar29,uVar17);\n            return 0;\n          }\n          mergedNoteSections = (long *)mergedNoteSections[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          mergedNoteSections = currentSection;\n          if (*(undefined8 **)(*currentSection + 0x60) == puVar29) goto LAB_0010625f;\n          mergedNoteSections = (long *)currentSection[3];\n          currentSection = mergedNoteSections;\n        } while (mergedNoteSections != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      uVar17 = dcgettext(0,pcVar33,5);\n      print_bfd_error_message_001126c0(0,binaryFile,puVar29,uVar17);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_debug_sections_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00105828",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "calculate_hash_00108800",
                "param_1": "inputString"
            },
            "code": "\nvoid calculateHash_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "calculate_hash_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "process_records_0010c1c6",
                "param_1": "inputData",
                "param_2": "dataStruct",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "nextRecord",
                "cVar2": "recordStatus",
                "__ptr": "currentRecord"
            },
            "code": "\nundefined processRecords_0010c1c6(undefined8 inputData,long dataStruct,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextRecord;\n  char recordStatus;\n  undefined8 *currentRecord;\n  \n  currentRecord = *(undefined8 **)(dataStruct + 0x78);\n  while( true ) {\n    if (currentRecord == (undefined8 *)0x0) {\n      *(undefined8 *)(dataStruct + 0x78) = 0;\n      return 1;\n    }\n    recordStatus = record_variable_0010c05d(inputData,currentRecord[1],currentRecord[2],*(undefined4 *)(currentRecord + 3),currentRecord[4],param6,\n                         param5);\n    if (recordStatus == '\\0') break;\n    nextRecord = (undefined8 *)*currentRecord;\n    free(currentRecord);\n    currentRecord = nextRecord;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "process_records_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "unaff_RBX": "inputData",
                "unaff_RBP": "functionPointer",
                "unaff_R13": "outputArray",
                "uVar1": "inputLength",
                "lVar2": "currentValue",
                "cVar3": "patternCheckResult",
                "puVar4": "outputPointer",
                "puVar5": "newOutputPointer",
                "uVar6": "currentIndex"
            },
            "code": "\nvoid processData_001082df(void)\n\n{\n  uint inputLength;\n  long currentValue;\n  char patternCheckResult;\n  long inputData;\n  undefined8 *outputPointer;\n  undefined8 *newOutputPointer;\n  long functionPointer;\n  ulong currentIndex;\n  undefined8 *outputArray;\n  \n  inputLength = *(uint *)(inputData + 0x78);\n  if (DAT_00127a48 == 7) {\n    outputPointer = outputArray;\n    for (currentIndex = 0; currentIndex != inputLength; currentIndex = currentIndex + 1) {\n      newOutputPointer = outputPointer;\n      if (((*(long **)outputArray[currentIndex] != (long *)0x0) &&\n          (currentValue = **(long **)outputArray[currentIndex], currentValue != 0)) &&\n         (patternCheckResult = check_pattern_00115d70(*(undefined8 *)(currentValue + 8),DAT_00127a28), patternCheckResult != '\\0')) {\n        newOutputPointer = outputPointer + 1;\n        *outputPointer = outputArray[currentIndex];\n      }\n      outputPointer = newOutputPointer;\n    }\n    *outputPointer = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(functionPointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_data_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_contents_00114d60",
                "param_1": "file_path",
                "iVar1": "is_end_of_file",
                "piVar2": "error_number_ptr",
                "pcVar3": "error_message",
                "uVar4": "error_text",
                "__stream": "file_stream",
                "uVar5": "dynamic_memory",
                "sVar6": "bytes_read",
                "lVar7": "current_position",
                "lVar8": "buffer_size"
            },
            "code": "\nvoid read_file_contents_00114d60(long file_path)\n\n{\n  int is_end_of_file;\n  int *error_number_ptr;\n  char *error_message;\n  undefined8 error_text;\n  FILE *file_stream;\n  undefined8 dynamic_memory;\n  size_t bytes_read;\n  long current_position;\n  long buffer_size;\n  \n  file_stream = fopen(*(char **)(file_path + 0x10),\"r\");\n  if (file_stream == (FILE *)0x0) {\n    error_number_ptr = __errno_location();\n    error_message = strerror(*error_number_ptr);\n    dynamic_memory = *(undefined8 *)(file_path + 0x10);\n    error_text = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    execute_and_exit_00119dd0(error_text,dynamic_memory,error_message);\n  }\n  buffer_size = 0x1000;\n  current_position = 0;\n  dynamic_memory = xmalloc(0x1000);\n  *(undefined8 *)(file_path + 0x20) = dynamic_memory;\n  while( true ) {\n    is_end_of_file = feof(file_stream);\n    if (is_end_of_file != 0) {\n      *(long *)(file_path + 0x18) = current_position;\n      fclose(file_stream);\n      return;\n    }\n    if (current_position == buffer_size) {\n      buffer_size = current_position * 2;\n      dynamic_memory = xrealloc(*(undefined8 *)(file_path + 0x20),buffer_size);\n      *(undefined8 *)(file_path + 0x20) = dynamic_memory;\n    }\n    bytes_read = fread((void *)(*(long *)(file_path + 0x20) + current_position),1,buffer_size - current_position,file_stream);\n    is_end_of_file = ferror(file_stream);\n    if (is_end_of_file != 0) break;\n    current_position = current_position + bytes_read;\n  }\n  dynamic_memory = *(undefined8 *)(file_path + 0x10);\n  error_text = dcgettext(0,\"%s: fread failed\",5);\n                    \n  execute_and_exit_00119dd0(error_text,dynamic_memory);\n}\n\n",
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_file_contents_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "check_and_execute_section_00108808",
                "unaff_RBP": "basePointer",
                "uVar1": "sectionAddress",
                "uVar2": "sectionNotFoundErrorMessage"
            },
            "code": "\nvoid checkAndExecuteSection_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 sectionNotFoundErrorMessage;\n  long basePointer;\n  \n  sectionAddress = *(undefined8 *)(basePointer + 0x20);\n  sectionNotFoundErrorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  execute_and_exit_00119dd0(sectionNotFoundErrorMessage,sectionAddress);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "check_and_execute_section_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "unaff_EBP": "lineCount",
                "unaff_R13": "message",
                "unaff_R14": "linePointer",
                "unaff_R15": "currentChar",
                "in_stack_00000008": "formatString",
                "in_stack_00000010": "resultPtr",
                "bVar4": "currentChar"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte currentChar;\n  byte *pbVar5;\n  int lineCount;\n  byte *pbVar6;\n  undefined8 message;\n  byte *pbVar7;\n  byte *linePointer;\n  byte *currentChar;\n  undefined8 formatString;\n  undefined8 *resultPtr;\n  \n  *linePointer = 0;\nLAB_00114520:\n  linePointer = linePointer + 1;\n  do {\n    currentChar = *linePointer;\n    pbVar7 = linePointer;\n    if (currentChar == 10) {\n      *linePointer = 0;\n      if (linePointer[1] == 0xd) {\n        pbVar7 = linePointer + 1;\n        pbVar5 = linePointer + 2;\n      }\n      else {\n        pbVar5 = linePointer + 1;\n      }\n    }\n    else if ((char)currentChar < '\\v') {\n      if (currentChar != 0) goto LAB_00114520;\n      pbVar5 = linePointer + 1;\n    }\n    else {\n      if (currentChar != 0xd) break;\n      *linePointer = 0;\n      pbVar5 = linePointer + 1;\n      if (linePointer[1] == 10) {\n        pbVar5 = linePointer + 2;\n        pbVar7 = linePointer + 1;\n      }\n    }\n    currentChar = *currentChar;\n    while ((currentChar == 0x20 || (pbVar6 = currentChar, currentChar == 9))) {\n      pbVar6 = currentChar + 1;\n      currentChar = currentChar + 1;\n      currentChar = *pbVar6;\n    }\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = pbVar6[1];\n      pbVar6 = pbVar6 + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentChar = pbVar6[1];\n      if ((((((currentChar == 9) || (currentChar == 0x20)) &&\n            ((currentChar = pbVar6[2], currentChar == 9 || (currentChar == 0x20)))) &&\n           ((currentChar = pbVar6[3], currentChar == 9 || (currentChar == 0x20)))) &&\n          ((currentChar = pbVar6[4], currentChar == 9 || (currentChar == 0x20)))) &&\n         ((currentChar = pbVar6[5], currentChar == 9 || (currentChar == 0x20)))) {\n        currentChar = pbVar6[6];\n        pbVar3 = pbVar6 + 6;\n        if ((currentChar == 9) || (currentChar == 0x20)) {\n          do {\n            do {\n              currentChar = pbVar3[1];\n              pbVar3 = pbVar3 + 1;\n            } while (currentChar == 0x20);\n          } while (currentChar == 9);\n        }\n      }\n      if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(uVar1,formatString,lineCount);\n      }\n    }\nLAB_00114599:\n    *pbVar6 = 0;\n    if (currentChar < pbVar6) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = currentChar;\n    }\n    lineCount = lineCount + 1;\n    linePointer = pbVar5;\n    currentChar = pbVar5;\n    if (pbVar7[1] == 0) {\n      *resultPtr = message;\n      return;\n    }\n  } while( true );\n  if (currentChar == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_execute_function_00119940",
                "param_1": "vma",
                "param_2": "message",
                "uVar1": "badNumberMessage",
                "local_20": "scanResult"
            },
            "code": "\nvoid checkAndExecuteFunction_00119940(undefined8 vma,undefined8 message)\n\n{\n  undefined8 badNumberMessage;\n  char *scanResult [2];\n  \n  bfd_scan_vma(vma,scanResult,0);\n  if (*scanResult[0] == '\\0') {\n    return;\n  }\n  badNumberMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  execute_and_exit_00119dd0(badNumberMessage,message,vma);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "data",
                "param_2": "address",
                "param_3": "flag",
                "in_RAX": "result"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 data,long address,uint flag)\n\n{\n  long result;\n  \n  if ((flag == 2) && (*(int *)(*(long *)(address + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(address + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(result + 0x380) + 0x78))(data,flag != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_files_recursive_00113a4d",
                "param_1": "file_buffer",
                "param_2": "file_size",
                "param_3": "file_data",
                "cVar1": "file_status",
                "uVar2": "return_value",
                "puVar3": "data_ptr",
                "auVar4": "update_result"
            },
            "code": "\nundefined8\nprocess_files_recursive_00113a4d(undefined8 file_buffer,undefined8 file_size,long file_data,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  char file_status;\n  undefined8 return_value;\n  undefined8 *data_ptr;\n  undefined update_result [16];\n  \n  file_status = process_files_00112502(file_buffer,file_size,*(undefined8 *)(file_data + 0x18));\n  if ((file_status != '\\0') &&\n     (((*(long *)(file_data + 0x28) == 0 && (*(long *)(file_data + 8) != 0)) ||\n      (file_status = update_and_process_data_0010ec73(file_size,*(undefined8 *)(file_data + 0x18)), file_status != '\\0')))) {\n    if (*(undefined8 **)(file_data + 0x28) != (undefined8 *)0x0) {\n      for (data_ptr = (undefined8 *)**(undefined8 **)(file_data + 0x28); data_ptr != (undefined8 *)0x0;\n          data_ptr = (undefined8 *)*data_ptr) {\n        file_status = process_data_001135a5(file_buffer,file_size,data_ptr);\n        if (file_status == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (data_ptr = *(undefined8 **)(file_data + 0x10); data_ptr != (undefined8 *)0x0;\n        data_ptr = (undefined8 *)*data_ptr) {\n      file_status = process_files_recursive_00113a4d(file_buffer,file_size,data_ptr);\n      if (file_status == '\\0') {\n        return 0;\n      }\n    }\n    update_result = process_files_00112502(file_buffer,file_size,*(undefined8 *)(file_data + 0x20));\n    if (update_result[0] != '\\0') {\n      if ((*(long *)(file_data + 0x28) == 0) && (*(long *)(file_data + 8) != 0)) {\n        return update_result._0_8_;\n      }\n      return_value = update_parameters_0010ed2c(file_size,*(undefined8 *)(file_data + 0x20),update_result._8_8_,param_5);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_0010ec73",
                "FUN_00113a4d",
                "FUN_00112502",
                "FUN_0010ed2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_files_recursive_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "return_value",
                "unaff_RBX": "memory_block"
            },
            "code": "\nundefined8 release_memory_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_block;\n  undefined8 param_7;\n  \n  param_7 = return_value;\n  free(memory_block);\n  return param_7;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "release_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010e9a0",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_00112c1f",
                "FUN_001199d0",
                "FUN_0010922b",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_data_with_param_00113b71",
                "param_1": "input_value",
                "lVar1": "data_ptr"
            },
            "code": "\nlong initialize_data_with_param_00113b71(long input_value)\n\n{\n  long data_ptr;\n  \n  if (input_value != 0) {\n    data_ptr = initialize_data_00112904(0x14,0);\n    if (data_ptr == 0) {\n      data_ptr = 0;\n    }\n    else {\n      *(long *)(data_ptr + 0x10) = input_value;\n    }\n    return data_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_with_param_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "initialize_or_increment_00109dfe",
                "param_1": "function_param",
                "lVar1": "incremented_value",
                "local_40": "string_buffer"
            },
            "code": "\nvoid initialize_or_increment_00109dfe(long function_param)\n\n{\n  long incremented_value;\n  char string_buffer [40];\n  \n  if (*(long *)(function_param + 0x70) != 0) {\n    initialize_data_structure_00109cf4(function_param,*(long *)(function_param + 0x70),0);\n    return;\n  }\n  incremented_value = *(long *)(function_param + 0x68);\n  *(long *)(function_param + 0x68) = incremented_value + 1;\n  *(long *)(function_param + 0x70) = incremented_value;\n  sprintf(string_buffer,\"%ld=%ld\",incremented_value,incremented_value);\n  initialize_data_structure_00109b52(function_param,string_buffer,incremented_value,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "FUN_00109cf4",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_increment_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_string_ending_with_semicolon_00109bbb",
                "param_1": "ptr",
                "__s": "string",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkStringEndingWithSemicolon_00109bbb(long ptr)\n\n{\n  char *string;\n  size_t stringLength;\n  \n  if (*(long *)(ptr + 0x60) != 0) {\n    string = *(char **)(*(long *)(ptr + 0x60) + 0x30);\n    if (string != (char *)0x0) {\n      stringLength = strlen(string);\n      *(undefined2 *)(string + stringLength) = 0x3b;\n    }\n    return string != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_string_ending_with_semicolon_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "extract_and_concatenate_strings_0010ae0e",
                "param_1": "input",
                "lVar1": "structAddress",
                "lVar2": "stringsAddress",
                "__ptr": "tempPointer",
                "pcVar3": "stringPointer",
                "sVar4": "length1",
                "sVar5": "length2",
                "pcVar6": "resultString",
                "uVar7": "returnValue",
                "lVar8": "resultStringLength",
                "uVar9": "stringIndex",
                "uVar10": "stringCount"
            },
            "code": "\nundefined8 extractAndConcatenateStrings_0010ae0e(long input)\n\n{\n  long structAddress;\n  long stringsAddress;\n  void *tempPointer;\n  char *stringPointer;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  undefined8 returnValue;\n  long resultStringLength;\n  uint stringIndex;\n  ulong stringCount;\n  \n  returnValue = 0;\n  structAddress = *(long *)(input + 0x60);\n  if (((structAddress != 0) && (*(char **)(structAddress + 8) != (char *)0x0)) &&\n     (resultString = *(char **)(structAddress + 0x20), resultString != (char *)0x0)) {\n    length1 = strlen(*(char **)(structAddress + 8));\n    length2 = strlen(resultString);\n    stringsAddress = *(long *)(structAddress + 0x28);\n    if (stringsAddress == 0) {\n      resultStringLength = length1 + length2 + 10;\n      stringCount = 0;\n    }\n    else {\n      resultStringLength = length1 + length2 + 0x1e;\n      stringCount = 0;\n      while( true ) {\n        resultString = *(char **)(stringsAddress + stringCount * 8);\n        if (resultString == (char *)0x0) break;\n        length1 = strlen(resultString);\n        stringCount = (ulong)((int)stringCount + 1);\n        resultStringLength = resultStringLength + length1;\n      }\n    }\n    if (*(char **)(structAddress + 0x30) != (char *)0x0) {\n      length1 = strlen(*(char **)(structAddress + 0x30));\n      resultStringLength = resultStringLength + length1;\n    }\n    if (*(char **)(structAddress + 0x38) != (char *)0x0) {\n      length1 = strlen(*(char **)(structAddress + 0x38));\n      resultStringLength = resultStringLength + length1;\n    }\n    resultString = (char *)xmalloc(resultStringLength);\n    structAddress = *(long *)(input + 0x60);\n    strcpy(resultString,*(char **)(structAddress + 8));\n    if (*(long *)(structAddress + 0x28) != 0) {\n      stringIndex = 0;\n      length1 = strlen(resultString);\n      sprintf(resultString + length1,\"!%u,\",stringCount);\n      while( true ) {\n        structAddress = *(long *)(input + 0x60);\n        stringCount = (ulong)stringIndex;\n        tempPointer = *(void **)(structAddress + 0x28);\n        stringPointer = *(char **)((long)tempPointer + stringCount * 8);\n        if (stringPointer == (char *)0x0) break;\n        stringIndex = stringIndex + 1;\n        strcat(resultString,stringPointer);\n        free(*(void **)(*(long *)(structAddress + 0x28) + stringCount * 8));\n      }\n      free(tempPointer);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    structAddress = *(long *)(input + 0x60);\n    strcat(resultString,*(char **)(structAddress + 0x20));\n    free(*(void **)(structAddress + 0x20));\n    structAddress = *(long *)(input + 0x60);\n    *(undefined8 *)(structAddress + 0x20) = 0;\n    if (*(char **)(structAddress + 0x30) != (char *)0x0) {\n      strcat(resultString,*(char **)(structAddress + 0x30));\n      free(*(void **)(structAddress + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    length1 = strlen(resultString);\n    structAddress = *(long *)(input + 0x60);\n    *(undefined2 *)(resultString + length1) = 0x3b;\n    stringPointer = *(char **)(structAddress + 0x38);\n    if (stringPointer != (char *)0x0) {\n      strcpy(resultString + length1 + 1,stringPointer);\n      free(*(void **)(structAddress + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    structAddress = *(long *)(input + 0x60);\n    *(char **)(structAddress + 8) = resultString;\n    returnValue = CONCAT71((int7)((ulong)structAddress >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "strcat",
                "strcpy",
                "sprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_concatenate_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data",
                "iVar1": "index",
                "cVar2": "result",
                "uVar3": "output",
                "puVar4": "ptr1",
                "puVar5": "ptr2"
            },
            "code": "\nundefined8 processData_001135a5(undefined8 input_1,undefined8 input_2,long data)\n\n{\n  int index;\n  char result;\n  undefined8 output;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    result = process_debug_data_00112c1f(input_1,input_2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = process_and_store_string_0010e6a8(input_2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 1:\n    result = process_debug_data_00112c1f(input_1,input_2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = concatenate_strings_0010e7c2(input_2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 2:\n    result = process_debug_data_00112c1f(input_1,input_2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (result != '\\0') {\n      output = process_and_send_data_0010e9a0(input_2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return output;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(data + 0x20);\n    index = *(int *)(data + 0x18);\n    output = *(undefined8 *)(data + 8);\n    result = process_files_00112502(input_1,input_2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((result != '\\0') && (result = process_debug_data_00112c1f(input_1,input_2,*ptr2,0), result != '\\0')) &&\n       (result = process_and_free_string_0010eafe(input_2,output,index == 2), result != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        result = process_debug_data_00112c1f(input_1,input_2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = process_and_free_0010ebb0(input_2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          output = get_one_00108f05(input_2);\n          return output;\n        }\n        result = process_files_recursive_00113a4d(input_1,input_2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    output = create_formatted_string_0010e842(input_2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return output;\n  case 5:\n    output = process_and_free_string_0010e8a9(*(undefined8 *)(data + 0x20),input_2,*(undefined8 *)(data + 8));\n    return output;\n  case 6:\n    result = process_debug_data_00112c1f(input_1,input_2,**(undefined8 **)(data + 0x20),0);\n    if (result != '\\0') {\n      output = process_and_send_data_0010e918(input_2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "abort",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_0010e842",
                "FUN_0010e8a9",
                "FUN_0010eafe",
                "FUN_00113a4d",
                "FUN_00108f05",
                "FUN_0010e9a0",
                "FUN_00112502",
                "FUN_0010e918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_data_001135a5",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_store_string_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = concatenate_strings_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_send_data_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = process_files_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = process_debug_data_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_and_free_string_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = process_debug_data_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_and_free_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = get_one_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = create_formatted_string_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = process_and_free_string_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_send_data_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = get_formatted_string_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = get_formatted_string_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = identify_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_bfd_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_bfd_error_message_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = process_data_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = drop_share_flag_if_output_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = process_data_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = process_data_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_bfd_error_message_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_bfd_error_message_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_bfd_error_message_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = extract_and_process_debug_info_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)create_initialized_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_and_reset_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_and_reset_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_records_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = create_initialized_data_structure_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_and_reset_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_and_reset_memory_00108863();\n      if ((lVar28 != 0) && (cVar10 = process_debug_records_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_and_initialize_data_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = check_and_record_variable_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = process_end_of_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_and_initialize_data_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = record_debug_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debug_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = extract_section_from_binary_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              execute_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_selected_item_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_pattern_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = check_pattern_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_pattern_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = extract_section_from_binary_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            execute_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = parse_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_bfd_error_message_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_and_update_section_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_bfd_error_message_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_bfd_error_message_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_bfd_error_message_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)process_build_attribute_notes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_bfd_error_message_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "printf",
                "bfd_set_file_flags",
                "bfd_get_arch",
                "bfd_set_start_address",
                "dcgettext",
                "bfd_get_mach",
                "FUN_001152b6"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00107976",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_00115530",
                "FUN_0010ae0e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "initialize_data_structure_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "data",
                "iVar2": "result",
                "pcVar3": "returnValue",
                "plVar4": "dataPointer",
                "pcVar5": "message",
                "sVar6": "length",
                "__ptr": "ptr",
                "lVar7": "size",
                "local_40": "localArray"
            },
            "code": "\n\n\nchar * initializeDataStructure_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long param4,\n                   undefined *param5)\n\n{\n  uint data;\n  int result;\n  char *returnValue;\n  long *dataPointer;\n  char *message;\n  size_t length;\n  void *ptr;\n  long size;\n  undefined localArray [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    data = *param3;\n    if (0x29 < data) break;\n    if (0x17 < data) {\n      switch(data) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        returnValue = (char *)initializeDataStructure_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (returnValue != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            returnValue = (char *)initialize_data_00113b4a(returnValue);\n            return returnValue;\n          case 0x1b:\n            returnValue = (char *)initialize_data_with_param_00113b71(returnValue);\n            return returnValue;\n          default:\n                    \n            abort();\n          case 0x22:\n            returnValue = (char *)initialize_or_get_data_00113d3a(returnValue);\n            return returnValue;\n          case 0x23:\n            returnValue = (char *)initialize_data_00113cb9(returnValue);\n            return returnValue;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        returnValue = (char *)cplus_demangle_print(3,param3,0x14,localArray);\n        if (returnValue == (char *)0x0) {\n          message = \"Couldn\\'t get demangled builtin type\\n\";\n          returnValue = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        result = strcmp(returnValue,\"signed char\");\n        if (result == 0) {\nLAB_0010b406:\n          message = (char *)set_param_value_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"bool\");\n        if (result == 0) {\n          message = (char *)initialize_data_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"char\");\n        if (result == 0) goto LAB_0010b406;\n        result = strcmp(returnValue,\"double\");\n        if ((result == 0) || (result = strcmp(returnValue,\"long double\"), result == 0)) {\n          message = (char *)initialize_data_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"float\");\n        if (result == 0) {\n          message = (char *)initialize_data_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"__float128\");\n        if (result == 0) {\n          message = (char *)initialize_data_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"unsigned char\");\n        if (result == 0) {\n          message = (char *)set_param_value_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"int\");\n        if (result == 0) {\nLAB_0010b504:\n          message = (char *)set_param_value_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"unsigned int\");\n        if (result == 0) {\nLAB_0010b528:\n          message = (char *)set_param_value_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"long\");\n        if (result == 0) goto LAB_0010b504;\n        result = strcmp(returnValue,\"unsigned long\");\n        if (result == 0) goto LAB_0010b528;\n        result = strcmp(returnValue,\"__int128\");\n        if (result == 0) {\n          message = (char *)set_param_value_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"unsigned __int128\");\n        if (result == 0) {\n          message = (char *)set_param_value_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"short\");\n        if (result == 0) {\n          message = (char *)set_param_value_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"unsigned short\");\n        if (result == 0) {\n          message = (char *)set_param_value_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"void\");\n        if (result == 0) {\n          message = (char *)initialize_data_00113e17();\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"wchar_t\");\n        if (result == 0) goto LAB_0010b528;\n        result = strcmp(returnValue,\"long long\");\n        if (result == 0) {\n          message = (char *)set_param_value_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"unsigned long long\");\n        if (result == 0) {\n          message = (char *)set_param_value_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(returnValue,\"...\");\n        if (result == 0) {\n          message = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          message = (char *)dcgettext(0,message,5);\n          fprintf(_stderr,message);\n        }\n        message = (char *)0x0;\nLAB_0010b6c6:\n        free(returnValue);\n        return message;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          ptr = (void *)initialize_data_00113e17();\n        }\n        else {\n          ptr = (void *)initializeDataStructure_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          size = demangle_arglist_0010b6ea(param1,param2,*(undefined8 *)(param3 + 6),localArray);\n          if (size != 0) {\n            returnValue = (char *)allocate_data_structure_00113ce0(ptr,size,localArray[0]);\n            return returnValue;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (data != 1) {\n      if (data == 4) {\n        returnValue = (char *)cplus_demangle_print(3,param3,0x14,localArray);\n        message = \"Failed to print demangled template\\n\";\n        if (returnValue != (char *)0x0) {\n          length = strlen(returnValue);\n          message = (char *)find_matching_entry_0010afd5(param1,param2,returnValue,length & 0xffffffff,9);\n          free(returnValue);\n          return message;\n        }\nLAB_0010b3d3:\n        message = (char *)dcgettext(0,message,5);\n        fprintf(_stderr,message);\n        return returnValue;\n      }\n      if (data == 0) {\n        if ((param4 == 0) || (dataPointer = (long *)extract_real_type_and_value_00113b1e(param4), dataPointer == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = initializeDataStructure_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    param5 = (undefined *)0x0;\n  }\n  returnValue = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,returnValue,(ulong)data);\nLAB_0010b38c:\n  returnValue = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return returnValue;\nLAB_0010b1a5:\n  if (*dataPointer == 0) {\nswitchD_0010b158_caseD_18:\n    returnValue = (char *)find_matching_entry_0010afd5(param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return returnValue;\n  }\n  returnValue = *(char **)(*dataPointer + 8);\n  if (returnValue == (char *)0x0) goto LAB_0010b38c;\n  message = (char *)extract_value_from_binary_001129f4(returnValue);\n  if (message != (char *)0x0) {\n    length = strlen(message);\n    if ((param3[6] == (uint)length) &&\n       (result = strncmp(message,*(char **)(param3 + 4),(long)(int)param3[6]), result == 0)) {\n      return returnValue;\n    }\n  }\n  dataPointer = dataPointer + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "FUN_00113b71",
                "abort",
                "FUN_0010afd5",
                "strlen",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113ce0",
                "strcmp",
                "FUN_00113dfe",
                "FUN_0010b0fa",
                "fprintf",
                "FUN_0010b6ea",
                "FUN_00113d3a",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113e17",
                "cplus_demangle_print",
                "FUN_00113b1e",
                "strncmp",
                "FUN_00113cb9",
                "FUN_00112904",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "parse_lines_00104c36",
                "uVar1": "translation",
                "ppbVar2": "slot",
                "pbVar3": "currentChar",
                "in_CL": "currentChar",
                "bVar4": "nextChar",
                "unaff_RBX": "lineStart",
                "unaff_EBP": "lineCount",
                "pbVar5": "line",
                "unaff_R13": "fileName",
                "unaff_R14": "lineEnd",
                "unaff_R15": "lineStart",
                "in_stack_00000008": "dummy1",
                "in_stack_00000010": "dummy2"
            },
            "code": "\nvoid parseLines_00104c36(void)\n\n{\n  undefined8 translation;\n  byte **slot;\n  byte *currentChar;\n  byte currentChar;\n  byte nextChar;\n  byte *lineStart;\n  int lineCount;\n  byte *line;\n  undefined8 fileName;\n  byte *lineEnd;\n  byte *lineStart;\n  undefined8 dummy1;\n  undefined8 *dummy2;\n  \n  do {\n    line = lineStart;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = line[1];\n      line = line + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextChar = line[1];\n      if ((((((nextChar == 9) || (nextChar == 0x20)) &&\n            ((nextChar = line[2], nextChar == 9 || (nextChar == 0x20)))) &&\n           ((nextChar = line[3], nextChar == 9 || (nextChar == 0x20)))) &&\n          ((nextChar = line[4], nextChar == 9 || (nextChar == 0x20)))) &&\n         ((nextChar = line[5], nextChar == 9 || (nextChar == 0x20)))) {\n        nextChar = line[6];\n        currentChar = line + 6;\n        if ((nextChar == 9) || (nextChar == 0x20)) {\n          do {\n            do {\n              nextChar = currentChar[1];\n              currentChar = currentChar + 1;\n            } while (nextChar == 0x20);\n          } while (nextChar == 9);\n        }\n      }\n      if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) {\n        translation = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(translation,dummy1,lineCount);\n      }\n    }\nLAB_00114599:\n    *line = 0;\n    if (lineStart < line) {\n      slot = (byte **)htab_find_slot();\n      *slot = lineStart;\n    }\n    lineCount = lineCount + 1;\n    line = lineStart;\n    if (lineEnd[1] == 0) {\n      *dummy2 = fileName;\n      return;\n    }\n    for (; nextChar = *line, lineEnd = line, nextChar != 10; line = line + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          currentChar = line + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *line = 0;\n          currentChar = line + 1;\n          if (line[1] == 10) {\n            currentChar = line + 2;\n            lineEnd = line + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *line = 0;\n    if (line[1] == 0xd) {\n      lineEnd = line + 1;\n      currentChar = line + 2;\n    }\n    else {\n      currentChar = line + 1;\n    }\nLAB_00114553:\n    currentChar = *lineStart;\n    lineStart = lineStart;\n    while (lineStart = currentChar, currentChar == 0x20) {\nLAB_00104c3f:\n      line = lineStart + 1;\n      lineStart = lineStart + 1;\n      currentChar = lineStart;\n      currentChar = *line;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "extract_and_process_debug_info_0010554f",
                "puVar1": "pPointer",
                "bVar2": "byteVar",
                "pcVar3": "functionPointer",
                "puVar4": "pointerPointer",
                "uVar5": "undefinedVar",
                "uVar6": "ushortVar",
                "cVar7": "charVar",
                "cVar8": "anotherCharVar",
                "uVar9": "undefined4Var",
                "iVar10": "intVar1",
                "iVar11": "intVar2",
                "uVar12": "uintVar1",
                "uVar13": "uintVar2",
                "lVar14": "longVar1",
                "lVar15": "longVar2",
                "lVar23": "anotherLongVar1",
                "lVar25": "anotherLongVar2",
                "in_stack_00000068": "stackVar1",
                "in_stack_000000d8": "stackVar2",
                "in_stack_000000f8": "stackVar3",
                "bVar38": "boolVar",
                "bVar39": "byteVar2",
                "param_7": "paramPointer1",
                "param_8": "paramPointer2",
                "param_9": "paramCharVar1",
                "param_12": "paramVar1",
                "param_13": "paramPointer3",
                "param_14": "paramPointer4",
                "param_15": "paramUintVar",
                "param_17": "paramPointer5",
                "param_21": "paramPointer6",
                "param_23": "paramVar2",
                "param_24": "paramPointer7",
                "param_26": "paramVar3",
                "param_30": "paramPointer8",
                "param_31": "paramUintVar2",
                "param_32": "paramVar4",
                "param_33": "paramPointer9"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 extractAndProcessDebugInfo_0010554f(void)\n\n{\n  uint *pPointer;\n  byte byteVar;\n  code *functionPointer;\n  undefined8 *pointerPointer;\n  undefined undefinedVar;\n  ushort ushortVar;\n  char charVar;\n  char anotherCharVar;\n  undefined4 undefined4Var;\n  int intVar1;\n  int intVar2;\n  uint uintVar1;\n  uint uintVar2;\n  long longVar1;\n  long *plongVar2;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long anotherLongVar1;\n  ulong uVar24;\n  long *panotherLongVar2;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *functionPointer1;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **pfunctionPointer4;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool boolVar;\n  byte byteVar2;\n  long paramPointer1;\n  ulong paramPointer2;\n  char paramCharVar1;\n  undefined4 *__ptr_02;\n  ulong paramVar1;\n  char *paramPointer3;\n  undefined *paramPointer4;\n  uint paramUintVar;\n  long *paramPointer5;\n  undefined8 stackVar1;\n  undefined8 paramPointer6;\n  long paramVar2;\n  char *paramPointer7;\n  long paramVar3;\n  long *paramPointer8;\n  ulong paramUintVar2;\n  long paramVar4;\n  long stackVar2;\n  void *paramPointer9;\n  long param_34;\n  undefined8 stackVar3;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  byteVar2 = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    paramVar1 = 0;\n    paramPointer4 = (undefined *)0x0;\n    paramPointer5 = (long *)0x0;\n    uVar29 = paramVar1;\n  }\n  else {\n    longVar1 = (ulong)stackVar1._4_4_ * 8;\n    paramPointer5 = (long *)xmalloc(longVar1);\n    param_40 = paramPointer5;\n    bfd_map_over_sections(paramPointer1,store_next_value_0010870e,&stack0x00000140);\n    qsort(paramPointer5,(ulong)stackVar1._4_4_,8,compare_and_sort_0010875d);\n    paramPointer4 = (undefined *)xmalloc(longVar1);\n    boolVar = DAT_00127998 != '\\0';\n    puVar33 = paramPointer4;\n    for (; longVar1 != 0; longVar1 = longVar1 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)byteVar2 * -2 + 1;\n    }\n    if (boolVar) {\n      uVar29 = 0;\n      paramVar1 = 0;\n      do {\n        puVar30 = (ulong *)(paramPointer4 + uVar29 * 8);\n        plVar28 = paramPointer5 + uVar29;\n        uVar21 = paramVar1;\n        do {\n          paramVar1 = uVar21;\n          if (stackVar1._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uintVar1 = bfd_octets_per_byte(paramPointer1,*plVar28);\n          uintVar2 = bfd_octets_per_byte(paramPointer1);\n          longVar1 = *plVar28;\n          if ((*(uint *)(longVar1 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uintVar2 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uintVar1 * *(long *)(longVar1 + 0x38) + *(long *)(longVar1 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          charVar = bfd_set_section_size();\n          if (charVar == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_bfd_error_message_001126c0(0,paramPointer1,*plVar28);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (paramVar1 < uVar21);\n      } while( true );\n    }\n    paramVar1 = 0;\nLAB_00107cd1:\n    uVar29 = paramVar1;\n    if (DAT_00127989 != '\\0') {\n      uintVar1 = bfd_octets_per_byte(paramPointer1);\n      longVar1 = paramPointer5[stackVar1._4_4_ - 1];\n      uVar21 = DAT_00127990 * (ulong)uintVar1;\n      uVar24 = *(long *)(longVar1 + 0x40) + (ulong)uintVar1 * *(long *)(longVar1 + 0x38);\n      if (uVar24 < uVar21) {\n        charVar = bfd_set_section_size();\n        if (charVar == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_bfd_error_message_001126c0(0,paramPointer1,paramPointer5[stackVar1._4_4_ - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(paramPointer4 + (ulong)(stackVar1._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= paramVar1) {\n            uVar29 = paramVar1;\n          }\n        }\n      }\n    }\n  }\n  paramVar1 = uVar29;\n  plVar28 = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (longVar1 = 0x18; longVar1 != 0; longVar1 = longVar1 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)byteVar2 * -2 + 1;\n    }\n    paramPointer3 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      longVar1 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((longVar1 != 0) && (lVar37 != 0)) {\n        anotherLongVar1 = *(long *)(longVar1 + 0x40);\n        __ptr_00 = (void *)xmalloc(anotherLongVar1);\n        charVar = bfd_get_section_contents(unaff_R14,longVar1,__ptr_00,0,anotherLongVar1);\n        if (charVar == '\\0') {\n          undefined4Var = bfd_get_error();\n          bfd_errmsg(undefined4Var);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(paramPointer3);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          paramCharVar1 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (paramCharVar1 == '\\0') {\n            undefined4Var = bfd_get_error();\n            bfd_errmsg(undefined4Var);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(paramPointer3);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((paramPointer3 != (char *)0x0) ||\n               (paramPointer3 = (char *)create_initialized_data_structure_00112894(unaff_R14,1,plVar28), paramPointer3 != (char *)0x0)) {\n              paramVar3 = 0;\n              paramVar2 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + anotherLongVar1 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                byteVar = *(byte *)((long)pvVar35 + 4);\n                undefined4Var = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                longVar1 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (byteVar == 0) {\n                  paramVar2 = paramVar3;\n                  paramVar3 = paramVar3 + longVar1;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + paramVar2;\n                  if (uVar24 < uVar29) {\n                    functionPointer1 = (char *)((long)__ptr_01 + uVar24);\n                    paramPointer7 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(functionPointer1);\n                      if (((sVar18 == 0) || (pcVar22 = functionPointer1 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + anotherLongVar1) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      intVar1 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(intVar1 + (int)paramVar2);\n                      if (uVar29 <= uVar21) break;\n                      functionPointer1 = (char *)concat(functionPointer1,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(paramPointer7);\n                      paramPointer7 = functionPointer1;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)byteVar,undefined4Var,longVar1,functionPointer1);\n                    charVar = process_debug_info_0011173a(__ptr_02,paramPointer3,byteVar);\n                    if (charVar == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_and_reset_memory_00108863();\n                      free(paramPointer7);\n                      free(paramPointer3);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    functionPointer1 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,functionPointer1,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)byteVar,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              cleanup_and_reset_memory_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((paramPointer3 != (char *)0x0) && (charVar = process_debug_records_0010c892(), charVar == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      longVar1 = 0;\n      for (plongVar2 = plVar28; plongVar2 < plVar28 + paramPointer2; plongVar2 = plongVar2 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plongVar2,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((longVar1 == 0) && (longVar1 = create_initialized_data_structure_00112894(unaff_R14,0,plVar28), longVar1 == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          functionPointer1 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plongVar2 + 1 < plVar28 + paramPointer2))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plongVar2[1] + 8),0);\n            free(__s);\n            free(functionPointer1);\n            plongVar2 = plongVar2 + 1;\n            functionPointer1 = pcVar22;\n          }\n          update_data_001088ae(param_43,(int)param_44,param_40,pcVar22);\n          paramCharVar1 = process_debug_info_0011173a(__ptr_02,longVar1,param_43);\n          if (paramCharVar1 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_and_reset_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_and_reset_memory_00108863();\n      if ((longVar1 != 0) && (charVar = process_debug_records_0010c892(), charVar == '\\0')) goto LAB_00105981;\n    }\n    if (paramCharVar1 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (paramPointer2 != 0)) {\n        param_40 = (long *)0x0;\n        paramPointer8 = plVar28;\n        paramVar4 = 0;\n        paramUintVar2 = paramPointer2;\n        stackVar2 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (longVar1 = 0x22; longVar1 != 0; longVar1 = longVar1 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)byteVar2 * -8 + 4);\n        }\n        charVar = '\\0';\n        _paramUintVar = (int *)0x0;\n        uintVar1 = 0;\n        paramPointer3 = (char *)0x0;\n        paramPointer7 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)paramPointer2 <= paramVar4) goto LAB_00105590;\n            longVar1 = plVar28[paramVar4];\n            anotherCharVar = bfd_coff_get_syment(unaff_R14,longVar1,&stack0x000000e0);\n            lVar37 = stackVar2;\n            if (anotherCharVar == '\\0') {\n              undefined4Var = bfd_get_error();\n              bfd_errmsg(undefined4Var);\n              functionPointer1 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            functionPointer1 = *(char **)(longVar1 + 8);\n            puVar26 = (undefined8 *)0x0;\n            paramVar4 = paramVar4 + 1;\n            stackVar2 = (ulong)param_37 + 1 + stackVar2;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              anotherCharVar = bfd_coff_get_auxent(unaff_R14,longVar1,0);\n              if (anotherCharVar == '\\0') {\n                undefined4Var = bfd_get_error();\n                bfd_errmsg(undefined4Var);\n                functionPointer1 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (paramPointer7 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              anotherCharVar = initialize_debug_info_0010bbd3(__ptr_02);\n              if (anotherCharVar != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            paramPointer7 = (char *)param_34;\n            anotherCharVar = initialize_debug_info_0010bbd3(__ptr_02);\n            if (anotherCharVar == '\\0') goto LAB_00105981;\n          }\n          ushortVar = stackVar3._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            anotherLongVar1 = parse_and_initialize_data_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (anotherLongVar1 == 0) break;\n            anotherCharVar = check_and_record_variable_00112a33(&stack0x00000140,longVar1,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (stackVar3._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)stackVar3._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _paramUintVar = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uintVar1 = (uint)ushortVar;\n                paramPointer3 = functionPointer1;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              intVar1 = strcmp(functionPointer1,\".bb\");\n              if (intVar1 == 0) {\n                anotherCharVar = debug_start_block_0010be88(__ptr_02);\n              }\n              else {\n                intVar1 = strcmp(functionPointer1,\".eb\");\n                if (intVar1 != 0) goto switchD_00106e1a_caseD_68;\n                anotherCharVar = process_end_of_block_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              intVar1 = strcmp(functionPointer1,\".bf\");\n              if (intVar1 == 0) {\n                if (paramPointer3 != (char *)0x0) {\n                  uintVar2 = (int)uintVar1 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_and_initialize_data_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uintVar2 ^ (uintVar1 ^ uintVar2) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (charVar = record_debug_function_0010bc80(__ptr_02), charVar == '\\0'))\n                  goto LAB_00105981;\n                  if (_paramUintVar != (int *)0x0) {\n                    intVar1 = 0;\n                    if (param_37 != 0) {\n                      intVar1 = param_39 - 1;\n                    }\n                    longVar1 = *(long *)(*(long *)(longVar1 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _paramUintVar[4];\n                      if (iVar27 == 0) break;\n                      anotherCharVar = record_debug_line_0010bf86(__ptr_02,intVar1 + iVar27,\n                                           *(long *)(_paramUintVar + 6) + longVar1);\n                      _paramUintVar = _paramUintVar + 4;\n                      if (anotherCharVar == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uintVar1 = 0;\n                  _paramUintVar = (int *)0x0;\n                  paramPointer3 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                functionPointer1 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar1 = strcmp(functionPointer1,\".ef\");\n                if (intVar1 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar != '\\0') {\n                  charVar = end_debug_function_0010be1a(__ptr_02);\n                  if (charVar == '\\0') goto LAB_00105981;\n                  charVar = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                functionPointer1 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,functionPointer1,5);\n              print_error_message_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (anotherCharVar != '\\0');\n      }\n      else {\n        functionPointer1 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,functionPointer1,5);\n        print_error_message_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(paramPointer1 + 0x44) & 0x42) != 0) && ((*(uint *)(paramPointer1 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(paramPointer1 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (paramPointer2 != 0) {\n        plVar28 = DAT_001278d0 + paramPointer2;\n        plongVar2 = DAT_001278d0;\n        do {\n          uintVar1 = *(uint *)(*plongVar2 + 0x18);\n          if ((uintVar1 & 0x1000000) != 0) {\n            *(uint *)(*plongVar2 + 0x18) = uintVar1 & 0xfeffffff;\n          }\n          plongVar2 = plongVar2 + 1;\n        } while (plVar28 != plongVar2);\n      }\n    }\n    else {\n      for (longVar1 = *(long *)(paramPointer1 + 0x90); longVar1 != 0; longVar1 = *(long *)(longVar1 + 8)) {\n        if (*(long *)(longVar1 + 0xe8) != 0) {\n          pPointer = (uint *)(*(long *)(longVar1 + 0xe8) + 0x18);\n          *pPointer = *pPointer | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      longVar1 = xmalloc();\n      plVar28 = DAT_001278d0;\n      paramUintVar = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = longVar1;\n      if (paramPointer2 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _paramCharVar1 = 0;\n        do {\n          intVar1 = DAT_001279c0;\n          plongVar2 = (long *)plVar28[_paramCharVar1];\n          functionPointer = (code *)plongVar2[4];\n          uintVar1 = *(uint *)(plongVar2 + 3);\n          plVar20 = (long *)plongVar2[1];\n          panotherLongVar2 = plVar20;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279c8;\n            while ((iVar27 < intVar1 && (functionPointer1 = (char *)puVar26[5], functionPointer1 != (char *)0x0))) {\n              if (functionPointer1 != \"\") {\n                intVar2 = strcmp(functionPointer1,(char *)plVar20);\n                if (intVar2 == 0) {\n                  free(functionPointer1);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = extract_section_from_binary_0011a2e0(puVar26);\n                  uVar17 = DAT_001278f0;\n                  *(undefined8 *)(longVar1 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278f0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (intVar1 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), intVar1 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                execute_and_exit_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(DAT_001278f0);\n            if (((lVar37 == 0) || (panotherLongVar2 = *(long **)(lVar37 + 8), plVar20 == panotherLongVar2)) &&\n               (panotherLongVar2 = plVar20, pfunctionPointer4 = DAT_001278f8, (uintVar1 & 0x100) != 0)) {\n              for (; pfunctionPointer4 != (char **)0x0; pfunctionPointer4 = (char **)pfunctionPointer4[3]) {\n                intVar1 = strcmp(*pfunctionPointer4,(char *)plVar20);\n                if (intVar1 == 0) {\n                  panotherLongVar2 = (long *)pfunctionPointer4[1];\n                  break;\n                }\n              }\n            }\n            plongVar2[1] = (long)panotherLongVar2;\n            charVar = *(char *)panotherLongVar2;\n            if (charVar != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            functionPointer1 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(paramPointer1 + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              charVar = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          charVar = *(char *)plVar20;\n          if (charVar == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          functionPointer1 = DAT_00127928;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == charVar) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uintVar1 & 0x82) == 0 && (functionPointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(plongVar2[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              panotherLongVar2 = (long *)((long)panotherLongVar2 + 1);\n              plongVar2[1] = (long)panotherLongVar2;\n              goto joined_r0x00106565;\n            }\n            charVar = *(char *)(*(long *)(paramPointer1 + 8) + 0x1c);\n            if (charVar == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              panotherLongVar2 = (long *)((long)panotherLongVar2 + 1);\n              plongVar2[1] = (long)panotherLongVar2;\n              sVar18 = strlen((char *)panotherLongVar2);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(functionPointer1);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)panotherLongVar2 = charVar;\n            plongVar2[1] = (long)panotherLongVar2;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(paramPointer1 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (functionPointer1 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)panotherLongVar2);\n              sVar19 = strlen(functionPointer1);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              functionPointer1 = DAT_00127928;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (charVar != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)panotherLongVar2);\n              lVar37 = sVar18 + 2;\n              if (functionPointer1 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(paramPointer1 + 8) + 0x1c);\n            }\n            functionPointer1 = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127928);\n              sVar18 = strlen(functionPointer1);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)panotherLongVar2);\n            plongVar2[1] = (long)plVar20;\n            panotherLongVar2 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uintVar1 & 0x20) == 0) &&\n             (((uintVar1 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plongVar2[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((paramUintVar == 0) &&\n                (((uintVar1 & 0x82) != 0 || ((*(byte *)(plongVar2[4] + 0x25) & 0x10) != 0)))) ||\n               (intVar1 = bfd_decode_symclass(plongVar2), intVar1 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = panotherLongVar2;\n                htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uintVar1 & 0x82) == 0) && (functionPointer != bfd_map_over_sections)) &&\n                    ((*(byte *)(plongVar2[4] + 0x25) & 0x10) == 0)) {\n              if ((uintVar1 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plongVar2[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    charVar = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              charVar = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (charVar == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar17);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = panotherLongVar2;\n            htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uintVar1 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = panotherLongVar2;\n              htab_traverse(DAT_00127a10,match_pattern_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uintVar1 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = panotherLongVar2;\n              htab_traverse(DAT_00127a28,match_pattern_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            charVar = check_selected_item_001159d0(plongVar2[4]);\n            if (charVar == '\\0') {\n              if (((uintVar1 & 0x800002) == 0) && (functionPointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uintVar1 & 0x82) != 0) {\n                  charVar = check_pattern_00115d70(panotherLongVar2);\n                  if ((charVar == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279f8), lVar37 == 0 ||\n                      (charVar = check_pattern_00115d70(panotherLongVar2), charVar != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uintVar2 = *(uint *)(plongVar2 + 3), (uintVar2 & 0x200000) != 0)) ||\n                         (lVar37 = *plongVar2, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plongVar2 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uintVar2 = *(uint *)(plongVar2 + 3);\n                  }\n                  *(uint *)(plongVar2 + 3) = uintVar2 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uintVar1 & 1) != 0) && (charVar = check_pattern_00115d70(panotherLongVar2), charVar != '\\0')) {\n                  *(uint *)(plongVar2 + 3) = *(uint *)(plongVar2 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (charVar = check_pattern_00115d70(panotherLongVar2), charVar != '\\0')) {\n                  *(uint *)(plongVar2 + 3) = *(uint *)(plongVar2 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (functionPointer != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(longVar1 + uVar29 * 8) = plongVar2;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _paramCharVar1 = _paramCharVar1 + 1;\n        } while (paramPointer2 != _paramCharVar1);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279c8;\n        intVar1 = DAT_001279c0;\n        for (lVar37 = 0; lVar37 < intVar1; lVar37 = lVar37 + 1) {\n          functionPointer1 = (char *)puVar26[5];\n          if (functionPointer1 == (char *)0x0) {\n            anotherLongVar1 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = extract_section_from_binary_0011a2e0(puVar26,paramPointer1);\n            *(undefined8 *)(longVar1 + anotherLongVar1) = uVar17;\n            intVar1 = DAT_001279c0;\n          }\n          else if (functionPointer1 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            execute_and_exit_00119dd0(uVar17,functionPointer1);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      boolVar = DAT_001279a0 == '\\0';\n      *(undefined8 *)(longVar1 + uVar29 * 8) = 0;\n      if ((boolVar) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        paramPointer2 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      intVar1 = *(int *)(*(undefined8 **)(paramPointer1 + 8) + 1);\n      if ((intVar1 == 5) || (intVar1 == 2)) {\n        paramPointer9 = (void *)0x0;\n        charVar = parse_binary_0011378f(paramPointer1,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (charVar != '\\0') {\n          longVar1 = bfd_make_section_with_flags(paramPointer1,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(paramPointer1,\".stabstr\",0x2108);\n          if ((((longVar1 == 0) || (lVar37 == 0)) ||\n              (charVar = bfd_set_section_size(longVar1,param_38), charVar == '\\0')) ||\n             (charVar = bfd_set_section_size(lVar37,param_40), charVar == '\\0')) {\n            functionPointer1 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(longVar1 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            charVar = bfd_set_section_contents(paramPointer1,longVar1,paramPointer8,0,param_38);\n            if ((charVar != '\\0') &&\n               (charVar = bfd_set_section_contents(paramPointer1,lVar37,paramPointer9,0,param_40), charVar != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            functionPointer1 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,functionPointer1,5);\n          print_bfd_error_message_001126c0(0,paramPointer1,0,uVar17);\n          free(paramPointer9);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(paramPointer1 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,paramPointer1,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,process_relocs_00116030,DAT_001278d0);\n      intVar1 = bfd_get_error();\n      if (intVar1 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    longVar1 = htab_elements(DAT_00127a18);\n    if (((longVar1 != 0) ||\n        ((((longVar1 = htab_elements(DAT_00127a28), longVar1 != 0 ||\n           (longVar1 = htab_elements(DAT_00127a08), longVar1 != 0)) ||\n          (longVar1 = htab_elements(DAT_00127a00), longVar1 != 0)) ||\n         ((longVar1 = htab_elements(DAT_001279f8), longVar1 != 0 ||\n          (longVar1 = htab_elements(DAT_001279f0), longVar1 != 0)))))) ||\n       ((((longVar1 = htab_elements(DAT_001278f0), longVar1 != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(paramPointer1,DAT_001278c8,paramPointer2 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,paramPointer1);\n    bfd_map_over_sections(unaff_R14,process_and_update_section_00116110,paramPointer1);\n    for (puVar26 = DAT_001279e0; pointerPointer = DAT_001279d8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      charVar = bfd_set_section_contents(paramPointer1,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (charVar == '\\0') {\n        print_bfd_error_message_001126c0(0,paramPointer1,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; pointerPointer != (undefined8 *)0x0; pointerPointer = (undefined8 *)*pointerPointer) {\n      uVar17 = *(undefined8 *)(pointerPointer[5] + 0x60);\n      charVar = bfd_set_section_contents(paramPointer1,uVar17,pointerPointer[4],0,pointerPointer[3]);\n      if (charVar == '\\0') {\n        print_bfd_error_message_001126c0(0,paramPointer1,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(paramPointer1 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(paramPointer1 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (charVar = string_comparison_00113fb0(*puVar26,\".gnu.build.attributes\"), charVar != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plongVar2 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            functionPointer1 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              charVar = bfd_set_section_contents(paramPointer1,puVar26,plVar28[1],0,plVar28[2]);\n              if (charVar == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_bfd_error_message_001126c0(0,paramPointer1,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plongVar2;\n              if (*(undefined8 **)(*plongVar2 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plongVar2[3];\n              plongVar2 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            functionPointer1 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,functionPointer1,5);\n          print_bfd_error_message_001126c0(0,paramPointer1,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (charVar = bfd_fill_in_gnu_debuglink_section(paramPointer1,paramPointer6), longVar1 = DAT_00127a30,\n       charVar != '\\0')) {\n      if (paramPointer4 != (undefined *)0x0) {\n        if (0x2000 < paramVar1) {\n          paramVar1 = 0x2000;\n        }\n        longVar1 = 0;\n        __ptr = (undefined *)xmalloc(paramVar1);\n        undefinedVar = DAT_00127999;\n        puVar33 = __ptr;\n        for (paramVar1 = paramVar1 & 0xffffffff; paramVar1 != 0; paramVar1 = paramVar1 - 1) {\n          *puVar33 = undefinedVar;\n          puVar33 = puVar33 + (ulong)byteVar2 * -2 + 1;\n        }\n        for (; (uint)longVar1 < stackVar1._4_4_; longVar1 = longVar1 + 1) {\n          uVar29 = *(ulong *)(paramPointer4 + longVar1 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*paramPointer5 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              charVar = bfd_set_section_contents(paramPointer1,*paramPointer5,__ptr,lVar37,uVar21);\n              if (charVar == '\\0') {\n                print_bfd_error_message_001126c0(0,paramPointer1,*paramPointer5,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          paramPointer5 = paramPointer5 + 1;\n        }\n        free(__ptr);\n        free(paramPointer4);\n      }\n      undefined4Var = (**(code **)(*(long *)(paramPointer1 + 8) + 0x140))(unaff_R14);\n      if ((char)undefined4Var != '\\0') {\n        if (DAT_00127930 == 0) {\n          return undefined4Var;\n        }\n        charVar = bfd_alt_mach_code(paramPointer1,DAT_00127930 & 0xffffffff);\n        uVar29 = DAT_00127930;\n        if (charVar == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(paramPointer1 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar17);\n            *(short *)(*(long *)(paramPointer1 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return undefined4Var;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar17);\n          return undefined4Var;\n        }\n        return undefined4Var;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,paramPointer1,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,paramPointer1,0,uVar17,longVar1);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "dcgettext",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "bfd_get_section_by_name",
                "bfd_coff_get_auxent",
                "FUN_0010be1a",
                "bfd_coff_get_syment",
                "bfd_get_section_contents",
                "FUN_00113fb0",
                "FUN_0011378f",
                "htab_traverse",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010870e",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "FUN_0011a2e0",
                "htab_elements",
                "bfd_alt_mach_code",
                "bfd_errmsg",
                "FUN_001159d0",
                "xmalloc",
                "bfd_get_error",
                "bfd_map_over_sections",
                "bfd_set_error",
                "FUN_0010bf20",
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_00115d70",
                "FUN_00108863",
                "FUN_0011a170",
                "bfd_make_section_with_flags",
                "qsort",
                "bfd_set_symtab",
                "FUN_00112894",
                "FUN_0011173a",
                "bfd_map_over_sections",
                "strlen",
                "FUN_00116110",
                "bfd_is_local_label",
                "strcpy",
                "bfd_set_section_contents",
                "strcmp",
                "bfd_octets_per_byte",
                "htab_find",
                "FUN_00116030",
                "bfd_set_section_size",
                "fprintf",
                "FUN_00115dc0",
                "FUN_0010c892",
                "FUN_001126c0",
                "free",
                "bfd_decode_symclass",
                "FUN_001088ae",
                "FUN_0010875d",
                "FUN_0010be88",
                "xstrdup",
                "FUN_00119dd0",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_and_process_debug_info_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "initialize_data_structure_00109cf4",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "flag",
                "local_3c": "formatted_value"
            },
            "code": "\nvoid initialize_data_structure_00109cf4(undefined8 data_structure,undefined8 value,undefined4 flag)\n\n{\n  char formatted_value [28];\n  \n  sprintf(formatted_value,\"%ld\",value);\n  initialize_data_structure_00109cf4_00109b52(data_structure,formatted_value,value,0,flag);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_00109dfe",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d97",
                "FUN_0010bba1",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_stab_info_00109ab1",
                "param_1": "stab_info_ptr",
                "param_2": "output_ptr",
                "param_3": "value_1",
                "param_4": "value_2",
                "uVar1": "parsed_value",
                "pcVar2": "current_char_ptr",
                "uVar3": "return_value",
                "auVar4": "result",
                "print_bad_stab_message_00108fb9": "print_error_message",
                "parse_numeric_string_00109a32": "parse_numeric_string"
            },
            "code": "\nundefined  [16]\nparse_stab_info_00109ab1(char **stab_info_ptr,undefined4 *output_ptr,undefined8 value_1,undefined8 value_2,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_value;\n  char *current_char_ptr;\n  undefined8 return_value;\n  undefined result [16];\n  \n  current_char_ptr = *stab_info_ptr;\n  if (*current_char_ptr == '(') {\n    *stab_info_ptr = current_char_ptr + 1;\n    parsed_value = parse_numeric_string(stab_info_ptr,0);\n    *output_ptr = parsed_value;\n    if (**stab_info_ptr == ',') {\n      *stab_info_ptr = *stab_info_ptr + 1;\n      parsed_value = parse_numeric_string(stab_info_ptr,0,value_1);\n      output_ptr[1] = parsed_value;\n      if (**stab_info_ptr == ')') {\n        current_char_ptr = *stab_info_ptr + 1;\n        *stab_info_ptr = current_char_ptr;\n        goto LAB_00109b25;\n      }\n    }\n    print_error_message(current_char_ptr);\n    return_value = 0;\n  }\n  else {\n    *output_ptr = 0;\n    current_char_ptr = (char *)parse_numeric_string(stab_info_ptr,0);\n    output_ptr[1] = (int)current_char_ptr;\nLAB_00109b25:\n    return_value = CONCAT71((int7)((ulong)current_char_ptr >> 8),1);\n  }\n  result._8_8_ = param_5;\n  result._0_8_ = return_value;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_stab_info_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_selected_item_001159d0",
                "param_1": "input_param",
                "uVar1": "selected_item",
                "cVar2": "pattern_check_result",
                "uVar3": "section_options_result",
                "lVar4": "item_index",
                "lVar5": "current_item",
                "check_section_options_00115b70": "check_section_options",
                "get_selected_item_index_00115d00": "get_selected_item_index",
                "check_pattern_00115d70": "check_pattern"
            },
            "code": "\nundefined4 check_selected_item_001159d0(long input_param)\n\n{\n  undefined8 selected_item;\n  char pattern_check_result;\n  undefined4 section_options_result;\n  long item_index;\n  long current_item;\n  \n  section_options_result = check_section_options();\n  if ((char)section_options_result == '\\0') {\n    if ((*(byte *)(input_param + 0x27) & 2) == 0) {\n      return section_options_result;\n    }\n    item_index = get_selected_item_index(*(undefined8 *)(input_param + 0xd0),*(undefined8 *)(input_param + 0xe0));\n    if ((item_index != 0) &&\n       (((selected_item = *(undefined8 *)(item_index + 8), DAT_00127a48 != 7 ||\n         (pattern_check_result = check_pattern(selected_item,DAT_00127a28), pattern_check_result != '\\0')) &&\n        (pattern_check_result = check_pattern(selected_item,DAT_00127a18), pattern_check_result == '\\0')))) {\n      item_index = *(long *)(*(long *)(input_param + 0xd0) + 0xc0);\n      current_item = item_index;\n      do {\n        if (current_item == 0) {\n          return 1;\n        }\n        pattern_check_result = check_section_options(current_item);\n        if (pattern_check_result == '\\0') {\n          return section_options_result;\n        }\n        current_item = *(long *)(*(long *)(current_item + 0xd0) + 0xc0);\n      } while (item_index != current_item);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_00115d70",
                "FUN_00115b70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_selected_item_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "initialize_data_structure_0010a77a",
                "param_1": "data",
                "uVar1": "value",
                "lVar2": "ptr",
                "__s": "str",
                "uVar3": "value2",
                "uVar4": "result",
                "__s_00": "str_1",
                "sVar5": "len_1",
                "sVar6": "len_2",
                "__s_01": "combinedStr"
            },
            "code": "\nundefined4 initializeDataStructure_0010a77a(long data)\n\n{\n  undefined value;\n  long ptr;\n  char *str;\n  undefined8 value2;\n  undefined4 result;\n  char *str_1;\n  size_t len_1;\n  size_t len_2;\n  char *combinedStr;\n  \n  ptr = *(long *)(data + 0x60);\n  if ((ptr != 0) && (str = *(char **)(ptr + 0x20), str != (char *)0x0)) {\n    result = *(undefined4 *)(ptr + 0x18);\n    value = *(undefined *)(ptr + 0x1c);\n    value2 = *(undefined8 *)(ptr + 0x10);\n    str_1 = (char *)extract_and_free_ptr_00109b2f();\n    len_1 = strlen(str_1);\n    len_2 = strlen(str);\n    combinedStr = (char *)xmalloc(len_1 + 2 + len_2);\n    sprintf(combinedStr,\"%s%s;\",str_1,str);\n    free(str_1);\n    free(str);\n    result = initialize_data_structure_00109b52(data,combinedStr,value2,value,result);\n    if ((char)result != '\\0') {\n      free(combinedStr);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_file_and_exit_on_error_0010543c",
                "unaff_RBP": "basePointer",
                "piVar2": "errorLocation",
                "pcVar3": "errorMsg",
                "uVar1": "fileDescriptor",
                "uVar4": "errorMessage"
            },
            "code": "\nvoid openFileAndExitOnError_0010543c(void)\n\n{\n  undefined8 fileDescriptor;\n  int *errorLocation;\n  char *errorMsg;\n  undefined8 errorMessage;\n  long basePointer;\n  \n  errorLocation = __errno_location();\n  errorMsg = strerror(*errorLocation);\n  fileDescriptor = *(undefined8 *)(basePointer + 0x10);\n  errorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  execute_and_exit_00119dd0(errorMessage,fileDescriptor,errorMsg);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "open_file_and_exit_on_error_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "process_data_0010a424",
                "param_1": "inputData",
                "param_2": "flag",
                "param_3": "size",
                "param_4": "additionalFlag",
                "cVar1": "result",
                "bVar2": "tempByte",
                "iVar3": "tempSize",
                "uVar4": "returnValue",
                "pcVar5": "ptr1",
                "__ptr": "ptrArray",
                "uVar6": "tempValue",
                "__s": "ptr2",
                "sVar7": "size1",
                "sVar8": "size2",
                "__s_00": "resultString",
                "lVar9": "index",
                "bVar10": "flag2",
                "lVar11": "loopIndex",
                "uVar12": "newFlag"
            },
            "code": "\nundefined4 processData_0010a424(long inputData,char flag,int size,char additionalFlag)\n\n{\n  char result;\n  byte tempByte;\n  int tempSize;\n  undefined4 returnValue;\n  char *ptr1;\n  undefined8 *ptrArray;\n  undefined8 tempValue;\n  char *ptr2;\n  size_t size1;\n  size_t size2;\n  char *resultString;\n  long index;\n  byte flag2;\n  long loopIndex;\n  undefined newFlag;\n  \n  if ((flag == '\\0') && (result = initialize_or_increment_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  flag2 = *(byte *)(*(long *)(inputData + 0x60) + 0x1c);\n  ptr1 = (char *)extract_and_free_ptr_00109b2f(inputData);\n  if (size < 0) {\n    ptrArray = (undefined8 *)0x0;\n    size = 0;\nLAB_0010a582:\n    newFlag = 1;\n    if (flag2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (size != 0) {\n      tempSize = size + 1;\n      ptrArray = (undefined8 *)xmalloc((long)tempSize * 8);\n      index = (long)(size + -1);\n      do {\n        tempByte = 1;\n        if (flag2 == 0) {\n          tempByte = *(byte *)(*(long *)(inputData + 0x60) + 0x1c);\n        }\n        tempValue = extract_and_free_ptr_00109b2f(inputData);\n        flag2 = tempByte & 1;\n        ptrArray[index] = tempValue;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (additionalFlag == '\\0') {\n        result = initialize_or_increment_00109d97(inputData);\n        if (result == '\\0') {\n          return 0;\n        }\n        tempByte = 1;\n        if (flag2 == 0) {\n          tempByte = *(byte *)(*(long *)(inputData + 0x60) + 0x1c);\n        }\n        flag2 = tempByte & 1;\n        tempValue = extract_and_free_ptr_00109b2f(inputData);\n        ptrArray[(long)tempSize + -1] = tempValue;\n        size = tempSize;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArray = (undefined8 *)0x0;\n    if (additionalFlag != '\\0') goto LAB_0010a582;\n    ptrArray = (undefined8 *)xmalloc(8);\n    result = initialize_or_increment_00109d97(inputData);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((flag2 != 0) || (*(char *)(*(long *)(inputData + 0x60) + 0x1c) != '\\0')) {\n      tempValue = extract_and_free_ptr_00109b2f(inputData);\n      size = 1;\n      newFlag = 1;\n      *ptrArray = tempValue;\n      goto LAB_0010a596;\n    }\n    tempValue = extract_and_free_ptr_00109b2f(inputData);\n    size = 1;\n    *ptrArray = tempValue;\n  }\n  newFlag = *(undefined *)(*(long *)(inputData + 0x60) + 0x1c);\nLAB_0010a596:\n  ptr2 = (char *)extract_and_free_ptr_00109b2f(inputData);\n  size1 = strlen(ptr1);\n  size2 = strlen(ptr2);\n  index = size1 + 10 + size2;\n  for (loopIndex = 0; (int)loopIndex < size; loopIndex = loopIndex + 1) {\n    size1 = strlen((char *)ptrArray[loopIndex]);\n    index = index + size1;\n  }\n  resultString = (char *)xmalloc(index);\n  sprintf(resultString,\"#%s,%s\",ptr1,ptr2);\n  index = 0;\n  free(ptr1);\n  free(ptr2);\n  while( true ) {\n    size1 = strlen(resultString);\n    if (size <= (int)index) break;\n    *(undefined2 *)(resultString + size1) = 0x2c;\n    ptr1 = (char *)ptrArray[index];\n    index = index + 1;\n    strcpy(resultString + size1 + 1,ptr1);\n    free(ptr1);\n  }\n  *(undefined2 *)(resultString + size1) = 0x3b;\n  free(ptrArray);\n  returnValue = initialize_data_structure_00109b52(inputData,resultString,0,newFlag,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(resultString);\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "FUN_00109d97",
                "strcpy",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_binutils_version_00119970",
                "param_1": "compilerName",
                "pcVar1": "message"
            },
            "code": "\nvoid printBinutilsVersion_00119970(undefined8 compilerName)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",compilerName,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "exit",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_binutils_version_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_parameter_00114c80",
                "param_1": "input_string",
                "param_2": "param_a",
                "param_3": "param_b",
                "param_4": "param_c",
                "pcVar1": "equal_sign_position",
                "uVar2": "result",
                "auVar3": "parsed_data"
            },
            "code": "\nundefined  [16] parse_parameter_00114c80(char *input_string,undefined8 param_a,undefined8 param_b,undefined8 param_c)\n\n{\n  char *equal_sign_position;\n  undefined8 result;\n  undefined parsed_data [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    parsed_data._0_8_ = (undefined8 *)xmalloc(0x30);\n    result = copy_string_with_null_terminator_0011a480(input_string,(long)equal_sign_position - (long)input_string);\n    parsed_data._0_8_[2] = equal_sign_position + 1;\n    parsed_data._0_8_[1] = result;\n    parsed_data._0_8_[4] = 0;\n    parsed_data._0_8_[3] = 0;\n    *parsed_data._0_8_ = param_a;\n    parsed_data._8_8_ = param_c;\n    return parsed_data;\n  }\n  result = dcgettext(0,\"bad format for %s\",5);\n                    \n  execute_and_exit_00119dd0(result,param_b);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_001053b5",
                "FUN_0011a480",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_parameter_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "store_next_value_0010870e",
                "param_1": "valueToStore",
                "param_2": "newValue",
                "param_3": "arrayPtr",
                "puVar1": "nextValuePtr"
            },
            "code": "\nvoid storeNextValue_0010870e(undefined8 valueToStore,undefined8 newValue,long *arrayPtr)\n\n{\n  undefined8 *nextValuePtr;\n  \n  nextValuePtr = (undefined8 *)*arrayPtr;\n  *nextValuePtr = newValue;\n  *arrayPtr = (long)(nextValuePtr + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "store_next_value_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_and_initialize_data_0010dac0",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "param_5": "arg_5",
                "param_6": "arg_6",
                "param_7": "arg_7",
                "param_8": "arg_8",
                "lVar1": "data",
                "cVar2": "flag",
                "uVar3": "error_code",
                "uVar4": "result",
                "lVar5": "output",
                "uVar6": "error_message",
                "plVar7": "pointer",
                "__ptr": "ptr_1",
                "__ptr_00": "ptr_2",
                "bVar8": "byte_value",
                "iVar9": "index",
                "pcVar10": "data_type",
                "uVar11": "bit_mask",
                "lVar12": "loop_counter",
                "uVar13": "computed_value_1",
                "uVar14": "computed_value_2",
                "uVar15": "value",
                "local_68": "local_buffer",
                "local_48": "local_char",
                "local_47": "local_byte"
            },
            "code": "\nlong parse_and_initialize_data_0010dac0(long arg_1,long *arg_2,long arg_3,undefined8 arg_4,uint arg_5,\n                 long *arg_6,char arg_7,undefined8 arg_8)\n\n{\n  long data;\n  char flag;\n  undefined4 error_code;\n  undefined8 result;\n  long output;\n  undefined8 error_message;\n  long *pointer;\n  void *ptr_1;\n  void *ptr_2;\n  byte byte_value;\n  int index;\n  char *data_type;\n  ulong bit_mask;\n  long loop_counter;\n  uint computed_value_1;\n  uint computed_value_2;\n  undefined8 value;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  output = *(long *)(arg_1 + 0x110);\n  if ((~*(uint *)(output + 0x38) & arg_5) != 0) {\n    computed_value_1 = (int)arg_5 >> ((byte)*(undefined4 *)(output + 0x44) & 0x1f);\n    bit_mask = (ulong)(arg_5 & *(uint *)(output + 0x40));\n    byte_value = (byte)*(undefined4 *)(output + 0x3c);\n    computed_value_1 = (computed_value_1 ^ arg_5) & *(uint *)(output + 0x38) ^ computed_value_1;\n    if (bit_mask == 1L << (byte_value & 0x3f)) {\n      result = parse_and_initialize_data_0010dac0(arg_1,arg_2,arg_3,arg_4,computed_value_1,arg_6,arg_7,arg_8);\n      output = initialize_or_get_data_00113d3a(result);\n      return output;\n    }\n    if (bit_mask != 2L << (byte_value & 0x3f)) {\n      if (bit_mask != 3L << (byte_value & 0x3f)) {\n        result = dcgettext(0,\"parse_coff_type: Bad type code 0x%x\",5,*(undefined4 *)(output + 0x3c),\n                          computed_value_1);\n        print_error_message_00119ed0(result,arg_5);\n        return 0;\n      }\n      computed_value_2 = 0;\n      if (arg_6 != (long *)0x0) {\n        computed_value_2 = (uint)*(ushort *)(arg_6 + 2);\n        pointer = arg_6 + 2;\n        for (index = 0; (*(short *)pointer != 0 && (index != 3)); index = index + 1) {\n          *(short *)pointer = *(short *)((long)pointer + 2);\n          pointer = (long *)((long)pointer + 2);\n        }\n        *(short *)pointer = 0;\n      }\n      value = 0;\n      result = arg_8;\n      error_message = parse_and_initialize_data_0010dac0(arg_1,arg_2,arg_3,arg_4,computed_value_1,arg_6,0);\n      output = *(long *)(arg_3 + 0x28);\n      if (output == 0) {\n        result = set_param_value_00113dfe(4,0,value,result);\n        output = initialize_debug_name_type_0010c218(arg_8,\"int\",result);\n        *(long *)(arg_3 + 0x28) = output;\n      }\n      output = initialize_and_allocate_data_00113c43(error_message,output,0,(long)(int)(computed_value_2 - 1),0);\n      return output;\n    }\n    result = parse_and_initialize_data_0010dac0(arg_1,arg_2,arg_3,arg_4,computed_value_1,arg_6,arg_7,arg_8);\n    output = allocate_data_structure_00113ce0(result,0,0);\n    return output;\n  }\n  if ((arg_6 != (long *)0x0) && (0 < *arg_6)) {\n    pointer = (long *)allocate_and_initialize_slots_0010da0b(arg_3);\n    if (*pointer != 0) {\n      return *pointer;\n    }\n    output = create_data_entry_00113e23(pointer,0);\n    return output;\n  }\n  if (arg_7 == '\\0') {\n    arg_6 = (long *)0x0;\n  }\n  if (0x10 < arg_5) {\n    output = initialize_data_00113e17();\n    return output;\n  }\n  output = *(long *)(arg_3 + 8 + (long)(int)arg_5 * 8);\n  if (output != 0) {\n    return output;\n  }\n  switch(arg_5) {\n  default:\n    result = initialize_data_00113e17();\n    data_type = \"void\";\n    break;\n  case 2:\n    result = set_param_value_00113dfe(1,0);\n    data_type = \"char\";\n    break;\n  case 3:\n    result = set_param_value_00113dfe(2,0);\n    data_type = \"short\";\n    break;\n  case 4:\n    result = set_param_value_00113dfe(4,0);\n    data_type = \"int\";\n    break;\n  case 5:\n    result = set_param_value_00113dfe(4,0);\n    data_type = \"long\";\n    break;\n  case 6:\n    result = initialize_data_00113df2(4);\n    data_type = \"float\";\n    break;\n  case 7:\n    result = initialize_data_00113df2(8);\n    data_type = \"double\";\n    break;\n  case 8:\n    if (arg_6 == (long *)0x0) {\n      output = initialize_and_allocate_memory_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    result = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (arg_6 == (long *)0x0) {\n      output = initialize_and_allocate_memory_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    result = 9;\nLAB_0010de7a:\n    output = process_binary_file_0010e07c(arg_1,arg_2,arg_3,result,arg_6,arg_8);\nLAB_0010e046:\n    pointer = (long *)allocate_and_initialize_slots_0010da0b(arg_3,arg_4);\n    *pointer = output;\n    return output;\n  case 10:\n    if (arg_6 == (long *)0x0) {\n      output = create_data_structure_00113d6e(0,0);\n    }\n    else {\n      output = arg_6[3];\n      ptr_1 = (void *)xmalloc(0x50);\n      ptr_2 = (void *)xmalloc(0x50);\n      loop_counter = 0;\n      do {\n        while( true ) {\n          if ((output <= arg_2[3]) || (arg_2[1] <= arg_2[2])) goto LAB_0010e032;\n          index = (int)loop_counter;\n          data = *(long *)(*arg_2 + arg_2[2] * 8);\n          flag = bfd_coff_get_syment(arg_1,data,local_buffer);\n          loop_counter = (long)index;\n          if (flag == '\\0') {\n            error_code = bfd_get_error();\n            result = bfd_errmsg(error_code);\n            error_message = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_message_00119ed0(error_message,result);\n            free(ptr_1);\n            free(ptr_2);\n            output = 0;\n            goto LAB_0010e046;\n          }\n          arg_2[2] = arg_2[2] + 1;\n          arg_2[3] = (ulong)local_byte + 1 + arg_2[3];\n          if (local_char != '\\x10') break;\n          if ((int)arg_5 <= index + 1) {\n            arg_5 = arg_5 + 10;\n            ptr_1 = (void *)xrealloc(ptr_1);\n            ptr_2 = (void *)xrealloc(ptr_2,(long)(int)arg_5 << 3);\n          }\n          loop_counter = *(long *)(data + 0x20);\n          *(undefined8 *)((long)ptr_1 + (long)index * 8) = *(undefined8 *)(data + 8);\n          *(long *)((long)ptr_2 + (long)index * 8) =\n               *(long *)(data + 0x10) + *(long *)(loop_counter + 0x30);\n          loop_counter = (long)(index + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr_1 + loop_counter * 8) = 0;\n      output = create_data_structure_00113d6e(ptr_1,ptr_2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    output = initialize_data_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    result = set_param_value_00113dfe(1,1);\n    data_type = \"unsigned char\";\n    break;\n  case 0xd:\n    result = set_param_value_00113dfe(2,1);\n    data_type = \"unsigned short\";\n    break;\n  case 0xe:\n    result = set_param_value_00113dfe(4,1);\n    data_type = \"unsigned int\";\n    break;\n  case 0xf:\n    result = set_param_value_00113dfe(4,1);\n    data_type = \"unsigned long\";\n    break;\n  case 0x10:\n    result = initialize_data_00113df2(0xc);\n    data_type = \"long double\";\n  }\n  output = initialize_debug_name_type_0010c218(arg_8,data_type,result);\nLAB_0010e065:\n  *(long *)(arg_3 + 8 + (long)(int)arg_5 * 8) = output;\n  return output;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_0010e07c",
                "FUN_00113da9",
                "FUN_00113c43",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_00113dfe",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xmalloc",
                "FUN_00113d6e",
                "FUN_00113d3a",
                "FUN_0010dac0",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_0010da0b",
                "FUN_00113e23",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_and_initialize_data_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "__n": "length",
                "extraout_var": "extraout",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  size_t length;\n  undefined4 extraout;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extraout,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00114c20",
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00108c86",
                "FUN_00113ede",
                "FUN_00107880",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_error_message_0010882c",
                "piVar1": "errnoLocation",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printErrorMessage_0010882c(void)\n\n{\n  int *errnoLocation;\n  undefined8 errorMessage;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_00119ed0(errorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_error_message_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "process_and_free_0010ebb0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "cVar1": "charVar",
                "__s": "extractedString",
                "sVar4": "input2Length",
                "sVar5": "extractedStringLength",
                "__s_00": "combinedString",
                "uVar2": "param3MinusOne",
                "uVar3": "returnValue"
            },
            "code": "\nundefined4 processAndFree_0010ebb0(undefined8 input_1,char *input_2,int input_3,undefined8 input_4)\n\n{\n  char charVar;\n  uint param3MinusOne;\n  undefined4 returnValue;\n  char *extractedString;\n  size_t input2Length;\n  size_t extractedStringLength;\n  char *combinedString;\n  \n  extractedString = (char *)extract_and_free_ptr_00109b2f();\n  param3MinusOne = input_3 - 1;\n  if (param3MinusOne < 4) {\n    returnValue = *(undefined4 *)(&DAT_00121340 + (ulong)param3MinusOne * 4);\n    charVar = (&DAT_00121334)[param3MinusOne];\n    input2Length = strlen(input_2);\n    extractedStringLength = strlen(extractedString);\n    combinedString = (char *)xmalloc(input2Length + 3 + extractedStringLength);\n    sprintf(combinedString,\"%s:%c%s\",input_2,(ulong)(uint)(int)charVar,extractedString);\n    free(extractedString);\n    returnValue = process_string_0010e2f0(input_1,returnValue,0,input_4,combinedString);\n    if ((char)returnValue != '\\0') {\n      free(combinedString);\n    }\n    return returnValue;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "initialize_and_store_data_00113b98",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "lVar1": "data_ptr",
                "plVar2": "allocated_ptr"
            },
            "code": "\nlong initialize_and_store_data_00113b98(long input_1,long input_2,long input_3,undefined input_4)\n\n{\n  long data_ptr;\n  long *allocated_ptr;\n  \n  if ((input_1 != 0) && (data_ptr = initialize_data_00112904(0x13,0), data_ptr != 0)) {\n    allocated_ptr = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocated_ptr + 0x19) = 0;\n    *allocated_ptr = input_1;\n    *(undefined4 *)((long)allocated_ptr + 0x1c) = 0;\n    allocated_ptr[1] = input_2;\n    allocated_ptr[2] = input_3;\n    *(undefined *)(allocated_ptr + 3) = input_4;\n    *(long **)(data_ptr + 0x10) = allocated_ptr;\n    return data_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_store_data_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_pattern_00115d70",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "result",
                "local_18": "temp1",
                "local_10": "isPatternMatch"
            },
            "code": "\nundefined checkPattern_00115d70(undefined8 input1,undefined8 input2)\n\n{\n  long result;\n  undefined8 temp1;\n  undefined isPatternMatch;\n  \n  if (DAT_001279ea == '\\0') {\n    result = htab_find(input2,input1);\n    isPatternMatch = result != 0;\n  }\n  else {\n    isPatternMatch = 0;\n    temp1 = input1;\n    htab_traverse(input2,match_pattern_0011a170,&temp1);\n  }\n  return isPatternMatch;\n}\n\n",
            "called": [
                "htab_traverse",
                "FUN_0011a170",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001082df",
                "FUN_001159d0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_pattern_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_add_item_00109be3",
                "param_1": "array",
                "param_2": "item",
                "param_3": "value",
                "uVar1": "reallocResult",
                "puVar2": "itemPtr",
                "uVar3": "itemCount"
            },
            "code": "\nundefined8 expandAndAddItem_00109be3(long array,undefined8 item,undefined4 value)\n\n{\n  undefined8 reallocResult;\n  undefined8 *itemPtr;\n  uint itemCount;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    itemCount = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = itemCount;\n    reallocResult = xrealloc(*(undefined8 *)(array + 0x20),(ulong)itemCount << 4);\n    *(undefined8 *)(array + 0x20) = reallocResult;\n  }\n  itemCount = *(uint *)(array + 0x28);\n  itemPtr = (undefined8 *)((ulong)itemCount * 0x10 + *(long *)(array + 0x20));\n  *itemPtr = item;\n  *(undefined4 *)(itemPtr + 1) = value;\n  *(uint *)(array + 0x28) = itemCount + 1;\n  return CONCAT71((int7)((ulong)itemPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "expand_and_add_item_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00104943",
                "FUN_00119e70"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_with_null_terminator_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "allocatedString"
            },
            "code": "\nvoid copyStringWithNullTerminator_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *allocatedString;\n  \n  stringLength = strnlen(inputString,maxLength);\n  allocatedString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)allocatedString + stringLength) = 0;\n  memcpy(allocatedString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "memcpy",
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_string_with_null_terminator_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "process_and_send_data_0010e918",
                "param_1": "connection",
                "param_2": "message",
                "param_3": "length",
                "uVar1": "status",
                "__s": "extracted_string",
                "sVar2": "message_length",
                "sVar3": "extracted_string_length",
                "__s_00": "combined_string"
            },
            "code": "\nundefined4 process_and_send_data_0010e918(undefined8 connection,char *message,undefined8 length)\n\n{\n  undefined4 status;\n  char *extracted_string;\n  size_t message_length;\n  size_t extracted_string_length;\n  char *combined_string;\n  \n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  message_length = strlen(message);\n  extracted_string_length = strlen(extracted_string);\n  combined_string = (char *)xmalloc(message_length + 0x14 + extracted_string_length);\n  sprintf(combined_string,\"%s:c=e%s,%ld\",message,extracted_string,length);\n  free(extracted_string);\n  status = process_string_0010e2f0(connection,0x80,0,0,combined_string);\n  if ((char)status != '\\0') {\n    free(combined_string);\n  }\n  return status;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_send_data_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_0010a424",
                "FUN_0010ae0e",
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "process_and_update_section_00116110",
                "param_1": "param_elf_file",
                "param_2": "param_section_data",
                "param_3": "param_output_bfd",
                "uVar1": "temp_undefined",
                "uVar2": "temp_undefined_2",
                "lVar3": "section_idx",
                "iVar4": "temp_int_1",
                "iVar5": "temp_int_2",
                "cVar6": "temp_char",
                "uVar7": "temp_undefined_3",
                "__ptr": "allocated_section_data",
                "lVar8": "temp_long",
                "uVar9": "temp_ulong",
                "iVar10": "temp_int_3",
                "uVar11": "temp_ulong_2",
                "puVar12": "temp_ptr",
                "lVar13": "temp_long_2",
                "puVar14": "temp_ptr_2",
                "puVar15": "temp_ptr_3",
                "pvVar16": "temp_ptr_4",
                "uVar17": "temp_ulong_3",
                "uVar18": "temp_ulong_4",
                "uVar19": "temp_ulong_5",
                "bVar20": "temp_byte",
                "local_38": "section_size",
                "local_30": "section_contents"
            },
            "code": "\nvoid process_and_update_section_00116110(undefined8 param_elf_file,undefined8 *param_section_data,undefined8 param_output_bfd)\n\n{\n  undefined temp_undefined;\n  undefined8 temp_undefined_2;\n  long section_idx;\n  int temp_int_1;\n  int temp_int_2;\n  char temp_char;\n  undefined8 temp_undefined_3;\n  undefined8 *allocated_section_data;\n  long temp_long;\n  ulong temp_ulong;\n  int temp_int_3;\n  ulong temp_ulong_2;\n  undefined *temp_ptr;\n  long temp_long_2;\n  undefined8 *temp_ptr_2;\n  undefined8 *temp_ptr_3;\n  void *temp_ptr_4;\n  ulong temp_ulong_3;\n  ulong temp_ulong_4;\n  ulong temp_ulong_5;\n  byte temp_byte;\n  ulong section_size;\n  void *section_contents;\n  \n  temp_byte = 0;\n  temp_char = validate_selected_item_00115f50(param_elf_file,param_section_data,1);\n  if (temp_char != '\\0') {\n    return;\n  }\n  section_size = param_section_data[8];\n  section_idx = param_section_data[0xc];\n  if (((*(byte *)((long)param_section_data + 0x25) & 1) == 0) || ((*(byte *)(section_idx + 0x25) & 1) == 0)) {\n    temp_long_2 = process_data_00114190(*param_section_data,0,0x80);\n    if (temp_long_2 == 0) {\n      return;\n    }\n    if ((*(byte *)(temp_long_2 + 0x29) & 1) == 0) {\n      return;\n    }\n    allocated_section_data = (undefined8 *)xmalloc(section_size);\n    temp_ptr_3 = allocated_section_data;\n    if (7 < section_size) {\n      for (temp_ulong_4 = section_size >> 3; temp_ulong_4 != 0; temp_ulong_4 = temp_ulong_4 - 1) {\n        *temp_ptr_3 = 0;\n        temp_ptr_3 = temp_ptr_3 + (ulong)temp_byte * -2 + 1;\n      }\n    }\n    temp_ptr_2 = temp_ptr_3;\n    if ((section_size & 4) != 0) {\n      temp_ptr_2 = (undefined8 *)((long)temp_ptr_3 + (ulong)temp_byte * -8 + 4);\n      *(undefined4 *)temp_ptr_3 = 0;\n    }\n    temp_ptr_3 = temp_ptr_2;\n    if ((section_size & 2) != 0) {\n      temp_ptr_3 = (undefined8 *)((long)temp_ptr_2 + (ulong)temp_byte * -4 + 2);\n      *(undefined2 *)temp_ptr_2 = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)temp_ptr_3 = 0;\n    }\n    temp_char = bfd_set_section_contents(param_output_bfd,section_idx,allocated_section_data,0);\n    if (temp_char != '\\0') {\n      free(allocated_section_data);\n      return;\n    }\n    DAT_00127a40 = 1;\n    print_bfd_error_message_001126c0(0,param_output_bfd,section_idx,0);\n    free(allocated_section_data);\n    return;\n  }\n  section_contents = (void *)0x0;\n  temp_char = bfd_get_full_section_contents(param_elf_file,param_section_data,&section_contents);\n  if ((temp_char == '\\0') ||\n     (temp_char = bfd_convert_section_contents(param_elf_file,param_section_data,param_output_bfd,&section_contents,&section_size),\n     temp_int_3 = DAT_00127908, temp_char == '\\0')) {\n    bfd_set_section_size(section_idx,0);\n    DAT_00127a40 = 1;\n    print_bfd_error_message_001126c0(0,param_elf_file,param_section_data,0);\n    free(section_contents);\n    return;\n  }\n  temp_int_1 = DAT_001264b8;\n  temp_int_2 = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    temp_ulong_4 = (ulong)DAT_00127908;\n    if (section_size % temp_ulong_4 != 0) {\n      temp_undefined_2 = *param_section_data;\n      temp_undefined_3 = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      execute_and_exit_00119dd0(temp_undefined_3,temp_undefined_2,temp_int_3);\n    }\n    temp_int_3 = DAT_00127908 / 2;\n    temp_ulong_2 = 0;\n    while (temp_ulong_5 = temp_ulong_2, temp_int_1 = DAT_001264b8, temp_int_2 = DAT_001264bc, temp_ulong_5 < section_size) {\n      temp_ulong_2 = temp_ulong_4 + temp_ulong_5;\n      temp_ulong_3 = temp_ulong_2;\n      for (temp_ulong = 0; temp_ulong < (ulong)(long)temp_int_3; temp_ulong = temp_ulong + 1) {\n        temp_ulong_3 = temp_ulong_3 - 1;\n        temp_ptr = (undefined *)(temp_ulong_5 + temp_ulong + (long)section_contents);\n        temp_undefined = *temp_ptr;\n        *temp_ptr = *(undefined *)((long)section_contents + temp_ulong_3);\n        *(undefined *)((long)section_contents + temp_ulong_3) = temp_undefined;\n      }\n    }\n  }\n  DAT_001264b8 = temp_int_1;\n  DAT_001264bc = temp_int_2;\n  if (-1 < temp_int_2) {\n    temp_ulong_4 = (ulong)DAT_00127a3c;\n    temp_int_3 = (int)((ulong)param_section_data[7] % temp_ulong_4);\n    temp_ulong_2 = ((long)temp_int_2 - (long)temp_int_3) + (long)section_contents;\n    if (temp_int_2 < temp_int_3) {\n      temp_ulong_2 = temp_ulong_2 + temp_ulong_4;\n    }\n    temp_long_2 = (section_size + (long)section_contents) - temp_ulong_2;\n    temp_ptr_4 = section_contents;\n    for (; temp_ulong_2 < section_size + (long)section_contents; temp_ulong_2 = temp_ulong_2 + temp_ulong_4) {\n      for (temp_long = 0; ((int)temp_long < temp_int_1 && (temp_long != temp_long_2)); temp_long = temp_long + 1) {\n        *(undefined *)((long)temp_ptr_4 + temp_long) = *(undefined *)(temp_ulong_2 + temp_long);\n      }\n      temp_ptr_4 = (void *)((long)temp_ptr_4 + temp_long);\n      temp_long_2 = temp_long_2 - temp_ulong_4;\n    }\n    section_size = ((((temp_ulong_4 - 1) + section_size) - (long)temp_int_2) / temp_ulong_4) * (long)temp_int_1;\n    temp_ulong_4 = *(ulong *)(section_idx + 0x38) / temp_ulong_4;\n    *(ulong *)(section_idx + 0x38) = temp_ulong_4;\n    if (temp_int_2 < temp_int_3) {\n      *(ulong *)(section_idx + 0x38) = temp_ulong_4 + 1;\n      temp_char = bfd_set_section_contents(param_output_bfd,section_idx,section_contents,0,section_size);\n      if (temp_char == '\\0') {\n        cleanup_and_free_memory_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  temp_char = bfd_set_section_contents(param_output_bfd,section_idx,section_contents,0,section_size);\n  if (temp_char == '\\0') {\n    cleanup_and_free_memory_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(section_contents);\n  return;\n}\n\n",
            "called": [
                "FUN_00115f50",
                "xmalloc",
                "bfd_set_section_size",
                "FUN_00114190",
                "bfd_get_full_section_contents",
                "FUN_00108466",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "FUN_001083de",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_and_update_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "process_end_of_block_0010bf20",
                "param_1": "ptrBlockInfo",
                "param_2": "newParam",
                "param_3": "unusedParam",
                "param_4": "returnValue",
                "lVar1": "currentBlock",
                "uVar2": "result",
                "pcVar3": "errorMessage",
                "auVar4": "returnValueStruct"
            },
            "code": "\n\n\nundefined  [16] processEndOfBlock_0010bf20(long ptrBlockInfo,undefined8 newParam,undefined8 unusedParam,undefined8 returnValue)\n\n{\n  long currentBlock;\n  undefined8 result;\n  char *errorMessage;\n  undefined returnValueStruct [16];\n  \n  if ((*(long *)(ptrBlockInfo + 8) == 0) || (currentBlock = *(long *)(ptrBlockInfo + 0x20), currentBlock == 0)) {\n    errorMessage = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = newParam;\n      result = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(ptrBlockInfo + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorMessage = \"debug_end_block: attempt to close top level block\";\n  }\n  result = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",result);\n  result = 0;\nLAB_0010bf84:\n  returnValueStruct._8_8_ = returnValue;\n  returnValueStruct._0_8_ = result;\n  return returnValueStruct;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_end_of_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_and_execute_command_0010c95e",
                "param_1": "param_list",
                "param_2": "command",
                "param_3": "data_ptr",
                "bVar1": "byte_value",
                "bVar2": "next_byte",
                "pbVar3": "current_byte",
                "bVar4": "is_signed",
                "bVar5": "is_char",
                "bVar6": "is_void",
                "cVar7": "command_result",
                "uVar8": "integer_value",
                "pbVar9": "next_command_byte",
                "lVar10": "type_info",
                "uVar11": "result",
                "pcVar12": "type_name",
                "sVar13": "string_length",
                "uVar14": "parsed_value",
                "__ptr": "type_string",
                "lVar15": "result",
                "puVar16": "param_value",
                "puVar17": "is_initialized",
                "ppcVar18": "string_array",
                "pcVar19": "type_name",
                "pbVar20": "current_byte",
                "local_49": "is_initialized",
                "local_48": "buffer_size",
                "local_40": "string_result"
            },
            "code": "\nundefined8 parse_and_execute_command_0010c95e(undefined8 *param_list,byte **command,long *data_ptr)\n\n{\n  byte byte_value;\n  byte next_byte;\n  byte *current_byte;\n  bool is_signed;\n  bool is_char;\n  bool is_void;\n  char command_result;\n  uint integer_value;\n  byte *next_command_byte;\n  long type_info;\n  undefined8 result;\n  char *type_name;\n  size_t string_length;\n  ulong parsed_value;\n  void *type_string;\n  long result;\n  ulong *param_value;\n  undefined *is_initialized;\n  char **string_array;\n  char *type_name;\n  byte *current_byte;\n  undefined is_initialized;\n  ulong buffer_size;\n  char *string_result [2];\n  \n  while( true ) {\n    current_byte = *command;\n    byte_value = *current_byte;\n    if ('T' < (char)byte_value) break;\n    if ((char)byte_value < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(byte_value) {\n    case 0x41:\n      result = 0;\n      current_byte = current_byte;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *command = current_byte + 1;\n      command_result = parse_and_execute_command_0010c95e(param_list,command,data_ptr);\n      if (command_result == '\\0') {\n        return 0;\n      }\n      if (data_ptr == (long *)0x0) {\n        return 1;\n      }\n      result = initialize_data_with_param_00113b71(*data_ptr);\n      *data_ptr = result;\n      return 1;\n    case 0x46:\n      *command = current_byte + 1;\n      if (data_ptr == (long *)0x0) {\n        param_value = (ulong *)0x0;\n        string_array = (char **)0x0;\n      }\n      else {\n        param_value = &buffer_size;\n        string_array = string_result;\n      }\n      command_result = process_data_0010d882(param_list,command,string_array,param_value);\n      if (command_result == '\\0') {\n        return 0;\n      }\n      if (**command == 0x5f) {\n        *command = *command + 1;\n        command_result = parse_and_execute_command_0010c95e(param_list,command,data_ptr);\n        if (command_result == '\\0') {\n          return 0;\n        }\n        if (data_ptr == (long *)0x0) {\n          return 1;\n        }\n        result = allocate_data_structure_00113ce0(*data_ptr,string_result[0],buffer_size & 0xff);\n        *data_ptr = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *command = current_byte + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      is_initialized = 0;\n      string_result[0] = (char *)0x0;\n      buffer_size = 0;\n      *command = current_byte + 1;\n      if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) == 0) {\n        if (current_byte[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        string_array = string_result;\n        if (data_ptr == (long *)0x0) {\n          string_array = (char **)0x0;\n        }\n        command_result = parse_and_extract_data_0010d559(param_list,command,string_array);\n        if (command_result == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        integer_value = parse_integer_from_byte_stream_00108e76(command);\n        current_byte = *command;\n        string_length = strlen((char *)current_byte);\n        if (string_length < integer_value) goto switchD_0010cdf9_caseD_60;\n        *command = current_byte + integer_value;\n        if ((data_ptr != (long *)0x0) &&\n           (string_result[0] = (char *)find_matching_entry_0010afd5(*param_list,param_list[1],current_byte,integer_value,9),\n           string_result[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **command;\n      if (byte_value == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *command = *command + 1;\n        }\n        if (**command != 0x46) goto switchD_0010cdf9_caseD_60;\n        *command = *command + 1;\n        if (data_ptr == (long *)0x0) {\n          is_initialized = (undefined *)0x0;\n          param_value = (ulong *)0x0;\n        }\n        else {\n          is_initialized = &is_initialized;\n          param_value = &buffer_size;\n        }\n        command_result = process_data_0010d882(param_list,command,param_value,is_initialized);\n        if (command_result == '\\0') {\n          return 0;\n        }\n      }\n      if (**command == 0x5f) {\n        *command = *command + 1;\n        command_result = parse_and_execute_command_0010c95e(param_list,command,data_ptr);\n        if (command_result == '\\0') {\n          return 0;\n        }\n        if (data_ptr == (long *)0x0) {\n          return 1;\n        }\n        if (byte_value != 0x4d) {\n          result = initialize_and_store_data_00113bfa(string_result[0],*data_ptr);\n          *data_ptr = result;\n          return 1;\n        }\n        result = initialize_and_store_data_00113b98(*data_ptr,string_result[0],buffer_size,is_initialized);\n        *data_ptr = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      result = parse_and_extract_data_0010d559(param_list,command,data_ptr);\n      return result;\n    case 0x52:\n      *command = current_byte + 1;\n      command_result = parse_and_execute_command_0010c95e(param_list,command,data_ptr);\n      if (command_result == '\\0') {\n        return 0;\n      }\n      if (data_ptr == (long *)0x0) {\n        return 1;\n      }\n      result = initialize_data_00113cb9(*data_ptr);\n      *data_ptr = result;\n      return 1;\n    case 0x54:\n      *command = current_byte + 1;\n      command_result = extract_and_convert_number_00108ea1(command,&buffer_size);\n      if (command_result != '\\0') {\n        if ((uint)buffer_size < *(uint *)(param_list + 5)) {\n          string_result[0] = *(char **)((buffer_size & 0xffffffff) * 0x10 + param_list[4]);\n          command_result = parse_and_execute_command_0010c95e(param_list,string_result,data_ptr);\n          if (command_result == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (byte_value == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *command = current_byte + 1;\n    command_result = parse_and_execute_command_0010c95e(param_list,command,data_ptr);\n    if (command_result == '\\0') {\n      return 0;\n    }\n    if (data_ptr == (long *)0x0) {\n      return 1;\n    }\n    result = initialize_or_get_data_00113d3a(*data_ptr);\n    *data_ptr = result;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  is_void = false;\n  is_signed = false;\n  command_result = '\\0';\n  is_char = false;\n  do {\n    current_byte = *command;\n    byte_value = *current_byte;\n    if (byte_value == 0x55) {\n      command_result = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byte_value) {\n      if (byte_value == 0x56) {\n        is_void = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byte_value) goto switchD_0010cdf9_caseD_60;\n      if ((char)byte_value < '_') goto LAB_0010cdfb;\n      switch(byte_value) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (data_ptr == (long *)0x0) {\nLAB_0010d0aa:\n          *command = current_byte + 1;\n          return 1;\n        }\n        result = find_named_type_0010914e(*param_list,&DAT_00120436);\n        *data_ptr = result;\n        if (result == 0) {\n          result = initialize_data_00112904(6,4);\n          *data_ptr = result;\n          *command = *command + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (data_ptr == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"unsigned char\";\n        if ((command_result == '\\0') && (type_name = \"char\", is_signed)) {\n          type_name = \"signed char\";\n        }\n        result = find_named_type_0010914e(*param_list,type_name);\n        *data_ptr = result;\n        if (result == 0) {\n          result = set_param_value_00113dfe(1,command_result);\n          *data_ptr = result;\n          *command = *command + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (data_ptr == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (data_ptr == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*param_list,\"float\");\n        *data_ptr = result;\n        if (result == 0) {\n          result = initialize_data_00113df2(4);\n          *data_ptr = result;\n          *command = *command + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (data_ptr == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"unsigned int\";\n        type_name = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (data_ptr == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"long unsigned int\";\n        type_name = \"long int\";\nLAB_0010ced2:\n        if (command_result == '\\0') {\n          type_name = type_name;\n        }\n        result = find_named_type_0010914e(*param_list,type_name);\n        *data_ptr = result;\n        if (result == 0) {\n          result = set_param_value_00113dfe(4,command_result);\n          *data_ptr = result;\n          *command = *command + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        type_name = \"long double\";\n        if (data_ptr == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        result = find_named_type_0010914e(*param_list,type_name);\n        *data_ptr = result;\n        if (result == 0) {\n          result = initialize_data_00113df2(8);\n          *data_ptr = result;\n          *command = *command + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (data_ptr == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"short unsigned int\";\n        if (command_result == '\\0') {\n          type_name = \"short int\";\n        }\n        result = find_named_type_0010914e(*param_list,type_name);\n        *data_ptr = result;\n        if (result == 0) {\n          result = set_param_value_00113dfe(2,command_result);\n          *data_ptr = result;\n          *command = *command + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        string_array = string_result;\n        if (data_ptr == (long *)0x0) {\n          string_array = (char **)0x0;\n        }\n        command_result = parse_and_extract_value_0010d21c(param_list,command,string_array);\n        if (command_result == '\\0') {\n          return 0;\n        }\n        if (data_ptr == (long *)0x0) {\n          return 1;\n        }\n        string_length = strlen(string_result[0]);\n        result = find_matching_entry_0010afd5(*param_list,param_list[1],string_result[0],string_length & 0xffffffff,9);\n        *data_ptr = result;\n        free(string_result[0]);\n        result = *data_ptr;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (data_ptr == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*param_list,&DAT_00120495);\n        *data_ptr = result;\n        if (result == 0) {\n          result = initialize_data_00113e17();\n          *data_ptr = result;\n          *command = *command + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (data_ptr == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*param_list,\"__wchar_t\");\n        *data_ptr = result;\n        if (result == 0) {\n          result = set_param_value_00113dfe(2,1);\n          *data_ptr = result;\n          *command = *command + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (data_ptr == (long *)0x0) goto LAB_0010d0aa;\n        type_name = \"long long unsigned int\";\n        if (command_result == '\\0') {\n          type_name = \"long long int\";\n        }\n        result = find_named_type_0010914e(*param_list,type_name);\n        *data_ptr = result;\n        if (result == 0) {\n          result = set_param_value_00113dfe(8,command_result);\n          *data_ptr = result;\n        }\n      }\n      *command = *command + 1;\n      goto LAB_0010d1de;\n    }\n    if (byte_value == 0x43) {\n      is_char = true;\n      goto LAB_0010cd84;\n    }\n    if (byte_value != 0x53) goto LAB_0010cdc5;\n    is_signed = true;\nLAB_0010cd84:\n    *command = current_byte + 1;\n  } while( true );\nLAB_0010ca26:\n  next_command_byte = current_byte + 1;\n  *command = next_command_byte;\n  byte_value = *next_command_byte;\n  if (byte_value == 0) goto switchD_0010cdf9_caseD_60;\n  if (byte_value == 0x5f) {\n    *command = current_byte + 2;\n    command_result = parse_and_execute_command_0010c95e(param_list,command,data_ptr);\n    if (command_result == '\\0') {\n      return 0;\n    }\n    if (data_ptr == (long *)0x0) {\n      return 1;\n    }\n    type_info = find_named_type_0010914e(*param_list,\"int\");\n    if (type_info == 0) {\n      type_info = set_param_value_00113dfe(4,0);\n    }\n    result = initialize_and_allocate_data_00113c43(*data_ptr,type_info,0,result,0);\n    *data_ptr = result;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)byte_value * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  result = result * 10 + (long)((char)byte_value + -0x30);\n  current_byte = next_command_byte;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byte_value < ':') {\n    if ((char)byte_value < '0') {\n      if (byte_value != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message_0010911f(current_byte);\n      if (data_ptr == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byte_value != 0x47) || (*command = current_byte + 1, ((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  current_byte = *command;\n  integer_value = parse_integer_from_byte_stream_00108e76(command);\n  current_byte = *command;\n  string_length = strlen((char *)current_byte);\n  parsed_value = (ulong)integer_value;\n  if (parsed_value <= string_length) {\n    *command = current_byte + parsed_value;\n    if (data_ptr == (long *)0x0) {\n      return 1;\n    }\n    type_string = (void *)copy_and_null_terminate_00109a0b(current_byte,parsed_value);\n    result = find_named_type_0010914e(*param_list,type_string);\n    *data_ptr = result;\n    free(type_string);\n    if (*data_ptr == 0) {\n      result = find_matching_entry_0010afd5(*param_list,param_list[1],current_byte,(int)*command - (int)current_byte,0);\n      *data_ptr = result;\njoined_r0x0010d1d8:\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_char) {\n      result = initialize_data_with_param_00113b71(*data_ptr);\n      *data_ptr = result;\n    }\n    if (is_void) {\n      result = initialize_data_00113b4a(*data_ptr);\n      *data_ptr = result;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message_0010911f(current_byte);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113b71",
                "FUN_00108ea1",
                "FUN_00113c43",
                "FUN_0010afd5",
                "strlen",
                "FUN_00113bfa",
                "FUN_0010d559",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010914e",
                "FUN_0010d882",
                "FUN_00113dfe",
                "FUN_0010911f",
                "FUN_00113b98",
                "FUN_00113d3a",
                "FUN_00113b4a",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_00108e76",
                "FUN_00113cb9",
                "free",
                "FUN_0010d21c",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010d7d4",
                "FUN_00113e5e",
                "FUN_0010c95e",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_and_execute_command_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = identify_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_bfd_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_bfd_error_message_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_data_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_output_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_bfd_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_bfd_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_bfd_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = extract_and_process_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)create_initialized_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_info_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_and_reset_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_and_reset_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_records_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = create_initialized_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = process_debug_info_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_and_reset_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_and_reset_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_records_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_and_initialize_data_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = check_and_record_variable_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = process_end_of_block_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_and_initialize_data_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = record_debug_function_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debug_function_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_from_binary_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                execute_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_selected_item_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_from_binary_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            execute_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = parse_binary_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_bfd_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_and_update_section_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_bfd_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_bfd_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_bfd_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)process_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_bfd_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_malloc_and_get_section",
                "bfd_map_over_sections",
                "FUN_00115f30",
                "bfd_get_full_section_contents",
                "dcgettext",
                "bfd_get_section_by_name",
                "strerror",
                "bfd_set_section_size",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_00113fb0",
                "bfd_create_gnu_debuglink_section",
                "FUN_001126c0",
                "free",
                "FUN_00115530",
                "bfd_get_arch",
                "FUN_00114190",
                "fopen",
                "fwrite",
                "xmalloc",
                "FUN_00105828",
                "fclose",
                "__errno_location",
                "FUN_0010551d",
                "bfd_set_format",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_time_0011a350",
                "param_1": "filePath",
                "param_2": "structPtr",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorStr",
                "uVar4": "translatedStr",
                "local_38": "time1",
                "uStack_34": "time2",
                "uStack_30": "time3",
                "uStack_2c": "time4",
                "local_28": "time5"
            },
            "code": "\nvoid setTime_0011a350(char *filePath,long structPtr)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorStr;\n  undefined8 translatedStr;\n  undefined4 time1;\n  undefined4 time2;\n  undefined4 time3;\n  undefined4 time4;\n  undefined4 time5;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  time5 = *(undefined4 *)(structPtr + 0x58);\n  uStack_24 = *(undefined4 *)(structPtr + 0x5c);\n  uStack_20 = *(undefined4 *)(structPtr + 0x60);\n  uStack_1c = *(undefined4 *)(structPtr + 100);\n  time1 = *(undefined4 *)(structPtr + 0x48);\n  time2 = *(undefined4 *)(structPtr + 0x4c);\n  time3 = *(undefined4 *)(structPtr + 0x50);\n  time4 = *(undefined4 *)(structPtr + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&time1,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorStr = strerror(*errnoPtr);\n    translatedStr = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00119ed0(translatedStr,filePath,errorStr);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010882c",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "set_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_bfd_error_message_0011a110",
                "param_1": "errorMessage",
                "iVar1": "error",
                "uVar2": "errorString",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printBFDErrorMessage_0011a110(long errorMessage)\n\n{\n  int error;\n  undefined8 errorString;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600,errorMessage,errorString,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorString,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "bfd_get_error",
                "FUN_0010871c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00116030",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00115dc0",
                "FUN_001053d5",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "hashTable",
                "param_2": "undefinedValue",
                "param_3": "integerParam",
                "param_4": "stringParam",
                "param_5": "inputString",
                "lVar1": "tempValue1",
                "uVar2": "errorCode",
                "lVar3": "tempValue2",
                "uVar4": "errorMessage",
                "uVar5": "translatedErrorMessage",
                "sVar6": "stringLength",
                "lVar7": "tempValue3",
                "local_44": "localVariable1",
                "uStack_40": "uStackVariable1",
                "uStack_3f": "uStackVariable2",
                "uStack_3e": "uStackVariable3",
                "local_3c": "localVariable2"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *hashTable,undefined undefinedValue,int integerParam,undefined8 stringParam,char *inputString)\n\n{\n  long tempValue1;\n  undefined4 errorCode;\n  long tempValue2;\n  undefined8 errorMessage;\n  undefined8 translatedErrorMessage;\n  size_t stringLength;\n  long tempValue3;\n  undefined4 localVariable1;\n  undefined uStackVariable1;\n  undefined uStackVariable2;\n  undefined2 uStackVariable3;\n  undefined4 localVariable2 [3];\n  \n  if (inputString == (char *)0x0) {\n    tempValue3 = 0;\n  }\n  else {\n    tempValue2 = bfd_hash_lookup(hashTable + 7,inputString,1,1);\n    if (tempValue2 == 0) {\n      errorCode = bfd_get_error();\n      errorMessage = bfd_errmsg(errorCode);\n      translatedErrorMessage = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_message_00119ed0(translatedErrorMessage,errorMessage);\n      return 0;\n    }\n    tempValue3 = *(long *)(tempValue2 + 0x20);\n    if (tempValue3 == -1) {\n      tempValue3 = hashTable[6];\n      tempValue1 = hashTable[5];\n      *(long *)(tempValue2 + 0x20) = tempValue3;\n      if (tempValue1 == 0) {\n        hashTable[4] = tempValue2;\n      }\n      else {\n        *(long *)(tempValue1 + 0x18) = tempValue2;\n      }\n      hashTable[5] = tempValue2;\n      stringLength = strlen(inputString);\n      hashTable[6] = tempValue3 + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*hashTable + 8) + 0x50))(tempValue3,&localVariable1);\n  uStackVariable2 = 0;\n  uStackVariable1 = undefinedValue;\n  (**(code **)(*(long *)(*hashTable + 8) + 0x68))((long)integerParam,&uStackVariable3);\n  (**(code **)(*(long *)(*hashTable + 8) + 0x50))(stringParam,localVariable2);\n  if ((ulong)hashTable[3] < hashTable[2] + 0xcU) {\n    hashTable[3] = hashTable[3] * 2;\n    tempValue3 = xrealloc(hashTable[1]);\n    hashTable[1] = tempValue3;\n  }\n  tempValue3 = hashTable[2];\n  tempValue2 = hashTable[1];\n  *(ulong *)(tempValue2 + tempValue3) = CONCAT26(uStackVariable3,CONCAT15(uStackVariable2,CONCAT14(uStackVariable1,localVariable1)));\n  *(undefined4 *)(tempValue2 + 8 + tempValue3) = localVariable2[0];\n  hashTable[2] = hashTable[2] + 0xc;\n  return CONCAT71((int7)((ulong)tempValue3 >> 8),1);\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "dcgettext",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_0010e439",
                "FUN_0010edb4",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010eafe",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010ed2c"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlag",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3",
                "iVar1": "comparisonResult",
                "uVar2": "errorString",
                "pcVar3": "commaPosition",
                "pcVar4": "nextFlag",
                "sVar5": "sectionFlagLength",
                "iVar6": "sectionFlagLengthInt",
                "uVar7": "parsedFlags",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlag,undefined8 unused1,undefined8 unused2,undefined8 unused3)\n\n{\n  int comparisonResult;\n  undefined8 errorString;\n  char *commaPosition;\n  char *nextFlag;\n  size_t sectionFlagLength;\n  int sectionFlagLengthInt;\n  uint parsedFlags;\n  undefined result [16];\n  \n  parsedFlags = 0;\n  do {\n    commaPosition = strchr(sectionFlag,0x2c);\n    if (commaPosition == (char *)0x0) {\n      sectionFlagLength = strlen(sectionFlag);\n      sectionFlagLengthInt = (int)sectionFlagLength;\n      nextFlag = (char *)0x0;\n    }\n    else {\n      nextFlag = commaPosition + 1;\n      sectionFlagLengthInt = (int)commaPosition - (int)sectionFlag;\n    }\n    sectionFlagLength = (size_t)sectionFlagLengthInt;\n    comparisonResult = strncasecmp(\"alloc\",sectionFlag,sectionFlagLength);\n    if (comparisonResult == 0) {\n      parsedFlags = parsedFlags | 1;\n    }\n    else {\n      comparisonResult = strncasecmp(\"load\",sectionFlag,sectionFlagLength);\n      if (comparisonResult == 0) {\n        parsedFlags = parsedFlags | 2;\n      }\n      else {\n        comparisonResult = strncasecmp(\"noload\",sectionFlag,sectionFlagLength);\n        if (comparisonResult == 0) {\n          parsedFlags = parsedFlags | 0x200;\n        }\n        else {\n          comparisonResult = strncasecmp(\"readonly\",sectionFlag,sectionFlagLength);\n          if (comparisonResult == 0) {\n            parsedFlags = parsedFlags | 8;\n          }\n          else {\n            comparisonResult = strncasecmp(\"debug\",sectionFlag,sectionFlagLength);\n            if (comparisonResult == 0) {\n              parsedFlags = parsedFlags | 0x2000;\n            }\n            else {\n              comparisonResult = strncasecmp(\"code\",sectionFlag,sectionFlagLength);\n              if (comparisonResult == 0) {\n                parsedFlags = parsedFlags | 0x10;\n              }\n              else {\n                comparisonResult = strncasecmp(\"data\",sectionFlag,sectionFlagLength);\n                if (comparisonResult == 0) {\n                  parsedFlags = parsedFlags | 0x20;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"rom\",sectionFlag,sectionFlagLength);\n                  if (comparisonResult == 0) {\n                    parsedFlags = parsedFlags | 0x40;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"exclude\",sectionFlag,sectionFlagLength);\n                    if (comparisonResult == 0) {\n                      parsedFlags = parsedFlags | 0x8000;\n                    }\n                    else {\n                      comparisonResult = strncasecmp(\"share\",sectionFlag,sectionFlagLength);\n                      if (comparisonResult == 0) {\n                        parsedFlags = parsedFlags | 0x8000000;\n                      }\n                      else {\n                        comparisonResult = strncasecmp(\"contents\",sectionFlag,sectionFlagLength);\n                        if (comparisonResult == 0) {\n                          parsedFlags = parsedFlags | 0x100;\n                        }\n                        else {\n                          comparisonResult = strncasecmp(\"merge\",sectionFlag,sectionFlagLength);\n                          if (comparisonResult == 0) {\n                            parsedFlags = parsedFlags | 0x800000;\n                          }\n                          else {\n                            comparisonResult = strncasecmp(\"strings\",sectionFlag,sectionFlagLength);\n                            if (comparisonResult != 0) {\n                              commaPosition = (char *)xmalloc((long)(sectionFlagLengthInt + 1));\n                              strncpy(commaPosition,sectionFlag,sectionFlagLength);\n                              commaPosition[sectionFlagLength] = '\\0';\n                              errorString = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_00119ed0(errorString,commaPosition);\n                              errorString = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              execute_and_exit_00119dd0(errorString,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            parsedFlags = parsedFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlag = nextFlag;\n  } while (nextFlag != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = parsedFlags;\n  result._8_8_ = unused3;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "param_1": "arguments",
                "ppcVar2": "pointerToPointer",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s": "string",
                "uVar1": "totalLength"
            },
            "code": "\nchar * getFormattedString_001125fa(char **arguments)\n\n{\n  ulong totalLength;\n  char **pointerToPointer;\n  size_t length1;\n  size_t length2;\n  char *string;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  pointerToPointer = (char **)arguments[0x1d];\n  string = *arguments;\n  if ((pointerToPointer != (char **)0x0) && ((*(byte *)((long)pointerToPointer + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*pointerToPointer);\n    length2 = strlen(string);\n    totalLength = length1 + 3 + length2;\n    if (DAT_00127a58 < totalLength) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (totalLength >> 1) + totalLength;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    string = DAT_00127a50;\n  }\n  return string;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail",
                "strlen",
                "sprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_001152b6",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "get_formatted_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_one_00108f05"
            },
            "code": "\nundefined getOne_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_one_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "cleanup_and_reset_memory_00108863",
                "puVar1": "currentBlock",
                "puVar2": "nextBlock"
            },
            "code": "\nvoid cleanupAndResetMemory_00108863(void)\n\n{\n  undefined4 *currentBlock;\n  undefined4 *nextBlock;\n  \n  currentBlock = (undefined4 *)&DAT_00127740;\n  do {\n    nextBlock = currentBlock + 6;\n    free(*(void **)(currentBlock + 4));\n    *(undefined8 *)(currentBlock + 4) = 0;\n    currentBlock = nextBlock;\n  } while (nextBlock != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "cleanup_and_reset_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "add_source_file_00108f08",
                "param_1": "sourceList",
                "param_2": "filename",
                "iVar1": "cmpResult",
                "uVar2": "returnValue",
                "puVar3": "currentEntry",
                "puVar4": "tempEntry",
                "lVar5": "loopCounter",
                "puVar6": "sourceListHead",
                "pcVar7": "filenameCopy",
                "puVar8": "previousEntry",
                "bVar9": "byteValue"
            },
            "code": "\n\n\nundefined8 addSourceFile_00108f08(long sourceList,char *filename)\n\n{\n  int cmpResult;\n  undefined8 returnValue;\n  undefined8 *currentEntry;\n  undefined8 *tempEntry;\n  long loopCounter;\n  undefined8 *sourceListHead;\n  char *filenameCopy;\n  undefined8 *previousEntry;\n  byte byteValue;\n  \n  byteValue = 0;\n  filenameCopy = \"\";\n  if (filename != (char *)0x0) {\n    filenameCopy = filename;\n  }\n  if (*(long *)(sourceList + 8) == 0) {\n    returnValue = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",returnValue);\n    returnValue = 0;\n  }\n  else {\n    for (currentEntry = *(undefined8 **)(*(long *)(sourceList + 8) + 8); currentEntry != (undefined8 *)0x0;\n        currentEntry = (undefined8 *)*currentEntry) {\n      cmpResult = filename_cmp(currentEntry[1],filenameCopy);\n      if (cmpResult == 0) goto LAB_00108fad;\n    }\n    currentEntry = (undefined8 *)xmalloc(0x18);\n    sourceListHead = *(undefined8 **)(sourceList + 0x10);\n    previousEntry = currentEntry;\n    for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)previousEntry = 0;\n      previousEntry = (undefined8 *)((long)previousEntry + (ulong)byteValue * -8 + 4);\n    }\n    currentEntry[1] = filenameCopy;\n    previousEntry = (undefined8 *)*sourceListHead;\n    while (tempEntry = previousEntry, tempEntry != (undefined8 *)0x0) {\n      sourceListHead = tempEntry;\n      previousEntry = (undefined8 *)*tempEntry;\n    }\n    *sourceListHead = currentEntry;\nLAB_00108fad:\n    *(undefined8 **)(sourceList + 0x10) = currentEntry;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "filename_cmp",
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_source_file_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_and_free_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeAndFreeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_and_free_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_data_00114190",
                "param_1": "inputData",
                "param_2": "isFlagSet",
                "param_3": "flags",
                "uVar1": "flagComparison",
                "plVar2": "matchingPattern",
                "pplVar3": "nextPattern",
                "iVar4": "comparisonResult",
                "uVar5": "errorMessage",
                "pplVar6": "currentPattern",
                "pplVar7": "previousPattern",
                "pplVar8": "nextPattern"
            },
            "code": "\nlong ** processData_00114190(long *inputData,char isFlagSet,uint flags)\n\n{\n  uint flagComparison;\n  long *matchingPattern;\n  long **nextPattern;\n  int comparisonResult;\n  undefined8 errorMessage;\n  long **currentPattern;\n  long **previousPattern;\n  long **nextPattern;\n  \n  previousPattern = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (isFlagSet == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (isFlagSet == '\\0') {\n    if ((flags & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      currentPattern = (long **)*previousPattern;\n      if (currentPattern == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previousPattern = (long **)0x0;\n    }\n    else {\n      matchingPattern = DAT_00127900[1];\n      if (*(char *)matchingPattern == '!') {\n        comparisonResult = fnmatch((char *)((long)matchingPattern + 1),(char *)inputData,0);\n        currentPattern = previousPattern;\n        if (comparisonResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparisonResult = fnmatch((char *)matchingPattern,(char *)inputData,0);\n      if (comparisonResult != 0) goto LAB_001141e5;\n      currentPattern = (long **)*previousPattern;\n      if (currentPattern == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)currentPattern + 0x14)) != 0) {\n      matchingPattern = currentPattern[1];\n      if (*(char *)matchingPattern == '!') {\n        comparisonResult = fnmatch((char *)((long)matchingPattern + 1),(char *)inputData,0);\n        if (comparisonResult == 0) {\nLAB_0011438e:\n          *(undefined *)(currentPattern + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparisonResult = fnmatch((char *)matchingPattern,(char *)inputData,0);\n        if ((previousPattern == (long **)0x0) && (comparisonResult == 0)) {\n          nextPattern = (long **)*currentPattern;\n          previousPattern = currentPattern;\n          if (nextPattern == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextPattern = (long **)*currentPattern;\n    currentPattern = previousPattern;\n    if (nextPattern != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparisonResult = strcmp((char *)DAT_00127900[1],(char *)inputData);\n    if (comparisonResult == 0) {\nLAB_001143cd:\n      flagComparison = *(uint *)((long)previousPattern + 0x14);\n      if ((((flagComparison & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((flagComparison & 2) != 0)))) {\n        errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        execute_and_exit_00119dd0(errorMessage,inputData);\n      }\n      if ((((flagComparison & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        execute_and_exit_00119dd0(errorMessage,inputData);\n      }\n      if ((((flagComparison & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previousPattern + 0x14) = flagComparison | flags;\n        return previousPattern;\n      }\n      errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      execute_and_exit_00119dd0(errorMessage,inputData);\n    }\n    previousPattern = (long **)*previousPattern;\n    if (previousPattern == (long **)0x0) goto LAB_001142a9;\n    comparisonResult = strcmp((char *)previousPattern[1],(char *)inputData);\n    if (comparisonResult == 0) goto LAB_001143cd;\n    nextPattern = (long **)*previousPattern;\n    currentPattern = (long **)0x0;\n    if (nextPattern == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previousPattern = currentPattern;\n      if (isFlagSet == '\\0') {\n        while (currentPattern = nextPattern, nextPattern = previousPattern, nextPattern = currentPattern,\n              (flags & *(uint *)((long)currentPattern + 0x14)) != 0) {\n          matchingPattern = currentPattern[1];\n          if (*(char *)matchingPattern == '!') {\n            comparisonResult = fnmatch((char *)((long)matchingPattern + 1),(char *)inputData,0);\n            if (comparisonResult == 0) goto LAB_0011438e;\n            nextPattern = (long **)*currentPattern;\n            if ((long **)*currentPattern == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparisonResult = fnmatch((char *)matchingPattern,(char *)inputData,0);\n            if ((previousPattern == (long **)0x0) && (comparisonResult == 0)) {\n              previousPattern = currentPattern;\n              nextPattern = (long **)*currentPattern;\n              if ((long **)*currentPattern == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextPattern = (long **)*currentPattern;\n              if ((long **)*currentPattern == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparisonResult = strcmp((char *)nextPattern[1],(char *)inputData);\n        nextPattern = currentPattern;\n        previousPattern = nextPattern;\n        if (comparisonResult == 0) goto LAB_001143cd;\n      }\n      currentPattern = nextPattern;\n      nextPattern = (long **)*nextPattern;\n      previousPattern = currentPattern;\n    } while (nextPattern != (long **)0x0);\nLAB_001142a1:\n    if (isFlagSet != '\\0') {\nLAB_001142a9:\n      currentPattern = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(currentPattern + 3) = (undefined  [16])0x0;\n      *(undefined *)(currentPattern + 2) = 0;\n      *(uint *)((long)currentPattern + 0x14) = flags;\n      currentPattern[5] = (long *)0x0;\n      previousPattern = currentPattern;\n      *currentPattern = (long *)DAT_00127900;\n      DAT_00127900 = previousPattern;\n      currentPattern[1] = inputData;\n      return currentPattern;\n    }\n  }\nLAB_00114212:\n  if (previousPattern == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previousPattern + 2) = 1;\n  return previousPattern;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00104bba",
                "dcgettext",
                "fnmatch",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00114c20",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00115b70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_data_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "process_attributes_00116490",
                "param_1": "param1",
                "param_2": "attribute_data_size",
                "param_3": "attribute_data",
                "param_4": "attribute_offset",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "bVar4": "flag",
                "puVar5": "ptr",
                "iVar6": "counter",
                "lVar7": "length",
                "uVar8": "temp4",
                "in_RAX": "note_type",
                "uVar9": "temp5",
                "uVar10": "temp6",
                "uVar11": "temp7",
                "uVar12": "temp8",
                "__ptr": "description_ptr",
                "uVar13": "temp9",
                "unaff_RBX": "note_size",
                "unaff_RBP": "version",
                "puVar14": "record_ptr",
                "puVar15": "record_name_ptr",
                "cVar16": "char_var",
                "puVar17": "ptr1",
                "puVar18": "ptr2",
                "in_R11": "note_description",
                "unaff_R12": "attribute_list",
                "puVar19": "record_list",
                "unaff_R13": "version_note",
                "__nmemb": "num_records",
                "unaff_R14": "program_data",
                "puVar20": "ptr3",
                "bVar21": "byte_var",
                "iVar22": "loop_counter",
                "unaff_retaddr": "return_address",
                "param_7": "output_length",
                "param_8": "flag1",
                "param_9": "attribute_offset2",
                "in_stack_00000020": "output_size",
                "in_stack_00000028": "temp_array",
                "in_stack_00000030": "temp_array_ptr",
                "in_stack_00000038": "flag2",
                "in_stack_00000040": "flag3",
                "in_stack_00000048": "error_message"
            },
            "code": "\nulong process_attributes_00116490(undefined8 param1,ulong attribute_data_size,ulong attribute_data,long attribute_offset)\n\n{\n  undefined8 temp1;\n  undefined8 temp2;\n  ulong temp3;\n  bool flag;\n  ulong *ptr;\n  int counter;\n  long length;\n  undefined8 temp4;\n  ulong note_type;\n  ulong temp5;\n  ulong temp6;\n  ulong temp7;\n  ulong temp8;\n  undefined *description_ptr;\n  ulong temp9;\n  ulong note_size;\n  ulong version;\n  ulong *record_ptr;\n  undefined *record_name_ptr;\n  char char_var;\n  undefined *ptr1;\n  undefined *ptr2;\n  ulong note_description;\n  ulong *attribute_list;\n  ulong *record_list;\n  ulong version_note;\n  size_t num_records;\n  undefined8 *program_data;\n  ulong *ptr3;\n  byte byte_var;\n  int loop_counter;\n  ulong return_address;\n  ulong output_length;\n  uint flag1;\n  ulong attribute_offset2;\n  ulong output_size;\n  ulong *temp_array;\n  undefined *temp_array_ptr;\n  uint flag2;\n  uint flag3;\n  undefined8 *error_message;\n  \n  byte_var = 0;\ncode_r0x00116490:\n  length = attribute_offset;\n  temp6 = version;\n  temp9 = version_note;\n  if (note_type == 0) {\n    if (attribute_data_size == 0x100) {\n      attribute_list[7] = return_address;\n      temp7 = return_address;\nLAB_001164af:\n      temp5 = version_note;\n      temp9 = version_note;\n      return_address = temp7;\n    }\n    else {\n      attribute_list[7] = attribute_offset2;\nLAB_0011669e:\n      temp6 = version;\n      temp5 = version;\n    }\nLAB_001164bb:\n    attribute_list[8] = temp5;\n    if (*(char *)((attribute_list[3] - 1) + attribute_data) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    record_list = attribute_list + 9;\n    if (0xb < note_size) {\n      temp5 = (**(code **)(program_data[1] + 0x40))(length);\n      *record_list = temp5;\n      temp5 = (**(code **)(program_data[1] + 0x40))(length + 4);\n      attribute_list[10] = temp5;\n      attribute_data_size = (**(code **)(program_data[1] + 0x40))(length + 8);\n      attribute_data = *record_list;\n      attribute_list[0xb] = attribute_data_size;\n      note_type = attribute_list[10];\n      temp5 = attribute_data + 3 & 0xfffffffffffffffc;\n      attribute_list[0xf] = temp5;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < attribute_data_size - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      temp7 = temp5 + note_type + 0xc;\n      if (note_size < temp7) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (attribute_data < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      attribute_list[0xc] = length + 0xc;\n      note_description = length + 0xc + temp5;\n      attribute_list[0xd] = note_description;\n      note_size = note_size + (-0xc - (temp5 + note_type));\n      attribute_offset = length + temp7;\n      version = temp6;\n      attribute_list = record_list;\n      version_note = temp9;\n      if (attribute_data != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            temp6 = process_attributes_00116490();\n            return temp6;\n          }\n        }\n        else if ((((4 < attribute_data) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            temp6 = process_attributes_00116490();\n            return temp6;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            temp6 = process_attributes_00116490();\n            return temp6;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (note_size != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag2 | flag3 | flag1) == 0) {\n      temp1 = *program_data;\n      temp2 = *error_message;\n      temp4 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(temp4,temp1,temp2);\nLAB_0011671b:\n      num_records = ((long)record_list - (long)temp_array >> 3) * -0x71c71c71c71c71c7;\n      qsort(temp_array,num_records,0x48,compare_records_0011a1b0);\n      for (record_ptr = temp_array; record_ptr < record_list; record_ptr = record_ptr + 9) {\n        temp6 = record_ptr[2];\n        if (temp6 != 0) {\n          temp9 = record_ptr[7];\n          temp5 = record_ptr[8];\n          ptr3 = record_ptr;\n          loop_counter = 0;\n          if (temp9 == temp5) {\n            record_ptr[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr = ptr3;\n                ptr3 = ptr + -9;\n                if (ptr3 < temp_array) goto LAB_001167f5;\n                temp7 = ptr[-7];\n              } while (temp7 == 0);\n              if ((*ptr3 != *record_ptr) ||\n                 (counter = memcmp((void *)ptr[-6],(void *)record_ptr[3],*record_ptr), counter != 0))\n              break;\n              temp3 = ptr[-2];\n              temp8 = ptr[-1];\n              if (temp9 == temp3) {\n                if (temp5 == temp8) {\n                  record_ptr[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (temp5 <= temp8) {\n                  record_ptr[2] = 0;\n                  break;\n                }\n                if (temp8 < temp9) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < temp8) ||\n                     (temp9 <= (temp8 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((temp6 == 0x101) == (temp7 == 0x101)) {\n                  if (temp8 <= temp5) {\n                    temp8 = temp5;\n                  }\n                  if (temp3 < temp9) {\n                    temp9 = temp3;\n                  }\n                  ptr[-1] = temp8;\n                  ptr[-2] = temp9;\n                  record_ptr[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (temp3 <= temp9) goto LAB_001167a6;\n                if (temp8 < temp9) goto LAB_0010852c;\n                if (temp5 < temp9) {\n                  if ((0xfffffffffffffff0 < temp5) || (temp3 <= (temp5 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (temp5 != temp8) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              flag = loop_counter < 0x11;\n              loop_counter = loop_counter + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(temp_array,num_records,0x48,compare_records_0011a250);\n      description_ptr = (undefined *)xmalloc(output_size * 2);\n      output_length = 0;\n      attribute_offset2 = 0;\n      ptr2 = description_ptr;\n      for (record_ptr = temp_array; record_ptr < record_list; record_ptr = record_ptr + 9) {\n        if (record_ptr[2] != 0) {\n          ptr1 = ptr2 + 4;\n          record_name_ptr = ptr2 + 0xc;\n          if ((record_ptr[7] == attribute_offset2) && (record_ptr[8] == output_length)) {\n            (**(code **)(program_data[1] + 0x50))(*record_ptr,ptr2);\n            (**(code **)(program_data[1] + 0x50))(0,ptr1);\n            (**(code **)(program_data[1] + 0x50))(record_ptr[2],ptr2 + 8);\n            temp9 = record_ptr[6];\n            temp6 = *record_ptr;\n            ptr2 = (undefined *)record_ptr[3];\n            ptr1 = record_name_ptr;\n            for (temp5 = temp6; temp5 != 0; temp5 = temp5 - 1) {\n              *ptr1 = *ptr2;\n              ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n              ptr1 = ptr1 + (ulong)byte_var * -2 + 1;\n            }\n            if (temp6 < temp9) {\n              for (length = temp9 - temp6; length != 0; length = length + -1) {\n                *ptr1 = 0;\n                ptr1 = ptr1 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            ptr2 = record_name_ptr + temp9;\n          }\n          else {\n            (**(code **)(program_data[1] + 0x50))();\n            if (*(int *)(program_data[1] + 8) == 5) {\n              char_var = (*(char *)(program_data[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_var = '\\b';\n            }\n            (**(code **)(program_data[1] + 0x50))(char_var,ptr1);\n            (**(code **)(program_data[1] + 0x50))(record_ptr[2],ptr2 + 8);\n            temp6 = *record_ptr;\n            ptr2 = (undefined *)record_ptr[3];\n            ptr1 = record_name_ptr;\n            for (temp9 = temp6; temp9 != 0; temp9 = temp9 - 1) {\n              *ptr1 = *ptr2;\n              ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n              ptr1 = ptr1 + (ulong)byte_var * -2 + 1;\n            }\n            temp9 = record_ptr[6];\n            if (temp6 < temp9) {\n              for (length = temp9 - temp6; length != 0; length = length + -1) {\n                *ptr1 = 0;\n                ptr1 = ptr1 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            length = program_data[1];\n            record_name_ptr = record_name_ptr + temp9;\n            ptr2 = record_name_ptr + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(program_data[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(record_ptr[7],record_name_ptr);\n              (**(code **)(program_data[1] + 0x38))(record_ptr[8],ptr2);\n              ptr2 = record_name_ptr + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(record_ptr[7],record_name_ptr);\n              (**(code **)(program_data[1] + 0x50))(record_ptr[8],record_name_ptr + 4);\n            }\n            attribute_offset2 = record_ptr[7];\n            output_length = record_ptr[8];\n          }\n        }\n      }\n      temp9 = (long)ptr2 - (long)description_ptr;\n      temp6 = temp9;\n      ptr2 = description_ptr;\n      if (temp9 < output_size) {\n        for (; output_size = temp9, temp6 != 0; temp6 = temp6 - 1) {\n          *temp_array_ptr = *ptr2;\n          ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n          temp_array_ptr = temp_array_ptr + (ulong)byte_var * -2 + 1;\n        }\n      }\n      free(description_ptr);\nLAB_001166f8:\n      free(temp_array);\n      return output_size;\n    }\n    if (((flag3 | flag1) == 0) || (flag2 == 0)) {\n      if (flag3 == 0) {\n        if (flag1 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (flag1 == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      temp7 = (**(code **)(program_data[1] + 0x28))(note_description);\n      temp5 = (**(code **)(program_data[1] + 0x28))(attribute_list[4] + 8);\n      if (temp5 < temp7) {\n        temp7 = temp5;\n      }\nLAB_00116631:\n      if (attribute_list[2] == 0x100) {\n        if (temp7 == 0) {\n          temp7 = return_address;\n        }\n        attribute_data = *attribute_list;\n        attribute_list[7] = temp7;\n        temp9 = temp5;\n        return_address = temp7;\n        if (temp5 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp7 == 0) {\n          temp7 = attribute_offset2;\n        }\n        attribute_data = *attribute_list;\n        attribute_list[7] = temp7;\n        temp6 = temp5;\n        attribute_offset2 = temp7;\n        if (temp5 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        temp7 = (**(code **)(program_data[1] + 0x40))(note_description);\n        temp5 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        temp6 = process_build_attribute_notes_001086af();\n        return temp6;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    print_bfd_error_message_001126c0(0,program_data,error_message,length);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "imported": false,
            "current_name": "process_attributes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_bfd_error_message_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTargetPtr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *currentTargetPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTargetPtr = targetList;\n  while( true ) {\n    currentTarget = *currentTargetPtr;\n    currentTargetPtr = currentTargetPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "bfd_target_list",
                "fprintf",
                "dcgettext",
                "fputc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_debug_function_0010be1a",
                "param_1": "functionInfo",
                "param_2": "newFuncAddr",
                "param_3": "unusedParam",
                "param_4": "result",
                "lVar1": "blockInfo",
                "uVar2": "errorMessage",
                "pcVar3": "errorMsgPtr",
                "auVar4": "resultArray"
            },
            "code": "\n\n\nundefined  [16] endDebugFunction_0010be1a(long functionInfo,undefined8 newFuncAddr,undefined8 unusedParam,undefined8 result)\n\n{\n  long blockInfo;\n  undefined8 errorMessage;\n  char *errorMsgPtr;\n  undefined resultArray [16];\n  \n  if (((*(long *)(functionInfo + 8) == 0) || (blockInfo = *(long *)(functionInfo + 0x20), blockInfo == 0)) ||\n     (*(long *)(functionInfo + 0x18) == 0)) {\n    errorMsgPtr = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(blockInfo + 8) == 0) {\n      *(undefined8 *)(blockInfo + 0x20) = newFuncAddr;\n      errorMessage = CONCAT71((int7)((ulong)blockInfo >> 8),1);\n      *(undefined (*) [16])(functionInfo + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMsgPtr = \"debug_end_function: some blocks were not closed\";\n  }\n  errorMessage = dcgettext(0,errorMsgPtr,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010be86:\n  resultArray._8_8_ = result;\n  resultArray._0_8_ = errorMessage;\n  return resultArray;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "end_debug_function_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_00104943",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00119dd0",
                "FUN_00116b90",
                "FUN_00116030",
                "FUN_001083b7",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_and_allocate_memory_00113da9",
                "param_1": "byte_offset",
                "param_2": "unused_param",
                "param_3": "input_param",
                "param_4": "output_param",
                "puVar1": "allocated_memory",
                "lVar2": "loop_counter",
                "puVar3": "current_address",
                "bVar4": "initialized_value",
                "auVar5": "result_variable"
            },
            "code": "\nundefined  [16] initialize_and_allocate_memory_00113da9(byte byte_offset,undefined8 unused_param,undefined8 input_param,undefined8 output_param)\n\n{\n  undefined8 *allocated_memory;\n  long loop_counter;\n  undefined8 *current_address;\n  byte initialized_value;\n  undefined result_variable [16];\n  \n  initialized_value = 0;\n  result_variable._0_8_ = initialize_data_00112904(8 - (uint)byte_offset);\n  if (result_variable._0_8_ != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x28);\n    current_address = allocated_memory + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)current_address = 0;\n      current_address = (undefined8 *)((long)current_address + (ulong)initialized_value * -8 + 4);\n    }\n    *allocated_memory = input_param;\n    *(undefined8 **)(result_variable._0_8_ + 0x10) = allocated_memory;\n  }\n  result_variable._8_8_ = output_param;\n  return result_variable;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_memory_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_flag",
                "param_1[2]": "record1_flag",
                "param_2[2]": "record2_flag",
                "param_2[7]": "record2_value1",
                "param_1[7]": "record1_value1",
                "param_2[8]": "record2_value2",
                "param_1[8]": "record1_value2"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_flag;\n  \n  record1_flag = record1_flag;\n  if (record1_flag == record2_flag) {\n    if (record2_value1 <= record1_value1) {\n      if (record1_value1 <= record2_value1) {\n        if (record2_value2 < record1_value2) {\n          return -1;\n        }\n        if (record2_value2 <= record1_value2) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_flag == 0) || ((record1_flag != 0x100 && (record2_flag != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "initialize_data_structure_0010a69a",
                "param_1": "dataStructurePtr",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "condition",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "arraySize",
                "sVar3": "strLength",
                "uVar4": "allocatedMemory",
                "uVar5": "initializedFlag",
                "local_60": "message"
            },
            "code": "\nundefined4 initializeDataStructure_0010a69a(long dataStructurePtr,undefined8 param2,int flag,char condition,uint value)\n\n{\n  undefined4 result;\n  long arraySize;\n  size_t strLength;\n  undefined8 allocatedMemory;\n  undefined initializedFlag;\n  char message [48];\n  \n  if (flag == 0) {\n    message[0] = '\\0';\n    initializedFlag = 0;\n    arraySize = 0;\n  }\n  else {\n    arraySize = resize_and_initialize_array_00109c2e();\n    if (arraySize < 0) {\n      return 0;\n    }\n    initializedFlag = 1;\n    sprintf(message,\"%ld=\",arraySize);\n  }\n  strLength = strlen(message);\n  sprintf(message + strLength,\"%c%u\",(ulong)((-(uint)(condition == '\\0') & 2) + 0x73),(ulong)value);\n  result = initialize_data_structure_00109b52(dataStructurePtr,message,arraySize,initializedFlag,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  arraySize = *(long *)(dataStructurePtr + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(arraySize + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(dataStructurePtr + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_options_00115b70",
                "param_1": "section_names",
                "pcVar1": "current_section_name",
                "iVar2": "comparison_result",
                "iVar3": "section_option",
                "lVar4": "section_4_result",
                "lVar5": "section_2_result",
                "uVar6": "result",
                "plVar7": "linked_list_pointer"
            },
            "code": "\nundefined8 check_section_options_00115b70(char **section_names)\n\n{\n  char *current_section_name;\n  int comparison_result;\n  int section_option;\n  long section_4_result;\n  long section_2_result;\n  undefined8 result;\n  long *linked_list_pointer;\n  \n  section_4_result = process_data_00114190(*section_names,0,4);\n  if (section_4_result == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      section_4_result = process_data_00114190(*section_names,0,1);\n      section_2_result = process_data_00114190(*section_names,0,2);\n      if (section_4_result != 0) {\n        if (section_2_result != 0) {\n          current_section_name = *section_names;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          execute_and_exit_00119dd0(result,current_section_name);\n        }\n        if (section_4_result != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          current_section_name = *section_names;\n          linked_list_pointer = DAT_001279d8;\n          do {\n            section_option = strcmp(current_section_name,(char *)linked_list_pointer[1]);\n            if (section_option == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              execute_and_exit_00119dd0(result,current_section_name);\n            }\n            linked_list_pointer = (long *)*linked_list_pointer;\n          } while (linked_list_pointer != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (section_2_result == 0)) {\n        return 1;\n      }\n    }\n    section_option = DAT_00127a48;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        current_section_name = *section_names;\n        comparison_result = strcmp(current_section_name,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section_name,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_option = strcmp(current_section_name,\".reloc\");\n          if (section_option != 0) {\n            return 1;\n          }\n          result = process_input_0010829e();\n          return result;\n        }\n      }\n      if (section_option == 5) {\n        result = check_string_length_00113ede(section_names);\n        return result;\n      }\n      if (section_option == 4) {\n        return 0;\n      }\n    }\n    if (section_option == 6) {\n      result = invert_and_check_string_length_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_00114190",
                "dcgettext",
                "strcmp",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_section_options_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocs_00116030",
                "param_1": "file_path",
                "param_2": "bfd_handle",
                "plVar1": "reloc_ptr",
                "lVar2": "reloc_address",
                "iVar5": "bfd_err_code",
                "in_RAX": "return_val",
                "lVar6": "fwrite_func",
                "lVar7": "num_relocs",
                "__ptr": "reloc_data",
                "lVar8": "reloc_index",
                "uStack_28": "default_return_val"
            },
            "code": "\n\n\nundefined8 process_relocs_00116030(undefined8 *file_path,long bfd_handle)\n\n{\n  long *reloc_ptr;\n  long reloc_address;\n  long lVar3;\n  long lVar4;\n  int bfd_err_code;\n  undefined8 return_val;\n  long fwrite_func;\n  void *reloc_data;\n  long num_relocs;\n  undefined8 extraout_RAX;\n  long reloc_index;\n  undefined8 default_return_val;\n  \n  if (*(long *)(bfd_handle + 0x60) == 0) {\n    return return_val;\n  }\n  fwrite_func = bfd_get_reloc_upper_bound();\n  if (fwrite_func < 0) {\n    if ((fwrite_func != -1) || (bfd_err_code = bfd_get_error(), bfd_err_code != 5)) {\n      print_bfd_error_message_0011a110(*file_path);\n                    \n      xexit(1);\n    }\n  }\n  else if (fwrite_func != 0) {\n    reloc_data = (void *)xmalloc();\n    num_relocs = bfd_canonicalize_reloc(file_path,bfd_handle,reloc_data);\n    lVar4 = _DAT_00128680;\n    lVar3 = _DAT_00128568;\n    fwrite_func = _fwrite;\n    if (num_relocs < 0) {\n      print_bfd_error_message_0011a110(*file_path);\n                    \n      xexit(1);\n    }\n    if (num_relocs != 0) {\n      reloc_index = 0;\n      do {\n        reloc_ptr = **(long ***)((long)reloc_data + reloc_index * 8);\n        if ((((reloc_ptr != (long *)0x0) && (reloc_address = *reloc_ptr, reloc_address != 0)) && (reloc_address != fwrite_func)) &&\n           ((reloc_address != lVar4 && (reloc_address != lVar3)))) {\n          *(uint *)(reloc_address + 0x18) = *(uint *)(reloc_address + 0x18) | 0x20;\n        }\n        reloc_index = reloc_index + 1;\n      } while (num_relocs != reloc_index);\n    }\n    free(reloc_data);\n    return extraout_RAX;\n  }\n  return default_return_val;\n}\n\n",
            "called": [
                "xexit",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "FUN_001083b7",
                "fwrite",
                "FUN_0011a110",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocs_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "param_1": "input_string",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_string_length_00113ede(char **input_string)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (input_string == (char **)0x0) {\n    return 0;\n  }\n  string = *input_string;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = string_comparison_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_0010829e",
                "FUN_001082b3"
            ],
            "imported": false,
            "current_name": "check_string_length_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_and_sort_0010875d",
                "param_1": "inputArray1",
                "param_2": "inputArray2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareAndSort_0010875d(long *inputArray1,long *inputArray2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *inputArray1;\n  value2 = *inputArray2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_and_sort_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_records_0010c892",
                "param_1": "functionHandle",
                "param_2": "debugData",
                "cVar1": "result",
                "lVar2": "dataInitializer",
                "lVar3": "tagType",
                "uVar4": "returnValue",
                "puVar5": "currentRecord",
                "iVar6": "recordType"
            },
            "code": "\n\n\nundefined8 processDebugRecords_0010c892(undefined8 functionHandle,long debugData)\n\n{\n  char result;\n  long dataInitializer;\n  long tagType;\n  undefined8 returnValue;\n  undefined8 *currentRecord;\n  int recordType;\n  \n  if (*(char *)(debugData + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (currentRecord = *(undefined8 **)(debugData + 0x1a0); currentRecord != (undefined8 *)0x0;\n        currentRecord = (undefined8 *)*currentRecord) {\n      recordType = *(int *)(currentRecord + 2);\n      tagType = currentRecord[1];\n      if (recordType != 0) {\n        if (tagType != 0) {\n          if (recordType - 7U < 5) goto LAB_0010c8d5;\n          returnValue = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",returnValue);\n        }\nLAB_0010c910:\n        currentRecord[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tagType == 0) goto LAB_0010c910;\n      recordType = 7;\nLAB_0010c8d5:\n      dataInitializer = initialize_data_00112904(recordType,0);\n      if (dataInitializer == 0) goto LAB_0010c910;\n      tagType = debug_tag_type_checker_0010c6be(functionHandle,tagType,dataInitializer);\n      currentRecord[3] = tagType;\n      if (tagType == 0) goto LAB_0010c916;\n    }\n    returnValue = 1;\n  }\n  else {\n    result = process_records_0010c1c6();\n    if (result != '\\0') {\n      result = end_debug_function_0010be1a(functionHandle,*(undefined8 *)(debugData + 0x68));\n      if (result != '\\0') {\n        *(undefined *)(debugData + 0x60) = 0;\n        *(undefined8 *)(debugData + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_0010c6be",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "fprintf",
                "dcgettext",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_records_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_00112904",
                "param_1": "data1",
                "param_2": "data2",
                "puVar1": "dataPointer"
            },
            "code": "\nvoid initializeData_00112904(undefined4 data1,undefined4 data2)\n\n{\n  undefined4 *dataPointer;\n  \n  dataPointer = (undefined4 *)xmalloc(0x18);\n  *dataPointer = data1;\n  dataPointer[1] = data2;\n  *(undefined (*) [16])(dataPointer + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010c6be",
                "FUN_00113b71",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_00113da9",
                "FUN_00113bfa",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00113dfe",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_00113b98",
                "FUN_00113d3a",
                "FUN_00113d6e",
                "FUN_00113b4a",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_0010c218",
                "FUN_00113cb9",
                "FUN_0010c892",
                "FUN_00113e23"
            ],
            "imported": false,
            "current_name": "initialize_data_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "in_RAX": "returnValue",
                "iVar1": "comparisonResult",
                "auVar2": "resultArray"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined resultArray [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  resultArray._1_7_ = 0;\n  resultArray[0] = comparisonResult == 0;\n  resultArray._8_8_ = returnValue;\n  return resultArray;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00104966",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_0010543c",
                "FUN_00109a32",
                "FUN_00114460",
                "FUN_00115a90",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_0010c6be",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0011173a",
                "FUN_00114190",
                "FUN_0010afd5",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010d559",
                "FUN_0010914e",
                "FUN_00115b70",
                "FUN_0010ee3f",
                "FUN_00115f50",
                "FUN_0010b0fa",
                "FUN_0010554f",
                "FUN_00108898",
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_callbacks_0011a390",
                "lVar1": "currentIndex",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex",
                "plVar4": "callbackArray",
                "uVar5": "callbackIndex"
            },
            "code": "\nvoid executeCallbacks_0011a390(void)\n\n{\n  long currentIndex;\n  long previousIndex;\n  long tempIndex;\n  long *callbackArray;\n  uint callbackIndex;\n  \n  callbackArray = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      callbackIndex = *(int *)(callbackArray + 1) - 1;\n      if (-1 < (int)callbackIndex) {\n        currentIndex = (long)(int)callbackIndex;\n        callbackIndex = callbackIndex & 7;\n        (*(code *)callbackArray[currentIndex + 2])();\n        previousIndex = currentIndex + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (callbackIndex != 0) {\n            if (callbackIndex != 1) {\n              if (callbackIndex != 2) {\n                if (callbackIndex != 3) {\n                  if (callbackIndex != 4) {\n                    if (callbackIndex != 5) {\n                      if (callbackIndex != 6) {\n                        (*(code *)callbackArray[currentIndex + 1])();\n                        previousIndex = currentIndex + -2;\n                      }\n                      (*(code *)callbackArray[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)callbackArray[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)callbackArray[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)callbackArray[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)callbackArray[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)callbackArray[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)callbackArray[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)callbackArray[tempIndex + 1])();\n            (*(code *)callbackArray[tempIndex])();\n            (*(code *)callbackArray[currentIndex])();\n            (*(code *)callbackArray[tempIndex + -2])();\n            (*(code *)callbackArray[tempIndex + -3])();\n            (*(code *)callbackArray[tempIndex + -4])();\n            (*(code *)callbackArray[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_0011a466:\n      callbackArray = (long *)*callbackArray;\n    } while (callbackArray != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_callbacks_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "create_formatted_string_0010e842",
                "param_1": "input",
                "param_2": "string",
                "param_3": "value",
                "param_4": "data",
                "__s": "formattedString",
                "auVar2": "result",
                "sVar1": "stringLength"
            },
            "code": "\nundefined  [16] createFormattedString_0010e842(undefined8 input,char *string,undefined8 value,undefined8 data)\n\n{\n  size_t stringLength;\n  char *formattedString;\n  undefined result [16];\n  \n  stringLength = strlen(string);\n  formattedString = (char *)xmalloc(stringLength + 0x14);\n  sprintf(formattedString,\"%s:c=i%ld\",string,value);\n  result._0_4_ = process_string_0010e2f0(input,0x80,0,0,formattedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = data;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "create_formatted_string_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_data_00113cb9",
                "param_1": "input",
                "lVar1": "dataPtr"
            },
            "code": "\nlong initializeData_00113cb9(long input)\n\n{\n  long dataPtr;\n  \n  if (input != 0) {\n    dataPtr = initialize_data_00112904(0xe,0);\n    if (dataPtr == 0) {\n      dataPtr = 0;\n    }\n    else {\n      *(long *)(dataPtr + 0x10) = input;\n    }\n    return dataPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_and_free_string_0010eafe",
                "param_1": "inputParam",
                "param_2": "baseString",
                "param_3": "flag",
                "__s": "extractedString",
                "sVar2": "baseStringLength",
                "sVar3": "extractedStringLength",
                "__s_00": "modifiedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 processAndFreeString_0010eafe(long inputParam,char *baseString,char flag)\n\n{\n  undefined4 result;\n  char *extractedString;\n  size_t baseStringLength;\n  size_t extractedStringLength;\n  char *modifiedString;\n  \n  if ((*(int *)(inputParam + 0x1f8) == 0) && (*(long *)(inputParam + 0x1e8) == -1)) {\n    extractedString = (char *)extract_and_free_ptr_00109b2f();\n    baseStringLength = strlen(baseString);\n    extractedStringLength = strlen(extractedString);\n    modifiedString = (char *)xmalloc(baseStringLength + 3 + extractedStringLength);\n    sprintf(modifiedString,\"%s:%c%s\",baseString,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),extractedString);\n    *(undefined8 *)(inputParam + 0x1e8) = *(undefined8 *)(inputParam + 0x10);\n    result = process_string_0010e2f0(inputParam,0x24,0,0,modifiedString);\n    if ((char)result != '\\0') {\n      free(modifiedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_string_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_data_00113df2",
                "param_1": "some_parameter"
            },
            "code": "\nvoid initialize_data_00113df2(undefined4 some_parameter)\n\n{\n  initialize_data_00113df2_00112904(4,some_parameter);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "process_data_0010a377",
                "param_1": "data",
                "cVar1": "flag",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "combinedString",
                "uVar2": "result",
                "uVar5": "alternateFlag"
            },
            "code": "\nundefined4 processData_0010a377(long data)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  undefined alternateFlag;\n  \n  alternateFlag = 1;\n  flag = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_ptr_00109b2f();\n  if (flag == '\\0') {\n    alternateFlag = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\n  }\n  string2 = (char *)extract_and_free_ptr_00109b2f(data);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  combinedString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(combinedString,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = initialize_data_structure_00109b52(data,combinedString,0,alternateFlag,0);\n  if ((char)result != '\\0') {\n    free(combinedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "process_data_0010d882",
                "param_1": "input",
                "param_2": "strings",
                "param_3": "output",
                "param_4": "flag",
                "iVar1": "iteration",
                "pcVar2": "currentString",
                "cVar3": "currentChar",
                "lVar4": "allocatedMemory",
                "pcVar5": "currentPtr",
                "uVar6": "index",
                "bVar7": "isIteration",
                "local_50": "counter",
                "local_4c": "constant",
                "local_48": "localValue",
                "local_44": "localFlag",
                "local_40": "localBuffer"
            },
            "code": "\nundefined8 processData_0010d882(long input,char **strings,long *output,undefined *flag)\n\n{\n  int iteration;\n  char *currentString;\n  char currentChar;\n  long allocatedMemory;\n  char *currentPtr;\n  ulong index;\n  bool isIteration;\n  uint counter;\n  undefined4 constant;\n  uint localValue;\n  int localFlag;\n  undefined8 localBuffer [2];\n  \n  currentString = *strings;\n  constant = 10;\n  if (output != (long *)0x0) {\n    allocatedMemory = xmalloc();\n    *output = allocatedMemory;\n    *flag = 0;\n  }\n  counter = 0;\n  while( true ) {\n    currentPtr = *strings;\n    currentChar = *currentPtr;\n    if ((currentChar == '_' || currentChar == '\\0') || (currentChar == 'e')) break;\n    if ((currentChar == 'N') || (currentChar == 'T')) {\n      *strings = currentPtr + 1;\n      if (currentChar == 'T') {\n        localFlag = 1;\n      }\n      else {\n        currentChar = extract_and_convert_number_00108ea1(strings,&localFlag);\n        if (currentChar == '\\0') goto LAB_0010d958;\n      }\n      currentChar = extract_and_convert_number_00108ea1(strings,&localValue);\n      if ((currentChar == '\\0') || (*(uint *)(input + 0x28) <= localValue)) {\nLAB_0010d958:\n        print_error_message_0010911f(currentString);\n        return 0;\n      }\n      index = (ulong)localValue;\n      while (iteration = localFlag + -1, isIteration = localFlag != 0, localFlag = iteration, isIteration) {\n        localBuffer[0] = *(undefined8 *)(*(long *)(input + 0x20) + index * 0x10);\n        currentChar = process_data_0010d7d4(input,localBuffer,output,&counter,&constant);\n        if (currentChar == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      currentChar = process_data_0010d7d4(input,strings,output,&counter,&constant);\n      if (currentChar == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output == (long *)0x0) {\n    if (currentChar != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output + (ulong)counter * 8) = 0;\n    if (*currentPtr != 'e') goto LAB_0010d9fa;\n    *flag = 1;\n  }\n  currentPtr = currentPtr + 1;\n  *strings = currentPtr;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)currentPtr >> 8),1);\n}\n\n",
            "called": [
                "FUN_0010d7d4",
                "FUN_00108ea1",
                "xmalloc",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_data_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "memoryArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "memoryPointer",
                "pauVar2": "existingPointer",
                "lVar3": "loopCounter",
                "puVar4": "currentPointer",
                "bVar5": "byteVar"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**memoryArray) [16],undefined8 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *memoryPointer;\n  undefined (*existingPointer) [16];\n  long loopCounter;\n  undefined4 *currentPointer;\n  byte byteVar;\n  \n  byteVar = 0;\n  memoryPointer = (undefined4 *)xmalloc(0x28);\n  currentPointer = memoryPointer;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentPointer = 0;\n    currentPointer = currentPointer + (ulong)byteVar * -2 + 1;\n  }\n  existingPointer = *memoryArray;\n  *(undefined8 *)(memoryPointer + 2) = param2;\n  memoryPointer[5] = param3;\n  memoryPointer[6] = param4;\n  if (existingPointer == (undefined (*) [16])0x0) {\n    existingPointer = (undefined (*) [16])xmalloc(0x10);\n    *existingPointer = ZEXT816(0);\n    *memoryArray = existingPointer;\n    *(undefined (**) [16])(*existingPointer + 8) = existingPointer;\n  }\n  **(undefined8 **)(*existingPointer + 8) = memoryPointer;\n  *(undefined4 **)(*existingPointer + 8) = memoryPointer;\n  return memoryPointer;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bc80",
                "FUN_00112996"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "param_1": "debugContext",
                "param_2": "record",
                "param_3": "unit",
                "uVar1": "errorMessage",
                "puVar2": "currentRecord",
                "uVar3": "count",
                "puVar4": "newRecord",
                "lVar5": "i",
                "puVar6": "ptr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordDebugLine_0010bf86(long debugContext,undefined8 record,undefined8 unit)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentRecord;\n  ulong count;\n  undefined4 *newRecord;\n  long i;\n  undefined4 *ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(debugContext + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    i = *(long *)(debugContext + 0x28);\n    if ((i != 0) && (*(long *)(i + 8) == *(long *)(debugContext + 0x10))) {\n      count = 0;\n      do {\n        if (*(long *)(i + 0x10 + count * 8) == -1) {\n          currentRecord = (undefined8 *)(count & 0xffffffff);\n          *(undefined8 *)(i + 0x10 + (long)currentRecord * 8) = record;\n          *(undefined8 *)(i + 0x60 + (long)currentRecord * 8) = unit;\n          goto LAB_0010c056;\n        }\n        count = count + 1;\n      } while (count != 10);\n    }\n    newRecord = (undefined4 *)xmalloc(0xb0);\n    ptr = newRecord;\n    for (i = 0x2c; i != 0; i = i + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(debugContext + 0x10);\n    *(undefined8 *)(newRecord + 4) = record;\n    *(undefined8 *)(newRecord + 2) = errorMessage;\n    *(undefined8 *)(newRecord + 0x18) = unit;\n    ptr = newRecord + 6;\n    for (i = 0x48; i != 0; i = i + -1) {\n      *(undefined *)ptr = 0xff;\n      ptr = (undefined4 *)((long)ptr + (ulong)flag * -2 + 1);\n    }\n    currentRecord = *(undefined8 **)(debugContext + 0x28);\n    if (currentRecord == (undefined8 *)0x0) {\n      currentRecord = *(undefined8 **)(debugContext + 8);\n      currentRecord[2] = newRecord;\n    }\n    else {\n      *currentRecord = newRecord;\n    }\n    *(undefined4 **)(debugContext + 0x28) = newRecord;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentRecord >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "match_pattern_0011a170",
                "param_1": "pattern",
                "param_2": "string",
                "__pattern": "currentPattern",
                "iVar1": "result"
            },
            "code": "\nint matchPattern_0011a170(char **pattern,char **string)\n\n{\n  char *currentPattern;\n  int result;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    result = fnmatch(currentPattern + 1,*string,0);\n    if (result == 0) {\n      *(undefined *)(string + 1) = 0;\n      return result;\n    }\n  }\n  else {\n    result = fnmatch(currentPattern,*string,0);\n    if (result == 0) {\n      *(undefined *)(string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "match_pattern_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "functionPointer",
                "param_2": "size",
                "param_3": "length",
                "param_4": "parameter",
                "param_5": "pointer",
                "puVar1": "currentElement",
                "uVar2": "errorMessage",
                "puVar3": "newNode",
                "puVar4": "tempElement",
                "lVar5": "temp",
                "puVar6": "lastElement",
                "puVar7": "currentNode",
                "bVar8": "flag"
            },
            "code": "\n\n\nundefined8\nrecordParameter_0010bd62(long functionPointer,long size,long length,undefined4 parameter,undefined8 pointer)\n\n{\n  undefined8 *currentElement;\n  undefined8 errorMessage;\n  undefined4 *newNode;\n  undefined8 *tempElement;\n  long temp;\n  undefined8 *lastElement;\n  undefined4 *currentNode;\n  byte flag;\n  \n  flag = 0;\n  if (size == 0) {\n    return 0;\n  }\n  if (length != 0) {\n    if ((*(long *)(functionPointer + 8) != 0) && (*(long *)(functionPointer + 0x18) != 0)) {\n      newNode = (undefined4 *)xmalloc(0x28);\n      currentNode = newNode;\n      for (temp = 10; temp != 0; temp = temp + -1) {\n        *currentNode = 0;\n        currentNode = currentNode + (ulong)flag * -2 + 1;\n      }\n      temp = *(long *)(functionPointer + 0x18);\n      *(long *)(newNode + 2) = size;\n      *(long *)(newNode + 4) = length;\n      newNode[6] = parameter;\n      currentElement = *(undefined8 **)(temp + 8);\n      *(undefined8 *)(newNode + 8) = pointer;\n      lastElement = (undefined8 *)(temp + 8);\n      while (tempElement = currentElement, tempElement != (undefined8 *)0x0) {\n        lastElement = tempElement;\n        currentElement = (undefined8 *)*tempElement;\n      }\n      *lastElement = newNode;\n      return 1;\n    }\n    errorMessage = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archived_files_00104ea2",
                "cVar1": "result",
                "iVar2": "arch_type",
                "ppcVar3": "temp_file_list",
                "pvVar4": "temp_buf",
                "lVar5": "bytes_read",
                "ppcVar6": "archive",
                "pcVar7": "filename",
                "puVar8": "temp_dir_info",
                "piVar9": "errno_location",
                "pcVar10": "print_message",
                "uVar11": "error_message",
                "lVar12": "file_size",
                "pcVar13": "close_func",
                "lVar14": "bytes_written",
                "unaff_EBX": "stat_error",
                "unaff_RBP": "stat_buf",
                "pcVar15": "pathname",
                "psVar16": "stat_ptr",
                "unaff_R12": "temp_dir",
                "unaff_R13": "temp_files",
                "unaff_R15": "next_archived_file",
                "bVar17": "bit_value",
                "unaff_retaddr": "return_address",
                "param_7": "archive_filename",
                "param_8": "arch_size_ptr",
                "param_9": "temp_dirname",
                "param_10": "archive_format",
                "param_11": "write_mode",
                "in_stack_00000030": "unknown_flag",
                "param_18": "permissions",
                "param_19": "file_count"
            },
            "code": "\nvoid copy_archived_files_00104ea2(void)\n\n{\n  char result;\n  int arch_type;\n  char **temp_file_list;\n  void *temp_buf;\n  long bytes_read;\n  char **archive;\n  char *filename;\n  undefined8 *temp_dir_info;\n  int *errno_location;\n  char *print_message;\n  undefined8 error_message;\n  long file_size;\n  code *close_func;\n  long bytes_written;\n  int stat_error;\n  stat *stat_buf;\n  char *pathname;\n  stat *stat_ptr;\n  char *temp_dir;\n  undefined8 *temp_files;\n  char **next_archived_file;\n  byte bit_value;\n  undefined8 return_address;\n  undefined8 *archive_filename;\n  long *arch_size_ptr;\n  char *temp_dirname;\n  undefined8 *archive_format;\n  undefined8 write_mode;\n  undefined8 unknown_flag;\n  uint permissions;\n  long file_count;\n  \n  bit_value = 0;\ncode_r0x00104ea2:\n  archive = (char **)bfd_openw(temp_dir,write_mode);\n  if (archive == (char **)0x0) {\nLAB_00104e80:\n    print_bfd_error_message_001126c0(temp_dir,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = FUNC_00114e50(next_archived_file,archive,return_address);\n    if (result == '\\0') {\n      arch_type = bfd_get_arch(next_archived_file);\n      if (arch_type == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(archive);\n      if (result != '\\0') goto LAB_00104ec9;\n      print_bfd_error_message_001126c0(temp_dir,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(archive);\n    archive = next_archived_file;\n    if (result == '\\0') {\n      print_bfd_error_message_001126c0(temp_dir,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (stat_error == 0)) {\n      set_time_0011a350(temp_dir,stat_buf);\n    }\n    file_size = bfd_openr(temp_dir,write_mode);\n    temp_files[2] = file_size;\n    *arch_size_ptr = file_size;\n    arch_size_ptr = (long *)(file_size + 0xf0);\n    next_archived_file = (char **)bfd_openr_next_archived_file(archive_format,archive);\n    bfd_close(archive);\n    while ((DAT_00127a40 == 0 && (next_archived_file != (char **)0x0))) {\n      print_message = *next_archived_file;\n      filename = print_message;\n      if (*print_message == '/') {\nLAB_0010527d:\n        error_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(error_message,print_message);\n        goto LAB_00104e93;\n      }\n      while (*filename != '\\0') {\n        pathname = filename;\n        if ((*filename == '.') && (pathname = filename + 1, filename[1] == '.')) {\n          pathname = filename + 2;\n          if ((filename[2] == '\\0') || (filename[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pathname != '\\0' && (*pathname != '/')); pathname = pathname + 1) {\n        }\n        filename = pathname;\n        if (*pathname == '/') {\n          copy_archive_contents_001052a2();\n          return;\n        }\n      }\n      stat_buf = (stat *)&stack0x00000050;\n      temp_dir = (char *)concat(temp_dirname,&DAT_0011b47d);\n      arch_type = stat(temp_dir,stat_buf);\n      temp_dir_info = temp_files;\n      if (-1 < arch_type) {\n        file_size = create_temporary_directory_0011a0e0(temp_dir);\n        free(temp_dir);\n        if (file_size == 0) {\n          errno_location = __errno_location();\n          print_message = strerror(*errno_location);\n          error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(error_message,print_message);\n          goto LAB_00104e93;\n        }\n        temp_dir_info = (undefined8 *)xmalloc(0x18);\n        print_message = *next_archived_file;\n        *temp_dir_info = temp_files;\n        temp_dir_info[2] = 0;\n        temp_dir_info[1] = file_size;\n        temp_dir = (char *)concat(file_size,&DAT_0011b47d,print_message);\n      }\n      stat_error = 0;\n      if (DAT_001279eb != '\\0') {\n        stat_ptr = stat_buf;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&stat_ptr->st_dev = 0;\n          stat_ptr = (stat *)((long)stat_ptr + (ulong)bit_value * -8 + 4);\n        }\n        archive = (char **)next_archived_file[0x1d];\n        if ((char **)next_archived_file[0x1d] == (char **)0x0) {\n          archive = next_archived_file;\n        }\n        stat_error = (**(code **)(archive[1] + 0x1e8))(next_archived_file,stat_buf);\n        if (stat_error != 0) {\n          print_message = *next_archived_file;\n          error_message = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(error_message,print_message);\n        }\n      }\n      temp_files = (undefined8 *)xmalloc(0x18);\n      temp_files[1] = temp_dir;\n      *temp_files = temp_dir_info;\n      temp_files[2] = 0;\n      result = bfd_check_format(next_archived_file,1);\n      if (result != '\\0') {\n        if (unknown_flag._7_1_ != '\\0') goto code_r0x00104ea2;\n        archive = (char **)bfd_openw(temp_dir,*(undefined8 *)next_archived_file[1]);\n        if (archive == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      error_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n      print_bfd_error_message_001126c0(0,next_archived_file,0,error_message);\n      archive = (char **)bfd_openw(temp_dir,write_mode);\n      if (archive == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      temp_file_list = (char **)next_archived_file[0x1d];\n      if ((char **)next_archived_file[0x1d] == (char **)0x0) {\n        temp_file_list = next_archived_file;\n      }\n      arch_type = (**(code **)(temp_file_list[1] + 0x1e8))(next_archived_file);\n      file_size = file_count;\n      if (arch_type == 0) {\n        if (file_count < 0) {\n          get_formatted_string_001125fa(next_archived_file);\n          error_message = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          print_error_message_00119ed0(error_message);\n        }\n        else {\n          arch_type = bfd_seek(next_archived_file,0,0);\n          if (arch_type == 0) {\n            if (DAT_001279e9 != '\\0') {\n              print_message = *archive;\n              error_message = get_formatted_string_001125fa(next_archived_file);\n              filename = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(filename,error_message,print_message);\n            }\n            temp_buf = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (file_size == 0) {\n                chmod(*archive,permissions | 0x100);\n                free(temp_buf);\n                result = bfd_close_all_done(archive);\n                archive = next_archived_file;\n                if (result == '\\0') {\n                  print_bfd_error_message_001126c0(temp_dir,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytes_written = 0x2000;\n              if (file_size < 0x2001) {\n                bytes_written = file_size;\n              }\n              bytes_read = bfd_bread(temp_buf,bytes_written,next_archived_file);\n              temp_file_list = next_archived_file;\n              if ((bytes_written != bytes_read) ||\n                 (bytes_read = bfd_bwrite(temp_buf,bytes_written,archive), temp_file_list = archive, bytes_written != bytes_read))\n              break;\n              file_size = file_size - bytes_written;\n            }\n            print_bfd_error_message_001126c0(0,temp_file_list,0,0);\n            free(temp_buf);\n          }\n          else {\n            error_message = get_formatted_string_001125fa(next_archived_file);\n            print_bfd_error_message_0011a110(error_message);\n          }\n        }\n      }\n      else {\n        print_bfd_error_message_001126c0(0,next_archived_file,0,0);\n      }\n      result = bfd_close_all_done(archive);\n      if (result == '\\0') {\n        print_bfd_error_message_001126c0(temp_dir,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(temp_dir);\n      DAT_00127a40 = 1;\n    }\n    *arch_size_ptr = 0;\n    temp_buf = (void *)xstrdup(*archive_filename);\n    if (DAT_00127a40 == 0) {\n      close_func = bfd_close;\n    }\n    else {\n      close_func = bfd_close_all_done;\n    }\n    result = (*close_func)(archive_filename);\n    if (result == '\\0') {\n      DAT_00127a40 = 1;\n      print_bfd_error_message_001126c0(temp_buf,0,0,0);\n    }\n    free(temp_buf);\n    temp_buf = (void *)xstrdup(*archive_format);\n    result = bfd_close(archive_format);\n    if (result == '\\0') {\n      DAT_00127a40 = 1;\n      print_bfd_error_message_001126c0(temp_buf,0,0,0);\n    }\n    free(temp_buf);\n  }\n  while (temp_files != (undefined8 *)0x0) {\n    if (temp_files[2] == 0) {\n      rmdir((char *)temp_files[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)temp_files[1]);\n    }\n    free((void *)temp_files[1]);\n    temp_dir_info = (undefined8 *)*temp_files;\n    free(temp_files);\n    temp_files = temp_dir_info;\n  }\n  rmdir(temp_dirname);\n  free(temp_dirname);\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_close_all_done",
                "FUN_001125fa",
                "bfd_close",
                "dcgettext",
                "FUN_00104ea2",
                "printf",
                "strerror",
                "rmdir",
                "FUN_001052a2",
                "bfd_check_format",
                "chmod",
                "bfd_bwrite",
                "bfd_close_all_done",
                "FUN_001126c0",
                "bfd_close",
                "FUN_0011a0e0",
                "free",
                "bfd_get_arch",
                "bfd_seek",
                "xstrdup",
                "bfd_openr_next_archived_file",
                "unlink",
                "FUN_0011a110",
                "bfd_openw",
                "xmalloc",
                "bfd_bread",
                "FUN_00114b84",
                "__errno_location",
                "bfd_openr",
                "FUN_0011a350",
                "stat",
                "concat",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archived_files_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_001126c0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_data_structure_00113ce0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "lVar1": "initialized_data",
                "plVar2": "allocated_memory",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nallocate_data_structure_00113ce0(long input_param_1,long input_param_2,undefined input_param_3,undefined8 input_param_4,undefined8 input_param_5)\n\n{\n  long initialized_data;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (input_param_1 != 0) {\n    initialized_data = initialize_data_00112904(0xd,0);\n    if (initialized_data != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_param_1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_param_2;\n      *(undefined *)(allocated_memory + 2) = input_param_3;\n      *(long **)(initialized_data + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  initialized_data = 0;\nLAB_00113d2f:\n  return_value._8_8_ = input_param_5;\n  return_value._0_8_ = initialized_data;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_data_structure_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_process_file_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "bufferOffset",
                "unaff_R12": "readOffset",
                "unaff_R14": "maxOffset",
                "sVar4": "bytesRead",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "uVar3": "messageBuffer"
            },
            "code": "\nvoid readAndProcessFile_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 messageBuffer;\n  size_t bytesRead;\n  FILE *file;\n  long bufferOffset;\n  long readOffset;\n  long maxOffset;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(bufferOffset + 0x20) + readOffset),1,maxOffset - readOffset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      messageBuffer = *(undefined8 *)(bufferOffset + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      execute_and_exit_00119dd0(errorMessage,messageBuffer);\n    }\n    readOffset = readOffset + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (readOffset == maxOffset) {\n      maxOffset = readOffset * 2;\n      messageBuffer = xrealloc(*(undefined8 *)(bufferOffset + 0x20),maxOffset);\n      *(undefined8 *)(bufferOffset + 0x20) = messageBuffer;\n    }\n  }\n  *(long *)(bufferOffset + 0x18) = readOffset;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "fclose",
                "dcgettext",
                "FUN_00114dc7",
                "ferror",
                "xrealloc",
                "feof",
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_header_00119f70",
                "param_1": "header",
                "param_2": "output",
                "uVar1": "status",
                "cVar2": "check",
                "iVar3": "count",
                "uVar4": "endian2",
                "__format": "formatStr",
                "lVar6": "size",
                "uVar7": "data",
                "lVar8": "buffer"
            },
            "code": "\nundefined4 processHeader_00119f70(undefined8 *header,undefined8 *output)\n\n{\n  undefined4 status;\n  char check;\n  int count;\n  undefined8 endian2;\n  undefined8 uVar5;\n  char *formatStr;\n  long size;\n  undefined8 data;\n  long buffer;\n  \n  count = *(int *)((long)output + 0xc) + 1;\n  *(int *)((long)output + 0xc) = count;\n  if ((ulong)output[2] < (ulong)((long)count * 0x60)) {\n    size = 0x3000;\n    if (0x3f < count) {\n      size = (long)count * 0xc0;\n    }\n    buffer = xrealloc(output[3]);\n    output[3] = buffer;\n    memset((void *)(buffer + output[2]),0,size - output[2]);\n    output[2] = size;\n  }\n  status = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)output + 0xc) * 0x60 + output[3] + -0x60) = *header;\n  endian2 = endian_check_00114e00(status);\n  uVar5 = endian_check_00114e00(*(undefined4 *)(header + 2));\n  data = *header;\n  formatStr = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatStr,data,uVar5,endian2);\n  size = bfd_openw(*output,*header);\n  if (size == 0) {\n    print_bfd_error_message_0011a110(*output);\n    *(undefined4 *)(output + 1) = 1;\n  }\n  else {\n    count = 2;\n    check = bfd_set_format(size,1);\n    if (check == '\\0') {\n      count = bfd_get_error();\n      if (count != 5) {\n        print_bfd_error_message_0011a110(*header);\n        *(undefined4 *)(output + 1) = 1;\n      }\n    }\n    else {\n      do {\n        check = (**(code **)(*(long *)(size + 8) + 0x2a0))(size,count,0);\n        if (check != '\\0') {\n          data = bfd_printable_arch_mach(count,0);\n          printf(\"  %s\\n\",data);\n          *(undefined *)\n           ((long)*(int *)((long)output + 0xc) * 0x60 + output[3] + -0x58 + (ulong)(count - 2)) =\n               1;\n        }\n        count = count + 1;\n      } while (count != 0x57);\n    }\n    bfd_close_all_done(size);\n  }\n  return *(undefined4 *)(output + 1);\n}\n\n",
            "called": [
                "printf",
                "bfd_openw",
                "bfd_get_error",
                "FUN_00114e00",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_set_format",
                "bfd_close_all_done",
                "FUN_0011a110",
                "FUN_001053d5",
                "xrealloc",
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_header_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_and_write_file_00115a90",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "param_3": "permissions",
                "iVar1": "originalError",
                "__fd": "destinationFileDescriptor",
                "iVar2": "readResult",
                "_Var3": "sourceFilePosition",
                "uVar4": "totalBytesCopied",
                "sVar5": "writeResult",
                "piVar6": "errnoLocation",
                "local_2038": "buffer"
            },
            "code": "\nulong copyAndWriteFile_00115a90(int sourceFileDescriptor,char *destinationFilePath,long permissions)\n\n{\n  int originalError;\n  int destinationFileDescriptor;\n  int readResult;\n  __off_t sourceFilePosition;\n  ulong totalBytesCopied;\n  size_t writeResult;\n  int *errnoLocation;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (sourceFilePosition = lseek(sourceFileDescriptor,0,0), sourceFilePosition == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      totalBytesCopied = close_file_and_set_error_00108237();\n      return totalBytesCopied;\n    }\n    do {\n      totalBytesCopied = read(sourceFileDescriptor,buffer,0x2000);\n      readResult = (int)totalBytesCopied;\n      if (readResult < 1) {\n        errnoLocation = __errno_location();\n        originalError = *errnoLocation;\n        fchmod(destinationFileDescriptor,*(__mode_t *)(permissions + 0x18));\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (readResult != 0) {\n          *errnoLocation = originalError;\n          return 0xffffffff;\n        }\n        return totalBytesCopied & 0xffffffff;\n      }\n      writeResult = write(destinationFileDescriptor,buffer,(long)readResult);\n    } while (writeResult == (long)readResult);\n    errnoLocation = __errno_location();\n    readResult = *errnoLocation;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoLocation = readResult;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "__errno_location",
                "FUN_00108237",
                "fchmod",
                "write",
                "open",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_and_write_file_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_with_reason_00108200",
                "piVar1": "errorLocationPtr",
                "uVar2": "errorMessage",
                "unaff_RBP": "fileToCopy",
                "unaff_R12B": "copyFlag",
                "unaff_R13": "timeValue",
                "auVar3": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyFileWithReason_00108200(void)\n\n{\n  int *errorLocationPtr;\n  undefined8 errorMessage;\n  char *fileToCopy;\n  char copyFlag;\n  ulong timeValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errorLocationPtr = __errno_location();\n  strerror(*errorLocationPtr);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00119ed0(errorMessage);\n  unlink(fileToCopy);\n  if (copyFlag != '\\0') {\n    set_time_0011a350();\n  }\n  result._0_8_ = timeValue & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext",
                "FUN_0011a350",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 268993,
    "layers": [
        [
            "FUN_0010ab4d",
            "FUN_0010be88",
            "FUN_00119e70",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_00114cf0",
            "FUN_001054af",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00109c2e",
            "FUN_001052a2",
            "FUN_0011a1b0",
            "FUN_0010911f",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00113f20",
            "FUN_00109022",
            "FUN_00109b52",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00114e00",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_00108fe8",
            "FUN_001129f4",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_001082c3",
            "FUN_00114d50",
            "FUN_00108800",
            "FUN_00104d1c",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_00104c36",
            "FUN_00119970",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a110",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_0011a250",
            "FUN_0010875d",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62"
        ],
        [
            "FUN_00113dfe",
            "FUN_0010c218",
            "FUN_0010aa53",
            "FUN_0010bc80",
            "FUN_0010a181",
            "FUN_00113bfa",
            "FUN_00109e76",
            "FUN_00112996",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_001053d5",
            "FUN_0010c05d",
            "FUN_00113e17",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_00113e23",
            "FUN_0010a2b9",
            "FUN_00119ed0",
            "FUN_0011a0e0",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010abdd",
            "FUN_00113c43",
            "FUN_0010a94e",
            "FUN_0010a0e9",
            "FUN_00113d6e",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00109cf4",
            "FUN_0010a77a",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00113da9",
            "FUN_0010a69a",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_00113cb9",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_00113ce0",
            "FUN_00119f70",
            "FUN_00115a90"
        ],
        [
            "FUN_0010ba08",
            "FUN_00108466",
            "FUN_001199d0",
            "FUN_0010c139",
            "FUN_00109d3e",
            "FUN_00104cc1",
            "FUN_00108375",
            "FUN_0010afd5",
            "FUN_001053b5",
            "FUN_00109d5c",
            "FUN_0010da0b",
            "FUN_00108d9a",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_0011a2e0",
            "FUN_00104ad6",
            "FUN_0010adf2",
            "FUN_00113f50",
            "FUN_00104966",
            "FUN_0010808f",
            "FUN_00105828",
            "FUN_0010bba1",
            "FUN_00115f30",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010c2d2",
            "FUN_001083de",
            "FUN_0010a83e",
            "FUN_00104d25",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00119940",
            "FUN_00109dfe",
            "FUN_00109ab1",
            "FUN_0010543c",
            "FUN_00114c80",
            "FUN_0010882c",
            "FUN_0011a350",
            "FUN_0010e2f0",
            "FUN_00114190",
            "FUN_00114dc7"
        ],
        [
            "FUN_0011173a",
            "thunk_FUN_0010e439",
            "FUN_0010e439",
            "FUN_0010a083",
            "FUN_0010e453",
            "FUN_0010ed2c",
            "FUN_0010e9a0",
            "FUN_00108179",
            "FUN_0010e8a9",
            "FUN_0010829e",
            "FUN_0010ec73",
            "FUN_00115970",
            "FUN_0010a0a0",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00114690",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114c20",
            "FUN_0010b948",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_0010a424",
            "FUN_0010ebb0",
            "FUN_0010e918",
            "FUN_0010c892",
            "FUN_0010e842",
            "FUN_0010eafe",
            "FUN_00104ea2",
            "FUN_00108200"
        ],
        [
            "FUN_00112502",
            "FUN_00108072",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": []
}