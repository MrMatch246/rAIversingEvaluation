{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_001063a0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  FUNC_00105530();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105530",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "update_relocation_00103c00",
                "param_1": "param_ptr",
                "param_2": "data_ptr",
                "param_3": "reloc_ptr",
                "puVar1": "ptr1",
                "auVar2": "temp_array",
                "lVar3": "length",
                "uVar4": "temp_var1",
                "uVar5": "temp_var2"
            },
            "code": "\nundefined8\nupdateRelocation_00103c00(undefined8 *param_ptr,long data_ptr,undefined (*reloc_ptr) [16],undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined8 *ptr1;\n  undefined temp_array [16];\n  long length;\n  undefined8 temp_var1;\n  undefined8 temp_var2;\n  \n  **(long **)*reloc_ptr = data_ptr;\n  if ((*(byte *)(data_ptr + 0x24) & 4) == 0) {\n    **(undefined8 **)(*reloc_ptr + 8) = 0;\n    **(undefined8 **)reloc_ptr[1] = 0;\n  }\n  else {\n    length = bfd_get_reloc_upper_bound();\n    if (-1 < length) {\n      ptr1 = *(undefined8 **)(*reloc_ptr + 8);\n      temp_var1 = xmalloc(length);\n      temp_var2 = *(undefined8 *)(reloc_ptr[1] + 8);\n      *ptr1 = temp_var1;\n      ptr1 = *(undefined8 **)reloc_ptr[1];\n      temp_var2 = bfd_canonicalize_reloc(param_ptr,data_ptr,**(undefined8 **)(*reloc_ptr + 8),temp_var2);\n      *ptr1 = temp_var2;\n      if (-1 < **(long **)reloc_ptr[1]) goto LAB_00103c7c;\n    }\n    FUN_00106530(*param_ptr);\n  }\nLAB_00103c7c:\n  length = *(long *)(*reloc_ptr + 8) + 8;\n  *(long *)reloc_ptr[1] = *(long *)reloc_ptr[1] + 8;\n  temp_array._8_4_ = (int)length;\n  temp_array._0_8_ = *(long *)*reloc_ptr + 8;\n  temp_array._12_4_ = (int)((ulong)length >> 0x20);\n  *reloc_ptr = temp_array;\n  return param_5;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "update_relocation_00103c00"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_type_information_0010370a",
                "plVar4": "printWidth",
                "uVar9": "rbx",
                "cVar1": "isUndefinedSymclass",
                "pcVar10": "typeDescription",
                "uVar2": "typeCode",
                "lVar7": "typeInfo",
                "bVar8": "typeFlag",
                "piVar5": "errorNumber",
                "iVar3": "asprintfReturnValue"
            },
            "code": "\nvoid printTypeInformation_0010370a(void)\n\n{\n  char isUndefinedSymclass;\n  ushort typeCode;\n  int asprintfReturnValue;\n  long *printWidth;\n  int *errorNumber;\n  undefined8 uVar6;\n  long typeInfo;\n  ulong unaff_RBX;\n  byte typeFlag;\n  ulong rbx;\n  char *typeDescription;\n  \n  printWidth = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  rbx = unaff_RBX & 0xffffffff;\n  FUN_00106300(printWidth,rbx);\n  FUN_00104740(\"%-20s|\",printWidth,0,rbx);\n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*printWidth + 8));\n  if (isUndefinedSymclass == '\\0') {\n    FUN_001054d0(*(undefined8 *)*printWidth);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*printWidth + 8));\n  if (*(char *)(*printWidth + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*printWidth + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*printWidth + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[3] != 0) {\n      typeInfo = *(long *)(printWidth[3] + 0x30);\n      isUndefinedSymclass = *(char *)(typeInfo + 0x28);\n      if (isUndefinedSymclass == 'g') goto LAB_00103983;\n      if (isUndefinedSymclass == 'h') {\n        typeDescription = \"Line\";\n      }\n      else if (isUndefinedSymclass == 'd') {\n        typeDescription = \"Block\";\n      }\n      else if (*(ushort *)(typeInfo + 0x26) == 0) {\n        typeDescription = \"None\";\n      }\n      else {\n        typeCode = *(ushort *)(typeInfo + 0x26) >> 4 & 3;\n        if (typeCode == 2) {\n          typeDescription = \"Function\";\n        }\n        else if (typeCode == 3) {\n          typeDescription = \"Array\";\n        }\n        else {\n          if (typeCode != 1) {\n            free(DAT_0010b730);\n            typeCode = *(ushort *)(typeInfo + 0x26);\n            typeFlag = *(byte *)(typeInfo + 0x28);\n            typeDescription = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfReturnValue = asprintf(&DAT_0010b730,typeDescription,(ulong)typeFlag,(ulong)typeCode);\n            typeDescription = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          typeDescription = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    typeFlag = *(byte *)(printWidth[2] + 0x48) & 0xf;\n    switch(typeFlag) {\n    case 0:\n      typeDescription = \"NOTYPE\";\n      break;\n    case 1:\n      typeDescription = \"OBJECT\";\n      break;\n    case 2:\n      typeDescription = \"FUNC\";\n      break;\n    case 3:\n      typeDescription = \"SECTION\";\n      break;\n    case 4:\n      typeDescription = \"FILE\";\n      break;\n    case 5:\n      typeDescription = \"COMMON\";\n      break;\n    case 6:\n      typeDescription = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      typeDescription = \"<processor specific>: %d\";\n      if ((2 < typeFlag - 0xd) && (typeDescription = \"<OS specific>: %d\", 2 < typeFlag - 10)) {\n        typeDescription = \"<unknown>: %d\";\n      }\n      typeDescription = (char *)dcgettext(0,typeDescription,5);\n      asprintfReturnValue = asprintf(&DAT_0010b728,typeDescription,(ulong)typeFlag);\n      typeDescription = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfReturnValue < 0) {\n        errorNumber = __errno_location();\n        uVar6 = xstrerror(*errorNumber);\n        FUN_00106300(&DAT_0010712d,uVar6);\nLAB_00103983:\n        typeDescription = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",typeDescription);\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(printWidth[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUN_001054d0();\n  }\n  typeInfo = printWidth[2];\n  if ((typeInfo != 0) || (typeInfo = printWidth[3], typeInfo != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(typeInfo + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "FUN_001054d0"
            ],
            "imported": false,
            "current_name": "print_type_information_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "select_output_format_00104370",
                "param_1": "inputFormat",
                "param_2": "additionalParam",
                "uVar1": "errorMsg",
                "ppuVar2": "result"
            },
            "code": "\nundefined ** selectOutputFormat_00104370(undefined *inputFormat,undefined8 additionalParam)\n\n{\n  undefined8 errorMsg;\n  undefined **result;\n  \n  switch(*inputFormat) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_FUN_0010b260 = (undefined *)&PTR_FUN_0010ace0;\n    return &PTR_FUN_0010ace0;\n  default:\n    errorMsg = dcgettext(0,\"%s: invalid output format\",5);\n    FUN_00106300(errorMsg,inputFormat);\n    errorMsg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    FUN_00106400(errorMsg);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    result = (undefined **)FUN_00104397(inputFormat,additionalParam,3);\n    return result;\n  case 0x50:\n  case 0x70:\n    result = (undefined **)FUN_00104397(inputFormat,additionalParam,2);\n    return result;\n  case 0x53:\n  case 0x73:\n    result = (undefined **)FUN_00104397(inputFormat,additionalParam,1);\n    return result;\n  }\n}\n\n",
            "called": [
                "FUN_00104397",
                "dcgettext",
                "caseD_4a",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "select_output_format_00104370"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_001055f0",
                "FUN_0010268b",
                "FUN_00103c00",
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_001063a0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001035a2",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00106540",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_001048e0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "formatList",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "matchingFormats",
                "_stdout": "stdout",
                "_stderr": "stderr"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *formatList)\n\n{\n  undefined8 matchingFormats;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(stdout);\n  matchingFormats = DAT_0010b820;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(stderr,formatString,matchingFormats);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "free",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_data_001036a7",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid printData_001036a7(undefined8 *data1,undefined8 *data2,undefined8 param3,undefined8 param4)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (data1 != (undefined8 *)0x0) {\n      printf(\"%s:\",*data1);\n    }\n    printf(\"%s:\",*data2,param4);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_data_001036a7"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbol_info_00102f19",
                "param_1": "filename",
                "pcVar1": "format"
            },
            "code": "\nvoid printSymbolInfo_00102f19(undefined8 filename)\n\n{\n  char *format;\n  \n  format = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    format = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  format = (char *)dcgettext(0,format,5);\n  printf(format,filename);\n  format = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    format = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  format = (char *)dcgettext(0,format,5);\n  printf(format);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00102f19"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "check_binary_compatibility_00102fc3",
                "param_1": "filePath1",
                "param_2": "filePath2",
                "__s": "string1",
                "__s_00": "string2",
                "uVar2": "length1",
                "uVar3": "length2",
                "lVar4": "fileInfo1",
                "lVar5": "fileInfo2",
                "sVar6": "string1Length",
                "sVar7": "string2Length",
                "pcVar8": "substring1",
                "pcVar9": "substring2",
                "uVar10": "result",
                "uVar11": "offset1",
                "uVar12": "offset2",
                "uVar13": "pointer1",
                "unaff_R13": "pointer2",
                "bVar14": "isLess"
            },
            "code": "\nulong checkBinaryCompatibility_00102fc3(undefined8 filePath1,undefined8 filePath2)\n\n{\n  char cVar1;\n  ulong length1;\n  char *string1;\n  char *string2;\n  uint length2;\n  long fileInfo1;\n  long fileInfo2;\n  size_t string1Length;\n  size_t string2Length;\n  char *substring1;\n  char *substring2;\n  ulong result;\n  ulong offset1;\n  ulong offset2;\n  undefined8 pointer1;\n  long pointer2;\n  bool isLess;\n  \n  pointer1 = *DAT_0010b780;\n  FUN_00106530();\n  fileInfo1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,pointer1,DAT_0010b770);\n  fileInfo2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,filePath2,DAT_0010b768);\n  if ((fileInfo1 == 0) || (pointer2 = fileInfo2, fileInfo2 == 0)) {\n    fileInfo2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(fileInfo1 + 0x20) == 0x10c2a8) || (*(long *)(fileInfo2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(fileInfo1 + 0x20) + 0x30);\n  length1 = *(ulong *)(*(long *)(fileInfo2 + 0x20) + 0x30);\n  offset2 = *(long *)(fileInfo1 + 0x10) + result;\n  offset1 = *(long *)(pointer2 + 0x10) + length1;\n  isLess = offset2 < offset1;\n  if ((offset2 != offset1) || (isLess = result < length1, result != length1)) {\n    return (ulong)(-(uint)isLess | 1);\n  }\n  string1 = *(char **)(fileInfo1 + 8);\n  string2 = *(char **)(pointer2 + 8);\n  string1Length = strlen(string1);\n  string2Length = strlen(string2);\n  substring1 = strstr(string1,\"gnu_compiled\");\n  if (substring1 == (char *)0x0) {\n    substring2 = strstr(string1,\"gcc2_compiled\");\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if ((substring1 == (char *)0x0) && (substring1 = strstr(string2,\"gcc2_compiled\"), substring1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (substring2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if (substring1 == (char *)0x0) {\n      substring2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (substring2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  length2 = *(uint *)(pointer2 + 0x18) & 0x4000;\n  if ((*(byte *)(fileInfo1 + 0x19) & 0x40) == 0) {\n    if ((string1Length < 3) || (string1[string1Length - 2] != '.')) {\n      if (length2 != 0) {\n        return 1;\n      }\n      if ((string2Length < 3) || (string2[string2Length - 2] != '.')) goto LAB_00103202;\n      isLess = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = string1[string1Length - 1];\n    isLess = cVar1 == 'o' || cVar1 == 'a';\n    if (length2 == 0) {\n      if ((string2Length < 3) || (string2[string2Length - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (length2 != 0) goto LAB_00103202;\n    if (string2Length < 3) {\n      return 0xffffffff;\n    }\n    if (string2[string2Length - 2] != '.') {\n      return 0xffffffff;\n    }\n    isLess = true;\nLAB_001031e7:\n    if ((string2[string2Length - 1] != 'o') && (string2[string2Length - 1] != 'a')) {\n      if (isLess) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isLess) {\n    return 1;\n  }\nLAB_00103202:\n  result = FUN_00104fa0(pointer1,filePath2);\n  return result;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "FUN_00105050"
            ],
            "imported": false,
            "current_name": "check_binary_compatibility_00102fc3"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001025f5",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "param_1": "symbol",
                "param_2": "param",
                "cVar1": "isUndefinedSymclass",
                "uVar2": "val",
                "iVar3": "num",
                "piVar4": "err",
                "uVar5": "errMsg",
                "lVar6": "ptr",
                "bVar7": "byteVal",
                "pcVar8": "str"
            },
            "code": "\nvoid printSymbolInfo_00103729(long *symbol,undefined8 param)\n\n{\n  char isUndefinedSymclass;\n  ushort val;\n  int num;\n  int *err;\n  undefined8 errMsg;\n  long ptr;\n  byte byteVal;\n  char *str;\n  \n  FUN_00104740(\"%-20s|\",symbol,0,param);\n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*symbol + 8));\n  if (isUndefinedSymclass == '\\0') {\n    FUN_001054d0(*(undefined8 *)*symbol);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol + 8));\n  if (*(char *)(*symbol + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol[2] == 0) {\n    if (symbol[3] != 0) {\n      ptr = *(long *)(symbol[3] + 0x30);\n      isUndefinedSymclass = *(char *)(ptr + 0x28);\n      if (isUndefinedSymclass == 'g') goto LAB_00103983;\n      if (isUndefinedSymclass == 'h') {\n        str = \"Line\";\n      }\n      else if (isUndefinedSymclass == 'd') {\n        str = \"Block\";\n      }\n      else if (*(ushort *)(ptr + 0x26) == 0) {\n        str = \"None\";\n      }\n      else {\n        val = *(ushort *)(ptr + 0x26) >> 4 & 3;\n        if (val == 2) {\n          str = \"Function\";\n        }\n        else if (val == 3) {\n          str = \"Array\";\n        }\n        else {\n          if (val != 1) {\n            free(DAT_0010b730);\n            val = *(ushort *)(ptr + 0x26);\n            byteVal = *(byte *)(ptr + 0x28);\n            str = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            num = asprintf(&DAT_0010b730,str,(ulong)byteVal,(ulong)val);\n            str = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          str = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    byteVal = *(byte *)(symbol[2] + 0x48) & 0xf;\n    switch(byteVal) {\n    case 0:\n      str = \"NOTYPE\";\n      break;\n    case 1:\n      str = \"OBJECT\";\n      break;\n    case 2:\n      str = \"FUNC\";\n      break;\n    case 3:\n      str = \"SECTION\";\n      break;\n    case 4:\n      str = \"FILE\";\n      break;\n    case 5:\n      str = \"COMMON\";\n      break;\n    case 6:\n      str = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      str = \"<processor specific>: %d\";\n      if ((2 < byteVal - 0xd) && (str = \"<OS specific>: %d\", 2 < byteVal - 10)) {\n        str = \"<unknown>: %d\";\n      }\n      str = (char *)dcgettext(0,str,5);\n      num = asprintf(&DAT_0010b728,str,(ulong)byteVal);\n      str = DAT_0010b728;\njoined_r0x00103964:\n      if (num < 0) {\n        err = __errno_location();\n        errMsg = xstrerror(*err);\n        FUN_00106300(&DAT_0010712d,errMsg);\nLAB_00103983:\n        str = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",str);\n  }\n  if (symbol[2] == 0) {\n    if (symbol[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUN_001054d0();\n  }\n  ptr = symbol[2];\n  if ((ptr != 0) || (ptr = symbol[3], ptr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(ptr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "asprintf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "dcgettext",
                "free",
                "FUN_00106300",
                "__errno_location",
                "FUN_00104740",
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103729"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_001055f0",
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "xstrerror": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "xstrerror"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_strings_00103573",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "unused_param",
                "param_4": "format_param",
                "printf": "print_formatted_string"
            },
            "code": "\nvoid print_strings_00103573(undefined8 *string1,undefined8 *string2,undefined8 unused_param,undefined8 format_param)\n\n{\n  if (string1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string1);\n  }\n  printf(\"%s:\",*string2,format_param);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "FUN_001053b0"
            ],
            "imported": false,
            "current_name": "print_strings_00103573"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_sections_and_addresses_00105110",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "param3",
                "param_4": "ptr4",
                "__ptr": "ptr",
                "__s1": "str1",
                "pplVar1": "ptr_ptr",
                "plVar2": "ptr_var",
                "lVar3": "var3",
                "puVar4": "ptr_var2",
                "cVar5": "charVar",
                "iVar6": "intVar",
                "pvVar7": "ptrVar2",
                "lVar8": "var4",
                "uVar9": "uintVar",
                "lVar10": "var5",
                "local_b4": "localVar1",
                "local_b0": "localVar2",
                "local_a8": "localVar3",
                "local_a0": "localVar4",
                "local_98": "localVar5",
                "local_90": "localVar6",
                "local_88": "localVar7",
                "pvStack_80": "pvStackVar1",
                "pvStack_78": "pvStackVar2",
                "pvStack_70": "pvStackVar3",
                "local_68": "localVar8",
                "local_60": "localVar9"
            },
            "code": "\n\n\nvoid printSectionsAndAddresses_00105110(undefined8 *ptr1,long *ptr2,undefined8 param3,undefined8 *ptr4)\n\n{\n  void *ptr;\n  char *str1;\n  long **ptr_ptr;\n  long *ptr_var;\n  long var3;\n  undefined8 *ptr_var2;\n  char charVar;\n  int intVar;\n  void *ptrVar2;\n  long var4;\n  uint uintVar;\n  long var5;\n  uint localVar1;\n  undefined localVar2 [8];\n  undefined *localVar3;\n  undefined8 localVar4;\n  long *localVar5;\n  long *localVar6;\n  void *localVar7;\n  void *pvStackVar1;\n  void *pvStackVar2;\n  void *pvStackVar3;\n  undefined localVar8 [8];\n  char localVar9;\n  \n  if (*(code **)(PTR_PTR_FUN_0010b260 + 0x18) == FUN_001053b0) {\n    if (DAT_0010b818 != 0) {\n      if (ptr4 != (undefined8 *)0x0) {\n        printf(\"%s:\",*ptr4);\n      }\n      printf(\"%s:\",*ptr1);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x18))(ptr4,ptr1);\n  }\n  localVar3 = localVar8;\n  (**(code **)(ptr1[1] + 0x218))(ptr1,ptr2,localVar3);\n  uintVar = *(uint *)(ptr2 + 3);\n  charVar = localVar9;\n  if (((((localVar9 == 'i') && ((uintVar & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (charVar = *DAT_0010b7c8, (uintVar & 2) == 0)))) &&\n     (charVar = localVar9, DAT_0010b7c8[1] != '\\0')) {\n    charVar = DAT_0010b7c8[1];\n  }\n  localVar9 = charVar;\n  localVar4 = param3;\n  if ((uintVar & 0x200100) != 0) goto LAB_00103330;\n  var4 = *ptr2;\n  intVar = *(int *)(*(long *)(var4 + 8) + 8);\n  if (((uintVar & 0x200000) == 0) && (intVar == 5)) {\n    localVar5 = ptr2;\n    if (*(long *)(var4 + 0x110) == 0) {\n      localVar5 = (long *)0x0;\n    }\n  }\n  else {\n    localVar5 = (long *)0x0;\n    if (((intVar - 2U & 0xfffffffd) == 0) && (localVar6 = ptr2, *(long *)(var4 + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  localVar6 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&localVar3,ptr1);\n  do {\n    if (DAT_0010b804 == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (_DAT_0010b7b8 == ptr1) {\n      ptr_var2 = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      _DAT_0010b7b8 = ptr_var2;\n      ptrVar2 = DAT_0010b750;\n      if (ptr2[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == ptr1) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          uintVar = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; uintVar < DAT_0010b748; uintVar = uintVar + 1) {\n              ptr = *(void **)((long)ptrVar2 + (ulong)uintVar * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(ptrVar2);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(ptr1 + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          pvStackVar3 = DAT_0010b758;\n          localVar7 = DAT_0010b740;\n          pvStackVar1 = DAT_0010b750;\n          pvStackVar2 = DAT_0010b738;\n          bfd_map_over_sections(ptr1,FUN_00103c00,&localVar7);\n          _DAT_0010b7b0 = ptr1;\n        }\n        str1 = (char *)ptr2[1];\n        for (uintVar = 0; uintVar < DAT_0010b748; uintVar = uintVar + 1) {\n          var4 = (ulong)uintVar * 8;\n          ptrVar2 = DAT_0010b738;\n          for (var5 = 0;\n              *(long *)((long)ptrVar2 + var4) != var5 && var5 <= *(long *)((long)ptrVar2 + var4)\n              ; var5 = var5 + 1) {\n            ptr_ptr = *(long ***)(*(long *)((long)DAT_0010b750 + var4) + var5 * 8);\n            ptr_var = *ptr_ptr;\n            if ((((ptr_var != (long *)0x0) &&\n                 (var3 = *ptr_var, *(long *)(var3 + 0x20) == ptr2[4])) &&\n                (*(long *)(var3 + 0x10) == ptr2[2])) &&\n               (((intVar = strcmp(str1,*(char **)(var3 + 8)), intVar == 0 &&\n                 (charVar = (**(code **)(ptr1[1] + 0x240))\n                                    (ptr1,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + var4),ptr_ptr[1],\n                                     &localVar7,localVar2,&localVar1,0), ptrVar2 = DAT_0010b738,\n                 charVar != '\\0')) && (localVar7 != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",localVar7,(ulong)localVar1);\n              uintVar = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(ptr2[4] + 0xe0) == ptr1) {\n        charVar = (**(code **)(ptr1[1] + 0x250))(ptr1,DAT_0010b758,ptr2,&localVar7,&localVar1);\n        if (((charVar != '\\0') ||\n            (charVar = (**(code **)(ptr1[1] + 0x240))\n                               (ptr1,DAT_0010b758,ptr2[4],ptr2[2],&localVar7,localVar2,\n                                &localVar1,0), charVar != '\\0')) &&\n           ((localVar7 != (void *)0x0 && (localVar1 != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nLAB_00105359:\n    var4 = (**(code **)(ptr1[1] + 0x1f8))(ptr1);\n    if (var4 < 0) {\n      FUN_00103463(var4);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    var4 = (**(code **)(ptr1[1] + 0x200))(ptr1,DAT_0010b758);\n    ptr_var2 = ptr1;\n    if (-1 < var4) goto LAB_00105288;\n    FUN_00106530(*ptr1);\nLAB_00103330:\n    localVar5 = (long *)0x0;\n    localVar6 = (long *)0x0;\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&localVar3,ptr1);\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "FUN_001053b0",
                "FUN_00103463",
                "FUN_001053c0",
                "xmalloc",
                "FUN_00103238",
                "free",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_sections_and_addresses_00105110"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "check_compiled_code_00102fd2",
                "param_1": "code_1",
                "param_2": "code_2",
                "cVar1": "lastChar",
                "__s": "sourceString_1",
                "__s_00": "sourceString_2",
                "uVar2": "stringLength_1",
                "uVar3": "stringLength_2",
                "lVar4": "result_1",
                "lVar5": "result_2",
                "sVar6": "sourceStringLen_1",
                "sVar7": "sourceStringLen_2",
                "pcVar8": "substring_1",
                "pcVar9": "substring_2",
                "uVar10": "compiledCodeResult"
            },
            "code": "\nulong checkCompiledCode_00102fd2(undefined8 code_1,undefined8 code_2)\n\n{\n  char lastChar;\n  ulong stringLength_1;\n  char *sourceString_1;\n  char *sourceString_2;\n  uint stringLength_2;\n  long result_1;\n  long result_2;\n  size_t sourceStringLen_1;\n  size_t sourceStringLen_2;\n  char *substring_1;\n  char *substring_2;\n  ulong compiledCodeResult;\n  ulong uVar11;\n  ulong uVar12;\n  long unaff_R13;\n  bool bVar13;\n  \n  result_1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,code_1,DAT_0010b770);\n  result_2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,code_2,DAT_0010b768);\n  if ((result_1 == 0) || (unaff_R13 = result_2, result_2 == 0)) {\n    result_2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result_1 + 0x20) == 0x10c2a8) || (*(long *)(result_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  compiledCodeResult = *(ulong *)(*(long *)(result_1 + 0x20) + 0x30);\n  stringLength_1 = *(ulong *)(*(long *)(result_2 + 0x20) + 0x30);\n  uVar12 = *(long *)(result_1 + 0x10) + compiledCodeResult;\n  uVar11 = *(long *)(unaff_R13 + 0x10) + stringLength_1;\n  bVar13 = uVar12 < uVar11;\n  if ((uVar12 != uVar11) || (bVar13 = compiledCodeResult < stringLength_1, compiledCodeResult != stringLength_1)) {\n    return (ulong)(-(uint)bVar13 | 1);\n  }\n  sourceString_1 = *(char **)(result_1 + 8);\n  sourceString_2 = *(char **)(unaff_R13 + 8);\n  sourceStringLen_1 = strlen(sourceString_1);\n  sourceStringLen_2 = strlen(sourceString_2);\n  substring_1 = strstr(sourceString_1,\"gnu_compiled\");\n  if (substring_1 == (char *)0x0) {\n    substring_2 = strstr(sourceString_1,\"gcc2_compiled\");\n    substring_1 = strstr(sourceString_2,\"gnu_compiled\");\n    if ((substring_1 == (char *)0x0) && (substring_1 = strstr(sourceString_2,\"gcc2_compiled\"), substring_1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (substring_2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    substring_1 = strstr(sourceString_2,\"gnu_compiled\");\n    if (substring_1 == (char *)0x0) {\n      substring_2 = strstr(sourceString_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (substring_2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  stringLength_2 = *(uint *)(unaff_R13 + 0x18) & 0x4000;\n  if ((*(byte *)(result_1 + 0x19) & 0x40) == 0) {\n    if ((sourceStringLen_1 < 3) || (sourceString_1[sourceStringLen_1 - 2] != '.')) {\n      if (stringLength_2 != 0) {\n        return 1;\n      }\n      if ((sourceStringLen_2 < 3) || (sourceString_2[sourceStringLen_2 - 2] != '.')) goto LAB_00103202;\n      bVar13 = false;\n      goto LAB_001031e7;\n    }\n    lastChar = sourceString_1[sourceStringLen_1 - 1];\n    bVar13 = lastChar == 'o' || lastChar == 'a';\n    if (stringLength_2 == 0) {\n      if ((sourceStringLen_2 < 3) || (sourceString_2[sourceStringLen_2 - 2] != '.')) {\n        if (lastChar == 'o' || lastChar == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (stringLength_2 != 0) goto LAB_00103202;\n    if (sourceStringLen_2 < 3) {\n      return 0xffffffff;\n    }\n    if (sourceString_2[sourceStringLen_2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    bVar13 = true;\nLAB_001031e7:\n    if ((sourceString_2[sourceStringLen_2 - 1] != 'o') && (sourceString_2[sourceStringLen_2 - 1] != 'a')) {\n      if (bVar13) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!bVar13) {\n    return 1;\n  }\nLAB_00103202:\n  compiledCodeResult = FUN_00104fa0(code_1,code_2);\n  return compiledCodeResult;\n}\n\n",
            "called": [
                "abort",
                "FUN_00104fa0",
                "strstr",
                "strlen",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "check_compiled_code_00102fd2"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "initialize_return_values_00102f9f",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] initializeReturnValues_00102f9f(void)\n\n{\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  FUN_00106530(*DAT_0010b780);\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = 0xffffffff;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "initialize_return_values_00102f9f"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_00103ca0",
                "FUN_00102f19",
                "FUN_00103b5d",
                "FUN_001053c0",
                "FUN_0010249f",
                "FUN_00104370",
                "FUN_0010370a",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_00103a78",
                "FUN_00103abf",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103ca0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_and_execute_function_00103a66",
                "unaff_RBX": "ptr_to_data"
            },
            "code": "\nvoid checkAndExecuteFunction_00103a66(void)\n\n{\n  long ptr_to_data;\n  \n  if (*(long *)(ptr_to_data + 8) != 0) {\n    FUN_0010651a();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_00103a66"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "strcoll": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "strcoll"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_formatted_data_001035a2",
                "unaff_RBX": "dataArray",
                "lVar1": "value",
                "putchar": "printChar",
                "printf": "printFormattedString"
            },
            "code": "\nvoid printFormattedData_001035a2(void)\n\n{\n  long *dataArray;\n  long value;\n  \n  if (dataArray[2] == 0) {\n    value = dataArray[1];\n  }\n  else {\n    value = *(long *)(dataArray[2] + 0x38);\n  }\n  if (value != 0) {\n    putchar(0x20);\n    if (dataArray[2] == 0) {\n      value = dataArray[1];\n    }\n    else {\n      value = *(long *)(dataArray[2] + 0x38);\n    }\n    FUN_001054d0(value);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*dataArray + 8));\n  if (*(char *)(*dataArray + 8) != '-') {\n    FUN_00104740(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*dataArray + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*dataArray + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*dataArray + 0x20));\n  FUN_00104740(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001054d0",
                "putchar",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "FUN_001053c0"
            ],
            "imported": false,
            "current_name": "print_formatted_data_001035a2"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "find_matching_string_00103463",
                "unaff_R12": "inputString",
                "unaff_R13": "functionPointers",
                "unaff_R15": "structAddress",
                "param_8": "counter",
                "param_10": "paramValue",
                "in_stack_00000050": "lineNumber",
                "plVar1": "pointerVar1",
                "lVar2": "valueVar2",
                "cVar3": "comparisonVar",
                "iVar4": "comparisonResult",
                "lVar5": "dataAddress",
                "lVar6": "loopVar",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid findMatchingString_00103463(void)\n\n{\n  long *pointerVar1;\n  long valueVar2;\n  char comparisonVar;\n  int comparisonResult;\n  long dataAddress;\n  char *inputString;\n  undefined8 *functionPointers;\n  long loopVar;\n  long structAddress;\n  undefined8 counter;\n  ulong paramValue;\n  long lineNumber;\n  \n  FUN_00106530(*functionPointers);\n  do {\n    counter._4_4_ = counter._4_4_ + 1;\n    if (DAT_0010b748 <= counter._4_4_) {\n      putc(10,standardOutput);\n      return;\n    }\n    dataAddress = DAT_0010b738;\n    for (loopVar = 0; pointerVar1 = (long *)(dataAddress + (ulong)counter._4_4_ * 8),\n        *pointerVar1 != loopVar && loopVar <= *pointerVar1; loopVar = loopVar + 1) {\n      pointerVar1 = **(long ***)(*(long *)(DAT_0010b750 + (ulong)counter._4_4_ * 8) + loopVar * 8);\n      if ((((pointerVar1 != (long *)0x0) &&\n           (valueVar2 = *pointerVar1, *(long *)(valueVar2 + 0x20) == *(long *)(structAddress + 0x20))) &&\n          (*(long *)(valueVar2 + 0x10) == *(long *)(structAddress + 0x10))) &&\n         (((comparisonResult = strcmp(inputString,*(char **)(valueVar2 + 8)), comparisonResult == 0 &&\n           (comparisonVar = (**(code **)(functionPointers[1] + 0x240))(), dataAddress = DAT_0010b738, comparisonVar != '\\0')) &&\n          (lineNumber != 0)))) {\n        printf(\"\\t%s:%u\",lineNumber,paramValue >> 0x20);\n        counter._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "strcmp",
                "putc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "find_matching_string_00103463"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "initialize_pointer_00104397",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "size"
            },
            "code": "\nvoid initializePointer_00104397(undefined8 value1,undefined8 value2,int size)\n\n{\n  DAT_0010b7c0 = size;\n  PTR_PTR_FUN_0010b260 = (undefined *)(&PTR_FUN_0010ace0 + (long)size * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "caseD_4a",
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00104397"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_001047d0",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_0010268b",
                "FUN_00103b5d",
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_00104670",
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_001055f0",
                "FUN_00106300",
                "FUN_00106530"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "get_architecture_size_00104670",
                "param_1": "input",
                "iVar1": "archSize",
                "pcVar2": "archNamePtr",
                "puVar3": "ptrToData",
                "pcVar4": "searchResult"
            },
            "code": "\nvoid getArchitectureSize_00104670(long input)\n\n{\n  int archSize;\n  char *archNamePtr;\n  undefined *ptrToData;\n  char *searchResult;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    searchResult = **(char ***)(input + 8);\n    archNamePtr = strstr(searchResult,\"64\");\n    archSize = 0x40;\n    if (archNamePtr == (char *)0x0) {\n      archSize = strcmp(searchResult,\"mmo\");\n      archSize = (-(uint)(archSize == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = archSize;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    searchResult = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    searchResult = \"08\";\n  }\n  else {\n    searchResult = \"016\";\n  }\n  ptrToData = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        ptrToData = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concat(&DAT_001071d7,searchResult,0,0);\n          return;\n        }\n        ptrToData = &DAT_001071cd;\n      }\n    }\n    else {\n      ptrToData = (undefined *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concat(&DAT_001071d7,searchResult,ptrToData,0);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "concat",
                "bfd_get_arch_size",
                "free",
                "FUN_001025f5",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "get_architecture_size_00104670"
        },
        "reconcat": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "reconcat"
        },
        "asprintf": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "asprintf"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_00103a78",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printError_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "print_error_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "analyze_object_001048e0",
                "param_1": "object",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "param_5": "result_objects",
                "param_6": "processed_objects",
                "bVar1": "byte_val",
                "pcVar2": "func_ptr",
                "cVar3": "char_val",
                "iVar4": "int_val",
                "uVar5": "uint_val",
                "uVar6": "string_val",
                "lVar7": "long_val",
                "ppuVar8": "size_t_val",
                "ppuVar9": "temp_objs",
                "lVar10": "size_val",
                "puVar11": "address",
                "unaff_RBX": "temp_objs2",
                "ppuVar12": "temp_objs3",
                "ppuVar13": "current_obj",
                "unaff_RBP": "bool_val",
                "ppuVar14": "cur_array_ele",
                "ppuVar15": "unaff_R15",
                "ppuVar16": "unaff_R14",
                "ppuVar17": "result_obj_ptr",
                "ppuVar18": "temp_objs4",
                "unaff_R14": "size",
                "unaff_R15": "processed_size",
                "bVar19": "bool_val2",
                "bVar20": "byte_val2",
                "ppuStack_78": "temp_objs5",
                "local_4c": "local_var_1",
                "local_48": "local_var_2",
                "local_40": "local_objs"
            },
            "code": "\n\n\nvoid analyze_object_001048e0(ulong **object,undefined8 param_1,undefined8 param_2,undefined8 param_3,\n                 ulong **result_objects,ulong **processed_objects)\n\n{\n  byte byte_val;\n  code *func_ptr;\n  char char_val;\n  int int_val;\n  uint uint_val;\n  undefined8 string_val;\n  long long_val;\n  ulong **size_t_val;\n  ulong **temp_objs;\n  long size_val;\n  ulong *address;\n  ulong **temp_objs2;\n  ulong **temp_objs3;\n  ulong **current_obj;\n  ulong **bool_val;\n  ulong **cur_array_ele;\n  ulong **unaff_R15;\n  ulong **unaff_R14;\n  ulong **result_obj_ptr;\n  ulong **temp_objs4;\n  ulong **size;\n  ulong **processed_size;\n  bool bool_val2;\n  byte byte_val2;\n  ulong **temp_objs5;\n  uint local_var_1;\n  ulong *local_var_2;\n  ulong **local_objs [2];\n  \n  byte_val2 = 0;\n  local_var_2 = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)object + 0x44) & 0x10) != 0)) {\n    temp_objs = (ulong **)&local_var_1;\n    size_t_val = (ulong **)(*(code *)object[1][0x4d])(object,DAT_0010b80c != 0,local_objs);\n    if ((long)size_t_val < 0) {\n      if ((DAT_0010b80c != 0) && (int_val = bfd_get_error(), int_val == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        address = *object;\n        string_val = dcgettext(0,\"%s: no symbols\",5);\n        FUN_00106400(string_val,address);\n        return;\n      }\n      FUN_00106530(*object);\n      goto LAB_00102e9e;\n    }\n    if (size_t_val != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (local_var_1 == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byte_val = *(byte *)((long)object + 0x4a);\n      current_obj = object;\n      do {\n        if ((byte_val & 0x10) != 0) {\n          temp_objs2 = (ulong **)*current_obj;\n          DAT_0010b230 = '\\0';\n          string_val = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          FUN_00106400(string_val);\n        }\n        cur_array_ele = local_objs[0];\n        size = (ulong **)(ulong)local_var_1;\n        bool_val2 = DAT_0010b80c != 0;\n        temp_objs = local_objs[0];\n        processed_size = (ulong **)(*(code *)current_obj[1][0x41])(current_obj);\n        temp_objs3 = temp_objs2;\n        bool_val = (ulong **)(ulong)bool_val2;\n        object = current_obj;\n        if (processed_size == (ulong **)0x0) goto LAB_00102ea7;\n        result_obj_ptr = (ulong **)((long)size_t_val * (long)size);\n        size_t_val = (ulong **)((long)cur_array_ele + (long)result_obj_ptr);\n        object = cur_array_ele;\n        temp_objs3 = cur_array_ele;\njoined_r0x001049a4:\n        if (object < size_t_val) {\n          do {\n            temp_objs = (ulong **)(*(code *)current_obj[1][0x4e])(current_obj,bool_val2,object,processed_size);\n            result_obj_ptr = processed_size;\n            if (temp_objs == (ulong **)0x0) goto LAB_00102eb0;\n            address = temp_objs[1];\n            result_obj_ptr = size_t_val;\n            if (((address == (ulong *)0x0) || (*(char *)address != '_')) ||\n               (*(char *)((long)address + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uint_val = (uint)(temp_objs[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uint_val == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(temp_objs + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n                  processed_objects = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    char_val = (*(code *)current_obj[1][0x46])(current_obj,temp_objs);\n                    if (char_val != '\\0') {\n                      FUN_00102c19();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (temp_objs[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n                if ((temp_objs[4] == (ulong *)0x10c2a8) || (temp_objs[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                char_val = (*(code *)current_obj[1][0x46])(current_obj,temp_objs);\n                if (char_val != '\\0') {\n                  FUN_00102c19();\n                  return;\n                }\nLAB_00104a7b:\n                if (temp_objs3 != object) {\n                  if (size == (ulong **)0x8) {\n                    *temp_objs3 = *object;\n                    FUN_001049c0();\n                    return;\n                  }\n                  for (; size != (ulong **)0x0; size = (ulong **)((long)size + -1)) {\n                    *(undefined *)temp_objs3 = *(undefined *)object;\n                    object = (ulong **)((long)object + (ulong)byte_val2 * -2 + 1);\n                    temp_objs3 = (ulong **)((long)temp_objs3 + (ulong)byte_val2 * -2 + 1);\n                  }\n                  FUN_001049c0();\n                  return;\n                }\n                temp_objs3 = (ulong **)((long)temp_objs3 + (long)size);\n              }\n            }\n            else {\n              int_val = strcmp((char *)((long)address + (ulong)(*(char *)((long)address + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              temp_objs5 = temp_objs;\n              if (int_val == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  temp_objs5 = (ulong **)*current_obj;\n                  DAT_0010b230 = '\\0';\n                  string_val = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(string_val,temp_objs5);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uint_val = (*(uint *)(temp_objs + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(temp_objs + 3) & 0x800082) != 0) || (temp_objs[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)temp_objs[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            object = (ulong **)((long)object + (long)size);\n            if (size_t_val <= object) break;\n          } while( true );\n        }\n        temp_objs3 = (ulong **)((long)temp_objs3 - (long)cur_array_ele);\n        if (size == (ulong **)0x8) {\n          address = current_obj[1];\n          cur_array_ele = (ulong **)((long)temp_objs3 + 7);\n          if (-1 < (long)temp_objs3) {\n            cur_array_ele = temp_objs3;\n          }\n          result_objects = (ulong **)(ulong)DAT_0010b800;\n          func_ptr = (code *)address[0x41];\n          cur_array_ele = (ulong **)((long)cur_array_ele >> 3);\n        }\n        else {\n          cur_array_ele = (ulong **)((long)temp_objs3 / (long)size);\n          address = current_obj[1];\n          func_ptr = (code *)address[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = current_obj;\n        DAT_0010b770 = (ulong **)(*func_ptr)(current_obj);\n        DAT_0010b768 = (ulong **)(*(code *)current_obj[1][0x41])(current_obj);\n        temp_objs3 = local_objs[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          size_t_val = (ulong **)(ulong)local_var_1;\n          if (DAT_0010b7f8 != 0) {\n            bool_val2 = DAT_0010b80c != 0;\n            qsort(local_objs[0],(size_t)cur_array_ele,(size_t)size_t_val,FUN_00102fd2);\n            result_obj_ptr = (ulong **)xmalloc((long)cur_array_ele << 4);\n            temp_objs4 = DAT_0010b770;\n            object = DAT_0010b768;\n            size = (ulong **)((long)cur_array_ele * (long)size_t_val + (long)temp_objs3);\n            temp_objs = DAT_0010b770;\n            if (size <= temp_objs3) goto LAB_00102ec2;\n            processed_objects = DAT_0010b768;\n            cur_array_ele = (ulong **)(*(code *)current_obj[1][0x4e])(current_obj,bool_val2,temp_objs3);\n            result_objects = size_t_val;\n            temp_objs5 = result_obj_ptr;\n            if (cur_array_ele == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(local_objs[0],(size_t)cur_array_ele,(size_t)size_t_val,\n                (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          address = current_obj[1];\nLAB_00104be2:\n          object = current_obj;\n          temp_objs4 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        FUN_00106530(*current_obj);\n        object = current_obj;\n        temp_objs3 = processed_size;\n        while( true ) {\n          temp_objs2 = (ulong **)xmalloc();\n          size_t_val = (ulong **)(*(code *)object[1][0x6b])(object,temp_objs2);\n          temp_objs = result_obj_ptr;\n          if (-1 < (long)size_t_val) break;\n          current_obj = (ulong **)*object;\n          cur_array_ele = (ulong **)FUN_00106530(current_obj,result_obj_ptr);\nLAB_00102dbe:\n          address = cur_array_ele[2];\n          temp_objs = (ulong **)0x0;\nLAB_00102dc4:\n          address = (ulong *)((long)size_t_val[8] - (long)address);\n          temp_objs4 = object;\n          unaff_R15 = temp_objs3;\nLAB_00104ea7:\n          cur_array_ele = temp_objs;\n          temp_objs3 = temp_objs2;\n          object = processed_objects;\n          if (address != (ulong *)0x0) {\n            *result_obj_ptr = (ulong *)unaff_R15;\n            result_obj_ptr[1] = address;\n            result_obj_ptr = result_obj_ptr + 2;\n          }\nLAB_00104e35:\n          processed_objects = temp_objs4;\n          if (temp_objs3 < size) goto code_r0x00104e3e;\n          cur_array_ele = (ulong **)((long)result_obj_ptr - (long)temp_objs5 >> 4);\n          qsort(temp_objs5,(size_t)cur_array_ele,0x10,FUN_00103533);\n          address = current_obj[1];\n          object = current_obj;\n          temp_objs4 = temp_objs5;\nLAB_00104be5:\n          temp_objs2 = local_objs[0];\n          size_t_val = (ulong **)(ulong)DAT_0010b7f8;\n          size = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            result_obj_ptr = (ulong **)(*(code *)address[0x41])(object);\n            if (result_obj_ptr == (ulong **)0x0) goto LAB_00102ed2;\n            temp_objs3 = temp_objs4 + (long)cur_array_ele * 2;\n            cur_array_ele = temp_objs4;\n            goto LAB_00104ee9;\n          }\n          size_t_val = (ulong **)(ulong)local_var_1;\n          processed_size = (ulong **)(*(code *)address[0x41])(object);\n          if (processed_size != (ulong **)0x0) {\n            bool_val = (ulong **)((long)cur_array_ele * (long)size_t_val + (long)temp_objs2);\n            if (temp_objs2 < bool_val) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          FUN_00106530(*object);\n          processed_size = temp_objs4;\nLAB_00102d06:\n          temp_objs = size_t_val;\n          if (DAT_0010b80c != 0) {\n            temp_objs2 = local_objs[0];\n            cur_array_ele = (ulong **)0x0;\n            result_obj_ptr = (ulong **)0x0;\n            break;\n          }\n          size_val = (*(code *)object[1][0x6a])(object);\n          cur_array_ele = local_objs[0];\n          result_obj_ptr = size_t_val;\n          temp_objs3 = processed_size;\n          if (size_val < 1) {\n            size_t_val = (ulong **)0x0;\n            temp_objs2 = (ulong **)0x0;\n            break;\n          }\n        }\n        processed_objects = &local_var_2;\n        result_objects = temp_objs2;\n        size_val = (*(code *)object[1][0x6c])(object,result_obj_ptr,cur_array_ele,size_t_val);\n        size_t_val = temp_objs;\n        if (0 < size_val) {\n          size_t_val = (ulong **)((long)temp_objs + size_val);\n          local_objs[0] = (ulong **)xrealloc(local_objs[0]);\n          long_val = 0;\n          do {\n            local_objs[0][(long)temp_objs + long_val] = local_var_2 + long_val * 6;\n            long_val = long_val + 1;\n          } while (size_val != long_val);\n          local_objs[0][(long)temp_objs + size_val] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (temp_objs2 != (ulong **)0x0)) {\n          free(temp_objs2);\n        }\nLAB_00102cc2:\n        byte_val = *(byte *)((long)object + 0x4a);\n        current_obj = object;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    address = *object;\n    string_val = dcgettext(0,\"%s: no symbols\",5);\n    FUN_00106400(string_val,address);\n  }\n  return;\ncode_r0x00104b01:\n  object = (ulong **)((long)object + (long)size);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  temp_objs2 = (ulong **)((long)temp_objs3 + (long)result_objects);\n  if (size <= temp_objs2) {\n    size_t_val = (ulong **)cur_array_ele[4];\n    if ((*(uint *)(cur_array_ele + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    temp_objs = (ulong **)0x0;\nLAB_00104e95:\n    temp_objs4 = object;\n    unaff_R15 = temp_objs3;\n    if (*(int *)(current_obj[1] + 1) == 5) {\n      address = cur_array_ele[7];\n      goto LAB_00104ea7;\n    }\n    address = cur_array_ele[2];\n    if ((*(byte *)((long)size_t_val + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (size <= temp_objs2) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  size_t_val = object;\n  unaff_R15 = result_objects;\n  unaff_R14 = processed_objects;\n  temp_objs = (ulong **)(*(code *)current_obj[1][0x4e])();\n  temp_objs4 = temp_objs3;\n  if (temp_objs == (ulong **)0x0) goto LAB_00102edb;\n  size_t_val = (ulong **)cur_array_ele[4];\n  if ((*(uint *)(cur_array_ele + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (temp_objs3 <= cur_array_ele) {\nLAB_00104c75:\n    if (local_var_2 == (ulong *)0x0) {\n      free(local_objs[0]);\n      free(temp_objs4);\n      return;\n    }\n    free(local_var_2);\n    free(local_objs[0]);\n    free(temp_objs4);\n    return;\n  }\n  size_t_val = result_obj_ptr;\n  size_val = (*(code *)object[1][0x4e])(object,size,*cur_array_ele);\n  if (size_val == 0) goto LAB_00102ec9;\n  size_t_val = cur_array_ele + 1;\n  cur_array_ele = cur_array_ele + 2;\n  FUN_00105110(object,size_val,*size_t_val,param_1);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  FUN_00106530(*object,0);\nLAB_00102ed2:\n  current_obj = (ulong **)*object;\n  FUN_00106530();\n  temp_objs2 = temp_objs3;\n  unaff_R15 = result_objects;\n  unaff_R14 = processed_objects;\nLAB_00102edb:\n  processed_objects = unaff_R14;\n  result_objects = unaff_R15;\n  current_obj = (ulong **)*current_obj;\n  temp_objs = (ulong **)FUN_00106530();\n  temp_objs3 = temp_objs4;\nLAB_00102ee3:\n  address = cur_array_ele[2];\nLAB_00102ee7:\n  if (size_t_val != (ulong **)temp_objs[4]) goto LAB_00102dc4;\n  address = (ulong *)((long)temp_objs[2] - (long)address);\n  temp_objs4 = object;\n  unaff_R15 = temp_objs3;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (temp_objs = processed_size, size_val = (*(code *)object[1][0x4e])(object,size,temp_objs2),\n        size_val != 0) {\n    temp_objs2 = (ulong **)((long)temp_objs2 + (long)size_t_val);\n    FUN_00105110(object,size_val,0,param_1);\n    if (bool_val <= temp_objs2) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  FUN_00106530(*object);\n  temp_objs3 = temp_objs2;\nLAB_00102ea7:\n  current_obj = bool_val;\n  FUN_00106530(*object);\n  result_obj_ptr = processed_size;\nLAB_00102eb0:\n  FUN_00106530(*current_obj);\n  current_obj = object;\nLAB_00102eb9:\n  FUN_00106530(*current_obj);\n  object = processed_objects;\nLAB_00102ec2:\n  cur_array_ele = (ulong **)0x0;\n  result_objects = size_t_val;\n  temp_objs4 = temp_objs;\n  temp_objs5 = result_obj_ptr;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "FUN_00106400",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "analyze_object_001048e0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00106540",
                "FUN_001063a0",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_00103b5d",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00106540",
                "FUN_001063a0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_if_enabled_001062d0",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfEnabled_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_enabled_001062d0"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "caseD_4a": {
            "renaming": {},
            "code": "\nvoid switchD_00104393::caseD_4a(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00104397(param_1,param_2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "caseD_4a"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "analyze_function_00103238",
                "__ptr": "ptr",
                "__s1": "string1",
                "plVar1": "ptrVar1",
                "lVar2": "longVar2",
                "cVar3": "charVar3",
                "iVar4": "intVar4",
                "unaff_RBX": "unaffectedRBX",
                "pvVar5": "ptrVar5",
                "uVar6": "uintVar6",
                "unaff_R13": "unaffectedR13",
                "lVar7": "longVar7",
                "param_10": "param10",
                "param_12": "param12"
            },
            "code": "\n\n\nvoid analyzeFunction_00103238(void)\n\n{\n  long *ptrVar1;\n  void *ptr;\n  char *string1;\n  long longVar2;\n  char charVar3;\n  int intVar4;\n  long unaffectedRBX;\n  void *ptrVar5;\n  uint uintVar6;\n  long unaffectedR13;\n  long longVar7;\n  ulong param10;\n  void *param12;\n  \n  ptrVar5 = DAT_0010b750;\n  if (_DAT_0010b7b0 == unaffectedR13) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    uintVar6 = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; uintVar6 < DAT_0010b748; uintVar6 = uintVar6 + 1) {\n        ptr = *(void **)((long)ptrVar5 + (ulong)uintVar6 * 8);\n        if (ptr != (void *)0x0) {\n          free(ptr);\n        }\n      }\n      free(DAT_0010b740);\n      free(ptrVar5);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(unaffectedR13 + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  param12 = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = unaffectedR13;\nLAB_00103296:\n  string1 = *(char **)(unaffectedRBX + 8);\n  uintVar6 = 0;\n  do {\n    if (DAT_0010b748 <= uintVar6) {\n      putc(10,_stdout);\n      return;\n    }\n    ptrVar5 = DAT_0010b738;\n    for (longVar7 = 0; ptrVar1 = (long *)((long)ptrVar5 + (ulong)uintVar6 * 8),\n        *ptrVar1 != longVar7 && longVar7 <= *ptrVar1; longVar7 = longVar7 + 1) {\n      ptrVar1 = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)uintVar6 * 8) + longVar7 * 8);\n      if ((((ptrVar1 != (long *)0x0) &&\n           (longVar2 = *ptrVar1, *(long *)(longVar2 + 0x20) == *(long *)(unaffectedRBX + 0x20))) &&\n          (*(long *)(longVar2 + 0x10) == *(long *)(unaffectedRBX + 0x10))) &&\n         (((intVar4 = strcmp(string1,*(char **)(longVar2 + 8)), intVar4 == 0 &&\n           (charVar3 = (**(code **)(*(long *)(unaffectedR13 + 8) + 0x240))(), ptrVar5 = DAT_0010b738,\n           charVar3 != '\\0')) && (param12 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",param12,param10 >> 0x20);\n        uintVar6 = DAT_0010b748;\n        break;\n      }\n    }\n    uintVar6 = uintVar6 + 1;\n  } while( true );\n}\n\n",
            "called": [
                "bfd_map_over_sections",
                "FUN_00103c00",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "analyze_function_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_formatted_message_001036e0",
                "param_1": "message",
                "param_2": "defaultMessage",
                "printf": "print"
            },
            "code": "\nvoid printFormattedMessage_001036e0(undefined8 *message,undefined8 *defaultMessage)\n\n{\n  if (message != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*message);\n    return;\n  }\n  printf(\"%s: \",*defaultMessage);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "FUN_001064a0"
            ],
            "imported": false,
            "current_name": "print_formatted_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_and_free_001047d0",
                "unaff_RBX": "concatenated_string",
                "unaff_R12": "flag_ptr",
                "unaff_R13": "concatenated_string_ptr",
                "unaff_R14": "format_string",
                "unaff_R15": "function_pointer_table"
            },
            "code": "\nvoid print_and_free_001047d0(void)\n\n{\n  char *pcVar1;\n  void *concatenated_string;\n  undefined *flag_ptr;\n  void *concatenated_string_ptr;\n  char *format_string;\n  long function_pointer_table;\n  \n  if (((DAT_0010b234 != 0) &&\n      (pcVar1 = (char *)(**(code **)(*(long *)(function_pointer_table + 8) + 0x220))(), pcVar1 != (char *)0x0))\n     && (*pcVar1 != '\\0')) {\n    concatenated_string = (void *)reconcat();\n    concatenated_string_ptr = concatenated_string;\n  }\n  printf(format_string,concatenated_string_ptr);\n  if (flag_ptr != (undefined *)0x0) {\n    *flag_ptr = 0x40;\n  }\n  free(concatenated_string);\n  return;\n}\n\n",
            "called": [
                "printf",
                "reconcat",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010268b",
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_and_free_001047d0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "display_warning_0010249f",
                "uVar1": "warningMessage"
            },
            "code": "\nundefined8 displayWarning_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  FUN_00106400(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "display_warning_0010249f"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "param_1": "filePath",
                "cVar1": "formatCheck",
                "iVar2": "status",
                "uVar3": "result",
                "piVar4": "errNum",
                "uVar5": "message",
                "puVar6": "fileHandle",
                "puVar9": "archiveHandle",
                "puVar10": "previousArchiveHandle",
                "lVar7": "currentIndex",
                "pcVar8": "errorMessage",
                "local_c8": "fileStats"
            },
            "code": "\n\n\nundefined4 checkFile_001043d0(char *filePath)\n\n{\n  char formatCheck;\n  int status;\n  undefined4 result;\n  int *errNum;\n  undefined8 message;\n  undefined8 *fileHandle;\n  long currentIndex;\n  char *errorMessage;\n  undefined8 *archiveHandle;\n  undefined8 *previousArchiveHandle;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStats);\n    if (status < 0) {\nLAB_00102522:\n      errNum = __errno_location();\n      if (*errNum == 2) {\n        message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00106400(message,filePath);\n      }\n      else {\n        errorMessage = strerror(*errNum);\n        message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00106400(message,filePath,errorMessage);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00106400(message,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (fileStats.st_size < 0) {\n        message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        FUN_00106400(message,filePath);\n      }\n      else if (fileStats.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          fileHandle = (undefined8 *)bfd_openr(filePath,\"plugin\");\n        }\n        else {\n          fileHandle = (undefined8 *)bfd_openr(filePath);\n        }\n        if (fileHandle != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)fileHandle + 0x44) = *(uint *)((long)fileHandle + 0x44) | 0x8000;\n          }\n          formatCheck = bfd_check_format(fileHandle,2);\n          if (formatCheck == '\\0') {\n            result = bfd_check_format_matches(fileHandle,1,&fileStats);\n            if ((char)result == '\\0') goto LAB_001025ac;\n            FUN_00104670(fileHandle);\n            (**(code **)PTR_PTR_FUN_0010b260)(filePath);\n            FUN_001048e0(fileHandle,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_FUN_0010b260 + 8))(*fileHandle);\n            if ((_DAT_0010b7f0 != 0) &&\n               (currentIndex = bfd_get_next_mapent(fileHandle,0xffffffffffffffff,&fileStats), currentIndex != -1)) {\n              errorMessage = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(errorMessage);\n              do {\n                archiveHandle = (undefined8 *)(**(code **)(fileHandle[1] + 0x1e0))(fileHandle,currentIndex);\n                if (archiveHandle == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)fileStats.st_dev != 0) {\n                  FUN_00104740(&DAT_0010712d,0,*(long *)fileStats.st_dev,fileHandle);\n                  printf(\" in %s\\n\",*archiveHandle);\n                }\n                currentIndex = bfd_get_next_mapent(fileHandle,currentIndex,&fileStats);\n              } while (currentIndex != -1);\n            }\n            archiveHandle = (undefined8 *)0x0;\n            do {\n              do {\n                previousArchiveHandle = archiveHandle;\n                archiveHandle = (undefined8 *)bfd_openr_next_archived_file(fileHandle,previousArchiveHandle);\n                if (archiveHandle == (undefined8 *)0x0) {\n                  status = bfd_get_error();\n                  if (status != 9) {\n                    FUN_00106530(*fileHandle);\nLAB_00102516:\n                    FUN_00106530(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (previousArchiveHandle != (undefined8 *)0x0) {\n                    bfd_close(previousArchiveHandle);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                formatCheck = bfd_check_format_matches(archiveHandle,1,&fileStats);\n                if (formatCheck == '\\0') {\n                  FUN_00106540(*archiveHandle);\n                  status = bfd_get_error();\n                  if (status == 0xd) {\n                    FUN_00103b5d(fileStats.st_dev);\n                  }\n                }\n                else {\n                  FUN_00104670(archiveHandle);\n                  (**(code **)(PTR_PTR_FUN_0010b260 + 0x10))(*fileHandle,*archiveHandle);\n                  FUN_001048e0(archiveHandle,fileHandle);\n                }\n              } while (previousArchiveHandle == (undefined8 *)0x0);\n              bfd_close(previousArchiveHandle);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (previousArchiveHandle != archiveHandle);\n          }\nLAB_001044b4:\n          result = 1;\n          while (formatCheck = bfd_close(fileHandle), formatCheck == '\\0') {\n            FUN_00106530(filePath);\nLAB_001025ac:\n            FUN_00106540(filePath);\n            status = bfd_get_error();\n            if (status == 0xd) {\n              FUN_00103b5d(fileStats.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return result;\n        }\n        FUN_00106540(filePath);\n      }\n    }\n    else {\n      message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00106400(message,filePath);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106540",
                "FUN_0010351b",
                "bfd_get_next_mapent",
                "FUN_00103b5d",
                "bfd_openr",
                "FUN_0010249f",
                "FUN_00106400",
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00104740",
                "bfd_check_format_matches",
                "bfd_get_error",
                "FUN_001062d0",
                "dcgettext",
                "bfd_close",
                "strerror",
                "FUN_00104670",
                "FUN_001048e0",
                "stat",
                "__errno_location",
                "FUN_00102670",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "check_file_001043d0"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "bfd_demangle": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "bfd_demangle"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105560();\n  return;\n}\n\n",
            "called": [
                "FUN_00105560"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_0010268b",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "concatenate_strings_001025f5",
                "param_1": "firstString",
                "param_2": "secondString"
            },
            "code": "\nvoid concatenateStrings_001025f5(undefined8 firstString,undefined8 secondString)\n\n{\n  DAT_0010b7a0 = concat(&DAT_001071d7,secondString,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concatenate_strings_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "display_message_if_condition_met_00102670",
                "param_1": "message"
            },
            "code": "\n\n\nvoid displayMessageIfConditionMet_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "display_message_if_condition_met_00102670"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103729",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_001055f0",
                "FUN_00103463",
                "FUN_00104d5b",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "string2_ptr",
                "__s1": "string1_ptr",
                "uVar1": "comparison_result",
                "lVar2": "string1_length",
                "lVar3": "string2_length"
            },
            "code": "\nuint compare_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *string2_ptr;\n  char *string1_ptr;\n  uint comparison_result;\n  long string1_length;\n  long string2_length;\n  \n  string1_length = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string1,DAT_0010b770);\n  string2_length = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string2,DAT_0010b768);\n  if ((string1_length == 0) || (string2_length == 0)) {\n    FUN_00106530(*DAT_0010b780);\n  }\n  else {\n    string2_ptr = *(char **)(string2_length + 8);\n    string1_ptr = *(char **)(string1_length + 8);\n    if (string2_ptr == (char *)0x0) {\n      return (uint)(string1_ptr != (char *)0x0);\n    }\n    if (string1_ptr != (char *)0x0) {\n      if (*string2_ptr == '\\0') {\n        return (uint)(*string1_ptr != '\\0');\n      }\n      if (*string1_ptr == '\\0') {\n        return 0xffffffff;\n      }\n      comparison_result = strcoll(string1_ptr,string2_ptr);\n      return comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "strcoll",
                "FUN_00102f9f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "FUN_00103bf6",
                "FUN_00105050",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "compare_strings_00104fa0"
        },
        "bfd_is_undefined_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00103729",
                "FUN_001053c0",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "bfd_is_undefined_symclass"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_message_001064a0",
                "param_1": "titleParam",
                "param_2": "messageParam",
                "printf": "printFormatted"
            },
            "code": "\nvoid printMessage_001064a0(undefined8 *titleParam,undefined8 *messageParam)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (titleParam != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*titleParam);\n    return;\n  }\n  printf(\"%s: \",*messageParam);\n  return;\n}\n\n",
            "called": [
                "FUN_001036e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_message_001064a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "input",
                "cVar1": "isUndefined",
                "uVar2": "symbolClass",
                "iVar3": "asprintfResult",
                "plVar4": "symbolInfo",
                "piVar5": "errnoLocation",
                "uVar6": "xstrerrorResult",
                "lVar7": "infoPtr",
                "uVar8": "width",
                "bVar9": "dataType",
                "uVar10": "savedWidth",
                "pcVar11": "dataTypeString",
                "in_R8": "arg1",
                "in_R9": "arg2"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 input)\n\n{\n  char isUndefined;\n  ushort symbolClass;\n  int asprintfResult;\n  long *symbolInfo;\n  int *errnoLocation;\n  undefined8 xstrerrorResult;\n  long infoPtr;\n  ulong width;\n  byte dataType;\n  ulong savedWidth;\n  char *dataTypeString;\n  undefined8 arg1;\n  undefined8 arg2;\n  \n  width = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,input);\n    return;\n  }\n  symbolInfo = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  savedWidth = width;\n  FUN_00106300(symbolInfo,width);\n  FUN_00104740(\"%-20s|\",symbolInfo,0,savedWidth,arg1,arg2,width);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  if (isUndefined == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symbolInfo);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolInfo + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[3] != 0) {\n      infoPtr = *(long *)(symbolInfo[3] + 0x30);\n      isUndefined = *(char *)(infoPtr + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        dataTypeString = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        dataTypeString = \"Block\";\n      }\n      else if (*(ushort *)(infoPtr + 0x26) == 0) {\n        dataTypeString = \"None\";\n      }\n      else {\n        symbolClass = *(ushort *)(infoPtr + 0x26) >> 4 & 3;\n        if (symbolClass == 2) {\n          dataTypeString = \"Function\";\n        }\n        else if (symbolClass == 3) {\n          dataTypeString = \"Array\";\n        }\n        else {\n          if (symbolClass != 1) {\n            free(DAT_0010b730);\n            symbolClass = *(ushort *)(infoPtr + 0x26);\n            dataType = *(byte *)(infoPtr + 0x28);\n            dataTypeString = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&DAT_0010b730,dataTypeString,(ulong)dataType,(ulong)symbolClass);\n            dataTypeString = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          dataTypeString = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    dataType = *(byte *)(symbolInfo[2] + 0x48) & 0xf;\n    switch(dataType) {\n    case 0:\n      dataTypeString = \"NOTYPE\";\n      break;\n    case 1:\n      dataTypeString = \"OBJECT\";\n      break;\n    case 2:\n      dataTypeString = \"FUNC\";\n      break;\n    case 3:\n      dataTypeString = \"SECTION\";\n      break;\n    case 4:\n      dataTypeString = \"FILE\";\n      break;\n    case 5:\n      dataTypeString = \"COMMON\";\n      break;\n    case 6:\n      dataTypeString = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      dataTypeString = \"<processor specific>: %d\";\n      if ((2 < dataType - 0xd) && (dataTypeString = \"<OS specific>: %d\", 2 < dataType - 10)) {\n        dataTypeString = \"<unknown>: %d\";\n      }\n      dataTypeString = (char *)dcgettext(0,dataTypeString,5);\n      asprintfResult = asprintf(&DAT_0010b728,dataTypeString,(ulong)dataType);\n      dataTypeString = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        errnoLocation = __errno_location();\n        xstrerrorResult = xstrerror(*errnoLocation);\n        FUN_00106300(&DAT_0010712d,xstrerrorResult);\nLAB_00103983:\n        dataTypeString = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",dataTypeString);\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  infoPtr = symbolInfo[2];\n  if ((infoPtr != 0) || (infoPtr = symbolInfo[3], infoPtr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(infoPtr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "FUN_0010370a",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_0010651a"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_strings_001053b0",
                "param_1": "string_1",
                "param_2": "string_2",
                "param_3": "unused_param",
                "param_4": "string_3"
            },
            "code": "\nvoid print_strings_001053b0(undefined8 *string_1,undefined8 *string_2,undefined8 unused_param,undefined8 string_3)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (string_1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string_1);\n  }\n  printf(\"%s:\",*string_2,string_3);\n  return;\n}\n\n",
            "called": [
                "FUN_00103573"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_strings_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "decompile_and_improve_001055f0",
                "param_1": "num_files",
                "param_2": "file_names",
                "pbVar1": "ptr1",
                "bVar2": "bool1",
                "bVar3": "bool2",
                "bVar4": "bool3",
                "bVar5": "bool4",
                "cVar6": "char1",
                "bVar7": "byte1",
                "cVar8": "char2",
                "cVar9": "char3",
                "iVar10": "int1",
                "uVar11": "uint1",
                "iVar12": "int2",
                "__stream": "file1",
                "__s": "byte_ptr1",
                "piVar15": "int_ptr1",
                "sVar16": "size_t1",
                "__ptr": "byte_ptr2",
                "__src": "long_ptr1",
                "lVar17": "long1",
                "plVar18": "file_names_ptr",
                "plVar19": "long_ptr2",
                "uVar20": "undefined8_1",
                "uVar21": "undefined8_2",
                "pcVar22": "str1",
                "pbVar23": "byte_ptr3",
                "unaff_RBP": "undefined_ptr1",
                "lVar24": "long2",
                "pbVar25": "byte_ptr4",
                "pcVar26": "str2",
                "unaff_R12": "int_ptr2",
                "piVar27": "int_ptr3",
                "local_110": "int5",
                "local_10c": "int6",
                "local_108": "size_t2",
                "local_c8": "stat1"
            },
            "code": "\n\n\nundefined ** decompile_and_improve_001055f0(int num_files,long *file_names)\n\n{\n  byte *ptr1;\n  byte bool1;\n  bool bool2;\n  bool bool3;\n  bool bool4;\n  char char1;\n  byte byte1;\n  char char2;\n  char char3;\n  int int1;\n  uint uint1;\n  int int2;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  FILE *file1;\n  byte *byte_ptr1;\n  int *int_ptr1;\n  size_t size_t1;\n  byte *byte_ptr2;\n  long *long_ptr1;\n  long long1;\n  long *file_names_ptr;\n  long *long_ptr2;\n  undefined8 undefined8_1;\n  undefined8 undefined8_2;\n  char *str1;\n  byte *byte_ptr3;\n  undefined **undefined_ptr1;\n  long long2;\n  byte *byte_ptr4;\n  char *str2;\n  int *int_ptr2;\n  int *int_ptr3;\n  int int5;\n  int int6;\n  size_t size_t2;\n  stat stat1;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  str1 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *file_names;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  file_names_ptr = file_names;\n  if (1 < num_files) {\n    int6 = 2000;\n    int_ptr2 = (int *)0x1;\n    int5 = 0;\n    do {\n      int2 = (int)int_ptr2;\n      undefined_ptr1 = (undefined **)(long)int2;\n      int_ptr3 = (int *)((long)undefined_ptr1 * 8);\n      if (*(char *)file_names_ptr[(long)undefined_ptr1] != '@') goto LAB_00105a70;\n      int6 = int6 + -1;\n      if (int6 == 0) {\n        long2 = *file_names_ptr;\n        str2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      str1 = (char *)file_names_ptr[(long)undefined_ptr1] + 1;\n      int1 = stat(str1,&stat1);\n      if (int1 < 0) {\nLAB_00105a70:\n        if (num_files <= int2 + 1) break;\nLAB_00105a7a:\n        uint1 = int2 + 1;\n        int5 = int2;\n      }\n      else {\n        if ((stat1.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        file1 = fopen(str1,\"r\");\n        if (file1 == (FILE *)0x0) goto LAB_00105a70;\n        int1 = fseek(file1,0,2);\n        if (((int1 == -1) ||\n            (str1 = (char *)ftell(file1), (int *)str1 == (int *)0xffffffffffffffff)) ||\n           (int1 = fseek(file1,0,0), int1 == -1)) {\nLAB_00105ad0:\n          fclose(file1);\n          if (int2 + 1 < num_files) goto LAB_00105a7a;\n          break;\n        }\n        byte_ptr1 = (byte *)xmalloc((char *)((long)str1 + 1));\n        int_ptr1 = (int *)fread(byte_ptr1,1,(size_t)str1,file1);\n        if (((int *)str1 != int_ptr1) && (int1 = ferror(file1), int1 != 0)) {\n          free(byte_ptr1);\n          goto LAB_00105ad0;\n        }\n        byte_ptr1[(long)int_ptr1] = 0;\n        byte1 = *byte_ptr1;\n        byte_ptr3 = byte_ptr1;\n        if (byte1 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byte1 * 2] & 0x40) != 0) goto LAB_001057c0;\n          size_t1 = strlen((char *)byte_ptr1);\n          byte_ptr2 = (byte *)xmalloc(size_t1 + 1);\n          int1 = 0;\n          bool4 = false;\n          bool2 = false;\n          long2 = 0;\n          long_ptr1 = (long *)0x0;\n          bool3 = false;\n          byte_ptr3 = byte_ptr1;\n          do {\n            while (((&_sch_istable)[(ulong)*byte_ptr3 * 2] & 0x40) != 0) {\n              byte_ptr3 = byte_ptr3 + 1;\n            }\n            if ((int1 == 0) || (long_ptr2 = long_ptr1 + long2, int1 + -1 <= (int)long2)) {\n              if (long_ptr1 == (long *)0x0) {\n                int1 = 8;\n                long_ptr1 = (long *)xmalloc(0x40);\n                long_ptr2 = long_ptr1 + long2;\n                *long_ptr2 = 0;\n              }\n              else {\n                int1 = int1 * 2;\n                long_ptr1 = (long *)xrealloc(long_ptr1,(long)int1 << 3);\n                long_ptr2 = long_ptr1 + long2;\n                *long_ptr2 = 0;\n              }\n            }\n            byte1 = *byte_ptr3;\n            byte_ptr4 = byte_ptr2;\n            while (byte1 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byte1 * 2] & 0x40) != 0) &&\n                   (!(bool)(bool4 | bool3 | bool2))) {\n                  bool3 = false;\n                  bool4 = false;\n                  bool2 = false;\n                  goto LAB_001058e0;\n                }\n                if (!bool3) break;\n                byte_ptr3 = byte_ptr3 + 1;\n                *byte_ptr4 = byte1;\n                byte_ptr4 = byte_ptr4 + 1;\n                bool3 = false;\n                byte1 = *byte_ptr3;\n                if (byte1 == 0) goto LAB_001058e0;\n              }\n              if (byte1 == 0x5c) {\n                bool3 = true;\n              }\n              else if (bool2) {\n                if (byte1 == 0x27) {\n                  bool2 = false;\n                }\n                else {\nLAB_00105a55:\n                  *byte_ptr4 = byte1;\n                  byte_ptr4 = byte_ptr4 + 1;\n                }\n              }\n              else if (bool4) {\n                if (byte1 != 0x22) goto LAB_00105a55;\n                bool4 = false;\n              }\n              else if (byte1 == 0x27) {\n                bool2 = true;\n              }\n              else {\n                if (byte1 != 0x22) goto LAB_00105a55;\n                bool4 = true;\n              }\n              ptr1 = byte_ptr3 + 1;\n              byte_ptr3 = byte_ptr3 + 1;\n              byte1 = *ptr1;\n            }\nLAB_001058e0:\n            *byte_ptr4 = 0;\n            long1 = xstrdup(byte_ptr2);\n            *long_ptr2 = long1;\n            long_ptr1[long2 + 1] = 0;\n            byte1 = *byte_ptr3;\n            bool1 = (&_sch_istable)[(ulong)byte1 * 2];\n            while ((bool1 & 0x40) != 0) {\n              byte1 = byte_ptr3[1];\n              byte_ptr3 = byte_ptr3 + 1;\n              bool1 = (&_sch_istable)[(ulong)byte1 * 2];\n            }\n            long2 = long2 + 1;\n          } while (byte1 != 0);\n          free(byte_ptr2);\n          long_ptr2 = file_names_ptr;\n          if (file_names == file_names_ptr) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        long_ptr1 = (long *)xmalloc(8);\n        *long_ptr1 = 0;\n        if (file_names == file_names_ptr) {\nLAB_00105c79:\n          if (*file_names_ptr == 0) {\n            int1 = 0;\n          }\n          else {\n            long2 = 1;\n            do {\n              int1 = (int)long2;\n              long_ptr2 = file_names_ptr + long2;\n              long2 = long2 + 1;\n            } while (*long_ptr2 != 0);\n          }\n          long1 = 0;\n          long_ptr2 = (long *)xmalloc((long)(int1 + 1) << 3);\n          long2 = *file_names_ptr;\n          while (long2 != 0) {\n            undefined8_1 = xstrdup();\n            *(undefined8 *)((long)long_ptr2 + long1) = undefined8_1;\n            long1 = long1 + 8;\n            long2 = *(long *)((long)file_names_ptr + long1);\n          }\n          *(undefined8 *)((long)long_ptr2 + long1) = 0;\nLAB_0010597d:\n          file_names_ptr = long_ptr2;\n          if (*long_ptr1 == 0) goto LAB_00105d50;\n          str1 = (char *)0x0;\n          do {\n            str1 = (char *)((long)str1 + 1);\n          } while (long_ptr1[(long)str1] != 0);\n          size_t2 = (long)str1 * 8;\n        }\n        else {\nLAB_00105d50:\n          str1 = (char *)0x0;\n          size_t2 = 0;\n        }\n        free((void *)file_names_ptr[(long)undefined_ptr1]);\n        file_names_ptr = (long *)xrealloc(file_names_ptr,(long)((long)str1 + (long)num_files + 1) * 8);\n        int1 = num_files + -1 + (int)str1;\n        memmove(file_names_ptr + (long)(undefined **)((long)undefined_ptr1 + (long)str1),\n                file_names_ptr + 1 + (long)undefined_ptr1,(long)(num_files - int2) << 3);\n        memcpy(file_names_ptr + (long)undefined_ptr1,long_ptr1,size_t2);\n        free(long_ptr1);\n        free(byte_ptr1);\n        fclose(file1);\n        uint1 = int5 + 1;\n        undefined_ptr1 = (undefined **)((long)undefined_ptr1 + (long)str1);\n        int_ptr2 = int_ptr3;\n        num_files = int1;\n        if (int1 <= (int)uint1) break;\n      }\n      int_ptr2 = (int *)(ulong)uint1;\n    } while( true );\n  }\n  int2 = bfd_init();\n  str2 = \"fatal error: libbfd ABI mismatch\";\n  if (int2 != 0x118) goto LAB_00106085;\n  undefined_ptr1 = &PTR_s_debug_syms_0010b280;\n  char2 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  str1 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  int_ptr2 = (int *)\"x86_64-pc-linux-gnu\";\n  char3 = DAT_0010b23b;\n  char1 = DAT_0010b240;\n  uVar14 = DAT_0010b244;\n  if (char2 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = uVar14;\n    DAT_0010b240 = char1;\n    DAT_0010b23b = char3;\n    uVar13 = getopt_long(num_files,file_names_ptr,str1);\n    int_ptr3 = _optarg;\n    int_ptr1 = (int *)str1;\n    char3 = DAT_0010b23b;\n    char1 = DAT_0010b240;\n    uVar14 = DAT_0010b244;\n    switch(uVar13) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      FUN_00103ca0(_stderr,1);\n      int_ptr3 = int_ptr2;\nLAB_001061d5:\n      int2 = strcmp((char *)int_ptr3,\"l\");\n      if (int2 == 0) goto LAB_001061a3;\n      int2 = strcmp((char *)int_ptr3,\"escape\");\n      int_ptr2 = int_ptr3;\n      if ((int2 == 0) || (int2 = strcmp((char *)int_ptr3,\"e\"), int2 == 0)) {\n        DAT_0010b7e0 = 2;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int2 = strcmp((char *)int_ptr3,\"invalid\");\n      if ((int2 == 0) || (int2 = strcmp((char *)int_ptr3,\"i\"), int2 == 0)) {\n        DAT_0010b7e0 = 5;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int2 = strcmp((char *)int_ptr3,\"hex\");\n      if ((int2 == 0) || (int2 = strcmp((char *)int_ptr3,\"x\"), int2 == 0)) {\n        DAT_0010b7e0 = 3;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int2 = strcmp((char *)int_ptr3,\"highlight\");\n      if ((int2 == 0) || (int2 = strcmp((char *)int_ptr3,\"h\"), int2 == 0)) {\n        DAT_0010b7e0 = 4;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      str2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      FUN_00104370(&DAT_00107033);\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      FUN_00103ca0(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      int_ptr2 = (int *)&optarg;\n      DAT_0010b814 = 1;\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      if (_optarg != (int *)0x0) {\n        int2 = cplus_demangle_name_to_style();\n        int_ptr1 = _optarg;\n        if (int2 == 0) {\n          undefined8_1 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          FUN_00106300(undefined8_1,int_ptr1);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          str1 = (char *)int_ptr1;\n          char3 = DAT_0010b23b;\n          char1 = DAT_0010b240;\n          uVar14 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          char3 = DAT_0010b23b;\n          char1 = DAT_0010b240;\n          uVar14 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      FUN_00104370(\"posix\");\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      int2 = strcmp((char *)_optarg,\"32_64\");\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      if (int2 != 0) {\n        str2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        undefined8_1 = dcgettext(0,str2,5);\n        FUN_00106300(undefined8_1);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      FUN_00104370(_optarg);\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      FUN_00104370(\"just-symbols\");\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      char3 = *(char *)_optarg;\n      int_ptr2 = int_ptr3;\n      char1 = char3;\n      uVar14 = 10;\n      if (char3 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < char3) {\n        if (char3 == 'o') {\n          uVar14 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (char3 == 'x') {\n          uVar14 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      str2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      int2 = strcmp((char *)_optarg,\"default\");\n      if ((int2 == 0) || (int2 = strcmp((char *)int_ptr3,\"d\"), int2 == 0)) {\n        DAT_0010b7e0 = 0;\n        int_ptr2 = int_ptr3;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      else {\n        int2 = strcmp((char *)int_ptr3,\"locale\");\n        if (int2 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        int_ptr2 = int_ptr3;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    undefined8_1 = dcgettext(0,str2,5);\n    FUN_00106300(undefined8_1,int_ptr3);\nLAB_00105f13:\n    long2 = *file_names_ptr;\n    str2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,str2,long2);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uVar14 = bfd_get_error();\n  undefined8_1 = bfd_errmsg(uVar14);\n  undefined8_2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  FUN_00106300(undefined8_2,\"x86_64-pc-linux-gnu\",undefined8_1);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byte1 = byte_ptr3[1];\n  byte_ptr3 = byte_ptr3 + 1;\n  if (byte1 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  undefined_ptr1 = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    str1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(str1);\n    str1 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(str1);\n                    \n    exit(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    undefined8_1 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    FUN_00106400(undefined8_1);\n    undefined8_1 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    FUN_00106400(undefined8_1);\n    return undefined_ptr1;\n  }\n  str1 = &optind;\n  if (_optind != num_files) {\n    if (1 < num_files - _optind) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      int2 = *(int *)str1;\n      if (num_files <= int2) break;\n      long2 = file_names_ptr[int2];\n      *(int *)str1 = int2 + 1;\n      char3 = FUN_001043d0(long2);\n      if (char3 != '\\0') {\n        int2 = *(int *)str1;\n        if (num_files <= int2) break;\n        long2 = file_names_ptr[int2];\n        *(int *)str1 = int2 + 1;\n        char3 = FUN_001043d0(long2);\n        if (char3 != '\\0') {\n          int2 = *(int *)str1;\n          while( true ) {\n            if (num_files <= int2) goto LAB_00105bdd;\n            long2 = file_names_ptr[int2];\n            *(int *)str1 = int2 + 1;\n            char3 = FUN_001043d0(long2);\n            if (char3 == '\\0') break;\n            int2 = *(int *)str1;\n          }\n        }\n      }\n      undefined_ptr1 = (undefined **)(ulong)((int)undefined_ptr1 + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)undefined_ptr1);\n  }\nLAB_0010613c:\n  uint1 = FUN_001043d0(\"a.out\");\n  return (undefined **)(ulong)((uint1 ^ 1) & 0xff);\n}\n\n",
            "called": [
                "memmove",
                "FUN_00103ca0",
                "memcpy",
                "ferror",
                "ftell",
                "bindtextdomain",
                "fseek",
                "textdomain",
                "xmalloc_set_program_name",
                "exit",
                "FUN_001043d0",
                "strcmp",
                "bfd_set_default_target",
                "xexit",
                "dcgettext",
                "stat",
                "strlen",
                "printf",
                "getopt_long",
                "fread",
                "cplus_demangle_set_style",
                "bfd_plugin_set_plugin",
                "xmalloc",
                "xstrdup",
                "free",
                "FUN_00104370",
                "FUN_00106300",
                "FUN_00106400",
                "xrealloc",
                "setlocale",
                "bfd_init",
                "bfd_get_error",
                "cplus_demangle_name_to_style",
                "fclose",
                "fopen",
                "bfd_plugin_set_program_name",
                "bfd_set_error_program_name",
                "bfd_errmsg",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_001055f0"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_001055f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_001055f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00104670",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_message_if_data_not_set_0010351b"
            },
            "code": "\nvoid print_message_if_data_not_set_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_message_if_data_not_set_0010351b"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_if_flag_set_00103b2b",
                "param_1": "category",
                "param_2": "name"
            },
            "code": "\nvoid print_if_flag_set_00103b2b(undefined8 category,undefined8 name)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",category,name);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_flag_set_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_formatted_string_00104740",
                "param_1": "format",
                "param_2": "pointerParams",
                "param_3": "stringParam",
                "param_4": "length",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "index",
                "sVar5": "size",
                "pcVar6": "pointerChar",
                "puVar7": "ptr2",
                "pcVar8": "pointerChar2",
                "__ptr": "result",
                "uVar9": "ulongVar",
                "uVar10": "undefinedVar",
                "puVar11": "ptr3",
                "puVar12": "ptr4",
                "__s": "charPtr",
                "__s_00": "charPtr2",
                "lVar13": "longVar",
                "uVar14": "uintVar",
                "bVar15": "byteVar",
                "acStack_39": "stackArray"
            },
            "code": "\n\n\nvoid printFormattedString_00104740(char *format,long *pointerParams,undefined8 *stringParam,long length)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int index;\n  size_t size;\n  char *pointerChar;\n  undefined8 *ptr2;\n  char *pointerChar2;\n  undefined8 *result;\n  ulong ulongVar;\n  undefined8 undefinedVar;\n  undefined *ptr3;\n  undefined8 *ptr4;\n  char *charPtr;\n  undefined8 *charPtr2;\n  long longVar;\n  uint uintVar;\n  byte byteVar;\n  char stackArray [9];\n  \n  byteVar = 0;\n  if (stringParam == (undefined8 *)0x0) {\n    stringParam = *(undefined8 **)(*pointerParams + 0x10);\n    if (DAT_0010b234 == 0) {\n      FUN_00102739();\n      return;\n    }\nLAB_00104775:\n    ptr4 = stringParam;\n    if (DAT_0010b814 == 0) {\n      pointerChar = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        ptr4 = stringParam;\n        result = (undefined8 *)0x0;\n      }\n      else {\n        result = (undefined8 *)0x0;\n        if (stringParam != (undefined8 *)0x0) goto LAB_0010269d;\n        ptr4 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      pointerChar = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)ptr4 == '\\0') ||\n         (stringParam = (undefined8 *)bfd_demangle(length,ptr4,DAT_0010b248),\n         stringParam == (undefined8 *)0x0)) {\n        stringParam = ptr4;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        result = (undefined8 *)0x0;\n      }\n      else {\n        ptr4 = stringParam;\n        result = stringParam;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    ptr4 = stringParam;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(length + 8) + 8) != 5) goto LAB_00104775;\n      pointerChar = strchr((char *)stringParam,0x40);\n      if (pointerChar == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (pointerParams == (long *)0x0) {\n              result = (undefined8 *)0x0;\n              printf(format,stringParam);\n            }\n            else {\n              if (pointerParams[2] != 0) {\n                FUN_001047d0();\n                return;\n              }\n              result = (undefined8 *)0x0;\n              printf(format,stringParam);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *pointerChar = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          result = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    pointerChar = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    ptr4 = stringParam;\n    result = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)stringParam;\n      stringParam = (undefined8 *)((long)stringParam + 1);\n      if (byte1 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) && (byte1 < 0xc0));\n    size = strlen((char *)ptr4);\n    charPtr2 = DAT_0010b790;\n    if (_DAT_0010b798 < size * 9) {\n      free(DAT_0010b790);\n      size = strlen((char *)ptr4);\n      _DAT_0010b798 = size * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      charPtr2 = DAT_0010b790;\n    }\n    while( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)ptr4;\n      ptr1 = (undefined8 *)((long)ptr4 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)charPtr2 = byte1;\n          charPtr2 = (undefined8 *)((long)charPtr2 + 1);\n          ptr4 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = charPtr2;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar = 2;\n                goto LAB_00102917;\n              case 4:\n                index = isatty(1);\n                if (index == 0) {\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                }\n                else {\n                  *(undefined *)(charPtr2 + 1) = 0;\n                  *charPtr2 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                  ptr2 = charPtr2 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr4 >> 2 & 7),\n                        (ulong)((*(byte *)ptr4 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar = (ulong)uintVar; ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + (ulong)byteVar * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byteVar * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar = 3;\nLAB_00102917:\n                  undefinedVar = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    undefinedVar = 0x3c;\n                  }\n                  sprintf((char *)charPtr2,\"%c\",undefinedVar);\n                  *(undefined *)((long)charPtr2 + 3) = 0;\n                  ptr2 = (undefined8 *)(longVar + (long)ptr4);\n                  *(undefined2 *)((long)charPtr2 + 1) = 0x7830;\n                  pointerChar2 = (char *)((long)charPtr2 + 3);\n                  do {\n                    charPtr = pointerChar2;\n                    byte1 = *(byte *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + 1);\n                    sprintf(charPtr,\"%02x\",(ulong)byte1);\n                    pointerChar2 = charPtr + 2;\n                  } while (ptr4 != ptr2);\n                  undefinedVar = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    undefinedVar = 0x3e;\n                  }\n                  uintVar = (uint)longVar;\n                  sprintf(charPtr + 2,\"%c\",undefinedVar);\n                  ptr2 = (undefined8 *)(charPtr + 3);\n                  break;\n                case 4:\n                  index = isatty(1);\n                  if (index == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                  }\n                  else {\n                    *(undefined *)(charPtr2 + 1) = 0;\n                    *charPtr2 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                    ptr2 = charPtr2 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (index = isatty(1), index != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                byte2 = *(byte *)((long)ptr4 + 3);\n                if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  index = isatty(1);\n                  if (index == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                  }\n                  else {\n                    *(undefined *)(charPtr2 + 1) = 0;\n                    *charPtr2 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                    ptr2 = charPtr2 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  index = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 2) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)index);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar = (ulong)(uint)((int)ptr2 - (int)charPtr2);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)charPtr2 = byte1;\n            uintVar = 1;\n            ulongVar = 1;\n          }\n          charPtr2 = (undefined8 *)((long)charPtr2 + ulongVar);\n          ptr4 = (undefined8 *)((long)ptr1 + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)charPtr2 = 0x5e;\n        *(byte *)((long)charPtr2 + 1) = byte1 + 0x40;\n        charPtr2 = (undefined8 *)((long)charPtr2 + 2);\n        ptr4 = ptr1;\n      }\n    }\n    *(undefined *)charPtr2 = 0;\n    ptr4 = ptr2;\n  }\njoined_r0x00104864:\n  if ((((pointerParams != (long *)0x0) && (pointerParams[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((pointerChar2 = (char *)(**(code **)(*(long *)(length + 8) + 0x220))\n                                  (length,pointerParams[2],0,stackArray), pointerChar2 != (char *)0x0 &&\n      (*pointerChar2 != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((stackArray[0] == '\\0') && (*(long *)(pointerParams[2] + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    result = (undefined8 *)reconcat(result,ptr4,ptr3,pointerChar2,0);\n    ptr4 = result;\n  }\n  printf(format,ptr4);\n  if (pointerChar != (char *)0x0) {\n    *pointerChar = '@';\n  }\nLAB_001047ba:\n  free(result);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001043d0",
                "FUN_001064b0",
                "FUN_00103b49"
            ],
            "imported": false,
            "current_name": "print_formatted_string_00104740"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "initialize_data_00106400",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "length",
                "local_d4": "size",
                "local_d0": "ptr1",
                "local_c8": "ptr2",
                "local_b8": "buffer",
                "local_b0": "value1",
                "local_a8": "value2",
                "local_a0": "value3",
                "local_98": "value4",
                "local_90": "value5",
                "local_88": "ifParam1",
                "local_78": "ifParam2",
                "local_68": "ifParam3",
                "local_58": "ifParam4",
                "local_48": "ifParam5",
                "local_38": "ifParam6",
                "local_28": "ifParam7",
                "local_18": "ifParam8"
            },
            "code": "\nvoid initializeData_00106400(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 length;\n  undefined4 size;\n  undefined *ptr1;\n  undefined *ptr2;\n  undefined buffer [8];\n  undefined8 value1;\n  undefined8 value2;\n  undefined8 value3;\n  undefined8 value4;\n  undefined8 value5;\n  undefined4 ifParam1;\n  undefined4 ifParam2;\n  undefined4 ifParam3;\n  undefined4 ifParam4;\n  undefined4 ifParam5;\n  undefined4 ifParam6;\n  undefined4 ifParam7;\n  undefined4 ifParam8;\n  \n  if (flag != '\\0') {\n    ifParam1 = input1;\n    ifParam2 = input2;\n    ifParam3 = input3;\n    ifParam4 = input4;\n    ifParam5 = input5;\n    ifParam6 = input6;\n    ifParam7 = input7;\n    ifParam8 = input8;\n  }\n  ptr1 = &stack0x00000008;\n  length = 8;\n  ptr2 = buffer;\n  size = 0x30;\n  value1 = param10;\n  value2 = param11;\n  value3 = param12;\n  value4 = param13;\n  value5 = param14;\n  FUN_001063a0(param9,&length);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_00104d5b",
                "FUN_0010249f",
                "FUN_001048e0"
            ],
            "imported": false,
            "current_name": "initialize_data_00106400"
        },
        "bfd_get_arch_size": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "bfd_get_arch_size"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_execute_00103533",
                "param_1": "array1",
                "param_2": "array2",
                "uVar1": "result"
            },
            "code": "\nulong compareAndExecute_00103533(undefined8 *array1,undefined8 *array2)\n\n{\n  ulong result;\n  \n  if ((ulong)array1[1] < (ulong)array2[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)array2[1] < (ulong)array1[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (*(code *)(&PTR_FUN_0010acc0)[DAT_0010b7f4])(*array1,*array2);\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_execute_00103533"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "execute_initialization_0010651a"
            },
            "code": "\nvoid execute_initialization_0010651a(void)\n\n{\n  FUN_001054d0();\n  return;\n}\n\n",
            "called": [
                "FUN_001054d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "FUN_00103a66",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "execute_initialization_0010651a"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_details_001053c0",
                "param_1": "symbolData",
                "param_2": "formatSpecifier",
                "iVar1": "printWidth",
                "cVar2": "isUndefined",
                "uVar3": "message",
                "lVar4": "symbolAddress"
            },
            "code": "\nvoid printSymbolDetails_001053c0(long *symbolData,undefined8 formatSpecifier)\n\n{\n  int printWidth;\n  char isUndefined;\n  undefined8 message;\n  long symbolAddress;\n  \n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolData + 8));\n  printWidth = DAT_0010b7a8;\n  if (isUndefined == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        message = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        FUN_00106300(message,printWidth);\n        goto LAB_00103623;\n      }\n      message = *(undefined8 *)*symbolData;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (symbolData[2] == 0) {\n          symbolAddress = symbolData[1];\n        }\n        else {\n          symbolAddress = *(long *)(symbolData[2] + 0x38);\n        }\n        FUN_001054d0(symbolAddress);\n        if (DAT_0010b7ec != 0) {\n          FUN_001035a2();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      message = *(undefined8 *)*symbolData;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(DAT_0010b7a0,message);\n    if (DAT_0010b7ec != 0) {\n      FUN_001035a2();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolData + 8));\n  if (*(char *)(*symbolData + 8) != '-') {\n    FUN_00104740(&DAT_0010712c,symbolData,0,formatSpecifier);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbolData + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolData + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolData + 0x20));\n  FUN_00104740(&DAT_0010712c,symbolData,0,formatSpecifier);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001035a2",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "dcgettext",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_symbol_details_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_info_001064b0",
                "param_1": "symbolPointer",
                "param_2": "address",
                "cVar1": "isUndefinedSymbol",
                "printf": "printFormatted",
                "putchar": "printCharacter"
            },
            "code": "\nvoid printSymbolInfo_001064b0(long *symbolPointer,undefined8 address)\n\n{\n  char isUndefinedSymbol;\n  \n  FUN_00104740(&DAT_00107363,symbolPointer,0,address);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbolPointer + 8));\n  isUndefinedSymbol = bfd_is_undefined_symclass((int)*(char *)(*symbolPointer + 8));\n  if (isUndefinedSymbol != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  FUN_001054d0(*(undefined8 *)*symbolPointer);\n  putchar(0x20);\n  if (symbolPointer[2] == 0) {\n    if (symbolPointer[1] != 0) {\n      FUN_0010651a();\n      return;\n    }\n  }\n  else if (*(long *)(symbolPointer[2] + 0x38) != 0) {\n    FUN_001054d0();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "putchar",
                "FUN_00103a66",
                "FUN_0010651a",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_001064b0"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_001047d0",
                "FUN_0010351b",
                "FUN_00103463",
                "FUN_00102f19",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00105110",
                "FUN_00102f7b",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_001054d0",
                "FUN_00102739",
                "FUN_001036a7",
                "FUN_00103b2b",
                "FUN_001062d0",
                "FUN_00103abf",
                "FUN_00103573",
                "FUN_00102670",
                "FUN_001036e0"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "initialize_data_00103b49",
                "param_1": "dataPointer",
                "param_2": "inputValue"
            },
            "code": "\nvoid initializeData_00103b49(undefined8 dataPointer,undefined8 inputValue)\n\n{\n  FUN_00104740(&DAT_0010712d,dataPointer,0,inputValue);\n  return;\n}\n\n",
            "called": [
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_symbols_00103abf",
                "param_1": "filepath",
                "param_2": "filename",
                "pcVar1": "message"
            },
            "code": "\nvoid printSymbols_00103abf(undefined8 filepath,undefined8 filename)\n\n{\n  char *message;\n  \n  message = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    message = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  message = (char *)dcgettext(0,message,5);\n  printf(message,filepath,filename);\n  message = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    message = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  message = (char *)dcgettext(0,message,5);\n  printf(message);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00103abf"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "calculate_result_00103bf6",
                "iVar1": "result",
                "in_RAX": "input",
                "auVar2": "output"
            },
            "code": "\nundefined  [16] calculateResult_00103bf6(void)\n\n{\n  int result;\n  undefined8 input;\n  undefined output [16];\n  \n  result = FUN_00104fa0();\n  output._0_4_ = -result;\n  output._4_4_ = 0;\n  output._8_8_ = input;\n  return output;\n}\n\n",
            "called": [
                "FUN_00104fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_targets_00102450",
                "__ptr": "targetList",
                "unaff_RBX": "outputFile",
                "plVar3": "currentTarget",
                "lVar1": "currentTargetValue",
                "pcVar2": "message",
                "in_stack_00000008": "exitCode"
            },
            "code": "\nvoid printTargets_00102450(void)\n\n{\n  long currentTargetValue;\n  char *message;\n  long *targetList;\n  FILE *outputFile;\n  long *currentTarget;\n  int exitCode;\n  \n  message = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputFile,message);\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    currentTargetValue = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (currentTargetValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "print_targets_00102450"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "process_lto_object_00102c19",
                "pcVar1": "pointerChar",
                "pcVar2": "pointerCode",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "ulongVar",
                "lVar7": "longVar",
                "puVar8": "pointerVar8",
                "lVar9": "longVar2",
                "puVar10": "pointerVar10",
                "unaff_RBX": "pointerRBX",
                "__ptr": "pointerPtr",
                "unaff_RBP": "pointerRBP",
                "puVar11": "pointerVar11",
                "puVar12": "pointerVar12",
                "puVar13": "pointerVar13",
                "in_R8": "pointerR8",
                "puVar14": "pointerVar14",
                "in_R9": "pointerR9",
                "puVar15": "pointerVar15",
                "unaff_R12": "pointerR12",
                "unaff_R13": "pointerR13",
                "unaff_R14": "pointerR14",
                "unaff_R15": "pointerR15",
                "bVar16": "boolVar",
                "bVar17": "byteVar",
                "unaff_retaddr": "ulongVar2",
                "uVar18": "ulongVar3",
                "in_stack_00000008": "stackVar",
                "in_stack_00000010": "stackVar1",
                "in_stack_00000018": "stackVar2",
                "in_stack_00000038": "stackVar3",
                "in_stack_00000040": "stackPtr",
                "in_stack_00000048": "stackPtr1"
            },
            "code": "\n\n\nvoid processLTOObject_00102c19(void)\n\n{\n  char *pointerChar;\n  code *pointerCode;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 ulongVar;\n  long longVar;\n  undefined8 *pointerVar8;\n  long longVar2;\n  undefined8 *pointerVar10;\n  undefined8 *pointerRBX;\n  undefined8 *pointerPtr;\n  undefined8 *pointerRBP;\n  undefined8 *pointerVar11;\n  undefined8 *pointerVar12;\n  undefined8 *pointerR8;\n  undefined8 *pointerVar13;\n  undefined8 *pointerR9;\n  undefined8 *pointerVar14;\n  undefined8 *pointerR12;\n  undefined8 *pointerVar15;\n  undefined8 *pointerR13;\n  undefined8 *pointerR14;\n  undefined8 *pointerR15;\n  bool boolVar;\n  byte byteVar;\n  ulong ulongVar2;\n  ulong ulongVar3;\n  undefined8 stackVar;\n  undefined8 *stackVar1;\n  undefined8 *stackVar2;\n  undefined8 stackVar3;\n  void *stackPtr;\n  undefined8 *stackPtr1;\n  \n  byteVar = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (pointerRBX != pointerR13) {\n      if (pointerR14 == (undefined8 *)0x8) {\n        *pointerRBX = *pointerR13;\n        FUN_001049c0();\n        return;\n      }\n      for (; pointerR14 != (undefined8 *)0x0; pointerR14 = (undefined8 *)((long)pointerR14 + -1)) {\n        *(undefined *)pointerRBX = *(undefined *)pointerR13;\n        pointerR13 = (undefined8 *)((long)pointerR13 + (ulong)byteVar * -2 + 1);\n        pointerRBX = (undefined8 *)((long)pointerRBX + (ulong)byteVar * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    pointerRBX = (undefined8 *)((long)pointerRBX + (long)pointerR14);\nLAB_001049c3:\n    do {\n      do {\n        pointerR13 = (undefined8 *)((long)pointerR13 + (long)pointerR14);\n        pointerVar15 = pointerR12;\n        pointerVar12 = pointerRBP;\n        if (pointerR12 <= pointerR13) goto LAB_00104b15;\nLAB_001049cf:\n        pointerVar8 = (undefined8 *)\n                 (**(code **)(pointerRBP[1] + 0x270))\n                           (pointerRBP,ulongVar2 & 0xffffffff,pointerR13,pointerR15);\n        pointerVar11 = pointerRBP;\n        pointerVar12 = pointerR13;\n        pointerVar15 = pointerR15;\n        if (pointerVar8 == (undefined8 *)0x0) goto LAB_00102eb0;\n        pointerChar = (char *)pointerVar8[1];\n        if (((pointerChar == (char *)0x0) || (*pointerChar != '_')) || (pointerChar[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintVar = (uint)(pointerVar8[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintVar != 0) goto LAB_00104a2d;\n          pointerR13 = (undefined8 *)((long)pointerR13 + (long)pointerR14);\n          pointerVar15 = pointerR12;\n          pointerVar12 = pointerRBP;\n          if (pointerR12 <= pointerR13) {\nLAB_00104b15:\n            pointerRBX = (undefined8 *)((long)pointerRBX - (long)stackVar2);\n            if (pointerR14 == (undefined8 *)0x8) {\n              longVar2 = pointerVar12[1];\n              pointerVar11 = (undefined8 *)((long)pointerRBX + 7);\n              if (-1 < (long)pointerRBX) {\n                pointerVar11 = pointerRBX;\n              }\n              pointerR8 = (undefined8 *)(ulong)DAT_0010b800;\n              pointerCode = *(code **)(longVar2 + 0x208);\n              pointerVar11 = (undefined8 *)((long)pointerVar11 >> 3);\n            }\n            else {\n              pointerVar11 = (undefined8 *)((long)pointerRBX / (long)pointerR14);\n              longVar2 = pointerVar12[1];\n              pointerCode = *(code **)(longVar2 + 0x208);\n            }\n            pointerRBP = pointerVar12;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = pointerVar12;\n              DAT_0010b770 = (undefined8 *)(*pointerCode)(pointerVar12);\n              DAT_0010b768 = (undefined8 *)(**(code **)(pointerVar12[1] + 0x208))(pointerVar12);\n              pointerRBX = stackPtr1;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                FUN_00106530(*pointerVar12);\n                pointerPtr = pointerR15;\n                goto LAB_00102d8e;\n              }\n              pointerR12 = (undefined8 *)(ulong)stackVar3._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulongVar3 = (ulong)(DAT_0010b80c != 0);\n                qsort(stackPtr1,(size_t)pointerVar11,(size_t)pointerR12,FUN_00102fd2);\n                pointerVar15 = (undefined8 *)xmalloc((long)pointerVar11 << 4);\n                pointerVar13 = DAT_0010b770;\n                pointerRBP = DAT_0010b768;\n                pointerR14 = (undefined8 *)((long)pointerVar11 * (long)pointerR12 + (long)pointerRBX);\n                pointerVar8 = DAT_0010b770;\n                pointerR9 = DAT_0010b768;\n                if (pointerR14 <= pointerRBX) goto LAB_00102ec2;\n                pointerVar11 = (undefined8 *)\n                          (**(code **)(pointerVar12[1] + 0x270))(pointerVar12,ulongVar3 & 0xffffffff,pointerRBX);\n                pointerPtr = pointerRBX;\n                pointerR8 = pointerR12;\n                stackVar1 = pointerVar15;\n                if (pointerVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stackPtr1,(size_t)pointerVar11,(size_t)pointerR12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVar2 = pointerVar12[1];\n            }\n            pointerPtr = (undefined8 *)0x0;\n            do {\n              pointerVar12 = stackPtr1;\n              pointerVar8 = (undefined8 *)(ulong)DAT_0010b7f8;\n              pointerR14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointerVar15 = (undefined8 *)(**(code **)(longVar2 + 0x208))(pointerRBP);\n                if (pointerVar15 == (undefined8 *)0x0) goto LAB_00102ed2;\n                pointerRBX = pointerPtr + (long)pointerVar11 * 2;\n                pointerVar11 = pointerPtr;\n                do {\n                  if (pointerRBX <= pointerVar11) {\nLAB_00104c75:\n                    if (stackPtr == (void *)0x0) {\n                      free(stackPtr1);\n                      free(pointerPtr);\n                      return;\n                    }\n                    free(stackPtr);\n                    free(stackPtr1);\n                    free(pointerPtr);\n                    return;\n                  }\n                  pointerVar8 = pointerVar15;\n                  longVar2 = (**(code **)(pointerRBP[1] + 0x270))(pointerRBP,pointerR14,*pointerVar11);\n                  if (longVar2 == 0) {\n                    FUN_00106530(*pointerRBP,0);\nLAB_00102ed2:\n                    pointerVar12 = (undefined8 *)*pointerRBP;\n                    FUN_00106530();\n                    pointerVar13 = pointerR8;\n                    pointerVar14 = pointerR9;\n                    goto LAB_00102edb;\n                  }\n                  pointerVar12 = pointerVar11 + 1;\n                  pointerVar11 = pointerVar11 + 2;\n                  FUN_00105110(pointerRBP,longVar2,*pointerVar12,stackVar);\n                } while( true );\n              }\n              pointerR12 = (undefined8 *)(ulong)stackVar3._4_4_;\n              pointerR15 = (undefined8 *)(**(code **)(longVar2 + 0x208))(pointerRBP);\n              if (pointerR15 == (undefined8 *)0x0) {\n                FUN_00106530(*pointerRBP);\n                pointerVar12 = pointerR12;\n                if (DAT_0010b80c == 0) {\n                  longVar2 = (**(code **)(pointerRBP[1] + 0x350))(pointerRBP);\n                  pointerVar11 = stackPtr1;\n                  pointerVar15 = pointerR12;\n                  if (longVar2 < 1) {\n                    pointerVar8 = (undefined8 *)0x0;\n                    pointerRBX = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    pointerRBX = (undefined8 *)xmalloc();\n                    pointerVar8 = (undefined8 *)(**(code **)(pointerRBP[1] + 0x358))(pointerRBP,pointerRBX);\n                    pointerVar12 = pointerVar15;\n                    if ((long)pointerVar8 < 0) {\n                      pointerVar12 = (undefined8 *)*pointerRBP;\n                      pointerVar11 = (undefined8 *)FUN_00106530(pointerVar12,pointerVar15);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointerVar8 = pointerR12;\n                  pointerRBX = stackPtr1;\n                  pointerVar11 = (undefined8 *)0x0;\n                  pointerVar15 = (undefined8 *)0x0;\n                }\n                pointerR9 = &stack0x00000040;\n                pointerR8 = pointerRBX;\n                longVar2 = (**(code **)(pointerRBP[1] + 0x360))(pointerRBP,pointerVar15,pointerVar11,pointerVar8);\n                pointerR12 = pointerVar12;\n                if (0 < longVar2) {\n                  pointerR12 = (undefined8 *)((long)pointerVar12 + longVar2);\n                  stackPtr1 = (undefined8 *)xrealloc(stackPtr1);\n                  longVar = 0;\n                  do {\n                    stackPtr1[(long)((long)pointerVar12 + longVar)] =\n                         (void *)(longVar * 0x30 + (long)stackPtr);\n                    longVar = longVar + 1;\n                  } while (longVar2 != longVar);\n                  stackPtr1[(long)((long)pointerVar12 + longVar2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (pointerRBX != (undefined8 *)0x0)) {\n                  free(pointerRBX);\n                }\n                if ((*(byte *)((long)pointerRBP + 0x4a) & 0x10) != 0) {\n                  pointerRBX = (undefined8 *)*pointerRBP;\n                  DAT_0010b230 = '\\0';\n                  ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(ulongVar);\n                }\n                pointerR14 = (undefined8 *)(ulong)stackVar3._4_4_;\n                boolVar = DAT_0010b80c != 0;\n                pointerVar11 = (undefined8 *)(ulong)boolVar;\n                pointerVar8 = stackPtr1;\n                stackVar2 = stackPtr1;\n                pointerR15 = (undefined8 *)(**(code **)(pointerRBP[1] + 0x208))(pointerRBP);\n                if (pointerR15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointerVar11 = (undefined8 *)((long)pointerVar11 * (long)pointerR12 + (long)pointerVar12);\n                pointerRBX = pointerVar12;\n                while( true ) {\n                  if (pointerVar11 <= pointerRBX) goto LAB_00104c75;\n                  pointerVar8 = pointerR15;\n                  longVar2 = (**(code **)(pointerRBP[1] + 0x270))(pointerRBP,pointerR14,pointerRBX);\n                  if (longVar2 == 0) break;\n                  pointerRBX = (undefined8 *)((long)pointerRBX + (long)pointerR12);\n                  FUN_00105110(pointerRBP,longVar2,0,stackVar);\n                }\n                FUN_00106530(*pointerRBP,0);\n              }\n              FUN_00106530(*pointerRBP);\n              pointerVar12 = pointerRBP;\n              pointerVar15 = pointerR15;\nLAB_00102eb0:\n              FUN_00106530(*pointerVar11);\nLAB_00102eb9:\n              FUN_00106530(*pointerVar12);\nLAB_00102ec2:\n              pointerVar11 = (undefined8 *)0x0;\n              pointerPtr = pointerRBX;\n              pointerR8 = pointerR12;\n              pointerVar13 = pointerVar8;\n              pointerRBP = pointerR9;\n              stackVar1 = pointerVar15;\nLAB_00104e35:\n              while (pointerR9 = pointerVar13, pointerPtr < pointerR14) {\n                pointerRBX = (undefined8 *)((long)pointerPtr + (long)pointerR8);\n                if (pointerRBX < pointerR14) {\n                  pointerVar8 = pointerRBP;\n                  pointerVar13 = pointerR8;\n                  pointerVar14 = pointerR9;\n                  pointerVar10 = (undefined8 *)(**(code **)(pointerVar12[1] + 0x270))();\n                  if (pointerVar10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    pointerR9 = pointerVar14;\n                    pointerR8 = pointerVar13;\n                    pointerVar12 = (undefined8 *)*pointerVar12;\n                    pointerVar10 = (undefined8 *)FUN_00106530();\n                  }\n                  else {\n                    pointerVar8 = (undefined8 *)pointerVar11[4];\n                    if ((*(uint *)(pointerVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar2 = pointerVar11[2];\nLAB_00102ee7:\n                  if (pointerVar8 == (undefined8 *)pointerVar10[4]) {\n                    longVar2 = pointerVar10[2] - longVar2;\n                    pointerVar13 = pointerRBP;\n                    pointerVar14 = pointerPtr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar2 = pointerVar8[8] - longVar2;\n                  pointerVar13 = pointerRBP;\n                  pointerVar14 = pointerPtr;\n                }\n                else {\n                  pointerVar8 = (undefined8 *)pointerVar11[4];\n                  if ((*(uint *)(pointerVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar2 = pointerVar11[2];\n                    pointerVar10 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointerVar10 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointerVar13 = pointerRBP;\n                  pointerVar14 = pointerPtr;\n                  if (*(int *)(pointerVar12[1] + 8) == 5) {\n                    longVar2 = pointerVar11[7];\n                  }\n                  else {\n                    longVar2 = pointerVar11[2];\n                    if ((*(byte *)((long)pointerVar8 + 0x25) & 0x10) == 0) {\n                      if (pointerRBX < pointerR14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointerVar11 = pointerVar10;\n                pointerPtr = pointerRBX;\n                pointerRBP = pointerR9;\n                if (longVar2 != 0) {\n                  *pointerVar15 = pointerVar14;\n                  pointerVar15[1] = longVar2;\n                  pointerVar15 = pointerVar15 + 2;\n                }\n              }\n              pointerVar11 = (undefined8 *)((long)pointerVar15 - (long)stackVar1 >> 4);\n              qsort(stackVar1,(size_t)pointerVar11,0x10,FUN_00103533);\n              longVar2 = pointerVar12[1];\n              pointerRBX = pointerPtr;\n              pointerRBP = pointerVar12;\n              pointerPtr = stackVar1;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVar = strcmp(pointerChar + (pointerChar[2] == '_'),\"__gnu_lto_slim\");\n        stackVar1 = pointerVar8;\n        if (intVar == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stackVar1 = (undefined8 *)*pointerRBP;\n            DAT_0010b230 = '\\0';\n            ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            FUN_00106400(ulongVar,stackVar1);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uintVar = (*(uint *)(pointerVar8 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointerVar8 + 3) & 0x800082) == 0) && (pointerVar8[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointerVar8[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n          if ((pointerVar8[4] != 0x10c2a8) && (pointerVar8[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointerVar8 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n      pointerR9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        charVar = (**(code **)(pointerRBP[1] + 0x230))(pointerRBP);\n        if (charVar != '\\0') {\n          processLTOObject_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointerVar8[4] == 0x10c2a8);\nLAB_00104cba:\n    charVar = (**(code **)(pointerRBP[1] + 0x230))(pointerRBP);\n    if (charVar != '\\0') {\n      processLTOObject_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointerVar15 = (undefined8 *)((long)pointerR12 * (long)pointerR14);\n  pointerR12 = (undefined8 *)((long)stackVar2 + (long)pointerVar15);\n  pointerRBX = stackVar2;\n  pointerVar12 = pointerRBP;\n  if (stackVar2 < pointerR12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  ulongVar2 = (ulong)boolVar;\n  pointerR13 = stackVar2;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_object_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "error_report_00106530",
                "iVar1": "errorStatus",
                "uVar2": "errorString",
                "lVar3": "exitStatus",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid errorReport_00106530(void)\n\n{\n  int errorStatus;\n  undefined8 errorString;\n  long exitStatus;\n  undefined8 additionalInfo;\n  \n  FUN_00106540();\n  exitStatus = 1;\n  xexit();\n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg(errorStatus);\n  }\n  fflush(_stdout);\n  if (exitStatus != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,exitStatus,errorString,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorString,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_00106540",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103463",
                "FUN_001043d0",
                "FUN_00103c00",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_00105110",
                "FUN_00102fc3",
                "FUN_00102f9f",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "error_report_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00106540",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "print_encoded_string_0010268b",
                "unaff_RBP": "framePointer",
                "unaff_R12": "outputFlag",
                "unaff_R13": "reallocedString",
                "unaff_R14": "formatString",
                "unaff_R15": "functionPointer",
                "in_stack_00000038": "extraArgument",
                "puVar1": "pointer1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "returnValue",
                "sVar5": "inputStringLength",
                "puVar6": "outputPointer",
                "pcVar7": "tempPointer",
                "uVar8": "tempVariable1",
                "uVar9": "tempVariable2",
                "puVar10": "constantPointer",
                "puVar11": "pointer2",
                "puVar12": "outputString",
                "lVar13": "tempVariable3",
                "uVar14": "tempVariable4",
                "bVar15": "flag",
                "__s": "innerTempString"
            },
            "code": "\n\n\nvoid printEncodedString_0010268b(void)\n\n{\n  undefined8 *pointer1;\n  byte byte1;\n  byte byte2;\n  int returnValue;\n  size_t inputStringLength;\n  undefined8 *outputPointer;\n  char *tempPointer;\n  ulong tempVariable1;\n  undefined8 tempVariable2;\n  undefined *constantPointer;\n  undefined8 *pointer2;\n  long framePointer;\n  undefined8 *outputString;\n  undefined *outputFlag;\n  undefined8 *reallocedString;\n  long tempVariable3;\n  uint tempVariable4;\n  char *formatString;\n  long functionPointer;\n  byte flag;\n  char *innerTempString;\n  undefined8 extraArgument;\n  \n  flag = 0;\n  outputString = reallocedString;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      byte1 = *(byte *)outputString;\n      if (byte1 == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (outputString = (undefined8 *)((long)outputString + 1), byte1 < 0xc0));\n    inputStringLength = strlen((char *)reallocedString);\n    outputString = DAT_0010b790;\n    pointer2 = reallocedString;\n    if (_DAT_0010b798 < inputStringLength * 9) {\n      free(DAT_0010b790);\n      inputStringLength = strlen((char *)reallocedString);\n      _DAT_0010b798 = inputStringLength * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      outputString = DAT_0010b790;\n    }\n    while( true ) {\n      reallocedString = DAT_0010b790;\n      byte1 = *(byte *)pointer2;\n      pointer1 = (undefined8 *)((long)pointer2 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)outputString = byte1;\n          outputString = (undefined8 *)((long)outputString + 1);\n          pointer2 = pointer1;\n        }\n        else {\n          byte2 = *(byte *)((long)pointer2 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            outputPointer = outputString;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                tempVariable4 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                tempVariable3 = 2;\n                goto LAB_00102917;\n              case 4:\n                returnValue = isatty(1);\n                if (returnValue == 0) {\n                  byte2 = *(byte *)((long)pointer2 + 1);\n                }\n                else {\n                  *(undefined *)(outputString + 1) = 0;\n                  *outputString = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)pointer2 + 1);\n                  outputPointer = outputString + 1;\n                }\n              case 2:\n                tempVariable4 = 2;\n                sprintf((char *)outputPointer,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)pointer2 >> 2 & 7),\n                        (ulong)((*(byte *)pointer2 & 3) << 6 | byte2 & 0x3f));\n                outputPointer = (undefined8 *)((long)outputPointer + 6);\n                goto LAB_00102a27;\n              default:\n                tempVariable4 = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)pointer2 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  tempVariable4 = 3;\nLAB_00102a62:\n                  for (tempVariable1 = (ulong)tempVariable4; tempVariable1 != 0; tempVariable1 = tempVariable1 - 1) {\n                    *(undefined *)outputPointer = *(undefined *)pointer2;\n                    pointer2 = (undefined8 *)((long)pointer2 + (ulong)flag * -2 + 1);\n                    outputPointer = (undefined8 *)((long)outputPointer + (ulong)flag * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  tempVariable3 = 3;\nLAB_00102917:\n                  tempVariable2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    tempVariable2 = 0x3c;\n                  }\n                  sprintf((char *)outputString,\"%c\",tempVariable2);\n                  *(undefined *)((long)outputString + 3) = 0;\n                  outputPointer = (undefined8 *)(tempVariable3 + (long)pointer2);\n                  *(undefined2 *)((long)outputString + 1) = 0x7830;\n                  tempPointer = (char *)((long)outputString + 3);\n                  do {\n                    innerTempString = tempPointer;\n                    byte1 = *(byte *)pointer2;\n                    pointer2 = (undefined8 *)((long)pointer2 + 1);\n                    sprintf(innerTempString,\"%02x\",(ulong)byte1);\n                    tempPointer = innerTempString + 2;\n                  } while (pointer2 != outputPointer);\n                  tempVariable2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    tempVariable2 = 0x3e;\n                  }\n                  tempVariable4 = (uint)tempVariable3;\n                  sprintf(innerTempString + 2,\"%c\",tempVariable2);\n                  outputPointer = (undefined8 *)(innerTempString + 3);\n                  break;\n                case 4:\n                  returnValue = isatty(1);\n                  if (returnValue == 0) {\n                    byte2 = *(byte *)((long)pointer2 + 2);\n                  }\n                  else {\n                    *(undefined *)(outputString + 1) = 0;\n                    *outputString = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)pointer2 + 2);\n                    outputPointer = outputString + 1;\n                  }\n                case 2:\n                  tempVariable4 = 3;\n                  sprintf((char *)outputPointer,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)pointer2 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)pointer2 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)pointer2 + 1) & 3) << 6 | byte2 & 0x3f));\n                  outputPointer = (undefined8 *)((long)outputPointer + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (returnValue = isatty(1), returnValue != 0)) {\n                    *(undefined4 *)outputPointer = 0x6d305b1b;\n                    outputPointer = (undefined8 *)((long)outputPointer + 4);\n                    *(undefined *)outputPointer = 0;\n                  }\n                  break;\n                default:\n                  tempVariable4 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)pointer2 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  tempVariable4 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  tempVariable3 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  returnValue = isatty(1);\n                  if (returnValue != 0) {\n                    *(undefined *)(outputString + 1) = 0;\n                    *outputString = 0x6d37343b31335b1b;\n                    outputPointer = outputString + 1;\n                  }\n                case 2:\n                  tempVariable4 = 4;\n                  returnValue = sprintf((char *)outputPointer,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)pointer2 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)pointer2 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointer2 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)pointer2 + 2) >> 2 & 0xfU));\n                  outputPointer = (undefined8 *)((long)outputPointer + (long)returnValue);\n                  goto LAB_00102a27;\n                default:\n                  tempVariable4 = 4;\n                }\n              }\n            }\n            tempVariable1 = (ulong)(uint)((int)outputPointer - (int)outputString);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)outputString = byte1;\n            tempVariable4 = 1;\n            tempVariable1 = 1;\n          }\n          outputString = (undefined8 *)((long)outputString + tempVariable1);\n          pointer2 = (undefined8 *)((long)pointer1 + (ulong)(tempVariable4 - 1));\n        }\n      }\n      else {\n        *(undefined *)outputString = 0x5e;\n        *(byte *)((long)outputString + 1) = byte1 + 0x40;\n        outputString = (undefined8 *)((long)outputString + 2);\n        pointer2 = pointer1;\n      }\n    }\n    *(undefined *)outputString = 0;\n  }\nLAB_0010485e:\n  outputString = (undefined8 *)0x0;\n  if ((((framePointer != 0) && (*(long *)(framePointer + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((tempPointer = (char *)(**(code **)(*(long *)(functionPointer + 8) + 0x220))\n                                  (functionPointer,*(long *)(framePointer + 0x10),0,\n                                   (long)&stack0x00000038 + 7), tempPointer != (char *)0x0 &&\n      (*tempPointer != '\\0')))) {\n    constantPointer = &DAT_001071e0;\n    if ((extraArgument._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(framePointer + 0x10) + 0x20) != 0x10c2a8)) {\n      constantPointer = &DAT_001071df;\n    }\n    outputString = (undefined8 *)reconcat(0,reallocedString,constantPointer,tempPointer,0);\n    reallocedString = outputString;\n  }\n  printf(formatString,reallocedString);\n  if (outputFlag != (undefined *)0x0) {\n    *outputFlag = 0x40;\n  }\n  free(outputString);\n  return;\n}\n\n",
            "called": [
                "FUN_001047d0",
                "isatty",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_encoded_string_0010268b"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "calculate_result_00103bec",
                "iVar1": "negativeResult",
                "in_RAX": "inputValue",
                "auVar2": "resultArray"
            },
            "code": "\nundefined  [16] calculateResult_00103bec(void)\n\n{\n  int negativeResult;\n  undefined8 inputValue;\n  undefined resultArray [16];\n  \n  negativeResult = FUN_00105050();\n  resultArray._0_4_ = -negativeResult;\n  resultArray._4_4_ = 0;\n  resultArray._8_8_ = inputValue;\n  return resultArray;\n}\n\n",
            "called": [
                "FUN_00105050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00103bec"
        },
        "bfd_get_next_mapent": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_next_mapent"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "message",
                "param_2": "args",
                "_stdout": "stdout",
                "_stderr": "stderr"
            },
            "code": "\n\n\nvoid printErrorMessage_001063a0(char *message,__gnuc_va_list args)\n\n{\n  fflush(stdout);\n  fprintf(stderr,\"%s: \",DAT_0010b820);\n  vfprintf(stderr,message,args);\n  putc(10,stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "fprintf",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "FUN_00106400",
                "FUN_00106300"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "reverse_and_print_string_00102739",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "int1",
                "sVar5": "size",
                "pcVar6": "pointer1",
                "puVar7": "ptr2",
                "pcVar8": "pointer2",
                "__ptr": "ptr3",
                "uVar9": "ulong1",
                "uVar10": "ulong2",
                "puVar11": "ptr4",
                "unaff_RBP": "long1",
                "puVar12": "ptr5",
                "unaff_R13": "ptr6",
                "lVar13": "long2",
                "uVar14": "uint1",
                "unaff_R14": "pointer3",
                "unaff_R15": "long3",
                "bVar15": "byte3",
                "__s": "ptr7",
                "in_stack_00000038": "stackVar"
            },
            "code": "\n\n\nvoid reverseAndPrintString_00102739(void)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int int1;\n  size_t size;\n  char *pointer1;\n  undefined8 *ptr2;\n  char *pointer2;\n  undefined8 *ptr3;\n  ulong ulong1;\n  undefined8 ulong2;\n  undefined *ptr4;\n  long long1;\n  undefined8 *ptr5;\n  undefined8 *ptr6;\n  long long2;\n  uint uint1;\n  char *pointer3;\n  long long3;\n  byte byte3;\n  char *ptr7;\n  undefined8 stackVar;\n  \n  byte3 = 0;\n  ptr5 = ptr6;\n  if (*(int *)(*(long *)(long3 + 8) + 8) != 5) {\n    if (DAT_0010b814 != 0) {\n      pointer1 = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    pointer1 = (char *)0x0;\n    if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      ptr3 = (undefined8 *)0x0;\n    }\n    else {\n      ptr3 = (undefined8 *)0x0;\n      if (ptr6 != (undefined8 *)0x0) goto LAB_0010269d;\n      ptr3 = (undefined8 *)0x0;\n      ptr6 = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  pointer1 = strchr((char *)ptr6,0x40);\n  if (pointer1 == (char *)0x0) {\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) {\n      if (long1 == 0) {\n        ptr3 = (undefined8 *)0x0;\n        printf(pointer3);\n      }\n      else {\n        if (*(long *)(long1 + 0x10) != 0) {\n          FUN_001047d0();\n          return;\n        }\n        ptr3 = (undefined8 *)0x0;\n        printf(pointer3);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    ptr5 = ptr6;\n    ptr3 = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)ptr5;\n      if (byte1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (ptr5 = (undefined8 *)((long)ptr5 + 1), byte1 < 0xc0));\n    size = strlen((char *)ptr6);\n    ptr5 = DAT_0010b790;\n    if (_DAT_0010b798 < size * 9) {\n      free(DAT_0010b790);\n      size = strlen((char *)ptr6);\n      _DAT_0010b798 = size * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      ptr5 = DAT_0010b790;\n    }\n    while( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)ptr6;\n      ptr1 = (undefined8 *)((long)ptr6 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)ptr5 = byte1;\n          ptr5 = (undefined8 *)((long)ptr5 + 1);\n          ptr6 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr6 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = ptr5;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uint1 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long2 = 2;\n                goto LAB_00102917;\n              case 4:\n                int1 = isatty(1);\n                if (int1 == 0) {\n                  byte2 = *(byte *)((long)ptr6 + 1);\n                }\n                else {\n                  *(undefined *)(ptr5 + 1) = 0;\n                  *ptr5 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr6 + 1);\n                  ptr2 = ptr5 + 1;\n                }\n              case 2:\n                uint1 = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr6 >> 2 & 7)\n                        ,(ulong)((*(byte *)ptr6 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint1 = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr6 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint1 = 3;\nLAB_00102a62:\n                  for (ulong1 = (ulong)uint1; ulong1 != 0; ulong1 = ulong1 - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr6;\n                    ptr6 = (undefined8 *)((long)ptr6 + (ulong)byte3 * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long2 = 3;\nLAB_00102917:\n                  ulong2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong2 = 0x3c;\n                  }\n                  sprintf((char *)ptr5,\"%c\",ulong2);\n                  *(undefined *)((long)ptr5 + 3) = 0;\n                  ptr2 = (undefined8 *)(long2 + (long)ptr6);\n                  *(undefined2 *)((long)ptr5 + 1) = 0x7830;\n                  pointer2 = (char *)((long)ptr5 + 3);\n                  do {\n                    ptr7 = pointer2;\n                    byte1 = *(byte *)ptr6;\n                    ptr6 = (undefined8 *)((long)ptr6 + 1);\n                    sprintf(ptr7,\"%02x\",(ulong)byte1);\n                    pointer2 = ptr7 + 2;\n                  } while (ptr6 != ptr2);\n                  ulong2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong2 = 0x3e;\n                  }\n                  uint1 = (uint)long2;\n                  sprintf(ptr7 + 2,\"%c\",ulong2);\n                  ptr2 = (undefined8 *)(ptr7 + 3);\n                  break;\n                case 4:\n                  int1 = isatty(1);\n                  if (int1 == 0) {\n                    byte2 = *(byte *)((long)ptr6 + 2);\n                  }\n                  else {\n                    *(undefined *)(ptr5 + 1) = 0;\n                    *ptr5 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr6 + 2);\n                    ptr2 = ptr5 + 1;\n                  }\n                case 2:\n                  uint1 = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr6 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr6 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr6 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (int1 = isatty(1), int1 != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uint1 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)ptr6 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint1 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long2 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  int1 = isatty(1);\n                  if (int1 != 0) {\n                    *(undefined *)(ptr5 + 1) = 0;\n                    *ptr5 = 0x6d37343b31335b1b;\n                    ptr2 = ptr5 + 1;\n                  }\n                case 2:\n                  uint1 = 4;\n                  int1 = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr6 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr6 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr6 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr6 + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)int1);\n                  goto LAB_00102a27;\n                default:\n                  uint1 = 4;\n                }\n              }\n            }\n            ulong1 = (ulong)(uint)((int)ptr2 - (int)ptr5);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)ptr5 = byte1;\n            uint1 = 1;\n            ulong1 = 1;\n          }\n          ptr5 = (undefined8 *)((long)ptr5 + ulong1);\n          ptr6 = (undefined8 *)((long)ptr1 + (ulong)(uint1 - 1));\n        }\n      }\n      else {\n        *(undefined *)ptr5 = 0x5e;\n        *(byte *)((long)ptr5 + 1) = byte1 + 0x40;\n        ptr5 = (undefined8 *)((long)ptr5 + 2);\n        ptr6 = ptr1;\n      }\n    }\n    *(undefined *)ptr5 = 0;\n    ptr6 = ptr2;\n  }\n  else {\n    *pointer1 = '\\0';\n    if (DAT_0010b814 == 0) {\n      if (DAT_0010b7e0 == 0) goto LAB_00104794;\n      ptr3 = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)ptr6 == '\\0') ||\n       (ptr5 = (undefined8 *)bfd_demangle(), ptr5 == (undefined8 *)0x0)) {\n      if (DAT_0010b7e0 != 0) goto LAB_00102698;\n      ptr3 = (undefined8 *)0x0;\n    }\n    else {\n      ptr6 = ptr5;\n      ptr3 = ptr5;\n      if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((long1 != 0) && (*(long *)(long1 + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((pointer2 = (char *)(**(code **)(*(long *)(long3 + 8) + 0x220))\n                                  (long3,*(long *)(long1 + 0x10),0,\n                                   (long)&stack0x00000038 + 7), pointer2 != (char *)0x0 &&\n      (*pointer2 != '\\0')))) {\n    ptr4 = &DAT_001071e0;\n    if ((stackVar._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(long1 + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr4 = &DAT_001071df;\n    }\n    ptr3 = (undefined8 *)reconcat(ptr3,ptr6,ptr4,pointer2,0);\n    ptr6 = ptr3;\n  }\n  printf(pointer3,ptr6);\n  if (pointer1 != (char *)0x0) {\n    *pointer1 = '@';\n  }\nLAB_001047ba:\n  free(ptr3);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001047d0",
                "FUN_0010268b",
                "bfd_demangle",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "FUN_00104740"
            ],
            "imported": false,
            "current_name": "reverse_and_print_string_00102739"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "verify_checksum_00105050",
                "param_1": "data1",
                "param_2": "data2",
                "__s": "string1",
                "__s_00": "string2",
                "lVar3": "length1",
                "uVar2": "checksum1",
                "sVar5": "length_string1",
                "sVar6": "length_string2",
                "pcVar7": "substring1",
                "pcVar8": "substring2",
                "lVar9": "result1",
                "lVar10": "result2",
                "uVar11": "checksum_result",
                "uVar12": "checksum2",
                "uVar13": "checksum3",
                "uVar14": "checksum4",
                "uVar15": "pointer"
            },
            "code": "\nulong verifyChecksum_00105050(undefined8 data1,undefined8 data2)\n\n{\n  char cVar1;\n  ulong checksum1;\n  char *string1;\n  char *string2;\n  long length1;\n  uint uVar4;\n  size_t length_string1;\n  size_t length_string2;\n  char *substring1;\n  char *substring2;\n  long result1;\n  long result2;\n  ulong checksum_result;\n  ulong checksum2;\n  ulong checksum3;\n  ulong checksum4;\n  undefined8 pointer;\n  long unaff_R13;\n  bool bVar16;\n  \n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,data1,DAT_0010b770);\n  checksum_result = (ulong)DAT_0010b778;\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,checksum_result,data2,DAT_0010b768);\n  if ((result1 != 0) && (result2 != 0)) {\n    length1 = *(long *)(result2 + 0x20);\n    if (*(long *)(result1 + 0x20) == 0x10c2a8) {\n      checksum_result = 0xffffffff;\n      if (length1 == 0x10c2a8) {\nLAB_001050fa:\n        checksum_result = FUN_00104fa0(data1,data2);\n        return checksum_result;\n      }\n    }\n    else if (length1 == 0x10c2a8) {\n      checksum_result = 1;\n    }\n    else {\n      checksum3 = *(long *)(result1 + 0x10) + *(long *)(*(long *)(result1 + 0x20) + 0x30);\n      checksum_result = *(long *)(result2 + 0x10) + *(long *)(length1 + 0x30);\n      if (checksum3 == checksum_result) goto LAB_001050fa;\n      checksum_result = (ulong)(-(uint)(checksum3 < checksum_result) | 1);\n    }\n    return checksum_result;\n  }\n  pointer = *DAT_0010b780;\n  FUN_00106530();\n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,pointer,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,checksum_result,DAT_0010b768);\n  if ((result1 == 0) || (unaff_R13 = result2, result2 == 0)) {\n    result2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  checksum3 = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  checksum1 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  checksum4 = *(long *)(result1 + 0x10) + checksum3;\n  checksum2 = *(long *)(unaff_R13 + 0x10) + checksum1;\n  bVar16 = checksum4 < checksum2;\n  if ((checksum4 != checksum2) || (bVar16 = checksum3 < checksum1, checksum3 != checksum1)) {\n    return (ulong)(-(uint)bVar16 | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(unaff_R13 + 8);\n  length_string1 = strlen(string1);\n  length_string2 = strlen(string2);\n  substring1 = strstr(string1,\"gnu_compiled\");\n  if (substring1 == (char *)0x0) {\n    substring2 = strstr(string1,\"gcc2_compiled\");\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if ((substring1 == (char *)0x0) && (substring1 = strstr(string2,\"gcc2_compiled\"), substring1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (substring2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if (substring1 == (char *)0x0) {\n      substring2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (substring2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uVar4 = *(uint *)(unaff_R13 + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((length_string1 < 3) || (string1[length_string1 - 2] != '.')) {\n      if (uVar4 != 0) {\n        return 1;\n      }\n      if ((length_string2 < 3) || (string2[length_string2 - 2] != '.')) goto LAB_00103202;\n      bVar16 = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = string1[length_string1 - 1];\n    bVar16 = cVar1 == 'o' || cVar1 == 'a';\n    if (uVar4 == 0) {\n      if ((length_string2 < 3) || (string2[length_string2 - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (uVar4 != 0) goto LAB_00103202;\n    if (length_string2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[length_string2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    bVar16 = true;\nLAB_001031e7:\n    if ((string2[length_string2 - 1] != 'o') && (string2[length_string2 - 1] != 'a')) {\n      if (bVar16) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!bVar16) {\n    return 1;\n  }\nLAB_00103202:\n  checksum_result = FUN_00104fa0(pointer,checksum_result);\n  return checksum_result;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "FUN_00102fc3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "FUN_00103bec"
            ],
            "imported": false,
            "current_name": "verify_checksum_00105050"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "process_function_001049c0",
                "pcVar1": "charPointer",
                "pcVar2": "functionPointer",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "ulongVar",
                "lVar7": "longVar",
                "puVar8": "pointerVar1",
                "lVar9": "longVar1",
                "puVar10": "pointerVar2",
                "unaff_RBX": "registerBX",
                "__ptr": "registerPtr",
                "unaff_RBP": "registerBP",
                "puVar11": "pointerVar3",
                "puVar12": "pointerVar4",
                "puVar13": "pointerVar5",
                "in_R8": "registerR8",
                "puVar14": "pointerVar6",
                "puVar15": "pointerVar7",
                "unaff_R12": "registerR12",
                "unaff_R13": "registerR13",
                "unaff_R14": "registerR14",
                "unaff_R15": "registerR15",
                "bVar16": "boolVar",
                "bVar17": "byteVar",
                "unaff_retaddr": "retAddress",
                "uVar18": "uintVar2",
                "in_stack_00000008": "stackVar1",
                "in_stack_00000010": "stackVar2",
                "in_stack_00000018": "stackVar3",
                "in_stack_00000038": "stackVar4",
                "in_stack_00000040": "stackVar5",
                "in_stack_00000048": "stackVar6"
            },
            "code": "\nvoid processFunction_001049c0(void)\n\n{\n  char *charPointer;\n  code *functionPointer;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 ulongVar;\n  long longVar;\n  undefined8 *pointerVar1;\n  long longVar1;\n  undefined8 *pointerVar2;\n  undefined8 *registerBX;\n  undefined8 *registerPtr;\n  undefined8 *registerBP;\n  undefined8 *pointerVar3;\n  undefined8 *pointerVar4;\n  undefined8 *registerR8;\n  undefined8 *pointerVar5;\n  undefined8 *in_R9;\n  undefined8 *pointerVar6;\n  undefined8 *pointerVar7;\n  undefined8 *registerR12;\n  undefined8 *registerR13;\n  undefined8 *registerR14;\n  undefined8 *registerR15;\n  bool boolVar;\n  byte byteVar;\n  ulong retAddress;\n  ulong uintVar2;\n  undefined8 stackVar1;\n  undefined8 *stackVar2;\n  undefined8 *stackVar3;\n  undefined8 stackVar4;\n  void *stackVar5;\n  undefined8 *stackVar6;\n  \n  byteVar = 0;\n  do {\n    registerBX = (undefined8 *)((long)registerBX + (long)registerR14);\nLAB_001049c3:\n    do {\n      do {\n        registerR13 = (undefined8 *)((long)registerR13 + (long)registerR14);\n        pointerVar7 = registerR12;\n        pointerVar4 = registerBP;\n        if (registerR12 <= registerR13) goto LAB_00104b15;\nLAB_001049cf:\n        pointerVar1 = (undefined8 *)\n                 (**(code **)(registerBP[1] + 0x270))\n                           (registerBP,retAddress & 0xffffffff,registerR13,registerR15);\n        pointerVar3 = registerBP;\n        pointerVar4 = registerR13;\n        pointerVar7 = registerR15;\n        if (pointerVar1 == (undefined8 *)0x0) goto LAB_00102eb0;\n        charPointer = (char *)pointerVar1[1];\n        if (((charPointer == (char *)0x0) || (*charPointer != '_')) || (charPointer[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintVar = (uint)(pointerVar1[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintVar != 0) goto LAB_00104a2d;\n          registerR13 = (undefined8 *)((long)registerR13 + (long)registerR14);\n          pointerVar7 = registerR12;\n          pointerVar4 = registerBP;\n          if (registerR12 <= registerR13) {\nLAB_00104b15:\n            registerBX = (undefined8 *)((long)registerBX - (long)stackVar3);\n            if (registerR14 == (undefined8 *)0x8) {\n              longVar1 = pointerVar4[1];\n              pointerVar3 = (undefined8 *)((long)registerBX + 7);\n              if (-1 < (long)registerBX) {\n                pointerVar3 = registerBX;\n              }\n              registerR8 = (undefined8 *)(ulong)DAT_0010b800;\n              functionPointer = *(code **)(longVar1 + 0x208);\n              pointerVar3 = (undefined8 *)((long)pointerVar3 >> 3);\n            }\n            else {\n              pointerVar3 = (undefined8 *)((long)registerBX / (long)registerR14);\n              longVar1 = pointerVar4[1];\n              functionPointer = *(code **)(longVar1 + 0x208);\n            }\n            registerBP = pointerVar4;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = pointerVar4;\n              DAT_0010b770 = (undefined8 *)(*functionPointer)(pointerVar4);\n              DAT_0010b768 = (undefined8 *)(**(code **)(pointerVar4[1] + 0x208))(pointerVar4);\n              registerBX = stackVar6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                FUN_00106530(*pointerVar4);\n                registerPtr = registerR15;\n                goto LAB_00102d8e;\n              }\n              registerR12 = (undefined8 *)(ulong)stackVar4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                uintVar2 = (ulong)(DAT_0010b80c != 0);\n                qsort(stackVar6,(size_t)pointerVar3,(size_t)registerR12,FUN_00102fd2);\n                pointerVar7 = (undefined8 *)xmalloc((long)pointerVar3 << 4);\n                pointerVar5 = DAT_0010b770;\n                registerBP = DAT_0010b768;\n                registerR14 = (undefined8 *)((long)pointerVar3 * (long)registerR12 + (long)registerBX);\n                pointerVar1 = DAT_0010b770;\n                in_R9 = DAT_0010b768;\n                if (registerR14 <= registerBX) goto LAB_00102ec2;\n                pointerVar3 = (undefined8 *)\n                          (**(code **)(pointerVar4[1] + 0x270))(pointerVar4,uintVar2 & 0xffffffff,registerBX);\n                registerPtr = registerBX;\n                registerR8 = registerR12;\n                stackVar2 = pointerVar7;\n                if (pointerVar3 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stackVar6,(size_t)pointerVar3,(size_t)registerR12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVar1 = pointerVar4[1];\n            }\n            registerPtr = (undefined8 *)0x0;\n            do {\n              pointerVar4 = stackVar6;\n              pointerVar1 = (undefined8 *)(ulong)DAT_0010b7f8;\n              registerR14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointerVar7 = (undefined8 *)(**(code **)(longVar1 + 0x208))(registerBP);\n                if (pointerVar7 == (undefined8 *)0x0) goto LAB_00102ed2;\n                registerBX = registerPtr + (long)pointerVar3 * 2;\n                pointerVar3 = registerPtr;\n                do {\n                  if (registerBX <= pointerVar3) {\nLAB_00104c75:\n                    if (stackVar5 == (void *)0x0) {\n                      free(stackVar6);\n                      free(registerPtr);\n                      return;\n                    }\n                    free(stackVar5);\n                    free(stackVar6);\n                    free(registerPtr);\n                    return;\n                  }\n                  pointerVar1 = pointerVar7;\n                  longVar1 = (**(code **)(registerBP[1] + 0x270))(registerBP,registerR14,*pointerVar3);\n                  if (longVar1 == 0) {\n                    FUN_00106530(*registerBP,0);\nLAB_00102ed2:\n                    pointerVar4 = (undefined8 *)*registerBP;\n                    FUN_00106530();\n                    pointerVar5 = registerR8;\n                    pointerVar6 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  pointerVar4 = pointerVar3 + 1;\n                  pointerVar3 = pointerVar3 + 2;\n                  FUN_00105110(registerBP,longVar1,*pointerVar4,stackVar1);\n                } while( true );\n              }\n              registerR12 = (undefined8 *)(ulong)stackVar4._4_4_;\n              registerR15 = (undefined8 *)(**(code **)(longVar1 + 0x208))(registerBP);\n              if (registerR15 == (undefined8 *)0x0) {\n                FUN_00106530(*registerBP);\n                pointerVar4 = registerR12;\n                if (DAT_0010b80c == 0) {\n                  longVar1 = (**(code **)(registerBP[1] + 0x350))(registerBP);\n                  pointerVar3 = stackVar6;\n                  pointerVar7 = registerR12;\n                  if (longVar1 < 1) {\n                    pointerVar1 = (undefined8 *)0x0;\n                    registerBX = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    registerBX = (undefined8 *)xmalloc();\n                    pointerVar1 = (undefined8 *)(**(code **)(registerBP[1] + 0x358))(registerBP,registerBX);\n                    pointerVar4 = pointerVar7;\n                    if ((long)pointerVar1 < 0) {\n                      pointerVar4 = (undefined8 *)*registerBP;\n                      pointerVar3 = (undefined8 *)FUN_00106530(pointerVar4,pointerVar7);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointerVar1 = registerR12;\n                  registerBX = stackVar6;\n                  pointerVar3 = (undefined8 *)0x0;\n                  pointerVar7 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                registerR8 = registerBX;\n                longVar1 = (**(code **)(registerBP[1] + 0x360))(registerBP,pointerVar7,pointerVar3,pointerVar1);\n                registerR12 = pointerVar4;\n                if (0 < longVar1) {\n                  registerR12 = (undefined8 *)((long)pointerVar4 + longVar1);\n                  stackVar6 = (undefined8 *)xrealloc(stackVar6);\n                  longVar = 0;\n                  do {\n                    stackVar6[(long)((long)pointerVar4 + longVar)] =\n                         (void *)(longVar * 0x30 + (long)stackVar5);\n                    longVar = longVar + 1;\n                  } while (longVar1 != longVar);\n                  stackVar6[(long)((long)pointerVar4 + longVar1)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (registerBX != (undefined8 *)0x0)) {\n                  free(registerBX);\n                }\n                if ((*(byte *)((long)registerBP + 0x4a) & 0x10) != 0) {\n                  registerBX = (undefined8 *)*registerBP;\n                  DAT_0010b230 = '\\0';\n                  ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(ulongVar);\n                }\n                registerR14 = (undefined8 *)(ulong)stackVar4._4_4_;\n                boolVar = DAT_0010b80c != 0;\n                pointerVar3 = (undefined8 *)(ulong)boolVar;\n                pointerVar1 = stackVar6;\n                stackVar3 = stackVar6;\n                registerR15 = (undefined8 *)(**(code **)(registerBP[1] + 0x208))(registerBP);\n                if (registerR15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointerVar3 = (undefined8 *)((long)pointerVar3 * (long)registerR12 + (long)pointerVar4);\n                registerBX = pointerVar4;\n                while( true ) {\n                  if (pointerVar3 <= registerBX) goto LAB_00104c75;\n                  pointerVar1 = registerR15;\n                  longVar1 = (**(code **)(registerBP[1] + 0x270))(registerBP,registerR14,registerBX);\n                  if (longVar1 == 0) break;\n                  registerBX = (undefined8 *)((long)registerBX + (long)registerR12);\n                  FUN_00105110(registerBP,longVar1,0,stackVar1);\n                }\n                FUN_00106530(*registerBP,0);\n              }\n              FUN_00106530(*registerBP);\n              pointerVar4 = registerBP;\n              pointerVar7 = registerR15;\nLAB_00102eb0:\n              FUN_00106530(*pointerVar3);\nLAB_00102eb9:\n              FUN_00106530(*pointerVar4);\nLAB_00102ec2:\n              pointerVar3 = (undefined8 *)0x0;\n              registerPtr = registerBX;\n              registerR8 = registerR12;\n              pointerVar5 = pointerVar1;\n              registerBP = in_R9;\n              stackVar2 = pointerVar7;\nLAB_00104e35:\n              while (in_R9 = pointerVar5, registerPtr < registerR14) {\n                registerBX = (undefined8 *)((long)registerPtr + (long)registerR8);\n                if (registerBX < registerR14) {\n                  pointerVar1 = registerBP;\n                  pointerVar5 = registerR8;\n                  pointerVar6 = in_R9;\n                  pointerVar2 = (undefined8 *)(**(code **)(pointerVar4[1] + 0x270))();\n                  if (pointerVar2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = pointerVar6;\n                    registerR8 = pointerVar5;\n                    pointerVar4 = (undefined8 *)*pointerVar4;\n                    pointerVar2 = (undefined8 *)FUN_00106530();\n                  }\n                  else {\n                    pointerVar1 = (undefined8 *)pointerVar3[4];\n                    if ((*(uint *)(pointerVar3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar1 = pointerVar3[2];\nLAB_00102ee7:\n                  if (pointerVar1 == (undefined8 *)pointerVar2[4]) {\n                    longVar1 = pointerVar2[2] - longVar1;\n                    pointerVar5 = registerBP;\n                    pointerVar6 = registerPtr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar1 = pointerVar1[8] - longVar1;\n                  pointerVar5 = registerBP;\n                  pointerVar6 = registerPtr;\n                }\n                else {\n                  pointerVar1 = (undefined8 *)pointerVar3[4];\n                  if ((*(uint *)(pointerVar3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar1 = pointerVar3[2];\n                    pointerVar2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointerVar2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointerVar5 = registerBP;\n                  pointerVar6 = registerPtr;\n                  if (*(int *)(pointerVar4[1] + 8) == 5) {\n                    longVar1 = pointerVar3[7];\n                  }\n                  else {\n                    longVar1 = pointerVar3[2];\n                    if ((*(byte *)((long)pointerVar1 + 0x25) & 0x10) == 0) {\n                      if (registerBX < registerR14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointerVar3 = pointerVar2;\n                registerPtr = registerBX;\n                registerBP = in_R9;\n                if (longVar1 != 0) {\n                  *pointerVar7 = pointerVar6;\n                  pointerVar7[1] = longVar1;\n                  pointerVar7 = pointerVar7 + 2;\n                }\n              }\n              pointerVar3 = (undefined8 *)((long)pointerVar7 - (long)stackVar2 >> 4);\n              qsort(stackVar2,(size_t)pointerVar3,0x10,FUN_00103533);\n              longVar1 = pointerVar4[1];\n              registerBX = registerPtr;\n              registerBP = pointerVar4;\n              registerPtr = stackVar2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVar = strcmp(charPointer + (charPointer[2] == '_'),\"__gnu_lto_slim\");\n        stackVar2 = pointerVar1;\n        if (intVar == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stackVar2 = (undefined8 *)*registerBP;\n            DAT_0010b230 = '\\0';\n            ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            FUN_00106400(ulongVar,stackVar2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uintVar = (*(uint *)(pointerVar1 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointerVar1 + 3) & 0x800082) == 0) && (pointerVar1[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointerVar1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n          if ((pointerVar1[4] != 0x10c2a8) && (pointerVar1[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointerVar1 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        charVar = (**(code **)(registerBP[1] + 0x230))(registerBP);\n        if (charVar != '\\0') {\n          FUN_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointerVar1[4] == 0x10c2a8);\nLAB_00104cba:\n    charVar = (**(code **)(registerBP[1] + 0x230))(registerBP);\n    if (charVar != '\\0') {\n      FUN_00102c19();\n      return;\n    }\nLAB_00104a7b:\n    if (registerBX != registerR13) {\n      if (registerR14 == (undefined8 *)0x8) {\n        *registerBX = *registerR13;\n        processFunction_001049c0();\n        return;\n      }\n      for (; registerR14 != (undefined8 *)0x0; registerR14 = (undefined8 *)((long)registerR14 + -1)) {\n        *(undefined *)registerBX = *(undefined *)registerR13;\n        registerR13 = (undefined8 *)((long)registerR13 + (ulong)byteVar * -2 + 1);\n        registerBX = (undefined8 *)((long)registerBX + (ulong)byteVar * -2 + 1);\n      }\n      processFunction_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointerVar7 = (undefined8 *)((long)registerR12 * (long)registerR14);\n  registerR12 = (undefined8 *)((long)stackVar3 + (long)pointerVar7);\n  registerBX = stackVar3;\n  pointerVar4 = registerBP;\n  if (stackVar3 < registerR12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  retAddress = (ulong)boolVar;\n  registerR13 = stackVar3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_function_001049c0"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "display_symbol_options_00103ca0",
                "param_1": "file",
                "param_2": "exitCode",
                "lVar1": "localeVar1",
                "iVar2": "totalLength",
                "iVar3": "length",
                "pcVar4": "localizedString",
                "lVar5": "loopVar",
                "sVar6": "stringLength",
                "__ptr": "bfdTargetList",
                "plVar7": "ptr",
                "ppcVar8": "symbolDemanglers",
                "pcVar9": "symbolSeparator",
                "local_3c": "localVar3c"
            },
            "code": "\nvoid displaySymbolOptions_00103ca0(FILE *file,int exitCode)\n\n{\n  long localeVar1;\n  int totalLength;\n  int length;\n  char *localizedString;\n  long loopVar;\n  size_t stringLength;\n  long *bfdTargetList;\n  long *ptr;\n  char **symbolDemanglers;\n  char *symbolSeparator;\n  uint localVar3c;\n  \n  localeVar1 = DAT_0010b820;\n  localizedString = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(file,localizedString,localeVar1);\n  localizedString = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*localizedString == ' ') {\n    localeVar1 = 1;\n    do {\n      loopVar = localeVar1;\n      localeVar1 = loopVar + 1;\n    } while (localizedString[loopVar] == ' ');\n    localVar3c = (uint)loopVar;\n  }\n  else {\n    localVar3c = 0;\n  }\n  totalLength = fprintf(file,\"%s\",localizedString);\n  symbolSeparator = \"\";\n  for (symbolDemanglers = (char **)&libiberty_demanglers; *symbolDemanglers != (char *)0x0; symbolDemanglers = symbolDemanglers + 3) {\n    stringLength = strlen(*symbolDemanglers);\n    if (0x4a < (long)totalLength + stringLength) {\n      fprintf(file,\"%.1s\\n\",symbolSeparator);\n      symbolSeparator = \"\";\n      totalLength = fprintf(file,\"%.*s\",(ulong)localVar3c,localizedString);\n    }\n    length = fprintf(file,\"%s\\\"%s\\\"\",symbolSeparator,*symbolDemanglers);\n    totalLength = totalLength + length;\n    symbolSeparator = \", \";\n  }\n  fputc(10,file);\n  localizedString = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(file,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(file,localizedString);\n  localeVar1 = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    localizedString = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,localizedString);\n  }\n  else {\n    localizedString = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,localizedString,localeVar1);\n  }\n  bfdTargetList = (long *)bfd_target_list();\n  ptr = bfdTargetList;\n  while( true ) {\n    localeVar1 = *ptr;\n    ptr = ptr + 1;\n    if (localeVar1 == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(bfdTargetList);\n  if (exitCode == 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(file,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "bfd_target_list",
                "exit",
                "fseek",
                "dcgettext",
                "free",
                "fputc",
                "fprintf",
                "strlen",
                "FUN_00102450"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "display_symbol_options_00103ca0"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "process_lto_object_00104d5b",
                "in_RCX": "functionPointers",
                "param_7": "functionPointer",
                "param_8": "sortedPointersBuffer",
                "param_9": "incrementValue",
                "param_13": "comparisonData",
                "param_14": "objectPointersBuffer"
            },
            "code": "\nvoid processLTOObject_00104d5b(void)\n\n{\n  char *pcVar1;\n  code *pcVar2;\n  char cVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  undefined8 *puVar7;\n  long lVar8;\n  long lVar9;\n  undefined8 *puVar10;\n  undefined8 *functionPointers;\n  undefined8 *unaff_RBX;\n  undefined8 *__ptr;\n  undefined8 *puVar11;\n  undefined8 *unaff_RBP;\n  undefined8 *puVar12;\n  undefined8 *in_R8;\n  undefined8 *puVar13;\n  undefined8 *in_R9;\n  undefined8 *puVar14;\n  undefined8 *puVar15;\n  undefined8 *unaff_R12;\n  undefined8 *unaff_R13;\n  undefined8 *unaff_R14;\n  undefined8 *unaff_R15;\n  bool bVar16;\n  byte bVar17;\n  ulong unaff_retaddr;\n  ulong uVar18;\n  undefined8 functionPointer;\n  undefined8 *sortedPointersBuffer;\n  undefined8 *incrementValue;\n  undefined8 in_stack_00000038;\n  void *comparisonData;\n  undefined8 *objectPointersBuffer;\n  \n  bVar17 = 0;\n  do {\n    if ((functionPointers[4] != 0x10c2a8) && (functionPointers[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      unaff_R13 = (undefined8 *)((long)unaff_R13 + (long)unaff_R14);\n      puVar15 = unaff_R12;\n      puVar12 = unaff_RBP;\n      if (unaff_R12 <= unaff_R13) goto LAB_00104b15;\nLAB_001049cf:\n      functionPointers = (undefined8 *)\n               (**(code **)(unaff_RBP[1] + 0x270))\n                         (unaff_RBP,unaff_retaddr & 0xffffffff,unaff_R13,unaff_R15);\n      puVar11 = unaff_RBP;\n      puVar12 = unaff_R13;\n      puVar15 = unaff_R15;\n      if (functionPointers == (undefined8 *)0x0) goto LAB_00102eb0;\n      pcVar1 = (char *)functionPointers[1];\n      if (((pcVar1 == (char *)0x0) || (*pcVar1 != '_')) || (pcVar1[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        uVar5 = (uint)(functionPointers[4] == 0x10c2a8);\nLAB_00104af9:\n        if (uVar5 != 0) goto LAB_00104a2d;\n        unaff_R13 = (undefined8 *)((long)unaff_R13 + (long)unaff_R14);\n        puVar15 = unaff_R12;\n        puVar12 = unaff_RBP;\n        if (unaff_R12 <= unaff_R13) {\nLAB_00104b15:\n          unaff_RBX = (undefined8 *)((long)unaff_RBX - (long)incrementValue);\n          if (unaff_R14 == (undefined8 *)0x8) {\n            lVar9 = puVar12[1];\n            puVar11 = (undefined8 *)((long)unaff_RBX + 7);\n            if (-1 < (long)unaff_RBX) {\n              puVar11 = unaff_RBX;\n            }\n            in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n            pcVar2 = *(code **)(lVar9 + 0x208);\n            puVar11 = (undefined8 *)((long)puVar11 >> 3);\n          }\n          else {\n            puVar11 = (undefined8 *)((long)unaff_RBX / (long)unaff_R14);\n            lVar9 = puVar12[1];\n            pcVar2 = *(code **)(lVar9 + 0x208);\n          }\n          unaff_RBP = puVar12;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = puVar12;\n            DAT_0010b770 = (undefined8 *)(*pcVar2)(puVar12);\n            DAT_0010b768 = (undefined8 *)(**(code **)(puVar12[1] + 0x208))(puVar12);\n            unaff_RBX = objectPointersBuffer;\n            if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n              FUN_00106530(*puVar12);\n              __ptr = unaff_R15;\n              goto LAB_00102d8e;\n            }\n            unaff_R12 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              uVar18 = (ulong)(DAT_0010b80c != 0);\n              qsort(objectPointersBuffer,(size_t)puVar11,(size_t)unaff_R12,FUN_00102fd2);\n              puVar15 = (undefined8 *)xmalloc((long)puVar11 << 4);\n              puVar13 = DAT_0010b770;\n              unaff_RBP = DAT_0010b768;\n              unaff_R14 = (undefined8 *)((long)puVar11 * (long)unaff_R12 + (long)unaff_RBX);\n              functionPointers = DAT_0010b770;\n              in_R9 = DAT_0010b768;\n              if (unaff_R14 <= unaff_RBX) goto LAB_00102ec2;\n              puVar11 = (undefined8 *)\n                        (**(code **)(puVar12[1] + 0x270))(puVar12,uVar18 & 0xffffffff,unaff_RBX);\n              __ptr = unaff_RBX;\n              in_R8 = unaff_R12;\n              sortedPointersBuffer = puVar15;\n              if (puVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(objectPointersBuffer,(size_t)puVar11,(size_t)unaff_R12,\n                  (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n            lVar9 = puVar12[1];\n          }\n          __ptr = (undefined8 *)0x0;\n          do {\n            puVar12 = objectPointersBuffer;\n            puVar7 = (undefined8 *)(ulong)DAT_0010b7f8;\n            unaff_R14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              puVar15 = (undefined8 *)(**(code **)(lVar9 + 0x208))(unaff_RBP);\n              if (puVar15 == (undefined8 *)0x0) goto LAB_00102ed2;\n              unaff_RBX = __ptr + (long)puVar11 * 2;\n              puVar11 = __ptr;\n              do {\n                if (unaff_RBX <= puVar11) {\nLAB_00104c75:\n                  if (comparisonData != (void *)0x0) {\n                    free(comparisonData);\n                    free(objectPointersBuffer);\n                    free(__ptr);\n                    return;\n                  }\n                  free(objectPointersBuffer);\n                  free(__ptr);\n                  return;\n                }\n                puVar7 = puVar15;\n                lVar9 = (**(code **)(unaff_RBP[1] + 0x270))(unaff_RBP,unaff_R14,*puVar11);\n                if (lVar9 == 0) {\n                  FUN_00106530(*unaff_RBP,0);\nLAB_00102ed2:\n                  puVar12 = (undefined8 *)*unaff_RBP;\n                  FUN_00106530();\n                  puVar13 = in_R8;\n                  puVar14 = in_R9;\n                  goto LAB_00102edb;\n                }\n                puVar12 = puVar11 + 1;\n                puVar11 = puVar11 + 2;\n                FUN_00105110(unaff_RBP,lVar9,*puVar12,functionPointer);\n              } while( true );\n            }\n            unaff_R12 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            unaff_R15 = (undefined8 *)(**(code **)(lVar9 + 0x208))(unaff_RBP);\n            if (unaff_R15 == (undefined8 *)0x0) {\n              FUN_00106530(*unaff_RBP);\n              puVar12 = unaff_R12;\n              if (DAT_0010b80c == 0) {\n                lVar9 = (**(code **)(unaff_RBP[1] + 0x350))(unaff_RBP);\n                puVar11 = objectPointersBuffer;\n                puVar15 = unaff_R12;\n                if (lVar9 < 1) {\n                  puVar7 = (undefined8 *)0x0;\n                  unaff_RBX = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  unaff_RBX = (undefined8 *)xmalloc();\n                  puVar7 = (undefined8 *)(**(code **)(unaff_RBP[1] + 0x358))(unaff_RBP,unaff_RBX);\n                  puVar12 = puVar15;\n                  if ((long)puVar7 < 0) {\n                    puVar12 = (undefined8 *)*unaff_RBP;\n                    puVar11 = (undefined8 *)FUN_00106530(puVar12,puVar15);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                puVar7 = unaff_R12;\n                unaff_RBX = objectPointersBuffer;\n                puVar11 = (undefined8 *)0x0;\n                puVar15 = (undefined8 *)0x0;\n              }\n              in_R9 = &stack0x00000040;\n              in_R8 = unaff_RBX;\n              lVar9 = (**(code **)(unaff_RBP[1] + 0x360))(unaff_RBP,puVar15,puVar11,puVar7);\n              unaff_R12 = puVar12;\n              if (0 < lVar9) {\n                unaff_R12 = (undefined8 *)((long)puVar12 + lVar9);\n                objectPointersBuffer = (undefined8 *)xrealloc(objectPointersBuffer);\n                lVar8 = 0;\n                do {\n                  objectPointersBuffer[(long)puVar12 + lVar8] = (void *)(lVar8 * 0x30 + (long)comparisonData);\n                  lVar8 = lVar8 + 1;\n                } while (lVar9 != lVar8);\n                objectPointersBuffer[(long)puVar12 + lVar9] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (unaff_RBX != (undefined8 *)0x0)) {\n                free(unaff_RBX);\n              }\n              if ((*(byte *)((long)unaff_RBP + 0x4a) & 0x10) != 0) {\n                unaff_RBX = (undefined8 *)*unaff_RBP;\n                DAT_0010b230 = '\\0';\n                uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                FUN_00106400(uVar6);\n              }\n              unaff_R14 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              bVar16 = DAT_0010b80c != 0;\n              puVar11 = (undefined8 *)(ulong)bVar16;\n              functionPointers = objectPointersBuffer;\n              incrementValue = objectPointersBuffer;\n              unaff_R15 = (undefined8 *)(**(code **)(unaff_RBP[1] + 0x208))(unaff_RBP);\n              if (unaff_R15 != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              puVar11 = (undefined8 *)((long)puVar11 * (long)unaff_R12 + (long)puVar12);\n              unaff_RBX = puVar12;\n              while( true ) {\n                if (puVar11 <= unaff_RBX) goto LAB_00104c75;\n                functionPointers = unaff_R15;\n                lVar9 = (**(code **)(unaff_RBP[1] + 0x270))(unaff_RBP,unaff_R14,unaff_RBX);\n                if (lVar9 == 0) break;\n                unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)unaff_R12);\n                FUN_00105110(unaff_RBP,lVar9,0,functionPointer);\n              }\n              FUN_00106530(*unaff_RBP,0);\n            }\n            FUN_00106530(*unaff_RBP);\n            puVar12 = unaff_RBP;\n            puVar15 = unaff_R15;\nLAB_00102eb0:\n            FUN_00106530(*puVar11);\nLAB_00102eb9:\n            FUN_00106530(*puVar12);\nLAB_00102ec2:\n            puVar11 = (undefined8 *)0x0;\n            __ptr = unaff_RBX;\n            in_R8 = unaff_R12;\n            puVar13 = functionPointers;\n            unaff_RBP = in_R9;\n            sortedPointersBuffer = puVar15;\nLAB_00104e35:\n            while (in_R9 = puVar13, __ptr < unaff_R14) {\n              unaff_RBX = (undefined8 *)((long)__ptr + (long)in_R8);\n              if (unaff_RBX < unaff_R14) {\n                puVar7 = unaff_RBP;\n                puVar13 = in_R8;\n                puVar14 = in_R9;\n                puVar10 = (undefined8 *)(**(code **)(puVar12[1] + 0x270))();\n                if (puVar10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                  in_R9 = puVar14;\n                  in_R8 = puVar13;\n                  puVar12 = (undefined8 *)*puVar12;\n                  puVar10 = (undefined8 *)FUN_00106530();\n                }\n                else {\n                  puVar7 = (undefined8 *)puVar11[4];\n                  if ((*(uint *)(puVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                lVar9 = puVar11[2];\nLAB_00102ee7:\n                if (puVar7 == (undefined8 *)puVar10[4]) {\n                  lVar9 = puVar10[2] - lVar9;\n                  puVar13 = unaff_RBP;\n                  puVar14 = __ptr;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                lVar9 = puVar7[8] - lVar9;\n                puVar13 = unaff_RBP;\n                puVar14 = __ptr;\n              }\n              else {\n                puVar7 = (undefined8 *)puVar11[4];\n                if ((*(uint *)(puVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  lVar9 = puVar11[2];\n                  puVar10 = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                puVar10 = (undefined8 *)0x0;\nLAB_00104e95:\n                puVar13 = unaff_RBP;\n                puVar14 = __ptr;\n                if (*(int *)(puVar12[1] + 8) == 5) {\n                  lVar9 = puVar11[7];\n                }\n                else {\n                  lVar9 = puVar11[2];\n                  if ((*(byte *)((long)puVar7 + 0x25) & 0x10) == 0) {\n                    if (unaff_RBX < unaff_R14) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              puVar11 = puVar10;\n              __ptr = unaff_RBX;\n              unaff_RBP = in_R9;\n              if (lVar9 != 0) {\n                *puVar15 = puVar14;\n                puVar15[1] = lVar9;\n                puVar15 = puVar15 + 2;\n              }\n            }\n            puVar11 = (undefined8 *)((long)puVar15 - (long)sortedPointersBuffer >> 4);\n            qsort(sortedPointersBuffer,(size_t)puVar11,0x10,FUN_00103533);\n            lVar9 = puVar12[1];\n            unaff_RBX = __ptr;\n            unaff_RBP = puVar12;\n            __ptr = sortedPointersBuffer;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      iVar4 = strcmp(pcVar1 + (pcVar1[2] == '_'),\"__gnu_lto_slim\");\n      sortedPointersBuffer = functionPointers;\n      if (iVar4 == 0) {\n        if (DAT_0010b230 != '\\0') {\n          sortedPointersBuffer = (undefined8 *)*unaff_RBP;\n          DAT_0010b230 = '\\0';\n          uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          FUN_00106400(uVar6,sortedPointersBuffer);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        uVar5 = (*(uint *)(functionPointers + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(functionPointers + 3) & 0x800082) == 0) && (functionPointers[4] != 0x10c2a8)) &&\n         ((*(byte *)(functionPointers[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byte *)(functionPointers + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    cVar3 = (**(code **)(unaff_RBP[1] + 0x230))(unaff_RBP);\n    if (cVar3 != '\\0') {\n      FUN_00102c19();\n      return;\n    }\n  }\n  else {\n    if (functionPointers[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    cVar3 = (**(code **)(unaff_RBP[1] + 0x230))(unaff_RBP);\n    if (cVar3 != '\\0') {\n      FUN_00102c19();\n      return;\n    }\n  }\n  if (unaff_RBX != unaff_R13) {\n    if (unaff_R14 != (undefined8 *)0x8) {\n      for (; unaff_R14 != (undefined8 *)0x0; unaff_R14 = (undefined8 *)((long)unaff_R14 + -1)) {\n        *(undefined *)unaff_RBX = *(undefined *)unaff_R13;\n        unaff_R13 = (undefined8 *)((long)unaff_R13 + (ulong)bVar17 * -2 + 1);\n        unaff_RBX = (undefined8 *)((long)unaff_RBX + (ulong)bVar17 * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    *unaff_RBX = *unaff_R13;\n    FUN_001049c0();\n    return;\n  }\n  unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)unaff_R14);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  puVar15 = (undefined8 *)((long)unaff_R12 * (long)unaff_R14);\n  unaff_R12 = (undefined8 *)((long)incrementValue + (long)puVar15);\n  unaff_RBX = incrementValue;\n  puVar12 = unaff_RBP;\n  if (incrementValue < unaff_R12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unaff_retaddr = (ulong)bVar16;\n  unaff_R13 = incrementValue;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "qsort",
                "xmalloc",
                "free",
                "FUN_00106400",
                "FUN_00105110",
                "xrealloc",
                "FUN_00102fd2",
                "FUN_00103533",
                "strcmp",
                "dcgettext",
                "FUN_00104d5b",
                "FUN_00102c19",
                "FUN_001049c0",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_object_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_error_message_00106300",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "param9",
                "param_10": "errorCode10",
                "param_11": "errorCode11",
                "param_12": "errorCode12",
                "param_13": "errorCode13",
                "param_14": "errorCode14",
                "in_AL": "flag",
                "__arg": "errorArgs",
                "__format": "formatString",
                "local_d8": "numArgs",
                "local_d4": "localVar1",
                "local_d0": "localVar2",
                "local_c8": "localVar3",
                "local_b8": "localBuffer",
                "local_b0": "param10",
                "local_a8": "param11",
                "local_a0": "param12",
                "local_98": "param13",
                "local_90": "param14",
                "local_88": "errorCode1_copy",
                "local_78": "errorCode2_copy",
                "local_68": "errorCode3_copy",
                "local_58": "errorCode4_copy",
                "local_48": "errorCode5_copy",
                "local_38": "errorCode6_copy",
                "local_28": "errorCode7_copy",
                "local_18": "errorCode8_copy"
            },
            "code": "\n\n\nvoid printErrorMessage_00106300(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 undefined8 param9,undefined8 errorCode10,undefined8 errorCode11,undefined8 errorCode12,\n                 undefined8 errorCode13,undefined8 errorCode14)\n\n{\n  char flag;\n  undefined4 *errorArgs;\n  char *formatString;\n  undefined4 numArgs;\n  undefined4 localVar1;\n  undefined *localVar2;\n  undefined *localVar3;\n  undefined localBuffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 errorCode1_copy;\n  undefined4 errorCode2_copy;\n  undefined4 errorCode3_copy;\n  undefined4 errorCode4_copy;\n  undefined4 errorCode5_copy;\n  undefined4 errorCode6_copy;\n  undefined4 errorCode7_copy;\n  undefined4 errorCode8_copy;\n  \n  errorArgs = &numArgs;\n  if (flag != '\\0') {\n    errorCode1_copy = errorCode1;\n    errorCode2_copy = errorCode2;\n    errorCode3_copy = errorCode3;\n    errorCode4_copy = errorCode4;\n    errorCode5_copy = errorCode5;\n    errorCode6_copy = errorCode6;\n    errorCode7_copy = errorCode7;\n    errorCode8_copy = errorCode8;\n  }\n  localVar2 = &stack0x00000008;\n  numArgs = 8;\n  localVar3 = localBuffer;\n  localVar1 = 0x30;\n  param10 = errorCode10;\n  param11 = errorCode11;\n  param12 = errorCode12;\n  param13 = errorCode13;\n  param14 = errorCode14;\n  FUN_001063a0();\n  formatString = (char *)0x1;\n  xexit();\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010b820);\n  vfprintf(_stderr,formatString,errorArgs);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "FUN_0010370a",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_001053c0",
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "print_error_message_00106300"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_if_enabled_00102f7b",
                "param_1": "message"
            },
            "code": "\n\n\nvoid print_if_enabled_00102f7b(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_enabled_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "errorCode",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "unusedParameter"
            },
            "code": "\n\n\nvoid printErrorMessage_00106540(long errorCode)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 unusedParameter;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,errorCode,errorMessage,unusedParameter);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,unusedParameter);\n  return;\n}\n\n",
            "called": [
                "FUN_00103a78",
                "fflush",
                "bfd_get_error",
                "fprintf",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "FUN_001043d0",
                "FUN_00106530"
            ],
            "imported": false,
            "current_name": "print_error_message_00106540"
        }
    },
    "used_tokens": 135605,
    "layers": [
        [
            "FUN_00103c00",
            "FUN_0010370a",
            "FUN_00104370",
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00102fc3",
            "FUN_00103729",
            "FUN_00103573",
            "FUN_00105110",
            "FUN_00102fd2",
            "FUN_00102f9f",
            "FUN_00103a66",
            "FUN_001035a2",
            "FUN_00103463",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_001048e0",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_0010249f",
            "FUN_001043d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_00104fa0",
            "FUN_001064a0",
            "FUN_001054d0",
            "FUN_001053b0",
            "FUN_001055f0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00104740",
            "FUN_00106400",
            "FUN_00103533",
            "FUN_0010651a",
            "FUN_001053c0",
            "FUN_001064b0",
            "FUN_00103b49",
            "FUN_00103abf",
            "FUN_00103bf6",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_00106530",
            "FUN_0010268b",
            "FUN_00103bec",
            "FUN_001063a0",
            "FUN_00102739",
            "FUN_00105050",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00104d5b",
            "FUN_00106300",
            "FUN_00102f7b",
            "FUN_00106540"
        ]
    ],
    "locked_functions": []
}