{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_address_00102cd9",
                "in_EAX": "comparisonValue",
                "iVar1": "filenameComparisonResult",
                "unaff_RBX": "addressPointer",
                "param_7": "filename"
            },
            "code": "\nlong * findMatchingAddress_00102cd9(void)\n\n{\n  int comparisonValue;\n  int filenameComparisonResult;\n  long *addressPointer;\n  undefined8 filename;\n  \n  filename = DAT_0010d638;\n  if (comparisonValue == 3) {\n    for (; *addressPointer != 0; addressPointer = (long *)(*addressPointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*addressPointer != (undefined8 *)0x0; addressPointer = (long *)(*addressPointer + 0xf0)) {\n      filenameComparisonResult = filename_cmp(*(undefined8 *)*addressPointer,filename);\n      if (filenameComparisonResult == 0) {\n        if (comparisonValue != 2) {\n          return addressPointer;\n        }\n        return (long *)(*addressPointer + 0xf0);\n      }\n    }\n  }\n  return addressPointer;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_address_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00102710",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00105830",
                "FUN_00105db0",
                "FUN_00102e6f",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "outputFile",
                "param_2": "fileInfo",
                "param_3": "isVerbose",
                "param_4": "printAddress",
                "iVar1": "returnValue",
                "ppcVar2": "fileHeader",
                "pcVar3": "timeString",
                "uVar4": "fileType",
                "local_100": "currentTime",
                "uStack_f3": "filePermission",
                "cStack_f2": "readOwnerPermission",
                "cStack_f1": "writeOwnerPermission",
                "cStack_f0": "executeOwnerPermission",
                "cStack_ef": "readGroupPermission",
                "cStack_ee": "writeGroupPermission",
                "cStack_ed": "executeGroupPermission",
                "cStack_ec": "readOtherPermission",
                "cStack_eb": "writeOtherPermission",
                "cStack_ea": "executeOtherPermission",
                "local_e8": "formattedTime",
                "local_b8": "timeBuffer",
                "uStack_a0": "fileMode",
                "uStack_9c": "inode",
                "uStack_98": "deviceID",
                "uStack_88": "fileSize",
                "local_60": "modificationTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *outputFile,char **fileInfo,char isVerbose,char printAddress)\n\n{\n  int returnValue;\n  char **fileHeader;\n  char *timeString;\n  uint fileType;\n  time_t currentTime;\n  undefined filePermission;\n  char readOwnerPermission;\n  char writeOwnerPermission;\n  char executeOwnerPermission;\n  char readGroupPermission;\n  char writeGroupPermission;\n  char executeGroupPermission;\n  char readOtherPermission;\n  char writeOtherPermission;\n  char executeOtherPermission;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined timeBuffer [24];\n  uint fileMode;\n  uint inode;\n  uint deviceID;\n  undefined8 fileSize;\n  time_t modificationTime;\n  \n  if (isVerbose != '\\0') {\n    fileHeader = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      fileHeader = fileInfo;\n    }\n    returnValue = (**(code **)(fileHeader[1] + 0x1e8))(fileInfo,timeBuffer);\n    if (returnValue == 0) {\n      currentTime = modificationTime;\n      timeString = ctime(&currentTime);\n      if (timeString == (char *)0x0) {\n        timeString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeString);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeString + 4);\n      }\n      fileType = fileMode & 0xf000;\n      if (fileType == 0x4000) {\n        filePermission = 100;\n      }\n      else if (fileType == 0xa000) {\n        filePermission = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        filePermission = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        filePermission = 99;\n      }\n      else if (fileType == 0xc000) {\n        filePermission = 0x73;\n      }\n      else {\n        filePermission = 0x70;\n        if (fileType != 0x1000) {\n          filePermission = 0x2d;\n        }\n      }\n      readOwnerPermission = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n      writeOwnerPermission = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n      executeOwnerPermission = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n      readGroupPermission = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n      writeGroupPermission = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n      executeGroupPermission = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n      readOtherPermission = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n      writeOtherPermission = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n      executeOtherPermission = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileMode & 0x800) != 0) {\n        if (executeOwnerPermission == 'x') {\n          executeOwnerPermission = 's';\n        }\n        else {\n          executeOwnerPermission = 'S';\n        }\n      }\n      if ((fileMode & 0x400) != 0) {\n        if (executeGroupPermission == 'x') {\n          executeGroupPermission = 's';\n        }\n        else {\n          executeGroupPermission = 'S';\n        }\n      }\n      if ((fileMode & 0x200) != 0) {\n        if (executeOtherPermission == 'x') {\n          executeOtherPermission = 't';\n        }\n        else {\n          executeOtherPermission = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&readOwnerPermission,(ulong)inode,(ulong)deviceID,fileSize,\n              formattedTime,(ulong)fileMode);\n    }\n  }\n  fputs(*fileInfo,outputFile);\n  if (printAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "ctime",
                "FUN_00102d8c",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "initialize_output_file_00105a68",
                "pcVar1": "inputDirectory",
                "pFVar2": "outputFile",
                "sVar3": "inputDirectoryLength"
            },
            "code": "\nvoid initializeOutputFile_00105a68(void)\n\n{\n  char *inputDirectory;\n  FILE *outputFile;\n  size_t inputDirectoryLength;\n  \n  inputDirectory = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    inputDirectoryLength = strlen(DAT_0010d5e8);\n    if (inputDirectoryLength != 0) {\n      if (inputDirectory[inputDirectoryLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(inputDirectory,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(inputDirectory,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  outputFile = fopen(DAT_0010d618,\"w\");\n  if (outputFile != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "perror",
                "concat",
                "printf",
                "fopen",
                "strlen",
                "xexit",
                "FUN_00102e57"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_entries_001032a8",
                "param_1": "entry_array",
                "param_2": "callback",
                "param_3": "file_list",
                "param_4": "result",
                "lVar1": "next_entry",
                "uVar2": "file_name",
                "bVar3": "found_entry",
                "plVar4": "current_entry",
                "iVar5": "comparison_result",
                "__format": "error_message",
                "plVar6": "next_entry",
                "lVar7": "entry"
            },
            "code": "\n\n\nundefined8 process_entries_001032a8(long *entry_array,code *callback,undefined8 *file_list,undefined8 result)\n\n{\n  long next_entry;\n  undefined8 file_name;\n  bool found_entry;\n  long *current_entry;\n  int comparison_result;\n  char *error_message;\n  long *next_entry;\n  long entry;\n  long *plVar8;\n  \n  entry = entry_array[0x1e];\n  if (file_list == (undefined8 *)0x0) {\n    while (entry != 0) {\n      next_entry = *(long *)(entry + 0xf0);\n      (*callback)(entry,0);\n      entry = next_entry;\n    }\n  }\n  else {\n    do {\n      found_entry = false;\n      current_entry = (long *)entry_array[0x1e];\n      plVar8 = entry_array;\n      while (next_entry = current_entry, next_entry != (long *)0x0) {\n        if (*next_entry != 0) {\n          comparison_result = filename_cmp(*file_list);\n          if (comparison_result == 0) {\n            found_entry = true;\n            (*callback)(next_entry,plVar8);\n          }\n        }\n        plVar8 = next_entry;\n        current_entry = (long *)next_entry[0x1e];\n      }\n      if (!found_entry) {\n        file_name = *file_list;\n        error_message = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,error_message,file_name);\n      }\n      file_list = (undefined8 *)file_list[1];\n    } while (file_list != (undefined8 *)0x0);\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_entries_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_entry_missing_in_archive_0010285f",
                "__format": "formatString",
                "lVar2": "entry",
                "plVar3": "nextEntry",
                "uVar4": "entryName",
                "plVar5": "currentEntry",
                "unaff_RBP": "callFunction",
                "unaff_R12": "archivePointer",
                "unaff_R13D": "numEntries",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "entryCounter"
            },
            "code": "\n\n\nvoid printEntryMissingInArchive_0010285f(void)\n\n{\n  int iVar1;\n  char *formatString;\n  long entry;\n  long *nextEntry;\n  undefined8 entryName;\n  long *currentEntry;\n  code *callFunction;\n  long archivePointer;\n  int numEntries;\n  undefined8 *entryNames;\n  int entryCounter;\n  \ncode_r0x0010285f:\n  entryName = *entryNames;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,entryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  numEntries = numEntries + -1;\n  if (numEntries == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archivePointer + 0xf0);\n  entryCounter = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      entry = *currentEntry;\n      if (entry == 0) {\n        nextEntry = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          nextEntry = currentEntry;\n        }\n        (**(code **)(nextEntry[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePointer + 0x49) & 0x10) == 0) || (entry = FUN_00105830(), entry != 0))\n      {\n        entryName = FUN_00105830(*entryNames);\n        iVar1 = filename_cmp(entryName,entry);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (entryCounter = entryCounter + 1,\n            entryCounter == _DAT_0010d630)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*callFunction)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_entry_missing_in_archive_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102bb0",
                "FUN_001057a0",
                "FUN_00103a78",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_00102f96",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printError_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "isVerbose",
                "uVar1": "version",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint isVerbose)\n\n{\n  undefined8 version;\n  char *message;\n  FILE *outputStream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (isVerbose != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,message,DAT_0010d660);\n  version = DAT_0010d660;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,message,version);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  FUN_0010336b(outputStream);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (isVerbose != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isVerbose ^ 1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010336b",
                "fprintf",
                "FUN_0010266f",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "param_1": "inputOption",
                "uVar1": "data",
                "pcVar2": "message",
                "__stream": "fileStream"
            },
            "code": "\n\n\nvoid printUsage_0010394a(uint inputOption)\n\n{\n  undefined8 data;\n  char *message;\n  FILE *fileStream;\n  \n  data = DAT_0010d660;\n  fileStream = _stderr;\n  if (inputOption != 0) {\n    fileStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(fileStream,message,data);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(fileStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(fileStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(fileStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(fileStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(fileStream,message);\n  FUN_0010266f(DAT_0010d660,fileStream);\n  if (inputOption != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(fileStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(inputOption ^ 1);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_0010266f",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "initialize_data_00107920",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "input9",
                "param_10": "input10",
                "param_11": "input11",
                "param_12": "input12",
                "param_13": "input13",
                "param_14": "input14",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "tempPtr",
                "local_c8": "buffer",
                "local_b8": "localBuffer",
                "local_b0": "tmp1",
                "local_a8": "tmp2",
                "local_a0": "tmp3",
                "local_98": "tmp4",
                "local_90": "tmp5",
                "local_88": "output1",
                "local_78": "output2",
                "local_68": "output3",
                "local_58": "output4",
                "local_48": "output5",
                "local_38": "output6",
                "local_28": "output7",
                "local_18": "output8"
            },
            "code": "\nvoid initializeData_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 input9,undefined8 input10,undefined8 input11,undefined8 input12,\n                 undefined8 input13,undefined8 input14)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 length;\n  undefined *tempPtr;\n  undefined *buffer;\n  undefined localBuffer [8];\n  undefined8 tmp1;\n  undefined8 tmp2;\n  undefined8 tmp3;\n  undefined8 tmp4;\n  undefined8 tmp5;\n  undefined4 output1;\n  undefined4 output2;\n  undefined4 output3;\n  undefined4 output4;\n  undefined4 output5;\n  undefined4 output6;\n  undefined4 output7;\n  undefined4 output8;\n  \n  if (condition != '\\0') {\n    output1 = input1;\n    output2 = input2;\n    output3 = input3;\n    output4 = input4;\n    output5 = input5;\n    output6 = input6;\n    output7 = input7;\n    output8 = input8;\n  }\n  tempPtr = &stack0x00000008;\n  size = 8;\n  buffer = localBuffer;\n  length = 0x30;\n  tmp1 = input10;\n  tmp2 = input11;\n  tmp3 = input12;\n  tmp4 = input13;\n  tmp5 = input14;\n  FUN_001078c0(input9,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00102fd7",
                "FUN_00102f1e",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "initialize_data_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_001058b0",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "get_one_00105bb0",
                "undefined8": "unsignedLongLong",
                "return": "result"
            },
            "code": "\nunsignedLongLong getOne_00105bb0(void)\n\n{\n  result 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "get_one_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_function_00107640"
            },
            "code": "\nundefined8 initializeFunction_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_function_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_archive_member_00102e6f",
                "pcVar1": "current_directory",
                "in_RAX": "file_path",
                "uVar2": "base_name",
                "uVar3": "error_message",
                "pFVar4": "output_file",
                "sVar5": "file_path_length",
                "pcVar6": "current_file"
            },
            "code": "\nvoid extract_archive_member_00102e6f(void)\n\n{\n  char *current_directory;\n  char *file_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *output_file;\n  size_t file_path_length;\n  char *current_file;\n  \n  current_directory = DAT_0010d5e8;\n  do {\n    file_path = file_path + 1;\n    while (*file_path != '/') {\n      if (*file_path == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (file_path_length = strlen(DAT_0010d5e8), file_path_length != 0)) {\n          if (current_directory[file_path_length - 1] == '/') {\n            DAT_0010d618 = (char *)concat(current_directory,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(current_directory,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        output_file = fopen(DAT_0010d618,\"w\");\n        if (output_file == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_file = file_path;\n      if ((*file_path == '.') && (current_file = file_path + 1, file_path[1] == '.')) {\n        current_file = file_path + 2;\n        if ((file_path[2] == '/') || (file_path[2] == '\\0')) {\n          base_name = lbasename();\n          current_directory = DAT_0010d618;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          FUN_00107920(error_message,current_directory,base_name);\n          DAT_0010d618 = (char *)base_name;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (file_path = current_file, *current_file != '\\0' && (*current_file != '/')); current_file = current_file + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107920",
                "lbasename",
                "FUN_00105a68",
                "FUN_00102e6f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_program_state_0010315d",
                "xexit": "exitProgram"
            },
            "code": "\n\n\nvoid checkProgramState_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_program_state_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_with_flags_00107890",
                "param_1": "output",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid printWithFlags_00107890(undefined8 output)\n\n{\n  FUN_001079c0(standardOutput,output,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_with_flags_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00105af0",
                "FUN_00103c60",
                "FUN_00102710"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "dynamic_memory_param",
                "param_4": "additional_param",
                "pvVar1": "buffer",
                "pvVar2": "allocated_memory",
                "auVar3": "result",
                "malloc": "allocate_memory"
            },
            "code": "\nundefined  [16]\ncreate_buffer_001033d6(undefined8 input_param,undefined8 output_param,undefined8 dynamic_memory_param,undefined8 additional_param)\n\n{\n  void *buffer;\n  void *allocated_memory;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)FUN_001033b0(\"out of dynamic memory in yy_create_buffer_001033d6()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    allocated_memory = malloc(0x4002);\n    *(void **)((long)buffer + 8) = allocated_memory;\n  } while (allocated_memory == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  FUN_001031cf(buffer,input_param);\n  result._8_8_ = additional_param;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "malloc",
                "FUN_001033b0",
                "FUN_001031cf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_data_00103172",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "flag",
                "param_4": "value",
                "uVar1": "temp",
                "auVar2": "buffer"
            },
            "code": "\nundefined  [16]\nupdateData_00103172(undefined8 *source,undefined8 *destination,char flag,undefined8 value)\n\n{\n  undefined8 temp;\n  undefined buffer [16];\n  \n  if (flag != '\\0') {\n    printf(\"r - %s\\n\",*destination);\n  }\n  temp = *source;\n  destination[0x1e] = temp;\n  buffer._1_7_ = (undefined7)((ulong)temp >> 8);\n  buffer[0] = 1;\n  *source = destination;\n  buffer._8_8_ = value;\n  return buffer;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_data_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_last_matching_ptr_00105870",
                "param_1": "ptrArray",
                "param_2": "count",
                "param_3": "target",
                "iVar1": "cmpResult",
                "iVar3": "mode",
                "uVar2": "defaultTarget"
            },
            "code": "\nlong * findLastMatchingPtr_00105870(long *ptrArray,int count,undefined8 target)\n\n{\n  int cmpResult;\n  undefined8 defaultTarget;\n  int mode;\n  \n  defaultTarget = DAT_0010d638;\n  mode = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultTarget = target;\n    mode = count;\n  }\n  if (mode == 3) {\n    for (; *ptrArray != 0; ptrArray = (long *)(*ptrArray + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*ptrArray != (undefined8 *)0x0; ptrArray = (long *)(*ptrArray + 0xf0)) {\n      cmpResult = filename_cmp(*(undefined8 *)*ptrArray,defaultTarget);\n      if (cmpResult == 0) {\n        if (mode != 2) {\n          return ptrArray;\n        }\n        return (long *)(*ptrArray + 0xf0);\n      }\n    }\n  }\n  return ptrArray;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_last_matching_ptr_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "initialize_data_001030ed",
                "puVar1": "ptr"
            },
            "code": "\nvoid initializeData_001030ed(void)\n\n{\n  undefined8 *ptr;\n  \n  ptr = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)ptr + 0x1c);\n  DAT_0010d5b0 = (undefined *)ptr[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *ptr;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_data_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_file_with_reason_00105bc0",
                "param_1": "source_file_path",
                "param_2": "destination_file_path",
                "param_3": "copy_options",
                "param_4": "result",
                "uVar1": "copy_result",
                "piVar2": "errno_location",
                "pcVar3": "error_message",
                "uVar4": "gettext_result",
                "uVar5": "unlink_result",
                "auVar6": "return_value"
            },
            "code": "\nundefined  [16] copy_file_with_reason_00105bc0(char *source_file_path,char *destination_file_path,undefined4 copy_options,undefined8 result)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 gettext_result;\n  ulong unlink_result;\n  undefined return_value [16];\n  \n  if (destination_file_path == source_file_path) {\n    unlink_result = 0;\n  }\n  else {\n    copy_result = FUN_00105c00(copy_options);\n    unlink_result = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      gettext_result = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00107920(gettext_result,destination_file_path,error_message);\n    }\n    unlink(source_file_path);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = unlink_result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00102f1e",
                "FUN_00105c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_and_process_data_00107650",
                "param_1": "data",
                "lVar2": "result",
                "uVar1": "status"
            },
            "code": "\nundefined8 checkAndProcessData_00107650(undefined8 data)\n\n{\n  undefined8 status;\n  long result;\n  \n  result = FUN_001052a0();\n  if (result < 1) {\n    status = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    result = FUN_00105300(data,0);\n    if (result == 0) {\n                    \n      xexit(1);\n    }\n    FUN_001058b0(result);\n    status = 0;\n  }\n  return status;\n}\n\n",
            "called": [
                "FUN_0010284b",
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_001052a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_and_process_data_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_with_reason_00102f1e",
                "piVar1": "errorNumber",
                "uVar2": "errorMessage",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "auVar3": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyFileWithReason_00102f1e(void)\n\n{\n  int *errorNumber;\n  undefined8 errorMessage;\n  ulong fileSize;\n  char *filePath;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errorNumber = __errno_location();\n  strerror(*errorNumber);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00107920(errorMessage);\n  unlink(filePath);\n  returnValue._0_8_ = fileSize & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "unlink",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_cannot_set_time_error_message_00102fd7",
                "piVar1": "errorLocation",
                "uVar2": "errorText"
            },
            "code": "\nvoid printCannotSetTimeErrorMessage_00102fd7(void)\n\n{\n  int *errorLocation;\n  undefined8 errorText;\n  \n  errorLocation = __errno_location();\n  strerror(*errorLocation);\n  errorText = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00107920(errorText);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_cannot_set_time_error_message_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_00103ba8",
                "printf": "printFunction",
                "fflush": "flushOutput",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid checkAndPrintAR_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(standardOutput);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_print_ar_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105480",
                "FUN_001032a8",
                "FUN_00105db0",
                "FUN_00102cd9",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001025a0",
                "FUN_00103bd1",
                "FUN_0010336b",
                "FUN_00105300",
                "FUN_00102d8c",
                "FUN_00102f1e",
                "FUN_00105db0",
                "FUN_0010394a",
                "FUN_001052a0",
                "FUN_00102c25",
                "FUN_001058b0",
                "FUN_0010285f",
                "FUN_001031a5",
                "FUN_00103a78",
                "FUN_00102fd7",
                "FUN_001032a8",
                "FUN_00102f96",
                "FUN_0010342d",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_00102e6f",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "execute_function_with_flag_00103ddc",
                "param_1": "functionParameter"
            },
            "code": "\nvoid executeFunctionWithFlag_00103ddc(undefined8 functionParameter)\n\n{\n  FUN_001079c0(DAT_0010d578,functionParameter,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "execute_function_with_flag_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_formatted_message_001078c0",
                "param_1": "message",
                "param_2": "arguments",
                "fflush": "flushStandardOutput",
                "fprintf": "printToStandardError",
                "vfprintf": "printFormattedToStandardError",
                "putc": "writeCharToStandardError"
            },
            "code": "\n\n\nvoid printFormattedMessage_001078c0(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010d660);\n  vfprintf(_stderr,message,arguments);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107920",
                "FUN_00107690"
            ],
            "imported": false,
            "current_name": "print_formatted_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_binutils_info_001075e0",
                "param_1": "version",
                "pcVar1": "message"
            },
            "code": "\nvoid printBinutilsInfo_001075e0(undefined8 version)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_binutils_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "extract_entries_from_binary_00105480",
                "param_1": "binaryAddress",
                "param_2": "processEntryFunction",
                "param_3": "entryAddresses",
                "param_4": "numEntries",
                "iVar1": "comparisonResult",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "fallbackEntry",
                "uVar4": "comparisonResult2",
                "plVar5": "currentEntryPtr",
                "local_cc": "numProcessedEntries",
                "local_c8": "localBuffer"
            },
            "code": "\n\n\nvoid extractEntriesFromBinary_00105480(long binaryAddress,code *processEntryFunction,undefined8 *entryAddresses,int numEntries)\n\n{\n  int comparisonResult;\n  char *formatString;\n  long currentEntry;\n  long *fallbackEntry;\n  undefined8 comparisonResult2;\n  long *currentEntryPtr;\n  int numProcessedEntries;\n  undefined localBuffer [152];\n  \n  currentEntry = *(long *)(binaryAddress + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*processEntryFunction)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      currentEntryPtr = *(long **)(binaryAddress + 0xf0);\n      numProcessedEntries = 0;\n      for (; currentEntryPtr != (long *)0x0; currentEntryPtr = (long *)currentEntryPtr[0x1e]) {\n        if (*(int *)((long)currentEntryPtr + 0xac) == 0) {\n          currentEntry = *currentEntryPtr;\n          if (currentEntry == 0) {\n            fallbackEntry = (long *)currentEntryPtr[0x1d];\n            if ((long *)currentEntryPtr[0x1d] == (long *)0x0) {\n              fallbackEntry = currentEntryPtr;\n            }\n            (**(code **)(fallbackEntry[1] + 0x1e8))(currentEntryPtr,localBuffer);\n          }\n          else if (((*(byte *)(binaryAddress + 0x49) & 0x10) == 0) ||\n                  (currentEntry = FUN_00105830(currentEntry,binaryAddress), currentEntry != 0)) {\n            comparisonResult2 = FUN_00105830(*entryAddresses,binaryAddress);\n            comparisonResult = filename_cmp(comparisonResult2,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((DAT_0010d634 == '\\0' || (numProcessedEntries = numProcessedEntries + 1, numProcessedEntries == _DAT_0010d630)))) {\n              (*processEntryFunction)();\n              *(undefined4 *)((long)currentEntryPtr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      comparisonResult2 = *entryAddresses;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,comparisonResult2);\nLAB_0010553e:\n      entryAddresses = entryAddresses + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010285f",
                "FUN_00105830",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_entries_from_binary_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "display_syntax_error_message_001031a5",
                "uVar1": "updatedCount",
                "__format": "errorMessageFormat"
            },
            "code": "\nvoid displaySyntaxErrorMessage_001031a5(void)\n\n{\n  uint updatedCount;\n  char *errorMessageFormat;\n  \n  updatedCount = DAT_0010d554 + 1;\n  errorMessageFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessageFormat,(ulong)updatedCount);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "display_syntax_error_message_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103a78",
                "FUN_00102ba1",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_0010266f",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00107c10",
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_0010315d",
                "FUN_00105db0",
                "FUN_0010342d",
                "FUN_0010394a",
                "FUN_00107690",
                "FUN_00105a68",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001058b0",
                "FUN_00102f55",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105db0",
                "FUN_00105a68",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "inputParam",
                "lVar1": "loopCount",
                "lVar2": "newSize",
                "puVar3": "ptrToData",
                "bVar4": "flag",
                "__size": "totalSize"
            },
            "code": "\nundefined8 ensureBufferStack_00103df9(void)\n\n{\n  size_t totalSize;\n  undefined8 inputParam;\n  long loopCount;\n  long newSize;\n  undefined4 *ptrToData;\n  byte flag;\n  \n  flag = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return inputParam;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return inputParam;\n    }\n    newSize = DAT_0010d580 + 8;\n    totalSize = newSize * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,totalSize);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      ptrToData = (undefined4 *)((long)DAT_0010d5a8 + (totalSize - 0x40));\n      DAT_0010d580 = newSize;\n      for (loopCount = 0x10; loopCount != 0; loopCount = loopCount + -1) {\n        *ptrToData = 0;\n        ptrToData = ptrToData + (ulong)flag * -2 + 1;\n      }\n      return inputParam;\n    }\n  }\n  FUN_001033b0(\"out of dynamic memory in yyensure_buffer_stack()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return inputParam;\n}\n\n",
            "called": [
                "realloc",
                "calloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "archive",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "ptrToArchive",
                "uVar3": "bytesRead",
                "uVar4": "errorMessage",
                "sVar5": "bytesWritten",
                "piVar6": "errorNumber",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorString",
                "unaff_R13": "totalReadBytes",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "expectedTotalBytes"
            },
            "code": "\n\n\nvoid extractAndPrintArchive_00103a78(undefined8 *archive)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *ptrToArchive;\n  ulong bytesRead;\n  undefined8 errorMessage;\n  size_t bytesWritten;\n  int *errorNumber;\n  size_t remainingBytes;\n  char *errorString;\n  ulong totalReadBytes;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong expectedTotalBytes;\n  \n  buffer = (void *)xmalloc(0x2000);\n  ptrToArchive = (undefined8 *)archive[0x1d];\n  if ((undefined8 *)archive[0x1d] == (undefined8 *)0x0) {\n    ptrToArchive = archive;\n  }\n  result = (**(code **)(ptrToArchive[1] + 0x1e8))(archive,stackBuffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*archive);\n    }\n    totalReadBytes = 0;\n    bfd_seek(archive,0,0);\n    goto LAB_00103afd;\n  }\n  archive = (undefined8 *)*archive;\n  errorString = \"internal stat error on %s\";\n  do {\n    errorMessage = dcgettext(0,errorString,5);\n    FUN_00107690(errorMessage,archive);\n    expectedTotalBytes = archiveSize;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errorNumber = __errno_location();\n        errorString = strerror(*errorNumber);\n        FUN_00107690(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalReadBytes = totalReadBytes + bytesWritten;\nLAB_00103afd:\n      if (expectedTotalBytes <= totalReadBytes) goto LAB_00103b91;\n      remainingBytes = expectedTotalBytes - totalReadBytes;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,archive);\n    } while (remainingBytes == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    archive = *(undefined8 **)archive[0x1d];\n    archiveSize = expectedTotalBytes;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "printf",
                "bfd_seek",
                "bfd_bread",
                "__errno_location",
                "free",
                "FUN_00107690",
                "fwrite",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103bd1",
                "FUN_0010336b",
                "FUN_00105300",
                "FUN_00102d8c",
                "FUN_00105db0",
                "FUN_0010394a",
                "FUN_001078c0",
                "FUN_001033b0",
                "FUN_0010285f",
                "FUN_001032a8",
                "FUN_0010342d",
                "FUN_00102f96",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "archive_writer_001058b0",
                "param_1": "arguments",
                "cVar1": "char_var",
                "uVar2": "uint_var",
                "iVar3": "int_var",
                "uVar4": "uint64_var",
                "__format": "format_string",
                "__ptr": "pointer",
                "__stream": "file_stream",
                "ppcVar5": "char_pointer_pointer",
                "uStack0000000000000020": "stack_uint1",
                "in_stack_00000028": "stack_uint2",
                "in_stack_00000038": "stack_uint64",
                "local_3c": "local_int_array",
                "uStack_33": "stack_uint3",
                "cStack_32": "stack_char1",
                "cStack_31": "stack_char2"
            },
            "code": "\n\n\nvoid archive_writer_001058b0(undefined8 *arguments)\n\n{\n  char char_var;\n  uint uint_var;\n  int int_var;\n  undefined8 uint64_var;\n  char *format_string;\n  void *pointer;\n  FILE *file_stream;\n  char **char_pointer_pointer;\n  uint stack_uint1;\n  uint stack_uint2;\n  undefined8 stack_uint64;\n  int local_int_array [2];\n  undefined stack_uint3;\n  char stack_char1;\n  char stack_char2;\n  \n  uint64_var = arguments[0x1e];\n  local_int_array[0] = -1;\n  pointer = (void *)xstrdup(*arguments);\n  file_stream = (FILE *)FUN_001057a0(pointer,local_int_array);\n  int_var = local_int_array[0];\n  if (file_stream != (FILE *)0x0) {\n    DAT_0010d618 = file_stream;\n    char_pointer_pointer = (char **)bfd_fdopenw(file_stream,*(undefined8 *)arguments[1],local_int_array[0]);\n    if (char_pointer_pointer != (char **)0x0) {\n      DAT_0010d5e0 = char_pointer_pointer;\n      bfd_set_format(char_pointer_pointer,2);\n      uint_var = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)char_pointer_pointer + 0x49) & 0xfffffff7;\n      *(char *)((long)char_pointer_pointer + 0x49) = (char)uint_var;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)char_pointer_pointer + 0x44) = *(uint *)((long)char_pointer_pointer + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)char_pointer_pointer + 0x44) = *(uint *)((long)char_pointer_pointer + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)arguments + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)char_pointer_pointer + 0x49) = (byte)uint_var | 0x10;\n        }\n        char_var = bfd_set_archive_head(char_pointer_pointer,uint64_var);\n        if (char_var != '\\0') break;\n        uint_var = FUN_00107c10(pointer);\nLAB_00102d37:\n        *(uint *)((long)char_pointer_pointer + 0x44) = *(uint *)((long)char_pointer_pointer + 0x44) | 0x100000;\n      }\n      int_var = dup(int_var);\n      char_var = bfd_close(char_pointer_pointer);\n      if (char_var == '\\0') {\n        FUN_00107c10(pointer);\n        format_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,format_string);\n        uint_var = stack_uint1 & 0xf000;\n        if (uint_var == 0x4000) {\n          stack_uint3 = 100;\n        }\n        else if (uint_var == 0xa000) {\n          stack_uint3 = 0x6c;\n        }\n        else if (uint_var == 0x6000) {\n          stack_uint3 = 0x62;\n        }\n        else if (uint_var == 0x2000) {\n          stack_uint3 = 99;\n        }\n        else if (uint_var == 0xc000) {\n          stack_uint3 = 0x73;\n        }\n        else {\n          stack_uint3 = 0x70;\n          if (uint_var != 0x1000) {\n            stack_uint3 = 0x2d;\n          }\n        }\n        stack_char1 = (-((_stack_uint1 & 0x100) == 0) & 0xbbU) + 0x72;\n        stack_char2 = (-((_stack_uint1 & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(file_stream,\"%s %ld/%ld %6lu %s \",&stack_char1,_stack_uint1 >> 0x20,\n                (ulong)stack_uint2,stack_uint64,&stack0xffffffffffffffd8,\n                _stack_uint1 & 0xffffffff);\n        fputs(*char_pointer_pointer,file_stream);\n        if ((char)arguments != '\\0') {\n          if ((*(byte *)((long)char_pointer_pointer + 0x49) & 0x10) == 0) {\n            if (char_pointer_pointer[0xb] != (char *)0x0) {\n              fprintf(file_stream,\" 0x%lx\");\n            }\n          }\n          else if (char_pointer_pointer[0xc] != (char *)0x0) {\n            fprintf(file_stream,\" 0x%lx\");\n          }\n        }\n        fputc(10,file_stream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(arguments);\n      int_var = FUN_00105bc0(file_stream,pointer,int_var);\n      if (int_var == 0) {\n        free(pointer);\n        free(file_stream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(int_var);\n    FUN_00107c10(pointer);\n  }\n  uint64_var = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  FUN_00107c10(uint64_var);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107c10",
                "close",
                "bfd_fdopenw",
                "FUN_001057a0",
                "xstrdup",
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "archive_writer_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_files_00102bf5",
                "bfd_cache_close": "close_cache",
                "unlink_if_ordinary": "delete_file"
            },
            "code": "\nvoid cleanup_files_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "fclose",
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_files_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_function_00102020"
            },
            "code": "\nvoid execute_indirect_function_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105db0",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102f96",
                "FUN_00103ba8",
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_00105570",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105af0",
                "FUN_00105300",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "error",
                "pcVar3": "errorMessage",
                "uVar4": "localizedErrorMessage",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "creationTime"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *error;\n  char *errorMessage;\n  undefined8 localizedErrorMessage;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 creationTime;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  creationTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    error = __errno_location();\n    errorMessage = strerror(*error);\n    localizedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00107920(localizedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00102fd7",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "resolve_output_path_00105a20",
                "param_1": "outputPath",
                "pcVar1": "baseDir",
                "pcVar2": "currDir",
                "uVar3": "resolvedPath",
                "uVar4": "errorMessage",
                "pFVar5": "filePointer",
                "sVar6": "pathLength"
            },
            "code": "\nvoid resolveOutputPath_00105a20(char *outputPath)\n\n{\n  char *baseDir;\n  char *currDir;\n  undefined8 resolvedPath;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  size_t pathLength;\n  \n  baseDir = DAT_0010d5e8;\n  DAT_0010d618 = outputPath;\n  if (*outputPath == '/') {\nLAB_00102e9a:\n    resolvedPath = lbasename();\n    baseDir = DAT_0010d618;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    FUN_00107920(errorMessage,baseDir,resolvedPath);\n    DAT_0010d618 = (char *)resolvedPath;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*outputPath == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (pathLength = strlen(DAT_0010d5e8), pathLength != 0)) {\n        if (baseDir[pathLength - 1] == '/') {\n          DAT_0010d618 = (char *)concat(baseDir,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(baseDir,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      filePointer = fopen(DAT_0010d618,\"w\");\n      if (filePointer == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currDir = outputPath;\n    if ((*outputPath == '.') && (currDir = outputPath + 1, outputPath[1] == '.')) {\n      currDir = outputPath + 2;\n      if ((outputPath[2] == '/') || (outputPath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currDir != '\\0' && (*currDir != '/')); currDir = currDir + 1) {\n    }\n    for (; outputPath = currDir, *currDir == '/'; currDir = currDir + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "resolve_output_path_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00105a68",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_and_set_error_00102f55",
                "unaff_R12D": "file_descriptor",
                "piVar2": "errno_pointer",
                "iVar1": "errno_value"
            },
            "code": "\nundefined8 close_file_and_set_error_00102f55(void)\n\n{\n  int errno_value;\n  int *errno_pointer;\n  int file_descriptor;\n  \n  errno_pointer = __errno_location();\n  errno_value = *errno_pointer;\n  close(file_descriptor);\n  *errno_pointer = errno_value;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_file_name_and_create_temp_file_001057a0",
                "param_1": "path",
                "param_2": "fileDescriptor",
                "param_3": "unusedParam",
                "param_4": "unusedParam2",
                "iVar1": "result",
                "pcVar2": "lastSlash",
                "lVar3": "fileNameOffset",
                "lVar4": "iterator",
                "lVar5": "pathLength",
                "pcVar6": "newPath",
                "bVar7": "isSlash",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] extractFileNameAndCreateTempFile_001057a0(char *path,int *fileDescriptor,undefined8 unusedParam,undefined8 unusedParam2)\n\n{\n  int result;\n  char *lastSlash;\n  long fileNameOffset;\n  long iterator;\n  long pathLength;\n  char *newPath;\n  byte isSlash;\n  undefined returnValue [16];\n  \n  isSlash = 0;\n  lastSlash = strrchr(path,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    fileNameOffset = 0;\n  }\n  else {\n    pathLength = (long)lastSlash - (long)path;\n    lastSlash = (char *)xmalloc(pathLength + 0xb);\n    fileNameOffset = pathLength + 1;\n    newPath = lastSlash;\n    for (iterator = pathLength; iterator != 0; iterator = iterator + -1) {\n      *newPath = *path;\n      path = path + (ulong)isSlash * -2 + 1;\n      newPath = newPath + (ulong)isSlash * -2 + 1;\n    }\n    lastSlash[pathLength] = '/';\n  }\n  *(undefined8 *)(lastSlash + fileNameOffset) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + fileNameOffset) + 8) = 0;\n  result = mkstemp(lastSlash);\n  if (result == -1) {\n    newPath = (char *)0x0;\n    free(lastSlash);\n  }\n  else {\n    *fileDescriptor = result;\n    newPath = lastSlash;\n  }\n  returnValue._8_8_ = unusedParam2;\n  returnValue._0_8_ = newPath;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00102ba1",
                "mkstemp",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_001058b0",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "extract_file_name_and_create_temp_file_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_format_00102d8c",
                "unaff_RBX": "fileContent",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "shouldPrintHex",
                "param_9": "charFlag1",
                "param_19": "filePermission",
                "param_20": "fileSize",
                "param_22": "timeStamp",
                "__format": "corruptTimeFormat",
                "uVar1": "permissionFlag",
                "uStack0000000000000015": "defaultPermission",
                "cStack0000000000000016": "flag1Char",
                "cStack0000000000000017": "flag2Char",
                "cStack0000000000000019": "flag3Char",
                "cStack000000000000001a": "flag4Char",
                "cStack000000000000001b": "flag5Char",
                "cStack000000000000001c": "flag6Char",
                "cStack000000000000001d": "flag7Char",
                "cStack000000000000001e": "flag8Char",
                "uStack000000000000006c": "fileOwner",
                "stack0x00000016": "fileTime",
                "stack0x00000020": "formattedTime"
            },
            "code": "\nvoid printFileFormat_00102d8c(void)\n\n{\n  char *corruptTimeFormat;\n  uint permissionFlag;\n  char **fileContent;\n  FILE *outputFile;\n  char shouldPrintHex;\n  undefined defaultPermission;\n  char flag1Char;\n  char flag2Char;\n  char charFlag1;\n  char flag3Char;\n  char flag4Char;\n  char flag5Char;\n  char flag6Char;\n  char flag7Char;\n  char flag8Char;\n  undefined uStack000000000000001f;\n  uint filePermission;\n  uint fileOwner;\n  uint fileSize;\n  undefined8 timeStamp;\n  \n  corruptTimeFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&formattedTime,corruptTimeFormat);\n  permissionFlag = filePermission & 0xf000;\n  if (permissionFlag == 0x4000) {\n    defaultPermission = 100;\n  }\n  else if (permissionFlag == 0xa000) {\n    defaultPermission = 0x6c;\n  }\n  else if (permissionFlag == 0x6000) {\n    defaultPermission = 0x62;\n  }\n  else if (permissionFlag == 0x2000) {\n    defaultPermission = 99;\n  }\n  else if (permissionFlag == 0xc000) {\n    defaultPermission = 0x73;\n  }\n  else {\n    defaultPermission = 0x70;\n    if (permissionFlag != 0x1000) {\n      defaultPermission = 0x2d;\n    }\n  }\n  flag1Char = (-((filePermission & 0x100) == 0) & 0xbbU) + 0x72;\n  flag2Char = (-((filePermission & 0x80) == 0) & 0xb6U) + 0x77;\n  charFlag1 = (-((filePermission & 0x40) == 0) & 0xb5U) + 0x78;\n  flag3Char = (-((filePermission & 0x20) == 0) & 0xbbU) + 0x72;\n  flag4Char = (-((filePermission & 0x10) == 0) & 0xb6U) + 0x77;\n  flag5Char = (-((filePermission & 8) == 0) & 0xb5U) + 0x78;\n  flag6Char = (-((filePermission & 4) == 0) & 0xbbU) + 0x72;\n  flag7Char = (-((filePermission & 2) == 0) & 0xb6U) + 0x77;\n  flag8Char = (-((filePermission & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermission & 0x800) != 0) {\n    if (charFlag1 == 'x') {\n      charFlag1 = 's';\n    }\n    else {\n      charFlag1 = 'S';\n    }\n  }\n  if ((filePermission & 0x400) != 0) {\n    if (flag5Char == 'x') {\n      flag5Char = 's';\n    }\n    else {\n      flag5Char = 'S';\n    }\n  }\n  if ((filePermission & 0x200) != 0) {\n    if (flag8Char == 'x') {\n      flag8Char = 't';\n    }\n    else {\n      flag8Char = 'T';\n    }\n  }\n  uStack000000000000001f = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&fileTime,(ulong)fileOwner,\n          (ulong)fileSize,timeStamp,&formattedTime,(ulong)filePermission);\n  fputs(*fileContent,outputFile);\n  if (shouldPrintHex != '\\0') {\n    if ((*(byte *)((long)fileContent + 0x49) & 0x10) == 0) {\n      if (fileContent[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileContent[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputs",
                "fprintf",
                "fputc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_format_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001025a0",
                "FUN_00103a78",
                "FUN_00102f55",
                "FUN_00102fd7",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_001031cf",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105c00",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "process_binary_00105300",
                "param_1": "filename",
                "param_2": "results",
                "plVar1": "filePtr",
                "pcVar2": "errorMessage",
                "bVar3": "isThinLibrary",
                "cVar4": "formatCheckResult",
                "iVar5": "statResult",
                "uVar6": "message",
                "uVar7": "libraryName",
                "piVar8": "errorPointer",
                "lVar9": "archivedFile",
                "puVar10": "plugin",
                "local_b0": "status",
                "local_a8": "fileStat",
                "_stderr": "standardError"
            },
            "code": "\n\n\nundefined8 * processBinary_00105300(char *filename,undefined8 *results)\n\n{\n  long *filePtr;\n  char *errorMessage;\n  byte isThinLibrary;\n  char formatCheckResult;\n  int statResult;\n  undefined8 message;\n  undefined8 libraryName;\n  int *errorPointer;\n  long archivedFile;\n  undefined8 *plugin;\n  undefined8 status;\n  stat fileStat;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  statResult = stat(filename,&fileStat);\n  errorMessage = DAT_0010d618;\n  if (statResult == 0) goto LAB_001053be;\n  errorPointer = __errno_location();\n  if (*errorPointer == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(standardError,\"%s: \",DAT_0010d660);\n      perror(filename);\n      FUN_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (results != (undefined8 *)0x0)) {\n      plugin = (undefined8 *)FUN_00102710();\n      return plugin;\n    }\n    results = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((results != (undefined8 *)0x0) && (formatCheckResult = bfd_set_format(results,2), formatCheckResult != '\\0')) &&\n       (formatCheckResult = bfd_close(results), formatCheckResult != '\\0')) {\n      errorMessage = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  FUN_00107c10(filename);\n  do {\n    isThinLibrary = *(byte *)((long)results + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        libraryName = *results;\n        message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(message,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      libraryName = *results;\n      message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(message,libraryName);\nLAB_001027cb:\n      FUN_00107c20(filename);\n      statResult = bfd_get_error();\n      if (statResult == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(status);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      filePtr = results + 0x1e;\n      for (archivedFile = bfd_openr_next_archived_file(results,0); archivedFile != 0;\n          archivedFile = bfd_openr_next_archived_file(results,archivedFile)) {\n        *filePtr = archivedFile;\n        filePtr = (long *)(archivedFile + 0xf0);\n      }\n      *filePtr = 0;\n      statResult = bfd_get_error();\n      if (statResult == 9) {\n        return results;\n      }\n      do {\n        FUN_00107c10(filename);\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(libraryName,filename);\n        errorMessage = filename;\nLAB_001053be:\n        DAT_0010d618 = errorMessage;\n        results = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (results == (undefined8 *)0x0);\n      formatCheckResult = bfd_check_format_matches(results,2,&status);\n      if (formatCheckResult == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archivedFile = bfd_openr_next_archived_file(results,0), archivedFile == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00107c10",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "FUN_00103bd1",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_close",
                "__errno_location",
                "FUN_00107920",
                "bfd_set_error",
                "FUN_00107690",
                "stat",
                "fprintf",
                "bfd_openw",
                "FUN_00107c20",
                "FUN_00102710",
                "perror",
                "FUN_0010315d",
                "xexit",
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "process_binary_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "parse_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptrByte",
                "puVar2": "ptrUint",
                "bVar3": "byteVar",
                "plVar4": "ptrLong",
                "puVar5": "ptrVoid8",
                "uVar6": "varUint6",
                "uVar7": "varUint7",
                "bVar8": "boolVar8",
                "bVar9": "boolVar9",
                "ppcVar10": "ptrPtrChar",
                "piVar11": "ptrInt",
                "puVar12": "ptrVoid",
                "bVar13": "byteVar13",
                "cVar14": "charVar14",
                "iVar15": "intVar15",
                "uVar16": "varUint16",
                "uVar17": "varUint17",
                "uVar30": "varUint30",
                "pFVar28": "filePtr28",
                "unaff_R12": "filePtr12",
                "local_130": "filePtr130",
                "local_128": "filePtr128",
                "local_110": "ptrChar110",
                "local_108": "varSizeT108",
                "local_100": "longVar100",
                "local_c8": "varUndefC8",
                "uStack_c6": "varUndefStackC6",
                "uStack_c5": "varUndefStackC5",
                "local_b0": "varUintB0"
            },
            "code": "\n\n\nvoid parseFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *ptrByte;\n  uint *ptrUint;\n  byte byteVar;\n  long *ptrLong;\n  undefined8 *ptrVoid8;\n  undefined4 varUint6;\n  undefined4 varUint7;\n  bool boolVar8;\n  bool boolVar9;\n  char **ptrPtrChar;\n  int *ptrInt;\n  undefined *ptrVoid;\n  byte byteVar13;\n  char charVar14;\n  int intVar15;\n  uint varUint16;\n  undefined4 varUint17;\n  FILE *pFVar18;\n  size_t sVar19;\n  size_t sVar20;\n  byte *__ptr;\n  long *plVar21;\n  FILE *pFVar22;\n  char *pcVar23;\n  long lVar24;\n  ulong uVar25;\n  undefined8 *ptrUint6;\n  undefined8 uVar27;\n  FILE *filePtr28;\n  long **pplVar29;\n  undefined8 varUint30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar3;\n  long lVar34;\n  long lVar35;\n  undefined **ppuVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyteVar8;\n  char *pcVar39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *filePtr12;\n  char *pcVar43;\n  uint uVar44;\n  int iVar45;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 filePtr130;\n  FILE *filePtr128;\n  byte *local_118;\n  char **ptrChar110;\n  size_t varSizeT108;\n  long longVar100;\n  undefined varUndefC8 [2];\n  undefined varUndefStackC6;\n  undefined5 varUndefStackC5;\n  uint varUintB0;\n  \n  bVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  pFVar18 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  ptrChar110 = (char **)0x7d0;\n  filePtr12 = (FILE *)0x1;\n  filePtr128 = (FILE *)0x0;\n  pFVar22 = argv;\n  do {\n    varUint16 = (uint)filePtr12;\n    unaff_RBP = (char *)(long)(int)varUint16;\n    filePtr130 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)pFVar22;\n    if (**(char **)(&pFVar22->_flags + (long)unaff_RBP * 2) == '@') {\n      uVar44 = (int)ptrChar110 - 1;\n      ptrChar110 = (char **)(ulong)uVar44;\n      if (uVar44 == 0) {\n        plVar21 = *(long **)pFVar22;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,plVar21);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&pFVar22->_flags + (long)unaff_RBP * 2) + 1;\n      intVar15 = stat(pcVar39,(stat *)varUndefC8);\n      if (-1 < intVar15) {\n        if ((varUintB0 & 0xf000) == 0x4000) {\n          plVar21 = *(long **)pFVar22;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        pFVar18 = fopen(pcVar39,\"r\");\n        if (pFVar18 != (FILE *)0x0) {\n          intVar15 = fseek(pFVar18,0,2);\n          if (((intVar15 != -1) && (sVar19 = ftell(pFVar18), sVar19 != 0xffffffffffffffff)) &&\n             (intVar15 = fseek(pFVar18,0,0), intVar15 != -1)) {\n            local_118 = (byte *)xmalloc(sVar19 + 1);\n            sVar20 = fread(local_118,1,sVar19,pFVar18);\n            if ((sVar19 == sVar20) || (intVar15 = ferror(pFVar18), intVar15 == 0)) {\n              local_118[sVar20] = 0;\n              byteVar13 = *local_118;\n              pbyteVar3 = local_118;\n              while( true ) {\n                if (byteVar13 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar13 * 2] & 0x40) == 0) break;\n                byteVar13 = pbyteVar3[1];\n                pbyteVar3 = pbyteVar3 + 1;\n              }\n              sVar19 = strlen((char *)local_118);\n              __ptr = (byte *)xmalloc(sVar19 + 1);\n              filePtr28 = (FILE *)0x0;\n              intVar15 = 0;\n              boolVar9 = false;\n              bVar47 = false;\n              boolVar8 = false;\n              longVar100 = 0;\n              pbyteVar3 = local_118;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar3 * 2] & 0x40) != 0) {\n                  pbyteVar3 = pbyteVar3 + 1;\n                }\n                if ((intVar15 == 0) || (intVar15 + -1 <= (int)longVar100)) {\n                  if (filePtr28 == (FILE *)0x0) {\n                    intVar15 = 8;\n                    filePtr28 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePtr28->_flags + longVar100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar15 = intVar15 * 2;\n                    filePtr28 = (FILE *)xrealloc(filePtr28,(long)intVar15 << 3);\n                    ppcVar31 = (char **)((long)&filePtr28->_flags + longVar100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePtr28->_flags + longVar100 * 8);\n                }\n                byteVar13 = *pbyteVar3;\n                pbyteVar8 = __ptr;\n                while (byteVar13 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar13 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar9 | boolVar8 | bVar47))) {\n                      boolVar8 = false;\n                      boolVar9 = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar8) break;\n                    pbyteVar3 = pbyteVar3 + 1;\n                    *pbyteVar8 = byteVar13;\n                    pbyteVar8 = pbyteVar8 + 1;\n                    boolVar8 = false;\n                    byteVar13 = *pbyteVar3;\n                    if (byteVar13 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar13 == 0x5c) {\n                    boolVar8 = true;\n                  }\n                  else if (bVar47) {\n                    if (byteVar13 == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVar8 = byteVar13;\n                      pbyteVar8 = pbyteVar8 + 1;\n                    }\n                  }\n                  else if (boolVar9) {\n                    if (byteVar13 != 0x22) goto LAB_001061f1;\n                    boolVar9 = false;\n                  }\n                  else if (byteVar13 == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (byteVar13 != 0x22) goto LAB_001061f1;\n                    boolVar9 = true;\n                  }\n                  ptrByte = pbyteVar3 + 1;\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar13 = *ptrByte;\n                }\nLAB_0010606f:\n                *pbyteVar8 = 0;\n                plVar21 = (long *)xstrdup(__ptr);\n                *ppcVar31 = (char *)plVar21;\n                *(undefined8 *)(filePtr28->_shortbuf + longVar100 * 8 + -0x7b) = 0;\n                byteVar13 = *pbyteVar3;\n                byteVar = (&_sch_istable)[(ulong)byteVar13 * 2];\n                while ((byteVar & 0x40) != 0) {\n                  byteVar13 = pbyteVar3[1];\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = (&_sch_istable)[(ulong)byteVar13 * 2];\n                }\n                longVar100 = longVar100 + 1;\n                if (byteVar13 == 0) {\n                  free(__ptr);\n                  if (pFVar22 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(local_118);\n          }\n          fclose(pFVar18);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(varUint16 + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d2d4 < 0) goto LAB_001073cc;\nLAB_001062d3:\n        varUint16 = (uint)filePtr12;\n        intVar15 = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar15 != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        varUint16 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        ptrVoid = PTR_DAT_0010d2e0;\n        filePtr12 = (FILE *)(ulong)varUint16;\n        if ((char)varUint16 != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = FUN_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            ptrVoid = PTR_DAT_0010d2e0;\n            intVar15 = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar15 + 1;\n            *(code **)(ptrVoid + (long)intVar15 * 8 + 0x10) = FUN_00107730;\n          }\n          else {\n            ptrUint6 = (undefined8 *)malloc(0x110);\n            if (ptrUint6 != (undefined8 *)0x0) {\n              *ptrUint6 = ptrVoid;\n              *(undefined4 *)(ptrUint6 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)ptrUint6;\n              goto LAB_0010632b;\n            }\n          }\n          lVar24 = 1;\n          do {\n            lVar35 = lVar24;\n            intVar15 = (int)pcVar46;\n            if (intVar15 <= (int)lVar35) break;\n            charVar14 = FUN_00107640(*(undefined8 *)((int *)pcVar43 + lVar35 * 2));\n            lVar24 = lVar35 + 1;\n          } while (charVar14 != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + lVar35 * 8 + -8);\n          uVar44 = intVar15 - ((int)lVar35 + -1);\n          pFVar18 = (FILE *)(ulong)uVar44;\n          if (_DAT_0010d2d4 != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (intVar15 = getopt_long(pFVar18,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar15 != -1)\n            {\n              if (intVar15 < 0x77) {\n                if (0x43 < intVar15) {\n                  switch(intVar15) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = varUint16;\n                  }\n                }\n              }\n              else if (intVar15 == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uVar44 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              FUN_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                FUN_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                FUN_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              filePtr12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                varUint16 = FUN_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                filePtr12 = (FILE *)(ulong)((uint)filePtr12 | varUint16);\n              }\n            }\n            while (lVar24 = FUN_001052a0(pcVar39), lVar24 < 1) {\n              varUint16 = 1;\nLAB_001071c4:\n              ptrInt = (int *)pcVar43;\n              pcVar43 = (char *)((long)ptrInt + 1);\n              filePtr12 = (FILE *)(ulong)((uint)filePtr12 | varUint16);\n              if ((int)uVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(filePtr12);\n              }\n              pcVar39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)ptrInt * 8 + -0x7b);\n            }\n            intVar15 = open(pcVar39,2,0);\n            if (intVar15 < 0) {\n              bfd_set_error(1);\n              FUN_00107c10(pcVar39);\nLAB_0010737f:\n              FUN_00107c10(pcVar39);\nLAB_00107387:\n              FUN_00107c20(pcVar39);\n              intVar15 = bfd_get_error();\n              if (intVar15 == 0xd) {\n                FUN_00103bd1(CONCAT53(varUndefStackC5,\n                                      CONCAT12(varUndefStackC6,CONCAT11(varUndefC8[1],varUndefC8[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar14 = bfd_check_format_matches(unaff_RBP,2,varUndefC8);\n            if (charVar14 == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                ptrUint = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *ptrUint = *ptrUint | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar14 = bfd_close(unaff_RBP);\n              if (charVar14 != '\\0') {\n                varUint16 = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            uVar27 = dcgettext(0,\"%s: no archive map to update\",5);\n            FUN_00107690(uVar27,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(DAT_0010d660);\n            sVar19 = strlen(pcVar39);\n            if ((sVar19 < 6) ||\n               (intVar15 = filename_cmp(pcVar39 + (sVar19 - 6),\"ranlib\"), intVar15 != 0)) {\n              _DAT_0010d2d4 = 0;\n            }\n            else {\n              _DAT_0010d2d4 = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          pFVar22 = (FILE *)unaff_RBP;\n          filePtr28 = pFVar18;\n          if ((int)uVar44 < 2) goto switchD_00107462_caseD_1;\n          filePtr130 = (FILE *)CONCAT71(filePtr130._1_7_,(char)varUint16);\nLAB_001063a3:\n          pFVar22 = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            varUndefC8[0] = 0x2d;\n            varUndefStackC6 = 0;\n            sVar19 = strlen(*(char **)((long)pcVar46 + 8));\n            intVar15 = (int)sVar19 + (int)pFVar18;\n            filePtr12 = (FILE *)xmalloc((long)intVar15 * 8);\n            varUint17 = *(undefined4 *)((long)pcVar46 + 4);\n            filePtr12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&filePtr12->field_0x4 = varUint17;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            filePtr128 = (FILE *)((long)pcVar46 + 0x10);\n            ptrChar110 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &filePtr12->_IO_read_ptr;\n            }\n            else {\n              local_118 = varUndefC8;\n              varUndefC8[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &filePtr12->_IO_read_end;\n              filePtr12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                varUndefC8[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(local_118);\n                ppcVar32 = &filePtr12->_IO_read_base;\n                filePtr12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  varUndefC8[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(local_118);\n                  ppcVar32 = &filePtr12->_IO_write_base;\n                  filePtr12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &filePtr12->_IO_write_ptr;\n                    varUndefC8[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(local_118);\n                    filePtr12->_IO_write_base = pcVar39;\n                    charVar14 = *(char *)((long)ppcVar31 + 4);\n                    ptrChar110 = ppcVar32;\n                    if (charVar14 != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        varUndefC8[1] = charVar14;\n                        pcVar23 = (char *)xstrdup(local_118);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = pcVar23;\n                        charVar14 = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        ptrChar110 = ppcVar32;\n                      } while (charVar14 != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            lVar24 = (long)(int)pFVar18;\n            ptrInt = (int *)pcVar46 + lVar24 * 2;\n            if (filePtr128 < ptrInt) {\n              uVar25 = lVar24 * 8 - 0x11;\n              if ((uVar25 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < ptrInt) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < ptrInt &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < ptrInt)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < ptrInt)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < ptrInt)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  ptrPtrChar = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < ptrInt;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *ptrPtrChar = *ppcVar31;\n                    ptrPtrChar = ptrPtrChar + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                varUint17 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                varUint6 = *(undefined4 *)((long)pcVar46 + 0x18);\n                varUint7 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (uVar25 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = varUint17;\n                *(undefined4 *)(ppcVar32 + 1) = varUint6;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = varUint7;\n                varUint17 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                varUint6 = *(undefined4 *)((long)pcVar46 + 0x28);\n                varUint7 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                uVar25 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = varUint17;\n                *(undefined4 *)(ppcVar32 + 3) = varUint6;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = varUint7;\n                if (uVar25 != 2) {\n                  varUint17 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  varUint6 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  varUint7 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = varUint17;\n                  *(undefined4 *)(ppcVar32 + 5) = varUint6;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = varUint7;\n                  if (uVar25 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      pcVar39 = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      varUint17 = *(undefined4 *)(pcVar39 + 4);\n                      varUint6 = *(undefined4 *)(pcVar39 + 8);\n                      varUint7 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = varUint17;\n                      *(undefined4 *)(ppcVar31 + 1) = varUint6;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = varUint7;\n                      uVar41 = uVar42;\n                    } while (uVar42 != uVar25);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)filePtr128 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + lVar24 + -2;\n            }\n            pFVar18 = (FILE *)(ulong)(intVar15 - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)filePtr12;\n          }\nLAB_001065a2:\n          while( true ) {\n            varUint16 = (uint)filePtr12;\n            uVar44 = getopt_long((ulong)pFVar18 & 0xffffffff,pcVar46,pFVar22,ppuVar36,0);\n            unaff_RBP = (char *)pFVar22;\n            if (uVar44 == 0xffffffff) break;\n            if (((uVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uVar44 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePtr28 = (FILE *)pcVar46;\n            if (uVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            FUN_0010342d(0);\n            pcVar46 = (char *)filePtr28;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uVar44 = DAT_0010d64c;\n          pFVar22 = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)pFVar18 <= _optind || (_optind < 1)))) {\n              uVar44 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            varUint16 = (int)pFVar18 - (_optind + -1);\n            pFVar18 = (FILE *)(ulong)varUint16;\n            _optind = 0;\n            if (1 < (int)varUint16) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          filePtr12 = (FILE *)((ulong)filePtr130 & 0xff);\n          varUint16 = (uint)filePtr12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              FUN_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePtr28 = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uVar44 == 3) goto LAB_00106abc;\n                  if (uVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 == 3) || (uVar44 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  varUint17 = FUN_00107650();\n                    \n                  xexit(varUint17);\n                }\nLAB_00106abc:\n                if (uVar44 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar15 = (int)unaff_RBP;\n                  if (*(char **)((long)ppuVar36 + (long)intVar15 * 2 * 4) == (char *)0x0) {\n                    uVar27 = dcgettext(0,\"`N\\' missing value.\",5);\n                    FUN_00107690(uVar27);\n                    uVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uVar44 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(intVar15 + 1);\n                  lVar24 = strtol(*(char **)((long)ppuVar36 + (long)intVar15 * 2 * 4),(char **)0x0,10)\n                  ;\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)lVar24;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              lVar24 = (long)(int)unaff_RBP;\n              pFVar22 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)ppuVar36 + lVar24 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              pFVar22 = (FILE *)((long)ppuVar36 + (lVar24 + 1) * 2 * 4);\n              if (*(FILE **)pFVar22 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                pFVar22 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                pFVar18 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)pFVar18;\n                  pFVar18 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + lVar24 * 2 * 4) + (long)pFVar18 * 2) !=\n                         0);\n              }\n              ptrUint6 = (undefined8 *)FUN_00105300();\n              pFVar18 = pFVar22;\n              if (DAT_0010d64c == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)ptrUint6 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)pFVar22;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  FUN_00105480(ptrUint6,FUN_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                sVar19 = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(sVar19 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",ptrUint6);\n                if (DAT_0010d620 == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  lVar24 = bfd_find_target(\"binary\",DAT_0010d620);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (lVar24 != 0) {\n                    charVar14 = bfd_set_format(DAT_0010d620,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    charVar14 = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    filePtr28 = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (filePtr28 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar14 = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    lVar24 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (lVar24 == 0) goto LAB_00106803;\n                    intVar15 = (int)pcVar43;\n                    filePtr130 = (FILE *)((long)(intVar15 + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(filePtr130,\"Cannot reset libdeps record type.\");\n                    if (intVar15 == 0) {\n                      lVar24 = 0;\n                    }\n                    else {\n                      varUint17 = *(undefined4 *)&pFVar22->field_0x4;\n                      *(int *)unaff_RBP = pFVar22->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = varUint17;\n                      lVar24 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = filePtr130[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&pFVar22->_flags;\n                        pFVar22 = (FILE *)((long)pFVar22 + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + lVar24) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar15 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)filePtr130) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      pFVar22 = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)pFVar22;\n                if (pFVar22 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                pFVar18 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)pFVar22;\n                if ((pFVar22 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  FUN_00105570(ptrUint6,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)pFVar22;\nswitchD_00106ed8_caseD_3:\n                FUN_00105480(ptrUint6,FUN_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)pFVar22;\nswitchD_00106ed8_caseD_4:\n                FUN_00105480(ptrUint6,FUN_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (pFVar22 == (FILE *)0x0) break;\nLAB_00106afb:\n                pFVar18 = (FILE *)(ptrUint6 + 0x1e);\n                do {\n                  filePtr12 = pFVar18;\n                  if (*(FILE **)pFVar22 == (FILE *)0x0) {\nLAB_00106b9f:\n                    FUN_001058b0(ptrUint6);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    plVar21 = *(long **)filePtr12;\n                    pcVar46 = *(char **)pFVar22;\n                    if (plVar21 == (long *)0x0) {\n                      uVar27 = *ptrUint6;\n                      varUint30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      FUN_00107690(varUint30,pcVar46,uVar27);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    lVar24 = *plVar21;\n                    uVar27 = FUN_00105830(pcVar46,ptrUint6);\n                    intVar15 = filename_cmp(uVar27,lVar24);\n                    if (intVar15 == 0) break;\n                    filePtr12 = (FILE *)(*(long **)filePtr12 + 0x1e);\n                  }\n                  *(long **)filePtr12 = (long *)plVar21[0x1e];\n                  pplVar29 = (long **)FUN_00105870(pFVar18,3,0);\n                  bVar47 = DAT_0010d60c != 0;\n                  ptrLong = *pplVar29;\n                  *pplVar29 = plVar21;\n                  plVar21[0x1e] = (long)ptrLong;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)pFVar22);\n                  }\n                  pFVar22 = (FILE *)&pFVar22->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            FUN_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar15 = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar15);\n          FUN_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        varUint17 = bfd_get_error();\n        pFVar22 = (FILE *)bfd_errmsg(varUint17);\n        uVar27 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar15 = FUN_00107690(uVar27,\"x86_64-pc-linux-gnu\",pFVar22);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)pcVar39;\n          filePtr28 = (FILE *)pcVar46;\n          switch(intVar15) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            varUint16 = (uint)filePtr12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)pFVar22;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)pFVar22;\nLAB_00106803:\n        uVar27 = dcgettext(0,pcVar39,5);\n        FUN_00107690(uVar27);\nLAB_00106814:\n        intVar15 = (int)pcVar46;\n        filePtr28 = (FILE *)xmalloc(8);\n        *(long **)filePtr28 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar15 = 0;\n          }\n          else {\n            lVar24 = 1;\n            do {\n              intVar15 = (int)lVar24;\n              lVar35 = lVar24 * 2;\n              lVar24 = lVar24 + 1;\n            } while (*(long *)((int *)pcVar43 + lVar35) != 0);\n          }\n          pFVar22 = (FILE *)xmalloc((long)(intVar15 + 1) << 3);\n          plVar21 = *(long **)pcVar43;\n          lVar24 = 0;\n          while (plVar21 != (long *)0x0) {\n            uVar27 = xstrdup();\n            *(undefined8 *)((long)&pFVar22->_flags + lVar24) = uVar27;\n            plVar21 = *(long **)((char *)((long)pcVar43 + 0x83) + lVar24 + -0x7b);\n            lVar24 = lVar24 + 8;\n          }\n          *(undefined8 *)((long)&pFVar22->_flags + lVar24) = 0;\nLAB_0010610a:\n          intVar15 = (int)pcVar46;\n          pcVar43 = (char *)pFVar22;\n          if (*(long **)filePtr28 == (long *)0x0) goto LAB_00106a80;\n          lVar24 = 0;\n          do {\n            lVar34 = lVar24 + 1;\n            lVar35 = lVar24 * 8;\n            lVar24 = lVar34;\n          } while (*(long *)(filePtr28->_shortbuf + lVar35 + -0x7b) != 0);\n          varSizeT108 = lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 = 0;\n          varSizeT108 = 0;\n        }\n        lVar24 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)pcVar43 + lVar24));\n        pFVar22 = (FILE *)xrealloc(pcVar43,(lVar34 + 1 + (long)intVar15) * 8);\n        uVar44 = intVar15 + -1 + (int)lVar34;\n        pcVar46 = (char *)(ulong)uVar44;\n        memmove(&pFVar22->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&pFVar22->_IO_read_ptr + (long)filePtr130),\n                (long)(int)(intVar15 - varUint16) << 3);\n        memcpy((void *)((long)&filePtr130->_flags + (long)&pFVar22->_flags),filePtr28,varSizeT108);\n        free(filePtr28);\n        free(local_118);\n        fclose(pFVar18);\n        varUint16 = (int)filePtr128 + 1;\n        filePtr12 = filePtr130;\n        pcVar43 = (char *)pFVar22;\n        filePtr130 = filePtr28;\n        if ((int)varUint16 < (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    varUint16 = varUint16 + 1;\n    filePtr128 = filePtr12;\nLAB_001061ce:\n    filePtr12 = (FILE *)(ulong)varUint16;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar15 = getopt_long((ulong)pFVar18 & 0xffffffff,pcVar46,pFVar22,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)pFVar22;\n  if (intVar15 == -1) goto LAB_00106680;\n  if ((0x14 < intVar15 - 100U) || ((0x117201UL >> ((byte)(intVar15 - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  uVar27 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  FUN_00107920(uVar27);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)pFVar18 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  iVar45 = 0;\n  intVar15 = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  ptrVoid8 = ptrUint6;\n  if (intVar15 == 0) {\n    *(byte *)((long)ptrUint6 + 0x49) = *(byte *)((long)ptrUint6 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      plVar21 = ptrVoid8 + 0x1e;\n      if ((undefined8 *)*plVar21 == (undefined8 *)0x0) break;\n      uVar27 = *(undefined8 *)*plVar21;\n      varUint30 = FUN_00105830(*(FILE **)unaff_RBP,ptrUint6);\n      intVar15 = filename_cmp(varUint30,uVar27);\n      if ((intVar15 == 0) &&\n         ((DAT_0010d634 == '\\0' || (iVar45 = iVar45 + 1, iVar45 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *plVar21 = *(long *)(*plVar21 + 0xf0);\n        pFVar18 = filePtr12;\n        goto LAB_00106d38;\n      }\n      ptrVoid8 = (undefined8 *)*plVar21;\n    }\n    if (DAT_0010d60c != 0) {\n      pFVar22 = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,pFVar22);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_close",
                "FUN_00105300",
                "FUN_00105830",
                "stat",
                "memmove",
                "bfd_init",
                "FUN_00103a78",
                "strlen",
                "getopt_long",
                "ferror",
                "FUN_00107890",
                "xexit",
                "FUN_001075e0",
                "FUN_00105870",
                "FUN_00107c10",
                "strtol",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_errmsg",
                "bfd_find_target",
                "bfd_set_error",
                "bindtextdomain",
                "setlocale",
                "fprintf",
                "FUN_00107c20",
                "bfd_bwrite",
                "fseek",
                "bfd_fdopenr",
                "textdomain",
                "bfd_create",
                "printf",
                "xrealloc",
                "FUN_00107730",
                "fclose",
                "FUN_00107740",
                "FUN_0010342d",
                "xstrdup",
                "strcmp",
                "FUN_00103e95",
                "FUN_00105570",
                "fileno",
                "fopen",
                "FUN_00107cc0",
                "lbasename",
                "bfd_plugin_set_program_name",
                "FUN_0010394a",
                "filename_cmp",
                "FUN_001058b0",
                "bfd_plugin_set_plugin",
                "free",
                "isatty",
                "malloc",
                "bfd_set_format",
                "FUN_00107650",
                "dcgettext",
                "memcpy",
                "xmalloc",
                "FUN_00103bd1",
                "FUN_00105480",
                "FUN_00107920",
                "fread",
                "bfd_make_readable",
                "FUN_001052a0",
                "FUN_00107690",
                "xmalloc_set_program_name",
                "bfd_make_writable",
                "bfd_set_error_program_name",
                "open",
                "FUN_00107640",
                "bfd_set_default_target",
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "parse_files_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatList",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "matchingFormats",
                "fputc": "writeCharacter",
                "fflush": "flushBuffer",
                "fprintf": "printFormatted",
                "free": "freeMemory",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatList)\n\n{\n  undefined8 matchingFormats;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(standardOutput);\n  matchingFormats = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatString,matchingFormats);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  freeMemory(formatList);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "fprintf",
                "fputc",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_with_error_00107c10",
                "xexit": "exitCode"
            },
            "code": "\nvoid exitWithError_00107c10(void)\n\n{\n  FUN_00107c20();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "exit_with_error_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "open_and_convert_bfd_files_00102710",
                "plVar1": "current_archived_file_ptr",
                "cVar2": "format_check_result",
                "bVar3": "thin_library_flag",
                "iVar4": "error_code",
                "lVar5": "file_descriptor",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "puVar8": "output_bfd_ptr",
                "unaff_RBP": "other_bfd_ptr",
                "in_stack_00000008": "stack_arg"
            },
            "code": "\n\n\nundefined8 * open_and_convert_bfd_files_00102710(void)\n\n{\n  long *current_archived_file_ptr;\n  char format_check_result;\n  byte thin_library_flag;\n  int error_code;\n  long file_descriptor;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *output_bfd_ptr;\n  undefined8 other_bfd_ptr;\n  undefined8 stack_arg;\n  \n  file_descriptor = bfd_openr();\n  if (file_descriptor != 0) {\n    format_check_result = bfd_check_format(file_descriptor,1);\n    if (format_check_result != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file_descriptor + 8);\n    }\n    bfd_close(file_descriptor);\n  }\n  output_bfd_ptr = (undefined8 *)bfd_openw();\n  if (((output_bfd_ptr != (undefined8 *)0x0) && (format_check_result = bfd_set_format(output_bfd_ptr,2), format_check_result != '\\0')) &&\n     (format_check_result = bfd_close(output_bfd_ptr), format_check_result != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  FUN_00107c10();\n  do {\n    thin_library_flag = *(byte *)((long)output_bfd_ptr + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (thin_library_flag != 0) {\n        library_name = *output_bfd_ptr;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(error_message,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (thin_library_flag == 0) {\n      library_name = *output_bfd_ptr;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(error_message,library_name);\nLAB_001027cb:\n      FUN_00107c20();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(stack_arg);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      current_archived_file_ptr = output_bfd_ptr + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(output_bfd_ptr,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(output_bfd_ptr,file_descriptor)) {\n        *current_archived_file_ptr = file_descriptor;\n        current_archived_file_ptr = (long *)(file_descriptor + 0xf0);\n      }\n      *current_archived_file_ptr = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_bfd_ptr;\n      }\n      do {\n        FUN_00107c10();\nLAB_00102826:\n        library_name = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(library_name);\nLAB_001053b7:\n        DAT_0010d618 = other_bfd_ptr;\n        output_bfd_ptr = (undefined8 *)bfd_openr();\n      } while (output_bfd_ptr == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(output_bfd_ptr,2,&stack0x00000008);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(output_bfd_ptr,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_openr",
                "bfd_check_format",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "open_and_convert_bfd_files_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "read_and_process_files_00103e95",
                "pplVar1": "doublePointerToArray",
                "cVar2": "character",
                "ppFVar3": "doublePointerToFile",
                "pFVar4": "filePointer",
                "plVar5": "longPointer",
                "uVar6": "unsignedVar6",
                "pbVar7": "bytePointer",
                "iVar8": "integerVar8",
                "pcVar10": "charPointer",
                "uVar11": "unsignedVar11",
                "iVar9": "integerVar9",
                "plVar12": "longPointer2",
                "sVar13": "size",
                "pvVar14": "voidPointer",
                "pcVar15": "charPointer2",
                "pcVar16": "charPointer3",
                "lVar17": "longVar17",
                "lVar18": "longVar18",
                "lVar21": "longVar21",
                "uVar19": "unsignedVar19",
                "uVar20": "unsignedVar20",
                "lVar31": "longVar31",
                "puVar22": "unsignedLongPointer",
                "puVar23": "unsignedLongPointer2",
                "uVar24": "unsignedVar24",
                "iVar25": "integerVar25",
                "uVar26": "unsignedVar26",
                "ppcVar27": "doublePointerToChar",
                "bVar28": "booleanVar28",
                "ppcVar29": "doublePointerToChar2",
                "bVar30": "byteVar30",
                "pbVar32": "bytePointer2",
                "pbVar33": "bytePointer3",
                "piVar34": "integerPointer",
                "pbVar35": "bytePointer5",
                "uVar36": "unsignedVar36",
                "iVar37": "integerVar37",
                "ppcVar38": "doublePointerToChar3",
                "bVar39": "byteVar39",
                "auVar40": "undefinedVar40",
                "auVar41": "undefinedVar41",
                "local_828": "localCharPointer1",
                "local_820": "localCharPointer2",
                "local_818": "localLong",
                "local_810": "localDoublePointerToChar",
                "local_800": "localInt"
            },
            "code": "\n\n\nvoid readAndProcessFiles_00103e95(void)\n\n{\n  long **doublePointerToArray;\n  char character;\n  FILE **doublePointerToFile;\n  FILE *filePointer;\n  long *longPointer;\n  undefined8 unsignedVar6;\n  byte *bytePointer;\n  int integerVar8;\n  char *charPointer;\n  undefined8 unsignedVar11;\n  int integerVar9;\n  long *longPointer2;\n  size_t size;\n  void *voidPointer;\n  char *charPointer2;\n  char *charPointer3;\n  long longVar17;\n  long longVar18;\n  ulong unsignedVar19;\n  uint unsignedVar20;\n  long longVar21;\n  undefined8 *unsignedLongPointer;\n  undefined8 *unsignedLongPointer2;\n  uint unsignedVar24;\n  int integerVar25;\n  ulong unsignedVar26;\n  char **doublePointerToChar;\n  bool booleanVar28;\n  char **doublePointerToChar2;\n  byte byteVar30;\n  long longVar31;\n  byte *bytePointer2;\n  byte *bytePointer3;\n  int *integerPointer;\n  byte *bytePointer5;\n  uint unsignedVar36;\n  int integerVar37;\n  char **doublePointerToChar3;\n  byte byteVar39;\n  undefined undefinedVar40 [16];\n  undefined undefinedVar41 [16];\n  char *localCharPointer1;\n  char *localCharPointer2;\n  long localLong;\n  char **localDoublePointerToChar;\n  int localInt;\n  uint local_7fc;\n  byte *local_7f8;\n  stat local_7d0;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  byteVar39 = 0;\n  longVar18 = 0;\n  DAT_0010d550 = -2;\n  doublePointerToChar2 = local_678;\n  localInt = 0;\n  localCharPointer1 = local_740;\n  localLong = 200;\n  localCharPointer2 = localCharPointer1;\n  localDoublePointerToChar = doublePointerToChar2;\nLAB_00103ee9:\n  *localCharPointer1 = (char)longVar18;\n  if (localCharPointer2 + localLong + -1 <= localCharPointer1) {\n    longVar21 = (long)localCharPointer1 - (long)localCharPointer2;\n    longVar17 = longVar21 + 1;\n    if (localLong < 10000) {\n      longVar31 = localLong * 2;\n      localLong = 10000;\n      if (longVar31 < 0x2711) {\n        localLong = longVar31;\n      }\n      charPointer = (char *)malloc(localLong * 9 + 7);\n      if (charPointer != (char *)0x0) {\n        longVar31 = longVar17 * 8;\n        charPointer2 = localCharPointer2;\n        charPointer3 = charPointer;\n        for (; longVar17 != 0; longVar17 = longVar17 + -1) {\n          *charPointer3 = *charPointer2;\n          charPointer2 = charPointer2 + (ulong)byteVar39 * -2 + 1;\n          charPointer3 = charPointer3 + (ulong)byteVar39 * -2 + 1;\n        }\n        doublePointerToChar3 = (char **)(charPointer + localLong);\n        doublePointerToChar2 = doublePointerToChar3;\n        for (; longVar31 != 0; longVar31 = longVar31 + -1) {\n          *(undefined *)doublePointerToChar2 = *(undefined *)localDoublePointerToChar;\n          localDoublePointerToChar = (char **)((long)localDoublePointerToChar + (ulong)byteVar39 * -2 + 1);\n          doublePointerToChar2 = (char **)((long)doublePointerToChar2 + (ulong)byteVar39 * -2 + 1);\n        }\n        if (localCharPointer2 != local_740) {\n          free(localCharPointer2);\n        }\n        localCharPointer1 = charPointer + longVar21;\n        doublePointerToChar2 = doublePointerToChar3 + longVar21;\n        localCharPointer2 = charPointer;\n        localDoublePointerToChar = doublePointerToChar3;\n        if (charPointer + localLong + -1 <= localCharPointer1) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    FUN_001031a5();\nLAB_0010524c:\n    charPointer = localCharPointer2;\n    if (localCharPointer2 == local_740) {\n      return;\n    }\nLAB_00105265:\n    free(charPointer);\n    return;\n  }\nLAB_00103fd8:\n  integerVar37 = (int)longVar18;\n  if (integerVar37 == 3) goto LAB_0010524c;\n  character = (&DAT_0010a200)[integerVar37];\n  if (character != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          FUN_00103df9();\n          unsignedLongPointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          unsignedVar11 = FUN_001033d6(DAT_0010d590);\n          *unsignedLongPointer = unsignedVar11;\n        }\n        FUN_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      bytePointer2 = DAT_0010d5b0;\n      bytePointer5 = DAT_0010d5b0;\n      unsignedVar20 = DAT_0010d5d0;\nLAB_001040d4:\n      unsignedVar19 = (ulong)unsignedVar20;\n      unsignedVar26 = (ulong)local_7fc;\n      booleanVar28 = false;\n      do {\n        byteVar30 = (&DAT_0010ab00)[*bytePointer5];\n        if (*(short *)(&DAT_0010a980 + (long)(int)unsignedVar19 * 2) != 0) {\n          booleanVar28 = true;\n          unsignedVar26 = unsignedVar19 & 0xffffffff;\n          local_7f8 = bytePointer5;\n        }\n        while( true ) {\n          integerVar8 = (int)unsignedVar19;\n          longVar18 = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)integerVar8 * 2) + (uint)byteVar30);\n          if (integerVar8 == *(short *)(&DAT_0010a440 + longVar18 * 2)) break;\n          unsignedVar19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integerVar8 * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)integerVar8 * 2)) {\n            byteVar30 = (&DAT_0010a7c0)[(int)(uint)byteVar30];\n          }\n        }\n        bytePointer5 = bytePointer5 + 1;\n        unsignedVar19 = (ulong)*(short *)(&DAT_0010a240 + longVar18 * 2);\n      } while (*(short *)(&DAT_0010a640 + unsignedVar19 * 2) != 0xc2);\n      local_7fc = (uint)unsignedVar26;\n      bytePointer3 = bytePointer2;\n      if (booleanVar28) {\n        DAT_0010d5b8 = local_7f8;\n        DAT_0010d5c0 = local_7fc;\n      }\nLAB_0010419f:\n      integerVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)unsignedVar19 * 2);\n      if (integerVar8 == 0) {\n        integerVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        bytePointer5 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)bytePointer5 - (int)bytePointer3;\n      DAT_0010d588 = *bytePointer5;\n      DAT_0010d5b0 = bytePointer5;\n      DAT_0010d5c8 = bytePointer3;\n      *bytePointer5 = 0;\nLAB_001041f0:\n      bytePointer2 = DAT_0010d5c8;\n      longVar18 = DAT_0010d5a0;\n      switch(integerVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        FUN_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      longVar18 = (long)integerVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        integerVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          integerVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    integerVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    unsignedVar20 = character + integerVar37;\n    if ((0x22 < unsignedVar20) || (integerVar37 != (char)(&DAT_0010a0a0)[(int)unsignedVar20])) goto LAB_001049db;\n    character = (&DAT_0010a060)[(int)unsignedVar20];\n    longVar18 = (long)character;\n    if (character < '\\x01') {\n      integerVar37 = -(int)character;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    localInt = localInt + -1 + (uint)(localInt == 0);\n    doublePointerToChar2 = doublePointerToChar2 + 1;\n    *doublePointerToChar2 = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  integerVar37 = (int)(char)(&DAT_0010a020)[(int)longVar18];\n  if ((&DAT_0010a020)[(int)longVar18] == '\\0') {\n    if (localInt == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      FUN_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[longVar18] != -0xe) &&\n             (unsignedVar20 = (int)(char)(&DAT_0010a200)[longVar18] + 1, unsignedVar20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)unsignedVar20] == '\\x01')) &&\n           (longVar18 = (long)(char)(&DAT_0010a060)[(int)unsignedVar20],\n           '\\0' < (char)(&DAT_0010a060)[(int)unsignedVar20])) goto LAB_00105227;\n        if (localCharPointer2 == localCharPointer1) goto LAB_0010524c;\n        localCharPointer1 = localCharPointer1 + -1;\n        doublePointerToChar2 = doublePointerToChar2 + -1;\n        longVar18 = (long)*localCharPointer1;\n      } while( true );\n    }\n    if (localInt != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  unsignedVar11 = DAT_0010d660;\n  doublePointerToChar = DAT_0010d558;\n  character = (&DAT_00109fe0)[integerVar37];\n  doublePointerToChar3 = (char **)doublePointerToChar2[1 - character];\n  switch(integerVar37) {\n  case 2:\n  case 6:\n    FUN_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    FUN_001031a5();\n    break;\n  case 0x17:\n    unsignedLongPointer = (undefined8 *)*doublePointerToChar2;\n    if (DAT_0010d558 == (char **)0x0) {\n      charPointer = \"%s: no open archive\\n\";\nLAB_00104b62:\n      charPointer = (char *)dcgettext(0,charPointer,5);\n      fprintf(_stderr,charPointer,unsignedVar11);\n      FUN_0010315d();\n    }\n    else {\n      for (; unsignedLongPointer != (undefined8 *)0x0; unsignedLongPointer = (undefined8 *)unsignedLongPointer[1]) {\n        for (unsignedLongPointer2 = (undefined8 *)DAT_0010d558[0x1f]; unsignedLongPointer2 != (undefined8 *)0x0;\n            unsignedLongPointer2 = (undefined8 *)unsignedLongPointer2[0x1e]) {\n          integerVar8 = filename_cmp(*unsignedLongPointer2);\n          if (integerVar8 == 0) {\n            FUN_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*unsignedLongPointer,0);\n        unsignedVar6 = DAT_0010d660;\n        unsignedVar11 = *unsignedLongPointer;\n        charPointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPointer,unsignedVar6,unsignedVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    unsignedLongPointer = (undefined8 *)*doublePointerToChar2;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      charPointer = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; unsignedLongPointer != (undefined8 *)0x0; unsignedLongPointer = (undefined8 *)unsignedLongPointer[1]) {\n      booleanVar28 = false;\n      doublePointerToChar = DAT_0010d558 + 0x1f;\n      for (charPointer = DAT_0010d558[0x1f]; charPointer != (char *)0x0;\n          charPointer = *(char **)(charPointer + 0xf0)) {\n        integerVar8 = filename_cmp();\n        if (integerVar8 == 0) {\n          charPointer2 = (char *)bfd_openr(*unsignedLongPointer,0);\n          unsignedVar11 = DAT_0010d660;\n          if (charPointer2 == (char *)0x0) {\n            unsignedVar6 = *unsignedLongPointer;\n            charPointer2 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,charPointer2,unsignedVar11,unsignedVar6);\n            FUN_0010315d();\n          }\n          else {\n            *doublePointerToChar = charPointer2;\n            booleanVar28 = true;\n            *(undefined8 *)(charPointer2 + 0xf0) = *(undefined8 *)(charPointer + 0xf0);\n          }\n        }\n        else {\n          doublePointerToChar = (char **)(charPointer + 0xf0);\n        }\n      }\n      if (!booleanVar28) {\n        charPointer = (char *)bfd_openr(*unsignedLongPointer,0);\n        unsignedVar6 = DAT_0010d660;\n        unsignedVar11 = *unsignedLongPointer;\n        charPointer2 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPointer2,unsignedVar6,unsignedVar11);\n        unsignedVar11 = DAT_0010d660;\n        if (charPointer == (char *)0x0) {\n          unsignedVar6 = *unsignedLongPointer;\n          charPointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,charPointer,unsignedVar11,unsignedVar6);\n          FUN_0010315d();\n        }\n        else {\n          *doublePointerToChar = charPointer;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    unsignedLongPointer = (undefined8 *)*doublePointerToChar2;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; unsignedLongPointer != (undefined8 *)0x0; unsignedLongPointer = (undefined8 *)unsignedLongPointer[1]) {\n      booleanVar28 = false;\n      doublePointerToChar = DAT_0010d558 + 0x1f;\n      for (unsignedLongPointer2 = (undefined8 *)DAT_0010d558[0x1f]; unsignedVar11 = DAT_0010d660,\n          unsignedLongPointer2 != (undefined8 *)0x0; unsignedLongPointer2 = (undefined8 *)unsignedLongPointer2[0x1e]) {\n        integerVar8 = filename_cmp(*unsignedLongPointer2,*unsignedLongPointer);\n        if (integerVar8 == 0) {\n          booleanVar28 = true;\n          *doublePointerToChar = (char *)unsignedLongPointer2[0x1e];\n        }\n        else {\n          doublePointerToChar = (char **)(unsignedLongPointer2 + 0x1e);\n        }\n      }\n      if (!booleanVar28) {\n        unsignedVar6 = *unsignedLongPointer;\n        charPointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPointer,unsignedVar11,unsignedVar6);\n        FUN_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    unsignedLongPointer = (undefined8 *)*doublePointerToChar2;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; unsignedLongPointer != (undefined8 *)0x0; unsignedLongPointer = (undefined8 *)unsignedLongPointer[1]) {\n      charPointer = (char *)bfd_openr(*unsignedLongPointer,\"plugin\");\n      unsignedVar11 = DAT_0010d660;\n      doublePointerToChar = DAT_0010d558;\n      if (charPointer == (char *)0x0) {\n        unsignedVar6 = *unsignedLongPointer;\n        charPointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,charPointer,unsignedVar11,unsignedVar6);\n        FUN_0010315d();\n      }\n      else {\n        *(char **)(charPointer + 0xf0) = DAT_0010d558[0x1f];\n        doublePointerToChar[0x1f] = charPointer;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    charPointer = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    charPointer2 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(charPointer2,charPointer);\n    for (charPointer = DAT_0010d558[0x1f]; charPointer != (char *)0x0; charPointer = *(char **)(charPointer + 0xf0))\n    {\n      FUN_00103ddc(charPointer,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(doublePointerToChar);\n    charPointer = DAT_0010d570;\n    integerVar8 = stat(DAT_0010d570,&local_7d0);\n    if ((integerVar8 != 0) && (DAT_0010d558 = (char **)bfd_openw(charPointer,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    FUN_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    FUN_00103c60(*doublePointerToChar2,0);\n    break;\n  case 0x1f:\n    FUN_00103c60(*doublePointerToChar2,1);\n    break;\n  case 0x20:\n    charPointer = *doublePointerToChar2;\n    if (DAT_0010d558 == (char **)0x0) {\n      charPointer = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    longVar18 = FUN_00105300(doublePointerToChar2[-1],0);\n    if (longVar18 != 0) {\n      FUN_001032a8(longVar18,FUN_0010312d,charPointer);\n    }\n    break;\n  case 0x21:\n    charPointer = *doublePointerToChar2;\n    charPointer2 = doublePointerToChar2[-1];\n    unsignedVar11 = FUN_00105300(doublePointerToChar2[-2],0);\n    if (charPointer == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(charPointer,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        FUN_001032a8(unsignedVar11,FUN_00103ddc,charPointer2);\n        bfd_close(unsignedVar11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      charPointer3 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,charPointer3,charPointer);\n    }\n    FUN_001032a8(unsignedVar11,FUN_00103ddc,charPointer2);\n    bfd_close(unsignedVar11);\n    break;\n  case 0x22:\n    doublePointerToChar3 = (char **)*doublePointerToChar2;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    doublePointerToChar3 = (char **)0x0;\n    break;\n  case 0x24:\n    doublePointerToChar3 = (char **)doublePointerToChar2[-1];\n    break;\n  case 0x26:\n    doublePointerToChar3 = (char **)malloc(0x10);\n    charPointer = doublePointerToChar2[-2];\n    *doublePointerToChar3 = *doublePointerToChar2;\n    doublePointerToChar3[1] = charPointer;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  longVar18 = (long)character;\n  localCharPointer1 = localCharPointer1 + -longVar18;\n  doublePointerToChar2[1 - longVar18] = (char *)doublePointerToChar3;\n  doublePointerToChar2 = doublePointerToChar2 + (1 - longVar18);\n  unsignedVar20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[integerVar37] + -0x18] + (int)*localCharPointer1;\n  if ((unsignedVar20 < 0x23) && (*localCharPointer1 == (&DAT_0010a0a0)[(int)unsignedVar20])) {\n    longVar18 = (long)(char)(&DAT_0010a060)[(int)unsignedVar20];\n  }\n  else {\n    longVar18 = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[integerVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integerVar8 = ((int)bytePointer5 - (int)DAT_0010d5c8) + -1;\n  *bytePointer5 = DAT_0010d588;\n  doublePointerToArray = (long **)(DAT_0010d5a8 + longVar18 * 8);\n  doublePointerToFile = (FILE **)*doublePointerToArray;\n  if (*(int *)(doublePointerToFile + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)doublePointerToFile + 0x1c);\n    *(undefined4 *)(doublePointerToFile + 7) = 1;\n    *doublePointerToFile = DAT_0010d590;\n  }\n  bytePointer = DAT_0010d5b0;\n  filePointer = doublePointerToFile[1];\n  undefinedVar40._8_8_ = filePointer;\n  undefinedVar40._0_8_ = doublePointerToFile;\n  if ((byte *)((long)&filePointer->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&filePointer->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      undefinedVar40 = FUN_001033b0();\n    }\n    if (*(int *)(undefinedVar40._0_8_ + 0x34) != 0) {\n      unsignedVar20 = (int)((long)bytePointer - (long)bytePointer2) - 1;\n      for (longVar18 = 0; (int)longVar18 < (int)unsignedVar20; longVar18 = longVar18 + 1) {\n        *(byte *)(undefinedVar40._8_8_ + longVar18) = bytePointer2[longVar18];\n      }\n      longPointer2 = *doublePointerToArray;\n      if (*(int *)(longPointer2 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)longPointer2 + 0x1c) = 0;\nLAB_0010475e:\n        filePointer = DAT_0010d590;\n        if (unsignedVar20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            FUN_00103df9();\n            unsignedLongPointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            unsignedVar11 = FUN_001033d6(filePointer);\n            *unsignedLongPointer = unsignedVar11;\n          }\n          longVar18 = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            longVar18 = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          integerVar9 = 1;\n          FUN_001031cf(longVar18);\n          FUN_001030ed();\n        }\n        else {\n          integerVar9 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          longPointer = *doublePointerToArray;\n          unsignedVar24 = ~unsignedVar20 + *(int *)(longPointer2 + 3);\n          if (0 < (int)unsignedVar24) break;\n          unsignedVar24 = (int)DAT_0010d5b0 - (int)(void *)longPointer[1];\n          if (*(int *)(longPointer + 4) == 0) {\n            longPointer[1] = 0;\nLAB_00104626:\n            FUN_001033b0();\n            break;\n          }\n          integerVar9 = *(int *)(longPointer + 3);\n          integerVar25 = integerVar9;\n          if (integerVar9 < 1) {\n            integerVar25 = integerVar9 / 8;\n          }\n          *(int *)(longPointer + 3) = integerVar25 + integerVar9;\n          voidPointer = realloc((void *)longPointer[1],(long)(integerVar25 + integerVar9 + 2));\n          longPointer[1] = (long)voidPointer;\n          if (voidPointer == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)voidPointer + (long)(int)unsignedVar24);\n          longPointer2 = *doublePointerToArray;\n        }\n        if (0x2000 < (int)unsignedVar24) {\n          unsignedVar24 = 0x2000;\n        }\n        unsignedVar26 = (ulong)unsignedVar24;\n        if (*(int *)((long)longPointer + 0x24) == 0) {\n          integerPointer = __errno_location();\n          unsignedVar26 = (ulong)(int)unsignedVar24;\n          unsignedVar19 = (ulong)(int)unsignedVar20;\n          *integerPointer = 0;\n          goto LAB_001046c7;\n        }\n        unsignedVar19 = 0;\n        integerPointer = (int *)(long)(int)unsignedVar20;\n        do {\n          integerVar9 = getc(DAT_0010d590);\n          unsignedVar36 = (uint)unsignedVar19;\n          if (integerVar9 == -1) {\n            integerVar9 = ferror(DAT_0010d590);\n            unsignedVar24 = unsignedVar36;\n            if (integerVar9 != 0) {\n              do {\n                charPointer = \"input in flex scanner failed\";\n                FUN_001033b0();\n                do {\n                  *integerPointer = 0;\n                  clearerr((FILE *)charPointer);\nLAB_001046c7:\n                  size = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + unsignedVar19),1,unsignedVar26,DAT_0010d590);\n                  charPointer = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)size;\n                  unsignedVar24 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (integerVar9 = ferror(DAT_0010d590), unsignedVar24 = DAT_0010d598, integerVar9 == 0))\n                  goto LAB_00104738;\n                } while (*integerPointer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (integerVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)unsignedVar20 +\n             (long)(int)unsignedVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            unsignedVar24 = unsignedVar36 + 1;\n            break;\n          }\n          unsignedVar19 = (ulong)(unsignedVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)integerPointer) =\n               (char)integerVar9;\n          integerPointer = (int *)((long)integerPointer + 1);\n        } while (unsignedVar24 != unsignedVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = unsignedVar24;\n        unsignedVar24 = DAT_0010d598;\n        integerVar9 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (unsignedVar24 == 0) goto LAB_0010475e;\n      }\n      longPointer2 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      longVar18 = *longPointer2;\n      unsignedVar20 = unsignedVar20 + DAT_0010d598;\n      if (*(int *)(longVar18 + 0x18) < (int)unsignedVar20) {\n        integerVar25 = ((int)DAT_0010d598 >> 1) + unsignedVar20;\n        voidPointer = realloc(*(void **)(longVar18 + 8),(long)integerVar25);\n        *(void **)(longVar18 + 8) = voidPointer;\n        undefinedVar41._8_8_ = longPointer2;\n        undefinedVar41._0_8_ = *longPointer2;\n        if (*(long *)(*longPointer2 + 8) == 0) {\n          undefinedVar41 = FUN_001033b0();\n        }\n        longPointer2 = undefinedVar41._8_8_;\n        *(int *)(undefinedVar41._0_8_ + 0x18) = integerVar25 + -2;\n      }\n      DAT_0010d598 = unsignedVar20;\n      *(undefined *)(*(long *)(*longPointer2 + 8) + (long)(int)unsignedVar20) = 0;\n      *(undefined *)(*(long *)(*longPointer2 + 8) + 1 + (long)(int)unsignedVar20) = 0;\n      bytePointer2 = *(byte **)(*longPointer2 + 8);\n      DAT_0010d5c8 = bytePointer2;\n      if (integerVar9 == 1) goto LAB_001048a4;\n      if (integerVar9 == 2) goto LAB_001048ca;\n      bytePointer5 = bytePointer2 + integerVar8;\n      DAT_0010d5b0 = bytePointer5;\n      unsignedVar20 = FUN_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)bytePointer - (long)bytePointer2 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    bytePointer5 = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = bytePointer5;\n    unsignedVar19 = FUN_0010300e();\n    bytePointer3 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  bytePointer5 = bytePointer2 + integerVar8;\n  DAT_0010d5b0 = bytePointer5;\n  unsignedVar19 = FUN_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)unsignedVar19 * 2) != 0) {\n    DAT_0010d5b8 = bytePointer5;\n    DAT_0010d5c0 = (uint)unsignedVar19;\n  }\n  unsignedVar26 = unsignedVar19 & 0xffffffff;\n  while( true ) {\n    integerVar8 = (int)unsignedVar26;\n    if (integerVar8 == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integerVar8 * 2) + 1) * 2)) break;\n    unsignedVar26 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integerVar8 * 2);\n  }\n  unsignedVar20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integerVar8 * 2) + 1) * 2);\n  bytePointer3 = bytePointer2;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)integerVar8 * 2) + 1) * 2) == 0)\n     || (unsignedVar20 == 0xb0)) goto LAB_0010419f;\n  bytePointer5 = bytePointer5 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  integerVar8 = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *bytePointer5 = DAT_0010d588;\n  unsignedVar19 = (ulong)DAT_0010d5c0;\n  bytePointer5 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  doublePointerToChar2 = doublePointerToChar2 + 1;\n  localInt = 3;\n  *doublePointerToChar2 = DAT_0010d548;\nLAB_001049d1:\n  localCharPointer1 = localCharPointer1 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "fopen",
                "bfd_close",
                "FUN_00105300",
                "bfd_cache_close",
                "FUN_00103df9",
                "FUN_00103ddc",
                "stat",
                "filename_cmp",
                "fwrite",
                "FUN_0010312d",
                "FUN_001033d6",
                "unlink",
                "malloc",
                "free",
                "ferror",
                "FUN_00103c60",
                "bfd_set_format",
                "FUN_001031cf",
                "dcgettext",
                "realloc",
                "bfd_openr",
                "getc",
                "__errno_location",
                "fread",
                "FUN_00103ba8",
                "fprintf",
                "bfd_openw",
                "FUN_001030ed",
                "FUN_001033b0",
                "dup",
                "FUN_001031a5",
                "printf",
                "FUN_00105bc0",
                "clearerr",
                "fclose",
                "FUN_0010315d",
                "FUN_001032a8",
                "FUN_00107740",
                "xstrdup",
                "FUN_0010300e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "read_and_process_files_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_001025a0",
                "FUN_00103a78",
                "FUN_00102fd7",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_functions_00107cc0",
                "lVar1": "index",
                "lVar2": "tempIndex",
                "lVar3": "nestedIndex",
                "plVar4": "functionPointer",
                "uVar5": "count"
            },
            "code": "\nvoid executeFunctions_00107cc0(void)\n\n{\n  long index;\n  long tempIndex;\n  long nestedIndex;\n  long *functionPointer;\n  uint count;\n  \n  functionPointer = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionPointer + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionPointer[index + 2])();\n        tempIndex = index + -1;\n        if (-1 < (int)tempIndex) {\n          nestedIndex = tempIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionPointer[index + 1])();\n                        tempIndex = index + -2;\n                      }\n                      (*(code *)functionPointer[tempIndex + 2])();\n                      tempIndex = tempIndex + -1;\n                    }\n                    (*(code *)functionPointer[tempIndex + 2])();\n                    tempIndex = tempIndex + -1;\n                  }\n                  (*(code *)functionPointer[tempIndex + 2])();\n                  tempIndex = tempIndex + -1;\n                }\n                (*(code *)functionPointer[tempIndex + 2])();\n                tempIndex = tempIndex + -1;\n              }\n              (*(code *)functionPointer[tempIndex + 2])();\n              tempIndex = tempIndex + -1;\n            }\n            (*(code *)functionPointer[tempIndex + 2])();\n            nestedIndex = tempIndex + -1;\n            if ((int)(tempIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionPointer[nestedIndex + 2])();\n            index = nestedIndex + -1;\n            (*(code *)functionPointer[nestedIndex + 1])();\n            (*(code *)functionPointer[nestedIndex])();\n            (*(code *)functionPointer[index])();\n            (*(code *)functionPointer[nestedIndex + -2])();\n            (*(code *)functionPointer[nestedIndex + -3])();\n            (*(code *)functionPointer[nestedIndex + -4])();\n            (*(code *)functionPointer[nestedIndex + -5])();\n            nestedIndex = nestedIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      functionPointer = (long *)*functionPointer;\n    } while (functionPointer != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "run_function_00105ae0",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "code": "\nvoid run_function_00105ae0(undefined8 input_1,undefined8 input_2,undefined param_3,undefined param_4)\n\n{\n  FUN_00105af0(input_1,input_2,param_3,param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "run_function_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105db0",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "process_data_00107690",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "paramA",
                "param_10": "paramB",
                "param_11": "paramC",
                "param_12": "paramD",
                "param_13": "paramE",
                "param_14": "paramF",
                "in_AL": "isTrue",
                "local_d8": "size",
                "local_d4": "bufferSize",
                "local_d0": "stackPointer",
                "local_c8": "buffer",
                "local_b8": "someArray",
                "local_b0": "valueA",
                "local_a8": "valueB",
                "local_a0": "valueC",
                "local_98": "valueD",
                "local_90": "valueE",
                "local_88": "newParam1",
                "local_78": "newParam2",
                "local_68": "newParam3",
                "local_58": "newParam4",
                "local_48": "newParam5",
                "local_38": "newParam6",
                "local_28": "newParam7",
                "local_18": "newParam8"
            },
            "code": "\nvoid processData_00107690(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 paramA,undefined8 paramB,undefined8 paramC,undefined8 paramD,\n                 undefined8 paramE,undefined8 paramF)\n\n{\n  char isTrue;\n  undefined4 size;\n  undefined4 bufferSize;\n  undefined *stackPointer;\n  undefined *buffer;\n  undefined someArray [8];\n  undefined8 valueA;\n  undefined8 valueB;\n  undefined8 valueC;\n  undefined8 valueD;\n  undefined8 valueE;\n  undefined4 newParam1;\n  undefined4 newParam2;\n  undefined4 newParam3;\n  undefined4 newParam4;\n  undefined4 newParam5;\n  undefined4 newParam6;\n  undefined4 newParam7;\n  undefined4 newParam8;\n  \n  if (isTrue != '\\0') {\n    newParam1 = input1;\n    newParam2 = input2;\n    newParam3 = input3;\n    newParam4 = input4;\n    newParam5 = input5;\n    newParam6 = input6;\n    newParam7 = input7;\n    newParam8 = input8;\n  }\n  stackPointer = &stack0x00000008;\n  size = 8;\n  buffer = someArray;\n  bufferSize = 0x30;\n  valueA = paramB;\n  valueB = paramC;\n  valueC = paramD;\n  valueD = paramE;\n  valueE = paramF;\n  FUN_001078c0(paramA,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00103a78",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "process_data_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "file",
                "lVar1": "targetId",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *file)\n\n{\n  long targetId;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    targetId = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (targetId == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "fprintf",
                "fputc",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extracted_string_00105830",
                "param_1": "filePath",
                "param_2": "structPointer",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "lVar1": "structAddress",
                "sVar2": "filePathLength",
                "__s": "baseName",
                "uVar3": "structValue",
                "pcVar4": "copyPointer",
                "bVar5": "loopCounter",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extractedString_00105830(char *filePath,long structPointer,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  long structAddress;\n  size_t filePathLength;\n  char *baseName;\n  ulong structValue;\n  char *copyPointer;\n  byte loopCounter;\n  undefined result [16];\n  \n  loopCounter = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    baseName = (char *)lbasename();\n    filePath = baseName;\n    if ((DAT_0010d5fa != '\\0') && (structPointer != 0)) {\n      filePathLength = strlen(baseName);\n      structValue = (ulong)*(byte *)(*(long *)(structPointer + 8) + 0x1e);\n      if (structValue < filePathLength) {\n        filePath = (char *)xmalloc(structValue + 1);\n        structAddress = *(long *)(structPointer + 8);\n        copyPointer = filePath;\n        for (structValue = (ulong)*(byte *)(structAddress + 0x1e); structValue != 0; structValue = structValue - 1) {\n          *copyPointer = *baseName;\n          baseName = baseName + (ulong)loopCounter * -2 + 1;\n          copyPointer = copyPointer + (ulong)loopCounter * -2 + 1;\n        }\n        filePath[*(byte *)(structAddress + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = unusedParam2;\n  result._0_8_ = filePath;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102bb0",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105480",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extracted_string_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_and_close_file_00107730",
                "unlink_if_ordinary": "deleteFile"
            },
            "code": "\nvoid cleanupAndCloseFile_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_and_close_file_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorCode",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorCode)\n\n{\n  int bfdError;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(bfdError);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorCode,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_00102f96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00107c10",
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePointer",
                "param_2": "inputFile",
                "iVar1": "errnoValue",
                "uVar2": "isTTY",
                "iVar3": "fileDescriptor",
                "piVar4": "errnoPtr",
                "lVar5": "fileManager"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePointer,FILE *inputFile,undefined8 param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  int errnoValue;\n  uint isTTY;\n  int fileDescriptor;\n  int *errnoPtr;\n  long fileManager;\n  \n  errnoPtr = __errno_location();\n  fileManager = DAT_0010d5a8;\n  errnoValue = *errnoPtr;\n  if (filePointer == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (filePointer == *(FILE ***)(fileManager + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePointer + 0x1c) = 0;\n    *(undefined *)&filePointer[1]->_flags = 0;\n    *(undefined *)((long)&filePointer[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePointer + 5) = 1;\n    filePointer[2] = filePointer[1];\n    *(undefined4 *)(filePointer + 7) = 0;\n    if (fileManager != 0) {\n      if (filePointer == *(FILE ***)(fileManager + DAT_0010d5a0 * 8)) {\n        FUN_001030ed();\n      }\n      *filePointer = inputFile;\n      *(undefined4 *)((long)filePointer + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePointer = inputFile;\n    *(undefined4 *)((long)filePointer + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePointer + 0x2c) = 1;\nLAB_0010327b:\n  isTTY = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileDescriptor = fileno(inputFile);\n    fileDescriptor = isatty(fileDescriptor);\n    isTTY = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePointer + 0x24) = isTTY;\n  *errnoPtr = errnoValue;\n  return param_5;\n}\n\n",
            "called": [
                "fileno",
                "__errno_location",
                "isatty",
                "FUN_001030ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "targetBuffer",
                "param_2": "sourceBuffer",
                "lVar1": "tempVariable"
            },
            "code": "\nvoid copyData_0010312d(long targetBuffer,long sourceBuffer)\n\n{\n  long tempVariable;\n  \n  if (sourceBuffer != 0) {\n    *(undefined8 *)(sourceBuffer + 0xf0) = *(undefined8 *)(targetBuffer + 0xf0);\n  }\n  tempVariable = DAT_0010d558;\n  *(undefined8 *)(targetBuffer + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(tempVariable + 0xf8) = targetBuffer;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "extract_data_00105c00",
                "param_1": "file_descriptor",
                "param_2": "file_path",
                "iVar1": "error_code",
                "__fd": "file_descriptor_out",
                "iVar2": "bytes_read",
                "_Var3": "current_position",
                "uVar4": "return_value",
                "sVar5": "bytes_written",
                "piVar6": "error_pointer",
                "auStack_2038": "buffer"
            },
            "code": "\nulong extract_data_00105c00(int file_descriptor,char *file_path)\n\n{\n  int error_code;\n  int file_descriptor_out;\n  int bytes_read;\n  __off_t current_position;\n  ulong return_value;\n  size_t bytes_written;\n  int *error_pointer;\n  undefined buffer [8200];\n  \n  if ((-1 < file_descriptor) && (current_position = lseek(file_descriptor,0,0), current_position == 0)) {\n    file_descriptor_out = open(file_path,0x201);\n    if (file_descriptor_out < 0) {\n      return_value = FUN_00102f55();\n      return return_value;\n    }\n    do {\n      return_value = read(file_descriptor,buffer,0x2000);\n      bytes_read = (int)return_value;\n      if (bytes_read < 1) {\n        error_pointer = __errno_location();\n        error_code = *error_pointer;\n        close(file_descriptor);\n        close(file_descriptor_out);\n        if (bytes_read != 0) {\n          *error_pointer = error_code;\n          return 0xffffffff;\n        }\n        return return_value & 0xffffffff;\n      }\n      bytes_written = write(file_descriptor_out,buffer,(long)bytes_read);\n    } while (bytes_written == (long)bytes_read);\n    error_pointer = __errno_location();\n    bytes_read = *error_pointer;\n    close(file_descriptor);\n    close(file_descriptor_out);\n    *error_pointer = bytes_read;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "FUN_00102f55",
                "__errno_location",
                "open",
                "write",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "extract_data_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_information_001052a0",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errNumPtr",
                "uVar3": "errorMessage",
                "pcVar4": "errorDescription",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong getFileInformation_001052a0(char *filePath)\n\n{\n  int status;\n  int *errNumPtr;\n  undefined8 errorMessage;\n  char *errorDescription;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStats);\n    if (status < 0) {\n      errNumPtr = __errno_location();\n      if (*errNumPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00107920(errorMessage,filePath);\n      }\n      else {\n        errorDescription = strerror(*errNumPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00107920(errorMessage,filePath,errorDescription);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001025a0",
                "FUN_00107920",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_file_information_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "optionText"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *optionText;\n  \n  optionText = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,optionText);\n  optionText = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,optionText);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00103a78",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_00103ba8",
                "FUN_00105a68",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_00103172",
                "FUN_00102f08"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "extract_archive_00103c60",
                "param_1": "archivePath",
                "param_2": "isPlugin",
                "piVar2": "errnoPtr",
                "pcVar3": "errorMessage",
                "lVar4": "inputArchivePtr",
                "lVar5": "archivedFilePtr",
                "uVar6": "programName",
                "plVar7": "archivedFilesArray"
            },
            "code": "\n\n\nvoid extractArchive_00103c60(char *archivePath,int isPlugin)\n\n{\n  char cVar1;\n  int *errnoPtr;\n  char *errorMessage;\n  long inputArchivePtr;\n  long archivedFilePtr;\n  undefined8 programName;\n  long *archivedFilesArray;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)FUN_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errnoPtr = __errno_location();\n    archivePath = strerror(*errnoPtr);\n    programName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      errorMessage = \"%s: Can\\'t open output archive %s\\n\";\n      archivePath = DAT_0010d560;\n    }\n    else {\n      if (isPlugin != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchivePtr = bfd_openr(archivePath,\"plugin\");\n      if (inputArchivePtr == 0) {\n        errorMessage = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        cVar1 = bfd_check_format(inputArchivePtr,2);\n        if (cVar1 != '\\0') {\n          archivedFilesArray = (long *)(DAT_0010d558 + 0xf8);\n          for (archivedFilePtr = bfd_openr_next_archived_file(inputArchivePtr,0); archivedFilePtr != 0;\n              archivedFilePtr = bfd_openr_next_archived_file(inputArchivePtr,archivedFilePtr)) {\n            *archivedFilesArray = archivedFilePtr;\n            archivedFilesArray = (long *)(archivedFilePtr + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMessage = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    programName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,errorMessage,5);\n  }\n  fprintf(_stderr,errorMessage,programName,archivePath);\n  FUN_0010315d();\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_openr",
                "bfd_fdopenw",
                "FUN_001057a0",
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "FUN_0010315d",
                "fprintf",
                "xstrdup",
                "bfd_set_format",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_archive_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "create_output_file_00102e57",
                "pFVar1": "output_file",
                "xexit": "terminate_program"
            },
            "code": "\nvoid create_output_file_00102e57(void)\n\n{\n  FILE *output_file;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  output_file = fopen(DAT_0010d618,\"w\");\n  if (output_file != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "create_output_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_files_00105af0",
                "param_1": "filesPointer",
                "param_2": "archiveFile",
                "param_3": "checkFormat",
                "param_4": "openFiles",
                "cVar1": "isFormatValid",
                "uVar2": "result",
                "lVar3": "nextFile",
                "uVar4": "returnValue"
            },
            "code": "\nulong processFiles_00105af0(long *filesPointer,long archiveFile,char checkFormat,char openFiles)\n\n{\n  char isFormatValid;\n  uint result;\n  long nextFile;\n  ulong returnValue;\n  \n  if (openFiles == '\\0') {\n    if (checkFormat != '\\0') {\n      returnValue = FUN_00102f08();\n      return returnValue;\n    }\n  }\n  else {\n    isFormatValid = bfd_check_format(archiveFile,2);\n    if (isFormatValid != '\\0') {\n      returnValue = 0;\n      for (nextFile = bfd_openr_next_archived_file(archiveFile,0); nextFile != 0;\n          nextFile = bfd_openr_next_archived_file(archiveFile,nextFile)) {\n        result = processFiles_00105af0(filesPointer,nextFile,checkFormat,1);\n        if ((char)result != '\\0') {\n          returnValue = (ulong)result;\n          filesPointer = (long *)(*filesPointer + 0xf0);\n        }\n      }\n      return returnValue;\n    }\n    if (checkFormat != '\\0') {\n      returnValue = FUN_00102f08();\n      return returnValue;\n    }\n  }\n  *(long *)(archiveFile + 0xf0) = *filesPointer;\n  *filesPointer = archiveFile;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_00105af0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "process_data_0010300e",
                "bVar1": "foundMatch",
                "iVar2": "currentIndex",
                "lVar3": "nextIndex",
                "bVar4": "lookupValue",
                "pbVar5": "currentByte",
                "in_R9": "matchingByte",
                "in_R10D": "matchingIndex"
            },
            "code": "\nvoid processData_0010300e(void)\n\n{\n  bool foundMatch;\n  int currentIndex;\n  long nextIndex;\n  byte lookupValue;\n  byte *currentByte;\n  byte *matchingByte;\n  int matchingIndex;\n  \n  foundMatch = false;\n  currentIndex = DAT_0010d5d0;\n  for (currentByte = DAT_0010d5c8; currentByte < DAT_0010d5b0; currentByte = currentByte + 1) {\n    lookupValue = 1;\n    if (*currentByte != 0) {\n      lookupValue = (&DAT_0010ab00)[*currentByte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      foundMatch = true;\n      matchingByte = currentByte;\n      matchingIndex = currentIndex;\n    }\n    while( true ) {\n      nextIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)lookupValue);\n      if (*(short *)(&DAT_0010a440 + nextIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        lookupValue = (&DAT_0010a7c0)[(int)(uint)lookupValue];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + nextIndex * 2);\n  }\n  if (foundMatch) {\n    DAT_0010d5b8 = matchingByte;\n    DAT_0010d5c0 = matchingIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_data_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_return_zero_00102ba1",
                "unaff_RBP": "ptrToFreeMemory",
                "unaff_retaddr": "returnValue"
            },
            "code": "\nundefined  [16] freeAndReturnZero_00102ba1(void)\n\n{\n  undefined auVar1 [16];\n  void *ptrToFreeMemory;\n  ulong returnValue;\n  \n  free(ptrToFreeMemory);\n  auVar1._8_8_ = 0;\n  auVar1._0_8_ = returnValue;\n  return auVar1 << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_and_return_zero_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_save_archive_00107740",
                "param_1": "archive",
                "iVar1": "result",
                "iVar2": "error",
                "piVar3": "errnoPtr",
                "pcVar4": "errorStr",
                "uVar5": "errorMessage",
                "pplVar6": "archivePtr",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "offset",
                "plVar8": "filePtr",
                "puVar9": "localArray",
                "uVar10": "totalBytes",
                "sVar11": "bytesToRead",
                "local_c8": "errorArray",
                "_Stack_b0": "fileMode",
                "uStack_98": "archiveSize",
                "uStack_80": "originalErrMsg",
                "uStack_70": "internalErrMsg"
            },
            "code": "\n\n\nlong * extractAndSaveArchive_00107740(long **archive)\n\n{\n  int result;\n  int error;\n  int *errnoPtr;\n  char *errorStr;\n  undefined8 errorMessage;\n  long **archivePtr;\n  void *buffer;\n  size_t bytesRead;\n  long offset;\n  long *filePtr;\n  undefined4 *localArray;\n  ulong totalBytes;\n  size_t bytesToRead;\n  undefined4 errorArray [6];\n  __mode_t fileMode;\n  ulong archiveSize;\n  undefined8 originalErrMsg;\n  undefined8 internalErrMsg;\n  \n  if (_DAT_0010d600 != 0) {\n    localArray = errorArray;\n    for (offset = 0x24; offset != 0; offset = offset + -1) {\n      *localArray = 0;\n      localArray = localArray + 1;\n    }\n  }\n  archivePtr = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    archivePtr = archive;\n  }\n  error = (*(code *)archivePtr[1][0x3d])(archive,errorArray);\n  if (error != 0) {\n    filePtr = *archive;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    error = FUN_00107690(errorMessage,filePtr);\n    errorMessage = DAT_0010d638;\n    if (error == 3) {\n      for (; *filePtr != 0; filePtr = (long *)(*filePtr + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*filePtr != (undefined8 *)0x0; filePtr = (long *)(*filePtr + 0xf0)) {\n        result = filename_cmp(*(undefined8 *)*filePtr,errorMessage);\n        if (result == 0) {\n          if (error != 2) {\n            return filePtr;\n          }\n          return (long *)(*filePtr + 0xf0);\n        }\n      }\n    }\n    return filePtr;\n  }\n  bfd_seek(archive,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive);\n  }\n  else {\n    totalBytes = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = archiveSize - totalBytes;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToRead,archive);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(errorMessage,archive);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive);\n      }\n      bytesToRead = fwrite(buffer,1,bytesRead,DAT_0010d5d8);\n      if (bytesToRead != bytesRead) {\n        errnoPtr = __errno_location();\n        errorStr = strerror(*errnoPtr);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorStr);\n        goto LAB_00102c78;\n      }\n      totalBytes = totalBytes + bytesRead;\n    } while (totalBytes < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorStr = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,fileMode);\n  if (_DAT_0010d600 != 0) {\n    originalErrMsg = internalErrMsg;\n    FUN_00107c80(errorStr,errorArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_save_archive_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_metadata_00102d2f",
                "unaff_RBX": "filePaths",
                "unaff_RBP": "outputFile",
                "unaff_R12": "isVerbose",
                "unaff_R13": "archiveBuffer",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "fileType",
                "cStack0000000000000016": "hasReadPermission",
                "cStack0000000000000017": "hasWritePermission",
                "in_stack_00000018": "hasExecutePermission",
                "cStack0000000000000019": "hasReadPermission2",
                "cStack000000000000001a": "hasWritePermission2",
                "cStack000000000000001b": "hasExecutePermission2",
                "cStack000000000000001c": "hasReadPermission3",
                "cStack000000000000001d": "hasWritePermission3",
                "cStack000000000000001e": "hasExecutePermission3",
                "uStack000000000000001f": "unusedFlag",
                "uStack0000000000000068": "filePermissions",
                "uStack000000000000006c": "fileSize1",
                "in_stack_00000070": "fileSize2",
                "in_stack_00000080": "fileTimestamp"
            },
            "code": "\nvoid printFileMetadata_00102d2f(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *__format;\n  uint uVar4;\n  char **filePaths;\n  FILE *outputFile;\n  long isVerbose;\n  void *archiveBuffer;\n  int fileDescriptor;\n  undefined fileType;\n  char hasReadPermission;\n  char hasWritePermission;\n  char hasExecutePermission;\n  char hasReadPermission2;\n  char hasWritePermission2;\n  char hasExecutePermission2;\n  char hasReadPermission3;\n  char hasWritePermission3;\n  char hasExecutePermission3;\n  undefined unusedFlag;\n  uint filePermissions;\n  uint fileSize1;\n  uint fileSize2;\n  undefined8 fileTimestamp;\n  \n  do {\n    bVar1 = FUN_00107c10();\n    *(uint *)((long)filePaths + 0x44) = *(uint *)((long)filePaths + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(isVerbose + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)filePaths + 0x49) = bVar1 | 0x10;\n    }\n    cVar2 = bfd_set_archive_head();\n  } while (cVar2 == '\\0');\n  dup(fileDescriptor);\n  cVar2 = bfd_close();\n  if (cVar2 != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    iVar3 = FUN_00105bc0();\n    if (iVar3 == 0) {\n      free(archiveBuffer);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  FUN_00107c10();\n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar4 = filePermissions & 0xf000;\n  if (uVar4 == 0x4000) {\n    fileType = 100;\n  }\n  else if (uVar4 == 0xa000) {\n    fileType = 0x6c;\n  }\n  else if (uVar4 == 0x6000) {\n    fileType = 0x62;\n  }\n  else if (uVar4 == 0x2000) {\n    fileType = 99;\n  }\n  else if (uVar4 == 0xc000) {\n    fileType = 0x73;\n  }\n  else {\n    fileType = 0x70;\n    if (uVar4 != 0x1000) {\n      fileType = 0x2d;\n    }\n  }\n  hasReadPermission = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  hasWritePermission = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  hasExecutePermission = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  hasReadPermission2 = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  hasWritePermission2 = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  hasExecutePermission2 = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  hasReadPermission3 = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  hasWritePermission3 = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  hasExecutePermission3 = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (hasExecutePermission == 'x') {\n      hasExecutePermission = 's';\n    }\n    else {\n      hasExecutePermission = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (hasExecutePermission2 == 'x') {\n      hasExecutePermission2 = 's';\n    }\n    else {\n      hasExecutePermission2 = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (hasExecutePermission3 == 'x') {\n      hasExecutePermission3 = 't';\n    }\n    else {\n      hasExecutePermission3 = 'T';\n    }\n  }\n  unusedFlag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileSize1,\n          (ulong)fileSize2,fileTimestamp,&stack0x00000020,(ulong)filePermissions)\n  ;\n  fputs(*filePaths,outputFile);\n  if ((char)isVerbose != '\\0') {\n    if ((*(byte *)((long)filePaths + 0x49) & 0x10) == 0) {\n      if (filePaths[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (filePaths[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00107c10",
                "FUN_00105bc0",
                "bfd_close",
                "free",
                "FUN_00102d2f",
                "xexit",
                "dup",
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_metadata_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "find_matching_file_001028ed",
                "param_1": "file_list",
                "param_2": "file_mode",
                "uVar1": "undefined_var",
                "bVar2": "byte_var",
                "iVar3": "int_var",
                "sVar4": "size",
                "piVar5": "int_pointer",
                "pcVar6": "filename1",
                "pcVar7": "filename2",
                "ppcVar8": "pointer_to_filename",
                "uVar9": "file_descriptor",
                "lVar10": "current",
                "__s": "basename1",
                "__s_00": "basename2",
                "lVar11": "previous",
                "uVar12": "constant",
                "uVar13": "file_size",
                "unaff_RBX": "current_file",
                "ppcVar14": "file_entry",
                "unaff_RBP": "file_pointer",
                "unaff_R12": "file_list_pointer",
                "unaff_R13D": "file_type",
                "ppcVar15": "prev_file_entry",
                "unaff_R14": "file_location",
                "bVar16": "bool_var",
                "bVar17": "byte_var2",
                "param_7": "output_file_list",
                "param_9": "output_flags",
                "in_stack_00000078": "local_var1",
                "in_stack_00000108": "local_var2"
            },
            "code": "\n\n\nundefined8 find_matching_file_001028ed(undefined8 file_list,long file_mode)\n\n{\n  undefined undefined_var;\n  byte byte_var;\n  int int_var;\n  size_t size;\n  int *int_pointer;\n  char *filename1;\n  char *filename2;\n  char **pointer_to_filename;\n  undefined8 file_descriptor;\n  long current;\n  char *basename1;\n  char *basename2;\n  long previous;\n  undefined8 constant;\n  ulong file_size;\n  char *current_file;\n  char **file_entry;\n  char **file_pointer;\n  char **file_list_pointer;\n  uint file_type;\n  char **prev_file_entry;\n  long file_location;\n  bool bool_var;\n  byte byte_var2;\n  char **output_file_list;\n  undefined8 output_flags;\n  long local_var1;\n  long local_var2;\n  \n  byte_var2 = 0;\ncode_r0x001028ed:\n  FUN_00107c10(current_file,file_mode);\nLAB_001028f5:\n  constant = DAT_0010d638;\n  if (file_type != 3) {\n    while( true ) {\n      if ((undefined8 *)*file_list_pointer == (undefined8 *)0x0) goto LAB_0010571f;\n      int_var = filename_cmp(*(undefined8 *)*file_list_pointer,constant);\n      if (int_var == 0) break;\n      file_list_pointer = (char **)(*file_list_pointer + 0xf0);\n    }\n    if (file_type != 2) goto LAB_0010571f;\n    file_list_pointer = (char **)(*file_list_pointer + 0xf0);\n    goto LAB_0010571f;\n  }\n  current = *(long *)(file_location + 0xf0);\n  if (*(long *)(file_location + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    previous = current;\n    current = *(long *)(previous + 0xf0);\n  } while (current != 0);\n  file_list_pointer = (char **)(previous + 0xf0);\n  current_file = *file_pointer;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined_var = DAT_0010d5f8;\n  file_type = (uint)(DAT_0010d60c != 0);\n  file_mode = bfd_openr(current_file,DAT_0010d5f0);\n  if (file_mode != 0) {\n    file_pointer = file_pointer + 1;\n    byte_var = FUN_00105af0(file_list_pointer,file_mode,file_type,undefined_var);\n    output_flags._6_1_ = output_flags._6_1_ | byte_var;\n    filename1 = *file_pointer;\n    do {\n      if (filename1 == (char *)0x0) {\n        if (output_flags._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        constant = FUN_001058b0();\n        return constant;\n      }\n      file_entry = *(char ***)(file_location + 0xf0);\n      file_list_pointer = output_file_list;\n      if (output_flags._7_1_ == '\\0') {\n        prev_file_entry = output_file_list;\n        if (file_entry != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              basename1 = (char *)lbasename(*file_entry);\n              filename2 = basename1;\n              if (DAT_0010d5fa != '\\0') {\n                size = strlen(basename1);\n                file_size = (ulong)*(byte *)(*(long *)(file_location + 8) + 0x1e);\n                if (file_size < size) {\n                  filename2 = (char *)xmalloc(file_size + 1);\n                  current = *(long *)(file_location + 8);\n                  filename1 = filename2;\n                  for (file_size = (ulong)*(byte *)(current + 0x1e); file_size != 0; file_size = file_size - 1) {\n                    *filename1 = *basename1;\n                    basename1 = basename1 + (ulong)byte_var2 * -2 + 1;\n                    filename1 = filename1 + (ulong)byte_var2 * -2 + 1;\n                  }\n                  filename2[*(byte *)(current + 0x1e)] = '\\0';\n                }\n                filename1 = *file_pointer;\n                basename1 = filename2;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              filename1 = *file_pointer;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              basename2 = (char *)lbasename(filename1);\n              if (DAT_0010d5fa != '\\0') {\n                size = strlen(basename2);\n                file_size = (ulong)*(byte *)(*(long *)(file_location + 8) + 0x1e);\n                filename1 = basename2;\n                basename1 = filename2;\n                if (file_size < size) {\n                  filename1 = (char *)xmalloc(file_size + 1);\n                  current = *(long *)(file_location + 8);\n                  filename2 = filename1;\n                  for (file_size = (ulong)*(byte *)(current + 0x1e); file_size != 0; file_size = file_size - 1) {\n                    *filename2 = *basename2;\n                    basename2 = basename2 + (ulong)byte_var2 * -2 + 1;\n                    filename2 = filename2 + (ulong)byte_var2 * -2 + 1;\n                  }\n                  filename1[*(byte *)(current + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              int_var = filename_cmp(basename2,filename2);\n            }\n            else {\n              filename1 = *file_pointer;\n              basename1 = *file_entry;\nLAB_00102980:\n              int_var = filename_cmp(filename1,basename1);\n            }\n            if ((int_var == 0) && (file_entry[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                int_var = stat(*file_pointer,(stat *)&stack0x000000b0);\n                if (int_var != 0) {\n                  int_pointer = __errno_location();\n                  if (*int_pointer != 2) {\n                    FUN_00107c10(*file_pointer);\nLAB_00102b7e:\n                    filename1 = *file_entry;\n                    constant = dcgettext(0,\"internal stat error on %s\",5);\n                    FUN_00107690(constant,filename1);\n                    free(file_pointer);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                pointer_to_filename = (char **)file_entry[0x1d];\n                if ((char **)file_entry[0x1d] == (char **)0x0) {\n                  pointer_to_filename = file_entry;\n                }\n                int_var = (**(code **)(pointer_to_filename[1] + 0x1e8))(file_entry,&stack0x00000020);\n                if (int_var != 0) goto LAB_00102b7e;\n                if (local_var2 <= local_var1) goto LAB_0010577e;\n              }\n              constant = FUN_00105870(output_file_list,2,*file_entry);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                filename1 = *file_pointer;\n                bool_var = DAT_0010d60c != 0;\n                current = bfd_openr(filename1,DAT_0010d5f0);\n                if (current == 0) {\n                  FUN_00107c10(filename1,0);\n                  goto LAB_00102b3e;\n                }\n                byte_var = FUN_00103172(constant,current,bool_var);\n              }\n              else {\n                file_descriptor = FUN_00105830(*file_pointer);\n                int_var = filename_cmp(file_descriptor,\"__.LIBDEP\");\n                if (int_var != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte_var = FUN_00103172(constant,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte_var != 0) {\n                *prev_file_entry = *(char **)(*prev_file_entry + 0xf0);\n                output_flags._6_1_ = byte_var;\n              }\n              goto LAB_0010577e;\n            }\n            prev_file_entry = file_entry + 0x1e;\n            file_entry = (char **)file_entry[0x1e];\n          } while (file_entry != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        file_type = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        file_type = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        current = *(long *)(file_location + 0xf0);\n        if (*(long *)(file_location + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      current_file = *file_pointer;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      constant = FUN_00105830(current_file);\n      int_var = filename_cmp(constant,\"__.LIBDEP\");\n      if (int_var != 0) goto code_r0x0010574f;\n      byte_var = FUN_00105ae0(file_list_pointer,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      output_flags._6_1_ = byte_var | output_flags._6_1_;\nLAB_0010577e:\n      file_pointer = file_pointer + 1;\n      filename1 = *file_pointer;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  current_file = *file_pointer;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "bfd_openr",
                "FUN_00107c10",
                "dcgettext",
                "FUN_00105ae0",
                "xmalloc",
                "__errno_location",
                "FUN_00105af0",
                "lbasename",
                "FUN_00105830",
                "FUN_00107690",
                "stat",
                "filename_cmp",
                "FUN_00102943",
                "FUN_001058b0",
                "strlen",
                "FUN_00103172",
                "FUN_00105870",
                "FUN_001028ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_matching_file_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102bf5",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_and_exit_001033b0",
                "param_1": "message",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printAndExit_001033b0(undefined8 message)\n\n{\n  fprintf(errorStream,\"%s\\n\",message);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "exit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_error_001025a0",
                "piVar1": "errorLocation",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleError_001025a0(void)\n\n{\n  int *errorLocation;\n  undefined8 errorMessage;\n  \n  errorLocation = __errno_location();\n  if (*errorLocation == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00107920(errorMessage);\n  }\n  else {\n    strerror(*errorLocation);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00107920(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_one_0010284b",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t get_one_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_one_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_save_archive_00102c25",
                "param_7": "output_path",
                "param_11": "permissions",
                "param_12": "archive_size",
                "iVar1": "comparison_result",
                "iVar2": "status",
                "piVar3": "error_code_ptr",
                "pcVar4": "error_msg",
                "uVar5": "error_string",
                "pplVar6": "archive_ptr",
                "__ptr": "buffer",
                "__n": "bytes_read",
                "lVar7": "loop_counter",
                "unaff_RBX": "file_info",
                "plVar8": "current_file",
                "puVar9": "temp_ptr",
                "uVar10": "bytes_written",
                "sVar11": "bytes_to_write"
            },
            "code": "\n\n\nlong * extractAndSaveArchive_00102c25(void)\n\n{\n  int comparison_result;\n  int status;\n  int *error_code_ptr;\n  char *error_msg;\n  undefined8 error_string;\n  long **archive_ptr;\n  void *buffer;\n  size_t bytes_read;\n  long loop_counter;\n  long **file_info;\n  long *current_file;\n  undefined4 *temp_ptr;\n  ulong bytes_written;\n  size_t bytes_to_write;\n  undefined4 *output_path;\n  __mode_t permissions;\n  ulong archive_size;\n  \n  temp_ptr = output_path;\n  for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *temp_ptr = 0;\n    temp_ptr = temp_ptr + 1;\n  }\n  archive_ptr = (long **)file_info[0x1d];\n  if ((long **)file_info[0x1d] == (long **)0x0) {\n    archive_ptr = file_info;\n  }\n  status = (*(code *)archive_ptr[1][0x3d])();\n  if (status != 0) {\n    current_file = *file_info;\n    error_string = dcgettext(0,\"internal stat error on %s\",5);\n    status = FUN_00107690(error_string,current_file);\n    error_string = DAT_0010d638;\n    if (status == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file,error_string);\n        if (comparison_result == 0) {\n          if (status != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*file_info);\n  }\n  else {\n    bytes_written = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_write = archive_size - bytes_written;\n      if (0x2000 < bytes_to_write) {\n        bytes_to_write = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_write);\n      if (bytes_to_write != bytes_read) {\nLAB_00102c78:\n        file_info = (long **)*file_info[0x1d];\n        error_string = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(error_string,file_info);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*file_info);\n      }\n      bytes_to_write = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_write != bytes_read) {\n        error_code_ptr = __errno_location();\n        error_msg = strerror(*error_code_ptr);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,error_msg);\n        goto LAB_00102c78;\n      }\n      bytes_written = bytes_written + bytes_read;\n    } while (bytes_written < archive_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_msg = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,permissions);\n  if (_DAT_0010d600 != 0) {\n    FUN_00107c80(error_msg,output_path);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00107c80",
                "dcgettext",
                "FUN_00105a20",
                "xmalloc",
                "__errno_location",
                "bfd_bread",
                "FUN_00107690",
                "fwrite",
                "bfd_seek",
                "fclose",
                "free",
                "chmod",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_and_save_archive_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "inputLength",
                "puVar3": "outputString",
                "uVar4": "outputLength",
                "unaff_RBX": "sourcePointer",
                "unaff_RBP": "basePointer",
                "puVar5": "destinationPointer",
                "bVar6": "flag",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t inputLength;\n  undefined *outputString;\n  ulong outputLength;\n  undefined *sourcePointer;\n  long basePointer;\n  undefined *destinationPointer;\n  byte flag;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  flag = 0;\n  inputLength = strlen(inputString);\n  outputLength = (ulong)*(byte *)(*(long *)(basePointer + 8) + 0x1e);\n  outputString = sourcePointer;\n  if (outputLength < inputLength) {\n    outputString = (undefined *)xmalloc(outputLength + 1);\n    lVar1 = *(long *)(basePointer + 8);\n    destinationPointer = outputString;\n    for (outputLength = (ulong)*(byte *)(lVar1 + 0x1e); outputLength != 0; outputLength = outputLength - 1) {\n      *destinationPointer = *sourcePointer;\n      sourcePointer = sourcePointer + (ulong)flag * -2 + 1;\n      destinationPointer = destinationPointer + (ulong)flag * -2 + 1;\n    }\n    outputString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = outputString;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "copy_string_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_assign_00102f08",
                "unaff_RBX": "print_string_ptr",
                "unaff_R12": "destination_ptr"
            },
            "code": "\nundefined8 print_and_assign_00102f08(void)\n\n{\n  undefined8 *print_string_ptr;\n  undefined8 *destination_ptr;\n  \n  printf(\"a - %s\\n\",*print_string_ptr);\n  print_string_ptr[0x1e] = *destination_ptr;\n  *destination_ptr = print_string_ptr;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_assign_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "context",
                "param_2": "files",
                "param_3": "flag",
                "ppcVar1": "filePtr",
                "uVar2": "undefinedVar",
                "bVar3": "byteVar",
                "iVar4": "index",
                "sVar5": "size",
                "piVar6": "errnoPtr",
                "pcVar7": "currentFile",
                "pcVar8": "baseName",
                "uVar9": "filePath",
                "pcVar10": "fileName",
                "__s": "baseName2",
                "lVar11": "filePtr2",
                "lVar12": "filePtr3",
                "uVar13": "returnValue",
                "uVar14": "fileSize",
                "ppcVar15": "currentPtr",
                "ppcVar16": "filePtr4",
                "uVar17": "flagValue",
                "ppcVar18": "previousPtr",
                "bVar19": "boolVar",
                "bVar20": "byteVar2",
                "local_15a": "localFlag",
                "auStack_158": "stackArray",
                "lStack_100": "time",
                "sStack_c8": "fileStat"
            },
            "code": "\n\n\nundefined8 processFiles_00105570(long context,char **files,char flag)\n\n{\n  char **filePtr;\n  undefined undefinedVar;\n  byte byteVar;\n  int index;\n  size_t size;\n  int *errnoPtr;\n  char *currentFile;\n  char *baseName;\n  undefined8 filePath;\n  char *fileName;\n  char *baseName2;\n  long filePtr2;\n  long filePtr3;\n  undefined8 returnValue;\n  ulong fileSize;\n  char **currentPtr;\n  char **filePtr4;\n  uint flagValue;\n  char **previousPtr;\n  bool boolVar;\n  byte byteVar2;\n  byte localFlag;\n  undefined stackArray [88];\n  long time;\n  stat fileStat;\n  \n  byteVar2 = 0;\n  filePtr = (char **)(context + 0xf0);\n  localFlag = 0;\n  if (files == (char **)0x0) {\n    returnValue = FUN_00102943();\n    return returnValue;\n  }\n  do {\n    fileName = *files;\njoined_r0x001055aa:\n    if (fileName == (char *)0x0) {\n      if (localFlag != 0) {\n        returnValue = FUN_001058b0(context);\n        return returnValue;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    currentPtr = *(char ***)(context + 0xf0);\n    filePtr4 = filePtr;\n    if (flag != '\\0') {\nLAB_0010564c:\n      flagValue = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      filePtr3 = *(long *)(context + 0xf0);\n      if (*(long *)(context + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        filePtr2 = filePtr3;\n        filePtr3 = *(long *)(filePtr2 + 0xf0);\n      } while (filePtr3 != 0);\n      filePtr4 = (char **)(filePtr2 + 0xf0);\n      fileName = *files;\n      do {\n        if (DAT_0010d620 != 0) {\n          returnValue = FUN_00105830(fileName,context);\n          index = filename_cmp(returnValue,\"__.LIBDEP\");\n          if (index == 0) {\n            byteVar = FUN_00105ae0(filePtr4,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            localFlag = byteVar | localFlag;\n            goto LAB_0010577e;\n          }\n          fileName = *files;\n        }\n        undefinedVar = DAT_0010d5f8;\n        boolVar = DAT_0010d60c != 0;\n        filePtr3 = bfd_openr(fileName,DAT_0010d5f0);\n        if (filePtr3 != 0) {\n          files = files + 1;\n          byteVar = FUN_00105af0(filePtr4,filePtr3,(uint)boolVar,undefinedVar);\n          localFlag = localFlag | byteVar;\n          fileName = *files;\n          goto joined_r0x001055aa;\n        }\n        FUN_00107c10(fileName,0);\n        flagValue = (uint)boolVar;\nLAB_001028f5:\n        returnValue = DAT_0010d638;\n        if (flagValue == 3) {\n          filePtr3 = *(long *)(context + 0xf0);\n          if (*(long *)(context + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*filePtr4 != (undefined8 *)0x0;\n              filePtr4 = (char **)(*filePtr4 + 0xf0)) {\n            index = filename_cmp(*(undefined8 *)*filePtr4,returnValue);\n            if (index == 0) {\n              if (flagValue == 2) {\n                filePtr4 = (char **)(*filePtr4 + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        fileName = *files;\n      } while( true );\n    }\n    previousPtr = filePtr;\n    if (currentPtr == (char **)0x0) {\n      flagValue = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      fileName = (char *)lbasename(*currentPtr);\n      baseName = fileName;\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(fileName);\n        fileSize = (ulong)*(byte *)(*(long *)(context + 8) + 0x1e);\n        if (fileSize < size) {\n          baseName = (char *)xmalloc(fileSize + 1);\n          filePtr3 = *(long *)(context + 8);\n          currentFile = baseName;\n          for (fileSize = (ulong)*(byte *)(filePtr3 + 0x1e); fileSize != 0; fileSize = fileSize - 1) {\n            *currentFile = *fileName;\n            fileName = fileName + (ulong)byteVar2 * -2 + 1;\n            currentFile = currentFile + (ulong)byteVar2 * -2 + 1;\n          }\n          baseName[*(byte *)(filePtr3 + 0x1e)] = '\\0';\n        }\n        currentFile = *files;\n        fileName = baseName;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      currentFile = *files;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      baseName2 = (char *)lbasename(currentFile);\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(baseName2);\n        fileSize = (ulong)*(byte *)(*(long *)(context + 8) + 0x1e);\n        currentFile = baseName2;\n        fileName = baseName;\n        if (fileSize < size) {\n          currentFile = (char *)xmalloc(fileSize + 1);\n          filePtr3 = *(long *)(context + 8);\n          baseName = currentFile;\n          for (fileSize = (ulong)*(byte *)(filePtr3 + 0x1e); fileSize != 0; fileSize = fileSize - 1) {\n            *baseName = *baseName2;\n            baseName2 = baseName2 + (ulong)byteVar2 * -2 + 1;\n            baseName = baseName + (ulong)byteVar2 * -2 + 1;\n          }\n          currentFile[*(byte *)(filePtr3 + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      index = filename_cmp(baseName2,baseName);\n      if (index == 0) goto LAB_00102993;\nLAB_00105639:\n      previousPtr = currentPtr + 0x1e;\n      currentPtr = (char **)currentPtr[0x1e];\n      if (currentPtr == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    currentFile = *files;\n    fileName = *currentPtr;\nLAB_00102980:\n    index = filename_cmp(currentFile,fileName);\n    if (index != 0) goto LAB_00105639;\nLAB_00102993:\n    if (currentPtr[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      index = stat(*files,&fileStat);\n      if (index != 0) {\n        errnoPtr = __errno_location();\n        if (*errnoPtr != 2) {\n          FUN_00107c10(*files);\nLAB_00102b7e:\n          fileName = *currentPtr;\n          returnValue = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00107690(returnValue,fileName);\n          free(files);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      filePtr4 = (char **)currentPtr[0x1d];\n      if ((char **)currentPtr[0x1d] == (char **)0x0) {\n        filePtr4 = currentPtr;\n      }\n      index = (**(code **)(filePtr4[1] + 0x1e8))(currentPtr,stackArray);\n      if (index != 0) goto LAB_00102b7e;\n      if (fileStat.st_mtim.tv_sec <= time) goto LAB_0010577e;\n    }\n    returnValue = FUN_00105870(filePtr,2,*currentPtr);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      fileName = *files;\n      boolVar = DAT_0010d60c != 0;\n      filePtr3 = bfd_openr(fileName,DAT_0010d5f0);\n      if (filePtr3 == 0) {\n        FUN_00107c10(fileName,0);\n        goto LAB_00102b3e;\n      }\n      byteVar = FUN_00103172(returnValue,filePtr3,boolVar);\n    }\n    else {\n      filePath = FUN_00105830(*files,context);\n      index = filename_cmp(filePath,\"__.LIBDEP\");\n      if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteVar = FUN_00103172(returnValue,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byteVar != 0) {\n      *previousPtr = *(char **)(*previousPtr + 0xf0);\n      localFlag = byteVar;\n    }\nLAB_0010577e:\n    files = files + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 83634,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_0010285f",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_00102e6f",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_001033d6",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00107c10",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_00102e57",
            "FUN_00105af0",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_001028ed",
            "FUN_001033b0",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00102c25",
            "FUN_00102bb0",
            "FUN_00102f08",
            "FUN_00105570"
        ]
    ],
    "locked_functions": []
}