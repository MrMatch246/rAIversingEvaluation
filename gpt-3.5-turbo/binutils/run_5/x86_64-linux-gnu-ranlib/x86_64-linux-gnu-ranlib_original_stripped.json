{
    "functions": {
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "search_files_00102cd9",
                "in_EAX": "searchMode",
                "iVar1": "comparisonResult",
                "unaff_RBX": "currentFile",
                "param_7": "filename",
                "posname": "defaultFilename"
            },
            "code": "\nlong * searchFiles_00102cd9(void)\n\n{\n  int searchMode;\n  int comparisonResult;\n  long *currentFile;\n  undefined8 filename;\n  \n  filename = defaultFilename;\n  if (searchMode == 3) {\n    for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*currentFile,filename);\n      if (comparisonResult == 0) {\n        if (searchMode != 2) {\n          return currentFile;\n        }\n        return (long *)(*currentFile + 0xf0);\n      }\n    }\n  }\n  return currentFile;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "get_pos_bfd"
            ],
            "imported": false,
            "current_name": "search_files_00102cd9"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_details_001079c0",
                "param_1": "outputFile",
                "param_2": "fileDetails",
                "param_3": "hasTime",
                "param_4": "showAddress",
                "iVar1": "returnValue",
                "ppcVar2": "optionPointer",
                "pcVar3": "timeInfo",
                "uVar4": "fileType",
                "local_100": "currentDateTime",
                "uStack_f3": "fileTypeSymbol",
                "cStack_f2": "symbol2",
                "cStack_f1": "symbol1",
                "cStack_f0": "symbol0",
                "cStack_ef": "symbol_1",
                "cStack_ee": "symbol_2",
                "cStack_ed": "symbol_3",
                "cStack_ec": "symbol_4",
                "cStack_eb": "symbol_5",
                "cStack_ea": "symbol_6",
                "local_e8": "formattedTime",
                "local_b8": "unimportantData",
                "uStack_a0": "filePermission",
                "uStack_9c": "userId",
                "uStack_98": "groupId",
                "uStack_88": "fileSize",
                "local_60": "creationTime"
            },
            "code": "\nvoid printFileDetails_001079c0(FILE *outputFile,char **fileDetails,char hasTime,char showAddress)\n\n{\n  int returnValue;\n  char **optionPointer;\n  char *timeInfo;\n  uint fileType;\n  time_t currentDateTime;\n  undefined fileTypeSymbol;\n  char symbol2;\n  char symbol1;\n  char symbol0;\n  char symbol_1;\n  char symbol_2;\n  char symbol_3;\n  char symbol_4;\n  char symbol_5;\n  char symbol_6;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined unimportantData [24];\n  uint filePermission;\n  uint userId;\n  uint groupId;\n  undefined8 fileSize;\n  time_t creationTime;\n  \n  if (hasTime != '\\0') {\n    optionPointer = (char **)fileDetails[0x1d];\n    if ((char **)fileDetails[0x1d] == (char **)0x0) {\n      optionPointer = fileDetails;\n    }\n    returnValue = (**(code **)(optionPointer[1] + 0x1e8))(fileDetails,unimportantData);\n    if (returnValue == 0) {\n      currentDateTime = creationTime;\n      timeInfo = ctime(&currentDateTime);\n      if (timeInfo == (char *)0x0) {\n        timeInfo = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeInfo);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeInfo + 4);\n      }\n      fileType = filePermission & 0xf000;\n      if (fileType == 0x4000) {\n        fileTypeSymbol = 100;\n      }\n      else if (fileType == 0xa000) {\n        fileTypeSymbol = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        fileTypeSymbol = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        fileTypeSymbol = 99;\n      }\n      else if (fileType == 0xc000) {\n        fileTypeSymbol = 0x73;\n      }\n      else {\n        fileTypeSymbol = 0x70;\n        if (fileType != 0x1000) {\n          fileTypeSymbol = 0x2d;\n        }\n      }\n      symbol2 = (-((filePermission & 0x100) == 0) & 0xbbU) + 0x72;\n      symbol1 = (-((filePermission & 0x80) == 0) & 0xb6U) + 0x77;\n      symbol0 = (-((filePermission & 0x40) == 0) & 0xb5U) + 0x78;\n      symbol_1 = (-((filePermission & 0x20) == 0) & 0xbbU) + 0x72;\n      symbol_2 = (-((filePermission & 0x10) == 0) & 0xb6U) + 0x77;\n      symbol_3 = (-((filePermission & 8) == 0) & 0xb5U) + 0x78;\n      symbol_4 = (-((filePermission & 4) == 0) & 0xbbU) + 0x72;\n      symbol_5 = (-((filePermission & 2) == 0) & 0xb6U) + 0x77;\n      symbol_6 = (-((filePermission & 1) == 0) & 0xb5U) + 0x78;\n      if ((filePermission & 0x800) != 0) {\n        if (symbol0 == 'x') {\n          symbol0 = 's';\n        }\n        else {\n          symbol0 = 'S';\n        }\n      }\n      if ((filePermission & 0x400) != 0) {\n        if (symbol_3 == 'x') {\n          symbol_3 = 's';\n        }\n        else {\n          symbol_3 = 'S';\n        }\n      }\n      if ((filePermission & 0x200) != 0) {\n        if (symbol_6 == 'x') {\n          symbol_6 = 't';\n        }\n        else {\n          symbol_6 = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&symbol2,(ulong)userId,(ulong)groupId,fileSize,\n              formattedTime,(ulong)filePermission);\n    }\n  }\n  fputs(*fileDetails,outputFile);\n  if (showAddress != '\\0') {\n    if ((*(byte *)((long)fileDetails + 0x49) & 0x10) == 0) {\n      if (fileDetails[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileDetails[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "ctime",
                "print_arelt_descr.cold",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "ar_directory_doer",
                "print_descr"
            ],
            "imported": false,
            "current_name": "print_file_details_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "create_output_file_00105a68",
                "pcVar1": "outputDir",
                "pFVar2": "file",
                "sVar3": "outputDirLength",
                "output_dir": "outputDirectory",
                "output_filename": "outputFile",
                "verbose": "isVerbose",
                "concat": "joinPaths",
                "strlen": "getStringLength",
                "printf": "printOutput",
                "fopen": "openFile",
                "perror": "printError",
                "xexit": "exitProgram"
            },
            "code": "\nvoid createOutputFile_00105a68(void)\n\n{\n  char *outputDir;\n  FILE *file;\n  size_t outputDirLength;\n  \n  outputDir = outputDirectory;\n  if (outputDirectory != (char *)0x0) {\n    outputDirLength = getStringLength(outputDirectory);\n    if (outputDirLength != 0) {\n      if (outputDir[outputDirLength - 1] == '/') {\n        outputFile = (char *)joinPaths(outputDir,outputFile,0);\n      }\n      else {\n        outputFile = (char *)joinPaths(outputDir,&DAT_00108260,outputFile,0);\n      }\n    }\n  }\n  if (isVerbose != 0) {\n    printOutput(\"x - %s\\n\",outputFile);\n  }\n  file = openFile(outputFile,\"w\");\n  if (file != (FILE *)0x0) {\n    return;\n  }\n  printError(outputFile);\n                    \n  exitProgram(1);\n}\n\n",
            "called": [
                "perror",
                "strlen",
                "xexit",
                "concat",
                "fopen",
                "printf",
                "open_output_file.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "create_output_file_00105a68"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_entries_001032a8",
                "param_1": "archiveEntries",
                "param_2": "callbackFunction",
                "param_3": "entryNames",
                "param_4": "returnValue",
                "lVar1": "currentEntry",
                "uVar2": "entryName",
                "bVar3": "foundEntry",
                "plVar4": "nextEntry",
                "iVar5": "comparisonResult",
                "__format": "formatString",
                "plVar6": "currentEntry",
                "lVar7": "currentEntryOffset",
                "plVar8": "previousEntry"
            },
            "code": "\n\n\nundefined8 processArchiveEntries_001032a8(long *archiveEntries,code *callbackFunction,undefined8 *entryNames,undefined8 returnValue)\n\n{\n  long currentEntry;\n  undefined8 entryName;\n  bool foundEntry;\n  long *nextEntry;\n  int comparisonResult;\n  char *formatString;\n  long *currentEntry;\n  long currentEntryOffset;\n  long *previousEntry;\n  \n  currentEntryOffset = archiveEntries[0x1e];\n  if (entryNames == (undefined8 *)0x0) {\n    while (currentEntryOffset != 0) {\n      currentEntry = *(long *)(currentEntryOffset + 0xf0);\n      (*callbackFunction)(currentEntryOffset,0);\n      currentEntryOffset = currentEntry;\n    }\n  }\n  else {\n    do {\n      foundEntry = false;\n      nextEntry = (long *)archiveEntries[0x1e];\n      previousEntry = archiveEntries;\n      while (currentEntry = nextEntry, currentEntry != (long *)0x0) {\n        if (*currentEntry != 0) {\n          comparisonResult = filename_cmp(*entryNames);\n          if (comparisonResult == 0) {\n            foundEntry = true;\n            (*callbackFunction)(currentEntry,previousEntry);\n          }\n        }\n        previousEntry = currentEntry;\n        nextEntry = (long *)currentEntry[0x1e];\n      }\n      if (!foundEntry) {\n        entryName = *entryNames;\n        formatString = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,formatString,entryName);\n      }\n      entryNames = (undefined8 *)entryNames[1];\n    } while (entryNames != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "process_archive_entries_001032a8"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "outputToStdout",
                "uVar1": "programName1",
                "pcVar2": "localizedText",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint outputToStdout)\n\n{\n  undefined8 programName1;\n  char *localizedText;\n  FILE *outputStream;\n  \n  localizedText = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (outputToStdout != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,localizedText,program_name);\n  programName1 = program_name;\n  localizedText = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,localizedText,programName1);\n  localizedText = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedText);\n  ar_emul_default_usage(outputStream);\n  list_supported_targets(program_name,outputStream);\n  if (outputToStdout != 0) {\n    localizedText = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedText,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToStdout ^ 1);\n}\n\n",
            "called": [
                "fprintf",
                "ar_emul_default_usage",
                "list_supported_targets",
                "dcgettext",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "report_function_00107920",
                "param_1": "reportParam1",
                "param_2": "reportParam2",
                "param_3": "reportParam3",
                "param_4": "reportParam4",
                "param_5": "reportParam5",
                "param_6": "reportParam6",
                "param_7": "reportParam7",
                "param_8": "reportParam8",
                "param_9": "reportParam9",
                "param_10": "reportParam10",
                "param_11": "reportParam11",
                "param_12": "reportParam12",
                "param_13": "reportParam13",
                "param_14": "reportParam14",
                "in_AL": "isActivated",
                "local_d8": "outputSize",
                "local_d4": "initialValue",
                "local_d0": "dataPointer",
                "local_c8": "localBuffer",
                "local_b8": "buffer",
                "local_b0": "param10",
                "local_a8": "param11",
                "local_a0": "param12",
                "local_98": "param13",
                "local_90": "param14",
                "local_88": "reportParam1_copy",
                "local_78": "reportParam2_copy",
                "local_68": "reportParam3_copy",
                "local_58": "reportParam4_copy",
                "local_48": "reportParam5_copy",
                "local_38": "reportParam6_copy",
                "local_28": "reportParam7_copy",
                "local_18": "reportParam8_copy"
            },
            "code": "\nvoid reportFunction_00107920(undefined4 reportParam1,undefined4 reportParam2,undefined4 reportParam3,undefined4 reportParam4,\n                 undefined4 reportParam5,undefined4 reportParam6,undefined4 reportParam7,undefined4 reportParam8,\n                 undefined8 reportParam9,undefined8 reportParam10,undefined8 reportParam11,undefined8 reportParam12,\n                 undefined8 reportParam13,undefined8 reportParam14)\n\n{\n  char isActivated;\n  undefined4 outputSize;\n  undefined4 initialValue;\n  undefined *dataPointer;\n  undefined *localBuffer;\n  undefined buffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 reportParam1_copy;\n  undefined4 reportParam2_copy;\n  undefined4 reportParam3_copy;\n  undefined4 reportParam4_copy;\n  undefined4 reportParam5_copy;\n  undefined4 reportParam6_copy;\n  undefined4 reportParam7_copy;\n  undefined4 reportParam8_copy;\n  \n  if (isActivated != '\\0') {\n    reportParam1_copy = reportParam1;\n    reportParam2_copy = reportParam2;\n    reportParam3_copy = reportParam3;\n    reportParam4_copy = reportParam4;\n    reportParam5_copy = reportParam5;\n    reportParam6_copy = reportParam6;\n    reportParam7_copy = reportParam7;\n    reportParam8_copy = reportParam8;\n  }\n  dataPointer = &stack0x00000008;\n  outputSize = 8;\n  localBuffer = buffer;\n  initialValue = 0x30;\n  param10 = reportParam10;\n  param11 = reportParam11;\n  param12 = reportParam12;\n  param13 = reportParam13;\n  param14 = reportParam14;\n  report(reportParam9,&outputSize);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "open_inarch",
                "main",
                "set_times.cold",
                "get_file_size",
                "get_file_size.cold",
                "smart_rename.constprop.0.cold",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "report_function_00107920"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main",
                "normalize.cold",
                "replace_members.cold",
                "print_contents",
                "make_tempname",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00102590": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102590"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_0010e190": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e190",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010e190"
        },
        "FUN_00102470": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102470"
        },
        "FUN_0010e070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010e070"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_and_create_output_file_00102e6f",
                "pcVar1": "output_dir",
                "in_RAX": "input_path",
                "uVar2": "basename_result",
                "uVar3": "error_message",
                "pFVar4": "output_file_pointer",
                "sVar5": "output_dir_length",
                "pcVar6": "current_path_segment"
            },
            "code": "\nvoid extract_and_create_output_file_00102e6f(void)\n\n{\n  char *output_dir;\n  char *input_path;\n  undefined8 basename_result;\n  undefined8 error_message;\n  FILE *output_file_pointer;\n  size_t output_dir_length;\n  char *current_path_segment;\n  \n  output_dir = output_dir;\n  do {\n    input_path = input_path + 1;\n    while (*input_path != '/') {\n      if (*input_path == '\\0') {\n        if ((output_dir != (char *)0x0) && (output_dir_length = strlen(output_dir), output_dir_length != 0)) {\n          if (output_dir[output_dir_length - 1] == '/') {\n            output_filename = (char *)concat(output_dir,output_filename,0);\n          }\n          else {\n            output_filename = (char *)concat(output_dir,&DAT_00108260,output_filename,0);\n          }\n        }\n        if (verbose != 0) {\n          printf(\"x - %s\\n\",output_filename);\n        }\n        output_file_pointer = fopen(output_filename,\"w\");\n        if (output_file_pointer == (FILE *)0x0) {\n          perror(output_filename);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_path_segment = input_path;\n      if ((*input_path == '.') && (current_path_segment = input_path + 1, input_path[1] == '.')) {\n        current_path_segment = input_path + 2;\n        if ((input_path[2] == '/') || (input_path[2] == '\\0')) {\n          basename_result = lbasename();\n          output_dir = output_filename;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          non_fatal(error_message,output_dir,basename_result);\n          output_filename = (char *)basename_result;\n          create_output_file_00105a68();\n          return;\n        }\n      }\n      for (; (input_path = current_path_segment, *current_path_segment != '\\0' && (*current_path_segment != '/')); current_path_segment = current_path_segment + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "non_fatal",
                "dcgettext",
                "FUN_00102e6f",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_and_create_output_file_00102e6f"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "data",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *data;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)yy_fatal_error(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    data = malloc(0x4002);\n    *(void **)((long)buffer + 8) = data;\n  } while (data == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  yy_init_buffer(buffer,param1);\n  result._8_8_ = param4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "malloc",
                "yy_init_buffer",
                "yy_fatal_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_gmon_00102000",
                "ctx": "context",
                "iVar1": "startResult"
            },
            "code": "\nint initializeGmon_00102000(EVP_PKEY_CTX *context)\n\n{\n  int startResult;\n  \n  startResult = __gmon_start__();\n  return startResult;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_gmon_00102000"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00102480": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "FUN_00105a68",
                "ranlib_only",
                "main",
                "maybequit",
                "fatal",
                "ranlib_usage",
                "write_archive.cold",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102480"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_matching_entry_00105870",
                "param_1": "entryList",
                "param_2": "entryCount",
                "param_3": "matchingName",
                "iVar1": "comparisonResult",
                "iVar3": "entryType",
                "uVar2": "selectedName",
                "posname": "currentName",
                "postype": "currentType"
            },
            "code": "\nlong * findMatchingEntry_00105870(long *entryList,int entryCount,undefined8 matchingName)\n\n{\n  int comparisonResult;\n  undefined8 selectedName;\n  int entryType;\n  \n  selectedName = currentName;\n  entryType = currentType;\n  if (currentType == 0) {\n    selectedName = matchingName;\n    entryType = entryCount;\n  }\n  if (entryType == 3) {\n    for (; *entryList != 0; entryList = (long *)(*entryList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*entryList != (undefined8 *)0x0; entryList = (long *)(*entryList + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*entryList,selectedName);\n      if (comparisonResult == 0) {\n        if (entryType != 2) {\n          return entryList;\n        }\n        return (long *)(*entryList + 0xf0);\n      }\n    }\n  }\n  return entryList;\n}\n\n",
            "called": [
                "get_pos_bfd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "find_matching_entry_00105870"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "print_ar_prompt_00103ba8",
                "interactive": "isInteractive",
                "printf": "printMessage",
                "fflush": "flushBuffer"
            },
            "code": "\n\n\nvoid printARPrompt_00103ba8(void)\n\n{\n  if (isInteractive != 0) {\n    printMessage(\"AR >\");\n    flushBuffer(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_ar_prompt_00103ba8"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_arelt_description_00103ddc",
                "param_1": "arelt_param",
                "outfile": "output_file",
                "verbose": "is_verbose",
                "print_arelt_descr": "print_arelt_description"
            },
            "code": "\nvoid print_arelt_description_00103ddc(undefined8 arelt_param)\n\n{\n  print_arelt_description_00103ddc(output_file,arelt_param,is_verbose != 0,0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_arelt_description_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_formatted_string_001078c0",
                "param_1": "format_string",
                "param_2": "arguments",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "program_name": "executable_name"
            },
            "code": "\n\n\nvoid print_formatted_string_001078c0(char *format_string,__gnuc_va_list arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",executable_name);\n  vfprintf(standard_error,format_string,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "putc",
                "fflush",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_formatted_string_001078c0"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "uVar1": "lineNumber",
                "__format": "errorMessage"
            },
            "code": "\nvoid printSyntaxError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *errorMessage;\n  \n  lineNumber = linenumber + 1;\n  errorMessage = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessage,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_syntax_error_001031a5"
        },
        "FUN_0010e098": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e098",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e098"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00102490": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "open_inarch",
                "main",
                "open_inarch.cold",
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102490"
        },
        "FUN_0010e090": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e090",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_0010e090"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "open_inarch",
                "open_inarch.cold",
                "ar_open",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "input_value",
                "lVar1": "counter",
                "lVar2": "new_size",
                "puVar3": "buffer_ptr",
                "bVar4": "zero_byte",
                "__size": "total_size"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t total_size;\n  undefined8 input_value;\n  long counter;\n  long new_size;\n  undefined4 *buffer_ptr;\n  byte zero_byte;\n  \n  zero_byte = 0;\n  if (yy_buffer_stack == (void *)0x0) {\n    yy_buffer_stack = calloc(8,1);\n    if (yy_buffer_stack != (void *)0x0) {\n      yy_buffer_stack_max = 1;\n      yy_buffer_stack_top = 0;\n      return input_value;\n    }\n  }\n  else {\n    if (yy_buffer_stack_top < yy_buffer_stack_max - 1U) {\n      return input_value;\n    }\n    new_size = yy_buffer_stack_max + 8;\n    total_size = new_size * 8;\n    yy_buffer_stack = realloc(yy_buffer_stack,total_size);\n    if (yy_buffer_stack != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)yy_buffer_stack + (total_size - 0x40));\n      yy_buffer_stack_max = new_size;\n      for (counter = 0x10; counter != 0; counter = counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)zero_byte * -2 + 1;\n      }\n      return input_value;\n    }\n  }\n  yy_fatal_error(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  yy_buffer_stack_top = 0;\n  yy_buffer_stack_max = 1;\n  return input_value;\n}\n\n",
            "called": [
                "realloc",
                "calloc",
                "yy_fatal_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "FUN_0010e308": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e308",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010e308"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "main",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00105da0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00105da0"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_output_00102bf5",
                "output_bfd": "bfd_handle",
                "output_filename": "filename"
            },
            "code": "\nvoid cleanup_output_00102bf5(void)\n\n{\n  if (bfd_handle != 0) {\n    bfd_cache_close();\n  }\n  if (output_file != (FILE *)0x0) {\n    fclose(output_file);\n  }\n  unlink_if_ordinary(filename);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "bfd_cache_close",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "remove_output"
            ],
            "imported": false,
            "current_name": "cleanup_output_00102bf5"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "simple_copy.constprop.0.cold",
                "write_archive",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_call_00102020"
            },
            "code": "\nvoid executeIndirectCall_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_call_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main",
                "remove_output.cold",
                "yyparse.isra.0",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_output_file_00102943",
                "output_filename": "outputFile"
            },
            "code": "\nvoid initializeOutputFile_00102943(void)\n\n{\n  outputFile = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "replace_members",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00102943"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_timestamp_00107c80",
                "param_1": "filePath",
                "param_2": "fileAttributes",
                "iVar1": "result",
                "piVar2": "errnoLocationPtr",
                "pcVar3": "errorString",
                "uVar4": "localizedMsg",
                "local_38": "timestamp1",
                "uStack_34": "timestamp2",
                "uStack_30": "timestamp3",
                "uStack_2c": "timestamp4",
                "local_28": "timestamp5"
            },
            "code": "\nvoid setFileTimestamp_00107c80(char *filePath,long fileAttributes)\n\n{\n  int result;\n  int *errnoLocationPtr;\n  char *errorString;\n  undefined8 localizedMsg;\n  undefined4 timestamp1;\n  undefined4 timestamp2;\n  undefined4 timestamp3;\n  undefined4 timestamp4;\n  undefined4 timestamp5;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  timestamp5 = *(undefined4 *)(fileAttributes + 0x58);\n  uStack_24 = *(undefined4 *)(fileAttributes + 0x5c);\n  uStack_20 = *(undefined4 *)(fileAttributes + 0x60);\n  uStack_1c = *(undefined4 *)(fileAttributes + 100);\n  timestamp1 = *(undefined4 *)(fileAttributes + 0x48);\n  timestamp2 = *(undefined4 *)(fileAttributes + 0x4c);\n  timestamp3 = *(undefined4 *)(fileAttributes + 0x50);\n  timestamp4 = *(undefined4 *)(fileAttributes + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timestamp1,0);\n  if (result != 0) {\n    errnoLocationPtr = __errno_location();\n    errorString = strerror(*errnoLocationPtr);\n    localizedMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(localizedMsg,filePath,errorString);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "set_file_timestamp_00107c80"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "main",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "param_19": "fileMode",
                "param_20": "fileSize",
                "param_22": "timestamp",
                "unaff_RBX": "fileContent",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "isExecutable",
                "cStack0000000000000016": "permission_r",
                "cStack0000000000000017": "permission_w",
                "param_9": "permission_x",
                "cStack0000000000000019": "permission_rS",
                "cStack000000000000001a": "permission_wS",
                "cStack000000000000001b": "permission_xS",
                "cStack000000000000001c": "permission_rT",
                "cStack000000000000001d": "permission_wT",
                "cStack000000000000001e": "permission_xT",
                "uStack000000000000001f": "hasPadding",
                "uStack000000000000006c": "inodeNumber",
                "__format": "errorMessage"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *errorMessage;\n  uint uVar1;\n  char **fileContent;\n  FILE *outputFile;\n  char isExecutable;\n  undefined uStack0000000000000015;\n  char permission_r;\n  char permission_w;\n  char permission_x;\n  char permission_rS;\n  char permission_wS;\n  char permission_xS;\n  char permission_rT;\n  char permission_wT;\n  char permission_xT;\n  undefined hasPadding;\n  uint fileMode;\n  uint inodeNumber;\n  uint fileSize;\n  undefined8 timestamp;\n  \n  errorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,errorMessage);\n  uVar1 = fileMode & 0xf000;\n  if (uVar1 == 0x4000) {\n    uStack0000000000000015 = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    uStack0000000000000015 = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    uStack0000000000000015 = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    uStack0000000000000015 = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    uStack0000000000000015 = 0x73;\n  }\n  else {\n    uStack0000000000000015 = 0x70;\n    if (uVar1 != 0x1000) {\n      uStack0000000000000015 = 0x2d;\n    }\n  }\n  permission_r = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  permission_w = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  permission_x = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  permission_rS = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  permission_wS = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  permission_xS = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  permission_rT = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  permission_wT = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  permission_xT = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (permission_x == 'x') {\n      permission_x = 's';\n    }\n    else {\n      permission_x = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (permission_xS == 'x') {\n      permission_xS = 's';\n    }\n    else {\n      permission_xS = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (permission_xT == 'x') {\n      permission_xT = 't';\n    }\n    else {\n      permission_xT = 'T';\n    }\n  }\n  hasPadding = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)inodeNumber,\n          (ulong)fileSize,timestamp,&stack0x00000020,(ulong)fileMode);\n  fputs(*fileContent,outputFile);\n  if (isExecutable != '\\0') {\n    if ((*(byte *)((long)fileContent + 0x49) & 0x10) == 0) {\n      if (fileContent[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileContent[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputs",
                "dcgettext",
                "fputc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "create_output_file_00105300",
                "param_1": "input_filename",
                "param_2": "output_format",
                "plVar1": "archived_files",
                "pcVar2": "output_filename",
                "bVar3": "thin_library_flag",
                "cVar4": "conversion_error",
                "iVar5": "stat_result",
                "uVar6": "error_message",
                "uVar7": "error_message",
                "piVar8": "errno_ptr",
                "lVar9": "archived_file",
                "puVar10": "open_file_result",
                "local_b0": "matching_formats",
                "local_a8": "file_status",
                "target": "desired_format",
                "_stderr": "error_output_stream",
                "silent_create": "silent_creation_flag",
                "make_thin_archive": "thin_archive_flag",
                "operation_alters_arch": "alter_arch_flag"
            },
            "code": "\n\n\nundefined8 * create_output_file_00105300(char *input_filename,undefined8 *output_format)\n\n{\n  long *archived_files;\n  char *output_filename;\n  byte thin_library_flag;\n  char conversion_error;\n  int stat_result;\n  undefined8 error_message;\n  undefined8 error_message;\n  int *errno_ptr;\n  long archived_file;\n  undefined8 *open_file_result;\n  undefined8 matching_formats;\n  stat file_status;\n  \n  bfd_set_error(0);\n  if (desired_format == (char *)0x0) {\n    desired_format = \"plugin\";\n  }\n  stat_result = stat(input_filename,&file_status);\n  output_filename = output_filename;\n  if (stat_result == 0) goto LAB_001053be;\n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    if (alter_arch_flag == '\\0') {\n      fprintf(error_output_stream,\"%s: \",program_name);\n      perror(input_filename);\n      maybequit();\n      return (undefined8 *)0x0;\n    }\n    if ((desired_format == (char *)0x0) && (output_format != (undefined8 *)0x0)) {\n      open_file_result = (undefined8 *)open_inarch_cold();\n      return open_file_result;\n    }\n    output_format = (undefined8 *)bfd_openw(input_filename,desired_format);\n    if (((output_format != (undefined8 *)0x0) && (conversion_error = bfd_set_format(output_format,2), conversion_error != '\\0')) &&\n       (conversion_error = bfd_close(output_format), conversion_error != '\\0')) {\n      output_filename = input_filename;\n      if (silent_creation_flag == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  bfd_fatal(input_filename);\n  do {\n    thin_library_flag = *(byte *)((long)output_format + 0x49) >> 4 & 1;\n    if (thin_archive_flag == '\\0') {\n      if (thin_library_flag != 0) {\n        error_message = *output_format;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(error_message,error_message);\n        goto LAB_00102812;\n      }\n    }\n    else if (thin_library_flag == 0) {\n      error_message = *output_format;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(error_message,error_message);\nLAB_001027cb:\n      bfd_nonfatal(input_filename);\n      stat_result = bfd_get_error();\n      if (stat_result == 0xd) {\nLAB_00102812:\n        list_matching_formats(matching_formats);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_files = output_format + 0x1e;\n      for (archived_file = bfd_openr_next_archived_file(output_format,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(output_format,archived_file)) {\n        *archived_files = archived_file;\n        archived_files = (long *)(archived_file + 0xf0);\n      }\n      *archived_files = 0;\n      stat_result = bfd_get_error();\n      if (stat_result == 9) {\n        return output_format;\n      }\n      do {\n        bfd_fatal(input_filename);\nLAB_00102826:\n        error_message = dcgettext(0,\"creating %s\",5);\n        non_fatal(error_message,input_filename);\n        output_filename = input_filename;\nLAB_001053be:\n        output_filename = output_filename;\n        output_format = (undefined8 *)bfd_openr(input_filename,desired_format);\n      } while (output_format == (undefined8 *)0x0);\n      conversion_error = bfd_check_format_matches(output_format,2,&matching_formats);\n      if (conversion_error == '\\0') goto LAB_001027cb;\n    } while (((operation != 2) && (operation != 7)) ||\n            (archived_file = bfd_openr_next_archived_file(output_format,0), archived_file == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_fatal",
                "perror",
                "fprintf",
                "stat",
                "bfd_set_format",
                "bfd_check_format_matches",
                "bfd_nonfatal",
                "non_fatal",
                "list_matching_formats",
                "bfd_openw",
                "open_inarch.cold",
                "bfd_close",
                "maybequit",
                "fatal",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "xexit",
                "bfd_get_error",
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "ranlib_only",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "create_output_file_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "extract_files_from_archive_00105db0",
                "param_1": "num_args",
                "param_2": "input_file",
                "pbVar1": "byte_ptr",
                "puVar2": "uint_ptr",
                "bVar3": "byte_var",
                "plVar4": "long_ptr",
                "puVar5": "undefined8_ptr",
                "uVar6": "undefined4_var",
                "uVar7": "undefined4_var",
                "bVar8": "bool_var",
                "bVar9": "bool_var",
                "ppcVar10": "char_ptr_ptr",
                "piVar11": "int_ptr",
                "puVar12": "undefined_ptr",
                "bVar13": "byte_var",
                "cVar14": "char_var",
                "iVar15": "int_var",
                "uVar16": "uint_var",
                "uVar17": "undefined4_var",
                "pFVar18": "file_ptr",
                "sVar19": "size_var",
                "sVar20": "size_var",
                "__ptr": "byte_ptr",
                "plVar21": "long_ptr",
                "pFVar22": "file_ptr",
                "pcVar23": "char_var",
                "lVar24": "long_var",
                "uVar25": "ulong_var",
                "puVar26": "undefined8_ptr",
                "uVar27": "undefined8_var",
                "pFVar28": "file_ptr",
                "lVar34": "long_var",
                "lVar35": "long_var",
                "uVar37": "uint_var",
                "unaff_RBP": "char_ptr",
                "pbVar38": "byte_ptr",
                "pcVar39": "char_var",
                "puVar36": "undefined1_ptr",
                "uVar44": "uint_var",
                "iVar45": "int_var",
                "bVar47": "bool_var",
                "bVar48": "byte_var",
                "local_130": "undefined8_var",
                "local_128": "file_ptr",
                "local_118": "byte_ptr",
                "local_110": "char_ptr_ptr",
                "local_108": "size_var",
                "local_100": "long_var",
                "local_b0": "uint_var"
            },
            "code": "\n\n\nvoid extract_files_from_archive_00105db0(uint num_args,FILE *input_file)\n\n{\n  byte *byte_ptr;\n  uint *uint_ptr;\n  byte byte_var;\n  long *long_ptr;\n  undefined8 *undefined8_ptr;\n  undefined4 undefined4_var;\n  undefined4 undefined4_var;\n  bool bool_var;\n  bool bool_var;\n  char **char_ptr_ptr;\n  int *int_ptr;\n  undefined *undefined_ptr;\n  byte byte_var;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined4 undefined4_var;\n  FILE *file_ptr;\n  size_t size_var;\n  size_t size_var;\n  byte *byte_ptr;\n  long *long_ptr;\n  FILE *file_ptr;\n  char *char_var;\n  long long_var;\n  ulong ulong_var;\n  undefined8 *undefined8_ptr;\n  undefined8 undefined8_var;\n  FILE *file_ptr;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyte_var3;\n  long long_var;\n  long long_var;\n  undefined1 *undefined1_ptr;\n  uint uint_var;\n  char *char_ptr;\n  byte *byte_ptr;\n  char *char_var;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uint_var;\n  int int_var;\n  char *pcVar46;\n  bool bool_var;\n  byte byte_var;\n  undefined8 undefined8_var;\n  FILE *file_ptr;\n  byte *byte_ptr;\n  char **char_ptr_ptr;\n  size_t size_var;\n  long long_var;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint uint_var;\n  \n  byte_var = 0;\n  pcVar46 = (char *)(ulong)num_args;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *(long **)input_file;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  pcVar43 = (char *)input_file;\n  file_ptr = input_file;\n  if ((int)num_args < 2) goto LAB_001062c6;\n  char_ptr_ptr = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  file_ptr = (FILE *)0x0;\n  file_ptr = input_file;\n  do {\n    uint_var = (uint)unaff_R12;\n    char_ptr = (char *)(long)(int)uint_var;\n    undefined8_var = (FILE *)((long)char_ptr * 8);\n    pcVar43 = (char *)file_ptr;\n    if (**(char **)(&file_ptr->_flags + (long)char_ptr * 2) == '@') {\n      uint_var = (int)char_ptr_ptr - 1;\n      char_ptr_ptr = (char **)(ulong)uint_var;\n      if (uint_var == 0) {\n        long_ptr = *(long **)file_ptr;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,long_ptr);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      char_var = *(char **)(&file_ptr->_flags + (long)char_ptr * 2) + 1;\n      int_var = stat(char_var,(stat *)local_c8);\n      if (-1 < int_var) {\n        if ((uint_var & 0xf000) == 0x4000) {\n          long_ptr = *(long **)file_ptr;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        file_ptr = fopen(char_var,\"r\");\n        if (file_ptr != (FILE *)0x0) {\n          int_var = fseek(file_ptr,0,2);\n          if (((int_var != -1) && (size_var = ftell(file_ptr), size_var != 0xffffffffffffffff)) &&\n             (int_var = fseek(file_ptr,0,0), int_var != -1)) {\n            byte_ptr = (byte *)xmalloc(size_var + 1);\n            size_var = fread(byte_ptr,1,size_var,file_ptr);\n            if ((size_var == size_var) || (int_var = ferror(file_ptr), int_var == 0)) {\n              byte_ptr[size_var] = 0;\n              byte_var = *byte_ptr;\n              pbyte_var3 = byte_ptr;\n              while( true ) {\n                if (byte_var == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byte_var * 2] & 0x40) == 0) break;\n                byte_var = pbyte_var3[1];\n                pbyte_var3 = pbyte_var3 + 1;\n              }\n              size_var = strlen((char *)byte_ptr);\n              byte_ptr = (byte *)xmalloc(size_var + 1);\n              file_ptr = (FILE *)0x0;\n              int_var = 0;\n              bool_var = false;\n              bool_var = false;\n              bool_var = false;\n              long_var = 0;\n              pbyte_var3 = byte_ptr;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyte_var3 * 2] & 0x40) != 0) {\n                  pbyte_var3 = pbyte_var3 + 1;\n                }\n                if ((int_var == 0) || (int_var + -1 <= (int)long_var)) {\n                  if (file_ptr == (FILE *)0x0) {\n                    int_var = 8;\n                    file_ptr = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&file_ptr->_flags + long_var * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    int_var = int_var * 2;\n                    file_ptr = (FILE *)xrealloc(file_ptr,(long)int_var << 3);\n                    ppcVar31 = (char **)((long)&file_ptr->_flags + long_var * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&file_ptr->_flags + long_var * 8);\n                }\n                byte_var = *pbyte_var3;\n                byte_ptr = byte_ptr;\n                while (byte_var != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byte_var * 2] & 0x40) != 0) &&\n                       (!(bool)(bool_var | bool_var | bool_var))) {\n                      bool_var = false;\n                      bool_var = false;\n                      bool_var = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!bool_var) break;\n                    pbyte_var3 = pbyte_var3 + 1;\n                    *byte_ptr = byte_var;\n                    byte_ptr = byte_ptr + 1;\n                    bool_var = false;\n                    byte_var = *pbyte_var3;\n                    if (byte_var == 0) goto LAB_0010606f;\n                  }\n                  if (byte_var == 0x5c) {\n                    bool_var = true;\n                  }\n                  else if (bool_var) {\n                    if (byte_var == 0x27) {\n                      bool_var = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *byte_ptr = byte_var;\n                      byte_ptr = byte_ptr + 1;\n                    }\n                  }\n                  else if (bool_var) {\n                    if (byte_var != 0x22) goto LAB_001061f1;\n                    bool_var = false;\n                  }\n                  else if (byte_var == 0x27) {\n                    bool_var = true;\n                  }\n                  else {\n                    if (byte_var != 0x22) goto LAB_001061f1;\n                    bool_var = true;\n                  }\n                  byte_ptr = pbyte_var3 + 1;\n                  pbyte_var3 = pbyte_var3 + 1;\n                  byte_var = *byte_ptr;\n                }\nLAB_0010606f:\n                *byte_ptr = 0;\n                long_ptr = (long *)xstrdup(byte_ptr);\n                *ppcVar31 = (char *)long_ptr;\n                *(undefined8 *)(file_ptr->_shortbuf + long_var * 8 + -0x7b) = 0;\n                byte_var = *pbyte_var3;\n                byte_var = (&_sch_istable)[(ulong)byte_var * 2];\n                while ((byte_var & 0x40) != 0) {\n                  byte_var = pbyte_var3[1];\n                  pbyte_var3 = pbyte_var3 + 1;\n                  byte_var = (&_sch_istable)[(ulong)byte_var * 2];\n                }\n                long_var = long_var + 1;\n                if (byte_var == 0) {\n                  free(byte_ptr);\n                  if (file_ptr == input_file) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(byte_ptr);\n          }\n          fclose(file_ptr);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uint_var + 1)) {\nLAB_001062c6:\n      do {\n        if (is_ranlib < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uint_var = (uint)unaff_R12;\n        int_var = bfd_init();\n        char_var = \"fatal error: libbfd ABI mismatch\";\n        if (int_var != 0x118) goto LAB_00106803;\n        char_var = \"x86_64-pc-linux-gnu\";\n        uint_var = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefined_ptr = xatexit_head;\n        unaff_R12 = (FILE *)(ulong)uint_var;\n        if ((char)uint_var != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = xatexit_cleanup;\n          }\n          if (*(int *)(xatexit_head + 8) < 0x20) {\nLAB_0010632b:\n            undefined_ptr = xatexit_head;\n            int_var = *(int *)(xatexit_head + 8);\n            *(int *)(xatexit_head + 8) = int_var + 1;\n            *(code **)(undefined_ptr + (long)int_var * 8 + 0x10) = remove_output;\n          }\n          else {\n            undefined8_ptr = (undefined8 *)malloc(0x110);\n            if (undefined8_ptr != (undefined8 *)0x0) {\n              *undefined8_ptr = undefined_ptr;\n              *(undefined4 *)(undefined8_ptr + 1) = 0;\n              xatexit_head = (undefined *)undefined8_ptr;\n              goto LAB_0010632b;\n            }\n          }\n          long_var = 1;\n          do {\n            long_var = long_var;\n            int_var = (int)pcVar46;\n            if (int_var <= (int)long_var) break;\n            char_var = ar_emul_default_parse_arg(*(undefined8 *)((int *)pcVar43 + long_var * 2));\n            long_var = long_var + 1;\n          } while (char_var != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + long_var * 8 + -8);\n          uint_var = int_var - ((int)long_var + -1);\n          file_ptr = (FILE *)(ulong)uint_var;\n          if (is_ranlib != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uint_var = 0;\n            while (int_var = getopt_long(file_ptr,pcVar46,\"DhHUvVt\",long_options), int_var != -1) {\n              if (int_var < 0x77) {\n                if (0x43 < int_var) {\n                  switch(int_var) {\n                  case 0x44:\n                    deterministic = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    show_help = 1;\n                    break;\n                  case 0x55:\n                    deterministic = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    show_version = 1;\n                    break;\n                  case 0x74:\n                    uint_var = uint_var;\n                  }\n                }\n              }\n              else if (int_var == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uint_var < 2) {\nLAB_00107125:\n              char_var = (char *)0x0;\n              ranlib_usage();\n            }\n            else {\n              if (show_help != 0) {\nLAB_0010711b:\n                ranlib_usage();\n                goto LAB_00107125;\n              }\n              if (show_version != 0) {\n                print_version(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uint_var <= (int)pcVar43) goto LAB_00106f8b;\n                char_var = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uint_var != '\\0') break;\n                uint_var = ranlib_only();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uint_var);\n              }\n            }\n            while (long_var = get_file_size(char_var), long_var < 1) {\n              uint_var = 1;\nLAB_001071c4:\n              int_ptr = (int *)pcVar43;\n              pcVar43 = (char *)((long)int_ptr + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uint_var);\n              if ((int)uint_var <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              char_var = *(char **)((char *)((long)pcVar46 + 0x83) + (long)int_ptr * 8 + -0x7b);\n            }\n            int_var = open(char_var,2,0);\n            if (int_var < 0) {\n              bfd_set_error(1);\n              bfd_fatal(char_var);\nLAB_0010737f:\n              bfd_fatal(char_var);\nLAB_00107387:\n              bfd_nonfatal(char_var);\n              int_var = bfd_get_error();\n              if (int_var == 0xd) {\n                list_matching_formats\n                          (CONCAT53(uStack_c5,CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0])))\n                          );\n              }\n              goto LAB_0010700f;\n            }\n            char_ptr = (char *)bfd_fdopenr(char_var,0);\n            if ((FILE *)char_ptr == (FILE *)0x0) goto LAB_0010737f;\n            char_var = bfd_check_format_matches(char_ptr,2,local_c8);\n            if (char_var == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)char_ptr + 0x48) + 1) & 8) != 0) {\n              if (deterministic != 0) {\n                uint_ptr = (uint *)((long)((long)char_ptr + 0x40) + 4);\n                *uint_ptr = *uint_ptr | 0x2000;\n              }\n              (**(code **)(*(char **)((long)char_ptr + 8) + 0x1f0))(char_ptr);\n              char_var = bfd_close(char_ptr);\n              if (char_var != '\\0') {\n                uint_var = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8_var = dcgettext(0,\"%s: no archive map to update\",5);\n            fatal(undefined8_var,char_var);\nLAB_001073cc:\n            char_var = (char *)lbasename(program_name);\n            size_var = strlen(char_var);\n            if ((size_var < 6) ||\n               (int_var = filename_cmp(char_var + (size_var - 6),\"ranlib\"), int_var != 0)) {\n              is_ranlib = 0;\n            }\n            else {\n              is_ranlib = 1;\n            }\n            goto LAB_001062d3;\n          }\n          undefined1_ptr = long_options;\n          char_ptr = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          file_ptr = (FILE *)char_ptr;\n          file_ptr = file_ptr;\n          if ((int)uint_var < 2) goto switchD_00107462_caseD_1;\n          undefined8_var = (FILE *)CONCAT71(undefined8_var._1_7_,(char)uint_var);\nLAB_001063a3:\n          file_ptr = (FILE *)char_ptr;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            size_var = strlen(*(char **)((long)pcVar46 + 8));\n            int_var = (int)size_var + (int)file_ptr;\n            unaff_R12 = (FILE *)xmalloc((long)int_var * 8);\n            undefined4_var = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = undefined4_var;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            file_ptr = (FILE *)((long)pcVar46 + 0x10);\n            char_ptr_ptr = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              byte_ptr = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              char_var = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = char_var;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                char_var = (char *)xstrdup(byte_ptr);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = char_var;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  char_var = (char *)xstrdup(byte_ptr);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = char_var;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    char_var = (char *)xstrdup(byte_ptr);\n                    unaff_R12->_IO_write_base = char_var;\n                    char_var = *(char *)((long)ppcVar31 + 4);\n                    char_ptr_ptr = ppcVar32;\n                    if (char_var != '\\0') {\n                      char_var = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = char_var;\n                        char_var = (char *)xstrdup(byte_ptr);\n                        char_var = char_var + 1;\n                        *ppcVar31 = char_var;\n                        char_var = *char_var;\n                        ppcVar31 = ppcVar32;\n                        char_ptr_ptr = ppcVar32;\n                      } while (char_var != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            long_var = (long)(int)file_ptr;\n            int_ptr = (int *)pcVar46 + long_var * 2;\n            if (file_ptr < int_ptr) {\n              ulong_var = long_var * 8 - 0x11;\n              if ((ulong_var < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < int_ptr) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < int_ptr &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < int_ptr)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < int_ptr)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < int_ptr)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  char_ptr_ptr = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < int_ptr;\n                      ppcVar31 = ppcVar31 + (ulong)byte_var * -2 + 1) {\n                    *char_ptr_ptr = *ppcVar31;\n                    char_ptr_ptr = char_ptr_ptr + (ulong)byte_var * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4_var = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                undefined4_var = *(undefined4 *)((long)pcVar46 + 0x18);\n                undefined4_var = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (ulong_var >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefined4_var;\n                *(undefined4 *)(ppcVar32 + 1) = undefined4_var;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = undefined4_var;\n                undefined4_var = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                undefined4_var = *(undefined4 *)((long)pcVar46 + 0x28);\n                undefined4_var = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulong_var = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefined4_var;\n                *(undefined4 *)(ppcVar32 + 3) = undefined4_var;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = undefined4_var;\n                if (ulong_var != 2) {\n                  undefined4_var = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  undefined4_var = *(undefined4 *)((long)pcVar46 + 0x38);\n                  undefined4_var = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefined4_var;\n                  *(undefined4 *)(ppcVar32 + 5) = undefined4_var;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = undefined4_var;\n                  if (ulong_var != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      char_var = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      undefined4_var = *(undefined4 *)(char_var + 4);\n                      undefined4_var = *(undefined4 *)(char_var + 8);\n                      undefined4_var = *(undefined4 *)(char_var + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)char_var;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefined4_var;\n                      *(undefined4 *)(ppcVar31 + 1) = undefined4_var;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = undefined4_var;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulong_var);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)file_ptr + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + long_var + -2;\n            }\n            file_ptr = (FILE *)(ulong)(int_var - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uint_var = (uint)unaff_R12;\n            uint_var = getopt_long((ulong)file_ptr & 0xffffffff,pcVar46,file_ptr,undefined1_ptr,0);\n            char_ptr = (char *)file_ptr;\n            if (uint_var == 0xffffffff) break;\n            if (((uint_var - 100 < 0x15) && ((0x117201UL >> ((ulong)(uint_var - 100) & 0x3f) & 1) != 0))\n               && (operation != 0)) goto LAB_001067f7;\n            file_ptr = (FILE *)pcVar46;\n            if (uint_var < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uint_var]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            usage(0);\n            pcVar46 = (char *)file_ptr;\nswitchD_00107462_caseD_68:\n            show_help = 1;\n          }\nLAB_00106680:\n          uint_var = operation;\n          file_ptr = (FILE *)char_ptr;\n          if (operation == 0) {\n            if (((write_armap == 1) || (mri_mode != 0)) ||\n               (((int)file_ptr <= _optind || (_optind < 1)))) {\n              uint_var = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uint_var = (int)file_ptr - (_optind + -1);\n            file_ptr = (FILE *)(ulong)uint_var;\n            _optind = 0;\n            if (1 < (int)uint_var) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)undefined8_var & 0xff);\n          uint_var = (uint)unaff_R12;\n          undefined1_ptr = (undefined1 *)((int *)pcVar46 + (long)_optind * 2);\n          if (show_help == 0) {\n            if (show_version != 0) {\n              print_version(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (mri_mode == 0) {\n              file_ptr = (FILE *)pcVar46;\n              if (*(long *)undefined1_ptr == 0) goto switchD_00107462_caseD_1;\n              if (operation == 7) {\n                if (write_armap == 0) {\n                  if (uint_var == 3) goto LAB_00106abc;\n                  if (uint_var != 0) goto LAB_00106700;\nLAB_00106eff:\n                  char_var = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                operation = 2;\n                if (newer_only != 0) goto LAB_0010704f;\n              }\n              else if ((uint_var == 3) || (uint_var == 0)) {\n                if (write_armap == 1) {\n                  undefined4_var = ranlib_only();\n                    \n                  xexit(undefined4_var);\n                }\nLAB_00106abc:\n                if (uint_var == 0) goto LAB_00106eff;\n                if (newer_only != 0) {\nLAB_00106ad1:\n                  char_var = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (newer_only != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\nLAB_00106720:\n              char_ptr = (char *)0x0;\n              if (postype != 0) {\n                posname = *(long *)undefined1_ptr;\n                char_ptr = (char *)0x1;\n                char_var = \"missing position arg.\";\n                if (posname == 0) goto LAB_00106803;\n              }\n              if (counted_name_mode != '\\0') {\n                char_var = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((operation & 0xfffffffb) == 1) {\n                  int_var = (int)char_ptr;\n                  if (*(char **)((long)undefined1_ptr + (long)int_var * 2 * 4) == (char *)0x0) {\n                    undefined8_var = dcgettext(0,\"`N\\' missing value.\",5);\n                    fatal(undefined8_var);\n                    uint_var = extraout_EDX;\nLAB_00107548:\n                    if (uint_var == 2) {\nLAB_0010704f:\n                      char_var = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (deterministic < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  char_ptr = (char *)(ulong)(int_var + 1);\n                  long_var = strtol(*(char **)((long)undefined1_ptr + (long)int_var * 2 * 4),(char **)0x0,10);\n                  char_var = \"Value for `N\\' must be positive.\";\n                  counted_name_counter = (int)long_var;\n                  if (0 < counted_name_counter) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              long_var = (long)(int)char_ptr;\n              file_ptr = (FILE *)char_ptr;\n              if (*(long *)(int *)((long)undefined1_ptr + long_var * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              file_ptr = (FILE *)((long)undefined1_ptr + (long_var + 1) * 2 * 4);\n              if (*(FILE **)file_ptr == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                file_ptr = (FILE *)0x0;\n              }\n              else if (*(long *)((long)undefined1_ptr + (long_var + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)undefined1_ptr + (long_var + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)undefined1_ptr + (long_var + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)undefined1_ptr + (long_var + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                file_ptr = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)file_ptr;\n                  file_ptr = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)undefined1_ptr + long_var * 2 * 4) + (long)file_ptr * 2) != 0\n                        );\n              }\n              undefined8_ptr = (undefined8 *)open_inarch();\n              file_ptr = file_ptr;\n              if (operation == 5) {\n                char_var = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8_ptr + 0x49) & 0x10) == 0) {\n                  char_ptr = (char *)file_ptr;\n                  if (libdeps != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  map_over_members(undefined8_ptr,extract_file,char_ptr,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (libdeps != (char *)0x0) {\nLAB_00106d5c:\n                size_var = strlen(libdeps);\n                pcVar46 = \"__.LIBDEP\";\n                char_ptr = (char *)(size_var + 1);\n                libdeps_bfd = bfd_create(\"__.LIBDEP\",undefined8_ptr);\n                if (libdeps_bfd == 0) {\n                  char_var = \"Cannot create libdeps record.\";\n                }\n                else {\n                  long_var = bfd_find_target(\"binary\",libdeps_bfd);\n                  char_var = \"Cannot set libdeps record type to binary.\";\n                  if (long_var != 0) {\n                    char_var = bfd_set_format(libdeps_bfd,1,5);\n                    char_var = \"Cannot set libdeps object format.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    char_var = bfd_make_writable(libdeps_bfd,\"Cannot set libdeps object format.\",5);\n                    char_var = \"Cannot make libdeps object writable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    file_ptr = (FILE *)bfd_bwrite(libdeps,char_ptr,libdeps_bfd);\n                    char_var = \"Cannot write libdeps record.\";\n                    if (file_ptr != (FILE *)char_ptr) goto LAB_00106803;\n                    char_var = bfd_make_readable(libdeps_bfd,\"Cannot write libdeps record.\",5);\n                    char_var = \"Cannot make libdeps object readable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    long_var = bfd_find_target(\"plugin\",libdeps_bfd,5);\n                    char_var = \"Cannot reset libdeps record type.\";\n                    if (long_var == 0) goto LAB_00106803;\n                    int_var = (int)pcVar43;\n                    undefined8_var = (FILE *)((long)(int_var + 2) * 8);\n                    char_ptr = (char *)xmalloc(undefined8_var,\"Cannot reset libdeps record type.\");\n                    if (int_var == 0) {\n                      long_var = 0;\n                    }\n                    else {\n                      undefined4_var = *(undefined4 *)&file_ptr->field_0x4;\n                      *(int *)char_ptr = file_ptr->_flags;\n                      *(undefined4 *)((long)char_ptr + 4) = undefined4_var;\n                      long_var = 8;\n                      ppcVar31 = (char **)((long)char_ptr + 8);\n                      for (pcVar43 = undefined8_var[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&file_ptr->_flags;\n                        file_ptr = (FILE *)((long)file_ptr + (ulong)byte_var * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byte_var * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)char_ptr + long_var) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(int_var + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)char_ptr + -0xd8))->_unused2 + 0xc + (long)undefined8_var) = 0;\n                    switch(operation) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      file_ptr = (FILE *)char_ptr;\n                      if (silent_create == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(operation) {\n              case 1:\n                char_ptr = (char *)file_ptr;\n                if (file_ptr == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                file_ptr = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                char_ptr = (char *)file_ptr;\n                if ((file_ptr != (FILE *)0x0) || (0 < write_armap)) {\nswitchD_00106ed8_caseD_2:\n                  replace_members(undefined8_ptr,char_ptr,operation == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                char_ptr = (char *)file_ptr;\nswitchD_00106ed8_caseD_3:\n                map_over_members(undefined8_ptr,print_descr,char_ptr,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                char_ptr = (char *)file_ptr;\nswitchD_00106ed8_caseD_4:\n                map_over_members(undefined8_ptr,print_contents,char_ptr,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                char_var = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (silent_create != 0) goto switchD_001067e8_caseD_2;\n                if (file_ptr == (FILE *)0x0) break;\nLAB_00106afb:\n                file_ptr = (FILE *)(undefined8_ptr + 0x1e);\n                do {\n                  unaff_R12 = file_ptr;\n                  if (*(FILE **)file_ptr == (FILE *)0x0) {\nLAB_00106b9f:\n                    write_archive(undefined8_ptr);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    long_ptr = *(long **)unaff_R12;\n                    pcVar46 = *(char **)file_ptr;\n                    if (long_ptr == (long *)0x0) {\n                      undefined8_var = *undefined8_ptr;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      fatal(uVar30,pcVar46,undefined8_var);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    long_var = *long_ptr;\n                    undefined8_var = normalize(pcVar46,undefined8_ptr);\n                    int_var = filename_cmp(undefined8_var,long_var);\n                    if (int_var == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)long_ptr[0x1e];\n                  pplVar29 = (long **)get_pos_bfd(file_ptr,3,0);\n                  bool_var = verbose != 0;\n                  long_ptr = *pplVar29;\n                  *pplVar29 = long_ptr;\n                  long_ptr[0x1e] = (long)long_ptr;\n                  if (bool_var) {\n                    printf(\"m - %s\\n\",*(FILE **)file_ptr);\n                  }\n                  file_ptr = (FILE *)&file_ptr->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < deterministic) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            usage(1);\n          }\n          deterministic = 1;\nLAB_0010755f:\n          int_var = fileno(_stdin);\n          interactive = isatty(int_var);\n          yyparse_isra_0();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4_var = bfd_get_error();\n        file_ptr = (FILE *)bfd_errmsg(undefined4_var);\n        undefined8_var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        int_var = fatal(undefined8_var,\"x86_64-pc-linux-gnu\",file_ptr);\nLAB_0010751b:\n        if (operation == 0) {\nLAB_00107447:\n          undefined1_ptr = char_var;\n          file_ptr = (FILE *)pcVar46;\n          switch(int_var) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            deterministic = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            mri_mode = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            counted_name_mode = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            display_offsets = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            full_pathname = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            write_armap = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            make_thin_archive = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            deterministic = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            show_version = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            postype = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            postype = 1;\n            goto LAB_001065a2;\n          case 99:\n            silent_create = 1;\n            goto LAB_001065a2;\n          case 100:\n            operation = 1;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            ar_truncate = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (libdeps == (char *)0x0) {\n              libdeps = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uint_var = (uint)unaff_R12;\n            char_var = \"libdeps specified more than once\";\n            char_ptr = (char *)file_ptr;\n            break;\n          case 0x6d:\n            operation = 6;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            preserve_dates = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            operation = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            operation = 7;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            operation = 2;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            write_armap = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            operation = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            newer_only = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            verbose = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            operation = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            target = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            output_dir = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        char_var = \"two different operation options specified\";\n        char_ptr = (char *)file_ptr;\nLAB_00106803:\n        undefined8_var = dcgettext(0,char_var,5);\n        fatal(undefined8_var);\nLAB_00106814:\n        int_var = (int)pcVar46;\n        file_ptr = (FILE *)xmalloc(8);\n        *(long **)file_ptr = (long *)0x0;\n        if ((FILE *)pcVar43 == input_file) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            int_var = 0;\n          }\n          else {\n            long_var = 1;\n            do {\n              int_var = (int)long_var;\n              long_var = long_var * 2;\n              long_var = long_var + 1;\n            } while (*(long *)((int *)pcVar43 + long_var) != 0);\n          }\n          file_ptr = (FILE *)xmalloc((long)(int_var + 1) << 3);\n          long_ptr = *(long **)pcVar43;\n          long_var = 0;\n          while (long_ptr != (long *)0x0) {\n            undefined8_var = xstrdup();\n            *(undefined8 *)((long)&file_ptr->_flags + long_var) = undefined8_var;\n            long_ptr = *(long **)((char *)((long)pcVar43 + 0x83) + long_var + -0x7b);\n            long_var = long_var + 8;\n          }\n          *(undefined8 *)((long)&file_ptr->_flags + long_var) = 0;\nLAB_0010610a:\n          int_var = (int)pcVar46;\n          pcVar43 = (char *)file_ptr;\n          if (*(long **)file_ptr == (long *)0x0) goto LAB_00106a80;\n          long_var = 0;\n          do {\n            long_var = long_var + 1;\n            long_var = long_var * 8;\n            long_var = long_var;\n          } while (*(long *)(file_ptr->_shortbuf + long_var + -0x7b) != 0);\n          size_var = long_var * 8;\n        }\n        else {\nLAB_00106a80:\n          long_var = 0;\n          size_var = 0;\n        }\n        long_var = (long)char_ptr * 2;\n        char_ptr = (char *)((long)(char **)char_ptr + long_var);\n        free(*(void **)((int *)pcVar43 + long_var));\n        file_ptr = (FILE *)xrealloc(pcVar43,(long_var + 1 + (long)int_var) * 8);\n        uint_var = int_var + -1 + (int)long_var;\n        pcVar46 = (char *)(ulong)uint_var;\n        memmove(&file_ptr->_flags + (long)char_ptr * 2,\n                (void *)((long)&file_ptr->_IO_read_ptr + (long)undefined8_var),\n                (long)(int)(int_var - uint_var) << 3);\n        memcpy((void *)((long)&undefined8_var->_flags + (long)&file_ptr->_flags),file_ptr,size_var);\n        free(file_ptr);\n        free(byte_ptr);\n        fclose(file_ptr);\n        uint_var = (int)file_ptr + 1;\n        unaff_R12 = undefined8_var;\n        pcVar43 = (char *)file_ptr;\n        undefined8_var = file_ptr;\n        if ((int)uint_var < (int)uint_var) goto LAB_001061ce;\n      } while( true );\n    }\n    uint_var = uint_var + 1;\n    file_ptr = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uint_var;\n  } while( true );\nswitchD_00107462_caseD_0:\n  int_var = getopt_long((ulong)file_ptr & 0xffffffff,pcVar46,file_ptr,\"x86_64-pc-linux-gnu\");\n  char_ptr = (char *)file_ptr;\n  if (int_var == -1) goto LAB_00106680;\n  if ((0x14 < int_var - 100U) || ((0x117201UL >> ((byte)(int_var - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (deterministic != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8_var = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  non_fatal(undefined8_var);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)char_ptr == (FILE *)0x0) {\n    if ((char)file_ptr != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    output_filename = 0;\n    goto LAB_0010696c;\n  }\n  int_var = 0;\n  int_var = strcmp((char *)*(FILE **)char_ptr,\"__.SYMDEF\");\n  undefined8_ptr = undefined8_ptr;\n  if (int_var == 0) {\n    *(byte *)((long)undefined8_ptr + 0x49) = *(byte *)((long)undefined8_ptr + 0x49) & 0xf7;\n    write_armap = -1;\n  }\n  else {\n    while( true ) {\n      long_ptr = undefined8_ptr + 0x1e;\n      if ((undefined8 *)*long_ptr == (undefined8 *)0x0) break;\n      undefined8_var = *(undefined8 *)*long_ptr;\n      uVar30 = normalize(*(FILE **)char_ptr,undefined8_ptr);\n      int_var = filename_cmp(uVar30,undefined8_var);\n      if ((int_var == 0) &&\n         ((counted_name_mode == '\\0' || (int_var = int_var + 1, int_var == counted_name_counter)))) {\n        if (verbose != 0) {\n          printf(\"d - %s\\n\",*(FILE **)char_ptr);\n        }\n        *long_ptr = *(long *)(*long_ptr + 0xf0);\n        file_ptr = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8_ptr = (undefined8 *)*long_ptr;\n    }\n    if (verbose != 0) {\n      file_ptr = *(FILE **)char_ptr;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,file_ptr);\n    }\n  }\nLAB_00106d38:\n  char_ptr = (char *)((long)char_ptr + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "fprintf",
                "memmove",
                "bfd_create",
                "fclose",
                "ranlib_usage",
                "strcmp",
                "xstrdup",
                "textdomain",
                "bfd_set_error_program_name",
                "bfd_get_error",
                "print_version",
                "usage",
                "free",
                "replace_members",
                "write_archive",
                "fileno",
                "strtol",
                "bfd_bwrite",
                "open_inarch",
                "fseek",
                "map_over_members",
                "xatexit_cleanup",
                "normalize",
                "bfd_make_writable",
                "bfd_fdopenr",
                "get_pos_bfd",
                "bindtextdomain",
                "bfd_errmsg",
                "open",
                "strlen",
                "stat",
                "xmalloc_set_program_name",
                "bfd_nonfatal",
                "yyparse.isra.0",
                "print_descr",
                "ar_emul_default_parse_arg",
                "bfd_init",
                "remove_output",
                "ranlib_only",
                "bfd_close",
                "bfd_plugin_set_program_name",
                "extract_file",
                "getopt_long",
                "bfd_set_default_target",
                "fopen",
                "memcpy",
                "ftell",
                "bfd_find_target",
                "bfd_fatal",
                "bfd_check_format_matches",
                "bfd_set_format",
                "non_fatal",
                "print_contents",
                "bfd_plugin_set_plugin",
                "malloc",
                "list_matching_formats",
                "fread",
                "ferror",
                "setlocale",
                "bfd_make_readable",
                "fatal",
                "get_file_size",
                "dcgettext",
                "isatty",
                "xexit",
                "xrealloc",
                "filename_cmp",
                "printf",
                "xmalloc",
                "bfd_set_error",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "extract_files_from_archive_00105db0"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main",
                "ar_open",
                "write_archive",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatStrings",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "currentFormatString"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatStrings)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormatString;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,programName);\n  for (currentFormatString = formatStrings; *currentFormatString != 0; currentFormatString = currentFormatString + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "free",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main",
                "make_tempname.cold",
                "list_supported_targets",
                "print_contents",
                "yyparse.isra.0",
                "extract_file.cold",
                "list_matching_formats",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "extract_target_from_binary_00102710",
                "lVar5": "binary_handle",
                "cVar2": "format_check_result",
                "bVar3": "is_thin_archive",
                "iVar4": "error_code",
                "uVar6": "error_message",
                "uVar7": "error_message",
                "puVar8": "output_handle",
                "unaff_RBP": "output_filename",
                "in_stack_00000008": "stack_parameter",
                "target": "extracted_target",
                "silent_create": "is_silent_create",
                "make_thin_archive": "should_make_thin_archive",
                "output_filename": "output_filepath",
                "operation": "current_operation"
            },
            "code": "\nundefined8 * extract_target_from_binary_00102710(void)\n\n{\n  long *plVar1;\n  char format_check_result;\n  byte is_thin_archive;\n  int error_code;\n  long binary_handle;\n  undefined8 error_message;\n  undefined8 error_message;\n  undefined8 *output_handle;\n  undefined8 output_filename;\n  undefined8 stack_parameter;\n  \n  binary_handle = bfd_openr();\n  if (binary_handle != 0) {\n    format_check_result = bfd_check_format(binary_handle,1);\n    if (format_check_result != '\\0') {\n      extracted_target = **(undefined8 **)(binary_handle + 8);\n    }\n    bfd_close(binary_handle);\n  }\n  output_handle = (undefined8 *)bfd_openw();\n  if (((output_handle != (undefined8 *)0x0) && (format_check_result = bfd_set_format(output_handle,2), format_check_result != '\\0')) &&\n     (format_check_result = bfd_close(output_handle), format_check_result != '\\0')) {\n    if (is_silent_create == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  bfd_fatal();\n  do {\n    is_thin_archive = *(byte *)((long)output_handle + 0x49) >> 4 & 1;\n    if (should_make_thin_archive == '\\0') {\n      if (is_thin_archive != 0) {\n        error_message = *output_handle;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(error_message,error_message);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_archive == 0) {\n      error_message = *output_handle;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(error_message,error_message);\nLAB_001027cb:\n      bfd_nonfatal();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        list_matching_formats(stack_parameter);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      plVar1 = output_handle + 0x1e;\n      for (binary_handle = bfd_openr_next_archived_file(output_handle,0); binary_handle != 0;\n          binary_handle = bfd_openr_next_archived_file(output_handle,binary_handle)) {\n        *plVar1 = binary_handle;\n        plVar1 = (long *)(binary_handle + 0xf0);\n      }\n      *plVar1 = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_handle;\n      }\n      do {\n        bfd_fatal();\nLAB_00102826:\n        error_message = dcgettext(0,\"creating %s\",5);\n        non_fatal(error_message);\nLAB_001053b7:\n        output_filepath = output_filename;\n        output_handle = (undefined8 *)bfd_openr();\n      } while (output_handle == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(output_handle,2,&stack0x00000008);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((current_operation != 2) && (current_operation != 7)) ||\n            (binary_handle = bfd_openr_next_archived_file(output_handle,0), binary_handle == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "open_inarch"
            ],
            "imported": false,
            "current_name": "extract_target_from_binary_00102710"
        },
        "FUN_0010e2b0": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b0",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b0"
        },
        "FUN_0010e208": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e208",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010e208"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "parse_file_00103e95",
                "pplVar1": "doublePointerVar",
                "cVar2": "charVar",
                "ppFVar3": "doublePointerFileVar",
                "pFVar4": "fileVar",
                "plVar5": "longVar",
                "uVar6": "unsignedVar",
                "pbVar7": "bytePointerVar",
                "iVar8": "intVar",
                "pcVar10": "charVar2",
                "uVar11": "unsignedVar2",
                "iVar9": "intVar2",
                "plVar12": "longVar2",
                "sVar13": "sizeVar",
                "pvVar14": "voidPointerVar",
                "pcVar15": "charVar3",
                "pcVar16": "charVar4",
                "lVar17": "longVar3",
                "lVar18": "longVar7",
                "uVar19": "unsignedVar3",
                "uVar20": "unsignedVar4",
                "lVar21": "longVar5",
                "puVar22": "unsignedLongPointerVar",
                "puVar23": "unsignedLongPointerVar2",
                "uVar24": "unsignedVar5",
                "iVar25": "intVar3",
                "uVar26": "unsignedVar6",
                "ppcVar27": "doublePointerCharVar",
                "bVar28": "boolVar",
                "bVar30": "byteVar",
                "lVar31": "longVar6",
                "pbVar32": "bytePointerVar2",
                "pbVar33": "bytePointerVar3",
                "piVar34": "intPointerVar",
                "pbVar35": "bytePointerVar4",
                "uVar36": "unsignedVar7",
                "iVar37": "intVar4"
            },
            "code": "\n\n\nvoid parseFile_00103e95(void)\n\n{\n  long **doublePointerVar;\n  char charVar;\n  FILE **doublePointerFileVar;\n  FILE *fileVar;\n  long *longVar;\n  undefined8 unsignedVar;\n  byte *bytePointerVar;\n  int intVar;\n  char *charVar2;\n  undefined8 unsignedVar2;\n  int intVar2;\n  long *longVar2;\n  size_t sizeVar;\n  void *voidPointerVar;\n  char *charVar3;\n  char *charVar4;\n  long longVar3;\n  long longVar7;\n  ulong unsignedVar3;\n  uint unsignedVar4;\n  long longVar5;\n  undefined8 *unsignedLongPointerVar;\n  undefined8 *unsignedLongPointerVar2;\n  uint unsignedVar5;\n  int intVar3;\n  ulong unsignedVar6;\n  char **doublePointerCharVar;\n  bool boolVar;\n  char **ppcharVar9;\n  byte byteVar;\n  long longVar6;\n  byte *bytePointerVar2;\n  byte *bytePointerVar3;\n  int *intPointerVar;\n  byte *bytePointerVar4;\n  uint unsignedVar7;\n  int intVar4;\n  char **ppcVar38;\n  byte bVar39;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *local_828;\n  char *local_820;\n  long local_818;\n  char **local_810;\n  int local_800;\n  uint local_7fc;\n  byte *local_7f8;\n  stat local_7d0;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  bVar39 = 0;\n  longVar7 = 0;\n  yychar = -2;\n  ppcharVar9 = local_678;\n  local_800 = 0;\n  local_828 = local_740;\n  local_818 = 200;\n  local_820 = local_828;\n  local_810 = ppcharVar9;\nLAB_00103ee9:\n  *local_828 = (char)longVar7;\n  if (local_820 + local_818 + -1 <= local_828) {\n    longVar5 = (long)local_828 - (long)local_820;\n    longVar3 = longVar5 + 1;\n    if (local_818 < 10000) {\n      longVar6 = local_818 * 2;\n      local_818 = 10000;\n      if (longVar6 < 0x2711) {\n        local_818 = longVar6;\n      }\n      charVar2 = (char *)malloc(local_818 * 9 + 7);\n      if (charVar2 != (char *)0x0) {\n        longVar6 = longVar3 * 8;\n        charVar3 = local_820;\n        charVar4 = charVar2;\n        for (; longVar3 != 0; longVar3 = longVar3 + -1) {\n          *charVar4 = *charVar3;\n          charVar3 = charVar3 + (ulong)bVar39 * -2 + 1;\n          charVar4 = charVar4 + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(charVar2 + local_818);\n        ppcharVar9 = ppcVar38;\n        for (; longVar6 != 0; longVar6 = longVar6 + -1) {\n          *(undefined *)ppcharVar9 = *(undefined *)local_810;\n          local_810 = (char **)((long)local_810 + (ulong)bVar39 * -2 + 1);\n          ppcharVar9 = (char **)((long)ppcharVar9 + (ulong)bVar39 * -2 + 1);\n        }\n        if (local_820 != local_740) {\n          free(local_820);\n        }\n        local_828 = charVar2 + longVar5;\n        ppcharVar9 = ppcVar38 + longVar5;\n        local_820 = charVar2;\n        local_810 = ppcVar38;\n        if (charVar2 + local_818 + -1 <= local_828) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    yyerror_constprop_0();\nLAB_0010524c:\n    charVar2 = local_820;\n    if (local_820 == local_740) {\n      return;\n    }\nLAB_00105265:\n    free(charVar2);\n    return;\n  }\nLAB_00103fd8:\n  intVar4 = (int)longVar7;\n  if (intVar4 == 3) goto LAB_0010524c;\n  charVar = (&yypact)[intVar4];\n  if (charVar != -0xe) {\n    if (yychar == -2) {\n      if (yy_init == 0) {\n        yy_init = 1;\n        if (yy_start == 0) {\n          yy_start = 1;\n        }\n        if (yyin == (FILE *)0x0) {\n          yyin = _stdin;\n        }\n        if (yyout == (FILE *)0x0) {\n          yyout = _stdout;\n        }\n        if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0)) {\n          yyensure_buffer_stack();\n          unsignedLongPointerVar = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          unsignedVar2 = yy_create_buffer_constprop_0(yyin);\n          *unsignedLongPointerVar = unsignedVar2;\n        }\n        yy_load_buffer_state();\n      }\nLAB_001040b1:\n      *yy_c_buf_p = yy_hold_char;\n      bytePointerVar2 = yy_c_buf_p;\n      bytePointerVar4 = yy_c_buf_p;\n      unsignedVar4 = yy_start;\nLAB_001040d4:\n      unsignedVar3 = (ulong)unsignedVar4;\n      unsignedVar6 = (ulong)local_7fc;\n      boolVar = false;\n      do {\n        byteVar = yy_ec[*bytePointerVar4];\n        if (*(short *)(yy_accept + (long)(int)unsignedVar3 * 2) != 0) {\n          boolVar = true;\n          unsignedVar6 = unsignedVar3 & 0xffffffff;\n          local_7f8 = bytePointerVar4;\n        }\n        while( true ) {\n          intVar = (int)unsignedVar3;\n          longVar7 = (long)(int)((int)*(short *)(yy_base + (long)intVar * 2) + (uint)byteVar);\n          if (intVar == *(short *)(yy_chk + longVar7 * 2)) break;\n          unsignedVar3 = (ulong)(uint)(int)*(short *)(yy_def + (long)intVar * 2);\n          if (0xb0 < *(short *)(yy_def + (long)intVar * 2)) {\n            byteVar = yy_meta[(int)(uint)byteVar];\n          }\n        }\n        bytePointerVar4 = bytePointerVar4 + 1;\n        unsignedVar3 = (ulong)*(short *)(yy_nxt + longVar7 * 2);\n      } while (*(short *)(yy_base + unsignedVar3 * 2) != 0xc2);\n      local_7fc = (uint)unsignedVar6;\n      bytePointerVar3 = bytePointerVar2;\n      if (boolVar) {\n        yy_last_accepting_cpos = local_7f8;\n        yy_last_accepting_state = local_7fc;\n      }\nLAB_0010419f:\n      intVar = (int)*(short *)(yy_accept + (long)(int)unsignedVar3 * 2);\n      if (intVar == 0) {\n        intVar = (int)*(short *)(yy_accept + (long)(int)yy_last_accepting_state * 2);\n        bytePointerVar4 = yy_last_accepting_cpos;\n      }\n      yyleng = (int)bytePointerVar4 - (int)bytePointerVar3;\n      yy_hold_char = *bytePointerVar4;\n      yy_c_buf_p = bytePointerVar4;\n      yytext = bytePointerVar3;\n      *bytePointerVar4 = 0;\nLAB_001041f0:\n      bytePointerVar2 = yytext;\n      longVar7 = yy_buffer_stack_top;\n      switch(intVar) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        yychar = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        yychar = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        yychar = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        yychar = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        yychar = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        yychar = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        yychar = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        yychar = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        yychar = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        yychar = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        yychar = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        yychar = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        yychar = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        yychar = 0x103;\n        break;\n      case 0x1f:\n        linenumber = linenumber + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        yychar = 0x28;\n        break;\n      case 0x21:\n        yychar = 0x29;\n        break;\n      case 0x22:\n        yychar = 0x2c;\n        break;\n      case 0x23:\n        yylval = (char *)xstrdup(yytext);\n        yychar = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        linenumber = linenumber + 1;\n        yychar = 0x102;\n        break;\n      case 0x28:\n        fwrite(yytext,(long)yyleng,1,yyout);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        yychar = 0;\n        break;\n      default:\n        yy_fatal_error(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        yychar = 0x112;\n      }\n      longVar7 = (long)intVar4;\n    }\n    if (0 < yychar) {\n      if (yychar != 0x100) {\n        intVar4 = 2;\n        if (yychar < 0x114) {\n          intVar4 = (int)(char)yytranslate[yychar];\n        }\n        goto LAB_0010497d;\n      }\n      yychar = 0x101;\n      goto LAB_001051f0;\n    }\n    intVar4 = 0;\n    yychar = 0;\nLAB_0010497d:\n    unsignedVar4 = charVar + intVar4;\n    if ((0x22 < unsignedVar4) || (intVar4 != (char)yycheck[(int)unsignedVar4])) goto LAB_001049db;\n    charVar = yytable[(int)unsignedVar4];\n    longVar7 = (long)charVar;\n    if (charVar < '\\x01') {\n      intVar4 = -(int)charVar;\n      goto LAB_00104a0a;\n    }\n    yychar = -2;\n    local_800 = local_800 + -1 + (uint)(local_800 == 0);\n    ppcharVar9 = ppcharVar9 + 1;\n    *ppcharVar9 = yylval;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  intVar4 = (int)(char)(&yydefact)[(int)longVar7];\n  if ((&yydefact)[(int)longVar7] == '\\0') {\n    if (local_800 == 0) {\n      yynerrs = yynerrs + 1;\n      yyerror_constprop_0();\nLAB_001051f0:\n      do {\n        if (((((char)(&yypact)[longVar7] != -0xe) &&\n             (unsignedVar4 = (int)(char)(&yypact)[longVar7] + 1, unsignedVar4 < 0x23)) &&\n            (yycheck[(int)unsignedVar4] == '\\x01')) &&\n           (longVar7 = (long)(char)yytable[(int)unsignedVar4], '\\0' < (char)yytable[(int)unsignedVar4]))\n        goto LAB_00105227;\n        if (local_820 == local_828) goto LAB_0010524c;\n        local_828 = local_828 + -1;\n        ppcharVar9 = ppcharVar9 + -1;\n        longVar7 = (long)*local_828;\n      } while( true );\n    }\n    if (local_800 != 3) goto LAB_001051f0;\n    if (0 < yychar) {\n      yychar = -2;\n      goto LAB_001051f0;\n    }\n    if (yychar != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  unsignedVar2 = program_name;\n  doublePointerCharVar = obfd;\n  charVar = yyr2[intVar4];\n  ppcVar38 = (char **)ppcharVar9[1 - charVar];\n  switch(intVar4) {\n  case 2:\n  case 6:\n    prompt();\n    break;\n  case 0x13:\n    if (obfd == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*obfd);\n    return;\n  case 0x15:\n    yyerror_constprop_0();\n    break;\n  case 0x17:\n    unsignedLongPointerVar = (undefined8 *)*ppcharVar9;\n    if (obfd == (char **)0x0) {\n      charVar2 = \"%s: no open archive\\n\";\nLAB_00104b62:\n      charVar2 = (char *)dcgettext(0,charVar2,5);\n      fprintf(_stderr,charVar2,unsignedVar2);\n      maybequit();\n    }\n    else {\n      for (; unsignedLongPointerVar != (undefined8 *)0x0; unsignedLongPointerVar = (undefined8 *)unsignedLongPointerVar[1]) {\n        for (unsignedLongPointerVar2 = (undefined8 *)obfd[0x1f]; unsignedLongPointerVar2 != (undefined8 *)0x0;\n            unsignedLongPointerVar2 = (undefined8 *)unsignedLongPointerVar2[0x1e]) {\n          intVar = filename_cmp(*unsignedLongPointerVar2);\n          if (intVar == 0) {\n            extract_file();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*unsignedLongPointerVar,0);\n        unsignedVar = program_name;\n        unsignedVar2 = *unsignedLongPointerVar;\n        charVar2 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar2,unsignedVar,unsignedVar2);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    unsignedLongPointerVar = (undefined8 *)*ppcharVar9;\n    if (obfd == (char **)0x0) {\nLAB_00104b4f:\n      charVar2 = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; unsignedLongPointerVar != (undefined8 *)0x0; unsignedLongPointerVar = (undefined8 *)unsignedLongPointerVar[1]) {\n      boolVar = false;\n      doublePointerCharVar = obfd + 0x1f;\n      for (charVar2 = obfd[0x1f]; charVar2 != (char *)0x0; charVar2 = *(char **)(charVar2 + 0xf0)) {\n        intVar = filename_cmp();\n        if (intVar == 0) {\n          charVar3 = (char *)bfd_openr(*unsignedLongPointerVar,0);\n          unsignedVar2 = program_name;\n          if (charVar3 == (char *)0x0) {\n            unsignedVar = *unsignedLongPointerVar;\n            charVar3 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,charVar3,unsignedVar2,unsignedVar);\n            maybequit();\n          }\n          else {\n            *doublePointerCharVar = charVar3;\n            boolVar = true;\n            *(undefined8 *)(charVar3 + 0xf0) = *(undefined8 *)(charVar2 + 0xf0);\n          }\n        }\n        else {\n          doublePointerCharVar = (char **)(charVar2 + 0xf0);\n        }\n      }\n      if (!boolVar) {\n        charVar2 = (char *)bfd_openr(*unsignedLongPointerVar,0);\n        unsignedVar = program_name;\n        unsignedVar2 = *unsignedLongPointerVar;\n        charVar3 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar3,unsignedVar,unsignedVar2);\n        unsignedVar2 = program_name;\n        if (charVar2 == (char *)0x0) {\n          unsignedVar = *unsignedLongPointerVar;\n          charVar2 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,charVar2,unsignedVar2,unsignedVar);\n          maybequit();\n        }\n        else {\n          *doublePointerCharVar = charVar2;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (obfd != (char **)0x0) {\n      obfd[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    unsignedLongPointerVar = (undefined8 *)*ppcharVar9;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; unsignedLongPointerVar != (undefined8 *)0x0; unsignedLongPointerVar = (undefined8 *)unsignedLongPointerVar[1]) {\n      boolVar = false;\n      doublePointerCharVar = obfd + 0x1f;\n      for (unsignedLongPointerVar2 = (undefined8 *)obfd[0x1f]; unsignedVar2 = program_name, unsignedLongPointerVar2 != (undefined8 *)0x0;\n          unsignedLongPointerVar2 = (undefined8 *)unsignedLongPointerVar2[0x1e]) {\n        intVar = filename_cmp(*unsignedLongPointerVar2,*unsignedLongPointerVar);\n        if (intVar == 0) {\n          boolVar = true;\n          *doublePointerCharVar = (char *)unsignedLongPointerVar2[0x1e];\n        }\n        else {\n          doublePointerCharVar = (char **)(unsignedLongPointerVar2 + 0x1e);\n        }\n      }\n      if (!boolVar) {\n        unsignedVar = *unsignedLongPointerVar;\n        charVar2 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar2,unsignedVar2,unsignedVar);\n        maybequit();\n      }\n    }\n    break;\n  case 0x1b:\n    unsignedLongPointerVar = (undefined8 *)*ppcharVar9;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; unsignedLongPointerVar != (undefined8 *)0x0; unsignedLongPointerVar = (undefined8 *)unsignedLongPointerVar[1]) {\n      charVar2 = (char *)bfd_openr(*unsignedLongPointerVar,\"plugin\");\n      unsignedVar2 = program_name;\n      doublePointerCharVar = obfd;\n      if (charVar2 == (char *)0x0) {\n        unsignedVar = *unsignedLongPointerVar;\n        charVar2 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,charVar2,unsignedVar2,unsignedVar);\n        maybequit();\n      }\n      else {\n        *(char **)(charVar2 + 0xf0) = obfd[0x1f];\n        doublePointerCharVar[0x1f] = charVar2;\n      }\n    }\n    break;\n  case 0x1c:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    charVar2 = *obfd;\n    verbose = 1;\n    outfile = _stdout;\n    charVar3 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(charVar3,charVar2);\n    for (charVar2 = obfd[0x1f]; charVar2 != (char *)0x0; charVar2 = *(char **)(charVar2 + 0xf0)) {\n      ar_directory_doer(charVar2,0);\n    }\n    break;\n  case 0x1d:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    if (0 < deterministic) {\n      *(uint *)((long)obfd + 0x44) = *(uint *)((long)obfd + 0x44) | 0x2000;\n    }\n    temp_fd = dup(temp_fd);\n    bfd_close(doublePointerCharVar);\n    charVar2 = real_name;\n    intVar = stat(real_name,&local_7d0);\n    if ((intVar != 0) && (obfd = (char **)bfd_openw(charVar2,0), obfd != (char **)0x0)) {\n      bfd_set_format(obfd,2);\n      bfd_close(obfd);\n    }\n    smart_rename_constprop_0(temp_name,real_name,temp_fd);\n    obfd = (char **)0x0;\n    free(temp_name);\n    free(real_name);\n    break;\n  case 0x1e:\n    ar_open(*ppcharVar9,0);\n    break;\n  case 0x1f:\n    ar_open(*ppcharVar9,1);\n    break;\n  case 0x20:\n    charVar2 = *ppcharVar9;\n    if (obfd == (char **)0x0) {\n      charVar2 = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    longVar7 = open_inarch(ppcharVar9[-1],0);\n    if (longVar7 != 0) {\n      map_over_list(longVar7,ar_addlib_doer,charVar2);\n    }\n    break;\n  case 0x21:\n    charVar2 = *ppcharVar9;\n    charVar3 = ppcharVar9[-1];\n    unsignedVar2 = open_inarch(ppcharVar9[-2],0);\n    if (charVar2 == (char *)0x0) {\n      outfile = _stdout;\n    }\n    else {\n      outfile = fopen(charVar2,\"w\");\n      if (outfile != (FILE *)0x0) {\n        map_over_list(unsignedVar2,ar_directory_doer,charVar3);\n        bfd_close(unsignedVar2);\n        fclose(outfile);\n        break;\n      }\n      outfile = _stdout;\n      charVar4 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,charVar4,charVar2);\n    }\n    map_over_list(unsignedVar2,ar_directory_doer,charVar3);\n    bfd_close(unsignedVar2);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*ppcharVar9;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)ppcharVar9[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    charVar2 = ppcharVar9[-2];\n    *ppcVar38 = *ppcharVar9;\n    ppcVar38[1] = charVar2;\n    break;\n  case 0x2a:\n    verbose = (uint)(verbose == 0);\n  }\n  longVar7 = (long)charVar;\n  local_828 = local_828 + -longVar7;\n  ppcharVar9[1 - longVar7] = (char *)ppcVar38;\n  ppcharVar9 = ppcharVar9 + (1 - longVar7);\n  unsignedVar4 = (int)(char)yypgoto[(char)yyr1[intVar4] + -0x18] + (int)*local_828;\n  if ((unsignedVar4 < 0x23) && (*local_828 == yycheck[(int)unsignedVar4])) {\n    longVar7 = (long)(char)yytable[(int)unsignedVar4];\n  }\n  else {\n    longVar7 = (long)(char)yydefgoto[(char)yyr1[intVar4] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  intVar = ((int)bytePointerVar4 - (int)yytext) + -1;\n  *bytePointerVar4 = yy_hold_char;\n  doublePointerVar = (long **)(yy_buffer_stack + longVar7 * 8);\n  doublePointerFileVar = (FILE **)*doublePointerVar;\n  if (*(int *)(doublePointerFileVar + 7) == 0) {\n    yy_n_chars = *(uint *)((long)doublePointerFileVar + 0x1c);\n    *(undefined4 *)(doublePointerFileVar + 7) = 1;\n    *doublePointerFileVar = yyin;\n  }\n  bytePointerVar = yy_c_buf_p;\n  fileVar = doublePointerFileVar[1];\n  auVar40._8_8_ = fileVar;\n  auVar40._0_8_ = doublePointerFileVar;\n  if ((byte *)((long)&fileVar->_flags + (long)(int)yy_n_chars) < yy_c_buf_p) {\n    if ((byte *)((long)&fileVar->_flags + (long)(int)yy_n_chars + 1) < yy_c_buf_p) {\n      auVar40 = yy_fatal_error();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      unsignedVar4 = (int)((long)bytePointerVar - (long)bytePointerVar2) - 1;\n      for (longVar7 = 0; (int)longVar7 < (int)unsignedVar4; longVar7 = longVar7 + 1) {\n        *(byte *)(auVar40._8_8_ + longVar7) = bytePointerVar2[longVar7];\n      }\n      longVar2 = *doublePointerVar;\n      if (*(int *)(longVar2 + 7) == 2) {\n        yy_n_chars = 0;\n        *(undefined4 *)((long)longVar2 + 0x1c) = 0;\nLAB_0010475e:\n        fileVar = yyin;\n        if (unsignedVar4 == 0) {\n          if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0))\n          {\n            yyensure_buffer_stack();\n            unsignedLongPointerVar = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n            unsignedVar2 = yy_create_buffer_constprop_0(fileVar);\n            *unsignedLongPointerVar = unsignedVar2;\n          }\n          longVar7 = yy_buffer_stack;\n          if (yy_buffer_stack != 0) {\n            longVar7 = *(long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          }\n          intVar2 = 1;\n          yy_init_buffer(longVar7);\n          yy_load_buffer_state();\n        }\n        else {\n          intVar2 = 2;\n          *(undefined4 *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          longVar = *doublePointerVar;\n          unsignedVar5 = ~unsignedVar4 + *(int *)(longVar2 + 3);\n          if (0 < (int)unsignedVar5) break;\n          unsignedVar5 = (int)yy_c_buf_p - (int)(void *)longVar[1];\n          if (*(int *)(longVar + 4) == 0) {\n            longVar[1] = 0;\nLAB_00104626:\n            yy_fatal_error();\n            break;\n          }\n          intVar2 = *(int *)(longVar + 3);\n          intVar3 = intVar2;\n          if (intVar2 < 1) {\n            intVar3 = intVar2 / 8;\n          }\n          *(int *)(longVar + 3) = intVar3 + intVar2;\n          voidPointerVar = realloc((void *)longVar[1],(long)(intVar3 + intVar2 + 2));\n          longVar[1] = (long)voidPointerVar;\n          if (voidPointerVar == (void *)0x0) goto LAB_00104626;\n          yy_c_buf_p = (byte *)((long)voidPointerVar + (long)(int)unsignedVar5);\n          longVar2 = *doublePointerVar;\n        }\n        if (0x2000 < (int)unsignedVar5) {\n          unsignedVar5 = 0x2000;\n        }\n        unsignedVar6 = (ulong)unsignedVar5;\n        if (*(int *)((long)longVar + 0x24) == 0) {\n          intPointerVar = __errno_location();\n          unsignedVar6 = (ulong)(int)unsignedVar5;\n          unsignedVar3 = (ulong)(int)unsignedVar4;\n          *intPointerVar = 0;\n          goto LAB_001046c7;\n        }\n        unsignedVar3 = 0;\n        intPointerVar = (int *)(long)(int)unsignedVar4;\n        do {\n          intVar2 = getc(yyin);\n          unsignedVar7 = (uint)unsignedVar3;\n          if (intVar2 == -1) {\n            intVar2 = ferror(yyin);\n            unsignedVar5 = unsignedVar7;\n            if (intVar2 != 0) {\n              do {\n                charVar2 = \"input in flex scanner failed\";\n                yy_fatal_error();\n                do {\n                  *intPointerVar = 0;\n                  clearerr((FILE *)charVar2);\nLAB_001046c7:\n                  sizeVar = fread((void *)(*(long *)(*(long *)(yy_buffer_stack +\n                                                             yy_buffer_stack_top * 8) + 8) + unsignedVar3)\n                                 ,1,unsignedVar6,yyin);\n                  charVar2 = (char *)yyin;\n                  yy_n_chars = (uint)sizeVar;\n                  unsignedVar5 = yy_n_chars;\n                  if ((yy_n_chars != 0) || (intVar2 = ferror(yyin), unsignedVar5 = yy_n_chars, intVar2 == 0))\n                  goto LAB_00104738;\n                } while (*intPointerVar == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (intVar2 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)unsignedVar4 +\n             (long)(int)unsignedVar7 + *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8)\n             ) = 10;\n            unsignedVar5 = unsignedVar7 + 1;\n            break;\n          }\n          unsignedVar3 = (ulong)(unsignedVar7 + 1);\n          *(char *)(*(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8) +\n                   (long)intPointerVar) = (char)intVar2;\n          intPointerVar = (int *)((long)intPointerVar + 1);\n        } while (unsignedVar5 != unsignedVar7 + 1);\nLAB_00104738:\n        yy_n_chars = unsignedVar5;\n        unsignedVar5 = yy_n_chars;\n        intVar2 = 0;\n        *(uint *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x1c) = yy_n_chars;\n        if (unsignedVar5 == 0) goto LAB_0010475e;\n      }\n      longVar2 = (long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n      longVar7 = *longVar2;\n      unsignedVar4 = unsignedVar4 + yy_n_chars;\n      if (*(int *)(longVar7 + 0x18) < (int)unsignedVar4) {\n        intVar3 = ((int)yy_n_chars >> 1) + unsignedVar4;\n        voidPointerVar = realloc(*(void **)(longVar7 + 8),(long)intVar3);\n        *(void **)(longVar7 + 8) = voidPointerVar;\n        auVar41._8_8_ = longVar2;\n        auVar41._0_8_ = *longVar2;\n        if (*(long *)(*longVar2 + 8) == 0) {\n          auVar41 = yy_fatal_error();\n        }\n        longVar2 = auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) = intVar3 + -2;\n      }\n      yy_n_chars = unsignedVar4;\n      *(undefined *)(*(long *)(*longVar2 + 8) + (long)(int)unsignedVar4) = 0;\n      *(undefined *)(*(long *)(*longVar2 + 8) + 1 + (long)(int)unsignedVar4) = 0;\n      bytePointerVar2 = *(byte **)(*longVar2 + 8);\n      yytext = bytePointerVar2;\n      if (intVar2 == 1) goto LAB_001048a4;\n      if (intVar2 == 2) goto LAB_001048ca;\n      bytePointerVar4 = bytePointerVar2 + intVar;\n      yy_c_buf_p = bytePointerVar4;\n      unsignedVar4 = yy_get_previous_state();\n      goto LAB_001040d4;\n    }\n    if ((long)bytePointerVar - (long)bytePointerVar2 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    bytePointerVar4 = (byte *)((long)(int)yy_n_chars +\n                      *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8));\n    yy_c_buf_p = bytePointerVar4;\n    unsignedVar3 = yy_get_previous_state();\n    bytePointerVar3 = yytext;\n    goto LAB_0010419f;\n  }\n  bytePointerVar4 = bytePointerVar2 + intVar;\n  yy_c_buf_p = bytePointerVar4;\n  unsignedVar3 = yy_get_previous_state();\n  if (*(short *)(yy_accept + (long)(int)(uint)unsignedVar3 * 2) != 0) {\n    yy_last_accepting_cpos = bytePointerVar4;\n    yy_last_accepting_state = (uint)unsignedVar3;\n  }\n  unsignedVar6 = unsignedVar3 & 0xffffffff;\n  while( true ) {\n    intVar = (int)unsignedVar6;\n    if (intVar == *(short *)(yy_chk + (long)(*(short *)(yy_base + (long)intVar * 2) + 1) * 2)) break;\n    unsignedVar6 = (ulong)(uint)(int)*(short *)(yy_def + (long)intVar * 2);\n  }\n  unsignedVar4 = (uint)*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)intVar * 2) + 1) * 2);\n  bytePointerVar3 = bytePointerVar2;\n  if ((*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)intVar * 2) + 1) * 2) == 0) ||\n     (unsignedVar4 == 0xb0)) goto LAB_0010419f;\n  bytePointerVar4 = bytePointerVar4 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  yy_c_buf_p = yytext;\n  intVar = (int)(yy_start - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *bytePointerVar4 = yy_hold_char;\n  unsignedVar3 = (ulong)yy_last_accepting_state;\n  bytePointerVar4 = yy_last_accepting_cpos;\n  goto LAB_0010419f;\nLAB_00105227:\n  ppcharVar9 = ppcharVar9 + 1;\n  local_800 = 3;\n  *ppcharVar9 = yylval;\nLAB_001049d1:\n  local_828 = local_828 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "realloc",
                "fprintf",
                "ar_addlib_doer",
                "stat",
                "fclose",
                "yyerror.constprop.0",
                "fwrite",
                "bfd_openw",
                "xstrdup",
                "ar_directory_doer",
                "bfd_cache_close",
                "map_over_list",
                "prompt",
                "ar_open",
                "maybequit",
                "bfd_close",
                "yy_create_buffer.constprop.0",
                "bfd_openr",
                "extract_file",
                "clearerr",
                "yyensure_buffer_stack",
                "__errno_location",
                "fopen",
                "getc",
                "yy_fatal_error",
                "free",
                "bfd_set_format",
                "malloc",
                "open_inarch",
                "dup",
                "yy_load_buffer_state",
                "ferror",
                "fread",
                "yy_get_previous_state",
                "unlink",
                "dcgettext",
                "smart_rename.constprop.0",
                "filename_cmp",
                "printf",
                "yy_init_buffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_file_00103e95"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_0010e200": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e200",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e200"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "list_supported_targets",
                "list_matching_formats",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_output_00107730",
                "output_filename": "filename",
                "output_file": "file",
                "unlink_if_ordinary": "unlinkFile"
            },
            "code": "\nvoid cleanupOutput_00107730(void)\n\n{\n  if (filename == 0) {\n    return;\n  }\n  if (output_bfd != 0) {\n    bfd_cache_close();\n  }\n  if (file != (FILE *)0x0) {\n    fclose(file);\n  }\n  unlinkFile(filename);\n  return;\n}\n\n",
            "called": [
                "remove_output.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_output_00107730"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_0010e2a8": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2a8",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e2a8"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "file",
                "param_2": "inputFile",
                "piVar4": "error",
                "lVar5": "bufferStack",
                "yy_buffer_stack": "bufferStackPointer",
                "iVar1": "errnoValue",
                "yy_buffer_stack_top": "bufferStackTop",
                "param_1[2]": "fileIndex2",
                "uVar2": "fileDescriptor",
                "fileno(param_2)": "fileNumber",
                "isatty(iVar3)": "isTerminal"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **file,FILE *inputFile,undefined8 param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  int errnoValue;\n  uint fileDescriptor;\n  int iVar3;\n  int *error;\n  long bufferStack;\n  \n  error = __errno_location();\n  bufferStack = bufferStackPointer;\n  errnoValue = *error;\n  if (file == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (bufferStackPointer != 0) {\nLAB_00103263:\n      if (file == *(FILE ***)(bufferStack + bufferStackTop * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)file + 0x1c) = 0;\n    *(undefined *)&file[1]->_flags = 0;\n    *(undefined *)((long)&file[1]->_flags + 1) = 0;\n    *(undefined4 *)(file + 5) = 1;\n    fileIndex2 = file[1];\n    *(undefined4 *)(file + 7) = 0;\n    if (bufferStack != 0) {\n      if (file == *(FILE ***)(bufferStack + bufferStackTop * 8)) {\n        yy_load_buffer_state();\n      }\n      *file = inputFile;\n      *(undefined4 *)((long)file + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *file = inputFile;\n    *(undefined4 *)((long)file + 0x34) = 1;\n  }\n  *(undefined8 *)((long)file + 0x2c) = 1;\nLAB_0010327b:\n  fileDescriptor = 0;\n  if (inputFile != (FILE *)0x0) {\n    iVar3 = fileNumber;\n    iVar3 = isTerminal;\n    fileDescriptor = (uint)(0 < iVar3);\n  }\n  *(uint *)((long)file + 0x24) = fileDescriptor;\n  *error = errnoValue;\n  return param_5;\n}\n\n",
            "called": [
                "yy_load_buffer_state",
                "isatty",
                "__errno_location",
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "source",
                "param_2": "destination",
                "lVar1": "tempVar"
            },
            "code": "\nvoid copyData_0010312d(long source,long destination)\n\n{\n  long tempVar;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  tempVar = obfd;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(obfd + 0xf8);\n  *(long *)(tempVar + 0xf8) = source;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_data_00105c00",
                "param_1": "fileDescriptor",
                "param_2": "destinationPath",
                "_Var3": "filePosition",
                "uVar4": "bytesRead",
                "sVar5": "bytesWritten",
                "iVar1": "errorNumber",
                "iVar2": "bytesRead",
                "piVar6": "errnoPtr",
                "auStack_2038": "buffer",
                "__fd": "destinationFileDescriptor"
            },
            "code": "\nulong copyFileData_00105c00(int fileDescriptor,char *destinationPath)\n\n{\n  int errorNumber;\n  int destinationFileDescriptor;\n  int bytesRead;\n  __off_t filePosition;\n  ulong bytesRead;\n  size_t bytesWritten;\n  int *errnoPtr;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptor) && (filePosition = lseek(fileDescriptor,0,0), filePosition == 0)) {\n    destinationFileDescriptor = open(destinationPath,0x201);\n    if (destinationFileDescriptor < 0) {\n      bytesRead = simple_copy_constprop_0_cold();\n      return bytesRead;\n    }\n    do {\n      bytesRead = read(fileDescriptor,buffer,0x2000);\n      bytesRead = (int)bytesRead;\n      if (bytesRead < 1) {\n        errnoPtr = __errno_location();\n        errorNumber = *errnoPtr;\n        close(fileDescriptor);\n        close(destinationFileDescriptor);\n        if (bytesRead != 0) {\n          *errnoPtr = errorNumber;\n          return 0xffffffff;\n        }\n        return bytesRead & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)bytesRead);\n    } while (bytesWritten == (long)bytesRead);\n    errnoPtr = __errno_location();\n    bytesRead = *errnoPtr;\n    close(fileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPtr = bytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "simple_copy.constprop.0.cold",
                "__errno_location",
                "lseek",
                "open",
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_file_data_00105c00"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_001052a0",
                "param_1": "filename",
                "iVar1": "status",
                "piVar2": "errnum_ptr",
                "uVar3": "error_msg",
                "pcVar4": "err_reason",
                "sStack_a8": "file_stats"
            },
            "code": "\nlong check_file_001052a0(char *filename)\n\n{\n  int status;\n  int *errnum_ptr;\n  undefined8 error_msg;\n  char *err_reason;\n  stat file_stats;\n  \n  if (filename != (char *)0x0) {\n    status = stat(filename,&file_stats);\n    if (status < 0) {\n      errnum_ptr = __errno_location();\n      if (*errnum_ptr == 2) {\n        error_msg = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_msg,filename);\n      }\n      else {\n        err_reason = strerror(*errnum_ptr);\n        error_msg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_msg,filename,err_reason);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_msg,filename);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(error_msg,filename);\n    }\n    else {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_msg,filename);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "dcgettext",
                "get_file_size.cold",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "ranlib_only",
                "main"
            ],
            "imported": false,
            "current_name": "check_file_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "emulationMessage"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *emulationMessage;\n  \n  emulationMessage = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,emulationMessage);\n  emulationMessage = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,emulationMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "extract_and_convert_archive_00103c60",
                "param_1": "archiveName",
                "param_2": "formatFlag",
                "cVar1": "checkResult",
                "piVar2": "errnoPointer",
                "pcVar3": "errorMessage",
                "lVar4": "inputArchive",
                "lVar5": "archivedFile",
                "uVar6": "programName",
                "plVar7": "currentFilePointer"
            },
            "code": "\n\n\nvoid extractAndConvertArchive_00103c60(char *archiveName,int formatFlag)\n\n{\n  char checkResult;\n  int *errnoPointer;\n  char *errorMessage;\n  long inputArchive;\n  long archivedFile;\n  undefined8 programName;\n  long *currentFilePointer;\n  \n  real_name = xstrdup();\n  temp_name = (char *)make_tempname(real_name,&temp_fd);\n  if (temp_name == (char *)0x0) {\n    errnoPointer = __errno_location();\n    archiveName = strerror(*errnoPointer);\n    programName = program_name;\n    errorMessage = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    obfd = bfd_fdopenw(temp_name,0,temp_fd);\n    if (obfd == 0) {\n      errorMessage = \"%s: Can\\'t open output archive %s\\n\";\n      archiveName = temp_name;\n    }\n    else {\n      if (formatFlag != 0) {\nLAB_00103d02:\n        bfd_set_format(obfd,2);\n        *(byte *)(obfd + 0x49) = *(byte *)(obfd + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchive = bfd_openr(archiveName,\"plugin\");\n      if (inputArchive == 0) {\n        errorMessage = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        checkResult = bfd_check_format(inputArchive,2);\n        if (checkResult != '\\0') {\n          currentFilePointer = (long *)(obfd + 0xf8);\n          for (archivedFile = bfd_openr_next_archived_file(inputArchive,0); archivedFile != 0;\n              archivedFile = bfd_openr_next_archived_file(inputArchive,archivedFile)) {\n            *currentFilePointer = archivedFile;\n            currentFilePointer = (long *)(archivedFile + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMessage = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    programName = program_name;\n    errorMessage = (char *)dcgettext(0,errorMessage,5);\n  }\n  fprintf(_stderr,errorMessage,programName,archiveName);\n  maybequit();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "strerror",
                "xstrdup",
                "bfd_fdopenw",
                "fprintf",
                "bfd_set_format",
                "maybequit",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "make_tempname",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_and_convert_archive_00103c60"
        },
        "FUN_0010e218": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e218",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_0010e218"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main",
                "bfd_nonfatal.cold",
                "ar_emul_default_usage",
                "list_supported_targets",
                "replace_members.cold",
                "set_times.cold",
                "yyerror.constprop.0",
                "get_file_size.cold",
                "print_contents",
                "write_archive",
                "yyparse.isra.0",
                "ranlib_usage",
                "list_matching_formats",
                "print_arelt_descr.cold",
                "FUN_00102e6f",
                "open_inarch",
                "map_over_list",
                "ar_open",
                "get_file_size",
                "map_over_members.cold",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "usage",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_last_accepting_state_0010300e",
                "yy_start": "startState",
                "yytext": "currentCharacter",
                "yy_c_buf_p": "bufferPosition",
                "yy_ec": "characterMapping",
                "yy_accept": "acceptState",
                "in_R9": "lastAcceptingChar",
                "in_R10D": "lastAcceptingState",
                "yy_base": "baseArray",
                "yy_chk": "checkArray",
                "yy_def": "defaultArray",
                "yy_meta": "metaArray",
                "yy_nxt": "nextArray",
                "yy_last_accepting_cpos": "lastAcceptingCharPosition",
                "yy_last_accepting_state": "lastAcceptingState"
            },
            "code": "\nvoid findLastAcceptingState_0010300e(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  long lVar3;\n  byte bVar4;\n  byte *pbVar5;\n  byte *lastAcceptingChar;\n  int lastAcceptingState;\n  \n  bVar1 = false;\n  iVar2 = startState;\n  for (pbVar5 = currentCharacter; pbVar5 < bufferPosition; pbVar5 = pbVar5 + 1) {\n    bVar4 = 1;\n    if (*pbVar5 != 0) {\n      bVar4 = characterMapping[*pbVar5];\n    }\n    if (*(short *)(acceptState + (long)iVar2 * 2) != 0) {\n      bVar1 = true;\n      lastAcceptingChar = pbVar5;\n      lastAcceptingState = iVar2;\n    }\n    while( true ) {\n      lVar3 = (long)(int)((int)*(short *)(baseArray + (long)iVar2 * 2) + (uint)bVar4);\n      if (*(short *)(checkArray + lVar3 * 2) == iVar2) break;\n      iVar2 = (int)*(short *)(defaultArray + (long)iVar2 * 2);\n      if (0xb0 < iVar2) {\n        bVar4 = metaArray[(int)(uint)bVar4];\n      }\n    }\n    iVar2 = (int)*(short *)(nextArray + lVar3 * 2);\n  }\n  if (bVar1) {\n    lastAcceptingCharPosition = lastAcceptingChar;\n    lastAcceptingState = lastAcceptingState;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "find_last_accepting_state_0010300e"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_archive_00107740",
                "param_1": "inputFiles",
                "iVar1": "comparisonResult",
                "iVar2": "errorCode",
                "piVar3": "errnoLocation",
                "pcVar4": "outputErrorString",
                "uVar5": "translatedString",
                "pplVar6": "filePointer",
                "__ptr": "bufferPointer",
                "__n": "bytesRead",
                "lVar7": "loopVariable",
                "plVar8": "currentFile",
                "puVar9": "zeroArray",
                "uVar10": "totalBytesRead",
                "sVar11": "bufferSize",
                "local_c8": "preserveDatesArray",
                "__mode_t": "stack_mint",
                "uStack_98": "requiredBytes",
                "uStack_80": "stackVar_80",
                "uStack_70": "stackVar_70",
                "output_file": "outputFile",
                "output_filename": "outputFileName",
                "strerror": "getErrorMessage",
                "fatal": "handleFatalError",
                "bfd_seek": "seekBFD",
                "fwrite": "writeToFile",
                "fclose": "closeFile",
                "chmod": "changeMode",
                "set_times": "setFileTimes"
            },
            "code": "\nlong * extractArchive_00107740(long **inputFiles)\n\n{\n  int comparisonResult;\n  int errorCode;\n  int *errnoLocation;\n  char *outputErrorString;\n  undefined8 translatedString;\n  long **filePointer;\n  void *bufferPointer;\n  size_t bytesRead;\n  long loopVariable;\n  long *currentFile;\n  undefined4 *zeroArray;\n  ulong totalBytesRead;\n  size_t bufferSize;\n  undefined4 preserveDatesArray [6];\n  stack_mint _Stack_b0;\n  ulong requiredBytes;\n  undefined8 stackVar_80;\n  undefined8 stackVar_70;\n  \n  if (preserve_dates != 0) {\n    zeroArray = preserveDatesArray;\n    for (loopVariable = 0x24; loopVariable != 0; loopVariable = loopVariable + -1) {\n      *zeroArray = 0;\n      zeroArray = zeroArray + 1;\n    }\n  }\n  filePointer = (long **)inputFiles[0x1d];\n  if ((long **)inputFiles[0x1d] == (long **)0x0) {\n    filePointer = inputFiles;\n  }\n  errorCode = (*(code *)filePointer[1][0x3d])(inputFiles,preserveDatesArray);\n  if (errorCode != 0) {\n    currentFile = *inputFiles;\n    translatedString = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = handleFatalError(translatedString,currentFile);\n    translatedString = posname;\n    if (errorCode == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentFile,translatedString);\n        if (comparisonResult == 0) {\n          if (errorCode != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  seekBFD(inputFiles,0,0);\n  outputFile = (FILE *)0x0;\n  if (requiredBytes == 0) {\nLAB_00102ca2:\n    outputFile = (FILE *)open_outputFile_isra_0(*inputFiles);\n  }\n  else {\n    totalBytesRead = 0;\n    bufferPointer = (void *)xmalloc(0x2000);\n    do {\n      bufferSize = requiredBytes - totalBytesRead;\n      if (0x2000 < bufferSize) {\n        bufferSize = 0x2000;\n      }\n      bytesRead = bfd_bread(bufferPointer,bufferSize,inputFiles);\n      if (bufferSize != bytesRead) {\nLAB_00102c78:\n        inputFiles = (long **)*inputFiles[0x1d];\n        translatedString = dcgettext(0,\"%s is not a valid archive\",5);\n        handleFatalError(translatedString,inputFiles);\n        goto LAB_00102ca2;\n      }\n      if (outputFile == (FILE *)0x0) {\n        outputFile = (FILE *)open_outputFile_isra_0(*inputFiles);\n      }\n      bufferSize = writeToFile(bufferPointer,1,bytesRead,outputFile);\n      if (bufferSize != bytesRead) {\n        errnoLocation = __errno_location();\n        outputErrorString = getErrorMessage(*errnoLocation);\n        handleFatalError(\"%s: %s\",outputFileName,outputErrorString);\n        goto LAB_00102c78;\n      }\n      totalBytesRead = totalBytesRead + bytesRead;\n    } while (totalBytesRead < requiredBytes);\n    free(bufferPointer);\n  }\n  closeFile(outputFile);\n  outputErrorString = outputFileName;\n  outputFile = (FILE *)0x0;\n  changeMode(outputFileName,_Stack_b0);\n  if (preserve_dates != 0) {\n    stackVar_80 = stackVar_70;\n    setFileTimes(outputErrorString,preserveDatesArray);\n  }\n  outputFileName = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "extract_file.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_archive_00107740"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "remove_output.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_0010e2b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b8",
            "calling": [
                "fwrite"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b8"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_archives_001028ed",
                "param_1": "error_message",
                "param_2": "target",
                "uVar1": "is_thin_archive",
                "bVar2": "is_ar_emul_append_constprop",
                "iVar3": "comparison_result",
                "sVar4": "string_length",
                "piVar5": "errno_location",
                "pcVar6": "filename",
                "pcVar7": "basename_1",
                "ppcVar8": "basename_2",
                "uVar9": "normalized_filename",
                "lVar10": "current_archive",
                "__s": "basename_3",
                "__s_00": "basename_4",
                "lVar11": "previous_archive",
                "uVar12": "position_name",
                "uVar13": "size",
                "unaff_RBX": "current_file",
                "ppcVar14": "current_dependency",
                "ppcVar15": "next_dependency",
                "unaff_RBP": "dependency_list",
                "unaff_R12": "current_archive_head",
                "unaff_R13D": "postype",
                "unaff_R14": "archive_list_head",
                "bVar16": "is_verbose",
                "bVar17": "byte_value",
                "param_7": "output",
                "param_9": "output_status",
                "in_stack_00000078": "position_1",
                "in_stack_00000108": "position_2",
                "libdeps_bfd": "dependency_bfd",
                "newer_only": "check_newer_versions",
                "stack0x000000b0": "file_info"
            },
            "code": "\nundefined8 process_archives_001028ed(undefined8 error_message,long target)\n\n{\n  undefined is_thin_archive;\n  byte is_ar_emul_append_constprop;\n  int comparison_result;\n  size_t string_length;\n  int *errno_location;\n  char *filename;\n  char *basename_1;\n  char **basename_2;\n  undefined8 normalized_filename;\n  long current_archive;\n  char *basename_3;\n  char *basename_4;\n  long previous_archive;\n  undefined8 position_name;\n  ulong size;\n  char *current_file;\n  char **current_dependency;\n  char **dependency_list;\n  char **current_archive_head;\n  uint postype;\n  char **next_dependency;\n  long archive_list_head;\n  bool is_verbose;\n  byte byte_value;\n  char **output;\n  undefined8 output_status;\n  long position_1;\n  long position_2;\n  \n  byte_value = 0;\ncode_r0x001028ed:\n  bfd_fatal(current_file,target);\nLAB_001028f5:\n  position_name = posname;\n  if (postype != 3) {\n    while( true ) {\n      if ((undefined8 *)*current_archive_head == (undefined8 *)0x0) goto LAB_0010571f;\n      comparison_result = filename_cmp(*(undefined8 *)*current_archive_head,position_name);\n      if (comparison_result == 0) break;\n      current_archive_head = (char **)(*current_archive_head + 0xf0);\n    }\n    if (postype != 2) goto LAB_0010571f;\n    current_archive_head = (char **)(*current_archive_head + 0xf0);\n    goto LAB_0010571f;\n  }\n  current_archive = *(long *)(archive_list_head + 0xf0);\n  if (*(long *)(archive_list_head + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    previous_archive = current_archive;\n    current_archive = *(long *)(previous_archive + 0xf0);\n  } while (current_archive != 0);\n  current_archive_head = (char **)(previous_archive + 0xf0);\n  current_file = *dependency_list;\n  if (dependency_bfd != 0) goto LAB_00105731;\nLAB_00105698:\n  is_thin_archive = make_thin_archive;\n  postype = (uint)(verbose != 0);\n  target = bfd_openr(current_file,target);\n  if (target != 0) {\n    dependency_list = dependency_list + 1;\n    is_ar_emul_append_constprop = do_ar_emul_append_constprop_0(current_archive_head,target,postype,is_thin_archive);\n    output_status._6_1_ = output_status._6_1_ | is_ar_emul_append_constprop;\n    filename = *dependency_list;\n    do {\n      if (filename == (char *)0x0) {\n        if (output_status._6_1_ == 0) {\n          output_filename = 0;\n          return 0;\n        }\n        position_name = write_archive();\n        return position_name;\n      }\n      current_dependency = *(char ***)(archive_list_head + 0xf0);\n      current_archive_head = output;\n      if (output_status._7_1_ == '\\0') {\n        next_dependency = output;\n        if (current_dependency != (char **)0x0) {\n          do {\n            if (full_pathname == '\\0') {\n              basename_3 = (char *)lbasename(*current_dependency);\n              basename_1 = basename_3;\n              if (ar_truncate != '\\0') {\n                string_length = strlen(basename_3);\n                size = (ulong)*(byte *)(*(long *)(archive_list_head + 8) + 0x1e);\n                if (size < string_length) {\n                  basename_1 = (char *)xmalloc(size + 1);\n                  current_archive = *(long *)(archive_list_head + 8);\n                  filename = basename_1;\n                  for (size = (ulong)*(byte *)(current_archive + 0x1e); size != 0; size = size - 1) {\n                    *filename = *basename_3;\n                    basename_3 = basename_3 + (ulong)byte_value * -2 + 1;\n                    filename = filename + (ulong)byte_value * -2 + 1;\n                  }\n                  basename_1[*(byte *)(current_archive + 0x1e)] = '\\0';\n                }\n                filename = *dependency_list;\n                basename_3 = basename_1;\n                if (full_pathname == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              filename = *dependency_list;\n              if (full_pathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n              basename_4 = (char *)lbasename(filename);\n              if (ar_truncate != '\\0') {\n                string_length = strlen(basename_4);\n                size = (ulong)*(byte *)(*(long *)(archive_list_head + 8) + 0x1e);\n                filename = basename_4;\n                basename_3 = basename_1;\n                if (size < string_length) {\n                  filename = (char *)xmalloc(size + 1);\n                  current_archive = *(long *)(archive_list_head + 8);\n                  basename_1 = filename;\n                  for (size = (ulong)*(byte *)(current_archive + 0x1e); size != 0; size = size - 1) {\n                    *basename_1 = *basename_4;\n                    basename_4 = basename_4 + (ulong)byte_value * -2 + 1;\n                    basename_1 = basename_1 + (ulong)byte_value * -2 + 1;\n                  }\n                  filename[*(byte *)(current_archive + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              comparison_result = filename_cmp(basename_4,basename_1);\n            }\n            else {\n              filename = *dependency_list;\n              basename_3 = *current_dependency;\nLAB_00102980:\n              comparison_result = filename_cmp(filename,basename_3);\n            }\n            if ((comparison_result == 0) && (current_dependency[0x1c] != (char *)0x0)) {\n              if (check_newer_versions != 0) {\n                comparison_result = stat(*dependency_list,(stat *)&file_info);\n                if (comparison_result != 0) {\n                  errno_location = __errno_location();\n                  if (*errno_location != 2) {\n                    bfd_fatal(*dependency_list);\nLAB_00102b7e:\n                    filename = *current_dependency;\n                    position_name = dcgettext(0,\"internal stat error on %s\",5);\n                    fatal(position_name,filename);\n                    free(dependency_list);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                basename_2 = (char **)current_dependency[0x1d];\n                if ((char **)current_dependency[0x1d] == (char **)0x0) {\n                  basename_2 = current_dependency;\n                }\n                comparison_result = (**(code **)(basename_2[1] + 0x1e8))(current_dependency,&stack0x00000020);\n                if (comparison_result != 0) goto LAB_00102b7e;\n                if (position_2 <= position_1) goto LAB_0010577e;\n              }\n              position_name = get_pos_bfd(output,2,*current_dependency);\n              if (dependency_bfd == 0) {\nLAB_00102ae2:\n                filename = *dependency_list;\n                is_verbose = verbose != 0;\n                current_archive = bfd_openr(filename,target);\n                if (current_archive == 0) {\n                  bfd_fatal(filename,0);\n                  goto LAB_00102b3e;\n                }\n                is_ar_emul_append_constprop = ar_emul_default_replace(position_name,current_archive,is_verbose);\n              }\n              else {\n                normalized_filename = normalize(*dependency_list);\n                comparison_result = filename_cmp(normalized_filename,\"__.LIBDEP\");\n                if (comparison_result != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                is_ar_emul_append_constprop = ar_emul_default_replace(position_name,dependency_bfd,verbose != 0);\n              }\n              if (is_ar_emul_append_constprop != 0) {\n                *next_dependency = *(char **)(*next_dependency + 0xf0);\n                output_status._6_1_ = is_ar_emul_append_constprop;\n              }\n              goto LAB_0010577e;\n            }\n            next_dependency = current_dependency + 0x1e;\n            current_dependency = (char **)current_dependency[0x1e];\n          } while (current_dependency != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        postype = postype;\n        if (postype != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        postype = postype;\n        if (postype != 0) goto LAB_001028f5;\n        current_archive = *(long *)(archive_list_head + 0xf0);\n        if (*(long *)(archive_list_head + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      current_file = *dependency_list;\n      if (dependency_bfd == 0) goto LAB_00105698;\nLAB_00105731:\n      position_name = normalize(current_file);\n      comparison_result = filename_cmp(position_name,\"__.LIBDEP\");\n      if (comparison_result != 0) goto code_r0x0010574f;\n      is_ar_emul_append_constprop = ar_emul_default_append(current_archive_head,dependency_bfd,verbose != 0,make_thin_archive);\n      output_status._6_1_ = is_ar_emul_append_constprop | output_status._6_1_;\nLAB_0010577e:\n      dependency_list = dependency_list + 1;\n      filename = *dependency_list;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  current_file = *dependency_list;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "bfd_fatal",
                "strlen",
                "stat",
                "do_ar_emul_append.constprop.0",
                "replace_members.cold",
                "write_archive",
                "ar_emul_default_append",
                "normalize",
                "ar_emul_default_replace",
                "fatal",
                "bfd_openr",
                "dcgettext",
                "FUN_00102943",
                "get_pos_bfd",
                "__errno_location",
                "filename_cmp",
                "lbasename",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "process_archives_001028ed"
        },
        "FUN_0010e1b0": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1b0",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010e1b0"
        },
        "FUN_0010e228": {
            "renaming": {},
            "code": "\n\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e228",
            "calling": [
                "realloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e228"
        },
        "FUN_0010e108": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e108",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_0010e108"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "open_inarch",
                "ar_open",
                "replace_members.cold",
                "simple_copy.constprop.0.cold",
                "set_times.cold",
                "get_file_size.cold",
                "print_contents",
                "yyparse.isra.0",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "yy_init_buffer",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00105a68",
                "main",
                "normalize.cold",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage",
                "non_fatal(uVar2)": "reportError(errorMessage)"
            },
            "code": "\nundefined8 handleFileError_001025a0(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    reportError(errorMessage);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    reportError(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_return_value_0010284b"
            },
            "code": "\nundefined8 getReturnValue_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "ranlib_only"
            ],
            "imported": false,
            "current_name": "get_return_value_0010284b"
        },
        "FUN_0010e220": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e220",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e220"
        },
        "FUN_0010e100": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e100",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e100"
        },
        "FUN_00105cc0": {
            "renaming": {
                "FUN_00105cc0": "process_entry_00105cc0",
                "param_1": "entryPoint",
                "param_2": "param",
                "auStack_8": "stackData"
            },
            "code": "\nvoid processEntry_00105cc0 processEntry_00105cc0(undefined8 entryPoint,undefined8 param)\n\n{\n  undefined stackData [8];\n  \n  __libc_start_main(main,param,&stack0x00000008,0,0,entryPoint,stackData);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "process_entry_00105cc0"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_update_values_00102f08",
                "unaff_RBX": "ptr_message",
                "unaff_R12": "ptr_new_value"
            },
            "code": "\nundefined8 print_and_update_values_00102f08(void)\n\n{\n  undefined8 *ptr_message;\n  undefined8 *ptr_new_value;\n  \n  printf(\"a - %s\\n\",*ptr_message);\n  ptr_message[0x1e] = *ptr_new_value;\n  *ptr_new_value = ptr_message;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "print_and_update_values_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "archive",
                "param_2": "filePaths",
                "param_3": "isCaseInsensitive",
                "ppcVar1": "currentFile",
                "uVar2": "undefinedVar",
                "bVar3": "byteVar",
                "iVar4": "intVar",
                "sVar5": "sizeVar",
                "piVar6": "errnoLoc",
                "pcVar7": "filePath",
                "pcVar8": "truncatedFilePath",
                "uVar9": "normalizedFilePath",
                "pcVar10": "currentFilePath",
                "__s": "baseName",
                "lVar11": "currentArchive",
                "lVar12": "nextArchive",
                "uVar13": "returnVar",
                "uVar14": "lengthVar",
                "ppcVar15": "currentEntry",
                "ppcVar16": "prevEntry",
                "uVar17": "posType",
                "ppcVar18": "prevEntryCopy",
                "bVar19": "isVerbose",
                "bVar20": "byteVar2",
                "local_15a": "localFlag",
                "auStack_158": "stackArray",
                "lStack_100": "lVar100",
                "sStack_c8": "statStruct"
            },
            "code": "\nundefined8 processFiles_00105570(long archive,char **filePaths,char isCaseInsensitive)\n\n{\n  char **currentFile;\n  undefined undefinedVar;\n  byte byteVar;\n  int intVar;\n  size_t sizeVar;\n  int *errnoLoc;\n  char *filePath;\n  char *truncatedFilePath;\n  undefined8 normalizedFilePath;\n  char *currentFilePath;\n  char *baseName;\n  long currentArchive;\n  long nextArchive;\n  undefined8 returnVar;\n  ulong lengthVar;\n  char **currentEntry;\n  char **prevEntry;\n  uint posType;\n  char **prevEntryCopy;\n  bool isVerbose;\n  byte byteVar2;\n  byte localFlag;\n  undefined stackArray [88];\n  long lVar100;\n  stat statStruct;\n  \n  byteVar2 = 0;\n  currentFile = (char **)(archive + 0xf0);\n  localFlag = 0;\n  if (filePaths == (char **)0x0) {\n    returnVar = initialize_output_file_00102943();\n    return returnVar;\n  }\n  do {\n    currentFilePath = *filePaths;\njoined_r0x001055aa:\n    if (currentFilePath == (char *)0x0) {\n      if (localFlag != 0) {\n        returnVar = write_archive(archive);\n        return returnVar;\n      }\n      output_filename = 0;\n      return 0;\n    }\n    currentEntry = *(char ***)(archive + 0xf0);\n    prevEntry = currentFile;\n    if (isCaseInsensitive != '\\0') {\nLAB_0010564c:\n      posType = postype;\n      if (postype != 0) goto LAB_001028f5;\n      nextArchive = *(long *)(archive + 0xf0);\n      if (*(long *)(archive + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentArchive = nextArchive;\n        nextArchive = *(long *)(currentArchive + 0xf0);\n      } while (nextArchive != 0);\n      prevEntry = (char **)(currentArchive + 0xf0);\n      currentFilePath = *filePaths;\n      do {\n        if (libdeps_bfd != 0) {\n          returnVar = normalize(currentFilePath,archive);\n          intVar = filename_cmp(returnVar,\"__.LIBDEP\");\n          if (intVar == 0) {\n            byteVar = ar_emul_default_append(prevEntry,libdeps_bfd,verbose != 0,make_thin_archive);\n            localFlag = byteVar | localFlag;\n            goto LAB_0010577e;\n          }\n          currentFilePath = *filePaths;\n        }\n        undefinedVar = make_thin_archive;\n        isVerbose = verbose != 0;\n        nextArchive = bfd_openr(currentFilePath,target);\n        if (nextArchive != 0) {\n          filePaths = filePaths + 1;\n          byteVar = do_ar_emul_append_constprop_0(prevEntry,nextArchive,(uint)isVerbose,undefinedVar);\n          localFlag = localFlag | byteVar;\n          currentFilePath = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        bfd_fatal(currentFilePath,0);\n        posType = (uint)isVerbose;\nLAB_001028f5:\n        returnVar = posname;\n        if (posType == 3) {\n          nextArchive = *(long *)(archive + 0xf0);\n          if (*(long *)(archive + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*prevEntry != (undefined8 *)0x0;\n              prevEntry = (char **)(*prevEntry + 0xf0)) {\n            intVar = filename_cmp(*(undefined8 *)*prevEntry,returnVar);\n            if (intVar == 0) {\n              if (posType == 2) {\n                prevEntry = (char **)(*prevEntry + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFilePath = *filePaths;\n      } while( true );\n    }\n    prevEntryCopy = currentFile;\n    if (currentEntry == (char **)0x0) {\n      posType = postype;\n      if (postype == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (full_pathname == '\\0') {\n      currentFilePath = (char *)lbasename(*currentEntry);\n      truncatedFilePath = currentFilePath;\n      if (ar_truncate != '\\0') {\n        sizeVar = strlen(currentFilePath);\n        lengthVar = (ulong)*(byte *)(*(long *)(archive + 8) + 0x1e);\n        if (lengthVar < sizeVar) {\n          truncatedFilePath = (char *)xmalloc(lengthVar + 1);\n          nextArchive = *(long *)(archive + 8);\n          filePath = truncatedFilePath;\n          for (lengthVar = (ulong)*(byte *)(nextArchive + 0x1e); lengthVar != 0; lengthVar = lengthVar - 1) {\n            *filePath = *currentFilePath;\n            currentFilePath = currentFilePath + (ulong)byteVar2 * -2 + 1;\n            filePath = filePath + (ulong)byteVar2 * -2 + 1;\n          }\n          truncatedFilePath[*(byte *)(nextArchive + 0x1e)] = '\\0';\n        }\n        filePath = *filePaths;\n        currentFilePath = truncatedFilePath;\n        if (full_pathname == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      filePath = *filePaths;\n      if (full_pathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n      baseName = (char *)lbasename(filePath);\n      if (ar_truncate != '\\0') {\n        sizeVar = strlen(baseName);\n        lengthVar = (ulong)*(byte *)(*(long *)(archive + 8) + 0x1e);\n        filePath = baseName;\n        currentFilePath = truncatedFilePath;\n        if (lengthVar < sizeVar) {\n          filePath = (char *)xmalloc(lengthVar + 1);\n          nextArchive = *(long *)(archive + 8);\n          truncatedFilePath = filePath;\n          for (lengthVar = (ulong)*(byte *)(nextArchive + 0x1e); lengthVar != 0; lengthVar = lengthVar - 1) {\n            *truncatedFilePath = *baseName;\n            baseName = baseName + (ulong)byteVar2 * -2 + 1;\n            truncatedFilePath = truncatedFilePath + (ulong)byteVar2 * -2 + 1;\n          }\n          filePath[*(byte *)(nextArchive + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      intVar = filename_cmp(baseName,truncatedFilePath);\n      if (intVar == 0) goto LAB_00102993;\nLAB_00105639:\n      prevEntryCopy = currentEntry + 0x1e;\n      currentEntry = (char **)currentEntry[0x1e];\n      if (currentEntry == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    filePath = *filePaths;\n    currentFilePath = *currentEntry;\nLAB_00102980:\n    intVar = filename_cmp(filePath,currentFilePath);\n    if (intVar != 0) goto LAB_00105639;\nLAB_00102993:\n    if (currentEntry[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (newer_only != 0) {\n      intVar = stat(*filePaths,&statStruct);\n      if (intVar != 0) {\n        errnoLoc = __errno_location();\n        if (*errnoLoc != 2) {\n          bfd_fatal(*filePaths);\nLAB_00102b7e:\n          currentFilePath = *currentEntry;\n          returnVar = dcgettext(0,\"internal stat error on %s\",5);\n          fatal(returnVar,currentFilePath);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      prevEntry = (char **)currentEntry[0x1d];\n      if ((char **)currentEntry[0x1d] == (char **)0x0) {\n        prevEntry = currentEntry;\n      }\n      intVar = (**(code **)(prevEntry[1] + 0x1e8))(currentEntry,stackArray);\n      if (intVar != 0) goto LAB_00102b7e;\n      if (statStruct.st_mtim.tv_sec <= lVar100) goto LAB_0010577e;\n    }\n    returnVar = get_pos_bfd(currentFile,2,*currentEntry);\n    if (libdeps_bfd == 0) {\nLAB_00102ae2:\n      currentFilePath = *filePaths;\n      isVerbose = verbose != 0;\n      nextArchive = bfd_openr(currentFilePath,target);\n      if (nextArchive == 0) {\n        bfd_fatal(currentFilePath,0);\n        goto LAB_00102b3e;\n      }\n      byteVar = ar_emul_default_replace(returnVar,nextArchive,isVerbose);\n    }\n    else {\n      normalizedFilePath = normalize(*filePaths,archive);\n      intVar = filename_cmp(normalizedFilePath,\"__.LIBDEP\");\n      if (intVar != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteVar = ar_emul_default_replace(returnVar,libdeps_bfd,verbose != 0);\n    }\n    if (byteVar != 0) {\n      *prevEntryCopy = *(char **)(*prevEntryCopy + 0xf0);\n      localFlag = byteVar;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        },
        "FUN_0010e1a8": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1a8",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e1a8"
        },
        "FUN_0010e2e8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e8"
        },
        "FUN_0010e1c0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1c0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010e1c0"
        },
        "FUN_00102500": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "print_version",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102500"
        },
        "FUN_0010e2e0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e0",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e0"
        },
        "FUN_0010e238": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e238",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010e238"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "yyparse.isra.0",
                "smart_rename.constprop.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_archive_entry_error_message_0010285f",
                "__format": "errorMessageFormat",
                "lVar2": "normalizedFilename",
                "plVar3": "alternativeFilename",
                "uVar4": "currentEntry",
                "plVar5": "entry",
                "unaff_RBP": "reverseFunctionPointer",
                "unaff_R12": "entryHeader",
                "unaff_R13D": "entryCount",
                "unaff_R14": "entryNameList",
                "iStack000000000000000c": "nameCounter"
            },
            "code": "\n\n\nvoid printArchiveEntryErrorMessage_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessageFormat;\n  long normalizedFilename;\n  long *alternativeFilename;\n  undefined8 currentEntry;\n  long *entry;\n  code *reverseFunctionPointer;\n  long entryHeader;\n  int entryCount;\n  undefined8 *entryNameList;\n  int nameCounter;\n  \ncode_r0x0010285f:\n  currentEntry = *entryNameList;\n  errorMessageFormat = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorMessageFormat,currentEntry);\nLAB_0010553e:\n  entryNameList = entryNameList + 1;\n  entryCount = entryCount + -1;\n  if (entryCount == 0) {\n    return;\n  }\n  entry = *(long **)(entryHeader + 0xf0);\n  nameCounter = 0;\n  do {\n    if (entry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)entry + 0xac) == 0) {\n      normalizedFilename = *entry;\n      if (normalizedFilename == 0) {\n        alternativeFilename = (long *)entry[0x1d];\n        if ((long *)entry[0x1d] == (long *)0x0) {\n          alternativeFilename = entry;\n        }\n        (**(code **)(alternativeFilename[1] + 0x1e8))(entry,&stack0x00000010);\n      }\n      else if (((*(byte *)(entryHeader + 0x49) & 0x10) == 0) || (normalizedFilename = normalize(), normalizedFilename != 0)) {\n        currentEntry = normalize(*entryNameList);\n        iVar1 = filename_cmp(currentEntry,normalizedFilename);\n        if ((iVar1 == 0) &&\n           ((counted_name_mode == '\\0' ||\n            (nameCounter = nameCounter + 1,\n            nameCounter == counted_name_counter)))) break;\n      }\n    }\n    entry = (long *)entry[0x1e];\n  } while( true );\n  (*reverseFunctionPointer)();\n  *(undefined4 *)((long)entry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "map_over_members"
            ],
            "imported": false,
            "current_name": "print_archive_entry_error_message_0010285f"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_archive_index_0010394a",
                "param_1": "outputToStdout",
                "uVar1": "programName",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printArchiveIndex_0010394a(uint outputToStdout)\n\n{\n  undefined8 programName;\n  char *message;\n  FILE *outputStream;\n  \n  programName = program_name;\n  outputStream = _stderr;\n  if (outputToStdout != 0) {\n    outputStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,programName);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  list_supported_targets(program_name,outputStream);\n  if (outputToStdout != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToStdout ^ 1);\n}\n\n",
            "called": [
                "fprintf",
                "list_supported_targets",
                "dcgettext",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_archive_index_0010394a"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "check_return_value_00105bb0",
                "return": "success_code"
            },
            "code": "\nundefined8 check_return_value_00105bb0(void)\n\n{\n  success_code 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_return_value_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_application_00107640"
            },
            "code": "\nundefined8 initializeApplication_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_application_00107640"
        },
        "FUN_0010e1d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid clearerr(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* clearerr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d8",
            "calling": [
                "clearerr"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d8"
        },
        "FUN_00102510": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "print_contents",
                "yyparse.isra.0",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102510"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "exit_non_interactive_0010315d",
                "interactive": "isInteractive"
            },
            "code": "\nvoid exitNonInteractive_0010315d(void)\n\n{\n  if (isInteractive == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "open_inarch",
                "ar_open",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "exit_non_interactive_0010315d"
        },
        "FUN_0010e1d0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d0"
        },
        "FUN_0010e248": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e248",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_0010e248"
        },
        "FUN_0010e008": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e008",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_0010e008"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_arelt_description_00107890",
                "param_1": "param",
                "_stdout": "output_stream",
                "verbose": "is_verbose",
                "display_offsets": "show_offsets"
            },
            "code": "\n\n\nvoid print_arelt_description_00107890(undefined8 param)\n\n{\n  print_arelt_descr(output_stream,param,is_verbose != 0,show_offsets != 0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_arelt_description_00107890"
        },
        "FUN_001024a0": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "open_inarch",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "FUN_001024a0"
        },
        "FUN_0010e000": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e000",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010e000"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_and_print_value_00103172",
                "param_1": "originalValuePtr",
                "param_2": "newValuePtr",
                "param_3": "shouldPrint",
                "param_4": "data",
                "uVar1": "originalValue",
                "auVar2": "updatedValueArray"
            },
            "code": "\nundefined  [16]\nupdateAndPrintValue_00103172(undefined8 *originalValuePtr,undefined8 *newValuePtr,char shouldPrint,undefined8 data)\n\n{\n  undefined8 originalValue;\n  undefined updatedValueArray [16];\n  \n  if (shouldPrint != '\\0') {\n    printf(\"r - %s\\n\",*newValuePtr);\n  }\n  originalValue = *originalValuePtr;\n  newValuePtr[0x1e] = originalValue;\n  updatedValueArray._1_7_ = (undefined7)((ulong)originalValue >> 8);\n  updatedValueArray[0] = 1;\n  *originalValuePtr = newValuePtr;\n  updatedValueArray._8_8_ = data;\n  return updatedValueArray;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "update_and_print_value_00103172"
        },
        "FUN_0010e0a8": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0a8",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010e0a8"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "initialize_buffer_001030ed",
                "yy_buffer_stack": "bufferStack",
                "yy_buffer_stack_top": "bufferStackTop",
                "puVar1": "bufferPointer",
                "yy_n_chars": "numChars",
                "yy_c_buf_p": "bufferPtr",
                "yytext": "text",
                "yyin": "input",
                "yy_hold_char": "holdChar"
            },
            "code": "\nvoid initializeBuffer_001030ed(void)\n\n{\n  undefined8 *bufferPointer;\n  \n  bufferPointer = *(undefined8 **)(bufferStack + bufferStackTop * 8);\n  numChars = *(undefined4 *)((long)bufferPointer + 0x1c);\n  bufferPtr = (undefined *)bufferPointer[2];\n  text = bufferPtr;\n  input = *bufferPointer;\n  holdChar = *bufferPtr;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "yyparse.isra.0",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "initialize_buffer_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_remove_file_00105bc0",
                "param_1": "sourcePath",
                "param_2": "destinationPath",
                "param_3": "permission",
                "param_4": "sizeOfFile",
                "uVar1": "result",
                "piVar2": "errorPointer",
                "pcVar3": "errorMessage",
                "uVar4": "localizedErrorMessage",
                "uVar5": "copyResult",
                "auVar6": "returnData"
            },
            "code": "\nundefined  [16] copyAndRemoveFile_00105bc0(char *sourcePath,char *destinationPath,undefined4 permission,undefined8 sizeOfFile)\n\n{\n  uint result;\n  int *errorPointer;\n  char *errorMessage;\n  undefined8 localizedErrorMessage;\n  ulong copyResult;\n  undefined returnData [16];\n  \n  if (destinationPath == sourcePath) {\n    copyResult = 0;\n  }\n  else {\n    result = simple_copy_constprop_0(permission);\n    copyResult = (ulong)result;\n    if (result != 0) {\n      errorPointer = __errno_location();\n      errorMessage = strerror(*errorPointer);\n      localizedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(localizedErrorMessage,destinationPath,errorMessage);\n    }\n    unlink(sourcePath);\n  }\n  returnData._8_8_ = sizeOfFile;\n  returnData._0_8_ = copyResult;\n  return returnData;\n}\n\n",
            "called": [
                "smart_rename.constprop.0.cold",
                "simple_copy.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "copy_and_remove_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_file_size_00107650",
                "param_1": "fileName",
                "uVar1": "result",
                "lVar2": "fileSize"
            },
            "code": "\nundefined8 checkFileSize_00107650(undefined8 fileName)\n\n{\n  undefined8 result;\n  long fileSize;\n  \n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    result = 1;\n  }\n  else {\n    write_armap = 1;\n    fileSize = open_inarch(fileName,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    write_archive(fileSize);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "open_inarch",
                "ranlib_only.cold",
                "get_file_size",
                "write_archive",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_file_size_00107650"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_unlink_00102f1e",
                "piVar1": "errorCode",
                "uVar2": "errorMessage",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] copyFileAndUnlink_00102f1e(void)\n\n{\n  int *errorCode;\n  undefined8 errorMessage;\n  ulong fileSize;\n  char *filePath;\n  undefined returnValue [16];\n  undefined8 unaff_retaddr;\n  \n  errorCode = __errno_location();\n  strerror(*errorCode);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(filePath);\n  returnValue._0_8_ = fileSize & 0xffffffff;\n  returnValue._8_8_ = unaff_retaddr;\n  return returnValue;\n}\n\n",
            "called": [
                "strerror",
                "unlink",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_file_and_unlink_00102f1e"
        },
        "FUN_0010e1e8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1e8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010e1e8"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "set_time_and_error_handling_00102fd7",
                "piVar1": "errorCodePtr",
                "uVar2": "errorString",
                "__errno_location": "getErrorLocation",
                "strerror": "getErrorString",
                "dcgettext": "getErrorMessage",
                "non_fatal": "handleNonFatalError"
            },
            "code": "\nvoid setTimeAndErrorHandling_00102fd7(void)\n\n{\n  int *errorCodePtr;\n  undefined8 errorString;\n  \n  errorCodePtr = getErrorLocation();\n  getErrorString(*errorCodePtr);\n  errorString = getErrorMessage(0,\"%s: cannot set time: %s\",5);\n  handleNonFatalError(errorString);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "set_time_and_error_handling_00102fd7"
        },
        "FUN_0010e0c8": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c8",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c8"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "yyparse.isra.0",
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102520": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "open_inarch.cold",
                "ar_open",
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102520"
        },
        "FUN_001024b0": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001024b0"
        },
        "FUN_00107da8": {
            "renaming": {
                "FUN_00107da8": "FUNC_00107da8"
            },
            "code": "\nvoid FUNC_00107da8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00107da8"
        },
        "FUN_0010e0c0": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c0",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c0"
        },
        "FUN_0010e018": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e018",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010e018"
        },
        "FUN_00105d60": {
            "renaming": {
                "FUN_00105d60": "initialize_program_00105d60",
                "completed_0": "isInitialized",
                "__cxa_finalize": "cleanupStaticObjects",
                "__dso_handle": "dynamicSharedObjectHandle",
                "deregister_tm_clones": "deregisterTypeMetadataClones"
            },
            "code": "\nvoid initializeProgram_00105d60(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  cleanupStaticObjects(dynamicSharedObjectHandle);\n  deregisterTypeMetadataClones();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_00105d60"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_gnu_info_001075e0",
                "param_1": "binutilsVersion",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printGNUInfo_001075e0(undefined8 binutilsVersion)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",binutilsVersion,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_gnu_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archived_entries_00105480",
                "param_1": "archiveParam",
                "param_2": "processEntry",
                "param_3": "entryNames",
                "param_4": "numEntries",
                "iVar1": "filenameComparison",
                "__format": "errorMessage",
                "lVar2": "currentEntry",
                "plVar3": "fallbackEntry",
                "uVar4": "normalizedEntry",
                "plVar5": "entryIterator",
                "local_cc": "counter",
                "local_c8": "localBuffer"
            },
            "code": "\n\n\nvoid processArchivedEntries_00105480(long archiveParam,code *processEntry,undefined8 *entryNames,int numEntries)\n\n{\n  int filenameComparison;\n  char *errorMessage;\n  long currentEntry;\n  long *fallbackEntry;\n  undefined8 normalizedEntry;\n  long *entryIterator;\n  int counter;\n  undefined localBuffer [152];\n  \n  currentEntry = *(long *)(archiveParam + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*processEntry)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entryIterator = *(long **)(archiveParam + 0xf0);\n      counter = 0;\n      for (; entryIterator != (long *)0x0; entryIterator = (long *)entryIterator[0x1e]) {\n        if (*(int *)((long)entryIterator + 0xac) == 0) {\n          currentEntry = *entryIterator;\n          if (currentEntry == 0) {\n            fallbackEntry = (long *)entryIterator[0x1d];\n            if ((long *)entryIterator[0x1d] == (long *)0x0) {\n              fallbackEntry = entryIterator;\n            }\n            (**(code **)(fallbackEntry[1] + 0x1e8))(entryIterator,localBuffer);\n          }\n          else if (((*(byte *)(archiveParam + 0x49) & 0x10) == 0) ||\n                  (currentEntry = normalize(currentEntry,archiveParam), currentEntry != 0)) {\n            normalizedEntry = normalize(*entryNames,archiveParam);\n            filenameComparison = filename_cmp(normalizedEntry,currentEntry);\n            if ((filenameComparison == 0) &&\n               ((counted_name_mode == '\\0' ||\n                (counter = counter + 1, counter == counted_name_counter)))) {\n              (*processEntry)();\n              *(undefined4 *)((long)entryIterator + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      normalizedEntry = *entryNames;\n      errorMessage = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,errorMessage,normalizedEntry);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "normalize",
                "map_over_members.cold",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_archived_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_0010e258": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e258",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010e258"
        },
        "FUN_00102530": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "open_inarch",
                "ar_open",
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102530"
        },
        "FUN_0010e0b8": {
            "renaming": {},
            "code": "\n\n\n\nchar * ctime(time_t *__timer)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ctime@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0b8",
            "calling": [
                "ctime"
            ],
            "imported": false,
            "current_name": "FUN_0010e0b8"
        },
        "FUN_0010e0d8": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d8",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d8"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "process_archive_00103a78",
                "param_1": "input",
                "iVar1": "status",
                "__ptr": "buffer",
                "puVar2": "archive",
                "uVar3": "bytesRead",
                "uVar4": "errorMessage",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPtr",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorString",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "fileSize",
                "auStack_b8": "tempStack",
                "local_88": "archiveSize"
            },
            "code": "\n\n\nvoid processArchive_00103a78(undefined8 *input)\n\n{\n  int status;\n  void *buffer;\n  undefined8 *archive;\n  ulong bytesRead;\n  undefined8 errorMessage;\n  size_t bytesWritten;\n  int *errnoPtr;\n  size_t remainingBytes;\n  char *errorString;\n  ulong totalBytesRead;\n  ulong fileSize;\n  undefined tempStack [48];\n  ulong archiveSize;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archive = (undefined8 *)input[0x1d];\n  if ((undefined8 *)input[0x1d] == (undefined8 *)0x0) {\n    archive = input;\n  }\n  status = (**(code **)(archive[1] + 0x1e8))(input,tempStack);\n  if (status == 0) {\n    if (verbose != 0) {\n      printf(\"\\n<%s>\\n\\n\",*input);\n    }\n    totalBytesRead = 0;\n    bfd_seek(input,0,0);\n    goto LAB_00103afd;\n  }\n  input = (undefined8 *)*input;\n  errorString = \"internal stat error on %s\";\n  do {\n    errorMessage = dcgettext(0,errorString,5);\n    fatal(errorMessage,input);\n    archiveSize = fileSize;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        fatal(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (archiveSize <= totalBytesRead) goto LAB_00103b91;\n      remainingBytes = archiveSize - totalBytesRead;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,input);\n    } while (remainingBytes == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    input = *(undefined8 **)input[0x1d];\n    fileSize = archiveSize;\n  } while( true );\n}\n\n",
            "called": [
                "strerror",
                "bfd_bread",
                "free",
                "fatal",
                "dcgettext",
                "fwrite",
                "bfd_seek",
                "__errno_location",
                "printf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_archive_00103a78"
        },
        "FUN_0010e1f0": {
            "renaming": {},
            "code": "\n\n\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1f0",
            "calling": [
                "fileno"
            ],
            "imported": false,
            "current_name": "FUN_0010e1f0"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_0010e0d0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d0",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d0"
        },
        "FUN_001024c0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024c0"
        },
        "FUN_0010e028": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e028",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_0010e028"
        },
        "FUN_0010e268": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e268",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010e268"
        },
        "FUN_0010e148": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e148",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_0010e148"
        },
        "FUN_0010e020": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e020",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010e020"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_entry_001058b0",
                "param_1": "entry_data",
                "cVar1": "temp_char",
                "uVar2": "flags",
                "iVar3": "temp_fd",
                "uVar4": "temp_data",
                "__format": "time_format",
                "__ptr": "temp_ptr",
                "__stream": "temp_stream",
                "ppcVar5": "temp_ppcVar",
                "uStack0000000000000020": "temp_uStack1",
                "in_stack_00000028": "temp_stack_var",
                "in_stack_00000038": "temp_size",
                "local_3c": "temp_local_array",
                "uStack_33": "temp_uStack2",
                "cStack_32": "temp_cStack1",
                "cStack_31": "temp_cStack2"
            },
            "code": "\nvoid write_archive_entry_001058b0(undefined8 *entry_data)\n\n{\n  char temp_char;\n  uint flags;\n  int temp_fd;\n  undefined8 temp_data;\n  char *time_format;\n  void *temp_ptr;\n  FILE *temp_stream;\n  char **temp_ppcVar;\n  uint temp_uStack1;\n  uint temp_stack_var;\n  undefined8 temp_size;\n  int temp_local_array [2];\n  undefined temp_uStack2;\n  char temp_cStack1;\n  char temp_cStack2;\n  \n  temp_data = entry_data[0x1e];\n  temp_local_array[0] = -1;\n  temp_ptr = (void *)xstrdup(*entry_data);\n  temp_stream = (FILE *)make_tempname(temp_ptr,temp_local_array);\n  temp_fd = temp_local_array[0];\n  if (temp_stream != (FILE *)0x0) {\n    output_filename = temp_stream;\n    temp_ppcVar = (char **)bfd_fdopenw(temp_stream,*(undefined8 *)entry_data[1],temp_local_array[0]);\n    if (temp_ppcVar != (char **)0x0) {\n      output_bfd = temp_ppcVar;\n      bfd_set_format(temp_ppcVar,2);\n      flags = (~write_armap >> 0x1f) << 3 | *(byte *)((long)temp_ppcVar + 0x49) & 0xfffffff7;\n      *(char *)((long)temp_ppcVar + 0x49) = (char)flags;\n      if (ar_truncate != '\\0') {\n        *(uint *)((long)temp_ppcVar + 0x44) = *(uint *)((long)temp_ppcVar + 0x44) | 0x400;\n      }\n      if (deterministic != 0) {\n        *(uint *)((long)temp_ppcVar + 0x44) = *(uint *)((long)temp_ppcVar + 0x44) | 0x2000;\n      }\n      if (full_pathname != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((make_thin_archive != '\\0') || ((*(byte *)((long)entry_data + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)temp_ppcVar + 0x49) = (byte)flags | 0x10;\n        }\n        temp_char = bfd_set_archive_head(temp_ppcVar,temp_data);\n        if (temp_char != '\\0') break;\n        flags = bfd_fatal(temp_ptr);\nLAB_00102d37:\n        *(uint *)((long)temp_ppcVar + 0x44) = *(uint *)((long)temp_ppcVar + 0x44) | 0x100000;\n      }\n      temp_fd = dup(temp_fd);\n      temp_char = bfd_close(temp_ppcVar);\n      if (temp_char == '\\0') {\n        bfd_fatal(temp_ptr);\n        time_format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,time_format);\n        flags = temp_uStack1 & 0xf000;\n        if (flags == 0x4000) {\n          temp_uStack2 = 100;\n        }\n        else if (flags == 0xa000) {\n          temp_uStack2 = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          temp_uStack2 = 0x62;\n        }\n        else if (flags == 0x2000) {\n          temp_uStack2 = 99;\n        }\n        else if (flags == 0xc000) {\n          temp_uStack2 = 0x73;\n        }\n        else {\n          temp_uStack2 = 0x70;\n          if (flags != 0x1000) {\n            temp_uStack2 = 0x2d;\n          }\n        }\n        temp_cStack1 = (-((_temp_uStack1 & 0x100) == 0) & 0xbbU) + 0x72;\n        temp_cStack2 = (-((_temp_uStack1 & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(temp_stream,\"%s %ld/%ld %6lu %s \",&temp_cStack1,_temp_uStack1 >> 0x20,\n                (ulong)temp_stack_var,temp_size,&stack0xffffffffffffffd8,\n                _temp_uStack1 & 0xffffffff);\n        fputs(*temp_ppcVar,temp_stream);\n        if ((char)entry_data != '\\0') {\n          if ((*(byte *)((long)temp_ppcVar + 0x49) & 0x10) == 0) {\n            if (temp_ppcVar[0xb] != (char *)0x0) {\n              fprintf(temp_stream,\" 0x%lx\");\n            }\n          }\n          else if (temp_ppcVar[0xc] != (char *)0x0) {\n            fprintf(temp_stream,\" 0x%lx\");\n          }\n        }\n        fputc(10,temp_stream);\n        return;\n      }\n      output_bfd = (char **)0x0;\n      output_filename = (FILE *)0x0;\n      bfd_close(entry_data);\n      temp_fd = smart_rename_constprop_0(temp_stream,temp_ptr,temp_fd);\n      if (temp_fd == 0) {\n        free(temp_ptr);\n        free(temp_stream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(temp_fd);\n    bfd_fatal(temp_ptr);\n  }\n  temp_data = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  bfd_fatal(temp_data);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_fdopenw",
                "bfd_fatal",
                "close",
                "bfd_set_format",
                "dcgettext",
                "make_tempname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "ranlib_only",
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "write_archive_entry_001058b0"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "open_inarch",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_0010e260": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e260",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_0010e260"
        },
        "FUN_00102540": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102540"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_001024d0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001024d0"
        },
        "FUN_0010e0e0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0e0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010e0e0"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "main",
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_file_path_00105a20",
                "param_1": "input_path",
                "pcVar1": "output_directory",
                "pcVar2": "current_path",
                "uVar3": "base_name",
                "uVar4": "error_message",
                "pFVar5": "file_pointer",
                "sVar6": "output_dir_length"
            },
            "code": "\nvoid extractFilePath_00105a20(char *input_path)\n\n{\n  char *output_directory;\n  char *current_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t output_dir_length;\n  \n  output_directory = output_dir;\n  output_filename = input_path;\n  if (*input_path == '/') {\nLAB_00102e9a:\n    base_name = lbasename();\n    output_directory = output_filename;\n    error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    non_fatal(error_message,output_directory,base_name);\n    output_filename = (char *)base_name;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*input_path == '\\0') {\n      if ((output_dir != (char *)0x0) && (output_dir_length = strlen(output_dir), output_dir_length != 0)) {\n        if (output_directory[output_dir_length - 1] == '/') {\n          output_filename = (char *)concat(output_directory,output_filename,0);\n        }\n        else {\n          output_filename = (char *)concat(output_directory,&DAT_00108260,output_filename,0);\n        }\n      }\n      if (verbose != 0) {\n        printf(\"x - %s\\n\",output_filename);\n      }\n      file_pointer = fopen(output_filename,\"w\");\n      if (file_pointer == (FILE *)0x0) {\n        perror(output_filename);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    current_path = input_path;\n    if ((*input_path == '.') && (current_path = input_path + 1, input_path[1] == '.')) {\n      current_path = input_path + 2;\n      if ((input_path[2] == '/') || (input_path[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n    }\n    for (; input_path = current_path, *current_path == '/'; current_path = current_path + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "extract_file_path_00105a20"
        },
        "FUN_0010e158": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e158",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010e158"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_and_set_errno_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoLocation",
                "iVar1": "savedErrno"
            },
            "code": "\nundefined8 closeFileAndSetErrno_00102f55(void)\n\n{\n  int savedErrno;\n  int *errnoLocation;\n  int fileDescriptor;\n  \n  errnoLocation = __errno_location();\n  savedErrno = *errnoLocation;\n  close(fileDescriptor);\n  *errnoLocation = savedErrno;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "close_file_and_set_errno_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_file_name_001057a0",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unused_arg_1",
                "param_4": "unused_arg_2",
                "iVar1": "result",
                "pcVar2": "file_name",
                "lVar3": "name_length",
                "lVar4": "i",
                "lVar5": "slash_pos",
                "pcVar6": "new_path",
                "bVar7": "is_slash_present",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] extract_file_name_001057a0(char *file_path,int *file_descriptor,undefined8 unused_arg_1,undefined8 unused_arg_2)\n\n{\n  int result;\n  char *file_name;\n  long name_length;\n  long i;\n  long slash_pos;\n  char *new_path;\n  byte is_slash_present;\n  undefined return_value [16];\n  \n  is_slash_present = 0;\n  file_name = strrchr(file_path,0x2f);\n  if (file_name == (char *)0x0) {\n    file_name = (char *)xmalloc(9);\n    name_length = 0;\n  }\n  else {\n    slash_pos = (long)file_name - (long)file_path;\n    file_name = (char *)xmalloc(slash_pos + 0xb);\n    name_length = slash_pos + 1;\n    new_path = file_name;\n    for (i = slash_pos; i != 0; i = i + -1) {\n      *new_path = *file_path;\n      file_path = file_path + (ulong)is_slash_present * -2 + 1;\n      new_path = new_path + (ulong)is_slash_present * -2 + 1;\n    }\n    file_name[slash_pos] = '/';\n  }\n  *(undefined8 *)(file_name + name_length) = 0x5858585858587473;\n  *(undefined *)((long)(file_name + name_length) + 8) = 0;\n  result = mkstemp(file_name);\n  if (result == -1) {\n    new_path = (char *)0x0;\n    free(file_name);\n  }\n  else {\n    *file_descriptor = result;\n    new_path = file_name;\n  }\n  return_value._8_8_ = unused_arg_2;\n  return_value._0_8_ = new_path;\n  return return_value;\n}\n\n",
            "called": [
                "make_tempname.cold",
                "mkstemp",
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "extract_file_name_001057a0"
        },
        "FUN_00102550": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "ar_open",
                "set_times.cold",
                "get_file_size.cold",
                "print_contents",
                "smart_rename.constprop.0.cold",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102550"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "report",
                "main",
                "ar_emul_default_usage",
                "bfd_nonfatal.cold",
                "list_supported_targets",
                "yyparse.isra.0",
                "ranlib_usage",
                "list_matching_formats",
                "print_arelt_descr.cold",
                "open_inarch",
                "map_over_list",
                "ar_open",
                "map_over_members.cold",
                "usage",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_0010e0f8": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f8",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f8"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "terminate_program_00107c10",
                "bfd_nonfatal": "handleNonfatal",
                "xexit": "exitFunction"
            },
            "code": "\nvoid terminateProgram_00107c10(void)\n\n{\n  handleNonfatal();\n                    \n  exitFunction(1);\n}\n\n",
            "called": [
                "bfd_nonfatal",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "write_archive",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "terminate_program_00107c10"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "report",
                "prompt",
                "bfd_nonfatal.cold",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010e0f0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f0",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f0"
        },
        "FUN_001024e0": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024e0"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_at_exit_functions_00107cc0",
                "plVar4": "currentNode",
                "uVar5": "numberOfFunctions",
                "lVar1": "functionIndex",
                "lVar2": "previousIndex",
                "lVar3": "currentIndex",
                "xatexit_head": "exitFunctionsList"
            },
            "code": "\nvoid executeAtExitFunctions_00107cc0(void)\n\n{\n  long functionIndex;\n  long previousIndex;\n  long currentIndex;\n  long *currentNode;\n  uint numberOfFunctions;\n  \n  currentNode = (long *)exitFunctionsList;\n  if (exitFunctionsList != (undefined *)0x0) {\n    do {\n      numberOfFunctions = *(int *)(currentNode + 1) - 1;\n      if (-1 < (int)numberOfFunctions) {\n        functionIndex = (long)(int)numberOfFunctions;\n        numberOfFunctions = numberOfFunctions & 7;\n        (*(code *)currentNode[functionIndex + 2])();\n        previousIndex = functionIndex + -1;\n        if (-1 < (int)previousIndex) {\n          currentIndex = previousIndex;\n          if (numberOfFunctions != 0) {\n            if (numberOfFunctions != 1) {\n              if (numberOfFunctions != 2) {\n                if (numberOfFunctions != 3) {\n                  if (numberOfFunctions != 4) {\n                    if (numberOfFunctions != 5) {\n                      if (numberOfFunctions != 6) {\n                        (*(code *)currentNode[functionIndex + 1])();\n                        previousIndex = functionIndex + -2;\n                      }\n                      (*(code *)currentNode[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)currentNode[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)currentNode[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)currentNode[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)currentNode[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)currentNode[previousIndex + 2])();\n            currentIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)currentNode[currentIndex + 2])();\n            functionIndex = currentIndex + -1;\n            (*(code *)currentNode[currentIndex + 1])();\n            (*(code *)currentNode[currentIndex])();\n            (*(code *)currentNode[functionIndex])();\n            (*(code *)currentNode[currentIndex + -2])();\n            (*(code *)currentNode[currentIndex + -3])();\n            (*(code *)currentNode[currentIndex + -4])();\n            (*(code *)currentNode[currentIndex + -5])();\n            currentIndex = currentIndex + -8;\n          } while (-1 < (int)functionIndex + -7);\n        }\n      }\nLAB_00107d96:\n      currentNode = (long *)*currentNode;\n    } while (currentNode != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_at_exit_functions_00107cc0"
        },
        "FUN_0010e288": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e288",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e288"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "append_const_property_00105ae0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "code": "\nvoid appendConstProperty_00105ae0(undefined8 arg1,undefined8 arg2,undefined arg3,undefined arg4)\n\n{\n  do_ar_emul_append_constprop_0(arg1,arg2,arg3,arg4);\n  return;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "append_const_property_00105ae0"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "report_and_exit_00107690",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "param_3": "buffer3",
                "param_4": "buffer4",
                "param_5": "buffer5",
                "param_6": "buffer6",
                "param_7": "buffer7",
                "param_8": "buffer8",
                "param_9": "data1",
                "param_10": "data2",
                "param_11": "data3",
                "param_12": "data4",
                "param_13": "data5",
                "param_14": "data6",
                "in_AL": "condition",
                "local_d8": "size1",
                "local_d4": "size2",
                "local_d0": "bufferPtr",
                "local_c8": "localBuffer",
                "local_b8": "stackBuffer",
                "local_b0": "extraData1",
                "local_a8": "extraData2",
                "local_a0": "extraData3",
                "local_98": "extraData4",
                "local_90": "extraData5",
                "local_88": "extraBuffer1",
                "local_78": "extraBuffer2",
                "local_68": "extraBuffer3",
                "local_58": "extraBuffer4",
                "local_48": "extraBuffer5",
                "local_38": "extraBuffer6",
                "local_28": "extraBuffer7",
                "local_18": "extraBuffer8"
            },
            "code": "\nvoid reportAndExit_00107690(undefined4 buffer1,undefined4 buffer2,undefined4 buffer3,undefined4 buffer4,\n                 undefined4 buffer5,undefined4 buffer6,undefined4 buffer7,undefined4 buffer8,\n                 undefined8 data1,undefined8 data2,undefined8 data3,undefined8 data4,\n                 undefined8 data5,undefined8 data6)\n\n{\n  char condition;\n  undefined4 size1;\n  undefined4 size2;\n  undefined *bufferPtr;\n  undefined *localBuffer;\n  undefined stackBuffer [8];\n  undefined8 extraData1;\n  undefined8 extraData2;\n  undefined8 extraData3;\n  undefined8 extraData4;\n  undefined8 extraData5;\n  undefined4 extraBuffer1;\n  undefined4 extraBuffer2;\n  undefined4 extraBuffer3;\n  undefined4 extraBuffer4;\n  undefined4 extraBuffer5;\n  undefined4 extraBuffer6;\n  undefined4 extraBuffer7;\n  undefined4 extraBuffer8;\n  \n  if (condition != '\\0') {\n    extraBuffer1 = buffer1;\n    extraBuffer2 = buffer2;\n    extraBuffer3 = buffer3;\n    extraBuffer4 = buffer4;\n    extraBuffer5 = buffer5;\n    extraBuffer6 = buffer6;\n    extraBuffer7 = buffer7;\n    extraBuffer8 = buffer8;\n  }\n  bufferPtr = &stack0x00000008;\n  size1 = 8;\n  localBuffer = stackBuffer;\n  size2 = 0x30;\n  extraData1 = data2;\n  extraData2 = data3;\n  extraData3 = data4;\n  extraData4 = data5;\n  extraData5 = data6;\n  report(data1,&size1);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "report",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "report_and_exit_00107690"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "targetPtr"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *targetPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtr = targetList;\n  while( true ) {\n    currentTarget = *targetPtr;\n    targetPtr = targetPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "free",
                "bfd_target_list",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_0010e280": {
            "renaming": {},
            "code": "\n\n\n\nvoid perror(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* perror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e280",
            "calling": [
                "perror"
            ],
            "imported": false,
            "current_name": "FUN_0010e280"
        },
        "FUN_00102560": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102560"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_file_contents_00105830",
                "param_1": "filename",
                "param_2": "fileInfo",
                "param_3": "var3",
                "param_4": "var4",
                "__s": "basenameResult",
                "uVar3": "truncateLength",
                "pcVar4": "destPtr",
                "bVar5": "byteValue",
                "auVar6": "returnValue",
                "full_pathname": "isFullPath"
            },
            "code": "\nundefined  [16] extractFileContents_00105830(char *filename,long fileInfo,undefined8 var3,undefined8 var4)\n\n{\n  long lVar1;\n  size_t sVar2;\n  char *basenameResult;\n  ulong truncateLength;\n  char *destPtr;\n  byte byteValue;\n  undefined returnValue [16];\n  \n  byteValue = 0;\n  if (isFullPath == '\\0') {\n    basenameResult = (char *)lbasename();\n    filename = basenameResult;\n    if ((ar_truncate != '\\0') && (fileInfo != 0)) {\n      sVar2 = strlen(basenameResult);\n      truncateLength = (ulong)*(byte *)(*(long *)(fileInfo + 8) + 0x1e);\n      if (truncateLength < sVar2) {\n        filename = (char *)xmalloc(truncateLength + 1);\n        lVar1 = *(long *)(fileInfo + 8);\n        destPtr = filename;\n        for (truncateLength = (ulong)*(byte *)(lVar1 + 0x1e); truncateLength != 0; truncateLength = truncateLength - 1) {\n          *destPtr = *basenameResult;\n          basenameResult = basenameResult + (ulong)byteValue * -2 + 1;\n          destPtr = destPtr + (ulong)byteValue * -2 + 1;\n        }\n        filename[*(byte *)(lVar1 + 0x1e)] = '\\0';\n      }\n    }\n  }\n  returnValue._8_8_ = var4;\n  returnValue._0_8_ = filename;\n  return returnValue;\n}\n\n",
            "called": [
                "normalize.cold",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "map_over_members",
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "extract_file_contents_00105830"
        },
        "FUN_0010e160": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e160",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_0010e160"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "open_output_file.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "error",
                "iVar1": "errorType",
                "uVar2": "errorMessage",
                "in_R10": "relatedInfo",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "executableName"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long error)\n\n{\n  int errorType;\n  undefined8 errorMessage;\n  undefined8 relatedInfo;\n  \n  errorType = bfd_get_error();\n  if (errorType == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorType);\n  }\n  fflush(standardOutput);\n  if (error != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",executableName,error,errorMessage,relatedInfo);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",executableName,errorMessage,relatedInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "remove_output.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_001024f0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "print_arelt_descr",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001024f0"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "create_output_file_00102e57",
                "pFVar1": "outputFile",
                "output_filename": "outputFileName"
            },
            "code": "\nvoid createOutputFile_00102e57(void)\n\n{\n  FILE *outputFile;\n  \n  outputFileName = (char *)concat();\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",outputFileName);\n  }\n  outputFile = fopen(outputFileName,\"w\");\n  if (outputFile != (FILE *)0x0) {\n    return;\n  }\n  perror(outputFileName);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "create_output_file_00102e57"
        },
        "FUN_0010e058": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e058",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010e058"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_archived_files_00105af0",
                "param_1": "files_to_process",
                "param_2": "archive_file",
                "param_3": "check_format",
                "param_4": "has_archive",
                "cVar1": "format_check_result",
                "uVar2": "subprocess_result",
                "lVar3": "archived_file",
                "uVar4": "result"
            },
            "code": "\nulong process_archived_files_00105af0(long *files_to_process,long archive_file,char check_format,char has_archive)\n\n{\n  char format_check_result;\n  uint subprocess_result;\n  long archived_file;\n  ulong result;\n  \n  if (has_archive == '\\0') {\n    if (check_format != '\\0') {\n      result = do_ar_emul_append_constprop_0_cold();\n      return result;\n    }\n  }\n  else {\n    format_check_result = bfd_check_format(archive_file,2);\n    if (format_check_result != '\\0') {\n      result = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_file,archived_file)) {\n        subprocess_result = process_archived_files_00105af0(files_to_process,archived_file,check_format,1);\n        if ((char)subprocess_result != '\\0') {\n          result = (ulong)subprocess_result;\n          files_to_process = (long *)(*files_to_process + 0xf0);\n        }\n      }\n      return result;\n    }\n    if (check_format != '\\0') {\n      result = do_ar_emul_append_constprop_0_cold();\n      return result;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *files_to_process;\n  *files_to_process = archive_file;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "do_ar_emul_append.constprop.0",
                "do_ar_emul_append.constprop.0.cold",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "do_ar_emul_append.constprop.0",
                "replace_members.cold",
                "ar_emul_default_append"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105af0"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "get_file_size",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102450": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102450"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "deallocate_memory_00102ba1",
                "unaff_RBP": "memoryPointer",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] deallocateMemory_00102ba1(void)\n\n{\n  undefined returnValue [16];\n  void *memoryPointer;\n  ulong returnAddress;\n  \n  free(memoryPointer);\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = returnAddress;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "deallocate_memory_00102ba1"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102570": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "FUN_00102570"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "unaff_RBX": "files",
                "unaff_RBP": "outputFile",
                "unaff_R12": "isThinArchive",
                "unaff_R13": "fileData",
                "unaff_R14D": "duplicateFd",
                "uStack0000000000000068": "filePermissions",
                "uStack000000000000006c": "ownerUserId",
                "in_stack_00000070": "ownerGroupId",
                "in_stack_00000080": "fileSize",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "filePermissionUserRead",
                "cStack0000000000000017": "filePermissionUserWrite",
                "in_stack_00000018": "filePermissionUserExecute",
                "cStack0000000000000019": "filePermissionGroupRead",
                "cStack000000000000001a": "filePermissionGroupWrite",
                "cStack000000000000001b": "filePermissionGroupExecute",
                "cStack000000000000001c": "filePermissionOthersRead",
                "cStack000000000000001d": "filePermissionOthersWrite",
                "cStack000000000000001e": "filePermissionOthersExecute",
                "uStack000000000000001f": "isSticky",
                "output_filename": "outputFilename",
                "output_bfd": "outputBfd",
                "iVar3": "renameResult",
                "__format": "timeDataMessage",
                "uVar4": "fileType",
                "bVar1": "fatalError",
                "cVar2": "archiveHeadResult"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte fatalError;\n  char archiveHeadResult;\n  int renameResult;\n  char *timeDataMessage;\n  uint fileType;\n  char **files;\n  FILE *outputFile;\n  long isThinArchive;\n  void *fileData;\n  int duplicateFd;\n  undefined fileTypeChar;\n  char filePermissionUserRead;\n  char filePermissionUserWrite;\n  char filePermissionUserExecute;\n  char filePermissionGroupRead;\n  char filePermissionGroupWrite;\n  char filePermissionGroupExecute;\n  char filePermissionOthersRead;\n  char filePermissionOthersWrite;\n  char filePermissionOthersExecute;\n  undefined isSticky;\n  uint filePermissions;\n  uint ownerUserId;\n  uint ownerGroupId;\n  undefined8 fileSize;\n  \n  do {\n    fatalError = bfd_fatal();\n    *(uint *)((long)files + 0x44) = *(uint *)((long)files + 0x44) | 0x100000;\n    if ((make_thin_archive != '\\0') || ((*(byte *)(isThinArchive + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)files + 0x49) = fatalError | 0x10;\n    }\n    archiveHeadResult = bfd_set_archive_head();\n  } while (archiveHeadResult == '\\0');\n  dup(duplicateFd);\n  archiveHeadResult = bfd_close();\n  if (archiveHeadResult != '\\0') {\n    outputBfd = 0;\n    outputFilename = 0;\n    bfd_close();\n    renameResult = smart_rename_constprop_0();\n    if (renameResult == 0) {\n      free(fileData);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  bfd_fatal();\n  timeDataMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,timeDataMessage);\n  fileType = filePermissions & 0xf000;\n  if (fileType == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (fileType == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (fileType == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (fileType != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  filePermissionUserRead = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  filePermissionUserWrite = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  filePermissionUserExecute = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  filePermissionGroupRead = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  filePermissionGroupWrite = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  filePermissionGroupExecute = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  filePermissionOthersRead = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  filePermissionOthersWrite = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  filePermissionOthersExecute = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (filePermissionUserExecute == 'x') {\n      filePermissionUserExecute = 's';\n    }\n    else {\n      filePermissionUserExecute = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (filePermissionGroupExecute == 'x') {\n      filePermissionGroupExecute = 's';\n    }\n    else {\n      filePermissionGroupExecute = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (filePermissionOthersExecute == 'x') {\n      filePermissionOthersExecute = 't';\n    }\n    else {\n      filePermissionOthersExecute = 'T';\n    }\n  }\n  isSticky = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)ownerUserId,\n          (ulong)ownerGroupId,fileSize,&stack0x00000020,(ulong)filePermissions)\n  ;\n  fputs(*files,outputFile);\n  if ((char)isThinArchive != '\\0') {\n    if ((*(byte *)((long)files + 0x49) & 0x10) == 0) {\n      if (files[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (files[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dup",
                "bfd_fatal",
                "free",
                "bfd_close",
                "smart_rename.constprop.0",
                "bfd_set_archive_head",
                "xexit",
                "write_archive.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "prompt",
                "main",
                "do_ar_emul_append.constprop.0.cold",
                "ar_emul_default_replace",
                "yyerror.constprop.0",
                "print_contents",
                "yyparse.isra.0",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "stderr"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(stderr,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0",
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "main",
                "normalize",
                "replace_members.cold",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_valid_archive_from_binary_00102c25",
                "iVar1": "comparisonResult",
                "iVar2": "errorCode",
                "piVar3": "errnoLocation",
                "pcVar4": "errorString",
                "uVar5": "errorMessage",
                "pplVar6": "archivePointer",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "unaff_RBX": "filePointer",
                "plVar8": "matchPointer",
                "puVar9": "paramPointer",
                "uVar10": "bytesProcessed",
                "sVar11": "bytesToRead",
                "param_7": "paramArray",
                "param_11": "filePermission",
                "param_12": "fileSize"
            },
            "code": "\nlong * extractValidArchiveFromBinary_00102c25(void)\n\n{\n  int comparisonResult;\n  int errorCode;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  long **archivePointer;\n  void *buffer;\n  size_t bytesRead;\n  long loopCounter;\n  long **filePointer;\n  long *matchPointer;\n  undefined4 *paramPointer;\n  ulong bytesProcessed;\n  size_t bytesToRead;\n  undefined4 *paramArray;\n  __mode_t filePermission;\n  ulong fileSize;\n  \n  paramPointer = paramArray;\n  for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *paramPointer = 0;\n    paramPointer = paramPointer + 1;\n  }\n  archivePointer = (long **)filePointer[0x1d];\n  if ((long **)filePointer[0x1d] == (long **)0x0) {\n    archivePointer = filePointer;\n  }\n  errorCode = (*(code *)archivePointer[1][0x3d])();\n  if (errorCode != 0) {\n    matchPointer = *filePointer;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = fatal(errorMessage,matchPointer);\n    errorMessage = posname;\n    if (errorCode == 3) {\n      for (; *matchPointer != 0; matchPointer = (long *)(*matchPointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*matchPointer != (undefined8 *)0x0; matchPointer = (long *)(*matchPointer + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*matchPointer,errorMessage);\n        if (comparisonResult == 0) {\n          if (errorCode != 2) {\n            return matchPointer;\n          }\n          return (long *)(*matchPointer + 0xf0);\n        }\n      }\n    }\n    return matchPointer;\n  }\n  bfd_seek();\n  output_file = (FILE *)0x0;\n  if (fileSize == 0) {\nLAB_00102ca2:\n    output_file = (FILE *)open_output_file_isra_0(*filePointer);\n  }\n  else {\n    bytesProcessed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = fileSize - bytesProcessed;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToRead);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        filePointer = (long **)*filePointer[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(errorMessage,filePointer);\n        goto LAB_00102ca2;\n      }\n      if (output_file == (FILE *)0x0) {\n        output_file = (FILE *)open_output_file_isra_0(*filePointer);\n      }\n      bytesToRead = fwrite(buffer,1,bytesRead,output_file);\n      if (bytesToRead != bytesRead) {\n        errnoLocation = __errno_location();\n        errorString = strerror(*errnoLocation);\n        fatal(\"%s: %s\",output_filename,errorString);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + bytesRead;\n    } while (bytesProcessed < fileSize);\n    free(buffer);\n  }\n  fclose(output_file);\n  errorString = output_filename;\n  output_file = (FILE *)0x0;\n  chmod(output_filename,filePermission);\n  if (preserve_dates != 0) {\n    set_times(errorString,paramArray);\n  }\n  output_filename = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "bfd_bread",
                "chmod",
                "open_output_file.isra.0",
                "free",
                "fclose",
                "fwrite",
                "set_times",
                "strerror",
                "fatal",
                "dcgettext",
                "bfd_seek",
                "__errno_location",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "extract_file"
            ],
            "imported": false,
            "current_name": "extract_valid_archive_from_binary_00102c25"
        },
        "FUN_0010e188": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e188",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010e188"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "open_inarch",
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "process_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "stringLength",
                "puVar3": "processedString",
                "uVar4": "maxSize",
                "unaff_RBX": "sourcePtr",
                "unaff_RBP": "basePtr",
                "puVar5": "destinationPtr",
                "bVar6": "flag",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress",
                "xmalloc": "allocateMemory"
            },
            "code": "\nundefined  [16] processString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t stringLength;\n  undefined *processedString;\n  ulong maxSize;\n  undefined *sourcePtr;\n  long basePtr;\n  undefined *destinationPtr;\n  byte flag;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  flag = 0;\n  stringLength = strlen(inputString);\n  maxSize = (ulong)*(byte *)(*(long *)(basePtr + 8) + 0x1e);\n  processedString = sourcePtr;\n  if (maxSize < stringLength) {\n    processedString = (undefined *)allocateMemory(maxSize + 1);\n    lVar1 = *(long *)(basePtr + 8);\n    destinationPtr = processedString;\n    for (maxSize = (ulong)*(byte *)(lVar1 + 0x1e); maxSize != 0; maxSize = maxSize - 1) {\n      *destinationPtr = *sourcePtr;\n      sourcePtr = sourcePtr + (ulong)flag * -2 + 1;\n      destinationPtr = destinationPtr + (ulong)flag * -2 + 1;\n    }\n    processedString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = processedString;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "normalize"
            ],
            "imported": false,
            "current_name": "process_string_00102bb0"
        },
        "FUN_0010e060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010e060"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "open_inarch",
                "main",
                "ar_open",
                "write_archive",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "map_over_members",
                "map_over_list",
                "main",
                "get_pos_bfd.cold",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102460": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "main",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102460"
        },
        "FUN_00102580": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102580"
        },
        "FUN_0010e180": {
            "renaming": {},
            "code": "\n\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e180",
            "calling": [
                "calloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e180"
        }
    },
    "used_tokens": 89397,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_00107920",
            "FUN_001033d6",
            "FUN_00102000",
            "FUN_00105870",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107730",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_0010300e",
            "FUN_00107740",
            "FUN_001028ed",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00105cc0",
            "FUN_00102f08",
            "FUN_0010285f",
            "FUN_0010394a",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_00103172",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00105d60",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00107c10",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107c20",
            "FUN_00102e57",
            "FUN_00102ba1",
            "FUN_00102d2f",
            "FUN_001033b0",
            "FUN_00102c25",
            "FUN_00102bb0"
        ],
        [
            "FUN_00102e6f",
            "FUN_00105570"
        ],
        [
            "FUN_00105af0"
        ]
    ],
    "locked_functions": []
}