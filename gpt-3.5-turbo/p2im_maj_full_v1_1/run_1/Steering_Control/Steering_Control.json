{
    "functions": {
        "FUN_000800f4": {
            "additional_data": {
                "DAT_200708a0": {
                    "1": "flag_ptr",
                    "12": "flag",
                    "2": "flag_variable"
                },
                "FUN_000800f4": {
                    "1": "initialize_data",
                    "2": "set_flag_if_not_set",
                    "22": "initialize_flag"
                },
                "param_1": {
                    "1": "input_data",
                    "12": "input_value",
                    "2": "input_param"
                }
            },
            "called": [],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_000800f4(undefined4 input_value)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_000800f4",
            "entrypoint": "0x000800f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080118": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080118",
            "entrypoint": "0x00080118",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080164": {
            "additional_data": {
                "FUN_00080164": {
                    "1": "interpolate",
                    "10": "interpolate_data",
                    "11": "linear_interpolation",
                    "6": "interpolate_values"
                },
                "param_1": {
                    "1": "unknown_param_1",
                    "2": "unused_param_1",
                    "8": "param1"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "unused_param",
                    "8": "param2"
                },
                "param_3": {
                    "1": "input_param_1",
                    "2": "interpolation_param_1",
                    "3": "start_value",
                    "7": "param3"
                },
                "param_4": {
                    "1": "interpolation_rate",
                    "2": "interpolation_param2",
                    "3": "end_value",
                    "7": "param4"
                }
            },
            "called": [
                "FUN_000806f8"
            ],
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "code": "\nvoid linear_interpolation_00080164(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  linear_interpolation_00080164_000806f8(&DAT_200708e8,0x5a);\n  linear_interpolation_00080164_000806f8(&DAT_200708d4,0x5a,param3,param4);\n  return;\n}\n\n",
            "current_name": "linear_interpolation_00080164",
            "entrypoint": "0x00080164",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080164": "linear_interpolation_00080164",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000801e0": {
            "additional_data": {
                "DAT_200708bc": {
                    "1": "interrupt_data",
                    "2": "interrupt_flag"
                },
                "DAT_200708d4": {
                    "1": "data_1",
                    "2": "parameter_data_1"
                },
                "DAT_200708e8": {
                    "1": "data_2",
                    "2": "parameter_data_2"
                },
                "DAT_20070be8": {
                    "1": "config_data",
                    "3": "configuration_data"
                },
                "FUNC_00080f08": {
                    "1": "execute_operation",
                    "2": "perform_function",
                    "3": "perform_operation",
                    "7": "execute_function"
                },
                "FUN_000801e0": {
                    "1": "configure_and_update_parameters",
                    "12": "initialize_configuration",
                    "2": "configure_and_update",
                    "7": "initialize_device"
                },
                "linear_interpolation_00080164": {
                    "13": "perform_linear_interpolation",
                    "3": "perform_interpolation"
                },
                "param_1": {
                    "1": "unknown_param",
                    "12": "config_param_1",
                    "2": "config_param",
                    "7": "config_param1"
                },
                "param_2": {
                    "1": "param_2",
                    "12": "config_param_2",
                    "2": "arg2",
                    "7": "config_param2"
                },
                "param_3": {
                    "1": "update_param_1",
                    "11": "config_param_3",
                    "2": "parameter_1",
                    "7": "config_param3"
                },
                "param_4": {
                    "1": "config2",
                    "11": "config_param_4",
                    "2": "parameter_2",
                    "7": "config_param4"
                },
                "set_configuration_000813dc": {
                    "13": "set_configuration",
                    "2": "set_device_configuration"
                },
                "software_interrupt": {
                    "10": "trigger_interrupt",
                    "2": "trigger_software_interrupt"
                },
                "update_parameter_000806a0": {
                    "1": "update_parameter_with_pointer",
                    "2": "update_other_parameter",
                    "3": "update_parameter_2"
                },
                "update_parameter_00080f0c": {
                    "17": "update_parameter"
                }
            },
            "called": [
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nundefined8 initialize_configuration_000801e0(undefined4 config_param_1,undefined4 config_param_2,undefined4 config_param_3,undefined4 config_param_4)\n\n{\n  set_configuration(&DAT_20070be8,0xe100,config_param_3,config_param_4,config_param_4);\n  update_parameter(0xd,1);\n  update_parameter(6,1);\n  update_parameter(0x39,0);\n  update_parameter(4,0);\n  update_parameter(3,0);\n  update_parameter(2,0);\n  update_another_parameter(&DAT_200708d4,5);\n  update_another_parameter(&DAT_200708e8,6);\n  perform_linear_interpolation();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    trigger_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_configuration_000801e0",
            "entrypoint": "0x000801e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000801e0": "initialize_configuration_000801e0",
                "linear_interpolation_00080164": "perform_linear_interpolation",
                "param_1": "config_param_1",
                "param_2": "config_param_2",
                "param_3": "config_param_3",
                "param_4": "config_param_4",
                "set_configuration_000813dc": "set_configuration",
                "software_interrupt": "trigger_interrupt",
                "update_parameter_000806a0": "update_another_parameter",
                "update_parameter_00080f0c": "update_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080250": {
            "additional_data": {
                "DAT_00084b13": {
                    "1": "result",
                    "3": "data"
                },
                "DAT_200708c0": {
                    "8": "elapsed_time"
                },
                "DAT_200708c4": {
                    "1": "toggle",
                    "5": "flag"
                },
                "DAT_200708c8": {
                    "1": "motor_variable",
                    "2": "parameter2"
                },
                "DAT_200708d4": {
                    "1": "relocation_entry2"
                },
                "DAT_200708d8": {
                    "1": "variable2",
                    "2": "value1"
                },
                "DAT_200708dc": {
                    "1": "motor_steer",
                    "2": "parameter1"
                },
                "DAT_200708e8": {
                    "1": "value2",
                    "2": "relocation_entry1"
                },
                "DAT_200708eb": {
                    "1": "is_manual_control_mode",
                    "2": "control_mode_flag",
                    "3": "control_mode"
                },
                "DAT_200708ec": {
                    "1": "value2"
                },
                "DAT_20070be8": {
                    "3": "buffer"
                },
                "FUNC_00080f08": {
                    "1": "wait",
                    "2": "update_control",
                    "3": "perform_action",
                    "4": "initialize_control",
                    "9": "set_control_mode"
                },
                "FUN_00080250": {
                    "1": "control_function",
                    "13": "control_system",
                    "2": "control_mode_function",
                    "5": "control_mode",
                    "6": "control_mode_switch"
                },
                "LAB_00080346": {
                    "1": "label1"
                },
                "LAB_0008039c": {
                    "1": "motor_control"
                },
                "LAB_000803b2": {
                    "1": "label3"
                },
                "auStack_1c": {
                    "1": "message_buffer",
                    "3": "buffer"
                },
                "calculateDifference": {
                    "1": "difference"
                },
                "calculateElapsedTime": {
                    "1": "get_elapsed_time"
                },
                "calculateLinearInterpolation": {
                    "1": "linear_interpolation"
                },
                "calculateSum": {
                    "1": "sum"
                },
                "calculate_and_allocate_memory_00081214": {
                    "1": "process_and_allocate_memory"
                },
                "calculate_difference_00081248": {
                    "29": "calculate_difference"
                },
                "calculate_elapsed_time_00081624": {
                    "1": "get_elapsed_time",
                    "28": "calculate_elapsed_time"
                },
                "calculate_linear_interpolation_0008145c": {
                    "1": "interpolate_linear",
                    "24": "calculate_linear_interpolation",
                    "3": "linear_interpolation"
                },
                "calculate_sum_000810e8": {
                    "1": "sum",
                    "28": "calculate_sum"
                },
                "calculate_sum_0008117a": {
                    "1": "sum",
                    "27": "calculate_sum"
                },
                "checkAndUpdateParameters": {
                    "1": "check_and_update"
                },
                "check_and_update_parameters_00081560": {
                    "29": "check_and_update_parameters"
                },
                "compareAndReturnResult": {
                    "1": "compare_and_return"
                },
                "compare_and_return_result_000815b8": {
                    "1": "check_result",
                    "28": "compare_and_return_result"
                },
                "convertToBase": {
                    "1": "convert"
                },
                "error": {
                    "1": "error_msg"
                },
                "extractByteFromBuffer": {
                    "1": "extract_byte"
                },
                "extract_byte_from_buffer_00081276": {
                    "22": "extract_byte_from_buffer",
                    "7": "extract_byte"
                },
                "iVar2": {
                    "1": "result",
                    "3": "difference"
                },
                "interpolateData": {
                    "1": "interpolate"
                },
                "linear_interpolation_00080164": {
                    "1": "linear_interpolation1",
                    "14": "perform_linear_interpolation",
                    "3": "linear_interpolation",
                    "4": "interpolate",
                    "5": "perform_interpolation"
                },
                "linear_interpolation_000806f8": {
                    "1": "linear_interpolation2",
                    "13": "perform_linear_interpolation",
                    "3": "linear_interpolation",
                    "4": "interpolate",
                    "5": "perform_interpolation"
                },
                "linear_interpolation_000812a4": {
                    "1": "interpolate"
                },
                "linear_interpolation_00081350": {
                    "1": "interpolate"
                },
                "linear_interpolation_000813a8": {
                    "1": "interpolate"
                },
                "linear_interpolation_000813fc": {
                    "1": "interpolate"
                },
                "parseInt": {
                    "1": "parse"
                },
                "parse_integer_000815de": {
                    "2": "parse_int",
                    "27": "parse_integer"
                },
                "processAndAllocateMemory": {
                    "1": "process_and_allocate"
                },
                "processData": {
                    "1": "process"
                },
                "process_and_allocate_memory_00081214": {
                    "1": "process_and_alloc_memory",
                    "26": "process_and_allocate_memory"
                },
                "process_data_000810c4": {
                    "29": "process_data"
                },
                "puVar3": {
                    "1": "current_value"
                },
                "setControlMode": {
                    "1": "set_mode"
                },
                "steer": {
                    "1": "steer_value"
                },
                "thunk_convert_to_base_0008113a": {
                    "1": "convert_number_base",
                    "28": "convert_to_base"
                },
                "uVar1": {
                    "2": "elapsed_time"
                },
                "updateParameter": {
                    "1": "update_param"
                },
                "updateRelocationEntry": {
                    "1": "update_relocation"
                },
                "update_parameter_00081014": {
                    "29": "update_parameter"
                },
                "update_relocation_entry_00081472": {
                    "29": "update_relocation_entry"
                }
            },
            "called": [
                "FUN_00081560",
                "FUN_000815b8",
                "FUN_000815de",
                "FUN_00080164",
                "FUN_000806f8",
                "FUN_00081624",
                "FUN_00080f08",
                "FUN_00081248",
                "thunk_FUN_0008113a",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_00081214",
                "FUN_00081276",
                "FUN_0008145c",
                "FUN_00081014",
                "FUN_0008117a",
                "FUN_00081472"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid control_system_00080250(void)\n\n{\n  undefined4 elapsed_time;\n  int difference;\n  undefined *pointer_to_value;\n  undefined buffer [12];\n  \n  DAT_200708c0 = calculate_elapsed_time(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  update_parameter(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        perform_linear_interpolation();\n        calculate_sum(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      elapsed_time = calculate_elapsed_time(3,1,20000);\n      DAT_200708d8 = calculate_linear_interpolation(0,1000,2000,0x28,0x96);\n      DAT_200708ec = calculate_linear_interpolation(elapsed_time,1000,2000,0x28,0x96);\n      while (difference = calculate_difference(&DAT_20070be8), 0 < difference) {\n        extract_byte_from_buffer(&DAT_20070be8);\n        convert_to_base(&DAT_20070be8,DAT_200708d8,10);\n        process_data(&DAT_20070be8,&DAT_00084b13);\n        calculate_sum(&DAT_20070be8,DAT_200708ec,10);\n      }\n      perform_linear_interpolation(&DAT_200708e8,DAT_200708ec);\n      perform_linear_interpolation(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        perform_linear_interpolation();\n        calculate_sum(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nautonomous_control:\n      difference = calculate_difference(&DAT_20070be8);\n      if (0 < difference) {\n        process_and_allocate_memory(buffer,&DAT_20070be8,0x2c);\n        check_and_update_parameters(&DAT_200708dc,buffer);\n        update_relocation_entry(buffer);\n        process_and_allocate_memory(buffer,&DAT_20070be8,10);\n        check_and_update_parameters(&DAT_200708c8,buffer);\n        update_relocation_entry(buffer);\n        extract_byte_from_buffer(&DAT_20070be8);\n        difference = compare_and_return_result(&DAT_200708dc,\"steer_value\");\n        if (difference == 0) goto motor_control;\n        elapsed_time = parse_integer(&DAT_200708c8);\n        pointer_to_value = &DAT_200708d4;\n        goto label3;\n      }\n    }\n  }\n  else {\n    perform_linear_interpolation();\n    calculate_sum(&DAT_20070be8,\"error_msg\");\n  }\n  return;\nmotor_control:\n  difference = compare_and_return_result(&DAT_200708dc,\"motor\");\n  if (difference != 0) {\n    elapsed_time = parse_integer(&DAT_200708c8);\n    pointer_to_value = &DAT_200708e8;\nlabel3:\n    perform_linear_interpolation(pointer_to_value,elapsed_time);\n  }\n  goto autonomous_control;\n}\n\n",
            "current_name": "control_system_00080250",
            "entrypoint": "0x00080250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080250": "control_system_00080250",
                "LAB_00080346": "autonomous_control",
                "LAB_0008039c": "motor_control",
                "LAB_000803b2": "label3",
                "auStack_1c": "buffer",
                "calculate_difference_00081248": "calculate_difference",
                "calculate_elapsed_time_00081624": "calculate_elapsed_time",
                "calculate_linear_interpolation_0008145c": "calculate_linear_interpolation",
                "calculate_sum_000810e8": "calculate_sum",
                "calculate_sum_0008117a": "calculate_sum",
                "check_and_update_parameters_00081560": "check_and_update_parameters",
                "compare_and_return_result_000815b8": "compare_and_return_result",
                "error": "error_msg",
                "extract_byte_from_buffer_00081276": "extract_byte_from_buffer",
                "iVar2": "difference",
                "linear_interpolation_00080164": "perform_linear_interpolation",
                "linear_interpolation_000806f8": "perform_linear_interpolation",
                "parse_integer_000815de": "parse_integer",
                "process_and_allocate_memory_00081214": "process_and_allocate_memory",
                "process_data_000810c4": "process_data",
                "puVar3": "pointer_to_value",
                "steer": "steer_value",
                "thunk_convert_to_base_0008113a": "convert_to_base",
                "uVar1": "elapsed_time",
                "update_parameter_00081014": "update_parameter",
                "update_relocation_entry_00081472": "update_relocation_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000803fc": {
            "additional_data": {
                "FUN_000803fc": {
                    "1": "initialize_channel",
                    "15": "initialize_tc_channel",
                    "5": "start_tc_channel",
                    "6": "configure_and_start_tc_channel"
                },
                "check_and_set_bit_00080aa8": {
                    "1": "check_and_set_flag",
                    "2": "set_bit_in_register",
                    "3": "check_and_set_bit"
                },
                "configure_tc_channel_00080b2c": {
                    "1": "configure_channel",
                    "5": "configure_tc_channel"
                },
                "execute_assertion_000816f8": {
                    "8": "execute_assertion"
                },
                "in_lr": {
                    "1": "result_2",
                    "2": "unused_variable",
                    "3": "in_lr",
                    "7": "link_register"
                },
                "param_1": {
                    "1": "channel_base_address",
                    "17": "channel_index",
                    "2": "channel",
                    "7": "channel_number"
                },
                "param_2": {
                    "1": "register_value",
                    "15": "param_value",
                    "2": "value1",
                    "4": "param2"
                },
                "param_3": {
                    "1": "config_param",
                    "2": "bit_mask",
                    "3": "bit_flag",
                    "4": "bit_value",
                    "5": "bit_position",
                    "6": "bit_index"
                },
                "param_4": {
                    "1": "register_index",
                    "14": "bit_position",
                    "4": "memory_index",
                    "7": "bit_index"
                },
                "set_memory_value_00080b90": {
                    "7": "set_memory_value"
                },
                "uVar1": {
                    "1": "concatenated_value",
                    "12": "combined_params",
                    "2": "result",
                    "5": "combined_values"
                },
                "unaff_r4": {
                    "1": "temporary_value",
                    "2": "unused_variable",
                    "3": "unaff_r4"
                }
            },
            "called": [
                "FUN_00080aa8",
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_000816f8"
            ],
            "calling": [
                "FUN_000806a0"
            ],
            "code": "\nvoid initialize_tc_channel_000803fc(int channel_index,uint param_value,undefined4 bit_index,uint bit_position)\n\n{\n  undefined4 unaff_r4;\n  undefined4 link_register;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(param_value,channel_index);\n  check_and_set_bit(bit_index);\n  configure_tc_channel(channel_index,param_value,0xc002);\n  set_memory_value(channel_index,param_value,0xa41);\n  *(int *)((bit_position >> 5) * 4 + -0x1fff1f00) = 1 << (bit_position & 0x1f);\n  *(undefined4 *)(channel_index + param_value * 0x40 + 0x24) = 4;\n  if (2 < param_value) {\n    combined_params = execute_assertion(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         unaff_r4,link_register);\n  }\n  *(undefined4 *)((int)combined_params + (int)((ulonglong)combined_params >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "current_name": "initialize_tc_channel_000803fc",
            "entrypoint": "0x000803fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000803fc": "initialize_tc_channel_000803fc",
                "check_and_set_bit_00080aa8": "check_and_set_bit",
                "configure_tc_channel_00080b2c": "configure_tc_channel",
                "execute_assertion_000816f8": "execute_assertion",
                "in_lr": "link_register",
                "param_1": "channel_index",
                "param_2": "param_value",
                "param_3": "bit_index",
                "param_4": "bit_position",
                "set_memory_value_00080b90": "set_memory_value",
                "uVar1": "combined_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008044c": {
            "additional_data": {
                " Elf32_Rel_ARRAY_20070000": {
                    "1": "constant_array"
                },
                "&DAT_200708f0": {
                    "1": "max_length"
                },
                "&DAT_200708f1": {
                    "1": "data_array1"
                },
                "&DAT_200708f8": {
                    "1": "data_array2"
                },
                "(char)(&DAT_200708f1)[param_1]": {
                    "1": "flag"
                },
                "(char)(&DAT_200708f1)[param_1] + iVar2": {
                    "1": "index_offset"
                },
                "(char)(&DAT_200708f1)[param_1] < '\f'": {
                    "1": "check_index"
                },
                "(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[param_1] + iVar2) * 8)": {
                    "1": "offset_ptr"
                },
                "(int *)((char *)&DAT_200708f8 + ((char)(&DAT_200708f1)[param_1] + iVar2) * 8)": {
                    "1": "parameter_array"
                },
                "(int *)(param_2 + param_3 + 0x10)": {
                    "1": "value_ptr"
                },
                "(int *)(param_2 + param_3 + 0x14)": {
                    "1": "result_ptr"
                },
                "(int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[param_1] + iVar2) * 8] << 0x19)": {
                    "1": "condition"
                },
                "(uint)DAT_200708f0": {
                    "1": "max_value_converted"
                },
                "<FUN_0008044c>": {
                    "1": "update_parameters"
                },
                "<iVar2>": {
                    "1": "offset_index"
                },
                "<param_1>": {
                    "1": "index"
                },
                "<param_2>": {
                    "1": "data"
                },
                "<param_3>": {
                    "1": "offset"
                },
                "<uVar1>": {
                    "1": "limit"
                },
                "DAT_200708fc": {
                    "1": "array_offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "2": "rel_array"
                },
                "FUN_0008044c": {
                    "1": "update_parameters",
                    "2": "update_flags_and_values",
                    "4": "update_parameter",
                    "6": "update_data"
                },
                "iVar2": {
                    "1": "resource_offset_calculated",
                    "2": "array_offset",
                    "3": "offset_multiplier",
                    "4": "index_offset",
                    "9": "temp_var"
                },
                "param_1": {
                    "1": "resource_index",
                    "25": "index"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "array",
                    "4": "data_ptr",
                    "6": "buffer",
                    "7": "base_address"
                },
                "param_3": {
                    "1": "resource_offset",
                    "26": "offset"
                },
                "uVar1": {
                    "1": "data_limit",
                    "10": "limit",
                    "4": "upper_limit"
                },
                "update_parameter_00081014": {
                    "3": "update_parameter_helper",
                    "6": "update_parameter"
                }
            },
            "called": [
                "FUN_00081014"
            ],
            "calling": [],
            "code": "\nvoid update_data_0008044c(int index,int base_address,int offset)\n\n{\n  uint max_value;\n  int temp_var;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    temp_var = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + temp_var < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp_var) * 8] << 0x19) < 0\n       )) {\n      update_parameter((&DAT_200708f8)[(temp_var + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(base_address + offset) = *(uint *)(base_address + offset) | 4;\n  }\n  max_value = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  temp_var = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + temp_var < (int)max_value) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(base_address + offset + 0x14) =\n         *(int *)(base_address + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + temp_var) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp_var) * 8] << 0x19\n                  )) {\n      return;\n    }\n    update_parameter((&DAT_200708f8)[(temp_var + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  base_address = base_address + offset;\n  max_value = (rel_array[6].r_offset / 1000000) * 20000 >> 5;\n  if (max_value <= *(int *)(base_address + 0x10) + 4U) {\n    max_value = *(int *)(base_address + 0x10) + 4;\n  }\n  *(uint *)(base_address + 0x14) = max_value;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "current_name": "update_data_0008044c",
            "entrypoint": "0x0008044c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_0008044c": "update_data_0008044c",
                "iVar2": "temp_var",
                "param_1": "index",
                "param_2": "base_address",
                "param_3": "offset",
                "uVar1": "max_value",
                "update_parameter_00081014": "update_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000805a8": {
            "additional_data": {
                "*(uint *)(&DAT_200708fc + uVar2 * 8)": {
                    "1": "offset_value"
                },
                "*param_1": {
                    "1": "output_param"
                },
                "DAT_200708f0": {
                    "1": "counter"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_relocation_array",
                    "2": "elf_rel_array",
                    "3": "relocation_array"
                },
                "FUN_000805a8": {
                    "1": "extracted_value_and_store",
                    "2": "extract_relocation_offset",
                    "3": "extract_offset"
                },
                "cVar1": {
                    "1": "new_data",
                    "2": "updated_value",
                    "3": "next_byte",
                    "7": "next_value"
                },
                "param_1": {
                    "1": "byte_array",
                    "2": "parameter",
                    "4": "output_byte",
                    "8": "output_buffer",
                    "9": "output"
                },
                "r_offset": {
                    "1": "relocation_offset"
                },
                "uVar2": {
                    "1": "counter_limit",
                    "2": "current_offset",
                    "5": "current_value"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid extract_offset_000805a8(byte *output)\n\n{\n  char next_value;\n  uint counter;\n  \n  counter = (uint)DAT_200708f0;\n  if (counter < 0x3c) {\n    next_value = DAT_200708f0 + 1;\n    *output = DAT_200708f0;\n    DAT_200708f0 = next_value;\n    *(uint *)(&DAT_200708fc + counter * 8) =\n         (relocation_table[6].relocation_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output = 0xff;\n  return;\n}\n\n",
            "current_name": "extract_offset_000805a8",
            "entrypoint": "0x000805a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_000805a8": "extract_offset_000805a8",
                "cVar1": "next_value",
                "param_1": "output",
                "r_offset": "relocation_offset",
                "uVar2": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000806a0": {
            "additional_data": {
                "*param_1": {
                    "1": "input_param"
                },
                "FUN_000806a0": {
                    "1": "update_param_and_initialize_tc_channel",
                    "2": "update_channel_settings",
                    "4": "update_and_initialize_channel",
                    "9": "update_parameter"
                },
                "bVar1": {
                    "1": "result",
                    "2": "channel_byte",
                    "4": "byte_value",
                    "5": "updated_value"
                },
                "iVar5": {
                    "1": "count",
                    "3": "loop_index",
                    "7": "iteration",
                    "8": "loop_counter",
                    "9": "counter"
                },
                "param_1": {
                    "1": "channel_config",
                    "2": "byte_array",
                    "3": "buffer",
                    "5": "input_array",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "channel_type",
                    "2": "channel_index",
                    "6": "param",
                    "8": "value",
                    "9": "param_value"
                },
                "uVar2": {
                    "1": "channel_base_address",
                    "18": "base_address",
                    "2": "tc_base_address"
                },
                "uVar3": {
                    "1": "division_value",
                    "10": "channel_index",
                    "12": "index"
                },
                "uVar4": {
                    "1": "channel_a",
                    "2": "register_value",
                    "3": "channel",
                    "7": "channel_value"
                },
                "uVar6": {
                    "1": "channel",
                    "2": "array_value",
                    "4": "data_value",
                    "5": "byte_value"
                }
            },
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "calling": [
                "FUN_000801e0"
            ],
            "code": "\nbyte update_parameter_000806a0(byte *input_data,undefined4 param_value)\n\n{\n  byte updated_value;\n  undefined4 base_address;\n  uint index;\n  undefined4 channel_value;\n  int counter;\n  uint byte_value;\n  \n  if (0x3b < *input_data) goto LAB_00080660;\n  update_parameter_000806a0_00080f0c(param_value,1,0x220,*input_data,0x960);\n  byte_value = (uint)*input_data;\n  updated_value = (&DAT_200708f8)[byte_value * 8];\n  input_data[2] = 0;\n  index = byte_value / 0xc;\n  (&DAT_200708f8)[byte_value * 8] = updated_value & 0xc0 | (byte)param_value & 0x3f;\n  input_data[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (index == 0) {\n    base_address = 0x40084000;\n    channel_value = 0x1e;\nLAB_0008064c:\n    initialize_tc_channel_000803fc(base_address,index,channel_value,channel_value);\n  }\n  else {\n    if (index == 1) {\n      base_address = 0x40084000;\n      channel_value = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      base_address = 0x40084000;\n      channel_value = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      base_address = 0x40080000;\n      index = 2;\n      channel_value = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      base_address = 0x40080000;\n      index = 0;\n      channel_value = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*input_data * 8] = (&DAT_200708f8)[(uint)*input_data * 8] | 0x40;\nLAB_00080660:\n  return *input_data;\n}\n\n",
            "current_name": "update_parameter_000806a0",
            "entrypoint": "0x000806a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000806a0": "update_parameter_000806a0",
                "bVar1": "updated_value",
                "iVar5": "counter",
                "param_1": "input_data",
                "param_2": "param_value",
                "uVar2": "base_address",
                "uVar3": "index",
                "uVar4": "channel_value",
                "uVar6": "byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000806f8": {
            "additional_data": {
                "&DAT_200708fc": {
                    "1": "offset_array"
                },
                "*param_1": {
                    "1": "first_element"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "DAT_20070000": {
                    "1": "elf32_rel_array"
                },
                "DAT_200708fc": {
                    "1": "result_array"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocations_array"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "constant_offset"
                },
                "FUN_000806f8": {
                    "1": "calculate_and_store_offset",
                    "2": "interpolate_value",
                    "3": "interpolate_data",
                    "7": "interpolate_values",
                    "8": "linear_interpolation"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "SBORROW4": {
                    "1": "subtract_borrow",
                    "3": "is_subtraction_overflow"
                },
                "calculate_linear_interpolation_0008145c": {
                    "1": "linear_interpolation",
                    "3": "calculate_interpolation",
                    "7": "calculate_linear_interpolation"
                },
                "param_1": {
                    "1": "byte_array",
                    "10": "input_data",
                    "2": "data_array",
                    "6": "input_array",
                    "8": "data"
                },
                "param_2": {
                    "1": "num_elements",
                    "3": "size",
                    "4": "data_length",
                    "5": "array_length",
                    "6": "input_size",
                    "7": "length"
                },
                "r_offset": {
                    "2": "offset"
                },
                "uVar1": {
                    "1": "intermediate_size",
                    "4": "clamped_size",
                    "6": "clamped_length"
                }
            },
            "called": [
                "FUN_0008145c"
            ],
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "code": "\nvoid linear_interpolation_000806f8(byte *input_data,uint length)\n\n{\n  uint clamped_length;\n  \n  if ((int)length < 0x220) {\n    clamped_length = length;\n    if (0xb3 < (int)length) {\n      clamped_length = 0xb4;\n    }\n    length = calculate_linear_interpolation_000806f8(clamped_length & ~((int)clamped_length >> 0x1f),0,0xb4,(0x88 - (char)input_data[1]) * 4,\n                           (600 - (char)input_data[2]) * 4,length);\n  }\n  if (*input_data < 0x3c) {\n    clamped_length = (0x88 - (char)input_data[1]) * 4;\n    if (((int)(length + (0x88 - (char)input_data[1]) * -4) < 0 == is_subtraction_overflow(length,clamped_length)) &&\n       (clamped_length = (600 - (char)input_data[2]) * 4, (int)length <= (int)clamped_length)) {\n      clamped_length = length;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*input_data * 8) =\n         (constant_offset / 1000000) * (clamped_length - 2) >> 5;\n  }\n  return;\n}\n\n",
            "current_name": "linear_interpolation_000806f8",
            "entrypoint": "0x000806f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "constant_offset",
                "FUN_000806f8": "linear_interpolation_000806f8",
                "SBORROW4": "is_subtraction_overflow",
                "calculate_linear_interpolation_0008145c": "calculate_linear_interpolation",
                "param_1": "input_data",
                "param_2": "length",
                "r_offset": "offset",
                "uVar1": "clamped_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008073a": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008073a",
            "entrypoint": "0x0008073a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080748": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080748",
            "entrypoint": "0x00080748",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008074a": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008074a",
            "entrypoint": "0x0008074a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008074c": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008074c",
            "entrypoint": "0x0008074c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080774": {
            "additional_data": {
                "DAT_e000ed23": {
                    "1": "data_flag",
                    "2": "initial_value",
                    "4": "value",
                    "8": "constant_value"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_relocation",
                    "2": "elf_relocation_array",
                    "4": "rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "elf_relocation_offset"
                },
                "FUN_00080774": {
                    "1": "initialize_and_set_values",
                    "13": "initialize_and_configure",
                    "2": "initialize_memory_and_set_parameters",
                    "6": "initialize_memory"
                },
                "_DAT_400c0000": {
                    "1": "configuration_value1"
                },
                "_DAT_400e0e00": {
                    "1": "parameter1",
                    "2": "parameter_1"
                },
                "_DAT_400e0ea0": {
                    "1": "variable3",
                    "2": "memory_address_1",
                    "3": "value_1"
                },
                "_DAT_400e1000": {
                    "1": "param_3",
                    "2": "parameter_3"
                },
                "_DAT_400e10a0": {
                    "1": "variable_d",
                    "2": "variable2",
                    "3": "value_2"
                },
                "_DAT_400e12a0": {
                    "1": "flag2",
                    "2": "variable3",
                    "3": "value_3"
                },
                "_DAT_400e1400": {
                    "1": "param_2",
                    "2": "parameter_2"
                },
                "_DAT_400e14a0": {
                    "1": "register_4",
                    "2": "variable4",
                    "3": "value_4"
                },
                "_DAT_e000e00c": {
                    "1": "value8"
                },
                "_DAT_e000e010": {
                    "1": "initialized_value_2",
                    "2": "value_2"
                },
                "_DAT_e000e014": {
                    "1": "offset_divided_by_thousand",
                    "2": "rel_offset",
                    "4": "relocation_offset",
                    "5": "offset"
                },
                "_DAT_e000e018": {
                    "1": "value2",
                    "2": "value_1"
                },
                "calculate_threshold_00080c98": {
                    "23": "calculate_threshold"
                },
                "check_and_set_bit_00080aa8": {
                    "23": "check_and_set_bit"
                },
                "execute_function_set_00081778": {
                    "1": "execute_set_functions",
                    "20": "execute_function_set"
                },
                "iVar1": {
                    "1": "current_index",
                    "7": "index"
                },
                "iVar2": {
                    "1": "next_counter",
                    "8": "next_index"
                },
                "initialize_memory_00080b98": {
                    "3": "initialize_memory"
                },
                "r_offset": {
                    "1": "offset"
                },
                "set_default_value_00080d62": {
                    "1": "set_defaultvalue",
                    "17": "set_default_value",
                    "2": "set_default_values",
                    "3": "set_default"
                },
                "set_param_value_00080d6a": {
                    "20": "set_param_value",
                    "3": "set_parameter_value"
                },
                "update_configuration_00080d3e": {
                    "23": "update_configuration"
                },
                "update_flags_00080d30": {
                    "23": "update_flags"
                },
                "update_parameter_00080a30": {
                    "1": "update_parameter_3",
                    "2": "update_other_parameter",
                    "3": "update_parameter_2",
                    "6": "update_parameter2"
                },
                "update_parameter_00080a30_2": {
                    "1": "update_parameter_3"
                },
                "update_parameter_00081014": {
                    "23": "update_parameter"
                },
                "uupdate_parameter_00080a30": {
                    "1": "update_value"
                }
            },
            "called": [
                "FUN_00081778",
                "FUN_00080a30",
                "FUN_00080b98",
                "FUN_00081014",
                "FUN_00080d30",
                "FUN_00080c98",
                "FUN_00080d62",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\n\n\nvoid initialize_and_configure_00080774(void)\n\n{\n  int index;\n  int next_index;\n  \n  initialize_memory();\n  _DAT_e000e014 = elf_relocation_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_function_set();\n  index = 0;\n  do {\n    next_index = index + 1;\n    update_parameter(index,0);\n    index = next_index;\n  } while (next_index != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameter2(0x400e0e00,1,0x300,0);\n  update_parameter(0,1);\n  update_parameter2(0x400e0e00,1,0xc00,0);\n  update_parameter2(0x400e0e00,1,0x3000,0);\n  update_parameter2(0x400e1400,2,0x30,0);\n  update_parameter2(0x400e1000,1,0xc00,0);\n  update_parameter2(0x400e0e00,1,3,0);\n  update_parameter2(0x400e1000,1,0xc000,0);\n  check_and_set_bit(0x25);\n  calculate_threshold(0x400c0000,elf_relocation_offset,20000000,0xc);\n  update_configuration(0x400c0000,0,0x300000,1);\n  update_flags(0x400c0000,0,0);\n  set_param_value(0x400c0000,0xffffffff);\n  set_default_value(0x400c0000);\n  return;\n}\n\n",
            "current_name": "initialize_and_configure_00080774",
            "entrypoint": "0x00080774",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "elf_relocation_offset",
                "FUN_00080774": "initialize_and_configure_00080774",
                "calculate_threshold_00080c98": "calculate_threshold",
                "check_and_set_bit_00080aa8": "check_and_set_bit",
                "execute_function_set_00081778": "execute_function_set",
                "iVar1": "index",
                "iVar2": "next_index",
                "initialize_memory_00080b98": "initialize_memory",
                "r_offset": "offset",
                "set_default_value_00080d62": "set_default_value",
                "set_param_value_00080d6a": "set_param_value",
                "update_configuration_00080d3e": "update_configuration",
                "update_flags_00080d30": "update_flags",
                "update_parameter_00080a30": "update_parameter2",
                "update_parameter_00081014": "update_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008089c": {
            "additional_data": {
                "&DAT_20070ad8": {
                    "1": "memory_6"
                },
                "&DAT_20070b60": {
                    "1": "memory_region_4"
                },
                "&DAT_20070be8": {
                    "1": "memory_1"
                },
                "&DAT_20070c0c": {
                    "1": "memory_1"
                },
                "&DAT_20070c94": {
                    "1": "data_region_1",
                    "2": "data_1"
                },
                "&DAT_20070cbc": {
                    "1": "data_structure3",
                    "2": "data_2"
                },
                "&DAT_20070ce4": {
                    "1": "data_region_7",
                    "2": "data_3"
                },
                "&DAT_20070d0c": {
                    "1": "data_region_6"
                },
                "&DAT_20070d94": {
                    "1": "data_region_9"
                },
                "&DAT_20070e6c": {
                    "1": "memory_block_3"
                },
                "&DAT_20070ef4": {
                    "1": "memory_block_4"
                },
                "&DAT_20070f7c": {
                    "1": "memory_5"
                },
                "0x11": {
                    "1": "update_data_1"
                },
                "0x12": {
                    "1": "update_data_2"
                },
                "0x14": {
                    "1": "update_data_3"
                },
                "0x40098000": {
                    "1": "resource_size_2"
                },
                "0x4009c000": {
                    "1": "resource_size_3"
                },
                "0x400a4000": {
                    "1": "resource_size_4"
                },
                "0x400e0800": {
                    "1": "resource_size_1"
                },
                "DAT_20070ad8": {
                    "1": "memory_block6"
                },
                "DAT_20070b60": {
                    "1": "memory_block2"
                },
                "DAT_20070be8": {
                    "1": "parameter_block"
                },
                "DAT_20070c0c": {
                    "1": "memory_block1"
                },
                "DAT_20070c94": {
                    "1": "data_block1"
                },
                "DAT_20070cbc": {
                    "1": "data_block2"
                },
                "DAT_20070ce4": {
                    "1": "data_block3"
                },
                "DAT_20070d0c": {
                    "1": "memory_block7"
                },
                "DAT_20070d94": {
                    "1": "memory_block8"
                },
                "DAT_20070e6c": {
                    "1": "memory_block3"
                },
                "DAT_20070ef4": {
                    "1": "memory_block4"
                },
                "DAT_20070f7c": {
                    "1": "memory_block5"
                },
                "FUN_0008089c": {
                    "1": "initialize_data_and_memory",
                    "2": "initialize_all_data",
                    "3": "initialize_all_memory",
                    "4": "initialize_and_update_memory",
                    "5": "initialize_data_structures",
                    "6": "initialize_memory_and_data"
                },
                "initialize_and_update_data_00081438": {
                    "1": "init_and_update_data",
                    "18": "initialize_and_update_data"
                },
                "initialize_memory_000811b0": {
                    "1": "init_memory",
                    "18": "initialize_memory"
                },
                "initialize_parameters_00081348": {
                    "1": "init_params",
                    "18": "initialize_parameters"
                },
                "param_1": {
                    "1": "resource_param_1",
                    "2": "unused_param",
                    "3": "unused_param1",
                    "4": "arg1",
                    "5": "param1",
                    "9": "param_1"
                },
                "param_2": {
                    "1": "height",
                    "2": "unused_param",
                    "3": "unused_param2",
                    "4": "arg2",
                    "5": "param2",
                    "9": "param_2"
                },
                "param_3": {
                    "1": "update_interval",
                    "10": "param_3",
                    "4": "arg3",
                    "6": "param3"
                }
            },
            "called": [
                "FUN_000811b0",
                "FUN_00081438",
                "FUN_00081348"
            ],
            "calling": [],
            "code": "\nvoid initialize_memory_and_data_0008089c(undefined4 param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  initialize_memory(&DAT_20070c0c);\n  initialize_memory(&DAT_20070b60);\n  initialize_parameters(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param_3);\n  initialize_memory(&DAT_20070e6c);\n  initialize_memory(&DAT_20070ef4);\n  initialize_memory(&DAT_20070f7c);\n  initialize_memory(&DAT_20070ad8);\n  initialize_memory(&DAT_20070d0c);\n  initialize_memory(&DAT_20070d94);\n  initialize_and_update_data(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initialize_and_update_data(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initialize_and_update_data(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "current_name": "initialize_memory_and_data_0008089c",
            "entrypoint": "0x0008089c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008089c": "initialize_memory_and_data_0008089c",
                "initialize_and_update_data_00081438": "initialize_and_update_data",
                "initialize_memory_000811b0": "initialize_memory",
                "initialize_parameters_00081348": "initialize_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080970": {
            "additional_data": {
                "FUNC_0008073a": {
                    "1": "handle_error_case_a",
                    "2": "function_1",
                    "3": "execute_function1",
                    "4": "execute_function_a",
                    "6": "execute_function_1"
                },
                "FUNC_00080748": {
                    "1": "handle_error_case_b",
                    "2": "function_2",
                    "3": "execute_function2",
                    "4": "execute_function_b",
                    "6": "execute_function_2"
                },
                "FUNC_0008074a": {
                    "1": "execute_third_function",
                    "2": "function_3",
                    "3": "execute_function3",
                    "4": "execute_function_c",
                    "6": "execute_function_3"
                },
                "FUNC_0008074c": {
                    "1": "execute_operation_4",
                    "2": "function_4",
                    "3": "execute_function4",
                    "4": "execute_function_d",
                    "6": "execute_function_4"
                },
                "FUN_00080970": {
                    "1": "check_and_call_difference",
                    "15": "check_and_execute_functions",
                    "2": "process_data",
                    "4": "check_and_execute_calculations",
                    "5": "check_and_call_functions"
                },
                "calculate_difference_00081248": {
                    "28": "calculate_difference"
                },
                "iVar1": {
                    "1": "calculation_result",
                    "12": "result",
                    "2": "result_code",
                    "3": "difference"
                }
            },
            "called": [
                "FUN_0008074c",
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid check_and_execute_functions_00080970(void)\n\n{\n  int result;\n  \n  result = calculate_difference(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = calculate_difference(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = calculate_difference(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = calculate_difference(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_execute_functions_00080970",
            "entrypoint": "0x00080970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080970": "check_and_execute_functions_00080970",
                "calculate_difference_00081248": "calculate_difference",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000809be": {
            "additional_data": {
                "FUN_000809be": {
                    "1": "update_values",
                    "2": "set_param_value",
                    "3": "update_parameter_value",
                    "4": "update_data",
                    "9": "update_parameter"
                },
                "param_1": {
                    "1": "ptr_data",
                    "14": "base_address",
                    "3": "data",
                    "4": "object_address"
                },
                "param_2": {
                    "1": "case_type",
                    "13": "option",
                    "2": "mode",
                    "6": "operation_type"
                },
                "param_3": {
                    "1": "new_param",
                    "17": "new_value",
                    "2": "new_parameter",
                    "9": "value"
                },
                "switchD_000809c4_caseD_6": {
                    "1": "handle_default_case",
                    "2": "default_case"
                },
                "uVar1": {
                    "1": "masked_value",
                    "23": "updated_value",
                    "4": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30"
            ],
            "code": "\nvoid update_parameter_000809be(int base_address,undefined4 option,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto default_case;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\ndefault_case:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameter_000809be",
            "entrypoint": "0x000809be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000809be": "update_parameter_000809be",
                "param_1": "base_address",
                "param_2": "option",
                "param_3": "new_value",
                "switchD_000809c4_caseD_6": "default_case",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000809e4": {
            "additional_data": {
                "*param_1": {
                    "1": "parameter8",
                    "2": "array[0]",
                    "4": "output_array[0]"
                },
                "0x11": {
                    "1": "value_idx1"
                },
                "0x18": {
                    "1": "array_index3"
                },
                "0x19": {
                    "1": "array_index2"
                },
                "0x20": {
                    "1": "index6"
                },
                "5": {
                    "1": "common_value"
                },
                "8": {
                    "1": "index4"
                },
                "9": {
                    "1": "array_index5"
                },
                "FUN_000809e4": {
                    "1": "set_values_based_on_conditions",
                    "2": "update_data",
                    "4": "update_parameters",
                    "5": "set_values"
                },
                "bVar1": {
                    "1": "is_value_negative",
                    "16": "is_negative",
                    "2": "is_flag_set",
                    "3": "is_negative_flag_set",
                    "5": "is_negative_flag"
                },
                "dataArray[0x11]": {
                    "1": "data_array[17]"
                },
                "dataArray[0x18]": {
                    "1": "data_array[24]"
                },
                "dataArray[0x19]": {
                    "1": "data_array[25]"
                },
                "dataArray[0x20]": {
                    "1": "data_array[32]"
                },
                "dataArray[8]": {
                    "1": "data_array[8]"
                },
                "dataArray[9]": {
                    "1": "data_array[9]"
                },
                "param_1": {
                    "1": "result",
                    "3": "param_array",
                    "5": "output_array",
                    "7": "parameters"
                },
                "param_1[0x11]": {
                    "1": "params[17]",
                    "2": "first_parameter",
                    "4": "array[17]",
                    "5": "output_array[17]"
                },
                "param_1[0x18]": {
                    "1": "result[24]",
                    "4": "array[24]",
                    "5": "output_array[24]"
                },
                "param_1[0x19]": {
                    "1": "param_value3",
                    "4": "array[25]",
                    "5": "output_array[25]"
                },
                "param_1[0x20]": {
                    "1": "param_f",
                    "4": "array[32]",
                    "5": "output_array[32]"
                },
                "param_1[5]": {
                    "1": "param_g",
                    "2": "fifth_parameter",
                    "3": "array[5]",
                    "5": "output_array[5]"
                },
                "param_1[8]": {
                    "1": "third_parameter_if_flags_set",
                    "4": "array[8]",
                    "5": "output_array[8]"
                },
                "param_1[9]": {
                    "1": "third_parameter_if_flag_not_set",
                    "4": "array[9]",
                    "5": "output_array[9]"
                },
                "param_2": {
                    "1": "value_to_assign",
                    "20": "value",
                    "7": "new_value"
                },
                "param_3": {
                    "1": "conditions",
                    "25": "flags",
                    "3": "flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30"
            ],
            "code": "\nvoid set_values_000809e4(undefined4 *array,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  output_array[17] = value;\n  if (is_negative) {\n    output_array[25] = value;\n  }\n  if (!is_negative) {\n    output_array[24] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    output_array[8] = value;\n  }\n  if (!is_negative) {\n    output_array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    output_array[32] = value;\n  }\n  output_array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "current_name": "set_values_000809e4",
            "entrypoint": "0x000809e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "bVar1": "is_negative",
                "param_1": "array",
                "param_1[0x11]": "output_array[17]",
                "param_1[0x18]": "output_array[24]",
                "param_1[0x19]": "output_array[25]",
                "param_1[0x20]": "output_array[32]",
                "param_1[5]": "output_array[5]",
                "param_1[8]": "output_array[8]",
                "param_1[9]": "output_array[9]",
                "param_2": "value",
                "param_3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "additional_data": {
                "0x11": {
                    "1": "data_index1",
                    "3": "index1"
                },
                "0x14": {
                    "1": "data_index5",
                    "3": "index5"
                },
                "0x15": {
                    "1": "data_index4",
                    "3": "index4"
                },
                "0x18": {
                    "1": "data_index2",
                    "3": "index2"
                },
                "0x19": {
                    "1": "data_index3",
                    "3": "index3"
                },
                "0xc": {
                    "1": "data_index7",
                    "3": "index7"
                },
                "0xd": {
                    "1": "data_index6",
                    "3": "index6"
                },
                "FUN_00080a0a": {
                    "1": "update_data",
                    "2": "set_params",
                    "4": "set_parameters",
                    "5": "update_parameters",
                    "8": "set_param_values"
                },
                "output_array[0x11]": {
                    "1": "value_1"
                },
                "output_array[0x14]": {
                    "1": "value_5"
                },
                "output_array[0x15]": {
                    "1": "value_4"
                },
                "output_array[0x18]": {
                    "1": "value_2"
                },
                "output_array[0x19]": {
                    "1": "value_3"
                },
                "output_array[0xc]": {
                    "1": "value_7"
                },
                "output_array[0xd]": {
                    "1": "value_6"
                },
                "output_array[4]": {
                    "1": "value_8"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "output",
                    "3": "param_array",
                    "4": "params",
                    "5": "output_array",
                    "7": "parameters"
                },
                "param_2": {
                    "1": "new_parameter_value",
                    "2": "param_value",
                    "24": "value",
                    "3": "new_value"
                },
                "param_3": {
                    "1": "flag_a",
                    "10": "condition1",
                    "2": "is_zero",
                    "3": "condition_1",
                    "5": "flag1",
                    "7": "is_param3_zero"
                },
                "param_4": {
                    "1": "is_zero2",
                    "10": "condition2",
                    "2": "is_zero",
                    "3": "condition_2",
                    "5": "flag2",
                    "7": "is_param4_zero"
                },
                "param_5": {
                    "1": "is_zero3",
                    "10": "condition3",
                    "2": "is_zero",
                    "3": "condition_3",
                    "5": "flag3",
                    "7": "is_param5_zero"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "code": "\nvoid set_param_values_00080a0a(undefined4 *parameters,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  parameters[0x11] = value;\n  if (condition3 == 0) {\n    parameters[0x18] = value;\n  }\n  else {\n    parameters[0x19] = value;\n  }\n  if (condition2 == 0) {\n    parameters[0x15] = value;\n  }\n  else {\n    parameters[0x14] = value;\n  }\n  if (condition1 == 0) {\n    parameters[0xd] = value;\n  }\n  else {\n    parameters[0xc] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "current_name": "set_param_values_00080a0a",
            "entrypoint": "0x00080a0a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a0a": "set_param_values_00080a0a",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a30": {
            "additional_data": {
                "0x44": {
                    "1": "param1_result"
                },
                "0x60": {
                    "1": "param3_result"
                },
                "100": {
                    "1": "secondary_parameter_address"
                },
                "3": {
                    "1": "special_case"
                },
                "4": {
                    "1": "param_case_1"
                },
                "5": {
                    "1": "param_case_2"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00080a30": {
                    "1": "update_values",
                    "19": "update_parameter",
                    "4": "update_parameter_value"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_???": {
                    "1": "unknown_pointer"
                },
                "bVar1": {
                    "1": "is_flag_set",
                    "25": "is_negative",
                    "3": "is_negative_flag"
                },
                "param_1": {
                    "1": "input_data",
                    "12": "device",
                    "2": "base_address",
                    "3": "object"
                },
                "param_2": {
                    "1": "function_param2",
                    "2": "option",
                    "3": "type",
                    "5": "mode",
                    "6": "param_type",
                    "9": "parameter_type"
                },
                "param_3": {
                    "1": "parameter_value",
                    "12": "value",
                    "14": "new_value",
                    "3": "param_value"
                },
                "param_4": {
                    "1": "bit_flags",
                    "12": "flags"
                },
                "set_param_values_00080a0a": {
                    "20": "set_param_values",
                    "5": "set_parameter_values"
                },
                "set_values_000809e4": {
                    "1": "set_special_values",
                    "24": "set_values"
                },
                "update_parameter_000809be": {
                    "3": "update_parameter_helper",
                    "8": "update_parameter",
                    "9": "update_parameter_values"
                }
            },
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "code": "\nundefined4 update_parameter_00080a30(int device,int parameter_type,undefined4 new_value,uint flags)\n\n{\n  bool is_negative;\n  \n  switch(parameter_type) {\n  case 1:\n  case 2:\n    update_parameter_00080a30_values(device,parameter_type,new_value);\n    is_negative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = new_value;\n    if (is_negative) {\n      *(undefined4 *)(device + 100) = new_value;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(device + 0x60) = new_value;\n    }\n    break;\n  case 3:\n    set_values(device,new_value,flags,0x809e5,device);\n    break;\n  case 4:\n  case 5:\n    set_param_values(device,new_value,parameter_type == 5,(flags << 0x1d) >> 0x1f,flags & 1,parameter_type,new_value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_parameter_00080a30",
            "entrypoint": "0x00080a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a30": "update_parameter_00080a30",
                "bVar1": "is_negative",
                "param_1": "device",
                "param_2": "parameter_type",
                "param_3": "new_value",
                "param_4": "flags",
                "set_param_values_00080a0a": "set_param_values",
                "set_values_000809e4": "set_values",
                "update_parameter_000809be": "update_parameter_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a94": {
            "additional_data": {
                "*(uint *)(param_1 + 0x18)": {
                    "1": "value_at_offset_24"
                },
                "*(uint *)(param_1 + 8)": {
                    "1": "value_at_offset_8"
                },
                "FUN_00080a94": {
                    "1": "check_bitwise_operations",
                    "2": "check_bitwise_conditions",
                    "4": "check_bitwise_and",
                    "5": "check_intersection",
                    "7": "check_bitwise_intersection"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_pointer",
                    "3": "address",
                    "4": "input_address",
                    "6": "input_value"
                },
                "param_2": {
                    "1": "permission_mask",
                    "14": "mask",
                    "2": "bit_mask",
                    "8": "bitmask"
                },
                "uVar1": {
                    "1": "intersection",
                    "29": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081014"
            ],
            "code": "\nuint check_bitwise_intersection_00080a94(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "check_bitwise_intersection_00080a94",
            "entrypoint": "0x00080a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a94": "check_bitwise_intersection_00080a94",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "additional_data": {
                "FUN_00080aa8": {
                    "1": "check_param_and_set_bit",
                    "12": "check_and_set_bit",
                    "2": "check_and_update_bitmask",
                    "7": "check_and_update_bit"
                },
                "param_1": {
                    "1": "param",
                    "4": "bit_index",
                    "5": "value",
                    "7": "input",
                    "8": "bit_position"
                },
                "uVar1": {
                    "1": "bit_value",
                    "26": "bit_mask",
                    "3": "bitmask"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "code": "\n\n\nundefined4 check_and_set_bit_00080aa8(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_set_bit_00080aa8",
            "entrypoint": "0x00080aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080aa8": "check_and_set_bit_00080aa8",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "additional_data": {
                "../source/tc.c": {
                    "1": "source_file_path"
                },
                "FUN_00080b2c": {
                    "1": "update_channel_configuration",
                    "18": "configure_tc_channel",
                    "2": "configure_tc",
                    "3": "configure_timer_channel",
                    "4": "configure_channel"
                },
                "execute_assertion_000816f8": {
                    "1": "execute_assertion"
                },
                "iVar1": {
                    "1": "calc_offset",
                    "16": "offset",
                    "2": "channel_index",
                    "8": "channel_offset"
                },
                "iVar2": {
                    "1": "channel_pointer",
                    "18": "channel_address",
                    "2": "channel_addr",
                    "3": "address"
                },
                "param_1": {
                    "1": "channel_number",
                    "2": "param_1",
                    "24": "param1",
                    "3": "channel_id"
                },
                "param_2": {
                    "1": "channel_index",
                    "22": "param2",
                    "3": "dw_channel"
                },
                "param_3": {
                    "1": "function_name",
                    "12": "channel_name",
                    "16": "param3",
                    "2": "error_message"
                },
                "uVar3": {
                    "1": "channel_config",
                    "2": "channel_info",
                    "21": "combined_params"
                }
            },
            "called": [
                "FUN_000816f8"
            ],
            "calling": [
                "FUN_000803fc"
            ],
            "code": "\nvoid configure_tc_channel_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int offset;\n  int channel_address;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combined_params = execute_assertion(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combined_params >> 0x20) * 0x40;\n  channel_address = (int)combined_params + offset;\n  *(undefined4 *)((int)combined_params + offset) = 2;\n  *(undefined4 *)(channel_address + 0x28) = 0xffffffff;\n  *(char **)(channel_address + 4) = param3;\n  return;\n}\n\n",
            "current_name": "configure_tc_channel_00080b2c",
            "entrypoint": "0x00080b2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "execute_assertion_000816f8": "execute_assertion",
                "iVar1": "offset",
                "iVar2": "channel_address",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar3": "combined_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b90": {
            "additional_data": {
                "0x14": {
                    "1": "value_offset"
                },
                "FUN_00080b90": {
                    "1": "set_value_at_index",
                    "2": "store_value_at_offset",
                    "3": "set_parameter_value",
                    "4": "set_memory_value"
                },
                "offset": {
                    "1": "multiplier"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "array_address",
                    "23": "base_address"
                },
                "param_1 + param_2 * 0x40 + 0x14": {
                    "1": "address_to_store"
                },
                "param_2": {
                    "1": "object_index",
                    "2": "array_index",
                    "23": "index",
                    "5": "offset"
                },
                "param_2 * 0x40": {
                    "1": "offset"
                },
                "param_3": {
                    "1": "value_to_store",
                    "10": "new_value",
                    "20": "value"
                },
                "value": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_000803fc"
            ],
            "code": "\nvoid set_memory_value_00080b90(int base_address,int index,undefined4 value)\n\n{\n  *(undefined4 *)(base_address + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "current_name": "set_memory_value_00080b90",
            "entrypoint": "0x00080b90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080b90": "set_memory_value_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b98": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_relocation_table",
                    "2": "array",
                    "3": "elf_relocation_array",
                    "4": "elf_rel_array",
                    "5": "relocation_array"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "offset_value",
                    "2": "offset"
                },
                "FUN_00080b98": {
                    "1": "init_memory",
                    "2": "initialize_registers",
                    "22": "initialize_memory"
                },
                "_DAT_400e0620": {
                    "1": "memory_value",
                    "2": "memory_address",
                    "3": "counter",
                    "7": "shifted_value"
                },
                "_DAT_400e0628": {
                    "1": "magic_value",
                    "2": "value1",
                    "3": "constant_value_1",
                    "4": "constant_value1"
                },
                "_DAT_400e0630": {
                    "1": "constant2",
                    "2": "value2",
                    "3": "constant_value_2",
                    "4": "constant_value2"
                },
                "_DAT_400e0668": {
                    "1": "limit",
                    "2": "memory_value",
                    "3": "temp_variable"
                },
                "_DAT_400e0a00": {
                    "1": "memory_address_1",
                    "2": "register_a",
                    "5": "memory_size1"
                },
                "_DAT_400e0c00": {
                    "1": "memory2",
                    "2": "register_b",
                    "5": "memory_size2"
                },
                "_FUN_00080b98": {
                    "1": "initialize_memory"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\n\n\nvoid initialize_memory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  offset = 84000000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00080b98",
            "entrypoint": "0x00080b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "offset",
                "FUN_00080b98": "initialize_memory_00080b98"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080c98": {
            "additional_data": {
                "FUN_00080c98": {
                    "1": "find_threshold",
                    "15": "calculate_threshold",
                    "2": "calculate_result",
                    "3": "calculate_index"
                },
                "local_58": {
                    "1": "threshold_values_array",
                    "15": "thresholds",
                    "6": "threshold_values",
                    "8": "threshold_array"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "result_array",
                    "3": "output",
                    "4": "threshold",
                    "6": "result",
                    "9": "output_array"
                },
                "param_2": {
                    "1": "input_value1",
                    "11": "input_size",
                    "2": "size",
                    "5": "total_size",
                    "8": "input_value"
                },
                "param_3": {
                    "1": "threshold_factor",
                    "2": "factor1",
                    "3": "block_size",
                    "5": "divisor"
                },
                "param_4": {
                    "1": "factor",
                    "2": "factor2",
                    "3": "scaling_factor",
                    "5": "threshold",
                    "9": "multiplier"
                },
                "uVar1": {
                    "1": "threshold_index",
                    "15": "quotient",
                    "3": "divisor"
                },
                "uVar2": {
                    "1": "array_index",
                    "2": "iterator",
                    "22": "index",
                    "3": "i"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nundefined4 calculate_threshold_00080c98(undefined4 *output_array,uint input_size,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output_array = 1;\n  output_array[1] = 0;\n  output_array[0x48] = 0x202;\n  output_array[0x41] = 0;\n  output_array[0x45] = 0;\n  quotient = input_size / (uint)(divisor * 2);\n  if (input_size == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output_array[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_array[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_threshold_00080c98",
            "entrypoint": "0x00080c98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "local_58": "thresholds",
                "param_1": "output_array",
                "param_2": "input_size",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d30": {
            "additional_data": {
                "(param_1 + 4)": {
                    "1": "result_address"
                },
                "(param_3 & 1) << 7": {
                    "1": "masked_bit"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "stored_flags",
                    "2": "flags",
                    "3": "current_value"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00080d30": {
                    "1": "update_param_flags",
                    "2": "update_register_value",
                    "4": "update_register",
                    "5": "update_parameter",
                    "9": "update_flags"
                },
                "PTR_": {
                    "1": ""
                },
                "param_1": {
                    "1": "parameter",
                    "13": "base_address",
                    "2": "data_address",
                    "5": "register_address"
                },
                "param_1 + 4": {
                    "1": "flags_pointer"
                },
                "param_2": {
                    "1": "parameter_value",
                    "10": "new_value",
                    "2": "new_data",
                    "3": "value1",
                    "6": "value"
                },
                "param_2 | *(uint *)(param_1 + 4)": {
                    "1": "updated_value"
                },
                "param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "1": "new_data"
                },
                "param_3": {
                    "1": "flag_bit_to_set",
                    "2": "flag_value",
                    "3": "value2",
                    "4": "bit_mask",
                    "8": "flag"
                },
                "param_3 & 1": {
                    "1": "flag_bit"
                },
                "param_4": {
                    "1": "bit_position"
                },
                "temp_1": {
                    "1": "current_value"
                },
                "temp_2": {
                    "1": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid update_flags_00080d30(int base_address,uint new_value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = new_value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "current_name": "update_flags_00080d30",
            "entrypoint": "0x00080d30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d30": "update_flags_00080d30",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "additional_data": {
                "(param_2 & 0xf) << 0x18": {
                    "1": "bits_to_shift1"
                },
                "(param_4 & 3) << 0x1c": {
                    "1": "bits_to_shift2"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "register_value"
                },
                "<original_function_name>": {
                    "1": "set_flag_bits"
                },
                "DAT_": {
                    "1": "<unchanged>"
                },
                "FUN_00080d3e": {
                    "1": "update_register_value",
                    "2": "update_parameters",
                    "3": "update_flags",
                    "4": "update_configuration"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "param_1": {
                    "1": "configuration",
                    "16": "base_address",
                    "2": "address",
                    "4": "register_address"
                },
                "param_2": {
                    "1": "value",
                    "12": "value1",
                    "2": "value_1"
                },
                "param_3": {
                    "1": "preserve_mask",
                    "12": "value2",
                    "2": "current_value",
                    "3": "mask1"
                },
                "param_4": {
                    "1": "third_param",
                    "12": "value3",
                    "2": "value_3",
                    "3": "mask2"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid update_configuration_00080d3e(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "current_name": "update_configuration_00080d3e",
            "entrypoint": "0x00080d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d3e": "update_configuration_00080d3e",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d58": {
            "additional_data": {
                "*(int *)(param_1 + 0x14)": {
                    "2": "bitmask"
                },
                "0x14": {
                    "1": "offset"
                },
                "FUN_00080d58": {
                    "1": "set_bitwise_flag",
                    "14": "set_bit",
                    "2": "set_bit_in_integer",
                    "3": "set_bit_at_index",
                    "4": "set_bit_at_position"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "array_base_address",
                    "17": "base_address",
                    "2": "memory_address",
                    "8": "address"
                },
                "param_2": {
                    "1": "arg2",
                    "24": "bit_position",
                    "4": "bit_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080f0c"
            ],
            "code": "\nvoid set_bit_00080d58(integer base_address,uinteger bit_position)\n\n{\n  *(integer *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_00080d58",
            "entrypoint": "0x00080d58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "int": "integer",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d62": {
            "additional_data": {
                "*(undefined4 *)(param_1 + 0x14)": {
                    "1": "variable_value",
                    "2": "parameter_value",
                    "4": "value_to_set"
                },
                "0x14": {
                    "3": "offset"
                },
                "<original_variable_name>": {
                    "1": "default_value"
                },
                "FUN_00080d62": {
                    "1": "set_memory_to_max_value",
                    "14": "set_default_value",
                    "2": "initialize_parameter",
                    "5": "initialize_value"
                },
                "param_1": {
                    "1": "obj_ptr",
                    "2": "input_param",
                    "3": "memory_address",
                    "6": "base_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid set_default_value_00080d62(int base_address)\n\n{\n  *(undefined4 *)(base_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "current_name": "set_default_value_00080d62",
            "entrypoint": "0x00080d62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "additional_data": {
                "FUN_00080d6a": {
                    "1": "update_parameter",
                    "16": "set_param_value",
                    "4": "set_param",
                    "6": "set_parameter_value"
                },
                "param_1": {
                    "1": "parameter_address",
                    "19": "object_address",
                    "2": "memory_address",
                    "7": "base_address"
                },
                "param_1 + 0x28": {
                    "1": "address_to_store"
                },
                "param_2": {
                    "1": "value_to_store",
                    "13": "value",
                    "4": "parameter_value",
                    "6": "new_value",
                    "7": "param_value"
                },
                "param_3": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid set_param_value_00080d6a(int object_address,undefined4 value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_00080d6a",
            "entrypoint": "0x00080d6a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "object_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e80": {
            "additional_data": {
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "DAT_00000000": {
                    "1": "result"
                },
                "FUN_00080e80": {
                    "1": "calculate_result",
                    "15": "initialize",
                    "2": "initialize_data",
                    "3": "get_zero_value",
                    "4": "get_default_value"
                },
                "PTR_original_variable_name": {
                    "1": "new_variable_name"
                },
                "return": {
                    "1": "result"
                },
                "return 0": {
                    "1": "return_success"
                },
                "undefined4": {
                    "1": "status",
                    "8": "void"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid initialize_00080e80(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_00080e80",
            "entrypoint": "0x00080e80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e80": "initialize_00080e80",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e88": {
            "additional_data": {
                "DAT_20071208": {
                    "1": "current_value"
                },
                "FUN_00080e88": {
                    "1": "calculate_running_sum",
                    "10": "calculate_new_value",
                    "2": "add_and_return_previous_value",
                    "9": "calculate_sum"
                },
                "iVar1": {
                    "1": "previous_offset",
                    "19": "previous_value",
                    "3": "old_value",
                    "6": "previous_sum"
                },
                "param_1": {
                    "1": "number",
                    "15": "input_value",
                    "2": "num",
                    "3": "value_to_add",
                    "4": "input_number"
                },
                "var_1": {
                    "1": "original_value"
                },
                "var_2": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008236c"
            ],
            "code": "\nint calculate_new_value_00080e88(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previous_value = DAT_20071208;\n  DAT_20071208 = input_value + DAT_20071208;\n  return previous_value;\n}\n\n",
            "current_name": "calculate_new_value_00080e88",
            "entrypoint": "0x00080e88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e88": "calculate_new_value_00080e88",
                "iVar1": "previous_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "additional_data": {
                "->": {
                    "1": "result"
                },
                "0xffffffff": {
                    "1": "error_code",
                    "2": "default_value"
                },
                "<original_variable_name_1>": {
                    "1": "default_value"
                },
                "FUN_00080eaa": {
                    "1": "initialize_return_value",
                    "2": "set_return_value",
                    "4": "get_default_value",
                    "5": "get_return_value",
                    "7": "get_error_code"
                },
                "return": {
                    "1": "error_status",
                    "2": "error_code"
                },
                "return_value": {
                    "1": "negative_one",
                    "2": "result"
                },
                "undefined4": {
                    "2": "error_code",
                    "3": "uint32",
                    "5": "int",
                    "8": "uint32_t"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint32_t get_error_code_00080eaa(void)\n\n{\n  error_code 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_00080eaa",
            "entrypoint": "0x00080eaa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eaa": "get_error_code_00080eaa",
                "return": "error_code",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "memory_offset"
                },
                "0x2000": {
                    "1": "new_value"
                },
                "FUN_00080eb0": {
                    "1": "set_memory_to_default",
                    "14": "initialize_memory",
                    "3": "set_memory_size",
                    "4": "set_memory_value",
                    "5": "set_memory_page_size"
                },
                "newMemoryAddress": {
                    "1": "memory_size"
                },
                "param_1": {
                    "1": "start_address",
                    "2": "status",
                    "3": "address",
                    "4": "param",
                    "5": "result"
                },
                "param_2": {
                    "1": "memory_offset",
                    "2": "arg2",
                    "7": "address",
                    "9": "memory_address"
                },
                "param_2 + 4": {
                    "1": "buffer_addr"
                }
            },
            "called": [],
            "calling": [
                "FUN_00084494"
            ],
            "code": "\nundefined4 initialize_memory_00080eb0(undefined4 result,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_00080eb0",
            "entrypoint": "0x00080eb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "result",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eba": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "<no_change>": {
                    "1": "<no_change>"
                },
                "DAT_*": {
                    "1": "unchanged"
                },
                "FUN_00080eba": {
                    "1": "calculate_result",
                    "15": "get_return_value",
                    "2": "get_status",
                    "8": "get_one"
                },
                "PTR_*": {
                    "1": "unchanged"
                },
                "PTR_XXXXXXXX": {
                    "1": "xxxxxxx"
                },
                "return": {
                    "4": "result"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "5": "int"
                }
            },
            "called": [],
            "calling": [
                "FUN_000844bc"
            ],
            "code": "\nint get_return_value_00080eba(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_00080eba",
            "entrypoint": "0x00080eba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eba": "get_return_value_00080eba",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "additional_data": {
                "<no_parameters>": {
                    "1": ""
                },
                "<no_variables>": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "1": "value"
                },
                "DAT_00080ebe": {
                    "1": "result"
                },
                "FUN_00080ebe": {
                    "1": "calculate_result",
                    "10": "initialize",
                    "2": "initialize_value",
                    "3": "get_default_value"
                },
                "PTR_parameter_1": {
                    "1": "data"
                },
                "PTR_parameter_2": {
                    "1": "settings"
                },
                "PTR_variable_1": {
                    "1": "result"
                },
                "PTR_variable_2": {
                    "1": "counter"
                },
                "return": {
                    "1": "success"
                },
                "return value": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "int",
                    "6": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_000844e0"
            ],
            "code": "\nvoid initialize_00080ebe(void)\n\n{\n  return_value 0;\n}\n\n",
            "current_name": "initialize_00080ebe",
            "entrypoint": "0x00080ebe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ebe": "initialize_00080ebe",
                "return": "return_value",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>",
                    "3": "result"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_00080ec2": {
                    "1": "initialize_value_to_zero",
                    "11": "initialize",
                    "3": "get_zero",
                    "4": "get_return_value",
                    "5": "get_default_value"
                },
                "return": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "unsigned_int",
                    "2": "uint32_t",
                    "7": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00084508"
            ],
            "code": "\nvoid initialize_00080ec2(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_00080ec2",
            "entrypoint": "0x00080ec2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ec2": "initialize_00080ec2",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "additional_data": {
                "FUN_00080ec8": {
                    "1": "process_bytes",
                    "12": "copy_bytes",
                    "2": "convert_bytes_to_uint",
                    "4": "process_data"
                },
                "iVar1": {
                    "1": "iterator",
                    "21": "index",
                    "8": "i"
                },
                "param_1": {
                    "1": "param_addr",
                    "2": "dest",
                    "3": "param_1",
                    "9": "param1"
                },
                "param_2": {
                    "1": "dst_ptr",
                    "2": "src",
                    "3": "byte_array",
                    "4": "param2",
                    "7": "source"
                },
                "param_3": {
                    "1": "size",
                    "16": "num_bytes",
                    "2": "length",
                    "3": "param3"
                }
            },
            "called": [],
            "calling": [
                "FUN_00084244"
            ],
            "code": "\n\n\nuint copy_bytes_00080ec8(undefined4 param1,int source,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "current_name": "copy_bytes_00080ec8",
            "entrypoint": "0x00080ec8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "iVar1": "index",
                "param_1": "param1",
                "param_2": "source",
                "param_3": "num_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eec": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_00080eec": {
                    "2": "exit_with_status_message",
                    "29": "exit_with_status"
                },
                "param_1": {
                    "1": "status_code",
                    "30": "status"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "unused1",
                    "3": "",
                    "4": "unused_param",
                    "5": "unused"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "unused2",
                    "6": "format_string"
                },
                "param_4": {
                    "1": "ptr3",
                    "2": "unused2",
                    "3": "",
                    "6": "unused",
                    "7": "unused_param2"
                },
                "process_data_000817c8": {
                    "1": "print_formatted"
                }
            },
            "called": [
                "FUN_000817c8"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nvoid exit_with_status_00080eec(undefined4 status,undefined4 unused,undefined4 format_string,undefined4 unused_param2)\n\n{\n  print_formatted_data(\"Exiting with status %d.\\n\",status,format_string,unused_param2,unused_param2);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "exit_with_status_00080eec",
            "entrypoint": "0x00080eec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "unused",
                "param_3": "format_string",
                "param_4": "unused_param2",
                "process_data_000817c8": "print_formatted_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080efc": {
            "called": [],
            "calling": [
                "FUN_000841e4"
            ],
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080efc",
            "entrypoint": "0x00080efc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080efe": {
            "additional_data": {
                "0xffffffff": {
                    "1": "error_code",
                    "2": "negative_one"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "DAT_ZZZZZZZZ": {
                    "1": "result"
                },
                "FUN_00080efe": {
                    "1": "get_description",
                    "11": "get_error_code",
                    "2": "initialize_return_value",
                    "4": "get_return_value",
                    "6": "get_default_value"
                },
                "PTR_XXXXXXXX": {
                    "1": "buffer"
                },
                "PTR_YYYYYYYY": {
                    "1": "data"
                },
                "get_result": {
                    "1": ""
                },
                "return": {
                    "1": "return_value",
                    "2": "default_value"
                },
                "undefined4": {
                    "1": "unsigned",
                    "2": "unsigned_integer",
                    "3": "error_code",
                    "6": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "code": "\nuint32_t get_error_code_00080efe(void)\n\n{\n  default_value 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_00080efe",
            "entrypoint": "0x00080efe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe",
                "return": "default_value",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f08": {
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080f08",
            "entrypoint": "0x00080f08",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080f0c": {
            "additional_data": {
                "FUN_00080f0c": {
                    "1": "update_data",
                    "23": "update_parameter",
                    "5": "update_parameter_value"
                },
                "_DAT_400e0614": {
                    "1": "register2"
                },
                "_DAT_400e0618": {
                    "1": "global_variable1",
                    "5": "register1"
                },
                "_DAT_400e0704": {
                    "1": "register2"
                },
                "_DAT_400e0708": {
                    "1": "global_variable3",
                    "4": "register2"
                },
                "bVar5": {
                    "1": "option_type",
                    "15": "lower_nibble",
                    "3": "lower_bits"
                },
                "bVar6": {
                    "1": "combined_flags",
                    "2": "full_byte",
                    "7": "byte_value"
                },
                "check_and_set_bit_00080aa8": {
                    "1": "check_and_set_bit_in_memory",
                    "8": "check_and_set_bit"
                },
                "iVar1": {
                    "28": "result",
                    "3": "return_value"
                },
                "iVar7": {
                    "1": "array_index",
                    "2": "temp_var1",
                    "3": "temp4",
                    "9": "offset"
                },
                "iVar8": {
                    "1": "parameter_ptr",
                    "2": "param",
                    "4": "param_value",
                    "5": "parameter"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "input_param",
                    "4": "input_index",
                    "9": "index"
                },
                "param_2": {
                    "1": "condition",
                    "2": "update_type",
                    "5": "mode",
                    "8": "value"
                },
                "set_bit_00080d58": {
                    "1": "set_bit"
                },
                "uVar2": {
                    "1": "bit_flag",
                    "12": "bit_mask",
                    "3": "temp_var1",
                    "4": "temp1"
                },
                "uVar3": {
                    "1": "mode",
                    "10": "update_type",
                    "2": "update_mode",
                    "3": "temp_var2",
                    "4": "temp2",
                    "5": "parameter_type"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "temp_mask",
                    "3": "existing_bits",
                    "4": "temp3"
                },
                "update_parameter_00080a30": {
                    "1": "update_parameter_helper",
                    "6": "update_parameter"
                }
            },
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "code": "\n\n\nint update_parameter_00080f0c(int index,int value)\n\n{\n  int result;\n  uint bit_mask;\n  undefined4 update_type;\n  uint temp3;\n  byte lower_nibble;\n  byte byte_value;\n  int offset;\n  int parameter;\n  \n  result = index;\n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 4) {\n      result = set_bit(0x400c0000,(&DAT_00084b5d)[index * 0x1c]);\n    }\n    byte_value = (&DAT_20070e1c)[index];\n    lower_nibble = byte_value & 0xf;\n    if ((lower_nibble < 3) && (byte_value != 0)) {\n      if (lower_nibble == 2) {\n        if (value == 0) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 1) {\n        if (value == 2) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 3) {\n        if (value == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (value != 1) {\nLAB_00080f68:\n      if (value == 0) {\n        result = index * 0x1c;\n        check_and_set_bit(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_00080f0c(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        byte_value = (&DAT_20070e1c)[index] & 0xf0 | 2;\n      }\n      else {\n        if (value != 2) {\n          return result;\n        }\n        result = index * 0x1c;\n        check_and_set_bit(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_00080f0c(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        byte_value = (&DAT_20070e1c)[index] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[index] = byte_value;\n      return result;\n    }\n    offset = index * 0x1c;\n    parameter = *(int *)(&DAT_00084b44 + offset);\n    if (byte_value >> 4 == 0) {\n      update_type = 4;\n    }\n    else {\n      update_type = 5;\n    }\n    result = update_parameter_00080f0c(parameter,update_type,*(undefined4 *)(&DAT_00084b48 + offset),\n                         *(undefined4 *)(&DAT_00084b54 + offset));\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf0 | 3;\n    if (*(int *)(parameter + 0x18) == -1) {\n      bit_mask = *(uint *)(&DAT_00084b4c + offset);\n      if (0x2c < bit_mask) {\n        return 1;\n      }\n      if (bit_mask < 0x20) {\n        bit_mask = 1 << (bit_mask & 0xff);\n        temp3 = _DAT_400e0618 & bit_mask;\n        if (temp3 == bit_mask) {\n          _DAT_400e0614 = temp3;\n        }\n      }\n      else {\n        bit_mask = 1 << (bit_mask - 0x20 & 0xff);\n        temp3 = _DAT_400e0708 & bit_mask;\n        if (temp3 == bit_mask) {\n          _DAT_400e0704 = temp3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "update_parameter_00080f0c",
            "entrypoint": "0x00080f0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080f0c": "update_parameter_00080f0c",
                "bVar5": "lower_nibble",
                "bVar6": "byte_value",
                "check_and_set_bit_00080aa8": "check_and_set_bit",
                "iVar1": "result",
                "iVar7": "offset",
                "iVar8": "parameter",
                "param_1": "index",
                "param_2": "value",
                "set_bit_00080d58": "set_bit",
                "uVar2": "bit_mask",
                "uVar3": "update_type",
                "uVar4": "temp3",
                "update_parameter_00080a30": "update_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081014": {
            "additional_data": {
                "BITWISE_INTERSECTION": {
                    "1": "check_bitwise_intersection"
                },
                "FUN_00081014": {
                    "1": "update_parameter_and_values",
                    "14": "update_parameter",
                    "2": "update_parameter_values",
                    "9": "update_parameter_value"
                },
                "check_bitwise_intersection_00080a94": {
                    "13": "check_bitwise_intersection",
                    "3": "check_intersection"
                },
                "iVar1": {
                    "1": "bitwise_result",
                    "10": "result",
                    "16": "intersection_result",
                    "2": "bitwise_intersection_result"
                },
                "iVar3": {
                    "1": "i_var",
                    "2": "param_struct",
                    "4": "ptr",
                    "5": "param_value",
                    "6": "parameter_address",
                    "7": "param_address"
                },
                "param_1": {
                    "2": "param1",
                    "27": "index"
                },
                "param_2": {
                    "1": "bit_flag",
                    "2": "param2",
                    "26": "value"
                },
                "param_3": {
                    "1": "additional_parameter",
                    "15": "param",
                    "2": "value",
                    "3": "data",
                    "5": "param_value"
                },
                "set_param_values_00080a0a": {
                    "1": "set_values",
                    "14": "set_param_values",
                    "2": "set_parameter_values"
                },
                "uVar2": {
                    "1": "param",
                    "13": "param_value",
                    "3": "parameter_value",
                    "4": "updated_value"
                },
                "update_parameter_00080f0c": {
                    "1": "update_parameter_data",
                    "2": "update_parameter_values",
                    "9": "update_parameter"
                }
            },
            "called": [
                "FUN_00080f0c",
                "FUN_00080a94",
                "FUN_00080a0a"
            ],
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "code": "\nvoid update_parameter_00081014(int index,int value,undefined4 param)\n\n{\n  int intersection_result;\n  undefined4 param_value;\n  int param_address;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      update_parameter_00081014(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    param_address = *(int *)(&DAT_00084b44 + index * 0x1c);\n    param_value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    intersection_result = check_bitwise_intersection(param_address,param_value);\n    if (intersection_result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(param_address + 100) = param_value;\n        return;\n      }\n      *(undefined4 *)(param_address + 0x60) = param_value;\n      return;\n    }\n    set_param_values(param_address,param_value,value,0,1);\n  }\n  return;\n}\n\n",
            "current_name": "update_parameter_00081014",
            "entrypoint": "0x00081014",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081014": "update_parameter_00081014",
                "check_bitwise_intersection_00080a94": "check_bitwise_intersection",
                "iVar1": "intersection_result",
                "iVar3": "param_address",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "set_param_values_00080a0a": "set_param_values",
                "uVar2": "param_value",
                "update_parameter_00080f0c": "update_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810a6": {
            "additional_data": {
                "(*param_1 + 4)": {
                    "1": "callback_function"
                },
                "FUN_000810a6": {
                    "1": "extract_and_call_function",
                    "2": "process_param",
                    "3": "process_input",
                    "5": "execute_operation"
                },
                "count_leading_zeros_00082688": {
                    "3": "count_leading_zeros"
                },
                "param_1": {
                    "1": "ptr_array",
                    "3": "data",
                    "4": "input_array",
                    "6": "data_pointer"
                },
                "param_2": {
                    "1": "input_param",
                    "10": "input_value",
                    "2": "input",
                    "9": "value"
                },
                "param_3": {
                    "1": "result",
                    "2": "value1",
                    "3": "leading_zeros"
                },
                "param_4": {
                    "1": "modifier_2",
                    "2": "callback_function",
                    "3": "param2",
                    "6": "additional_param"
                },
                "uVar1": {
                    "1": "leading_zeroes_count",
                    "16": "leading_zeros_count",
                    "2": "count",
                    "3": "number_of_leading_zeros",
                    "4": "leading_zeros"
                }
            },
            "called": [
                "FUN_00082688"
            ],
            "calling": [
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc",
                "FUN_000810d8"
            ],
            "code": "\nvoid process_data_000810a6(int *data_pointer,int input_value,undefined4 leading_zeros,undefined4 additional_param)\n\n{\n  undefined4 leading_zeros_count;\n  \n  if (input_value != 0) {\n    leading_zeros_count = count_leading_zeros(input_value);\n    (**(code **)(*data_pointer + 4))(data_pointer,input_value,leading_zeros_count,*(code **)(*data_pointer + 4),additional_param);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_000810a6",
            "entrypoint": "0x000810a6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810a6": "process_data_000810a6",
                "count_leading_zeros_00082688": "count_leading_zeros",
                "param_1": "data_pointer",
                "param_2": "input_value",
                "param_3": "leading_zeros",
                "param_4": "additional_param",
                "uVar1": "leading_zeros_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810c4": {
            "additional_data": {
                "<no_change>": {
                    "1": "<no_change>"
                },
                "FUN_000810c4": {
                    "1": "execute_data_processing",
                    "2": "process_and_return_data",
                    "28": "process_data"
                },
                "process_data_000810a6": {
                    "1": "process_data_subroutine",
                    "2": "extract_data",
                    "3": "process_data_step",
                    "5": "execute_data_processing",
                    "7": "process_data_helper"
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nvoid process_data_000810c4(void)\n\n{\n  process_data_000810c4_helper();\n  return;\n}\n\n",
            "current_name": "process_data_000810c4",
            "entrypoint": "0x000810c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810c4": "process_data_000810c4",
                "process_data_000810a6": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810cc": {
            "additional_data": {
                "*(code **)*param_1": {
                    "1": "function_to_execute"
                },
                "**(code **)*param_1": {
                    "1": "function_to_execute"
                },
                "*param_1": {
                    "1": "callback_function"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_000810cc": {
                    "1": "execute_code_from_parameter",
                    "23": "execute_function",
                    "5": "execute_code"
                },
                "code": {
                    "1": "function"
                },
                "param_1": {
                    "1": "code_ptr",
                    "2": "callback",
                    "21": "function_pointer",
                    "4": "function_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008113a"
            ],
            "code": "\nvoid execute_function_000810cc(undefined4 *function_pointer)\n\n{\n  (**(function **)*function_pointer)();\n  return;\n}\n\n",
            "current_name": "execute_function_000810cc",
            "entrypoint": "0x000810cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "code": "function",
                "param_1": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810d8": {
            "additional_data": {
                "&DAT_00085635": {
                    "1": "data_2"
                },
                "DAT_00085635": {
                    "1": "data"
                },
                "FUN_000810d8": {
                    "1": "process_and_update_data",
                    "16": "process_data",
                    "3": "process_and_return",
                    "6": "process_and_return_data"
                },
                "original_variable_name_n": {
                    "1": "new_variable_name_n"
                },
                "param_1": {
                    "1": "data_input",
                    "2": "input_data",
                    "3": "data1",
                    "4": "input1",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "unimportant_param",
                    "2": "arg2",
                    "8": "unused_param"
                },
                "param_3": {
                    "1": "data_1",
                    "2": "input_param_2",
                    "3": "input3",
                    "4": "data_param_1"
                },
                "param_4": {
                    "1": "offset",
                    "2": "arg4",
                    "3": "input4",
                    "4": "data_param_2"
                },
                "process_data_000810a6": {
                    "1": "process_data"
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "code": "\nvoid process_data_000810d8(undefined4 input_param,undefined4 unused_param,undefined4 input_3,undefined4 input_4)\n\n{\n  process_data_000810d8(input_param,&DAT_00085635,input_3,input_4,input_4);\n  return;\n}\n\n",
            "current_name": "process_data_000810d8",
            "entrypoint": "0x000810d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810d8": "process_data_000810d8",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "input_3",
                "param_4": "input_4",
                "process_data_000810a6": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810e8": {
            "additional_data": {
                "FUN_000810e8": {
                    "1": "sum_of_processed_data",
                    "16": "calculate_sum",
                    "2": "sum_data"
                },
                "iVar1": {
                    "1": "sum_processed_data",
                    "12": "result1",
                    "3": "result_1",
                    "4": "processed_data_1"
                },
                "iVar2": {
                    "1": "data_sum_b",
                    "12": "result2",
                    "3": "result_2",
                    "4": "processed_data_2"
                },
                "param_1": {
                    "1": "value",
                    "11": "input_value",
                    "12": "input_data",
                    "3": "input_param"
                }
            },
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_sum_000810e8(undefined4 input_data)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_data_000810a6();\n  result2 = process_data_000810d8(input_data);\n  return result2 + result1;\n}\n\n",
            "current_name": "calculate_sum_000810e8",
            "entrypoint": "0x000810e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "iVar1": "result1",
                "iVar2": "result2",
                "param_1": "input_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810fc": {
            "additional_data": {
                "FUN_000810fc": {
                    "1": "convert_and_process_data",
                    "14": "convert_to_base",
                    "3": "convert_number_to_string",
                    "4": "convert_number_to_base"
                },
                "cVar4": {
                    "1": "hex_character",
                    "2": "digit_char",
                    "4": "char_value",
                    "5": "converted_digit",
                    "8": "digit"
                },
                "local_15": {
                    "1": "radix_conversion_result",
                    "12": "converted_number",
                    "2": "output_buffer",
                    "3": "result"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "output",
                    "3": "value",
                    "5": "output_buffer",
                    "6": "input_value",
                    "9": "input"
                },
                "param_2": {
                    "1": "number_to_convert",
                    "12": "number",
                    "2": "num_to_convert",
                    "8": "decimal_number"
                },
                "param_3": {
                    "1": "radix",
                    "30": "base"
                },
                "pcVar1": {
                    "1": "converted_number",
                    "2": "result_ptr",
                    "3": "output",
                    "4": "result",
                    "5": "current_char"
                },
                "pcVar3": {
                    "1": "ptr_current_digit",
                    "3": "previous_digit",
                    "4": "current_char",
                    "7": "current_digit"
                },
                "uVar2": {
                    "1": "dividend",
                    "25": "quotient"
                },
                "uVar5": {
                    "1": "digit_value",
                    "26": "remainder"
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_0008113a"
            ],
            "code": "\nvoid convert_to_base_000810fc(undefined4 input,uint number,uint base)\n\n{\n  char *current_char;\n  uint quotient;\n  char *current_digit;\n  char digit;\n  uint remainder;\n  char converted_number [5];\n  \n  converted_number[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  current_char = converted_number;\n  do {\n    current_digit = current_char;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *current_digit = digit;\n    number = quotient;\n    current_char = current_digit + -1;\n  } while (quotient != 0);\n  process_data_000810a6(input,current_digit);\n  return;\n}\n\n",
            "current_name": "convert_to_base_000810fc",
            "entrypoint": "0x000810fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810fc": "convert_to_base_000810fc",
                "cVar4": "digit",
                "local_15": "converted_number",
                "param_1": "input",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "current_char",
                "pcVar3": "current_digit",
                "uVar2": "quotient",
                "uVar5": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008113a": {
            "additional_data": {
                "FUN_0008113a": {
                    "1": "convert_param_to_base",
                    "10": "convert_to_base",
                    "3": "convert_number_to_base",
                    "5": "convert_base"
                },
                "convert_to_base_000810fc": {
                    "1": "convert_to_base_recursive"
                },
                "execute_function_000810cc": {
                    "1": "execute_negative_sign"
                },
                "iVar1": {
                    "1": "result_1",
                    "28": "result"
                },
                "iVar2": {
                    "1": "conversion_result",
                    "15": "negative_result",
                    "2": "additional_result"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_ptr",
                    "3": "input_array",
                    "5": "array"
                },
                "param_2": {
                    "1": "num",
                    "16": "number",
                    "3": "input_value",
                    "4": "input",
                    "7": "value"
                },
                "param_3": {
                    "1": "conversion_base_or_execute_flag",
                    "30": "base"
                },
                "param_4": {
                    "1": "format",
                    "17": "param_4",
                    "2": "param"
                }
            },
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "code": "\nint convert_to_base_0008113a(undefined4 *array,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*array)(array,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_negative_sign(array,0x2d);\n      negative_result = convert_to_base_0008113a_recursive(array,-number,10);\n      return negative_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_to_base_0008113a_recursive(array,number,base,param_4);\n  return result;\n}\n\n",
            "current_name": "convert_to_base_0008113a",
            "entrypoint": "0x0008113a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008113a": "convert_to_base_0008113a",
                "convert_to_base_000810fc": "convert_to_base_recursive",
                "execute_function_000810cc": "execute_negative_sign",
                "iVar1": "result",
                "iVar2": "negative_result",
                "param_1": "array",
                "param_2": "number",
                "param_3": "base"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008117a": {
            "additional_data": {
                "FUN_0008117a": {
                    "1": "calculate_sum_with_base_conversion",
                    "17": "calculate_sum",
                    "3": "add_converted_data"
                },
                "iVar1": {
                    "1": "base_number",
                    "13": "converted_value",
                    "5": "converted_data",
                    "6": "base_conversion_result"
                },
                "iVar2": {
                    "1": "data_processing_result",
                    "22": "processed_data",
                    "3": "processed_value",
                    "4": "processed_data_result"
                },
                "param_1": {
                    "1": "param",
                    "16": "input_value",
                    "5": "input",
                    "7": "input_data"
                }
            },
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_sum_0008117a(undefined4 input_value)\n\n{\n  int converted_value;\n  int processed_data;\n  \n  converted_value = convert_to_base_0008113a();\n  processed_data = process_data_000810d8(input_value);\n  return processed_data + converted_value;\n}\n\n",
            "current_name": "calculate_sum_0008117a",
            "entrypoint": "0x0008117a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "iVar1": "converted_value",
                "iVar2": "processed_data",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081190": {
            "additional_data": {
                ".r_info": {
                    "1": "rel_info"
                },
                ".r_offset": {
                    "1": "rel_offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "reloc_array",
                    "2": "array",
                    "5": "relocation_table",
                    "6": "relocation_array",
                    "7": "rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[6]": {
                    "1": "rel_entry"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_info": {
                    "1": "info"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "offset"
                },
                "FUN_00081190": {
                    "1": "decrement_and_call_if_zero",
                    "2": "decrement_and_execute_if_zero",
                    "3": "execute_if_r_info_is_zero",
                    "4": "execute_function_if_condition_met"
                },
                "code": {
                    "1": "function_to_call",
                    "2": "function_pointer"
                },
                "r_info": {
                    "1": "reloc_info",
                    "11": "info",
                    "13": "relocation_info",
                    "2": "entry_info"
                },
                "r_offset": {
                    "1": "reloc_offset",
                    "11": "offset",
                    "13": "relocation_offset",
                    "2": "entry_offset"
                },
                "relocation_entries[6].r_info": {
                    "1": "current_r_info"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_function_if_condition_met_00081190(void)\n\n{\n  if ((info != 0xffffffff) &&\n     (info = info - 1,\n     info == 0)) {\n    (*(function_pointer *)((int)&relocation_entries[0]rel_offset + 1))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_if_condition_met_00081190",
            "entrypoint": "0x00081190",
            "imported": false,
            "improved": true,
            "renaming": {
                ".r_info": "rel_info",
                ".r_offset": "rel_offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_entries",
                "Elf32_Rel_ARRAY_20070000[6]": "rel_entry",
                "Elf32_Rel_ARRAY_20070000[6].r_info": "info",
                "FUN_00081190": "execute_function_if_condition_met_00081190",
                "code": "function_pointer",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811b0": {
            "additional_data": {
                "*(undefined4 *)(memorySegment + 0x80)": {
                    "1": "initialize_pointer1"
                },
                "*(undefined4 *)(memorySegment + 0x84)": {
                    "1": "initialize_pointer2"
                },
                "*(undefined4 *)(param_1 + 0x80)": {
                    "1": "first_byte"
                },
                "*(undefined4 *)(param_1 + 0x84)": {
                    "1": "pointer_to_offset"
                },
                "0": {
                    "1": "start_address",
                    "2": "byte_to_fill",
                    "3": "start_offset",
                    "7": "byte_value"
                },
                "0x80": {
                    "1": "byte_value",
                    "3": "end_offset",
                    "8": "memory_size"
                },
                "0x84": {
                    "1": "first_value",
                    "6": "offset"
                },
                "DB_00080e68": {
                    "1": "value_to_fill"
                },
                "FUN_000811b0": {
                    "1": "fill_memory_with_value",
                    "23": "initialize_memory",
                    "4": "fill_memory_with_byte"
                },
                "MOV_00080e68": {
                    "1": "value_to_fill"
                },
                "MemSize": {
                    "1": "memory_size"
                },
                "fill_memory_with_byte_00081f00": {
                    "1": "fill_memory_with_zeros",
                    "17": "fill_memory_with_byte",
                    "6": "fill_memory"
                },
                "mem_1": {
                    "1": "memory_address"
                },
                "memoryAddress": {
                    "1": "memory"
                },
                "original_variable_name_1": {
                    "1": "pointer_to_memory"
                },
                "original_variable_name_2": {
                    "1": "variable1"
                },
                "original_variable_name_3": {
                    "1": "variable2"
                },
                "param_1": {
                    "1": "dest_address",
                    "27": "memory_address"
                },
                "param_1 + 0x80": {
                    "1": "end_of_memory"
                },
                "param_1 + 0x84": {
                    "1": "current_offset"
                },
                "param_2": {
                    "1": "byte_value"
                },
                "param_3": {
                    "1": "byte_value"
                },
                "param_4": {
                    "1": "offset"
                },
                "param_5": {
                    "1": "value_to_write"
                },
                "param_6": {
                    "1": "value_to_write"
                },
                "param_7": {
                    "1": "value_to_return"
                },
                "ptr": {
                    "1": "memory"
                },
                "undefined4": {
                    "1": "four_byte_value"
                },
                "valueToFill": {
                    "1": "fill_value"
                }
            },
            "called": [
                "FUN_00081f00"
            ],
            "calling": [
                "FUN_0008089c"
            ],
            "code": "\nint initialize_memory_000811b0(int memory_address)\n\n{\n  fill_memory_with_byte(memory_address,0,0x80);\n  *(uint32 *)(memory_address + 0x80) = 0;\n  *(uint32 *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "current_name": "initialize_memory_000811b0",
            "entrypoint": "0x000811b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "fill_memory_with_byte_00081f00": "fill_memory_with_byte",
                "param_1": "memory_address",
                "undefined4": "uint32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811ca": {
            "additional_data": {
                "*(int *)(param_1 + 0x80)": {
                    "1": "current_pointer"
                },
                "*(int *)(param_1 + 0x80) + 1U & 0x7f": {
                    "1": "new_pointer_wrapped"
                },
                "*(uint *)(param_1 + 0x80)": {
                    "1": "updated_pointer"
                },
                "*(uint *)(param_1 + 0x84)": {
                    "1": "target_pointer"
                },
                "*(undefined *)(param_1 + *(int *)(param_1 + 0x80))": {
                    "1": "current_value"
                },
                "FUN_000811ca": {
                    "1": "update_data_at_index",
                    "13": "update_buffer",
                    "2": "update_data"
                },
                "param_1": {
                    "1": "param",
                    "2": "data_address",
                    "4": "base_address",
                    "5": "buffer_address",
                    "9": "buffer"
                },
                "param_2": {
                    "1": "byte",
                    "15": "new_value",
                    "3": "data",
                    "4": "new_data",
                    "6": "value"
                },
                "uVar1": {
                    "1": "new_pointer",
                    "12": "updated_index",
                    "3": "current_index",
                    "4": "next_index",
                    "9": "new_index"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_buffer_000811ca(int buffer,undefined new_value)\n\n{\n  uint updated_index;\n  \n  updated_index = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (updated_index != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = new_value;\n    *(uint *)(buffer + 0x80) = updated_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_buffer_000811ca",
            "entrypoint": "0x000811ca",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer",
                "param_2": "new_value",
                "uVar1": "updated_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811e8": {
            "additional_data": {
                "(*(*(code **)(*param_1 + 0xc)))(param_1)": {
                    "1": "process_data"
                },
                "(*(*param_1 + 0xc))": {
                    "1": "function_ptr"
                },
                "(*(param_1 + 0xc))": {
                    "1": "fetch_data_value"
                },
                "(*param_1 + 0xC)": {
                    "1": "callback_function"
                },
                "(*param_1 + 0xc)": {
                    "1": "process_function",
                    "2": "function_pointer"
                },
                "*(code **)(data_ptr + 0xc)": {
                    "1": "function_ptr"
                },
                "**(code **)(*param_1 + 0xc)": {
                    "1": "callback_function"
                },
                "*param_1": {
                    "1": "data_values"
                },
                "*param_1 + 0xc": {
                    "1": "data_action"
                },
                "FUN_000811e8": {
                    "1": "find_data_value",
                    "2": "get_data_value_and_check_threshold",
                    "3": "update_data_value",
                    "5": "update_data_values",
                    "6": "process_data"
                },
                "code": {
                    "4": "function_pointer"
                },
                "data_array[2]": {
                    "1": "threshold"
                },
                "get_data_value_thunk_000816d8": {
                    "1": "fetch_data_value",
                    "13": "get_data_value",
                    "2": "get_next_value",
                    "7": "get_next_data_value"
                },
                "get_data_value_thunk_000816d8()": {
                    "1": "get_data_value"
                },
                "iVar1": {
                    "1": "thunk_value",
                    "20": "data_value",
                    "4": "current_value",
                    "5": "value"
                },
                "iVar1 - data_array[3]": {
                    "1": "difference"
                },
                "iVar1 - param_1[3]": {
                    "2": "difference"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "array",
                    "23": "data_array"
                },
                "param_1 + 0xc": {
                    "1": "data_array_function_ptr"
                },
                "param_1[2]": {
                    "1": "max_difference",
                    "5": "threshold"
                },
                "param_1[3]": {
                    "1": "previous_value",
                    "2": "previous_data_value",
                    "4": "data_array[3]"
                },
                "return_value": {
                    "2": "result"
                }
            },
            "called": [
                "thunk_FUN_000816d8"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nint process_data_000811e8(int *data_array)\n\n{\n  int data_value;\n  \n  data_value = get_data_value;\n  data_array[3] = data_value;\n  do {\n    data_value = (**(function_pointer **)(*data_array + 0xc))(data_array);\n    if (-1 < data_value) {\n      return data_value;\n    }\n    data_value = get_data_value;\n  } while ((uint)(data_value - data_array[3]) < (uint)threshold);\n  return -1;\n}\n\n",
            "current_name": "process_data_000811e8",
            "entrypoint": "0x000811e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811e8": "process_data_000811e8",
                "code": "function_pointer",
                "get_data_value_thunk_000816d8": "get_data_value",
                "get_data_value_thunk_000816d8()": "get_data_value",
                "iVar1": "data_value",
                "param_1": "data_array",
                "param_1[2]": "threshold",
                "param_1[3]": "data_array[3]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081214": {
            "additional_data": {
                "FUN_00081214": {
                    "1": "process_data_and_allocate_memory",
                    "11": "process_and_allocate_memory",
                    "4": "process_data_loop",
                    "6": "process_data",
                    "9": "process_and_update_memory"
                },
                "allocate_and_update_memory_0008159e": {
                    "7": "allocate_and_update_memory"
                },
                "initialize_memory_000814f6": {
                    "7": "initialize_memory"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "memory_location",
                    "3": "param1",
                    "9": "memory_address"
                },
                "param_2": {
                    "1": "data_handler",
                    "2": "data_source",
                    "3": "param2",
                    "9": "data_address"
                },
                "param_3": {
                    "1": "stop_value",
                    "17": "target_value",
                    "2": "target",
                    "4": "target_data"
                },
                "process_data_000811e8": {
                    "1": "process_data_block",
                    "6": "process_data"
                },
                "uVar1": {
                    "1": "data_processing_result",
                    "12": "data_result",
                    "2": "data_processed",
                    "3": "data_value",
                    "4": "result"
                }
            },
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nvoid process_and_allocate_memory_00081214(undefined4 memory_address,undefined4 data_address,uint target_value)\n\n{\n  uint data_result;\n  \n  initialize_memory(memory_address,&DAT_00085637);\n  while ((data_result = process_data(data_address), -1 < (int)data_result && (data_result != target_value))) {\n    allocate_and_update_memory(memory_address,data_result & 0xff);\n  }\n  return;\n}\n\n",
            "current_name": "process_and_allocate_memory_00081214",
            "entrypoint": "0x00081214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081214": "process_and_allocate_memory_00081214",
                "allocate_and_update_memory_0008159e": "allocate_and_update_memory",
                "initialize_memory_000814f6": "initialize_memory",
                "param_1": "memory_address",
                "param_2": "data_address",
                "param_3": "target_value",
                "process_data_000811e8": "process_data",
                "uVar1": "data_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081248": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": {
                    "1": "address1"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(address_param1 + 0x80)": {
                    "1": "value1"
                },
                "*(int *)(address_param1 + 0x84)": {
                    "1": "value2"
                },
                "*(int *)(first_offset + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(first_offset + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "pointer_value",
                    "2": "ptr_offset",
                    "3": "pointer1"
                },
                "*(int *)(param_1 + 0x10) + 0x80": {
                    "1": "ptr_a_offset_1",
                    "2": "ptr2",
                    "3": "pointer2"
                },
                "*(int *)(param_1 + 0x10) + 0x84": {
                    "1": "second_pointer",
                    "2": "ptr3",
                    "3": "pointer3"
                },
                "*(int *)(ptr1 + 0x80)": {
                    "1": "ptr2"
                },
                "*(int *)(ptr1 + 0x84)": {
                    "1": "ptr3"
                },
                "*(int *)(ptrVarA + 0x80)": {
                    "1": "var_a"
                },
                "*(int *)(ptrVarA + 0x84)": {
                    "1": "var_b"
                },
                "*(int *)(ptr_1 + 0x80)": {
                    "1": "ptr_2"
                },
                "*(int *)(ptr_1 + 0x84)": {
                    "1": "ptr_3"
                },
                "*(int *)(ptr_offset + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(ptr_offset + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(ptr_param_1_offset_0x10 + 0x80)": {
                    "1": "ptr_param_1_offset_0x80"
                },
                "*(int *)(ptr_param_1_offset_0x10 + 0x84)": {
                    "1": "ptr_param_1_offset_0x84"
                },
                "*(int *)(ptr_value + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(ptr_value + 0x84)": {
                    "1": "second_value"
                },
                "*PTR_XXXXX": {
                    "1": "base_pointer"
                },
                "*PTR_XXXXX+0x80": {
                    "1": "first_value_pointer"
                },
                "*PTR_XXXXX+0x84": {
                    "1": "second_value_pointer"
                },
                "0x10": {
                    "1": "temp_offset",
                    "2": "offset"
                },
                "0x7f": {
                    "1": "bitmask"
                },
                "0x80": {
                    "1": "value_offset_1",
                    "2": "first_value_offset"
                },
                "0x84": {
                    "1": "value_offset_2",
                    "2": "second_offset"
                },
                "DAT_1": {
                    "1": "offset_1"
                },
                "DAT_2": {
                    "1": "offset_2"
                },
                "FUN_00081248": {
                    "1": "calculate_difference_mod",
                    "28": "calculate_difference"
                },
                "PTR_1": {
                    "1": "pointer_1"
                },
                "PTR_2": {
                    "1": "pointer_2"
                },
                "param_1": {
                    "1": "value",
                    "2": "input_param",
                    "23": "input_value",
                    "4": "input"
                },
                "param_1 + 0x10": {
                    "1": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "code": "\nuint calculate_difference_00081248(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) bitwise_and\n         0x7f;\n}\n\n",
            "current_name": "calculate_difference_00081248",
            "entrypoint": "0x00081248",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081276": {
            "additional_data": {
                "FUN_00081276": {
                    "1": "extracted_byte_from_binary",
                    "13": "extract_byte_from_buffer",
                    "2": "get_value_from_buffer",
                    "3": "extract_byte",
                    "5": "get_next_byte"
                },
                "bVar1": {
                    "1": "byte_to_extract",
                    "2": "byte_value",
                    "20": "extracted_byte",
                    "6": "next_byte"
                },
                "iVar2": {
                    "1": "address_value",
                    "2": "buffer",
                    "4": "buffer_ptr",
                    "7": "buffer_pointer"
                },
                "param_1": {
                    "1": "data_pointer",
                    "2": "input_address",
                    "3": "memory_address",
                    "5": "input",
                    "7": "buffer_address",
                    "9": "buffer"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nuint extract_byte_from_buffer_00081276(int buffer)\n\n{\n  byte extracted_byte;\n  int buffer_pointer;\n  \n  buffer_pointer = *(int *)(buffer + 0x10);\n  if (*(int *)(buffer_pointer + 0x80) != *(int *)(buffer_pointer + 0x84)) {\n    extracted_byte = *(byte *)(buffer_pointer + *(int *)(buffer_pointer + 0x84));\n    *(uint *)(buffer_pointer + 0x84) = *(int *)(buffer_pointer + 0x84) + 1U & 0x7f;\n    return (uint)extracted_byte;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "extract_byte_from_buffer_00081276",
            "entrypoint": "0x00081276",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "bVar1": "extracted_byte",
                "iVar2": "buffer_pointer",
                "param_1": "buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000812b8": {
            "additional_data": {
                "*(_DWORD *)(*(int *)(param_1 + 0x14) + 0x80)": {
                    "1": "i_var8"
                },
                "*(_DWORD *)(*(int *)(param_1 + 0x18) + 0x1c)": {
                    "1": "ivar6"
                },
                "*(_DWORD *)(iVar1 + 0x80)": {
                    "1": "i_var7"
                },
                "*(_DWORD *)(param_1 + 0x14)": {
                    "1": "i_var1"
                },
                "*(_DWORD *)(param_1 + 0x18)": {
                    "1": "i_var5"
                },
                "*(char *)(iVar1 + *(int *)(iVar1 + 0x80))": {
                    "1": "ptr1_char"
                },
                "*(char *)(iVar1 + iVar4)": {
                    "1": "char_value"
                },
                "*(int *)(*(int *)(param_1 + 0x18) + 0x14)": {
                    "1": "i_var2"
                },
                "*(int *)(iVar1 + 0x80)": {
                    "1": "i_var4"
                },
                "*(int *)(iVar1 + 0x84)": {
                    "1": "i_var3"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "ptr2"
                },
                "*(int *)(param_1 + 0x18)": {
                    "1": "info_addr"
                },
                "*(int *)(param_1 + 0x18) + 0x1c": {
                    "1": "ptr3_plus_0x1c"
                },
                "*(uint *)(*(int *)(param_1 + 0x14) + 0x80)": {
                    "1": "ptr2_80"
                },
                "*(uint *)(iVar1 + 0x84)": {
                    "1": "ptr1_84_uint"
                },
                "*(undefined4 *)(*(int *)(param_1 + 0x18) + 8)": {
                    "1": "ptr3_plus_8"
                },
                "FUN_000812b8": {
                    "1": "update_value_at_offset",
                    "2": "update_value_if_condition_met",
                    "20": "update_data",
                    "4": "update_value"
                },
                "iVar1": {
                    "1": "current_value",
                    "2": "data_structure",
                    "3": "var1",
                    "6": "ptr1"
                },
                "iVar4 + 1U & 0x8000007f": {
                    "1": "updated_value"
                },
                "param_1": {
                    "1": "input_data",
                    "12": "data_pointer",
                    "3": "data_struct",
                    "7": "data_ptr"
                },
                "param_2": {
                    "1": "new_parameter",
                    "2": "new_data",
                    "25": "new_value"
                },
                "uVar2": {
                    "1": "next_ind",
                    "10": "updated_value",
                    "3": "next_index",
                    "5": "updated_index",
                    "6": "new_index"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nundefined4 update_data_000812b8(int data_pointer,undefined4 new_value)\n\n{\n  int ptr1;\n  uint updated_value;\n  \n  ptr1 = *(int *)(data_pointer + 0x14);\n  if ((*(int *)(*(int *)(data_pointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptr1 + 0x84) == *(int *)(ptr1 + 0x80))) {\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    updated_value = *(int *)(ptr1 + 0x80) + 1U & 0x8000007f;\n    if ((int)updated_value < 0) {\n      updated_value = (updated_value - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptr1 + 0x84) == updated_value);\n    *(char *)(ptr1 + *(int *)(ptr1 + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_pointer + 0x14) + 0x80) = updated_value;\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_000812b8",
            "entrypoint": "0x000812b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "iVar1": "ptr1",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081348": {
            "additional_data": {
                "*(undefined *)(data + 7)": {
                    "1": "value2"
                },
                "*data": {
                    "1": "function_ptr"
                },
                "*param_1": {
                    "1": "function_pointer"
                },
                "FUN_00081348": {
                    "1": "init_params",
                    "13": "initialize_parameters",
                    "2": "initialize_param_array",
                    "3": "initialize_data",
                    "4": "initialize_function",
                    "6": "initialize_params"
                },
                "PTR_FUN_000812b8_1_00085650": {
                    "1": "function_pointer"
                },
                "data[1]": {
                    "2": "flag"
                },
                "data[2]": {
                    "1": "limit"
                },
                "data[4]": {
                    "1": "value5"
                },
                "data[5]": {
                    "1": "value5"
                },
                "data[6]": {
                    "1": "value2"
                },
                "data[7]": {
                    "1": "value3"
                },
                "data[8]": {
                    "1": "value3"
                },
                "outputArray[1]": {
                    "1": "initialized_value1"
                },
                "outputArray[2]": {
                    "1": "initialized_value2"
                },
                "outputArray[4]": {
                    "1": "input_value4"
                },
                "outputArray[5]": {
                    "1": "input_value5"
                },
                "outputArray[6]": {
                    "1": "input_value1"
                },
                "outputArray[7]": {
                    "1": "input_value2"
                },
                "outputArray[8]": {
                    "1": "input_value3"
                },
                "param_1": {
                    "3": "function_params",
                    "6": "output_array",
                    "7": "params",
                    "9": "parameters"
                },
                "param_1[1]": {
                    "1": "parameters[1]",
                    "2": "output_array[1]"
                },
                "param_1[2]": {
                    "1": "parameters[2]",
                    "2": "output_array[2]"
                },
                "param_1[4]": {
                    "1": "parameters[4]",
                    "2": "output_array[4]"
                },
                "param_1[5]": {
                    "1": "parameter6",
                    "2": "output_array[5]"
                },
                "param_1[6]": {
                    "1": "output_array[6]"
                },
                "param_1[7]": {
                    "1": "parameters[7]",
                    "2": "output_array[7]"
                },
                "param_1[8]": {
                    "1": "output_array[8]"
                },
                "param_2": {
                    "1": "input_value1",
                    "11": "value1",
                    "2": "param_2",
                    "3": "param2",
                    "7": "value2"
                },
                "param_3": {
                    "1": "value_3",
                    "10": "value2",
                    "2": "param_3",
                    "3": "param3",
                    "7": "value3"
                },
                "param_4": {
                    "1": "parameter_a",
                    "10": "value3",
                    "2": "param_4",
                    "3": "param4",
                    "7": "value4"
                },
                "param_5": {
                    "1": "value_d",
                    "10": "value4",
                    "2": "param_5",
                    "3": "param5",
                    "7": "value5"
                },
                "param_6": {
                    "1": "param6_value",
                    "10": "value5",
                    "2": "param_6",
                    "3": "param6",
                    "7": "value6"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "code": "\nvoid initialize_parameters_00081348(undefined4 *parameters,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  output_array[1] = 0;\n  output_array[2] = 1000;\n  param_array[6] = value1;\n  *parameters = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(parameters + 7) = value2;\n  output_array[4] = value4;\n  param_array[8] = value3;\n  output_array[5] = value5;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_00081348",
            "entrypoint": "0x00081348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "parameters",
                "param_1[1]": "output_array[1]",
                "param_1[2]": "output_array[2]",
                "param_1[4]": "output_array[4]",
                "param_1[5]": "output_array[5]",
                "param_1[6]": "param_array[6]",
                "param_1[8]": "param_array[8]",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813dc": {
            "additional_data": {
                "*(byte *)(param1 + 0x1c)": {
                    "1": "byte_var"
                },
                "*(byte *)(param_1 + 0x1c)": {
                    "1": "byte_value"
                },
                "*(int *)(((uint)(int)(char)*(byte *)(param1 + 0x1c) >> 5) * 4 + -0x1fff1f00)": {
                    "1": "array_val"
                },
                "*(int *)(param1 + 0x10)": {
                    "1": "var4"
                },
                "*(int *)(param1 + 0x14)": {
                    "1": "var5"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "ptr1"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "ptr2"
                },
                "*(undefined4 *)(iVar + 0x80)": {
                    "1": "var4[0]"
                },
                "*(undefined4 *)(iVar + 0x84)": {
                    "1": "var4[4]"
                },
                "*(undefined4 *)(param1 + 0x20)": {
                    "1": "bit_value"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "buffer_flag"
                },
                "*(undefined4 *)(var5 + 0x80)": {
                    "1": "var5[0]"
                },
                "*(undefined4 *)(var5 + 0x84)": {
                    "1": "var5[4]"
                },
                "*(undefined4 **)(param_1 + 0x18)": {
                    "1": "buffer_ptr"
                },
                "*puVar2": {
                    "1": "var2[0]"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "2": "relocation_array",
                    "4": "rel_array"
                },
                "FUN_000813dc": {
                    "1": "set_ac_value",
                    "2": "set_bit_and_values",
                    "3": "set_flags_and_values",
                    "6": "set_configuration"
                },
                "iVar1": {
                    "1": "temp_var",
                    "2": "ptr1",
                    "3": "var1",
                    "5": "offset",
                    "6": "variable1"
                },
                "new_variable_name_1": {
                    "1": "<new_variable_name_1>"
                },
                "new_variable_name_2": {
                    "1": "<new_variable_name_2>"
                },
                "param1 + 0x18": {
                    "1": "var2"
                },
                "param1 + 0x1c": {
                    "1": "var3"
                },
                "param1 + 0x20": {
                    "1": "var1"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "base_address",
                    "3": "param1",
                    "4": "config_ptr"
                },
                "param_2": {
                    "1": "value2",
                    "2": "arg2",
                    "3": "offset",
                    "4": "divisor",
                    "5": "page_size"
                },
                "puVar2": {
                    "1": "header_ptr",
                    "2": "variable2",
                    "3": "pointer1"
                },
                "puVar2[0x48]": {
                    "1": "var2[72]"
                },
                "puVar2[1]": {
                    "1": "var2[4]"
                },
                "puVar2[2]": {
                    "1": "var2[8]"
                },
                "puVar2[3]": {
                    "1": "var2[12]"
                },
                "puVar2[8]": {
                    "1": "var2[32]"
                },
                "r_offset": {
                    "2": "relative_offset",
                    "3": "offset"
                },
                "set_bit_00080aa8": {
                    "1": "set_bit"
                }
            },
            "called": [
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000801e0"
            ],
            "code": "\nvoid set_configuration_000813dc(int config_ptr,uint page_size)\n\n{\n  int variable1;\n  undefined4 *pointer1;\n  \n  check_and_set_bit(*(undefined4 *)(config_ptr + 0x20));\n  pointer1 = *(undefined4 **)(config_ptr + 0x18);\n  var2[72] = 0x202;\n  *pointer1 = 0xac;\n  var2[4] = 0x800;\n  var2[32] = rel_array[6].offset / page_size >> 4;\n  var2[12] = 0xffffffff;\n  var2[8] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(config_ptr + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(config_ptr + 0x1c) & 0x1f);\n  variable1 = *(int *)(config_ptr + 0x10);\n  *(undefined4 *)(variable1 + 0x84) = 0;\n  *(undefined4 *)(variable1 + 0x80) = 0;\n  variable1 = *(int *)(config_ptr + 0x14);\n  *(undefined4 *)(variable1 + 0x84) = 0;\n  *(undefined4 *)(variable1 + 0x80) = 0;\n  *pointer1 = 0x50;\n  return;\n}\n\n",
            "current_name": "set_configuration_000813dc",
            "entrypoint": "0x000813dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000813dc": "set_configuration_000813dc",
                "iVar1": "variable1",
                "param_1": "config_ptr",
                "param_2": "page_size",
                "puVar2": "pointer1",
                "puVar2[0x48]": "var2[72]",
                "puVar2[1]": "var2[4]",
                "puVar2[2]": "var2[8]",
                "puVar2[3]": "var2[12]",
                "puVar2[8]": "var2[32]",
                "r_offset": "offset",
                "set_bit_00080aa8": "set_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081438": {
            "additional_data": {
                "&PTR_update_data_000812b8_1_00085680": {
                    "1": "constant_data"
                },
                "*param_1": {
                    "1": "output_data_ptr"
                },
                "FUN_00081438": {
                    "1": "initialize_and_set_data_pointer",
                    "2": "initialize_data",
                    "3": "initialize_and_return_data",
                    "4": "initialize_and_return_parameters",
                    "5": "initialize_and_update_data"
                },
                "PTR_update_data_000812b8_1_00085680": {
                    "1": "update_data_ptr",
                    "5": "update_data"
                },
                "initialize_parameters_00081348": {
                    "1": "initialize_params",
                    "9": "initialize_parameters"
                },
                "param_1": {
                    "1": "output_data_ptr",
                    "10": "output_array",
                    "2": "result",
                    "3": "output_data"
                },
                "param_1[9]": {
                    "1": "output[9]",
                    "2": "output_array[9]"
                },
                "param_2": {
                    "1": "parameter",
                    "10": "input_value",
                    "2": "input_param",
                    "7": "input_parameter",
                    "9": "input_data"
                },
                "update_data_000812b8_1_00085680": {
                    "1": "updated_data",
                    "2": "update_data"
                }
            },
            "called": [
                "FUN_00081348"
            ],
            "calling": [
                "FUN_0008089c"
            ],
            "code": "\nundefined4 * initialize_and_update_data_00081438(undefined4 *output_array,undefined4 input_value)\n\n{\n  initialize_parameters();\n  *output_array = &PTR_update_data;\n  output_array[9] = input_value;\n  return output_array;\n}\n\n",
            "current_name": "initialize_and_update_data_00081438",
            "entrypoint": "0x00081438",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081438": "initialize_and_update_data_00081438",
                "initialize_parameters_00081348": "initialize_parameters",
                "param_1": "output_array",
                "param_1[9]": "output_array[9]",
                "param_2": "input_value",
                "update_data_000812b8_1_00085680": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008145c": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "((param_1 - param_2) * (param_5 - param_4)) / (param_3 - param_2)": {
                    "1": "interpolation_result"
                },
                "FUN_0008145c": {
                    "1": "calculate_interpolation_value",
                    "2": "calculate_result",
                    "3": "calculate_new_value",
                    "7": "calculate_linear_interpolation"
                },
                "newVariableName_1": {
                    "1": "difference1"
                },
                "newVariableName_2": {
                    "1": "difference2"
                },
                "newVariableName_3": {
                    "1": "difference3"
                },
                "original_variable_name_1": {
                    "1": "difference_value"
                },
                "original_variable_name_2": {
                    "1": "difference_range"
                },
                "param_1": {
                    "1": "current_value",
                    "14": "start_value",
                    "2": "original_value",
                    "3": "initial_value"
                },
                "param_1 - param_2": {
                    "1": "difference"
                },
                "param_1 - param_2 * param_5 - param_4": {
                    "1": "position_diff_times_range_diff"
                },
                "param_2": {
                    "1": "first_parameter",
                    "2": "second_operand",
                    "4": "start_range"
                },
                "param_3": {
                    "1": "end_value2",
                    "2": "third_operand",
                    "3": "end_range"
                },
                "param_3 - param_2": {
                    "1": "denominator_difference"
                },
                "param_4": {
                    "1": "new_min",
                    "2": "fourth_operand",
                    "3": "start_range"
                },
                "param_5": {
                    "1": "new_max",
                    "2": "end_value",
                    "3": "end_range"
                },
                "param_5 - param_4": {
                    "1": "range_diff"
                },
                "result": {
                    "1": "weighted_average"
                },
                "result_variable": {
                    "1": "interpolated_value"
                },
                "return": {
                    "1": "interpolated_value"
                },
                "return_value": {
                    "1": "result"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "code": "\nint calculate_linear_interpolation_0008145c(int start_value,int start_range,int end_range,int start_range,int end_range)\n\n{\n  interpolated_value (unsigned_integer)((start_value - start_range) * (end_range - start_range)) / (unsigned_integer)(end_range - start_range) + start_range;\n}\n\n",
            "current_name": "calculate_linear_interpolation_0008145c",
            "entrypoint": "0x0008145c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008145c": "calculate_linear_interpolation_0008145c",
                "param_1": "start_value",
                "param_2": "start_range",
                "param_3": "end_range",
                "param_4": "start_range",
                "param_5": "end_range",
                "return": "interpolated_value",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081472": {
            "additional_data": {
                "*param_1": {
                    "1": "relocation_entry_value"
                },
                "FUN_00081472": {
                    "1": "update_relocated_ptr",
                    "28": "update_relocation_entry"
                },
                "param_1": {
                    "1": "entry",
                    "27": "relocation_entry"
                }
            },
            "called": [
                "FUN_00081800"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nundefined4 * update_relocation_entry_00081472(undefined4 *relocation_entry)\n\n{\n  update_relocation_entry_00081472_00081800(*relocation_entry);\n  return relocation_entry;\n}\n\n",
            "current_name": "update_relocation_entry_00081472",
            "entrypoint": "0x00081472",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081472": "update_relocation_entry_00081472",
                "param_1": "relocation_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081480": {
            "additional_data": {
                "*param_1": {
                    "1": "first_parameter",
                    "2": "relocation_entry_value"
                },
                "FUN_00081480": {
                    "1": "reset_param",
                    "10": "reset_relocation_entry",
                    "2": "reset_and_clear",
                    "9": "clear_relocation_entry"
                },
                "param_1": {
                    "1": "param",
                    "15": "relocation_entry",
                    "2": "parameters",
                    "4": "entry"
                },
                "param_1[1]": {
                    "1": "relocation_entry_field_1",
                    "2": "second_element",
                    "3": "relocation_entry[1]"
                },
                "param_1[2]": {
                    "1": "data[2]",
                    "2": "third_element",
                    "3": "relocation_entry[2]"
                },
                "relocation_entry[1]": {
                    "1": "relocation_entry->field1"
                },
                "relocation_entry[2]": {
                    "1": "relocation_entry->field2"
                },
                "update_relocation_entry_00081800": {
                    "16": "update_relocation_entry"
                }
            },
            "called": [
                "FUN_00081800"
            ],
            "calling": [
                "FUN_000814d0"
            ],
            "code": "\nvoid reset_relocation_entry_00081480(int *relocation_entry)\n\n{\n  if (*relocation_entry != 0) {\n    update_relocation_entry();\n  }\n  *relocation_entry = 0;\n  relocation_entry[2] = 0;\n  relocation_entry[1] = 0;\n  return;\n}\n\n",
            "current_name": "reset_relocation_entry_00081480",
            "entrypoint": "0x00081480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081480": "reset_relocation_entry_00081480",
                "param_1": "relocation_entry",
                "param_1[1]": "relocation_entry[1]",
                "param_1[2]": "relocation_entry[2]",
                "update_relocation_entry_00081800": "update_relocation_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081496": {
            "additional_data": {
                "FUN_00081496": {
                    "1": "allocate_update_memory",
                    "16": "allocate_and_update_memory",
                    "3": "update_memory_allocation",
                    "5": "update_memory"
                },
                "iVar1": {
                    "1": "status",
                    "2": "allocation_status",
                    "24": "result"
                },
                "param_1": {
                    "2": "memory_address",
                    "9": "memory_ptr"
                },
                "param_2": {
                    "1": "num_elements",
                    "28": "size"
                },
                "param_3": {
                    "1": "param",
                    "11": "arg1",
                    "2": "value1",
                    "3": "param_3",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "parameter_2",
                    "11": "arg2",
                    "2": "value2",
                    "3": "param_4",
                    "4": "arg4"
                }
            },
            "called": [
                "FUN_00081f9c"
            ],
            "calling": [
                "FUN_000814ae"
            ],
            "code": "\nint allocate_and_update_memory_00081496(int *memory,int size,undefined4 arg1,undefined4 arg2)\n\n{\n  int result;\n  \n  result = allocate_or_update_memory_00081f9c(*memory,size + 1,arg1,arg2,arg2);\n  if (result != 0) {\n    *memory = result;\n    memory[1] = size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "allocate_and_update_memory_00081496",
            "entrypoint": "0x00081496",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081496": "allocate_and_update_memory_00081496",
                "iVar1": "result",
                "param_1": "memory",
                "param_2": "size",
                "param_3": "arg1",
                "param_4": "arg2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814ae": {
            "additional_data": {
                "FUN_000814ae": {
                    "1": "update_memory_if_invalid",
                    "2": "allocate_and_update_if_needed",
                    "3": "check_and_update_memory",
                    "4": "check_memory_allocation",
                    "8": "check_and_allocate_memory",
                    "9": "allocate_and_update_memory"
                },
                "iVar1": {
                    "16": "allocation_result",
                    "2": "result",
                    "9": "allocation_status"
                },
                "param_1": {
                    "1": "memory_array",
                    "2": "memory_block",
                    "3": "memory_ptr",
                    "7": "memory_pointer",
                    "9": "memory"
                },
                "param_2": {
                    "1": "desired_value",
                    "16": "required_size",
                    "2": "desired_size",
                    "3": "size",
                    "5": "required_memory_size"
                }
            },
            "called": [
                "FUN_00081496"
            ],
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "code": "\nundefined4 allocate_and_update_memory_000814ae(int *memory,uint required_size)\n\n{\n  int allocation_result;\n  \n  if ((*memory == 0) || ((uint)memory[1] < required_size)) {\n    allocation_result = allocate_and_update_memory_000814ae_00081496(memory);\n    if (allocation_result == 0) {\n      return 0;\n    }\n    if (memory[2] == 0) {\n      *(undefined *)*memory = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "allocate_and_update_memory_000814ae",
            "entrypoint": "0x000814ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814ae": "allocate_and_update_memory_000814ae",
                "iVar1": "allocation_result",
                "param_1": "memory",
                "param_2": "required_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814d0": {
            "additional_data": {
                "FUN_000814d0": {
                    "1": "allocate_and_update_memory",
                    "13": "update_memory_and_copy_string",
                    "3": "process_memory_allocation",
                    "4": "update_and_copy_string",
                    "8": "update_memory"
                },
                "allocate_and_update_memory_000814ae": {
                    "1": "allocate_and_update_memory"
                },
                "copy_string_000825cc": {
                    "1": "copy_string"
                },
                "iVar1": {
                    "1": "allocation_result_var",
                    "20": "allocation_result",
                    "7": "allocation_status"
                },
                "param_1": {
                    "1": "memory_ptr",
                    "2": "memory_array",
                    "3": "result",
                    "5": "memory_block",
                    "8": "memory"
                },
                "param_2": {
                    "1": "string_to_copy",
                    "2": "source",
                    "24": "source_string"
                },
                "param_3": {
                    "1": "replacement_value",
                    "12": "new_size",
                    "2": "memory_size",
                    "3": "new_memory",
                    "6": "size"
                },
                "reset_relocation_entry_00081480": {
                    "1": "reset_relocation_entry"
                }
            },
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "calling": [
                "FUN_000814f6"
            ],
            "code": "\nundefined4 * update_memory_and_copy_string_000814d0(undefined4 *memory,undefined4 source_string,undefined4 new_size)\n\n{\n  int allocation_result;\n  \n  allocation_result = allocate_and_update_memory(memory,new_size);\n  if (allocation_result == 0) {\n    reset_relocation_entry(memory);\n  }\n  else {\n    memory[2] = new_size;\n    copy_string(*memory,source_string);\n  }\n  return memory;\n}\n\n",
            "current_name": "update_memory_and_copy_string_000814d0",
            "entrypoint": "0x000814d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814d0": "update_memory_and_copy_string_000814d0",
                "allocate_and_update_memory_000814ae": "allocate_and_update_memory",
                "copy_string_000825cc": "copy_string",
                "iVar1": "allocation_result",
                "param_1": "memory",
                "param_2": "source_string",
                "param_3": "new_size",
                "reset_relocation_entry_00081480": "reset_relocation_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814f6": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize_param_with_zeros"
                },
                "FUN_000814f6": {
                    "1": "decode_and_copy_string",
                    "15": "initialize_memory",
                    "2": "initialize_and_copy_string",
                    "3": "update_memory_and_copy_string"
                },
                "count_leading_zeros_00082688": {
                    "1": "count_leading_zeros"
                },
                "param_1": {
                    "1": "result_array",
                    "2": "result",
                    "3": "memory_array",
                    "4": "memory_ptr",
                    "5": "memory",
                    "6": "output_array"
                },
                "param_2": {
                    "1": "input_number",
                    "26": "input_value",
                    "4": "value"
                },
                "uVar1": {
                    "1": "number_of_leading_zeros",
                    "2": "num_leading_zeros",
                    "25": "leading_zeros_count"
                },
                "update_memory_and_copy_string_000814d0": {
                    "1": "copy_string_to_memory"
                }
            },
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nundefined4 * initialize_memory_000814f6(undefined4 *output_array,int input_value)\n\n{\n  undefined4 leading_zeros_count;\n  \n  *output_array = 0;\n  output_array[1] = 0;\n  output_array[2] = 0;\n  if (input_value != 0) {\n    leading_zeros_count = count_leading_zeros(input_value);\n    update_memory_and_copy_string(output_array,input_value,leading_zeros_count);\n  }\n  return output_array;\n}\n\n",
            "current_name": "initialize_memory_000814f6",
            "entrypoint": "0x000814f6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814f6": "initialize_memory_000814f6",
                "count_leading_zeros_00082688": "count_leading_zeros",
                "param_1": "output_array",
                "param_2": "input_value",
                "uVar1": "leading_zeros_count",
                "update_memory_and_copy_string_000814d0": "update_memory_and_copy_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008151c": {
            "additional_data": {
                "FUN_0008151c": {
                    "1": "copy_and_update_values",
                    "2": "copy_and_reset_parameters",
                    "3": "update_param",
                    "4": "copy_and_update_params",
                    "6": "update_parameters"
                },
                "LAB_00081558": {
                    "1": "end_loop"
                },
                "copy_string_000825cc": {
                    "1": "copy_string_and_update",
                    "21": "copy_string"
                },
                "param_1": {
                    "1": "src",
                    "5": "source",
                    "6": "destination",
                    "7": "source_param",
                    "9": "source_params"
                },
                "param_1[1]": {
                    "1": "src_params[1]"
                },
                "param_1[2]": {
                    "1": "src_params[2]"
                },
                "param_2": {
                    "1": "src",
                    "3": "destination_param",
                    "4": "destination_params",
                    "5": "target_params",
                    "6": "source"
                },
                "param_2[1]": {
                    "1": "dest_params[1]"
                },
                "param_2[2]": {
                    "1": "dest_params[2]"
                },
                "update_relocation_entry_00081800": {
                    "23": "update_relocation_entry"
                }
            },
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_00081560"
            ],
            "code": "\nvoid update_parameters_0008151c(int *source_params,int *source)\n\n{\n  if (*source_params != 0) {\n    if ((*source != 0) && ((uint)dest_params[2] <= (uint)src_params[1])) {\n      copy_string();\n      src_params[2] = dest_params[2];\n      goto end_loop;\n    }\n    update_relocation_entry();\n  }\n  *source_params = *source;\n  src_params[1] = dest_params[1];\n  src_params[2] = dest_params[2];\n  *source = 0;\n  dest_params[1] = 0;\nend_loop:\n  dest_params[2] = 0;\n  return;\n}\n\n",
            "current_name": "update_parameters_0008151c",
            "entrypoint": "0x0008151c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008151c": "update_parameters_0008151c",
                "LAB_00081558": "end_loop",
                "copy_string_000825cc": "copy_string",
                "param_1": "source_params",
                "param_1[1]": "src_params[1]",
                "param_1[2]": "src_params[2]",
                "param_2": "source",
                "param_2[1]": "dest_params[1]",
                "param_2[2]": "dest_params[2]",
                "update_relocation_entry_00081800": "update_relocation_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081560": {
            "additional_data": {
                "FUN_00081560": {
                    "1": "update_if_unequal",
                    "17": "check_and_update_parameters",
                    "2": "update_if_different"
                },
                "param_1": {
                    "1": "old_parameter",
                    "2": "input1",
                    "3": "value1",
                    "4": "input_value",
                    "6": "input_param",
                    "8": "value_1"
                },
                "param_2": {
                    "1": "reference_value",
                    "2": "comparison_value",
                    "3": "value2",
                    "4": "comparison_param",
                    "8": "value_2"
                },
                "update_parameters_0008151c": {
                    "3": "update_parameters"
                }
            },
            "called": [
                "FUN_0008151c"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint check_and_update_parameters_00081560(int value_1,int value_2)\n\n{\n  if (value_1 != value_2) {\n    update_parameters();\n  }\n  return value_1;\n}\n\n",
            "current_name": "check_and_update_parameters_00081560",
            "entrypoint": "0x00081560",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081560": "check_and_update_parameters_00081560",
                "param_1": "value_1",
                "param_2": "value_2",
                "update_parameters_0008151c": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081570": {
            "additional_data": {
                "FUN_00081570": {
                    "1": "allocate_and_copy_text",
                    "12": "allocate_and_update_memory",
                    "2": "update_and_copy_string",
                    "6": "update_memory_and_copy_string"
                },
                "iVar1": {
                    "2": "result",
                    "25": "allocation_result",
                    "4": "allocation_status"
                },
                "iVar2": {
                    "1": "element2",
                    "2": "memory_offset",
                    "3": "current_length",
                    "6": "current_size"
                },
                "param_1": {
                    "1": "memory_params",
                    "11": "array",
                    "2": "memory",
                    "3": "memory_array"
                },
                "param_2": {
                    "1": "text_size",
                    "13": "string_length",
                    "7": "length"
                },
                "param_3": {
                    "1": "length",
                    "10": "additional_length",
                    "9": "additional_memory"
                }
            },
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "calling": [
                "FUN_0008159e"
            ],
            "code": "\nundefined4 allocate_and_update_memory_00081570(int *array,int string_length,int additional_size)\n\n{\n  int allocation_result;\n  int current_size;\n  \n  current_size = array[2];\n  if (string_length == 0) {\n    return 0;\n  }\n  if (additional_size != 0) {\n    allocation_result = allocate_and_update_memory_00081570_000814ae(array,current_size + additional_size);\n    if (allocation_result == 0) {\n      return 0;\n    }\n    copy_string_000825cc(*array + array[2],string_length);\n    array[2] = current_size + additional_size;\n  }\n  return 1;\n}\n\n",
            "current_name": "allocate_and_update_memory_00081570",
            "entrypoint": "0x00081570",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081570": "allocate_and_update_memory_00081570",
                "iVar1": "allocation_result",
                "iVar2": "current_size",
                "param_1": "array",
                "param_2": "string_length",
                "param_3": "additional_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008159e": {
            "additional_data": {
                "FUN_0008159e": {
                    "1": "initialize_and_update_memory",
                    "20": "allocate_and_update_memory",
                    "9": "update_memory"
                },
                "local_c": {
                    "1": "output_buffer",
                    "2": "local_variable_c",
                    "6": "local_variable",
                    "8": "allocated_memory"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_value",
                    "4": "input1",
                    "6": "input_param1",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "destination_data",
                    "10": "unused_param",
                    "3": "input_param2"
                },
                "param_3": {
                    "1": "param",
                    "3": "memory_value",
                    "4": "memory_param",
                    "5": "input_param3"
                },
                "uStack_8": {
                    "1": "updated_memory",
                    "2": "stack_variable8",
                    "4": "stack_variable"
                }
            },
            "called": [
                "FUN_00081570"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nvoid allocate_and_update_memory_0008159e(undefined4 input_param,undefined4 unused_param,undefined4 input_param3)\n\n{\n  undefined4 allocated_memory;\n  undefined4 stack_variable;\n  \n  stack_variable = input_param3;\n  allocate_and_update_memory_0008159e_00081570(input_param,&allocated_memory,1,0,input_param);\n  return;\n}\n\n",
            "current_name": "allocate_and_update_memory_0008159e",
            "entrypoint": "0x0008159e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008159e": "allocate_and_update_memory_0008159e",
                "local_c": "allocated_memory",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "input_param3",
                "uStack_8": "stack_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815b8": {
            "additional_data": {
                "FUN_000815b8": {
                    "1": "compare_and_validate_input",
                    "2": "check_array_value",
                    "4": "check_array",
                    "6": "compare_and_return_result"
                },
                "iVar2": {
                    "1": "difference",
                    "14": "result",
                    "3": "is_valid",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "source_array",
                    "10": "array_pointer",
                    "12": "array",
                    "2": "array1",
                    "3": "input_array"
                },
                "param_2": {
                    "1": "value_ptr",
                    "2": "array2",
                    "3": "value",
                    "4": "value_pointer"
                },
                "uVar1": {
                    "1": "array1_length",
                    "10": "array_length",
                    "11": "array_comparison_result",
                    "5": "comparison_result"
                }
            },
            "called": [
                "FUN_00082390"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint compare_and_return_result_000815b8(byte **array,byte *element)\n\n{\n  uint array_comparison_result;\n  int result;\n  \n  if (array[2] == (byte *)0x0) {\n    if (element == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (element != (byte *)0x0) {\n      array_comparison_result = compare_arrays_00082390(*array);\n      goto LAB_000815d4;\n    }\n    element = *array;\n  }\n  array_comparison_result = (uint)*element;\nLAB_000815d4:\n  result = 1 - array_comparison_result;\n  if (1 < array_comparison_result) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "compare_and_return_result_000815b8",
            "entrypoint": "0x000815b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815b8": "compare_and_return_result_000815b8",
                "iVar2": "result",
                "param_1": "array",
                "param_2": "element",
                "uVar1": "array_comparison_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815de": {
            "additional_data": {
                "**param_1": {
                    "1": "input_data"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "array"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "1": "info_table2"
                },
                "Elf32_Rel_ARRAY_20070000[270].r_info": {
                    "1": "info_table1"
                },
                "FUN_000815de": {
                    "1": "extract_integer_from_bytes",
                    "17": "parse_integer",
                    "2": "parse_input",
                    "3": "parse_number"
                },
                "bVar1": {
                    "1": "first_byte",
                    "2": "next_byte",
                    "3": "flags",
                    "4": "byte1",
                    "6": "current_byte",
                    "7": "byte_value"
                },
                "bVar2": {
                    "1": "flag2",
                    "20": "is_negative"
                },
                "iVar7": {
                    "1": "difference",
                    "2": "digit",
                    "3": "temp"
                },
                "iVar8": {
                    "1": "parse_state",
                    "2": "is_negative",
                    "7": "is_valid"
                },
                "param_1": {
                    "1": "string_ptr",
                    "15": "input",
                    "2": "input_string",
                    "3": "input_data"
                },
                "pbVar4": {
                    "1": "current_pointer",
                    "11": "current_byte",
                    "2": "current_byte_ptr",
                    "9": "ptr"
                },
                "pbVar6": {
                    "1": "next_pos",
                    "2": "next_byte_ptr",
                    "3": "next_ptr",
                    "5": "current_byte",
                    "8": "next_byte"
                },
                "uVar10": {
                    "1": "max_int",
                    "10": "min_value",
                    "2": "sign_limit",
                    "3": "limit",
                    "5": "max_value"
                },
                "uVar3": {
                    "1": "parsed_value",
                    "18": "result",
                    "5": "parsed_integer",
                    "6": "parsed_number"
                },
                "uVar5": {
                    "1": "current_index",
                    "11": "current_value",
                    "2": "char_value",
                    "5": "current_byte_value",
                    "7": "byte_value"
                },
                "uVar9": {
                    "1": "max_value_divided",
                    "2": "limit",
                    "3": "threshold",
                    "4": "divisor",
                    "9": "max_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_integer_000815de(byte **input)\n\n{\n  byte byte_value;\n  byte is_negative;\n  uint result;\n  byte *current_byte;\n  uint current_value;\n  byte *next_byte;\n  int temp;\n  int is_valid;\n  uint max_value;\n  uint min_value;\n  \n  current_byte = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    next_byte = current_byte;\n    current_byte = next_byte + 1;\n    current_value = (uint)*next_byte;\n    byte_value = *(byte *)(info_table1 + current_value + 1);\n    is_negative = byte_value & 8;\n  } while ((byte_value & 8) != 0);\n  if (current_value == 0x2d) {\n    current_byte = next_byte + 2;\n    current_value = (uint)next_byte[1];\n    is_negative = 1;\n  }\n  else if (current_value == 0x2b) {\n    current_value = (uint)next_byte[1];\n    current_byte = next_byte + 2;\n  }\n  if (is_negative == 0) {\n    min_value = 0x7fffffff;\n  }\n  else {\n    min_value = 0x80000000;\n  }\n  max_value = min_value / 10;\n  is_valid = 0;\n  result = 0;\n  do {\n    byte_value = *(byte *)(info_table1 + current_value + 1);\n    if ((byte_value & 4) == 0) {\n      if ((byte_value & 3) == 0) {\nLAB_0008277e:\n        if (is_valid == -1) {\n          if (is_negative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)info_table2 = 0x22;\n        }\n        else if (is_negative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((byte_value & 3) == 1) {\n        temp = 0x37;\n      }\n      else {\n        temp = 0x57;\n      }\n      temp = current_value - temp;\n    }\n    else {\n      temp = current_value - 0x30;\n    }\n    if (9 < temp) goto LAB_0008277e;\n    if (is_valid != -1) {\n      if ((max_value <= result && result != max_value) || ((result == max_value && ((int)(min_value % 10) < temp))))\n      {\n        is_valid = -1;\n      }\n      else {\n        result = result * 10 + temp;\n        is_valid = 1;\n      }\n    }\n    current_value = (uint)*current_byte;\n    current_byte = current_byte + 1;\n  } while( true );\n}\n\n",
            "current_name": "parse_integer_000815de",
            "entrypoint": "0x000815de",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "info_table2",
                "Elf32_Rel_ARRAY_20070000[270].r_info": "info_table1",
                "FUN_000815de": "parse_integer_000815de",
                "bVar1": "byte_value",
                "bVar2": "is_negative",
                "iVar7": "temp",
                "iVar8": "is_valid",
                "param_1": "input",
                "pbVar4": "current_byte",
                "pbVar6": "next_byte",
                "uVar10": "min_value",
                "uVar3": "result",
                "uVar5": "current_value",
                "uVar9": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815e8": {
            "called": [],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000815e8",
            "entrypoint": "0x000815e8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000815ec": {
            "additional_data": {
                "FUNC_00080f08": {
                    "1": "set_operating_mode",
                    "2": "configure_system",
                    "3": "set_configuration",
                    "6": "function_b",
                    "8": "set_mode"
                },
                "FUNC_000815e8": {
                    "1": "perform_initial_operations",
                    "2": "perform_initialization",
                    "3": "initialize_functions",
                    "6": "function_a"
                },
                "FUN_000815ec": {
                    "1": "main",
                    "16": "run_control_system",
                    "2": "run_control_loop",
                    "4": "initialize_system",
                    "7": "main_loop"
                },
                "check_and_execute_functions_00080970": {
                    "1": "check_and_execute_tasks",
                    "23": "check_and_execute_functions",
                    "5": "execute_functions"
                },
                "control_system_00080250": {
                    "1": "process_control_system",
                    "16": "control_system",
                    "2": "run_control",
                    "4": "run_control_system"
                },
                "initialize_and_configure_00080774": {
                    "1": "initialize_and_configure_device",
                    "2": "initialize_and_configure_system",
                    "28": "initialize_and_configure"
                },
                "initialize_configuration_000801e0": {
                    "31": "initialize_configuration"
                },
                "initialize_data_00081618": {
                    "1": "initialize_data_structure",
                    "30": "initialize_data"
                }
            },
            "called": [
                "FUN_000815e8",
                "FUN_00080774",
                "FUN_00080250",
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_000801e0"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid run_control_system_000815ec(void)\n\n{\n  initialize_data();\n  initialize_and_configure();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  initialize_configuration();\n  do {\n    control_system();\n    check_and_execute_functions();\n  } while( true );\n}\n\n",
            "current_name": "run_control_system_000815ec",
            "entrypoint": "0x000815ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815ec": "run_control_system_000815ec",
                "check_and_execute_functions_00080970": "check_and_execute_functions",
                "control_system_00080250": "control_system",
                "initialize_and_configure_00080774": "initialize_and_configure",
                "initialize_configuration_000801e0": "initialize_configuration",
                "initialize_data_00081618": "initialize_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081618": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "FUN_00081618": {
                    "1": "initialize_register",
                    "11": "initialize_data",
                    "2": "set_memory_address",
                    "3": "initialize_memory_address",
                    "5": "initialize_memory",
                    "6": "set_initial_value"
                },
                "_DAT_400e1a54": {
                    "1": "global_var",
                    "2": "register_value",
                    "3": "data_pointer",
                    "5": "data_flag",
                    "7": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\n\n\nvoid initialize_data_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "current_name": "initialize_data_00081618",
            "entrypoint": "0x00081618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081618": "initialize_data_00081618"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081624": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf32_rel_array",
                    "2": "offset_array",
                    "3": "relocation_array",
                    "5": "rel_array",
                    "6": "array"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "offset_constant",
                    "2": "offset"
                },
                "FUN_00081624": {
                    "1": "calculate_processed_time",
                    "2": "calculate_function_result",
                    "3": "calculate_time",
                    "4": "calculate_time_offset",
                    "5": "calculate_result",
                    "6": "calculate_elapsed_time"
                },
                "check_and_count_00081684": {
                    "1": "count_check_func",
                    "5": "check_and_count"
                },
                "iVar1": {
                    "1": "delay",
                    "26": "result",
                    "3": "elapsed_time"
                },
                "param_1": {
                    "1": "input_param1",
                    "29": "index"
                },
                "param_2": {
                    "1": "input_param2",
                    "22": "flag",
                    "4": "is_zero"
                },
                "param_3": {
                    "1": "factor",
                    "28": "multiplier"
                },
                "param_4": {
                    "1": "value",
                    "10": "param",
                    "6": "constant",
                    "8": "offset"
                },
                "r_offset": {
                    "1": "offset"
                },
                "uVar2": {
                    "1": "processed_time",
                    "18": "value",
                    "2": "initial_value",
                    "9": "offset"
                }
            },
            "called": [
                "FUN_00081684"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_elapsed_time_00081624(int index,int flag,int multiplier,undefined4 param)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = check_and_count(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((offset / 1000000) * multiplier) / 0x12,param);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)offset / 1000));\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_elapsed_time_00081624",
            "entrypoint": "0x00081624",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "offset",
                "FUN_00081624": "calculate_elapsed_time_00081624",
                "check_and_count_00081684": "check_and_count",
                "iVar1": "result",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "param",
                "r_offset": "array_offset",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081684": {
            "additional_data": {
                "FUN_00081684": {
                    "1": "find_first_occurrence",
                    "2": "check_and_count_matches",
                    "3": "check_param",
                    "4": "check_and_count"
                },
                "iVar1": {
                    "1": "occurrence_count",
                    "2": "result",
                    "3": "iteration_count",
                    "4": "match_count",
                    "7": "index"
                },
                "iVar2": {
                    "1": "index"
                },
                "param_1": {
                    "1": "data_pointer",
                    "2": "input_array",
                    "3": "data_ptr",
                    "5": "array",
                    "9": "data"
                },
                "param_2": {
                    "1": "check_mask",
                    "22": "mask",
                    "8": "bit_mask"
                },
                "param_3": {
                    "1": "compare_value",
                    "2": "comparison_value",
                    "3": "pattern",
                    "4": "target",
                    "5": "target_value",
                    "6": "expected_value"
                },
                "param_4": {
                    "1": "iteration_count",
                    "11": "max_iterations",
                    "3": "length",
                    "4": "count",
                    "5": "array_length"
                },
                "return": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081624"
            ],
            "code": "\nint check_and_count_00081684(uint *data,uint mask,uint expected_value,int max_iterations)\n\n{\n  int index;\n  \n  do {\n    if ((*data & mask) != expected_value) {\n      do {\n        if ((*data & mask) == expected_value) {\n          index = 0;\n          do {\n            if ((*data & mask) != expected_value) {\n              result index;\n            }\n            index = index + 1;\n          } while (max_iterations != index);\n          result 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      result 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  result 0;\n}\n\n",
            "current_name": "check_and_count_00081684",
            "entrypoint": "0x00081684",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081684": "check_and_count_00081684",
                "iVar1": "index",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "expected_value",
                "param_4": "max_iterations",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816d8": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "get_global_variable_value"
                },
                "DAT_2007120c": {
                    "1": "result",
                    "2": "global_value",
                    "9": "data"
                },
                "FUN_000816d8": {
                    "1": "get_stored_value",
                    "11": "get_data",
                    "2": "get_return_value",
                    "3": "get_global_value",
                    "9": "get_data_value"
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "code": "\nundefined4 get_data_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "current_name": "get_data_000816d8",
            "entrypoint": "0x000816d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816d8": "get_data_000816d8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816ec": {
            "additional_data": {
                "(*UNRECOVERED_JUMPTABLE_00)": {
                    "1": "perform_jump"
                },
                "0x20070184": {
                    "1": "default_offset"
                },
                "0xff": {
                    "1": "mask"
                },
                "400": {
                    "1": "allocation_size"
                },
                "48": {
                    "1": "index"
                },
                "99": {
                    "1": "bit_field2"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_entries",
                    "2": "rel_array",
                    "7": "relocation_array"
                },
                "FUN_000816ec": {
                    "1": "update_record_in_array",
                    "2": "update_relocation_table",
                    "5": "update_data",
                    "6": "update_relocation_entry"
                },
                "FUN_000817f0": {
                    "1": "allocate_memory"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jmp_table",
                    "2": "jump_table_function",
                    "7": "jump_table"
                },
                "dword param_1": {
                    "1": "new_value1"
                },
                "dword param_2": {
                    "1": "new_value2"
                },
                "dword param_3": {
                    "1": "new_value3"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "input1",
                    "3": "data1",
                    "7": "address",
                    "9": "new_value1"
                },
                "param_2": {
                    "1": "new_data",
                    "2": "input2",
                    "3": "data2",
                    "7": "value",
                    "9": "new_value2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "input3",
                    "3": "offset",
                    "9": "new_value3"
                },
                "pdVar1": {
                    "1": "mem_ptr",
                    "3": "array_pointer",
                    "8": "relocation_entry"
                },
                "pdVar1[0x22]": {
                    "1": "updated_value1"
                },
                "pdVar1[0x42]": {
                    "1": "updated_value2"
                },
                "pdVar1[0x62]": {
                    "1": "bit_field1"
                },
                "pdVar1[1]": {
                    "1": "updated_index"
                },
                "r_offset": {
                    "3": "offset"
                },
                "uVar2": {
                    "1": "value1",
                    "2": "entry_index",
                    "25": "index"
                },
                "uVar3": {
                    "1": "bitwise_shift",
                    "19": "bit_mask",
                    "2": "bit",
                    "3": "bitmask"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_relocation_entry_000816ec(dword new_value1,dword new_value2,dword new_value3)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  code *jump_table;\n  \n  if (relocation_array[48].offset == 0) {\n    relocation_array[48].offset = 0x20070184;\n  }\n  index = *(uint *)(relocation_array[48].offset + 4);\n  relocation_entry = (dword *)relocation_array[48].offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)allocate_memory_000817f0(400);\n    if (relocation_entry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *relocation_entry = relocation_array[48].offset;\n    updated_index = 0;\n    index = 0;\n    relocation_array[48].offset = (dword)relocation_entry;\n    bit_field1 = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = new_value1;\n  bit_field1 = bit_field1 | bit_mask;\n  relocation_entry[index + 0x42] = new_value3;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  updated_index = index + 1;\n  relocation_entry[index + 2] = new_value2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "update_relocation_entry_000816ec",
            "entrypoint": "0x000816ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "pdVar1": "relocation_entry",
                "pdVar1[0x62]": "bit_field1",
                "pdVar1[1]": "updated_index",
                "r_offset": "offset",
                "uVar2": "index",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816f8": {
            "additional_data": {
                "FUN_000816f8": {
                    "1": "process_relocation",
                    "2": "validate_assertion",
                    "3": "assertion_failed",
                    "9": "execute_assertion"
                },
                "param_1": {
                    "1": "file_path",
                    "11": "file_name",
                    "2": "assertion",
                    "3": "message",
                    "7": "file"
                },
                "param_2": {
                    "1": "file_name",
                    "17": "line_number",
                    "4": "file",
                    "7": "line"
                },
                "param_3": {
                    "1": "condition",
                    "2": "failed_assertion",
                    "3": "file_name",
                    "4": "assertion",
                    "7": "assertion_message"
                },
                "param_4": {
                    "1": "additional_info",
                    "17": "function_name",
                    "4": "message",
                    "6": "function"
                },
                "pcVar3": {
                    "1": "context",
                    "2": "extra_info",
                    "3": "additional_info"
                },
                "uVar1": {
                    "1": "symbol_offset",
                    "10": "relocation_offset",
                    "2": "relocation_value",
                    "4": "offset"
                },
                "uVar2": {
                    "1": "function_identifier",
                    "2": "function_argument",
                    "3": "temp_param"
                },
                "uVar4": {
                    "1": "u_var_process_and_jump",
                    "23": "result",
                    "3": "processed_result"
                }
            },
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "code": "\nvoid execute_assertion_000816f8(undefined4 file_name,undefined4 line_number,char *assertion_message,undefined4 function_name)\n\n{\n  undefined4 relocation_offset;\n  undefined4 temp_param;\n  char *additional_message;\n  undefined8 result;\n  \n  relocation_offset = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion_message == (char *)0x0) goto LAB_0008171c;\n  temp_param = function_name;\n  additional_message = \", function: \";\n  do {\n    function_name = file_name;\n    execute_relocation_00081750(relocation_offset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",temp_param,file_name,line_number,\n                 additional_message,assertion_message);\n    result = process_and_jump_000836ec();\n    line_number = (undefined4)((ulonglong)result >> 0x20);\n    relocation_offset = (undefined4)result;\nLAB_0008171c:\n    assertion_message = \"\";\n    temp_param = function_name;\n    additional_message = assertion_message;\n  } while( true );\n}\n\n",
            "current_name": "execute_assertion_000816f8",
            "entrypoint": "0x000816f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816f8": "execute_assertion_000816f8",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "assertion_message",
                "param_4": "function_name",
                "pcVar3": "additional_message",
                "uVar1": "relocation_offset",
                "uVar2": "temp_param",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081750": {
            "additional_data": {
                "FUN_00081750": {
                    "1": "decompile_and_call_function",
                    "5": "process_relocation",
                    "6": "execute_relocation"
                },
                "param_1": {
                    "1": "input_arg1",
                    "13": "offset",
                    "2": "input1",
                    "3": "arg1"
                },
                "param_2": {
                    "1": "param",
                    "2": "input2",
                    "3": "arg2",
                    "4": "arg1",
                    "9": "param1"
                },
                "param_3": {
                    "1": "param_2",
                    "2": "relocation_offset",
                    "3": "arg3",
                    "4": "arg2",
                    "8": "param2"
                },
                "param_4": {
                    "1": "num_relocations",
                    "2": "output2",
                    "3": "arg4",
                    "4": "arg3",
                    "8": "param3"
                },
                "uStack_4": {
                    "1": "relocation_value",
                    "2": "temp_output2"
                },
                "uStack_8": {
                    "1": "arg2_relocated",
                    "2": "stack_arg1",
                    "5": "relocation_offset"
                }
            },
            "called": [
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_000816f8"
            ],
            "code": "\nvoid execute_relocation_00081750(undefined4 offset,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 relocation_offset;\n  undefined4 temp_output2;\n  \n  relocation_offset = param2;\n  temp_output2 = param3;\n  process_formatted_string_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,param1,&relocation_offset);\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_00081750(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1,param_2,&uStack_8);\n  return;\n}\n\n",
            "current_name": "execute_relocation_00081750",
            "entrypoint": "0x00081750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081750": "execute_relocation_00081750",
                "param_1": "offset",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uStack_4": "temp_output2",
                "uStack_8": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081778": {
            "additional_data": {
                "**ppcVar2": {
                    "1": "call_function"
                },
                "0x8584c": {
                    "1": "function_set"
                },
                "FUNC_00085844": {
                    "1": "initialize_function",
                    "4": "initialize_function_set"
                },
                "FUN_00081778": {
                    "1": "execute_functions_sequentially",
                    "17": "execute_function_set",
                    "2": "execute_four_functions"
                },
                "do": {
                    "1": "do_loop"
                },
                "iVar1": {
                    "1": "iterator",
                    "2": "iteration_counter",
                    "22": "iteration_count",
                    "4": "counter"
                },
                "ppcVar2": {
                    "1": "function_array_ptr",
                    "10": "function_pointer",
                    "2": "function_list",
                    "4": "function_set_pointer",
                    "5": "function_pointers",
                    "6": "function_pointer_array"
                }
            },
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid execute_function_set_00081778(void)\n\n{\n  int iteration_count;\n  code **function_pointer;\n  \n  FUNC_00085844();\n  function_pointer = (code **)0x8584c;\n  iteration_count = 0;\n  do_loop {\n    iteration_count = iteration_count + 1;\n    function_pointer = function_pointer + 1;\n    (**function_pointer)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "current_name": "execute_function_set_00081778",
            "entrypoint": "0x00081778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081778": "execute_function_set_00081778",
                "do": "do_loop",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000817c8": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_array"
                },
                "FUNC_0008289c": {
                    "1": "process_data_entry"
                },
                "FUN_000817c8": {
                    "1": "execute_function_with_params",
                    "3": "execute_function",
                    "4": "process_data"
                },
                "param_1": {
                    "1": "source_param",
                    "19": "input_param",
                    "2": "param1",
                    "3": "input_parameter"
                },
                "param_2": {
                    "1": "temp_param_1",
                    "2": "param_2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "third_parameter",
                    "2": "offset_param",
                    "7": "param3"
                },
                "param_4": {
                    "1": "address_param",
                    "2": "fourth_param",
                    "7": "param4"
                },
                "uStack_4": {
                    "1": "stack_variable_3",
                    "2": "param4_copy",
                    "4": "stack_var3"
                },
                "uStack_8": {
                    "1": "updated_value1",
                    "2": "param3_copy",
                    "4": "stack_var2"
                },
                "uStack_c": {
                    "1": "temp_variable_1",
                    "2": "param2_copy",
                    "3": "stack_variable_c",
                    "4": "stack_var1"
                }
            },
            "called": [
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_00080eec"
            ],
            "code": "\nvoid process_data_000817c8(undefined4 input_param,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 stack_var3;\n  \n  stack_var1 = param2;\n  stack_var2 = param3;\n  stack_var3 = param4;\n  process_formatted_string_0008289c(relocation_array[140].r_offset,\n               *(undefined4 *)(relocation_array[140].r_offset + 8),input_param,&stack_var1);\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_000817c8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param_1,&uStack_c);\n  return;\n}\n\n",
            "current_name": "process_data_000817c8",
            "entrypoint": "0x000817c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "input_param",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_4": "stack_var3",
                "uStack_8": "stack_var2",
                "uStack_c": "stack_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000817f0": {
            "additional_data": {
                ".r_offset": {
                    "1": ".relocation_offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "2": "elf_relocation_array",
                    "3": "rel_array",
                    "4": "relocation_array",
                    "5": "relocation_table"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "1": "memory_offset",
                    "3": "offset"
                },
                "FUN_000817f0": {
                    "1": "allocate_relocated_memory",
                    "14": "allocate_memory",
                    "2": "allocate_memory_from_elf32_rel",
                    "3": "allocate_memory_from_offset"
                },
                "allocate_memory_00081810": {
                    "1": "allocate_memory"
                },
                "param_1": {
                    "1": "data_to_allocate",
                    "15": "memory_size",
                    "2": "param",
                    "5": "size"
                },
                "r_offset": {
                    "1": "relocation_offset"
                }
            },
            "called": [
                "FUN_00081810"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nvoid allocate_memory_000817f0(undefined4 memory_size)\n\n{\n  allocate_memory_000817f0(offset,memory_size);\n  return;\n}\n\n",
            "current_name": "allocate_memory_000817f0",
            "entrypoint": "0x000817f0",
            "imported": false,
            "improved": true,
            "renaming": {
                ".r_offset": ".relocation_offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "offset",
                "FUN_000817f0": "allocate_memory_000817f0",
                "allocate_memory_00081810": "allocate_memory",
                "param_1": "memory_size",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081800": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_entry_array",
                    "11": "relocation_array",
                    "7": "relocation_entries"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "1": "relocation_offset"
                },
                "FUN_00081800": {
                    "1": "update_relocation_entry_offset",
                    "29": "update_relocation_entry"
                },
                "param_1": {
                    "1": "new_entry",
                    "2": "param",
                    "4": "entry",
                    "8": "data"
                },
                "r_offset": {
                    "2": "entry_offset",
                    "4": "offset"
                }
            },
            "called": [
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_0008151c",
                "FUN_00081480",
                "FUN_00081472"
            ],
            "code": "\nvoid update_relocation_entry_00081800(undefined4 data)\n\n{\n  update_relocation_entry_00081800_00083b10(relocation_offset,data);\n  return;\n}\n\n",
            "current_name": "update_relocation_entry_00081800",
            "entrypoint": "0x00081800",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "relocation_offset",
                "FUN_00081800": "update_relocation_entry_00081800",
                "param_1": "data",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081810": {
            "additional_data": {
                "DAT_20071210": {
                    "1": "minimum_offset"
                },
                "DAT_20071214": {
                    "1": "maximum_offset"
                },
                "DAT_20071218": {
                    "1": "additional_offset"
                },
                "DAT_2007121c": {
                    "1": "new_offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_array"
                },
                "FUNC_00081f94": {
                    "1": "initialize_memory"
                },
                "FUNC_00081f98": {
                    "1": "finalize_memory"
                },
                "FUN_00081810": {
                    "1": "reverse_decompiled_code",
                    "6": "allocate_memory"
                },
                "dVar1": {
                    "1": "result",
                    "2": "relocation_info",
                    "3": "temp1"
                },
                "dVar11": {
                    "1": "next_relocation",
                    "2": "temp_var11"
                },
                "dVar12": {
                    "1": "pointer3",
                    "2": "prev_entry"
                },
                "dVar17": {
                    "1": "updated_entry_offset"
                },
                "dVar7": {
                    "1": "relocation_entry",
                    "2": "current_offset",
                    "3": "temp7"
                },
                "iVar13": {
                    "1": "section_index",
                    "2": "loop_counter",
                    "3": "temp_var13",
                    "5": "index"
                },
                "iVar15": {
                    "1": "temp_value4"
                },
                "iVar19": {
                    "1": "temp_int_5"
                },
                "iVar2": {
                    "1": "offset",
                    "2": "temp1",
                    "3": "temp_var2"
                },
                "iVar5": {
                    "1": "temp4",
                    "2": "temp_var",
                    "3": "temp5"
                },
                "iVar9": {
                    "1": "tmp_var7",
                    "2": "temp3",
                    "3": "temp9"
                },
                "oval_info": {
                    "1": "original_value_info"
                },
                "param_1": {
                    "1": "param_base_address",
                    "2": "output_buffer",
                    "4": "output_pointer"
                },
                "param_2": {
                    "1": "parameter_2",
                    "13": "size",
                    "2": "param_size",
                    "7": "input_size"
                },
                "pdVar14": {
                    "1": "relocation_entry",
                    "2": "loop_ptr1",
                    "4": "temp_ptr2"
                },
                "pdVar17": {
                    "1": "pointer3",
                    "2": "loop_ptr2"
                },
                "puVar10": {
                    "1": "current_pointer",
                    "2": "temp_var10",
                    "5": "ptr",
                    "7": "temp_ptr"
                },
                "puVar16": {
                    "1": "pointer3",
                    "2": "temp_var16",
                    "3": "temp_ptr3",
                    "4": "temp_ptr2"
                },
                "reverseEngineer": {
                    "1": "improved_code"
                },
                "uVar15": {
                    "1": "tmp9",
                    "2": "min_size",
                    "8": "aligned_size"
                },
                "uVar18": {
                    "1": "block_index",
                    "2": "temp_var18",
                    "3": "index2"
                },
                "uVar3": {
                    "1": "var_u3",
                    "2": "temp_var",
                    "3": "temp3"
                },
                "uVar4": {
                    "1": "difference",
                    "2": "adjusted_size",
                    "3": "temp4",
                    "4": "aligned_size"
                },
                "uVar6": {
                    "1": "start_rel_offset",
                    "2": "difference",
                    "3": "temp6"
                },
                "uVar8": {
                    "1": "temp_value3",
                    "2": "temp_var5",
                    "3": "temp8"
                },
                "update_relocation_entry_00083b10": {
                    "1": "update_relocation_entry"
                },
                "update_value_0008236c": {
                    "1": "update_relocation_offset"
                }
            },
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_000817f0",
                "FUN_00081fac"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081810(undefined4 *output_pointer,uint size)\n\n{\n  dword temp1;\n  int temp_var2;\n  uint current_size;\n  uint aligned_size;\n  int temp5;\n  uint temp6;\n  dword temp7;\n  uint temp8;\n  int temp9;\n  undefined *temp_ptr;\n  dword next_offset;\n  dword temp_var12;\n  int index;\n  dword *temp_ptr2;\n  uint aligned_size;\n  undefined *temp_ptr2;\n  dword *loop_ptr2;\n  uint index2;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_00081876:\n      *output_pointer = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(output_pointer);\n  temp1 = relocation_array[142].r_info;\n  if (aligned_size < 0x1f8) {\n    index = *(int *)((int)&relocation_array[0x8e].r_offset + aligned_size);\n    if ((index != aligned_size + 0x20070464) ||\n       (temp_var2 = index + 8, index = *(int *)(index + 0x14), temp_var2 != index)) {\n      temp5 = *(int *)(index + 0xc);\n      temp9 = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      aligned_size = *(uint *)(temp9 + 4);\n      temp_var2 = *(int *)(index + 8);\n      *(int *)(temp_var2 + 0xc) = temp5;\n      *(int *)(temp5 + 8) = temp_var2;\n      *(uint *)(temp9 + 4) = aligned_size | 1;\n      FUNC_00081f98(output_pointer);\n      return (int *)(index + 8);\n    }\n    index2 = (aligned_size >> 3) + 2;\n  }\n  else {\n    index2 = aligned_size >> 9;\n    if (index2 == 0) {\n      temp_var2 = 0x7e;\n      index = 0x3f;\n    }\n    else if (index2 < 5) {\n      index = (aligned_size >> 6) + 0x38;\n      temp_var2 = index * 2;\n    }\n    else if (index2 < 0x15) {\n      index = index2 + 0x5b;\n      temp_var2 = index * 2;\n    }\n    else if (index2 < 0x55) {\n      index = (aligned_size >> 0xc) + 0x6e;\n      temp_var2 = index * 2;\n    }\n    else if (index2 < 0x155) {\n      index = (aligned_size >> 0xf) + 0x77;\n      temp_var2 = index * 2;\n    }\n    else if (index2 < 0x555) {\n      index = (aligned_size >> 0x12) + 0x7c;\n      temp_var2 = index * 2;\n    }\n    else {\n      temp_var2 = 0xfc;\n      index = 0x7e;\n    }\n    for (temp7 = (&relocation_array[0x8e].r_offset)[temp_var2]; temp_var2 * 4 + 0x20070464U != temp7\n        ; temp7 = *(dword *)(temp7 + 0xc)) {\n      index2 = *(uint *)(temp7 + 4) & 0xfffffffc;\n      temp5 = index2 - aligned_size;\n      if (0xf < temp5) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < temp5) {\n        temp_var2 = index2 + temp7;\n        aligned_size = *(uint *)(temp_var2 + 4);\n        temp5 = *(int *)(temp7 + 0xc);\n        index = *(int *)(temp7 + 8);\n        *(int *)(index + 0xc) = temp5;\n        *(int *)(temp5 + 8) = index;\n        *(uint *)(temp_var2 + 4) = aligned_size | 1;\n        FUNC_00081f98(output_pointer);\n        return (int *)(temp7 + 8);\n      }\n    }\n    index2 = index + 1;\n  }\n  temp7 = relocation_array[141].r_offset;\n  if (relocation_array[142].r_info != 0x2007046c) {\n    current_size = *(uint *)(relocation_array[142].r_info + 4);\n    aligned_size = current_size & 0xfffffffc;\n    temp6 = aligned_size - aligned_size;\n    if (0xf < (int)temp6) {\n      temp7 = aligned_size + relocation_array[142].r_info;\n      *(uint *)(relocation_array[142].r_info + 4) = aligned_size | 1;\n      relocation_array[142].r_info = temp7;\n      relocation_array[143].r_offset = temp7;\n      *(undefined4 *)(temp7 + 0xc) = 0x2007046c;\n      *(undefined4 *)(temp7 + 8) = 0x2007046c;\n      *(uint *)(temp7 + 4) = temp6 | 1;\n      *(uint *)(temp7 + temp6) = temp6;\n      FUNC_00081f98(output_pointer);\n      return (int *)(temp1 + 8);\n    }\n    relocation_array[143].r_offset = 0x2007046c;\n    relocation_array[142].r_info = 0x2007046c;\n    if (-1 < (int)temp6) {\n      *(uint *)(aligned_size + temp1 + 4) = *(uint *)(aligned_size + temp1 + 4) | 1;\n      FUNC_00081f98(output_pointer);\n      return (int *)(temp1 + 8);\n    }\n    if (aligned_size < 0x200) {\n      aligned_size = current_size & 0xfffffff8;\n      index = *(int *)((int)&relocation_array[0x8d].r_info + aligned_size);\n      temp7 = 1 << ((int)(current_size >> 3) >> 2 & 0xffU) | relocation_array[141].r_offset;\n      *(int *)(temp1 + 8) = index;\n      *(uint *)(temp1 + 0xc) = aligned_size + 0x20070464;\n      relocation_array[141].r_offset = temp7;\n      *(dword *)((int)&relocation_array[0x8d].r_info + aligned_size) = temp1;\n      *(dword *)(index + 0xc) = temp1;\n    }\n    else {\n      temp6 = current_size >> 9;\n      if (temp6 < 5) {\n        temp_var2 = (current_size >> 6) + 0x38;\n        index = temp_var2 * 2;\n      }\n      else if (temp6 < 0x15) {\n        temp_var2 = temp6 + 0x5b;\n        index = temp_var2 * 2;\n      }\n      else if (temp6 < 0x55) {\n        temp_var2 = (current_size >> 0xc) + 0x6e;\n        index = temp_var2 * 2;\n      }\n      else if (temp6 < 0x155) {\n        temp_var2 = (current_size >> 0xf) + 0x77;\n        index = temp_var2 * 2;\n      }\n      else if (temp6 < 0x555) {\n        temp_var2 = (current_size >> 0x12) + 0x7c;\n        index = temp_var2 * 2;\n      }\n      else {\n        index = 0xfc;\n        temp_var2 = 0x7e;\n      }\n      temp7 = index * 4 + 0x20070464;\n      next_offset = (&relocation_array[0x8d].r_info)[index];\n      if (next_offset == temp7) {\n        relocation_array[141].r_offset =\n             relocation_array[141].r_offset | 1 << (temp_var2 >> 2 & 0xffU);\n        temp_var12 = next_offset;\n      }\n      else {\n        do {\n          temp_var12 = next_offset;\n          if ((*(uint *)(next_offset + 4) & 0xfffffffc) <= aligned_size) break;\n          next_offset = *(dword *)(next_offset + 8);\n          temp_var12 = next_offset;\n        } while (temp7 != next_offset);\n        next_offset = *(dword *)(temp_var12 + 0xc);\n      }\n      temp7 = relocation_array[141].r_offset;\n      *(dword *)(temp1 + 0xc) = next_offset;\n      *(dword *)(temp1 + 8) = temp_var12;\n      *(dword *)(next_offset + 8) = temp1;\n      *(dword *)(temp_var12 + 0xc) = temp1;\n    }\n  }\n  temp1 = relocation_array[141].r_info;\n  current_size = 1 << ((int)index2 >> 2 & 0xffU);\n  if (current_size <= temp7) {\n    if ((temp7 & current_size) == 0) {\n      index2 = index2 & 0xfffffffc;\n      do {\n        current_size = current_size << 1;\n        index2 = index2 + 4;\n      } while ((temp7 & current_size) == 0);\n    }\n    do {\n      loop_ptr2 = &relocation_array[index2 + 0x8c].r_info;\n      temp_ptr2 = loop_ptr2;\n      aligned_size = index2;\n      do {\n        for (temp_ptr = (undefined *)temp_ptr2[3]; temp_ptr2 != (dword *)temp_ptr;\n            temp_ptr = *(undefined **)(temp_ptr + 0xc)) {\n          temp6 = *(uint *)(temp_ptr + 4) & 0xfffffffc;\n          temp8 = temp6 - aligned_size;\n          if (0xf < (int)temp8) {\n            temp_var2 = *(int *)(temp_ptr + 8);\n            index = *(int *)(temp_ptr + 0xc);\n            temp_ptr2 = temp_ptr + aligned_size;\n            *(uint *)(temp_ptr + 4) = aligned_size | 1;\n            *(int *)(temp_var2 + 0xc) = index;\n            *(int *)(index + 8) = temp_var2;\n            relocation_array[142].r_info = (dword)temp_ptr2;\n            relocation_array[143].r_offset = (dword)temp_ptr2;\n            *(undefined4 *)(temp_ptr2 + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp_ptr2 + 8) = 0x2007046c;\n            *(uint *)(temp_ptr2 + 4) = temp8 | 1;\n            *(uint *)(temp_ptr2 + temp8) = temp8;\n            FUNC_00081f98(output_pointer);\n            return (int *)(temp_ptr + 8);\n          }\n          if (-1 < (int)temp8) {\n            index = *(int *)(temp_ptr + 8);\n            temp_var2 = *(int *)(temp_ptr + 0xc);\n            *(uint *)(temp_ptr + temp6 + 4) = *(uint *)(temp_ptr + temp6 + 4) | 1;\n            *(int *)(index + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = index;\n            FUNC_00081f98(output_pointer);\n            return (int *)(temp_ptr + 8);\n          }\n        }\n        aligned_size = aligned_size + 1;\n        temp_ptr2 = temp_ptr2 + 2;\n      } while ((aligned_size & 3) != 0);\n      do {\n        temp6 = index2 & 3;\n        temp_ptr = (undefined *)(loop_ptr2 + -2);\n        index2 = index2 - 1;\n        if (temp6 == 0) {\n          relocation_array[141].r_offset = relocation_array[141].r_offset & ~current_size;\n          break;\n        }\n        loop_ptr2 = (dword *)*loop_ptr2;\n      } while (loop_ptr2 == (dword *)temp_ptr);\n      current_size = current_size * 2;\n      if ((relocation_array[141].r_offset <= current_size &&\n           current_size - relocation_array[141].r_offset != 0) || (index2 = aligned_size, current_size == 0))\n      break;\n      for (; (relocation_array[141].r_offset & current_size) == 0; current_size = current_size << 1) {\n        index2 = index2 + 4;\n      }\n    } while( true );\n  }\n  index2 = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= index2) &&\n     (current_size = index2 - aligned_size, temp7 = relocation_array[141].r_info, 0xf < (int)current_size))\n  goto LAB_00081b1a;\n  current_size = relocation_array[141].r_info + index2;\n  if (relocation_array[270].r_offset == 0xffffffff) {\n    aligned_size = aligned_size + DAT_20071218 + 0x10;\n  }\n  else {\n    aligned_size = aligned_size + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  temp7 = update_relocation_offset(output_pointer,aligned_size);\n  if ((temp7 == 0xffffffff) || ((temp7 < current_size && (temp1 != 0x20070464)))) {\n    index2 = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n    temp7 = relocation_array[141].r_info;\n  }\n  else {\n    temp6 = DAT_2007121c + aligned_size;\n    DAT_2007121c = temp6;\n    if ((current_size == temp7) && ((current_size & 0xfff) == 0)) {\n      *(uint *)(relocation_array[141].r_info + 4) = aligned_size + index2 | 1;\n    }\n    else {\n      next_offset = temp7;\n      if (relocation_array[270].r_offset != 0xffffffff) {\n        next_offset = relocation_array[270].r_offset;\n        DAT_2007121c = temp6 + (temp7 - current_size);\n      }\n      relocation_array[270].r_offset = next_offset;\n      current_size = temp7 & 7;\n      if (current_size == 0) {\n        index = 0x1000;\n      }\n      else {\n        temp7 = temp7 + (8 - current_size);\n        index = 0x1008 - current_size;\n      }\n      index = index - (aligned_size + temp7 & 0xfff);\n      temp_var2 = update_relocation_offset(output_pointer,index);\n      if (temp_var2 == -1) {\n        current_size = 1;\n        index = 0;\n      }\n      else {\n        current_size = (temp_var2 - temp7) + index | 1;\n      }\n      temp6 = DAT_2007121c + index;\n      relocation_array[141].r_info = temp7;\n      DAT_2007121c = temp6;\n      *(uint *)(temp7 + 4) = current_size;\n      if (temp1 != 0x20070464) {\n        if (index2 < 0x10) {\n          *(undefined4 *)(temp7 + 4) = 1;\n          index2 = 0;\n          goto LAB_00081b04;\n        }\n        index2 = index2 - 0xc & 0xfffffff8;\n        *(uint *)(temp1 + 4) = index2 | *(uint *)(temp1 + 4) & 1;\n        *(undefined4 *)(temp1 + index2 + 4) = 5;\n        *(undefined4 *)(temp1 + index2 + 8) = 5;\n        if (0xf < index2) {\n          update_relocation_entry(output_pointer,temp1 + 8);\n          temp6 = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < temp6) {\n      DAT_20071214 = temp6;\n    }\n    if (DAT_20071210 < temp6) {\n      DAT_20071210 = temp6;\n    }\n    index2 = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n    temp7 = relocation_array[141].r_info;\n  }\nLAB_00081b04:\n  current_size = index2 - aligned_size;\n  if ((index2 < aligned_size) || ((int)current_size < 0x10)) {\n    FUNC_00081f98(output_pointer);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  relocation_array[141].r_info = aligned_size + temp7;\n  *(uint *)(temp7 + 4) = aligned_size | 1;\n  *(uint *)(relocation_array[141].r_info + 4) = current_size | 1;\n  FUNC_00081f98(output_pointer);\n  return (int *)(temp7 + 8);\n}\n\n",
            "current_name": "allocate_memory_00081810",
            "entrypoint": "0x00081810",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081810": "allocate_memory_00081810",
                "dVar1": "temp1",
                "dVar11": "next_offset",
                "dVar12": "temp_var12",
                "dVar17": "updated_entry_offset",
                "dVar7": "temp7",
                "iVar13": "index",
                "iVar2": "temp_var2",
                "iVar5": "temp5",
                "iVar9": "temp9",
                "param_1": "output_pointer",
                "param_2": "size",
                "pdVar14": "temp_ptr2",
                "pdVar17": "loop_ptr2",
                "puVar10": "temp_ptr",
                "puVar16": "temp_ptr2",
                "uVar15": "aligned_size",
                "uVar18": "index2",
                "uVar3": "current_size",
                "uVar4": "aligned_size",
                "uVar6": "temp6",
                "uVar8": "temp8",
                "update_relocation_entry_00083b10": "update_relocation_entry",
                "update_value_0008236c": "update_relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d48": {
            "additional_data": {
                "FUN_00081d48": {
                    "1": "copy_and_expand_buffer",
                    "24": "copy_memory",
                    "4": "copy_data"
                },
                "LAB_00081dcc": {
                    "1": "copy_remainder"
                },
                "bVar6": {
                    "1": "is_remaining_length_not_zero",
                    "2": "should_continue",
                    "4": "is_remaining",
                    "5": "is_looping",
                    "6": "loop_condition"
                },
                "param_1": {
                    "1": "destination_buffer",
                    "12": "dest",
                    "16": "destination"
                },
                "param_2": {
                    "1": "source_buffer",
                    "13": "src",
                    "16": "source"
                },
                "param_3": {
                    "1": "n_bytes_to_copy",
                    "20": "size",
                    "8": "length"
                },
                "puVar1": {
                    "1": "dest_pos",
                    "2": "dest_pointer",
                    "23": "dest_ptr",
                    "4": "dst_ptr"
                },
                "puVar2": {
                    "1": "dst_ptr",
                    "2": "dest_ptr",
                    "3": "dest_end",
                    "5": "dest_end_ptr",
                    "8": "src_ptr"
                },
                "puVar3": {
                    "1": "src",
                    "16": "src_ptr",
                    "6": "temp_ptr"
                },
                "uVar4": {
                    "1": "full_blocks",
                    "15": "remaining_size",
                    "4": "remainder",
                    "6": "remaining_length"
                },
                "uVar5": {
                    "1": "remaining_length_mod4",
                    "2": "unrolled_size",
                    "3": "remaining_size",
                    "5": "copy_size"
                }
            },
            "called": [],
            "calling": [
                "FUN_00083ca8"
            ],
            "code": "\nundefined4 * copy_memory_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint copy_size;\n  bool loop_condition;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      copy_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          loop_condition = copy_size != 0;\n          copy_size = copy_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto partial_copy;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copy_size = 4 - ((uint)destination & 3);\n      size = size - copy_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((copy_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  copy_size = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < copy_size;\n      copy_size = copy_size - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\npartial_copy:\n  if (copy_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((copy_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((copy_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_00081d48",
            "entrypoint": "0x00081d48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "LAB_00081dcc": "partial_copy",
                "bVar6": "loop_condition",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "copy_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e34": {
            "additional_data": {
                "FUN_00081e34": {
                    "1": "reverse_bytes",
                    "11": "reverse_copy",
                    "15": "copy_memory",
                    "2": "reverse_memcpy"
                },
                "iVar1": {
                    "1": "remaining_length",
                    "16": "index",
                    "2": "i",
                    "5": "remaining_size",
                    "7": "count"
                },
                "param_1": {
                    "1": "dest_ptr",
                    "12": "destination",
                    "15": "dest",
                    "2": "source"
                },
                "param_2": {
                    "1": "dest",
                    "12": "source",
                    "15": "src",
                    "2": "destination"
                },
                "param_3": {
                    "13": "length",
                    "18": "size"
                },
                "puVar2": {
                    "1": "dst_ptr2",
                    "19": "dest_ptr",
                    "2": "dst_ptr"
                },
                "puVar3": {
                    "1": "dst_ptr",
                    "22": "src_ptr"
                },
                "puVar4": {
                    "1": "tmp_dest",
                    "2": "copy_ptr",
                    "7": "temp_ptr",
                    "8": "dest_end"
                },
                "puVar4Initial": {
                    "1": "end_ptr"
                },
                "puVar6": {
                    "1": "temp_pointer",
                    "2": "dest_byte_ptr",
                    "3": "temp_ptr"
                },
                "uVar5": {
                    "1": "remaining_size_copy",
                    "2": "count",
                    "3": "temp_length",
                    "4": "remainder"
                },
                "uVar7": {
                    "1": "u_var7",
                    "12": "remainder",
                    "2": "remaining_bytes"
                }
            },
            "called": [],
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "code": "\nvoid copy_memory_00081e34(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *dest_end;\n  uint remainder;\n  undefined *temp_ptr;\n  uint remainder;\n  \n  if ((src < dest) && (dest_end = (undefined4 *)((int)src + size), dest < dest_end)) {\n    temp_ptr = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        dest_end = (undefined4 *)((int)dest_end + -1);\n        index = index + -1;\n        temp_ptr = temp_ptr + -1;\n        *temp_ptr = *(undefined *)dest_end;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    dest_end = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = dest_end + 4;\n      *dest_end = *src_ptr;\n      dest_end[1] = src_ptr[1];\n      dest_end[2] = src_ptr[2];\n      dest_end[3] = src_ptr[3];\n      dest_end = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    remainder = remainder;\n    dest_end = dest;\n    src_ptr = src;\n    if (3 < remainder) {\n      do {\n        remainder = remainder - 4;\n        *dest_end = *src_ptr;\n        dest_end = dest_end + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < remainder);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  dest_end = dest;\n  do {\n    src_ptr = (undefined4 *)((int)dest_end + 1);\n    *(undefined *)dest_end = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    dest_end = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "current_name": "copy_memory_00081e34",
            "entrypoint": "0x00081e34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "iVar1": "index",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "dest_end",
                "puVar6": "temp_ptr",
                "uVar5": "remainder",
                "uVar7": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081f00": {
            "additional_data": {
                "<bVar5>": {
                    "1": "no_more_iterations"
                },
                "<original_function_name>": {
                    "1": "fill_memory"
                },
                "<param_1>": {
                    "1": "dest"
                },
                "<param_2>": {
                    "1": "value"
                },
                "<param_3>": {
                    "1": "size"
                },
                "<puVar1>": {
                    "1": "dest_ptr"
                },
                "<puVar2>": {
                    "1": "next_dest_ptr"
                },
                "<uVar3>": {
                    "1": "fill_value"
                },
                "<uVar4>": {
                    "1": "remaining_size"
                },
                "FUN_00081f00": {
                    "1": "memset_uint",
                    "2": "fill_buffer",
                    "6": "memset",
                    "9": "fill_memory_with_byte"
                },
                "LAB_00081f7c": {
                    "1": "end_loop"
                },
                "bVar5": {
                    "1": "done",
                    "2": "is_zero_length",
                    "4": "is_zero_size",
                    "5": "is_size_zero",
                    "7": "is_zero"
                },
                "param_1": {
                    "1": "dest_ptr",
                    "2": "array",
                    "3": "buffer",
                    "4": "memory",
                    "7": "destination",
                    "9": "dest"
                },
                "param_2": {
                    "1": "byte_value",
                    "21": "value",
                    "3": "byte_to_fill",
                    "4": "byte"
                },
                "param_3": {
                    "1": "n",
                    "18": "size",
                    "3": "length",
                    "4": "count"
                },
                "puVar1": {
                    "1": "ptr",
                    "12": "dest_ptr",
                    "3": "dst_ptr",
                    "4": "ptr1"
                },
                "puVar2": {
                    "1": "p_next_dest",
                    "2": "next_dest",
                    "3": "next_dst_ptr",
                    "4": "ptr2",
                    "7": "next_ptr",
                    "8": "next_dest_ptr"
                },
                "uVar3": {
                    "1": "filled_bytes",
                    "2": "byte_pattern",
                    "4": "value32",
                    "7": "pattern"
                },
                "uVar4": {
                    "1": "u_size",
                    "15": "remaining_size",
                    "2": "remaining_length",
                    "3": "remaining"
                }
            },
            "called": [],
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "code": "\nvoid fill_memory_with_byte_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 pattern;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = pattern;\n        dest_ptr[1] = pattern;\n        dest_ptr[2] = pattern;\n        dest_ptr[3] = pattern;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_loop;\n    }\n    do {\n      size = size - 4;\n      *dest = pattern;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_with_byte_00081f00",
            "entrypoint": "0x00081f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081f00": "fill_memory_with_byte_00081f00",
                "LAB_00081f7c": "end_loop",
                "bVar5": "is_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "pattern",
                "uVar4": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081f94": {
            "called": [],
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00081f94",
            "entrypoint": "0x00081f94",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081f98": {
            "called": [],
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00081f98",
            "entrypoint": "0x00081f98",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081f9c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_entries",
                    "2": "rel_array",
                    "3": "relocation_array"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "2": "memory_offset"
                },
                "FUN_00081f9c": {
                    "1": "update_memory_with_offset",
                    "12": "update_memory",
                    "17": "allocate_or_update_memory"
                },
                "param_1": {
                    "1": "mem_address",
                    "18": "offset",
                    "2": "memory_offset",
                    "6": "memory_address"
                },
                "param_2": {
                    "1": "value_to_allocate",
                    "14": "value",
                    "2": "value_to_update",
                    "3": "size",
                    "7": "param"
                }
            },
            "called": [
                "FUN_00081fac"
            ],
            "calling": [
                "FUN_00081496"
            ],
            "code": "\nvoid allocate_or_update_memory_00081f9c(undefined4 offset,undefined4 value)\n\n{\n  allocate_or_update_memory_00081f9c_00081fac(memory_offset,offset,value);\n  return;\n}\n\n",
            "current_name": "allocate_or_update_memory_00081f9c",
            "entrypoint": "0x00081f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "memory_offset",
                "FUN_00081f9c": "allocate_or_update_memory_00081f9c",
                "param_1": "offset",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081fac": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_array"
                },
                "FUN_00081fac": {
                    "1": "allocate_memory",
                    "22": "allocate_or_update_memory",
                    "5": "allocate_or_resize_memory"
                },
                "dVar1": {
                    "1": "rel_info_offset",
                    "2": "temp_d_var1",
                    "4": "offset",
                    "5": "temp_var1",
                    "6": "temp1"
                },
                "iVar4": {
                    "1": "temp4",
                    "2": "temp_var2",
                    "4": "temp_var1",
                    "5": "temp3"
                },
                "iVar6": {
                    "1": "temp_variable2",
                    "2": "temp4",
                    "3": "temp_var5",
                    "4": "temp_var4",
                    "6": "temp_var2"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "memory_context",
                    "4": "memory_ptr",
                    "5": "memory_manager"
                },
                "param_2": {
                    "1": "old_buffer_ptr",
                    "2": "buffer",
                    "8": "existing_memory"
                },
                "param_3": {
                    "1": "new_size",
                    "12": "size",
                    "2": "data_size",
                    "3": "new_memory_size",
                    "4": "memory_size"
                },
                "piVar10": {
                    "1": "new_data",
                    "2": "temp7",
                    "4": "temp_pointer2",
                    "6": "temp_ptr2"
                },
                "piVar2": {
                    "1": "new_memory_block",
                    "11": "new_memory",
                    "2": "new_buffer",
                    "4": "result_pointer"
                },
                "piVar7": {
                    "1": "temp_pointer",
                    "2": "temp_pi_var7",
                    "3": "temp_ptr",
                    "4": "temp_ptr1"
                },
                "uVar3": {
                    "1": "temp3",
                    "2": "new_size",
                    "5": "temp_var2"
                },
                "uVar5": {
                    "1": "old_size_flag",
                    "2": "u_var5",
                    "3": "temp4"
                },
                "uVar8": {
                    "1": "allocated_size",
                    "2": "new_size",
                    "3": "adjusted_size"
                },
                "uVar9": {
                    "1": "temp9",
                    "14": "aligned_size",
                    "2": "temp_var7"
                }
            },
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "code": "\nint * allocate_or_update_memory_00081fac(undefined4 *memory_manager,int *existing_memory,uint size)\n\n{\n  dword temp1;\n  int *new_memory;\n  uint temp2;\n  int temp3;\n  uint existing_size;\n  int temp_var2;\n  int *temp_ptr1;\n  uint adjusted_size;\n  uint aligned_size;\n  int *temp_ptr2;\n  \n  if (existing_memory == (int *)0x0) {\n    new_memory = (int *)allocate_memory_00081810(memory_manager,size);\n    return new_memory;\n  }\n  FUNC_00081f94();\n  existing_size = existing_memory[-1];\n  adjusted_size = existing_size & 0xfffffffc;\n  new_memory = existing_memory + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_00082078;\n  }\n  if (aligned_size < size) {\nLAB_00082078:\n    *memory_manager = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)adjusted_size < (int)aligned_size) {\n    temp1 = (int)new_memory + adjusted_size;\n    if (relocation_array[141].r_info == temp1) {\n      temp2 = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n      temp1 = relocation_array[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp2 + adjusted_size)) {\n        relocation_array[141].r_info = (int)new_memory + aligned_size;\n        *(uint *)(relocation_array[141].r_info + 4) = (temp2 + adjusted_size) - aligned_size | 1;\n        existing_memory[-1] = aligned_size | existing_memory[-1] & 1U;\n        FUNC_00081f98(memory_manager);\n        return existing_memory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp2 + adjusted_size)) {\n        temp_var2 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp3;\n        adjusted_size = temp2 + adjusted_size;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(existing_size << 0x1f)) {\n      temp_ptr2 = (int *)((int)new_memory - existing_memory[-2]);\n      existing_size = (temp_ptr2[1] & 0xfffffffcU) + adjusted_size;\n      if (temp1 != 0) {\n        if (temp1 == relocation_array[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp2 + existing_size)) {\n            new_memory = temp_ptr2 + 2;\n            temp3 = *new_memory;\n            temp_var2 = temp_ptr2[3];\n            adjusted_size = adjusted_size - 4;\n            *(int *)(temp3 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp3;\n            if (adjusted_size < 0x25) {\n              temp_ptr1 = new_memory;\n              if (0x13 < adjusted_size) {\n                temp_ptr2[2] = *existing_memory;\n                temp_ptr2[3] = existing_memory[1];\n                if (adjusted_size < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  temp_ptr1 = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = existing_memory[2];\n                  temp_ptr2[5] = existing_memory[3];\n                  if (adjusted_size == 0x24) {\n                    temp_ptr2[6] = existing_memory[4];\n                    temp_ptr1 = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_ptr2[7] = *temp_ptr1;\n                    temp_ptr1 = temp_ptr2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    temp_ptr1 = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *temp_ptr1 = *existing_memory;\n              temp_ptr1[1] = existing_memory[1];\n              temp_ptr1[2] = existing_memory[2];\n            }\n            else {\n              copy_memory_00081e34(new_memory,existing_memory);\n            }\n            relocation_array[141].r_info = (int)temp_ptr2 + aligned_size;\n            *(uint *)(relocation_array[141].r_info + 4) = (temp2 + existing_size) - aligned_size | 1;\n            temp_ptr2[1] = aligned_size | temp_ptr2[1] & 1U;\n            FUNC_00081f98(memory_manager);\n            return new_memory;\n          }\n        }\n        else {\n          temp2 = temp2 + existing_size;\n          if ((int)aligned_size <= (int)temp2) {\n            temp_var2 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp3;\n            temp_ptr1 = temp_ptr2 + 2;\n            temp3 = *temp_ptr1;\n            temp_var2 = temp_ptr2[3];\n            existing_size = adjusted_size - 4;\n            *(int *)(temp3 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp3;\n            adjusted_size = temp2;\n            if (existing_size < 0x25) {\n              new_memory = temp_ptr1;\n              if (0x13 < existing_size) {\n                temp_ptr2[2] = *existing_memory;\n                temp_ptr2[3] = existing_memory[1];\n                if (existing_size < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  new_memory = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = existing_memory[2];\n                  temp_ptr2[5] = existing_memory[3];\n                  if (existing_size == 0x24) {\n                    temp_ptr2[6] = existing_memory[4];\n                    new_memory = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_ptr2[7] = *new_memory;\n                    new_memory = temp_ptr2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    new_memory = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *new_memory = *existing_memory;\n              new_memory[1] = existing_memory[1];\n              new_memory[2] = existing_memory[2];\n              existing_size = temp_ptr2[1];\n              new_memory = temp_ptr2;\n              existing_memory = temp_ptr1;\n            }\n            else {\n              copy_memory_00081e34(temp_ptr1,existing_memory);\n              existing_size = temp_ptr2[1];\n              new_memory = temp_ptr2;\n              existing_memory = temp_ptr1;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)existing_size) {\n        temp_ptr1 = temp_ptr2 + 2;\n        temp3 = *temp_ptr1;\n        temp_var2 = temp_ptr2[3];\n        temp2 = adjusted_size - 4;\n        *(int *)(temp3 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp3;\n        adjusted_size = existing_size;\n        if (temp2 < 0x25) {\n          new_memory = temp_ptr1;\n          if (0x13 < temp2) {\n            temp_ptr2[2] = *existing_memory;\n            temp_ptr2[3] = existing_memory[1];\n            if (temp2 < 0x1c) {\n              existing_memory = existing_memory + 2;\n              new_memory = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = existing_memory[2];\n              temp_ptr2[5] = existing_memory[3];\n              if (temp2 == 0x24) {\n                temp_ptr2[6] = existing_memory[4];\n                new_memory = existing_memory + 5;\n                existing_memory = existing_memory + 6;\n                temp_ptr2[7] = *new_memory;\n                new_memory = temp_ptr2 + 8;\n              }\n              else {\n                existing_memory = existing_memory + 4;\n                new_memory = temp_ptr2 + 6;\n              }\n            }\n          }\n          *new_memory = *existing_memory;\n          new_memory[1] = existing_memory[1];\n          new_memory[2] = existing_memory[2];\n          existing_size = temp_ptr2[1];\n          new_memory = temp_ptr2;\n          existing_memory = temp_ptr1;\n        }\n        else {\n          copy_memory_00081e34(temp_ptr1,existing_memory);\n          existing_size = temp_ptr2[1];\n          new_memory = temp_ptr2;\n          existing_memory = temp_ptr1;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp_ptr2 = (int *)allocate_memory_00081810(memory_manager,size);\n    if (temp_ptr2 == (int *)0x0) goto LAB_000820a0;\n    existing_size = existing_memory[-1];\n    if (temp_ptr2 + -2 != (int *)((existing_size & 0xfffffffe) + (int)new_memory)) {\n      adjusted_size = adjusted_size - 4;\n      if (adjusted_size < 0x25) {\n        new_memory = existing_memory;\n        temp_ptr1 = temp_ptr2;\n        if (0x13 < adjusted_size) {\n          *temp_ptr2 = *existing_memory;\n          temp_ptr2[1] = existing_memory[1];\n          if (adjusted_size < 0x1c) {\n            new_memory = existing_memory + 2;\n            temp_ptr1 = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = existing_memory[2];\n            temp_ptr2[3] = existing_memory[3];\n            if (adjusted_size == 0x24) {\n              temp_ptr2[4] = existing_memory[4];\n              temp_ptr2[5] = existing_memory[5];\n              new_memory = existing_memory + 6;\n              temp_ptr1 = temp_ptr2 + 6;\n            }\n            else {\n              new_memory = existing_memory + 4;\n              temp_ptr1 = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr1 = *new_memory;\n        temp_ptr1[1] = new_memory[1];\n        temp_ptr1[2] = new_memory[2];\n      }\n      else {\n        copy_memory_00081e34(temp_ptr2,existing_memory);\n      }\n      update_relocation_entry_00083b10(memory_manager,existing_memory);\n      goto LAB_000820a0;\n    }\n    adjusted_size = adjusted_size + (temp_ptr2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp2 = adjusted_size - aligned_size;\n  temp_ptr2 = existing_memory;\n  if (temp2 < 0x10) {\n    new_memory[1] = existing_size & 1 | adjusted_size;\n    *(uint *)((int)new_memory + adjusted_size + 4) = *(uint *)((int)new_memory + adjusted_size + 4) | 1;\n  }\n  else {\n    new_memory[1] = existing_size & 1 | aligned_size;\n    *(uint *)((int)new_memory + aligned_size + 4) = temp2 | 1;\n    *(uint *)((int)new_memory + temp2 + aligned_size + 4) = *(uint *)((int)new_memory + temp2 + aligned_size + 4) | 1;\n    update_relocation_entry_00083b10(memory_manager,(int)new_memory + aligned_size + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(memory_manager);\n  return temp_ptr2;\n}\n\n",
            "current_name": "allocate_or_update_memory_00081fac",
            "entrypoint": "0x00081fac",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081fac": "allocate_or_update_memory_00081fac",
                "dVar1": "temp1",
                "iVar4": "temp3",
                "iVar6": "temp_var2",
                "param_1": "memory_manager",
                "param_2": "existing_memory",
                "param_3": "size",
                "piVar10": "temp_ptr2",
                "piVar2": "new_memory",
                "piVar7": "temp_ptr1",
                "uVar3": "temp2",
                "uVar5": "existing_size",
                "uVar8": "adjusted_size",
                "uVar9": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008236c": {
            "additional_data": {
                "FUN_0008236c": {
                    "1": "set_value_if_valid",
                    "10": "update_value",
                    "3": "update_parameter_value"
                },
                "calculate_new_value_00080e88": {
                    "1": "calculate_new_value"
                },
                "iVar1": {
                    "1": "new_parameter",
                    "16": "new_value",
                    "2": "result",
                    "3": "new_calculated_value",
                    "5": "calculated_value"
                },
                "param_1": {
                    "1": "value_pointer",
                    "2": "output_param",
                    "3": "result_pointer",
                    "7": "output_value",
                    "8": "output"
                },
                "param_2": {
                    "1": "input_param",
                    "21": "input_value",
                    "9": "input"
                }
            },
            "called": [
                "FUN_00080e88"
            ],
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "code": "\nvoid update_value_0008236c(int *output,undefined4 input_value)\n\n{\n  int new_value;\n  \n  DAT_20071244 = 0;\n  new_value = calculate_new_value(input_value);\n  if ((new_value == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_value_0008236c",
            "entrypoint": "0x0008236c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008236c": "update_value_0008236c",
                "calculate_new_value_00080e88": "calculate_new_value",
                "iVar1": "new_value",
                "param_1": "output",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082390": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "compare_arrays"
                },
                "<param_1>": {
                    "1": "array1"
                },
                "<param_2>": {
                    "1": "array2"
                },
                "FUN_00082390": {
                    "1": "compare_unsigned_int_arrays",
                    "2": "compare_byte_arrays",
                    "3": "compare_and_return",
                    "4": "compare_unsigned_integers",
                    "6": "compare_uint_arrays",
                    "7": "compare_arrays"
                },
                "LAB_00082410": {
                    "1": "check_condition"
                },
                "LAB_0008258e": {
                    "1": "end_loop"
                },
                "LAB_0008259a": {
                    "1": "compare_unaligned_chunks"
                },
                "LAB_0008259e": {
                    "1": "end"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "iVar2": {
                    "1": "comparison_result",
                    "29": "result"
                },
                "param_1": {
                    "1": "unsigned_int_array1",
                    "16": "array1",
                    "4": "data1",
                    "5": "buffer1"
                },
                "param_2": {
                    "1": "string2",
                    "16": "array2",
                    "4": "data2",
                    "5": "buffer2"
                },
                "puVar1": {
                    "1": "pointer1",
                    "2": "ptr_array1",
                    "22": "ptr1"
                },
                "puVar3": {
                    "1": "ptr_chunk2",
                    "2": "ptr3",
                    "20": "ptr2"
                },
                "puVar4": {
                    "1": "next_buffer2",
                    "2": "ptr4",
                    "20": "ptr3",
                    "3": "ptr_temp"
                },
                "uVar10": {
                    "1": "lzc_result"
                },
                "uVar5": {
                    "1": "array1_length",
                    "2": "value1",
                    "3": "len1",
                    "4": "val1",
                    "6": "temp1"
                },
                "uVar6": {
                    "1": "partial2",
                    "2": "value2",
                    "3": "val1",
                    "4": "val2",
                    "6": "temp2"
                },
                "uVar7": {
                    "1": "value2",
                    "3": "temp2",
                    "4": "val3",
                    "6": "temp3"
                },
                "uVar8": {
                    "1": "byte3",
                    "3": "temp3",
                    "4": "val4",
                    "6": "temp4"
                },
                "uVar9": {
                    "1": "mask3",
                    "2": "temp4",
                    "4": "val5",
                    "6": "temp5"
                }
            },
            "called": [],
            "calling": [
                "FUN_000815b8"
            ],
            "code": "\nint compare_arrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      temp1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nloop_start:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        temp2 = temp1 >> 0x10 & 0xff;\n        result = temp2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (temp2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          temp2 = temp1 >> 8 & 0xff;\n          result = temp2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp2 == 0) {\n            return 0;\n          }\n          goto loop_start;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (temp1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (temp1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    temp1 = (uint)array2 & 3;\n    if (temp1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (temp1 == 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x10;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffff;\n          if ((temp4 & 0x8080) != 0 || temp2 != temp1) goto loop_end;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else if (temp1 < 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 8;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffffff;\n          if ((temp4 & 0x808080) != 0 || temp2 != temp1) goto loop_end;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x18;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xff;\n          if ((temp4 & 0x80) != 0 || temp2 != temp1) goto loop_end;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n              temp2 >> 0x18;\n      temp1 = (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 | temp3 >> 0x18;\n      goto case_2;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      temp1 = *ptr1;\n      ptr2 = array2 + 1;\n      temp3 = *array2;\n      temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n      if (temp1 != temp3 || temp5 != 0) {\ncase_1:\n        temp2 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n                temp1 >> 0x18;\n        temp1 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n                temp3 >> 0x18;\n        goto case_2;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      temp1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        temp2 = *array1;\n        temp3 = array1[1];\n        temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n        if (temp2 != temp1 || temp5 != 0) goto loop_end;\n        temp4 = *ptr1;\n        temp1 = ptr1[1];\n        temp5 = temp3 + 0xfefefeff & ~temp3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (temp3 == temp4 && temp5 == 0);\n      temp2 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n              temp3 >> 0x18;\n      temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 |\n              temp4 >> 0x18;\n      goto case_2;\n    }\n  }\n  do {\n    temp1 = *array1;\n    temp2 = array1[1];\n    temp3 = *array2;\n    temp4 = array2[1];\n    temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n    if (temp1 != temp3 || temp5 != 0) goto case_1;\n    temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (temp2 == temp4 && temp5 == 0);\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 | temp4 >> 0x18;\ncase_2:\n  temp3 = temp5 << 0x18 | (temp5 >> 8 & 0xff) << 0x10 | (temp5 >> 0x10 & 0xff) << 8 | temp5 >> 0x18;\n  if (temp3 != 0) {\n    temp3 = 0x18 - count_leading_zero_bits(temp3);\n    temp2 = temp2 >> (temp3 & 0xff);\n    temp1 = temp1 >> (temp3 & 0xff);\n  }\n  result = 1;\n  if (temp2 <= temp1) {\n    result = -(uint)(temp2 < temp1);\n  }\n  return result;\nloop_end:\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  goto case_2;\n}\n\n",
            "current_name": "compare_arrays_00082390",
            "entrypoint": "0x00082390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082390": "compare_arrays_00082390",
                "LAB_00082410": "loop_start",
                "LAB_0008258e": "loop_end",
                "LAB_0008259a": "case_1",
                "LAB_0008259e": "case_2",
                "LZCOUNT": "count_leading_zero_bits",
                "iVar2": "result",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000825cc": {
            "additional_data": {
                "FUN_000825cc": {
                    "1": "copy_strings",
                    "23": "copy_string"
                },
                "LAB_00082630": {
                    "1": "check_chars_loop",
                    "2": "end_loop"
                },
                "bVar8": {
                    "1": "is_last_null_byte",
                    "10": "is_zero",
                    "2": "is_short_zero",
                    "9": "is_zero_byte"
                },
                "cVar1": {
                    "1": "current_byte_char",
                    "2": "ch",
                    "25": "current_char"
                },
                "param_1": {
                    "1": "dst",
                    "12": "dest",
                    "17": "destination"
                },
                "param_2": {
                    "1": "src_string",
                    "13": "src",
                    "17": "source"
                },
                "puVar3": {
                    "1": "current_pointer",
                    "2": "next_uint_ptr",
                    "3": "next_src",
                    "4": "next_source",
                    "5": "next_ptr"
                },
                "puVar4": {
                    "1": "next_u_int_ptr2",
                    "2": "next_ptr2",
                    "3": "src_ptr2"
                },
                "puVar7": {
                    "1": "destination_pointer",
                    "4": "next_destination",
                    "9": "dest_ptr"
                },
                "uVar2": {
                    "1": "current_ushort",
                    "24": "current_short"
                },
                "uVar5": {
                    "1": "current_uint_val",
                    "2": "current_int",
                    "3": "current_u_int",
                    "7": "current_uint",
                    "9": "current_word"
                },
                "uVar6": {
                    "1": "current_uint_rotated",
                    "2": "shifted_value",
                    "3": "shifted_u_int",
                    "4": "temp_uint",
                    "5": "temp"
                }
            },
            "called": [],
            "calling": [
                "FUN_000814d0",
                "FUN_00081570",
                "FUN_0008151c"
            ],
            "code": "\nvoid copy_string_000825cc(uint *destination,uint *source)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_ptr;\n  uint *src_ptr2;\n  uint current_word;\n  uint temp;\n  uint *dest_ptr;\n  bool is_zero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    src_ptr2 = source;\n    if (((uint)source & 1) != 0) {\n      src_ptr2 = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      destination = (uint *)((int)destination + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = src_ptr2;\n    if (((uint)src_ptr2 & 2) != 0) {\n      source = (uint *)((int)src_ptr2 + 2);\n      current_short = *(ushort *)src_ptr2;\n      is_zero = (current_short & 0xff) == 0;\n      if (is_zero) {\n        *(char *)destination = (char)current_short;\n      }\n      else {\n        *(ushort *)destination = current_short;\n        is_zero = (current_short & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  current_word = *source;\n  src_ptr2 = source + 1;\n  dest_ptr = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto end_loop;\n    dest_ptr = destination + 1;\n    *destination = current_word;\n    src_ptr2 = source + 2;\n    current_word = source[1];\n  }\n  while( true ) {\n    next_ptr = src_ptr2 + 1;\n    temp = *src_ptr2;\n    destination = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    destination = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = temp;\n    if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n    src_ptr2 = src_ptr2 + 2;\n    current_word = *next_ptr;\n    dest_ptr = dest_ptr + 2;\n    *destination = temp;\n  }\nend_loop:\n  do {\n    *(char *)destination = (char)current_word;\n    temp = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (temp != 0);\n  return;\n}\n\n",
            "current_name": "copy_string_000825cc",
            "entrypoint": "0x000825cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "LAB_00082630": "end_loop",
                "bVar8": "is_zero",
                "cVar1": "current_char",
                "param_1": "destination",
                "param_2": "source",
                "puVar3": "next_ptr",
                "puVar4": "src_ptr2",
                "puVar7": "dest_ptr",
                "uVar2": "current_short",
                "uVar5": "current_word",
                "uVar6": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082688": {
            "additional_data": {
                "DAT_": {
                    "1": "not_included"
                },
                "FUN_00082688": {
                    "1": "get_byte_count",
                    "13": "count_leading_zeros",
                    "2": "count_non_zero_bytes",
                    "6": "count_leading_zeroes"
                },
                "bVar4": {
                    "1": "is_zero_value",
                    "29": "is_zero"
                },
                "iVar1": {
                    "1": "leading_zero_count",
                    "11": "leading_zeros",
                    "2": "leading_zeros_count",
                    "3": "leading_zeroes",
                    "5": "count"
                },
                "numOfBits": {
                    "1": "num_bits_to_check"
                },
                "param_1": {
                    "2": "input_value",
                    "24": "input",
                    "5": "value"
                },
                "puVar2": {
                    "1": "ptr_data",
                    "13": "ptr",
                    "2": "p_value",
                    "4": "p_input"
                },
                "uVar3": {
                    "1": "word",
                    "2": "current_value",
                    "20": "value"
                },
                "uVar5": {
                    "1": "bitmask"
                }
            },
            "called": [],
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "code": "\nint count_leading_zeros_00082688(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_00082688",
            "entrypoint": "0x00082688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082688": "count_leading_zeros_00082688",
                "bVar4": "is_zero",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082824": {
            "additional_data": {
                "FUN_00082824": {
                    "1": "process_and_verify_data",
                    "30": "process_data"
                },
                "iVar2": {
                    "1": "return_value",
                    "30": "result"
                },
                "param_1": {
                    "1": "param",
                    "10": "arg1",
                    "2": "input_param",
                    "3": "value",
                    "5": "param1"
                },
                "param_2": {
                    "1": "index",
                    "10": "arg2",
                    "2": "data_size",
                    "3": "length",
                    "5": "param2",
                    "6": "size"
                },
                "param_3": {
                    "1": "input_array",
                    "10": "arg3",
                    "5": "param3",
                    "6": "data"
                },
                "piVar1": {
                    "1": "pointer1",
                    "10": "current_data",
                    "2": "ptr_data",
                    "3": "data_pointer",
                    "4": "data_ptr"
                },
                "piVar3": {
                    "1": "ptr_data2",
                    "2": "temp_ptr",
                    "3": "current_data",
                    "7": "remaining_data"
                },
                "puVar5": {
                    "1": "pointer3",
                    "2": "ptr_value",
                    "3": "data_pointer",
                    "4": "current_value"
                },
                "uVar4": {
                    "1": "u_count",
                    "13": "counter",
                    "2": "loop_counter",
                    "3": "iteration",
                    "5": "iteration_count",
                    "6": "count"
                },
                "uVar6": {
                    "1": "param",
                    "2": "current_data_value",
                    "3": "temp_var1",
                    "6": "value"
                },
                "uVar7": {
                    "1": "shifted_data_size",
                    "12": "shifted_value",
                    "2": "count",
                    "3": "value2"
                }
            },
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint process_data_00082824(undefined4 arg1,int arg2,int **arg3)\n\n{\n  int *current_data;\n  int result;\n  int *remaining_data;\n  uint counter;\n  undefined4 *data_ptr;\n  uint value;\n  uint shifted_value;\n  \n  if (-1 < *(int *)(arg2 + 100) << 0x12) {\n    result = process_data_00082824_00083ca8();\n    arg3[2] = (int *)0x0;\n    arg3[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data = arg3[2];\n  current_data = *arg3;\n  while (remaining_data != (int *)0x0) {\n    value = current_data[1];\n    shifted_value = value >> 2;\n    if (shifted_value != 0) {\n      data_ptr = (undefined4 *)(*current_data + -4);\n      counter = 0;\n      do {\n        data_ptr = data_ptr + 1;\n        result = process_data_00082824_000839b4(arg1,*data_ptr,arg2);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (shifted_value != counter);\n      remaining_data = arg3[2];\n    }\n    remaining_data = (int *)((int)remaining_data - (value & 0xfffffffc));\n    arg3[2] = remaining_data;\n    current_data = current_data + 2;\n  }\n  result = 0;\nLAB_00082864:\n  arg3[2] = (int *)0x0;\n  arg3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "current_name": "process_data_00082824",
            "entrypoint": "0x00082824",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "iVar2": "result",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "piVar1": "current_data",
                "piVar3": "remaining_data",
                "puVar5": "data_ptr",
                "uVar4": "counter",
                "uVar6": "value",
                "uVar7": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008289c": {
            "additional_data": {
                "<local_64>": {
                    "1": "<temp_array>"
                },
                "<local_68>": {
                    "1": "<stack_frame>"
                },
                "<local_69>": {
                    "1": "<hex_chars>"
                },
                "<local_90>": {
                    "1": "<temp_char>"
                },
                "<local_94>": {
                    "1": "<arg_offsets>"
                },
                "<local_98>": {
                    "1": "<arg_index>"
                },
                "<local_9c>": {
                    "1": "<arg_origin>"
                },
                "<local_a0>": {
                    "1": "<pad_char>"
                },
                "<local_a1>": {
                    "1": "<sign_char>"
                },
                "<local_c0>": {
                    "1": "<digit_chars>"
                },
                "<local_c4>": {
                    "1": "<result>"
                },
                "<local_c8>": {
                    "1": "<arg_pointers>"
                },
                "<local_d4>": {
                    "1": "<arg_positions>"
                },
                "<local_dc>": {
                    "1": "<arg_count>"
                },
                "<param_1>": {
                    "1": "<binary_file>"
                },
                "<param_2>": {
                    "1": "<header>"
                },
                "<param_3>": {
                    "1": "<format_string>"
                },
                "<param_4>": {
                    "1": "<arguments>"
                },
                "FUN_0008289c": {
                    "1": "process_formatting",
                    "3": "process_data",
                    "6": "parse_format_string",
                    "7": "process_format_string",
                    "8": "process_formatted_string"
                },
                "bVar1": {
                    "1": "is_len_modifier",
                    "2": "flag1",
                    "3": "is_long",
                    "5": "is_negative"
                },
                "bVar2": {
                    "1": "has_flag_l",
                    "2": "flag2",
                    "3": "is_unsigned"
                },
                "bVar26": {
                    "1": "is_non_zero_arg",
                    "5": "is_negative"
                },
                "bVar3": {
                    "1": "is_precision_specified",
                    "2": "flag3",
                    "3": "has_alternate_form"
                },
                "bVar5": {
                    "1": "use_field_width",
                    "2": "leading_zeros",
                    "3": "is_zero_padding"
                },
                "cStack_69": {
                    "1": ""
                },
                "cStack_6a": {
                    "1": "temp_char2",
                    "2": "temp_char"
                },
                "cVar26": {
                    "1": "negative_value"
                },
                "cVar4": {
                    "1": "format_char",
                    "2": "padding_char",
                    "3": "flag_char",
                    "6": "sign_char"
                },
                "cVar9": {
                    "1": "hex_character",
                    "2": "current_char",
                    "3": "digit_char",
                    "5": "temp_char"
                },
                "iVar15": {
                    "1": "temp_int1",
                    "2": "counter",
                    "3": "arg_index"
                },
                "iVar17": {
                    "1": "temp_index2",
                    "3": "arg_index"
                },
                "iVar22": {
                    "1": "temp_int_ptr3"
                },
                "iVar25": {
                    "1": "result"
                },
                "iVar27": {
                    "1": "alignment"
                },
                "iVar8": {
                    "1": "index",
                    "14": "result",
                    "2": "return_value"
                },
                "lVar27": {
                    "1": "combined_arg_value",
                    "2": "temp_long",
                    "3": "temp_long_long"
                },
                "local_64": {
                    "1": "ptr_array",
                    "2": "temp_array"
                },
                "local_68": {
                    "1": "temp_arg_list",
                    "3": "temp_buffer"
                },
                "local_69": {
                    "1": "temp_bool_flag",
                    "2": "padding_char"
                },
                "local_6a": {
                    "1": "c_stack_6a"
                },
                "local_90": {
                    "1": "fill_char"
                },
                "local_94": {
                    "1": "result_temp"
                },
                "local_98": {
                    "1": "format_args_count_copy",
                    "2": "format_count",
                    "7": "arg_count"
                },
                "local_9c": {
                    "1": "arg_ptr_list"
                },
                "local_9f": {
                    "1": "use_field_width_flag",
                    "2": "padding_char"
                },
                "local_a0": {
                    "1": "width_digit",
                    "3": "pad_char",
                    "5": "padding_char"
                },
                "local_a1": {
                    "1": "fill_char",
                    "2": "flag_char",
                    "3": "alignment_char",
                    "5": "sign_char"
                },
                "local_c0": {
                    "1": "local_char_array",
                    "2": "char_ptr",
                    "3": "hex_digits",
                    "4": "digits"
                },
                "local_c4": {
                    "1": "char_index",
                    "9": "result"
                },
                "local_c8": {
                    "1": "arg_ptr_list",
                    "7": "current_arg_ptr"
                },
                "local_d4": {
                    "1": "format_ptr",
                    "4": "precision"
                },
                "local_dc": {
                    "1": "local_var_char",
                    "2": "data_counter",
                    "6": "max_width"
                },
                "param_1": {
                    "1": "data_structure_pointer",
                    "2": "format_string",
                    "3": "arg1",
                    "8": "data"
                },
                "param_2": {
                    "1": "formatted_string",
                    "2": "header",
                    "3": "arg2",
                    "4": "format",
                    "6": "format_string"
                },
                "param_3": {
                    "1": "format_specifiers",
                    "12": "format_string",
                    "2": "formatted_string",
                    "4": "args"
                },
                "param_4": {
                    "1": "input4",
                    "2": "arg_list",
                    "7": "arguments"
                },
                "piVar12": {
                    "1": "temp_ptr"
                },
                "piVar19": {
                    "1": "current_argument"
                },
                "piVar22": {
                    "1": "ptr_value"
                },
                "piVar7": {
                    "1": "temp_int1",
                    "2": "arg_pointer"
                },
                "pp&pTargetpp": {
                    "1": "wide_string_arg_ptr"
                },
                "ppArgList": {
                    "1": "args_ptr"
                },
                "ppiVar12": {
                    "1": "arg_pointer_array",
                    "2": "arg_ptr_temp"
                },
                "ppiVar28": {
                    "1": "pp_arg"
                },
                "ppppppiVar10": {
                    "1": "current_char"
                },
                "pppppppiVar10": {
                    "1": "current_specifier",
                    "2": "current_format_specifier"
                },
                "pppppppiVar16": {
                    "1": "ptr_var16"
                },
                "pppppppiVar18": {
                    "1": "arg_pointer_array",
                    "2": "remaining_format"
                },
                "pppppppiVar19": {
                    "1": "temp_ptr3"
                },
                "pppppppiVar20": {
                    "1": "arg_pointer_array",
                    "2": "star_arg"
                },
                "pppppppiVar23": {
                    "1": "arg_pointer_array"
                },
                "pppppppiVar25": {
                    "1": "char_ptr_ptr"
                },
                "ppppppppiVar10": {
                    "1": "format_specifier_ptr"
                },
                "ppppppppiVar16": {
                    "1": "arg_pointer_array"
                },
                "ppppppppiVar18": {
                    "1": "temp_int_ptr3"
                },
                "ppppppppiVar19": {
                    "1": "arg_value_ptr"
                },
                "ppppppppiVar20": {
                    "1": "arg_value_ptr_alt"
                },
                "ppppppppiVar23": {
                    "1": "num_chars_ptr_alt"
                },
                "ppppppppiVar25": {
                    "1": "temp_int_ptr_array6"
                },
                "ppppppppiVar6": {
                    "1": "arg_pointer_array",
                    "2": "arg_ptr",
                    "3": "format_args"
                },
                "pppppppspecifierFlags": {
                    "1": "flags_ptr"
                },
                "pppppppspecifierString": {
                    "1": "specifier_string"
                },
                "ppppspppppiVar29": {
                    "1": "wide_string_ptr"
                },
                "uVar11": {
                    "1": "temp_length",
                    "7": "digit",
                    "9": "digit_value"
                },
                "uVar13": {
                    "1": "ushort_var2",
                    "11": "flags",
                    "2": "format_flags"
                },
                "uVar14": {
                    "1": "current_value",
                    "2": "format_char",
                    "3": "ch",
                    "4": "current_char"
                },
                "uVar21": {
                    "1": "uint_var",
                    "2": "width_value",
                    "3": "temp_flag"
                },
                "uVar24": {
                    "1": "hi_word",
                    "2": "temp_value"
                }
            },
            "called": [
                "FUN_00083888",
                "FUN_000834f0",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00082824",
                "FUN_00082688",
                "FUN_00084530"
            ],
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint process_formatted_string_0008289c(int data,int format_string,int *******format_string,int **args)\n\n{\n  bool is_negative;\n  bool is_unsigned;\n  bool has_alternate_form;\n  char sign_char;\n  bool is_zero_padding;\n  int ********format_args;\n  int *arg_pointer;\n  int result;\n  char temp_char;\n  int *******current_format_char;\n  uint digit_value;\n  int **arg_ptr_temp;\n  uint flags;\n  uint current_char;\n  int arg_index;\n  int ********arg_stack_entry;\n  int arg_index;\n  int *******remaining_format;\n  int *param2;\n  int *******star_arg;\n  uint temp_flag;\n  int *param2_unsigned;\n  int *******remaining_format_string2;\n  undefined4 temp_value;\n  int ********params_ptr3;\n  bool is_negative;\n  longlong temp_long_long;\n  int *******max_width;\n  int *******precision;\n  int **current_arg_ptr;\n  int result;\n  char *digits;\n  char sign_char;\n  undefined padding_char;\n  undefined padding_char;\n  int ********parse_index;\n  int arg_count;\n  int *******arg_pointers;\n  undefined specifier_buffer;\n  char temp_char;\n  undefined padding_char;\n  undefined temp_buffer [4];\n  int *******temp_array [16];\n  \n  if ((data != 0) && (*(int *)(data + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  flags = (uint)*(ushort *)(format_string + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format_string + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format_string + 0xc) = (short)flags;\n    *(uint *)(format_string + 100) = *(uint *)(format_string + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format_string + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = process_relocation_0008356c(data,format_string);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format_string + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format_string + 0xe)) {\n    result = process_data_000834f0(data,format_string,format_string,args);\n    return result;\n  }\nLAB_000828ee:\n  digits = (char *)0x0;\n  arg_pointers = (int *******)0x0;\n  arg_count = 0;\n  result = 0;\n  format_args = (int ********)temp_buffer;\n  current_arg_ptr = args;\n  parse_index = (int ********)temp_buffer;\nLAB_00082902:\n  current_format_char = format_string;\n  if ((*(char *)format_string != '\\0') && (*(char *)format_string != '%')) {\n    do {\n      current_format_char = (int *******)((int)current_format_char + 1);\n      if (*(char *)current_format_char == '\\0') break;\n    } while (*(char *)current_format_char != '%');\n    star_arg = (int *******)((int)current_format_char - (int)format_string);\n    if (star_arg != (int *******)0x0) {\n      arg_count = arg_count + 1;\n      arg_pointers = (int *******)((int)arg_pointers + (int)star_arg);\n      *format_args = format_string;\n      format_args[1] = star_arg;\n      if (arg_count < 8) {\n        format_args = format_args + 2;\n      }\n      else {\n        if (arg_pointers == (int *******)0x0) {\n          result = result + (int)star_arg;\n          arg_count = 0;\n          format_args = (int ********)temp_buffer;\n          goto LAB_00082952;\n        }\n        result = process_data_00082824(data,format_string,&parse_index);\n        format_args = (int ********)temp_buffer;\n        if (result != 0) goto LAB_00083142;\n      }\n      result = result + (int)star_arg;\n    }\n  }\nLAB_00082952:\n  if (*(char *)current_format_char != '\\0') {\n    sign_char = '\\0';\n    current_char = (uint)*(byte *)((int)current_format_char + 1);\n    flags = 0;\n    is_zero_padding = false;\n    is_unsigned = false;\n    is_negative = false;\n    has_alternate_form = false;\n    is_negative = false;\n    star_arg = (int *******)0x0;\n    precision = (int *******)0xffffffff;\n    format_string = (int *******)((int)current_format_char + 1);\nLAB_00082976:\n    format_string = (int *******)((int)format_string + 1);\nLAB_0008297a:\n    switch(current_char) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (current_char != 0) {\n        max_width = (int *******)0x1;\n        precision = (int *******)0x1;\n        params_ptr3 = (int ********)&specifier_buffer;\n        specifier_buffer = (char)current_char;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      has_alternate_form = true;\n      current_char = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2a:\n      star_arg = (int *******)*current_arg_ptr;\n      current_arg_ptr = current_arg_ptr + 1;\n      if ((int)star_arg < 0) {\n        star_arg = (int *******)-(int)star_arg;\n        goto switchD_00082984_caseD_2d;\n      }\n      current_char = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2b:\n      current_char = (uint)*(byte *)format_string;\n      sign_char = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      current_char = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2e:\n      current_char = (uint)*(byte *)format_string;\n      current_format_char = (int *******)((int)format_string + 1);\n      if (current_char == 0x2a) {\n        current_char = (uint)*(byte *)((int)format_string + 1);\n        precision = (int *******)*current_arg_ptr;\n        current_arg_ptr = current_arg_ptr + 1;\n        format_string = current_format_char;\n        if ((int)precision < 0) {\n          precision = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit_value = current_char - 0x30;\n      if (digit_value < 10) {\n        temp_flag = 0;\n        do {\n          format_string = (int *******)((int)current_format_char + 1);\n          current_char = (uint)*(byte *)current_format_char;\n          temp_flag = digit_value + temp_flag * 10;\n          digit_value = current_char - 0x30;\n          current_format_char = format_string;\n        } while (digit_value < 10);\n        precision = (int *******)(temp_flag | (int)temp_flag >> 0x1f);\n      }\n      else {\n        precision = (int *******)0x0;\n        format_string = current_format_char;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      current_char = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      is_unsigned = true;\n      if (is_negative == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      current_arg_ptr = (int **)((int)current_arg_ptr + 7U & 0xfffffff8);\n      param2 = *current_arg_ptr;\n      param2_unsigned = current_arg_ptr[1];\n      current_arg_ptr = current_arg_ptr + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      is_unsigned = true;\n      if (is_negative != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)is_unsigned << 4;\n      arg_index = (uint)is_negative << 5;\n      if ((is_unsigned == 0) && (arg_index = (uint)is_negative << 6, is_negative != 0)) {\n        param2 = (int *)(uint)*(ushort *)current_arg_ptr;\n        current_arg_ptr = current_arg_ptr + 1;\n        param2_unsigned = (int *)0x0;\n      }\n      else {\n        result = arg_index;\n        param2 = *current_arg_ptr;\n        current_arg_ptr = current_arg_ptr + 1;\n        param2_unsigned = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_unsigned = true;\n      if (is_negative != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((is_unsigned) || (is_negative == false)) {\n        result = 1;\n        param2 = *current_arg_ptr;\n        current_arg_ptr = current_arg_ptr + 1;\n        param2_unsigned = (int *)0x0;\n      }\n      else {\n        param2_unsigned = (int *)0x0;\n        param2 = (int *)(uint)*(ushort *)current_arg_ptr;\n        current_arg_ptr = current_arg_ptr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      digits = \"0123456789ABCDEF\";\n      if (is_negative == false) goto LAB_00082efa;\nLAB_00082d1a:\n      arg_ptr_temp = (int **)((int)current_arg_ptr + 7U & 0xfffffff8);\n      current_arg_ptr = arg_ptr_temp + 2;\n      param2 = *arg_ptr_temp;\n      param2_unsigned = arg_ptr_temp[1];\n      goto LAB_00082d2e;\n    case 99:\n      param2 = *current_arg_ptr;\n      current_arg_ptr = current_arg_ptr + 1;\n      max_width = (int *******)0x1;\n      specifier_buffer = SUB41(param2,0);\n      precision = (int *******)0x1;\n      params_ptr3 = (int ********)&specifier_buffer;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (is_negative != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((is_unsigned == false) && (is_negative != false)) {\n        param2 = (int *)(int)*(short *)current_arg_ptr;\n        current_arg_ptr = current_arg_ptr + 1;\n        param2_unsigned = (int *)((int)param2 >> 0x1f);\n      }\n      else {\n        param2 = *current_arg_ptr;\n        current_arg_ptr = current_arg_ptr + 1;\n        param2_unsigned = (int *)((int)param2 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)param2_unsigned < 0) {\n        is_negative = param2 != (int *)0x0;\n        param2 = (int *)-(int)param2;\n        param2_unsigned = (int *)(-(int)param2_unsigned - (uint)is_negative);\n        sign_char = '-';\n        sign_char = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)precision) {\n        flags = flags & 0xffffff7f;\n      }\n      is_zero_padding = false;\n      current_char = (uint)param2 | (uint)param2_unsigned;\n      result = 1;\n      sign_char = sign_char;\n      goto joined_r0x00082adc;\n    case 0x68:\n      is_negative = true;\n      current_char = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x6c:\n      current_char = (uint)*(byte *)format_string;\n      if (current_char == 0x6c) {\n        is_negative = true;\n        current_char = (uint)*(byte *)((int)format_string + 1);\n        format_string = (int *******)((int)format_string + 1);\n      }\n      else {\n        is_unsigned = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (is_negative == false) {\n        if (is_unsigned == false) {\n          if (is_negative) {\n            param2 = *current_arg_ptr;\n            current_arg_ptr = current_arg_ptr + 1;\n            *(short *)param2 = (short)result;\n          }\n          else {\n            param2 = *current_arg_ptr;\n            current_arg_ptr = current_arg_ptr + 1;\n            *param2 = result;\n          }\n        }\n        else {\n          param2 = *current_arg_ptr;\n          current_arg_ptr = current_arg_ptr + 1;\n          *param2 = result;\n        }\n      }\n      else {\n        param2 = *current_arg_ptr;\n        current_arg_ptr = current_arg_ptr + 1;\n        *param2 = result;\n        param2[1] = result >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (is_negative == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      arg_ptr_temp = (int **)((int)current_arg_ptr + 7U & 0xfffffff8);\n      current_arg_ptr = arg_ptr_temp + 2;\n      param2 = *arg_ptr_temp;\n      param2_unsigned = arg_ptr_temp[1];\n      result = 0;\n      break;\n    case 0x70:\n      param2 = *current_arg_ptr;\n      current_arg_ptr = current_arg_ptr + 1;\n      padding_char = 0x78;\n      is_zero_padding = true;\n      param2_unsigned = (int *)0x0;\n      padding_char = 0x30;\n      digits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_negative = true;\n      current_char = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x73:\n      params_ptr3 = (int ********)*current_arg_ptr;\n      sign_char = '\\0';\n      current_arg_ptr = current_arg_ptr + 1;\n      if (params_ptr3 != (int ********)0x0) {\n        if ((int)precision < 0) {\n          precision = (int *******)count_leading_zeros_00082688(params_ptr3);\n          current_format_char = (int *******)0x0;\n          sign_char = sign_char;\n        }\n        else {\n          result = find_character_000840f8(params_ptr3,0,precision);\n          sign_char = sign_char;\n          if (result == 0) {\n            current_format_char = (int *******)0x0;\n          }\n          else {\n            remaining_format = (int *******)(result - (int)params_ptr3);\n            if ((int)precision <= (int)(int *******)(result - (int)params_ptr3)) {\n              remaining_format = precision;\n            }\n            current_format_char = (int *******)0x0;\n            precision = remaining_format;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < precision) {\n        precision = (int *******)0x6;\n      }\n      max_width = (int *******)((uint)precision & ~((int)precision >> 0x1f));\n      params_ptr3 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      sign_char = '\\0';\n      current_format_char = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!is_negative) goto LAB_00082ce0;\nLAB_00082bc6:\n      arg_ptr_temp = (int **)((int)current_arg_ptr + 7U & 0xfffffff8);\n      current_arg_ptr = arg_ptr_temp + 2;\n      param2 = *arg_ptr_temp;\n      param2_unsigned = arg_ptr_temp[1];\n      result = 1;\n      break;\n    case 0x78:\n      digits = \"0123456789abcdef\";\n      if (is_negative != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((is_unsigned == false) && (is_negative != false)) {\n        param2_unsigned = (int *)0x0;\n        param2 = (int *)(uint)*(ushort *)current_arg_ptr;\n        current_arg_ptr = current_arg_ptr + 1;\n      }\n      else {\n        param2 = *current_arg_ptr;\n        current_arg_ptr = current_arg_ptr + 1;\n        param2_unsigned = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((has_alternate_form) && (((uint)param2 | (uint)param2_unsigned) != 0)) {\n        is_zero_padding = true;\n        padding_char = 0x30;\n        result = 2;\n        padding_char = (char)current_char;\n      }\n      else {\n        result = 2;\n      }\n    }\n    sign_char = '\\0';\n    sign_char = '\\0';\nLAB_00082ace:\n    if (-1 < (int)precision) {\n      flags = flags & 0xffffff7f;\n    }\n    current_char = (uint)param2 | (uint)param2_unsigned;\njoined_r0x00082adc:\n    temp_long_long = CONCAT44(param2_unsigned,param2);\n    current_format_char = precision;\n    if ((current_char == 0) && (precision == (int *******)0x0)) {\n      params_ptr3 = (int ********)temp_buffer;\n      if ((result != 0) || (!has_alternate_form)) goto LAB_00082b04;\n      params_ptr3 = (int ********)(&temp_char + 1);\n      padding_char = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (param2_unsigned != (int *)0x0 || (int *)0x9 < param2) {\n        arg_stack_entry = (int ********)(&temp_char + 1);\n        do {\n          params_ptr3 = arg_stack_entry;\n          temp_value = (undefined4)((ulonglong)temp_long_long >> 0x20);\n          temp_char = '\\n';\n          calculate_difference_00084530((int)temp_long_long,temp_value,10,0);\n          *(char *)params_ptr3 = temp_char + '0';\n          temp_long_long = calculate_difference_00084530((int)temp_long_long,temp_value,10,0);\n          arg_stack_entry = (int ********)((int)params_ptr3 + -1);\n        } while (temp_long_long != 0);\n        precision = (int *******)((int)temp_buffer - (int)params_ptr3);\n        goto LAB_00082b04;\n      }\n      padding_char = (char)param2 + '0';\n      params_ptr3 = (int ********)(&temp_char + 1);\n      goto LAB_00083282;\n    }\n    arg_stack_entry = (int ********)(&temp_char + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      params_ptr3 = arg_stack_entry;\n      current_char = (uint)param2 & 0xf;\n      param2 = (int *)((uint)param2 >> 4 | (int)param2_unsigned << 0x1c);\n      param2_unsigned = (int *)((uint)param2_unsigned >> 4);\n      *(char *)params_ptr3 = digits[current_char];\n      arg_stack_entry = (int ********)((int)params_ptr3 + -1);\n    } while (((uint)param2 | (uint)param2_unsigned) != 0);\n    precision = (int *******)((int)temp_buffer - (int)params_ptr3);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (arg_pointers != (int *******)0x0) {\n    process_data_00082824(data,format_string,&parse_index);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format_string + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result;\nLAB_000830e2:\n  do {\n    params_ptr3 = arg_stack_entry;\n    arg_pointer = (int *)((uint)param2 >> 3 | (int)param2_unsigned << 0x1d);\n    param2_unsigned = (int *)((uint)param2_unsigned >> 3);\n    result = ((uint)param2 & 7) + 0x30;\n    *(char *)params_ptr3 = (char)result;\n    arg_stack_entry = (int ********)((int)params_ptr3 + -1);\n    param2 = arg_pointer;\n  } while (((uint)arg_pointer | (uint)param2_unsigned) != 0);\n  if (has_alternate_form) {\n    if (result == 0x30) {\nLAB_00082afe:\n      precision = (int *******)((int)temp_buffer - (int)params_ptr3);\n    }\n    else {\n      *(undefined *)((int)params_ptr3 + -1) = 0x30;\n      params_ptr3 = arg_stack_entry;\n      precision = (int *******)((int)temp_buffer - (int)arg_stack_entry);\n    }\n  }\n  else {\nLAB_00083282:\n    precision = (int *******)((int)temp_buffer - (int)params_ptr3);\n  }\nLAB_00082b04:\n  max_width = precision;\n  if ((int)precision < (int)current_format_char) {\n    max_width = current_format_char;\n  }\n  if (sign_char != '\\0') {\n    max_width = (int *******)((int)max_width + 1);\n  }\nLAB_00082b1e:\n  if (is_zero_padding) {\n    max_width = (int *******)((int)max_width + 2);\n  }\n  if ((flags == 0) &&\n     (remaining_format = (int *******)((int)star_arg - (int)max_width), 0 < (int)remaining_format)) {\n    if ((int)remaining_format < 0x11) {\n      arg_count = arg_count + 1;\n    }\n    else {\n      do {\n        remaining_format_string2 = remaining_format;\n        result = arg_count + 1;\n        arg_pointers = arg_pointers + 4;\n        *format_args = (int *******)0x856f0;\n        format_args[1] = (int *******)0x10;\n        if (result < 8) {\n          arg_index = arg_count + 2;\n          format_args = format_args + 2;\n          arg_count = result;\n        }\n        else if (arg_pointers == (int *******)0x0) {\n          arg_index = 1;\n          format_args = (int ********)temp_buffer;\n          arg_count = 0;\n        }\n        else {\n          arg_count = result;\n          result = process_data_00082824(data,format_string,&parse_index);\n          if (result != 0) goto LAB_00083142;\n          arg_index = arg_count + 1;\n          format_args = (int ********)temp_buffer;\n        }\n        remaining_format = remaining_format_string2 + -4;\n      } while (0x10 < (int)remaining_format);\n      remaining_format = remaining_format_string2 + -4;\n      arg_count = arg_index;\n    }\n    arg_pointers = (int *******)((int)arg_pointers + (int)remaining_format);\n    *format_args = (int *******)0x856f0;\n    format_args[1] = remaining_format;\n    if (arg_count < 8) {\n      result = arg_count + 1;\n      format_args = format_args + 2;\n    }\n    else if (arg_pointers == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      result = process_data_00082824(data,format_string,&parse_index);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  else {\n    result = arg_count + 1;\n  }\n  arg_index = result;\n  if (sign_char != '\\0') {\n    arg_pointers = (int *******)((int)arg_pointers + 1);\n    arg_index = 1;\n    *format_args = (int *******)&sign_char;\n    format_args[1] = (int *******)0x1;\n    arg_count = result;\n    if (result < 8) {\n      arg_index = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (arg_pointers == (int *******)0x0) {\n      arg_count = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      result = process_data_00082824(data,format_string,&parse_index);\n      if (result != 0) goto LAB_00083142;\n      arg_index = arg_count + 1;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  result = arg_index;\n  arg_index = arg_count;\n  if (is_zero_padding) {\n    arg_pointers = (int *******)((int)arg_pointers + 2);\n    *format_args = (int *******)&padding_char;\n    format_args[1] = (int *******)0x2;\n    if (arg_index < 8) {\n      result = arg_index + 1;\n      arg_index = arg_index;\n      format_args = format_args + 2;\n    }\n    else if (arg_pointers == (int *******)0x0) {\n      result = 1;\n      arg_index = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      arg_count = arg_index;\n      result = process_data_00082824(data,format_string,&parse_index);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      arg_index = arg_count;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  arg_count = arg_index;\n  if ((flags == 0x80) &&\n     (remaining_format = (int *******)((int)star_arg - (int)max_width), 0 < (int)remaining_format)) {\n    if (0x10 < (int)remaining_format) {\n      do {\n        while( true ) {\n          remaining_format_string2 = remaining_format;\n          arg_count = arg_index + 1;\n          arg_pointers = arg_pointers + 4;\n          *format_args = (int *******)\"0000000000000000\";\n          format_args[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = arg_index + 2;\n          format_args = format_args + 2;\nLAB_000831f2:\n          arg_index = arg_count;\n          remaining_format = remaining_format_string2 + -4;\n          if ((int)(remaining_format_string2 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (arg_pointers != (int *******)0x0) {\n          result = process_data_00082824(data,format_string,&parse_index);\n          if (result == 0) {\n            result = arg_count + 1;\n            format_args = (int ********)temp_buffer;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        arg_index = 0;\n        remaining_format = remaining_format_string2 + -4;\n        format_args = (int ********)temp_buffer;\n      } while (0x10 < (int)(remaining_format_string2 + -4));\nLAB_00083218:\n      remaining_format = remaining_format_string2 + -4;\n    }\n    arg_pointers = (int *******)((int)arg_pointers + (int)remaining_format);\n    *format_args = (int *******)\"0000000000000000\";\n    format_args[1] = remaining_format;\n    arg_count = result;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (arg_pointers == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      result = process_data_00082824(data,format_string,&parse_index);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  current_format_char = (int *******)((int)current_format_char - (int)precision);\n  arg_stack_entry = (int ********)temp_buffer;\n  if ((int)current_format_char < 1) {\nLAB_0008302a:\n    arg_pointers = (int *******)((int)arg_pointers + (int)precision);\n    *format_args = (int *******)params_ptr3;\n    format_args[1] = precision;\n    precision = arg_pointers;\n    arg_count = result;\n    if (result < 8) goto LAB_000831be;\n    if (arg_pointers == (int *******)0x0) {\n      arg_count = 0;\n    }\n    else {\n      result = process_data_00082824(data,format_string,&parse_index);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    arg_index = arg_count;\n    if (0x10 < (int)current_format_char) {\n      do {\n        while( true ) {\n          remaining_format = current_format_char;\n          arg_count = arg_index + 1;\n          arg_pointers = arg_pointers + 4;\n          *format_args = (int *******)\"0000000000000000\";\n          format_args[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = arg_index + 2;\n          format_args = format_args + 2;\nLAB_00082fe6:\n          arg_index = arg_count;\n          current_format_char = remaining_format + -4;\n          if ((int)(remaining_format + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (arg_pointers != (int *******)0x0) {\n          result = process_data_00082824(data,format_string,&parse_index);\n          if (result == 0) {\n            result = arg_count + 1;\n            format_args = (int ********)temp_buffer;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        format_args = (int ********)temp_buffer;\n        arg_index = 0;\n        current_format_char = remaining_format + -4;\n      } while (0x10 < (int)(remaining_format + -4));\nLAB_0008300e:\n      current_format_char = remaining_format + -4;\n    }\n    arg_pointers = (int *******)((int)arg_pointers + (int)current_format_char);\n    *format_args = (int *******)\"0000000000000000\";\n    format_args[1] = current_format_char;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n      goto LAB_0008302a;\n    }\n    if (arg_pointers != (int *******)0x0) {\n      arg_count = result;\n      result = process_data_00082824(data,format_string,&parse_index);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      format_args = (int ********)temp_buffer;\n      goto LAB_0008302a;\n    }\n    temp_array[0] = precision;\n    arg_count = 1;\n    format_args = (int ********)temp_buffer;\n    temp_buffer = (undefined  [4])params_ptr3;\nLAB_000831be:\n    arg_stack_entry = format_args + 2;\n    arg_pointers = precision;\n  }\n  if (((flags & 4) != 0) &&\n     (current_format_char = (int *******)((int)star_arg - (int)max_width), 0 < (int)current_format_char)) {\n    result = arg_count;\n    if ((int)current_format_char < 0x11) {\n      arg_index = arg_count + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          arg_count = result + 1;\n          arg_pointers = arg_pointers + 4;\n          *arg_stack_entry = (int *******)0x856f0;\n          arg_stack_entry[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          arg_index = result + 2;\n          arg_stack_entry = arg_stack_entry + 2;\nLAB_0008307a:\n          current_format_char = current_format_char + -4;\n          result = arg_count;\n          if ((int)current_format_char < 0x11) goto LAB_000830a2;\n        }\n        if (arg_pointers != (int *******)0x0) {\n          result = process_data_00082824(data,format_string,&parse_index);\n          if (result == 0) {\n            arg_index = arg_count + 1;\n            arg_stack_entry = (int ********)temp_buffer;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        current_format_char = current_format_char + -4;\n        arg_index = 1;\n        result = 0;\n        arg_stack_entry = (int ********)temp_buffer;\n      } while (0x10 < (int)current_format_char);\n    }\nLAB_000830a2:\n    arg_pointers = (int *******)((int)arg_pointers + (int)current_format_char);\n    *arg_stack_entry = (int *******)0x856f0;\n    arg_stack_entry[1] = current_format_char;\n    arg_count = arg_index;\n    if (7 < arg_index) {\n      if (arg_pointers == (int *******)0x0) {\n        if ((int)max_width < (int)star_arg) {\n          max_width = star_arg;\n        }\n        result = result + (int)max_width;\n        goto LAB_00083186;\n      }\n      result = process_data_00082824(data,format_string,&parse_index);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)max_width < (int)star_arg) {\n    max_width = star_arg;\n  }\n  result = result + (int)max_width;\n  if ((arg_pointers != (int *******)0x0) &&\n     (result = process_data_00082824(data,format_string,&parse_index), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  arg_count = 0;\n  format_args = (int ********)temp_buffer;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit_value = current_char - 0x30;\n  star_arg = (int *******)0x0;\n  current_format_char = format_string;\n  do {\n    format_string = (int *******)((int)current_format_char + 1);\n    current_char = (uint)*(byte *)current_format_char;\n    star_arg = (int *******)(digit_value + (int)star_arg * 10);\n    digit_value = current_char - 0x30;\n    current_format_char = format_string;\n  } while (digit_value < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  current_char = (uint)*(byte *)format_string;\n  if (sign_char == '\\0') {\n    sign_char = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "current_name": "process_formatted_string_0008289c",
            "entrypoint": "0x0008289c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008289c": "process_formatted_string_0008289c",
                "bVar1": "is_negative",
                "bVar2": "is_unsigned",
                "bVar26": "is_negative",
                "bVar3": "has_alternate_form",
                "bVar5": "is_zero_padding",
                "cStack_6a": "temp_char",
                "cVar4": "sign_char",
                "cVar9": "temp_char",
                "iVar15": "arg_index",
                "iVar17": "arg_index",
                "iVar22": "temp_int_ptr3",
                "iVar25": "result",
                "iVar8": "result",
                "lVar27": "temp_long_long",
                "local_64": "temp_array",
                "local_68": "temp_buffer",
                "local_69": "padding_char",
                "local_90": "specifier_buffer",
                "local_94": "arg_pointers",
                "local_98": "arg_count",
                "local_9c": "parse_index",
                "local_9f": "padding_char",
                "local_a0": "padding_char",
                "local_a1": "sign_char",
                "local_c0": "digits",
                "local_c4": "result",
                "local_c8": "current_arg_ptr",
                "local_d4": "precision",
                "local_dc": "max_width",
                "param_1": "data",
                "param_2": "format_string",
                "param_3": "format_string",
                "param_4": "args",
                "piVar12": "temp_ptr",
                "piVar19": "param2",
                "piVar22": "param2_unsigned",
                "piVar7": "arg_pointer",
                "ppiVar12": "arg_ptr_temp",
                "ppppppiVar10": "current_char",
                "pppppppiVar10": "current_format_char",
                "pppppppiVar16": "format_args_ptr",
                "pppppppiVar18": "remaining_format",
                "pppppppiVar20": "star_arg",
                "pppppppiVar23": "remaining_format_string2",
                "pppppppiVar25": "char_ptr_ptr",
                "ppppppppiVar16": "arg_stack_entry",
                "ppppppppiVar25": "params_ptr3",
                "ppppppppiVar6": "format_args",
                "uVar11": "digit_value",
                "uVar13": "flags",
                "uVar14": "current_char",
                "uVar21": "temp_flag",
                "uVar24": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000834f0": {
            "additional_data": {
                "FUN_000834f0": {
                    "1": "process_and_validate_data",
                    "2": "process_and_check_data",
                    "25": "process_data"
                },
                "auStack_420": {
                    "1": "aux_stack",
                    "2": "stack_data",
                    "7": "stack_array",
                    "9": "stack_buffer"
                },
                "iVar1": {
                    "1": "return_val",
                    "13": "result",
                    "7": "return_value"
                },
                "iVar2": {
                    "1": "check_result",
                    "2": "process_data_return_value",
                    "3": "processing_result",
                    "4": "data_processing_result",
                    "8": "process_result"
                },
                "local_424": {
                    "1": "data_pointer2",
                    "2": "value4"
                },
                "local_464": {
                    "1": "param_copy2",
                    "2": "value2"
                },
                "local_46c": {
                    "1": "value_2",
                    "2": "local_var2",
                    "3": "value2",
                    "5": "value"
                },
                "local_470": {
                    "1": "local_var3",
                    "2": "value2",
                    "7": "counter",
                    "9": "zero"
                },
                "local_474": {
                    "1": "constant2",
                    "13": "buffer_size2",
                    "2": "buffer_size1",
                    "4": "buffer_size"
                },
                "local_478": {
                    "1": "stack_buffer",
                    "11": "buffer",
                    "2": "output_buffer",
                    "7": "buffer_ptr"
                },
                "local_47a": {
                    "1": "value2",
                    "12": "value",
                    "2": "local_var3"
                },
                "local_47c": {
                    "1": "local_var3",
                    "10": "masked_value",
                    "2": "mask",
                    "3": "flags",
                    "4": "modified_value"
                },
                "local_480": {
                    "1": "local_var4",
                    "18": "buffer_size",
                    "2": "buffer_length",
                    "6": "buffer_size1"
                },
                "local_488": {
                    "1": "stack_pointers",
                    "2": "stack_buffer",
                    "3": "stack_buffers",
                    "6": "buffer",
                    "8": "buffer_array"
                },
                "local_488[0]": {
                    "1": "buffer"
                },
                "local_488[2]": {
                    "1": "local_pointer_array"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input1",
                    "3": "context",
                    "4": "input_param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "buffer",
                    "2": "arg2",
                    "3": "data_ptr",
                    "4": "data_param",
                    "6": "param2",
                    "7": "data"
                }
            },
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint process_data_000834f0(undefined4 param1,int data)\n\n{\n  int result;\n  int process_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort masked_value;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_size2;\n  undefined4 zero;\n  undefined4 value;\n  undefined4 value3;\n  undefined4 value4;\n  undefined stack_buffer [1024];\n  \n  value4 = *(undefined4 *)(data + 100);\n  value = *(undefined4 *)(data + 0x1c);\n  value = *(undefined2 *)(data + 0xe);\n  value3 = *(undefined4 *)(data + 0x24);\n  buffer = stack_buffer;\n  masked_value = *(ushort *)(data + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size2 = 0x400;\n  zero = 0;\n  buffer = buffer;\n  result = process_formatted_string_0008289c(param1,buffer_array);\n  if ((-1 < result) && (process_result = process_data_000834f0_00083850(param1,buffer_array), process_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)masked_value << 0x19) < 0) {\n    *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "code_backup": "\nint FUN_000834f0(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_0008289c(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083850(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n",
            "current_name": "process_data_000834f0",
            "entrypoint": "0x000834f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "auStack_420": "stack_buffer",
                "iVar1": "result",
                "iVar2": "process_result",
                "local_424": "value4",
                "local_464": "value3",
                "local_46c": "value",
                "local_470": "zero",
                "local_474": "buffer_size2",
                "local_478": "buffer",
                "local_47a": "value",
                "local_47c": "masked_value",
                "local_480": "buffer_size",
                "local_488": "buffer_array",
                "local_488[0]": "buffer",
                "param_1": "param1",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008356c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf32_rel_array",
                    "2": "relocation_array"
                },
                "FUN_0008356c": {
                    "1": "process_relocation_entry",
                    "2": "initialize_and_update_data",
                    "3": "initialize_relocation_entry",
                    "4": "process_relocation"
                },
                "iVar1": {
                    "1": "memory_offset",
                    "2": "index",
                    "3": "result",
                    "4": "temp_var1",
                    "6": "value1"
                },
                "iVar2": {
                    "1": "data_offset",
                    "2": "temp2",
                    "3": "value",
                    "4": "temp_var2",
                    "7": "value2"
                },
                "initialize_data_structures": {
                    "1": "initialize_data_structures"
                },
                "initialize_data_structures_00083888": {
                    "3": "initialize_data_structures"
                },
                "initialize_memory_00084018": {
                    "5": "initialize_memory"
                },
                "param_1": {
                    "1": "result_code",
                    "10": "result",
                    "2": "out_param",
                    "3": "output_status",
                    "5": "status"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "input_values",
                    "3": "data_array",
                    "4": "input_data",
                    "6": "relocation_entry"
                },
                "r_offset": {
                    "1": "rel_offset"
                },
                "uVar3": {
                    "1": "relocation_flag",
                    "2": "temp_var",
                    "3": "value",
                    "4": "flags"
                },
                "uVar4": {
                    "1": "relocation_value",
                    "2": "short_value",
                    "3": "temp_var4"
                },
                "update_relocation_entry_00083b10": {
                    "5": "update_relocation_entry"
                }
            },
            "called": [
                "FUN_00083888",
                "FUN_00084018",
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "code": "\nundefined4 process_relocation_0008356c(undefined4 *result,int *relocation_entry)\n\n{\n  int value1;\n  int value2;\n  uint flags;\n  ushort temp_var4;\n  \n  if ((relocation_array[140].rel_offset != 0) &&\n     (*(int *)(relocation_array[140].rel_offset + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  temp_var4 = *(ushort *)(relocation_entry + 3);\n  flags = (uint)temp_var4;\n  if ((int)(flags << 0x1c) < 0) {\n    value2 = relocation_entry[4];\n  }\n  else {\n    if (-1 < (int)(flags << 0x1b)) {\n      *result = 9;\n      *(ushort *)(relocation_entry + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(flags << 0x1d) < 0) {\n      if ((int *)relocation_entry[0xc] != (int *)0x0) {\n        if ((int *)relocation_entry[0xc] != relocation_entry + 0x10) {\n          update_relocation_entry(result);\n          temp_var4 = *(ushort *)(relocation_entry + 3);\n        }\n        relocation_entry[0xc] = 0;\n      }\n      value2 = relocation_entry[4];\n      temp_var4 = temp_var4 & 0xffdb;\n      *relocation_entry = value2;\n      relocation_entry[1] = 0;\n    }\n    else {\n      value2 = relocation_entry[4];\n    }\n    *(ushort *)(relocation_entry + 3) = temp_var4 | 8;\n    flags = (uint)(temp_var4 | 8);\n  }\n  if ((value2 == 0) && ((flags & 0x280) != 0x200)) {\n    initialize_memory(result,relocation_entry);\n    flags = (uint)*(ushort *)(relocation_entry + 3);\n    value2 = relocation_entry[4];\n  }\n  if ((flags & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(flags << 0x1e)) {\n      value1 = relocation_entry[5];\n    }\n    relocation_entry[2] = value1;\n  }\n  else {\n    relocation_entry[6] = -relocation_entry[5];\n    relocation_entry[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(relocation_entry + 3) << 0x18) < 0)) {\n    *(ushort *)(relocation_entry + 3) = *(ushort *)(relocation_entry + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_relocation_0008356c",
            "entrypoint": "0x0008356c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_0008356c": "process_relocation_0008356c",
                "iVar1": "value1",
                "iVar2": "value2",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "initialize_memory_00084018": "initialize_memory",
                "param_1": "result",
                "param_2": "relocation_entry",
                "r_offset": "rel_offset",
                "uVar3": "flags",
                "uVar4": "temp_var4",
                "update_relocation_entry_00083b10": "update_relocation_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000836d8": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000836d8",
            "entrypoint": "0x000836d8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000836ec": {
            "additional_data": {
                "*pdVar1": {
                    "1": "array_ptr"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "2": "relocation_table",
                    "4": "rel_array"
                },
                "FUN_000836ec": {
                    "16": "process_and_jump",
                    "3": "initialize_process",
                    "5": "process_and_execute",
                    "7": "process_and_exit"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jump_table_address",
                    "17": "jump_table",
                    "2": "jump_function",
                    "3": "unrecovered_jump_table"
                },
                "allocate_memory_000817f0": {
                    "2": "allocate_memory"
                },
                "code": {
                    "1": "code"
                },
                "dVar2": {
                    "1": "var2",
                    "24": "exit_status",
                    "4": "status"
                },
                "dword": {
                    "1": "dword"
                },
                "exit_with_status_00080eec": {
                    "3": "exit_with_status"
                },
                "iVar3": {
                    "1": "array_index",
                    "16": "index",
                    "2": "current_index",
                    "4": "count",
                    "5": "counter"
                },
                "pdVar1": {
                    "1": "result_array",
                    "2": "relocated_pointer",
                    "4": "pointer",
                    "5": "memory_ptr"
                },
                "process_param_000841e4": {
                    "1": "initialize_param"
                },
                "r_offset": {
                    "1": "relative_offset"
                }
            },
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "calling": [
                "FUN_000816f8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid process_and_jump_000836ec(void)\n\n{\n  dword *memory_ptr;\n  dword exit_status;\n  int index;\n  code *jump_table;\n  \n  process_params(6);\n  jump_table = (code *)0x836fb;\n  exit_status = exit_with_status(1);\n  if (rel_array[48].relative_offset == 0) {\n    rel_array[48].relative_offset = 0x20070184;\n  }\n  index = *(int *)(rel_array[48].relative_offset + 4);\n  memory_ptr = (dword *)rel_array[48].relative_offset;\n  if (0x1f < index) {\n    memory_ptr = (dword *)allocate_memory(400);\n    if (memory_ptr == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *memory_ptr = rel_array[48].relative_offset;\n    memory_ptr[1] = 0;\n    index = 0;\n    rel_array[48].relative_offset = (dword)memory_ptr;\n    memory_ptr[0x62] = 0;\n    memory_ptr[99] = 0;\n  }\n  memory_ptr[1] = index + 1;\n  memory_ptr[index + 2] = exit_status;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "process_and_jump_000836ec",
            "entrypoint": "0x000836ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000836ec": "process_and_jump_000836ec",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "allocate_memory_000817f0": "allocate_memory",
                "dVar2": "exit_status",
                "exit_with_status_00080eec": "exit_with_status",
                "iVar3": "index",
                "pdVar1": "memory_ptr",
                "process_param_000841e4": "process_params",
                "r_offset": "relative_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083850": {
            "additional_data": {
                "FUN_00083850": {
                    "1": "initialize_and_process_data",
                    "18": "process_data"
                },
                "iVar2": {
                    "1": "int_var",
                    "2": "value1",
                    "3": "var1",
                    "5": "remaining_size"
                },
                "iVar5": {
                    "1": "variable2",
                    "2": "offset",
                    "4": "temp_var2"
                },
                "iVar7": {
                    "1": "temp_var6",
                    "2": "temp3",
                    "4": "temp_var"
                },
                "initialize_data_structures_00083888": {
                    "1": "initialize_data_structures"
                },
                "param_1": {
                    "1": "data_structure_ptr",
                    "2": "data_pointer",
                    "3": "data_ptr",
                    "4": "data",
                    "5": "input_array",
                    "6": "input_data",
                    "7": "data_array"
                },
                "param_2": {
                    "1": "control_array",
                    "2": "info",
                    "3": "output_array",
                    "6": "info_array"
                },
                "pcVar6": {
                    "1": "processing_function",
                    "2": "relocation_function",
                    "5": "callback",
                    "7": "function_ptr"
                },
                "piVar1": {
                    "1": "ptr_var1",
                    "2": "ptr_var",
                    "4": "ptr1",
                    "6": "pointer_var1",
                    "8": "relocation_entry"
                },
                "uVar3": {
                    "1": "var2",
                    "2": "status",
                    "3": "ushort_var",
                    "4": "flag",
                    "7": "flags"
                },
                "uVar4": {
                    "1": "temp_flag",
                    "2": "temp_variable",
                    "3": "temp_var",
                    "6": "temp"
                },
                "unaff_r4": {
                    "1": "unaffected_var4",
                    "2": "unaffected_var",
                    "7": "result",
                    "8": "return_value"
                },
                "update_relocation_entry_00083b10": {
                    "1": "update_relocation_entry"
                }
            },
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "code": "\nundefined4 process_data_00083850(int *data_array,int *output_data)\n\n{\n  int *relocation_entry;\n  int remaining_size;\n  ushort flags;\n  uint temp;\n  int temp_var2;\n  code *function_ptr;\n  undefined4 return_value;\n  int temp_var3;\n  \n  if ((data_array != (int *)0x0) && (data_array[0xe] == 0)) {\n    initialize_data_structures();\n  }\n  if (*(short *)(output_data + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_data + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_var3 = output_data[4];\n    if (temp_var3 == 0) {\n      return 0;\n    }\n    remaining_size = *output_data;\n    if ((flags & 3) == 0) {\n      temp_var2 = output_data[5];\n    }\n    else {\n      temp_var2 = 0;\n    }\n    *output_data = temp_var3;\n    remaining_size = remaining_size - temp_var3;\n    output_data[2] = temp_var2;\n    do {\n      if (remaining_size < 1) {\n        return 0;\n      }\n      temp_var2 = (*(code *)output_data[9])(data_array,output_data[7],temp_var3,remaining_size,return_value);\n      remaining_size = remaining_size - temp_var2;\n      temp_var3 = temp_var3 + temp_var2;\n    } while (0 < temp_var2);\nLAB_000837c8:\n    *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_data + 3) = flags | 0x800;\n  if ((output_data[1] < 1) && (output_data[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)output_data[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  temp_var3 = *data_array;\n  *data_array = 0;\n  if ((flags & 0x1000) == 0) {\n    remaining_size = (*function_ptr)(data_array,output_data[7],temp & 0x1000,1);\n    if ((remaining_size == -1) && (temp_var2 = *data_array, temp_var2 != 0)) {\n      if ((temp_var2 == 0x1d) || (temp_var2 == 0x16)) {\n        *data_array = temp_var3;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    temp = (uint)*(ushort *)(output_data + 3);\n    function_ptr = (code *)output_data[10];\n  }\n  else {\n    remaining_size = output_data[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (remaining_size = remaining_size - output_data[1], output_data[0xc] != 0)) {\n    remaining_size = remaining_size - output_data[0xf];\n  }\n  remaining_size = (*function_ptr)(data_array,output_data[7],remaining_size,0);\n  if (remaining_size == -1) {\n    temp_var2 = *data_array;\n    if (temp_var2 != 0) {\n      if ((temp_var2 != 0x1d) && (temp_var2 != 0x16)) {\n        *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_data + 3) = *(ushort *)(output_data + 3) & 0xf7ff;\n      *output_data = output_data[4];\n      output_data[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(output_data + 3) & 0xf7ff;\n    output_data[1] = 0;\n    *(ushort *)(output_data + 3) = flags;\n    *output_data = output_data[4];\n  }\n  else {\n    flags = *(ushort *)(output_data + 3) & 0xf7ff;\n    *output_data = output_data[4];\n    *(ushort *)(output_data + 3) = flags;\n    output_data[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_data[0x14] = remaining_size;\n  }\nLAB_00083774:\n  relocation_entry = (int *)output_data[0xc];\n  *data_array = temp_var3;\n  if (relocation_entry == (int *)0x0) {\n    return 0;\n  }\n  if (relocation_entry != output_data + 0x10) {\n    update_relocation_entry(data_array);\n  }\n  output_data[0xc] = 0;\n  return 0;\n}\n\n",
            "current_name": "process_data_00083850",
            "entrypoint": "0x00083850",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "iVar2": "remaining_size",
                "iVar5": "temp_var2",
                "iVar7": "temp_var3",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "param_1": "data_array",
                "param_2": "output_data",
                "pcVar6": "function_ptr",
                "piVar1": "relocation_entry",
                "uVar3": "flags",
                "uVar4": "temp",
                "unaff_r4": "return_value",
                "update_relocation_entry_00083b10": "update_relocation_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083888": {
            "additional_data": {
                "FUNC_00083888": {
                    "1": "initialize_data_structures"
                },
                "FUN_00083888": {
                    "1": "initialize_parameters",
                    "2": "initialize_data",
                    "22": "initialize_data_structures",
                    "3": "initialize_data_structure"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "data_structure_pointer",
                    "3": "data_struct",
                    "4": "data_structures",
                    "5": "data_structure"
                },
                "puVar1": {
                    "1": "first_parameter",
                    "10": "ptr1",
                    "2": "pointer1",
                    "3": "data_structure1",
                    "5": "struct1"
                },
                "puVar2": {
                    "1": "var2",
                    "10": "ptr2",
                    "2": "data_struct2",
                    "3": "data_structure2",
                    "5": "struct2"
                }
            },
            "called": [
                "FUN_00081f00"
            ],
            "calling": [
                "FUN_00084484",
                "FUN_00083850",
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_0008289c"
            ],
            "code": "\nvoid initialize_data_structures_00083888(int data_structure)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(data_structure + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(data_structure + 4);\n    *(undefined **)(data_structure + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(data_structure + 0x2e4) = 3;\n    *(int *)(data_structure + 0x2e8) = data_structure + 0x2ec;\n    *(undefined4 *)(data_structure + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_with_byte_00081f00(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(data_structure + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    fill_memory_with_byte_00081f00(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(data_structure + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_with_byte_00081f00(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(data_structure + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00083888",
            "entrypoint": "0x00083888",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "data_structure",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008397c": {
            "called": [],
            "calling": [
                "FUN_00084484"
            ],
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008397c",
            "entrypoint": "0x0008397c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083980": {
            "called": [],
            "calling": [
                "FUN_00084484"
            ],
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083980",
            "entrypoint": "0x00083980",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000839b4": {
            "additional_data": {
                "FUN_000839b4": {
                    "1": "execute_data_processing",
                    "2": "process_and_execute",
                    "28": "process_data"
                },
                "abStack_1b": {
                    "1": "next_byte_arr",
                    "10": "byte_array",
                    "3": "stack_bytes",
                    "8": "stack_array"
                },
                "execute_function_0008434c": {
                    "1": "execute_function"
                },
                "get_relocation_offset_0008400c": {
                    "1": "get_relocation_offset"
                },
                "iVar1": {
                    "1": "relocation_result",
                    "24": "relocation_offset"
                },
                "local_1c": {
                    "1": "data_byte",
                    "10": "current_byte",
                    "2": "byte_data",
                    "4": "current_value",
                    "5": "byte_value"
                },
                "param_1": {
                    "1": "input_param",
                    "16": "param1",
                    "4": "arg1",
                    "5": "offset"
                },
                "param_2": {
                    "1": "size",
                    "15": "param2",
                    "3": "arg2",
                    "4": "length",
                    "5": "data_size"
                },
                "param_3": {
                    "1": "arg_3",
                    "14": "param3",
                    "2": "data_array",
                    "3": "arg3",
                    "8": "data"
                },
                "pbVar4": {
                    "1": "current_address",
                    "2": "current_pointer",
                    "4": "current_byte"
                },
                "process_data_000842a4": {
                    "1": "process_data_helper"
                },
                "uVar1": {
                    "1": "relocation_offset"
                },
                "uVar2": {
                    "1": "execution_result",
                    "21": "result",
                    "4": "return_value"
                },
                "uVar3": {
                    "10": "byte_value",
                    "12": "current_byte",
                    "2": "current_value",
                    "3": "data"
                },
                "uVar5": {
                    "1": "loop_index",
                    "11": "index",
                    "12": "counter",
                    "2": "iteration_count"
                },
                "uVar6": {
                    "1": "function_result"
                }
            },
            "called": [
                "FUN_0008400c",
                "FUN_000842a4",
                "FUN_0008434c"
            ],
            "calling": [
                "FUN_00082824"
            ],
            "code": "\nuint process_data_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int relocation_offset;\n  uint result;\n  uint current_byte;\n  byte *byte_pointer;\n  uint counter;\n  byte current_byte;\n  byte byte_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  relocation_offset = get_relocation_offset();\n  if ((relocation_offset == 1) && (param2 - 1 < 0xff)) {\n    current_byte = param2 & 0xff;\n    current_byte = (byte)current_byte;\n    result = 1;\n  }\n  else {\n    result = execute_function(param1,&current_byte,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    current_byte = (uint)current_byte;\n  }\n  counter = 0;\n  do {\n    byte_pointer = param3[2] + -1;\n    param3[2] = byte_pointer;\n    if ((int)byte_pointer < 0) {\n      if ((int)param3[6] <= (int)byte_pointer) {\n        **param3 = (byte)current_byte;\n        byte_pointer = *param3;\n        current_byte = (uint)*byte_pointer;\n        if (current_byte != 10) goto LAB_00083a04;\n      }\n      relocation_offset = process_data_000839b4_helper(param1,current_byte,param3);\n      if (relocation_offset == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)current_byte;\n      byte_pointer = *param3;\nLAB_00083a04:\n      *param3 = byte_pointer + 1;\n    }\n    if (result <= counter + 1) {\n      return param2;\n    }\n    current_byte = (uint)byte_array[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_data_000839b4",
            "entrypoint": "0x000839b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "abStack_1b": "byte_array",
                "execute_function_0008434c": "execute_function",
                "get_relocation_offset_0008400c": "get_relocation_offset",
                "iVar1": "relocation_offset",
                "local_1c": "current_byte",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pbVar4": "byte_pointer",
                "process_data_000842a4": "process_data_helper",
                "uVar2": "result",
                "uVar3": "current_byte",
                "uVar5": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083a74": {
            "additional_data": {
                "DAT_2007121c": {
                    "1": "data_offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info": {
                    "1": "current_info"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info + 4": {
                    "1": "info_plus_4"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_offset": {
                    "1": "current_offset"
                },
                "Elf32_Rel_ARRAY_20070000[270].r_offset": {
                    "1": "another_rel_offset"
                },
                "FUNC_00081f94": {
                    "1": "perform_initialization"
                },
                "FUNC_00081f98": {
                    "1": "cleanup_func"
                },
                "FUN_00083a74": {
                    "1": "update_elf_info",
                    "2": "update_value",
                    "3": "update_rel_info",
                    "5": "reverse_and_update_value"
                },
                "iVar1": {
                    "1": "retval",
                    "12": "result",
                    "14": "update_result",
                    "2": "updated_value"
                },
                "iVar3": {
                    "1": "calculated_offset",
                    "16": "new_offset",
                    "2": "new_address",
                    "5": "adjusted_offset"
                },
                "param_1": {
                    "1": "context",
                    "2": "value",
                    "3": "param",
                    "4": "data",
                    "7": "input_param"
                },
                "param_2": {
                    "1": "value_offset",
                    "19": "offset",
                    "3": "arg2"
                },
                "uVar2": {
                    "1": "masked_offset",
                    "2": "adjusted_offset",
                    "4": "info_value",
                    "5": "info",
                    "7": "rel_info"
                },
                "update_value_0008236c": {
                    "1": "update_value_func",
                    "3": "update_value"
                }
            },
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "calling": [
                "FUN_00083b10"
            ],
            "code": "\nundefined4 reverse_and_update_value_00083a74(undefined4 input_param,int offset)\n\n{\n  int update_result;\n  uint rel_info;\n  int new_offset;\n  \n  FUNC_00081f94();\n  rel_info = *(uint *)(rel_info_address + 4) & 0xfffffffc;\n  new_offset = ((rel_info - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_offset) {\n    update_result = update_value(input_param,0);\n    if (update_result == rel_info_address + rel_info) {\n      update_result = update_value(input_param,-new_offset);\n      if (update_result != -1) {\n        DAT_2007121c = DAT_2007121c - new_offset;\n        *(uint *)(rel_info_address + 4) = rel_info - new_offset | 1;\n        FUNC_00081f98(input_param);\n        return 1;\n      }\n      new_offset = update_value(input_param,0);\n      if (0xf < (int)(new_offset - rel_info_address)) {\n        DAT_2007121c = new_offset - rel_offset270;\n        *(dword *)(rel_info_address + 4) =\n             new_offset - rel_info_address | 1;\n      }\n    }\n  }\n  FUNC_00081f98(input_param);\n  return 0;\n}\n\n",
            "current_name": "reverse_and_update_value_00083a74",
            "entrypoint": "0x00083a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "rel_info_address",
                "Elf32_Rel_ARRAY_20070000[270].r_offset": "rel_offset270",
                "FUN_00083a74": "reverse_and_update_value_00083a74",
                "iVar1": "update_result",
                "iVar3": "new_offset",
                "param_1": "input_param",
                "param_2": "offset",
                "uVar2": "rel_info",
                "update_value_0008236c": "update_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083b10": {
            "additional_data": {
                "DAT_20071218": {
                    "1": "data"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_array",
                    "2": "relocation_table"
                },
                "FUNC_00081f94": {
                    "1": "perform_initialization"
                },
                "FUN_00083b10": {
                    "1": "update_and_reverse_relocations",
                    "2": "process_relocation",
                    "3": "update_value",
                    "4": "update_relocation_table",
                    "6": "update_relocation_entry"
                },
                "bVar2": {
                    "1": "is_offset_equal",
                    "2": "is_entry2007046c",
                    "3": "is_condition_met",
                    "5": "is_special_case"
                },
                "dVar4": {
                    "1": "info",
                    "2": "entry",
                    "6": "current_entry"
                },
                "dVar7": {
                    "1": "entry",
                    "2": "new_relocation",
                    "3": "previous_entry"
                },
                "dVar9": {
                    "1": "next_relocation",
                    "2": "new_entry"
                },
                "iVar1": {
                    "1": "entry",
                    "2": "index1",
                    "3": "index",
                    "5": "temp_var1"
                },
                "iVar5": {
                    "1": "int_var",
                    "2": "index2",
                    "3": "next_offset",
                    "5": "temp_var2"
                },
                "param_1": {
                    "1": "context",
                    "13": "param",
                    "2": "param_1",
                    "4": "arg1",
                    "8": "param1"
                },
                "param_2": {
                    "1": "new_param2",
                    "2": "input_value",
                    "3": "relocation_entry",
                    "4": "arg2",
                    "7": "param2"
                },
                "reverse_and_update_value_00083a74": {
                    "2": "reverse_and_update_value"
                },
                "uVar3": {
                    "1": "relocation_value",
                    "2": "value1"
                },
                "uVar6": {
                    "1": "value2",
                    "2": "entry_size",
                    "3": "adjusted_offset",
                    "6": "offset"
                },
                "uVar8": {
                    "1": "new_entry_info",
                    "2": "linked_offset",
                    "5": "new_offset"
                }
            },
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "calling": [
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "code": "\nvoid update_relocation_entry_00083b10(undefined4 param,int param2)\n\n{\n  int temp_var1;\n  bool is_special_case;\n  uint entry_value;\n  dword current_entry;\n  int temp_var2;\n  uint offset;\n  dword previous_entry;\n  uint new_offset;\n  dword new_entry;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  entry_value = *(uint *)(param2 + -4);\n  previous_entry = param2 - 8;\n  offset = entry_value & 0xfffffffe;\n  current_entry = previous_entry + offset;\n  new_offset = *(uint *)(current_entry + 4) & 0xfffffffc;\n  if (relocation_table[141].r_info == current_entry) {\n    new_offset = new_offset + offset;\n    if (-1 < (int)(entry_value << 0x1f)) {\n      previous_entry = previous_entry - *(int *)(param2 + -8);\n      temp_var2 = *(int *)(previous_entry + 0xc);\n      temp_var1 = *(int *)(previous_entry + 8);\n      new_offset = new_offset + *(int *)(param2 + -8);\n      *(int *)(temp_var1 + 0xc) = temp_var2;\n      *(int *)(temp_var2 + 8) = temp_var1;\n    }\n    current_entry = relocation_table[269].r_info;\n    *(uint *)(previous_entry + 4) = new_offset | 1;\n    relocation_table[141].r_info = previous_entry;\n    if (current_entry <= new_offset) {\n      reverse_and_update_value(param,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(current_entry + 4) = new_offset;\n    if ((entry_value & 1) == 0) {\n      previous_entry = previous_entry - *(int *)(param2 + -8);\n      temp_var1 = *(int *)(previous_entry + 8);\n      offset = offset + *(int *)(param2 + -8);\n      if (temp_var1 == 0x2007046c) {\n        is_special_case = true;\n      }\n      else {\n        temp_var2 = *(int *)(previous_entry + 0xc);\n        *(int *)(temp_var1 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp_var1;\n        is_special_case = false;\n      }\n    }\n    else {\n      is_special_case = false;\n    }\n    if (-1 < *(int *)(current_entry + new_offset + 4) << 0x1f) {\n      offset = offset + new_offset;\n      temp_var1 = *(int *)(current_entry + 8);\n      if ((!is_special_case) && (temp_var1 == 0x2007046c)) {\n        relocation_table[142].r_info = previous_entry;\n        relocation_table[143].r_offset = previous_entry;\n        *(undefined4 *)(previous_entry + 0xc) = 0x2007046c;\n        *(undefined4 *)(previous_entry + 8) = 0x2007046c;\n        *(uint *)(previous_entry + 4) = offset | 1;\n        *(uint *)(previous_entry + offset) = offset;\n        goto LAB_00083ba4;\n      }\n      temp_var2 = *(int *)(current_entry + 0xc);\n      *(int *)(temp_var1 + 0xc) = temp_var2;\n      *(int *)(temp_var2 + 8) = temp_var1;\n    }\n    *(uint *)(previous_entry + 4) = offset | 1;\n    *(uint *)(previous_entry + offset) = offset;\n    if (!is_special_case) {\n      if (offset < 0x200) {\n        entry_value = offset & 0xfffffff8;\n        temp_var1 = *(int *)((int)&relocation_table[0x8d].r_info + entry_value);\n        relocation_table[141].r_offset =\n             relocation_table[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(previous_entry + 8) = temp_var1;\n        *(uint *)(previous_entry + 0xc) = entry_value + 0x20070464;\n        *(dword *)((int)&relocation_table[0x8d].r_info + entry_value) = previous_entry;\n        *(dword *)(temp_var1 + 0xc) = previous_entry;\n        FUNC_00081f98(param);\n        return;\n      }\n      entry_value = offset >> 9;\n      if (entry_value < 5) {\n        temp_var1 = (offset >> 6) + 0x38;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (entry_value < 0x15) {\n        temp_var1 = entry_value + 0x5b;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (entry_value < 0x55) {\n        temp_var1 = (offset >> 0xc) + 0x6e;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (entry_value < 0x155) {\n        temp_var1 = (offset >> 0xf) + 0x77;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (entry_value < 0x555) {\n        temp_var1 = (offset >> 0x12) + 0x7c;\n        temp_var2 = temp_var1 * 2;\n      }\n      else {\n        temp_var2 = 0xfc;\n        temp_var1 = 0x7e;\n      }\n      new_entry = temp_var2 * 4 + 0x20070464;\n      current_entry = (&relocation_table[0x8d].r_info)[temp_var2];\n      if (current_entry == new_entry) {\n        relocation_table[141].r_offset =\n             relocation_table[141].r_offset | 1 << (temp_var1 >> 2 & 0xffU);\n        new_entry = current_entry;\n      }\n      else {\n        do {\n          if ((*(uint *)(current_entry + 4) & 0xfffffffc) <= offset) break;\n          current_entry = *(dword *)(current_entry + 8);\n        } while (new_entry != current_entry);\n        new_entry = *(dword *)(current_entry + 0xc);\n      }\n      *(dword *)(previous_entry + 0xc) = new_entry;\n      *(dword *)(previous_entry + 8) = current_entry;\n      *(dword *)(new_entry + 8) = previous_entry;\n      *(dword *)(current_entry + 0xc) = previous_entry;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(param);\n  return;\n}\n\n",
            "current_name": "update_relocation_entry_00083b10",
            "entrypoint": "0x00083b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_00083b10": "update_relocation_entry_00083b10",
                "bVar2": "is_special_case",
                "dVar4": "current_entry",
                "dVar7": "previous_entry",
                "dVar9": "new_entry",
                "iVar1": "temp_var1",
                "iVar5": "temp_var2",
                "param_1": "param",
                "param_2": "param2",
                "reverse_and_update_value_00083a74": "reverse_and_update_value",
                "uVar3": "entry_value",
                "uVar6": "offset",
                "uVar8": "new_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "additional_data": {
                "FUN_00083ca8": {
                    "1": "process_and_allocate_data",
                    "17": "process_data",
                    "2": "process_and_copy_data",
                    "3": "process_binary"
                },
                "allocate_memory_00081810": {
                    "5": "allocate_memory"
                },
                "allocate_or_update_memory_00081fac": {
                    "5": "allocate_or_update_memory"
                },
                "copy_memory_00081d48": {
                    "2": "copy_memory1",
                    "3": "copy_memory"
                },
                "copy_memory_00081e34": {
                    "5": "copy_memory2"
                },
                "find_character_000840f8": {
                    "5": "find_character"
                },
                "iVar1": {
                    "1": "relocation_result",
                    "20": "result",
                    "5": "error_code"
                },
                "local_2c": {
                    "1": "temp4",
                    "2": "local_size",
                    "3": "local_value",
                    "6": "local_var"
                },
                "param_1": {
                    "1": "param",
                    "12": "output",
                    "2": "output_buffer",
                    "3": "input_array",
                    "4": "result"
                },
                "param_2": {
                    "1": "output_buffer",
                    "10": "input",
                    "2": "input_data",
                    "3": "input_buffer"
                },
                "param_3": {
                    "1": "output_buffer",
                    "2": "pointers",
                    "3": "relocation_entry",
                    "6": "relocation_data"
                },
                "process_data_00083850": {
                    "1": "process_data_again",
                    "2": "process_data2"
                },
                "process_relocation_0008356c": {
                    "1": "perform_relocation",
                    "3": "process_relocation"
                },
                "puVar6": {
                    "1": "ptr",
                    "10": "ptr1",
                    "2": "temp_pointer1",
                    "4": "temp_ptr1",
                    "7": "pointer1"
                },
                "puVar7": {
                    "1": "relocation_info_current",
                    "10": "ptr2",
                    "2": "temp_pointer2",
                    "5": "temp_ptr2",
                    "7": "pointer2"
                },
                "uVar10": {
                    "1": "temp_value3",
                    "2": "temp1",
                    "3": "temp2",
                    "4": "temp4"
                },
                "uVar11": {
                    "1": "temp_value7",
                    "2": "result",
                    "3": "temp3",
                    "4": "temp5"
                },
                "uVar2": {
                    "1": "relocation_flag",
                    "2": "start",
                    "4": "offset",
                    "6": "value1"
                },
                "uVar3": {
                    "1": "value",
                    "2": "relocation_flag",
                    "3": "flags",
                    "6": "value2"
                },
                "uVar4": {
                    "1": "flag2",
                    "12": "flags",
                    "2": "temp_flags",
                    "4": "flag"
                },
                "uVar5": {
                    "1": "temp_value3",
                    "2": "value",
                    "5": "length"
                },
                "uVar8": {
                    "1": "limit",
                    "2": "copy_length",
                    "5": "length",
                    "7": "size"
                },
                "uVar9": {
                    "1": "temp_value3",
                    "2": "allocated_size",
                    "4": "temp3"
                },
                "update_relocation_entry_00083b10": {
                    "5": "update_relocation_entry"
                }
            },
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_000840f8",
                "FUN_00081d48",
                "FUN_00081810",
                "FUN_00081fac"
            ],
            "calling": [
                "FUN_00082824"
            ],
            "code": "\nundefined4 process_data_00083ca8(undefined4 *output,uint *input,uint **relocation_data)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flags;\n  uint length;\n  uint *ptr1;\n  uint *ptr2;\n  uint size;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint local_var;\n  \n  if (relocation_data[2] != (uint *)0x0) {\n    flags = *(ushort *)(input + 3);\n    length = (uint)flags;\n    if (((int)(length << 0x1c) < 0) && (input[4] != 0)) {\n      ptr2 = *relocation_data;\n    }\n    else {\n      result = process_relocation(output,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flags = *(ushort *)(input + 3);\n      length = (uint)flags;\n      ptr2 = *relocation_data;\n    }\n    if ((flags & 2) == 0) {\n      value1 = length & 2;\n      temp4 = value1;\n      size = value1;\n      local_var = value1;\n      if ((length & 1) == 0) {\n        value1 = 0;\n        temp4 = 0;\n        while( true ) {\n          while (value1 == 0) {\n            temp4 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          size = input[2];\n          if ((int)(length << 0x16) < 0) {\n            if (value1 < size) {\n              length = *input;\n              size = value1;\n            }\n            else if ((length & 0x480) == 0) {\n              length = *input;\n            }\n            else {\n              result = *input - input[4];\n              size = result + 1 + value1;\n              temp3 = (int)(input[5] * 3) / 2;\n              if (size <= temp3) {\n                size = temp3;\n              }\n              if ((int)(length << 0x15) < 0) {\n                temp3 = allocate_memory(output,size);\n                if (temp3 == 0) {\n                  *output = 0xc;\n                  flags = *(ushort *)(input + 3);\n                  goto LAB_00083da4;\n                }\n                copy_memory(temp3,input[4],result);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp3 = allocate_or_update_memory(output);\n                if (temp3 == 0) {\n                  update_relocation_entry(output,input[4]);\n                  flags = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              length = temp3 + result;\n              input[4] = temp3;\n              input[5] = size;\n              *input = length;\n              input[2] = size - result;\n              size = value1;\n            }\n            copy_memory2(length,temp4,size);\n            input[2] = input[2] - size;\n            *input = *input + size;\n            size = value1;\n          }\n          else if ((input[4] < *input) || (length = input[5], value1 < length)) {\n            if (value1 < size) {\n              size = value1;\n            }\n            copy_memory2(*input,temp4,size);\n            length = input[2];\n            input[2] = length - size;\n            *input = *input + size;\n            if ((length - size == 0) && (result = process_data_00083ca82(output,input), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            size = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              size = value1;\n            }\n            size = (*(code *)input[9])(output,input[7],temp4,(size / length) * length);\n            if ((int)size < 1) goto LAB_00083da2;\n          }\n          ptr1 = relocation_data[2];\n          temp4 = temp4 + size;\n          value1 = value1 - size;\n          relocation_data[2] = (uint *)((int)ptr1 - size);\n          if ((uint *)((int)ptr1 - size) == (uint *)0x0) break;\n          length = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            size = *ptr2;\n            value1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = find_character(size,10,value1);\n            if (result == 0) {\n              temp4 = value1 + 1;\n              local_var = 1;\n            }\n            else {\n              temp4 = (result + 1) - size;\n              local_var = 1;\n            }\n          }\n          temp3 = *input;\n          length = temp4;\n          if (value1 <= temp4) {\n            length = value1;\n          }\n          value2 = input[5];\n          if ((input[4] < temp3) && (temp5 = input[2] + value2, (int)temp5 < (int)length)) {\n            copy_memory2(temp3,size,temp5);\n            *input = *input + temp5;\n            result = process_data_00083ca82(output,input);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)length < (int)value2) {\n            copy_memory2(temp3,size,length);\n            input[2] = input[2] - length;\n            *input = length + *input;\n            temp5 = length;\n          }\n          else {\n            temp5 = (*(code *)input[9])(output,input[7],size,value2);\n            if ((int)temp5 < 1) goto LAB_00083da2;\n          }\n          temp4 = temp4 - temp5;\n          if (temp4 == 0) {\n            result = process_data_00083ca82(output,input);\n            if (result != 0) goto LAB_00083da2;\n            local_var = 0;\n          }\n          ptr1 = relocation_data[2];\n          size = size + temp5;\n          value1 = value1 - temp5;\n          relocation_data[2] = (uint *)((int)ptr1 - temp5);\n        } while ((uint *)((int)ptr1 - temp5) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      length = 0;\n      do {\n        while( true ) {\n          temp4 = length;\n          if (0x7ffffbff < length) {\n            temp4 = 0x7ffffc00;\n          }\n          if (length != 0) break;\n          value1 = *ptr2;\n          length = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input[9])(output,input[7],value1,temp4);\n        if (result < 1) {\nLAB_00083da2:\n          flags = *(ushort *)(input + 3);\nLAB_00083da4:\n          *(ushort *)(input + 3) = flags | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = relocation_data[2];\n        value1 = value1 + result;\n        length = length - result;\n        relocation_data[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00083ca8",
            "entrypoint": "0x00083ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "allocate_memory_00081810": "allocate_memory",
                "allocate_or_update_memory_00081fac": "allocate_or_update_memory",
                "copy_memory_00081d48": "copy_memory",
                "copy_memory_00081e34": "copy_memory2",
                "find_character_000840f8": "find_character",
                "iVar1": "result",
                "local_2c": "local_var",
                "param_1": "output",
                "param_2": "input",
                "param_3": "relocation_data",
                "process_data_00083850": "process_data2",
                "process_relocation_0008356c": "process_relocation",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar10": "temp4",
                "uVar11": "temp5",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flags",
                "uVar5": "length",
                "uVar8": "size",
                "uVar9": "temp3",
                "update_relocation_entry_00083b10": "update_relocation_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084004": {
            "additional_data": {
                "0x20070878": {
                    "1": "base_address",
                    "3": "memory_address"
                },
                "DAT_FUN_00084004": {
                    "1": "new_variable1"
                },
                "FUN_00084004": {
                    "1": "get_constant_value",
                    "19": "get_memory_address",
                    "3": "get_base_address",
                    "7": "get_magic_number"
                },
                "PTR_00070878": {
                    "1": "memory_address"
                },
                "PTR_FUN_00084004": {
                    "1": "new_parameter1"
                },
                "r0": {
                    "1": "return_value"
                },
                "return_value": {
                    "1": "memory_address"
                },
                "undefined4": {
                    "3": "uint32",
                    "9": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008434c"
            ],
            "code": "\nuint32_t get_memory_address_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "current_name": "get_memory_address_00084004",
            "entrypoint": "0x00084004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008400c": {
            "additional_data": {
                "275": {
                    "1": "relocation_index",
                    "2": "index"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_entries",
                    "2": "relocation_array",
                    "3": "elf_relocations",
                    "5": "rel_array",
                    "6": "elf_rel_array"
                },
                "FUN_0008400c": {
                    "1": "get_elf32_rel_array_offset",
                    "2": "get_r_offset",
                    "3": "get_elf32_rel_offset",
                    "4": "get_elf_rel_offset",
                    "7": "get_relocation_offset"
                },
                "r_offset": {
                    "5": "offset",
                    "6": "relocation_offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\ndword get_relocation_offset_0008400c(void)\n\n{\n  return elf_relocation_array[275].relocation_offset;\n}\n\n",
            "current_name": "get_relocation_offset_0008400c",
            "entrypoint": "0x0008400c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_relocation_array",
                "FUN_0008400c": "get_relocation_offset_0008400c",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084018": {
            "additional_data": {
                "FUN_00084018": {
                    "1": "allocate_memory",
                    "2": "allocate_memory_and_process_return_value",
                    "3": "allocate_memory_if_needed",
                    "4": "allocate_memory_and_initialize",
                    "6": "allocate_and_initialize_memory",
                    "9": "initialize_memory"
                },
                "allocate_memory_00081810": {
                    "2": "allocate_memory"
                },
                "auStack_54": {
                    "1": "aux_stack",
                    "2": "temp_array",
                    "3": "temp_buffer",
                    "9": "stack_array"
                },
                "bVar5": {
                    "1": "is_flags_condition_true",
                    "2": "is_condition_true",
                    "4": "is_special_case",
                    "5": "is_flag_set",
                    "7": "is_condition_met"
                },
                "iVar2": {
                    "1": "initialized_memory",
                    "10": "memory_size",
                    "2": "initialize_result",
                    "4": "result"
                },
                "iVar3": {
                    "1": "result",
                    "18": "allocated_memory",
                    "2": "allocate_result",
                    "4": "result2"
                },
                "initialize_memory_00084494": {
                    "2": "initialize_memory"
                },
                "local_50": {
                    "1": "local_flags",
                    "15": "local_value",
                    "3": "local_var",
                    "4": "local_variable"
                },
                "param_1": {
                    "1": "memory_pool",
                    "3": "memory_size",
                    "6": "memory_manager",
                    "8": "param1"
                },
                "param_2": {
                    "1": "info",
                    "2": "memory_pointer",
                    "8": "param2"
                },
                "process_return_value_000844bc": {
                    "2": "process_return_value"
                },
                "uVar1": {
                    "1": "ushort_var",
                    "2": "status",
                    "4": "value",
                    "5": "flags",
                    "7": "ushort_value"
                },
                "uVar4": {
                    "1": "flags_casted",
                    "2": "flag_value",
                    "4": "uint_value",
                    "5": "value2"
                }
            },
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "calling": [
                "FUN_0008356c"
            ],
            "code": "\nvoid initialize_memory_00084018(int param1,int *param2)\n\n{\n  ushort ushort_value;\n  int memory_size;\n  int allocated_memory;\n  uint value2;\n  bool is_condition_met;\n  undefined stack_array [4];\n  uint local_value;\n  \n  ushort_value = *(ushort *)(param2 + 3);\n  value2 = (uint)ushort_value;\n  if ((int)(value2 << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    memory_size = initialize_memory_00084018(param1,(int)*(short *)((int)param2 + 0xe),stack_array);\n    if (-1 < memory_size) {\n      is_condition_met = (local_value & 0xf000) == 0x2000;\n      if (((local_value & 0xf000) == 0x8000) && (param2[10] == 0x8427d)) {\n        memory_size = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        memory_size = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    ushort_value = *(ushort *)(param2 + 3);\n    value2 = (uint)ushort_value;\n  }\n  *(ushort *)(param2 + 3) = ushort_value | 0x800;\n  if ((value2 & 0x80) == 0) {\n    memory_size = 0x400;\n  }\n  else {\n    memory_size = 0x40;\n  }\n  is_condition_met = false;\nLAB_00084074:\n  allocated_memory = allocate_memory(param1,memory_size);\n  ushort_value = *(ushort *)(param2 + 3);\n  if (allocated_memory == 0) {\n    if (-1 < (int)((uint)ushort_value << 0x16)) {\n      *(ushort *)(param2 + 3) = ushort_value | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(param2 + 3) = ushort_value | 0x80;\n    *param2 = allocated_memory;\n    param2[4] = allocated_memory;\n    param2[5] = memory_size;\n    if ((is_condition_met) && (memory_size = process_return_value(param1,(int)*(short *)((int)param2 + 0xe)), memory_size != 0))\n    {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_00084018",
            "entrypoint": "0x00084018",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084018": "initialize_memory_00084018",
                "allocate_memory_00081810": "allocate_memory",
                "auStack_54": "stack_array",
                "bVar5": "is_condition_met",
                "iVar2": "memory_size",
                "iVar3": "allocated_memory",
                "initialize_memory_00084494": "initialize_memory",
                "local_50": "local_value",
                "param_1": "param1",
                "param_2": "param2",
                "process_return_value_000844bc": "process_return_value",
                "uVar1": "ushort_value",
                "uVar4": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000840f8": {
            "additional_data": {
                "FUN_000840f8": {
                    "1": "find_first_instance",
                    "10": "find_character",
                    "3": "find_char_in_buffer",
                    "4": "find_first_occurrence"
                },
                "bVar4": {
                    "1": "is_last",
                    "2": "is_last_character",
                    "3": "is_last_index",
                    "4": "is_last_iteration",
                    "6": "is_last_element",
                    "9": "found"
                },
                "iVar2": {
                    "1": "counter",
                    "27": "index"
                },
                "param_1": {
                    "1": "uint_array",
                    "11": "array",
                    "2": "input_array",
                    "6": "buffer"
                },
                "param_2": {
                    "1": "target_byte",
                    "15": "character",
                    "5": "target"
                },
                "param_3": {
                    "16": "length",
                    "2": "size",
                    "7": "array_length"
                },
                "puVar3": {
                    "1": "data_ptr",
                    "2": "current_byte",
                    "3": "current",
                    "6": "current_element",
                    "7": "ptr",
                    "9": "current_ptr"
                },
                "uVar1": {
                    "1": "masked_xor_result",
                    "11": "xor_result",
                    "2": "xored_value",
                    "7": "result",
                    "8": "temp"
                }
            },
            "called": [],
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "code": "\nuint * find_character_000840f8(uint *array,char character,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_ptr;\n  bool found;\n  \n  if (((uint)array & 3) == 0) {\nLAB_00084128:\n    if (3 < length) {\n      current_ptr = array;\n      do {\n        xor_result = *current_ptr ^ CONCAT22(CONCAT11(character,character),CONCAT11(character,character));\n        array = current_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != character) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        found = index == length - 1;\n        index = index + 1;\n        if (found) goto LAB_00084150;\n      } while (*(char *)array != character);\n    }\n  }\n  else if (length == 0) {\nLAB_00084150:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != character) {\n    current_ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = current_ptr;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (length == 0) goto LAB_00084150;\n      current_ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != character);\n  }\n  return array;\n}\n\n",
            "current_name": "find_character_000840f8",
            "entrypoint": "0x000840f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000840f8": "find_character_000840f8",
                "bVar4": "found",
                "iVar2": "index",
                "param_1": "array",
                "param_2": "character",
                "param_3": "length",
                "puVar3": "current_ptr",
                "uVar1": "xor_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000841e4": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "data"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array"
                },
                "FUN_000841e4": {
                    "1": "perform_operation",
                    "2": "process_relocation",
                    "4": "process_parameter",
                    "9": "process_param"
                },
                "dVar1": {
                    "1": "data_offset",
                    "18": "offset",
                    "2": "r_offset",
                    "3": "rel_offset",
                    "5": "relocation_offset"
                },
                "iVar3": {
                    "1": "result",
                    "2": "ptr_value",
                    "3": "function_pointer",
                    "4": "ptr",
                    "6": "value"
                },
                "in_lr": {
                    "1": "stack_variable",
                    "12": "link_register",
                    "3": "return_address"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_value",
                    "4": "parameter",
                    "5": "index",
                    "8": "param",
                    "9": "input"
                },
                "pcVar4": {
                    "1": "callback_function",
                    "11": "function_ptr",
                    "2": "func_ptr",
                    "3": "code_ptr",
                    "4": "function_pointer",
                    "6": "function"
                },
                "retval": {
                    "1": "return_value"
                },
                "uVar2": {
                    "1": "error",
                    "30": "error_code"
                },
                "uVar5": {
                    "1": "data_value",
                    "12": "constant_value",
                    "15": "constant"
                },
                "unaff_r4": {
                    "1": "var4",
                    "4": "register4"
                },
                "unaff_r5": {
                    "1": "var5",
                    "4": "register5"
                }
            },
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nint process_param_000841e4(uint input)\n\n{\n  dword offset;\n  undefined4 error_code;\n  int value;\n  code *function_ptr;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 link_register;\n  undefined4 constant;\n  \n  offset = elf_rel_array[140].r_offset;\n  constant = 0x20070460;\n  if (0x1f < input) {\n    *(undefined4 *)elf_rel_array[140].r_offset = 0x16;\n    return -1;\n  }\n  value = *(int *)(elf_rel_array[140].r_offset + 0x2dc);\n  if ((value == 0) || (function_ptr = *(code **)(value + input * 4), function_ptr == (code *)0x0)) {\n    error_code = thunk_get_error_code_00080efe(elf_rel_array[140].r_offset);\n    DAT_20071244 = 0;\n    value = FUNC_00080efc(error_code,input,input,0,constant,register4,register5,link_register);\n    if ((value == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return value;\n  }\n  if (function_ptr == (code *)0x1) {\n    return 0;\n  }\n  if (function_ptr != (code *)0xffffffff) {\n    *(undefined4 *)(value + input * 4) = 0;\n    (*function_ptr)(input);\n    return 0;\n  }\n  *(undefined4 *)elf_rel_array[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "current_name": "process_param_000841e4",
            "entrypoint": "0x000841e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_rel_array",
                "FUN_000841e4": "process_param_000841e4",
                "dVar1": "offset",
                "iVar3": "value",
                "in_lr": "link_register",
                "param_1": "input",
                "pcVar4": "function_ptr",
                "uVar2": "error_code",
                "uVar5": "constant",
                "unaff_r4": "register4",
                "unaff_r5": "register5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084220": {
            "additional_data": {
                "(int)*(short *)(param_2 + 0xe)": {
                    "1": "value"
                },
                "(ushort *)(param_2 + 0xc)": {
                    "1": "flag"
                },
                "*(int *)(arg2 + 0x50)": {
                    "1": "int_value1"
                },
                "*(int *)(param_2 + 0x50)": {
                    "1": "int_value1"
                },
                "*(short *)(arg2 + 0xe)": {
                    "1": "short_pointer_value"
                },
                "*(short *)(param_2 + 0xe)": {
                    "1": "value_at_index",
                    "3": "short_value"
                },
                "*(ushort *)(arg2 + 0xc)": {
                    "1": "ushort_value"
                },
                "*(ushort *)(param_2 + 0xc)": {
                    "1": "flags",
                    "3": "ushort_value"
                },
                "*PTR_(param_2 + 0x50)": {
                    "1": "sum"
                },
                "FUN_00084220": {
                    "1": "update_value_if_needed",
                    "2": "update_value_based_on_condition",
                    "3": "update_counter",
                    "7": "update_data"
                },
                "iVar1": {
                    "1": "check_result",
                    "2": "return_value",
                    "26": "result"
                },
                "initialize_and_check_00084508": {
                    "1": "check_and_update_score",
                    "12": "initialize_and_check"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "param1",
                    "2": "param",
                    "4": "data",
                    "8": "arg1"
                },
                "param_2": {
                    "1": "buffer",
                    "10": "param2",
                    "2": "data_pointer",
                    "8": "arg2"
                }
            },
            "called": [
                "FUN_00084508"
            ],
            "calling": [],
            "code": "\nvoid update_data_00084220(undefined4 param1,int param2)\n\n{\n  int result;\n  \n  result = initialize_and_check(param1,(int)*(short *)(param2 + 0xe));\n  if (-1 < result) {\n    *(int *)(param2 + 0x50) = *(int *)(param2 + 0x50) + result;\n    return;\n  }\n  *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) & 0xefff;\n  return;\n}\n\n",
            "current_name": "update_data_00084220",
            "entrypoint": "0x00084220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084220": "update_data_00084220",
                "iVar1": "result",
                "initialize_and_check_00084508": "initialize_and_check",
                "param_1": "param1",
                "param_2": "param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084244": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "temp_var"
                },
                "FUN_00084244": {
                    "1": "reverse_and_copy_data",
                    "21": "process_data",
                    "5": "copy_and_check_data"
                },
                "copy_bytes_00080ec8": {
                    "1": "copy_bytes"
                },
                "iVar1": {
                    "1": "status_code",
                    "2": "return_value",
                    "22": "result",
                    "4": "copy_result"
                },
                "in_lr": {
                    "1": "temp_var4",
                    "2": "unused4",
                    "3": "unused_4",
                    "5": "link_register"
                },
                "initialize_and_check_000844e0": {
                    "2": "initialize_and_check"
                },
                "param_1": {
                    "1": "result",
                    "10": "output_array",
                    "2": "output_buffer",
                    "4": "output_data",
                    "9": "output"
                },
                "param_2": {
                    "1": "source",
                    "2": "input_pointer",
                    "5": "input_data",
                    "7": "input_array",
                    "9": "input"
                },
                "param_3": {
                    "1": "parameter_a",
                    "17": "param_a",
                    "2": "value1",
                    "7": "param1"
                },
                "param_4": {
                    "1": "end_address",
                    "17": "param_b",
                    "2": "value2",
                    "7": "param2"
                },
                "uVar2": {
                    "1": "short_value",
                    "19": "value",
                    "2": "flags",
                    "4": "input_value"
                },
                "unaff_r4": {
                    "1": "temp_var1",
                    "2": "register4",
                    "3": "unused_1",
                    "4": "temp1",
                    "5": "unused_var1"
                },
                "unaff_r5": {
                    "1": "uncertain_b",
                    "2": "unused2",
                    "3": "unaff_r5",
                    "4": "temp2",
                    "5": "unused_var2"
                },
                "unaff_r6": {
                    "1": "variable3",
                    "2": "register6",
                    "3": "unaff_r6",
                    "4": "temp3",
                    "5": "unused_var3"
                }
            },
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "calling": [],
            "code": "\nvoid process_data_00084244(int *output_array,int input,undefined4 param_a,undefined4 param_b)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 unused_var3;\n  undefined4 link_register;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    initialize_and_check(output_array,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  result = copy_bytes((int)*(short *)(input + 0xe),param_a,param_b,param_b,unused_var1,unused_var2,\n                       unused_var3,link_register);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output_array = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084244",
            "entrypoint": "0x00084244",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "copy_bytes_00080ec8": "copy_bytes",
                "iVar1": "result",
                "in_lr": "link_register",
                "initialize_and_check_000844e0": "initialize_and_check",
                "param_1": "output_array",
                "param_2": "input",
                "param_3": "param_a",
                "param_4": "param_b",
                "uVar2": "value",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2",
                "unaff_r6": "unused_var3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008427c": {
            "additional_data": {
                "FUN_0008427c": {
                    "1": "initialize_and_modify_value",
                    "2": "initialize_and_update_flags",
                    "3": "initialize_and_check",
                    "4": "initialize_and_update_value",
                    "5": "initialize_and_update",
                    "9": "initialize_and_set_flag"
                },
                "iVar1": {
                    "1": "flags_result",
                    "29": "result"
                },
                "initialize_and_check_000844e0": {
                    "2": "initialize_and_check"
                },
                "param_1": {
                    "1": "param_a",
                    "10": "param1",
                    "3": "arg1",
                    "8": "param"
                },
                "param_2": {
                    "1": "param_2",
                    "10": "param2",
                    "2": "arg",
                    "3": "arg2",
                    "5": "data"
                },
                "uVar2": {
                    "1": "checksum",
                    "10": "updated_value",
                    "12": "flag",
                    "3": "flags"
                }
            },
            "called": [
                "FUN_000844e0"
            ],
            "calling": [],
            "code": "\nvoid initialize_and_set_flag_0008427c(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort flag;\n  \n  result = initialize_and_check(param1,(int)*(short *)(param2 + 0xe));\n  if (result == -1) {\n    flag = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(param2 + 0x50) = result;\n  }\n  *(ushort *)(param2 + 0xc) = flag;\n  return;\n}\n\n",
            "current_name": "initialize_and_set_flag_0008427c",
            "entrypoint": "0x0008427c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008427c": "initialize_and_set_flag_0008427c",
                "iVar1": "result",
                "initialize_and_check_000844e0": "initialize_and_check",
                "param_1": "param1",
                "param_2": "param2",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000842a4": {
            "additional_data": {
                "FUN_000842a4": {
                    "1": "process_function",
                    "17": "process_data",
                    "3": "process_and_validate_data",
                    "4": "process_and_update_data"
                },
                "LAB_000842d6": {
                    "1": "loop_start"
                },
                "LAB_000842d8": {
                    "1": "loop_iteration"
                },
                "iVar4": {
                    "1": "relocation_result",
                    "11": "index",
                    "2": "result"
                },
                "initialize_data_structures_00083888": {
                    "1": "initialize_data",
                    "6": "initialize_data_structures"
                },
                "param_1": {
                    "1": "context",
                    "2": "data_structure",
                    "6": "input_data",
                    "7": "input_param"
                },
                "param_2": {
                    "1": "single_byte",
                    "2": "output_param",
                    "3": "input_value",
                    "5": "character",
                    "8": "value"
                },
                "param_3": {
                    "1": "ptr_array",
                    "14": "data_array",
                    "2": "data",
                    "4": "data_struct"
                },
                "param_4": {
                    "1": "arg4",
                    "2": "data_value",
                    "4": "param",
                    "5": "param_4"
                },
                "process_data_00083850": {
                    "7": "process_data"
                },
                "process_relocation_0008356c": {
                    "7": "process_relocation"
                },
                "puVar3": {
                    "1": "undefined_ptr",
                    "2": "pointer_value",
                    "3": "ptr_data",
                    "4": "ptr",
                    "5": "data_pointer",
                    "6": "pointer"
                },
                "uVar1": {
                    "1": "relocation_value",
                    "11": "ushort_value",
                    "2": "data_value",
                    "3": "ushort_val"
                },
                "uVar2": {
                    "1": "array_index",
                    "10": "uint_value",
                    "2": "converted_short_value",
                    "3": "uint_val"
                }
            },
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\nuint process_data_000842a4(int input_param,uint value,undefined4 *data_array,undefined4 param_4)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *pointer;\n  int index;\n  \n  if ((input_param != 0) && (*(int *)(input_param + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  ushort_value = *(ushort *)(data_array + 3);\n  uint_value = (uint)ushort_value;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = data_array[4], index == 0)) {\n    index = process_relocation(input_param,data_array,ushort_value,uint_value,param_4);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_array + 3);\n    index = data_array[4];\n    uint_value = (uint)ushort_value;\n  }\n  value = value & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    pointer = (undefined *)*data_array;\n    index = (int)pointer - index;\n    if (index < (int)data_array[5]) {\nloop_start:\n      index = index + 1;\n      goto loop_iteration;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    pointer = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = ushort_value | 0x2000;\n    index = (int)pointer - index;\n    if (index < (int)data_array[5]) goto loop_start;\n  }\n  index = process_data_000842a4(input_param,data_array);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  pointer = (undefined *)*data_array;\n  index = 1;\nloop_iteration:\n  data_array[2] = data_array[2] + -1;\n  *data_array = pointer + 1;\n  *pointer = (char)value;\n  if (((data_array[5] == index) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (value == 10)))) &&\n     (index = process_data_000842a4(input_param,data_array), index != 0)) {\n    return 0xffffffff;\n  }\n  return value;\n}\n\n",
            "current_name": "process_data_000842a4",
            "entrypoint": "0x000842a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "LAB_000842d6": "loop_start",
                "LAB_000842d8": "loop_iteration",
                "iVar4": "index",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "param_1": "input_param",
                "param_2": "value",
                "param_3": "data_array",
                "process_data_00083850": "process_data",
                "process_relocation_0008356c": "process_relocation",
                "puVar3": "pointer",
                "uVar1": "ushort_value",
                "uVar2": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008434c": {
            "additional_data": {
                "FUN_0008434c": {
                    "1": "perform_operation",
                    "11": "execute_function",
                    "2": "process_data",
                    "3": "execute_relocation",
                    "5": "process_function"
                },
                "auStack_24": {
                    "1": "stack_data",
                    "2": "buffer",
                    "4": "temporary_buffer"
                },
                "dVar1": {
                    "1": "r_info_value",
                    "15": "relocation_info",
                    "2": "rel_info",
                    "3": "r_info"
                },
                "iVar3": {
                    "1": "result_code",
                    "21": "return_value",
                    "6": "result"
                },
                "param_1": {
                    "1": "symbol_table",
                    "2": "function_pointer",
                    "3": "output",
                    "4": "output_buffer",
                    "5": "result",
                    "6": "output_ptr"
                },
                "param_2": {
                    "1": "mode",
                    "2": "length",
                    "3": "condition",
                    "4": "input_length",
                    "8": "input_size"
                },
                "param_3": {
                    "1": "additional_param",
                    "2": "param",
                    "3": "param_3",
                    "4": "value",
                    "9": "input_value"
                },
                "param_4": {
                    "1": "output",
                    "3": "error_code",
                    "4": "status",
                    "5": "result_pointer",
                    "9": "result"
                },
                "uVar2": {
                    "1": "memory_addr",
                    "2": "address",
                    "28": "memory_address"
                }
            },
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\nvoid execute_function_0008434c(undefined4 *output_ptr,int input_size,undefined4 input_value,undefined4 *result)\n\n{\n  dword relocation_info;\n  undefined4 memory_address;\n  int return_value;\n  undefined temporary_buffer [12];\n  \n  relocation_info = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (input_size == 0) {\n    memory_address = get_memory_address_00084004();\n    return_value = (*(code *)relocation_info)(output_ptr,temporary_buffer,0,memory_address,result);\n  }\n  else {\n    memory_address = get_memory_address_00084004();\n    return_value = (*(code *)relocation_info)(output_ptr,input_size,input_value,memory_address,result);\n  }\n  if (return_value == -1) {\n    *result = 0;\n    *output_ptr = 0x8a;\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_0008434c",
            "entrypoint": "0x0008434c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008434c": "execute_function_0008434c",
                "auStack_24": "temporary_buffer",
                "dVar1": "relocation_info",
                "iVar3": "return_value",
                "param_1": "output_ptr",
                "param_2": "input_size",
                "param_3": "input_value",
                "param_4": "result",
                "uVar2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008439c": {
            "additional_data": {
                "(char)param_3": {
                    "1": "decoded_byte"
                },
                "*param_1": {
                    "1": "error_code"
                },
                "*param_2": {
                    "1": "byte_to_write"
                },
                "0x0": {
                    "3": "null"
                },
                "0x100": {
                    "1": "maximum_value"
                },
                "0x8a": {
                    "1": "error_value",
                    "2": "error_code"
                },
                "0xffffffff": {
                    "1": "error_return"
                },
                "FUN_0008439c": {
                    "1": "write_byte_to_buffer",
                    "2": "write_byte_to_memory",
                    "3": "convert_value_to_byte"
                },
                "char": {
                    "1": "byte"
                },
                "param_1": {
                    "1": "result",
                    "2": "destination_address",
                    "3": "output",
                    "7": "output_ptr"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "input_pointer",
                    "3": "source",
                    "4": "input_ptr",
                    "5": "output_buffer"
                },
                "param_3": {
                    "1": "byte_value",
                    "12": "value",
                    "2": "number",
                    "8": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008434c"
            ],
            "code": "\nundefined4 convert_value_to_byte_0008439c(undefined4 *output_ptr,undefined *output_buffer,uint value)\n\n{\n  if (output_buffer == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *output_buffer = ascii_char;\n    return 1;\n  }\n  *output_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "current_name": "convert_value_to_byte_0008439c",
            "entrypoint": "0x0008439c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_3": "ascii_char",
                "FUN_0008439c": "convert_value_to_byte_0008439c",
                "char": "byte",
                "param_1": "output_ptr",
                "param_2": "output_buffer",
                "param_3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084484": {
            "additional_data": {
                "FUNC_0008397c": {
                    "1": "perform_additional_operations_1",
                    "2": "function_a"
                },
                "FUNC_00083980": {
                    "1": "finalize_processing",
                    "2": "func2"
                },
                "FUN_00084484": {
                    "1": "process_and_initialize_data",
                    "2": "process_and_update_relocations",
                    "3": "process_relocation",
                    "6": "process_and_update_relocation",
                    "7": "process_relocation_entry",
                    "9": "process_data"
                },
                "dVar1": {
                    "1": "offset_value",
                    "2": "r_offset",
                    "25": "relocation_offset"
                },
                "iVar3": {
                    "1": "process_return_value",
                    "2": "status",
                    "3": "code_result",
                    "6": "process_result",
                    "7": "return_value",
                    "8": "result"
                },
                "initialize_data_structures_00083888": {
                    "9": "initialize_data_structures"
                },
                "param_1": {
                    "1": "data_entry",
                    "2": "input_data",
                    "3": "input_param",
                    "6": "input"
                },
                "process_data_00083850": {
                    "1": "process_data_item",
                    "3": "process_data_entry",
                    "5": "process_data"
                },
                "uVar2": {
                    "22": "result",
                    "9": "return_value"
                },
                "update_relocation_entry_00083b10": {
                    "9": "update_relocation_entry"
                }
            },
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "calling": [],
            "code": "\nundefined4 process_data_00084484(int input)\n\n{\n  dword relocation_offset;\n  undefined4 result;\n  int result;\n  \n  relocation_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = process_data_00084484(relocation_offset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(input + 0x2c))(relocation_offset,*(undefined4 *)(input + 0x1c)), result < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        update_relocation_entry(relocation_offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          update_relocation_entry(relocation_offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        update_relocation_entry(relocation_offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(input + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00084484",
            "entrypoint": "0x00084484",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "dVar1": "relocation_offset",
                "iVar3": "result",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "param_1": "input",
                "process_data_00083850": "process_data",
                "uVar2": "result",
                "update_relocation_entry_00083b10": "update_relocation_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084494": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "error_code"
                },
                "FUN_00084494": {
                    "1": "initialize_memory_check",
                    "16": "initialize_memory",
                    "2": "initialize_memory_and_check_error",
                    "5": "initialize_and_check_memory"
                },
                "iVar1": {
                    "1": "initialize_result",
                    "2": "memory_init_result",
                    "4": "error_code",
                    "7": "init_result",
                    "8": "result"
                },
                "param_1": {
                    "1": "output_buffer",
                    "15": "result",
                    "2": "output_ptr",
                    "5": "output"
                },
                "param_2": {
                    "1": "size_param1",
                    "14": "arg1",
                    "2": "value1",
                    "3": "param_a",
                    "4": "input1"
                },
                "param_3": {
                    "1": "mem_start",
                    "14": "arg2",
                    "2": "value2",
                    "3": "param_b",
                    "4": "input2"
                },
                "param_4": {
                    "1": "arg2",
                    "14": "arg3",
                    "2": "value2",
                    "3": "param_c",
                    "4": "input3"
                }
            },
            "called": [
                "FUN_00080eb0"
            ],
            "calling": [
                "FUN_00084018"
            ],
            "code": "\nvoid initialize_memory_00084494(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = initialize_memory_00084494_00080eb0(arg1,arg2,arg2,0,arg3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_00084494",
            "entrypoint": "0x00084494",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084494": "initialize_memory_00084494",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844bc": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "saved_value"
                },
                "FUN_000844bc": {
                    "1": "update_parameter_if_error",
                    "10": "process_return_value",
                    "2": "check_return_value_and_update_param",
                    "3": "extract_return_value",
                    "5": "update_return_value"
                },
                "get_return_value_00080eba": {
                    "1": "get_return_value"
                },
                "iVar1": {
                    "31": "return_value"
                },
                "param_1": {
                    "1": "output_value_ptr",
                    "12": "result",
                    "2": "result_pointer",
                    "3": "output_param",
                    "4": "output_value",
                    "6": "output"
                },
                "param_2": {
                    "17": "input_value",
                    "2": "value",
                    "4": "input_param",
                    "8": "input"
                }
            },
            "called": [
                "FUN_00080eba"
            ],
            "calling": [
                "FUN_00084018"
            ],
            "code": "\nvoid process_return_value_000844bc(int *result,undefined4 input_value)\n\n{\n  int return_value;\n  \n  DAT_20071244 = 0;\n  return_value = get_return_value(input_value);\n  if ((return_value == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_return_value_000844bc",
            "entrypoint": "0x000844bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844bc": "process_return_value_000844bc",
                "get_return_value_00080eba": "get_return_value",
                "iVar1": "return_value",
                "param_1": "result",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844e0": {
            "additional_data": {
                "FUN_000844e0": {
                    "1": "initialize_and_check_data",
                    "15": "initialize_and_check",
                    "3": "initialize_and_check_value",
                    "6": "initialize_and_check_result"
                },
                "iVar1": {
                    "1": "status",
                    "17": "init_result",
                    "4": "result"
                },
                "param_1": {
                    "1": "output_param",
                    "19": "result",
                    "2": "output_value",
                    "4": "output",
                    "5": "result_ptr"
                },
                "param_2": {
                    "1": "value1",
                    "15": "arg1",
                    "2": "param_2",
                    "8": "input1"
                },
                "param_3": {
                    "1": "value2",
                    "15": "arg2",
                    "2": "input_2",
                    "8": "input2"
                },
                "param_4": {
                    "1": "value3",
                    "15": "arg3",
                    "2": "param_4",
                    "8": "input3"
                }
            },
            "called": [
                "FUN_00080ebe"
            ],
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "code": "\nvoid initialize_and_check_000844e0(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_20071244 = 0;\n  init_result = initialize_00080ebe(arg1,arg2,arg3);\n  if ((init_result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_000844e0",
            "entrypoint": "0x000844e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844e0": "initialize_and_check_000844e0",
                "iVar1": "init_result",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084508": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "error_value"
                },
                "FUN_00084508": {
                    "1": "initialize_and_return_value",
                    "15": "initialize_and_check",
                    "5": "initialize_and_check_error"
                },
                "iVar1": {
                    "1": "init_success",
                    "10": "result",
                    "2": "initialization_result"
                },
                "initialize_00080ec2": {
                    "1": "initialize"
                },
                "param_1": {
                    "1": "output_data",
                    "14": "result",
                    "3": "output",
                    "5": "result_pointer"
                },
                "param_2": {
                    "1": "value1",
                    "14": "arg1",
                    "2": "arg2",
                    "4": "input1"
                },
                "param_3": {
                    "1": "init_param_2",
                    "14": "arg2",
                    "2": "input_value_2",
                    "4": "input_2"
                },
                "param_4": {
                    "1": "init_param_3",
                    "14": "arg3",
                    "2": "param_c",
                    "4": "input3"
                }
            },
            "called": [
                "FUN_00080ec2"
            ],
            "calling": [
                "FUN_00084220"
            ],
            "code": "\nvoid initialize_and_check_00084508(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = initialize(arg1,arg2,arg3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_00084508",
            "entrypoint": "0x00084508",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084508": "initialize_and_check_00084508",
                "iVar1": "result",
                "initialize_00080ec2": "initialize",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084530": {
            "additional_data": {
                "FUN_00084530": {
                    "1": "calculate_difference_if_both_params_zero",
                    "21": "calculate_difference",
                    "5": "calculate_result"
                },
                "iVar1": {
                    "26": "difference",
                    "4": "result"
                },
                "param_1": {
                    "1": "first_parameter",
                    "13": "input_1",
                    "4": "first_param",
                    "6": "input_param_1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "13": "input_2",
                    "4": "second_param",
                    "6": "input_param_2"
                },
                "param_3": {
                    "1": "input_var_3",
                    "2": "condition_1",
                    "4": "third_param",
                    "6": "input_param_3",
                    "9": "input_3"
                },
                "param_4": {
                    "1": "param_d",
                    "2": "input4",
                    "4": "fourth_param",
                    "6": "input_param_4",
                    "9": "input_4"
                }
            },
            "called": [
                "FUN_0008458c"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint calculate_difference_00084530(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int difference;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  difference = calculate_difference_00084530_0008458c();\n  return difference;\n}\n\n",
            "current_name": "calculate_difference_00084530",
            "entrypoint": "0x00084530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084530": "calculate_difference_00084530",
                "iVar1": "difference",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008455c": {
            "additional_data": {
                "*param_5": {
                    "1": "result_array[0]"
                },
                "CONCAT44": {
                    "1": "combine_values"
                },
                "FUN_0008455c": {
                    "1": "subtract_and_store_results",
                    "2": "subtract_uintegers",
                    "4": "subtract_values",
                    "8": "subtract_and_store"
                },
                "divide_unsigned_integers_000845c0": {
                    "1": "divide_unsigned_integers"
                },
                "lVar2": {
                    "1": "multiplier",
                    "11": "product",
                    "3": "result2"
                },
                "param_1": {
                    "1": "input_value1",
                    "10": "input_value",
                    "2": "value",
                    "3": "original_value"
                },
                "param_2": {
                    "1": "second_param",
                    "3": "value2"
                },
                "param_3": {
                    "1": "multiplier_lower"
                },
                "param_4": {
                    "1": "upper_part_multiplier"
                },
                "param_5": {
                    "1": "result_values",
                    "17": "result_array",
                    "2": "difference",
                    "6": "output_array"
                },
                "param_5[1]": {
                    "1": "result_array[1]"
                },
                "uVar1": {
                    "1": "result_as_uint",
                    "12": "result",
                    "2": "unsigned_value",
                    "3": "result1"
                }
            },
            "called": [
                "FUN_000845c0"
            ],
            "calling": [],
            "code": "\nvoid subtract_and_store_0008455c(uint input_value,int value_to_subtract,undefined4 high_word,undefined4 low_word,int *result_array)\n\n{\n  uint result;\n  longlong multiplied_value;\n  \n  multiplied_value = calculate_product();\n  multiplied_value = multiplied_value * combine_values(low_word,high_word);\n  result = (uint)multiplied_value;\n  *result_array = input_value - result;\n  result_array[1] = (value_to_subtract - (int)((ulonglong)multiplied_value >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_and_store_0008455c",
            "entrypoint": "0x0008455c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_values",
                "FUN_0008455c": "subtract_and_store_0008455c",
                "divide_unsigned_integers_000845c0": "calculate_product",
                "lVar2": "multiplied_value",
                "param_1": "input_value",
                "param_2": "value_to_subtract",
                "param_3": "high_word",
                "param_4": "low_word",
                "param_5": "result_array",
                "param_5[1]": "result_array[1]",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008458c": {
            "additional_data": {
                "*param_5": {
                    "1": "output_value"
                },
                "CONCAT44(param_4,param_3)": {
                    "1": "multiplication_factor"
                },
                "FUN_0008458c": {
                    "1": "subtract_and_store_division",
                    "18": "calculate_difference",
                    "2": "subtract_and_store_result",
                    "3": "subtract_and_adjust"
                },
                "calculate_division_00084860": {
                    "1": "perform_division"
                },
                "lVar2": {
                    "1": "result_longlong",
                    "10": "product",
                    "16": "division_result",
                    "2": "multiplied_value"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "input_value",
                    "18": "dividend"
                },
                "param_2": {
                    "1": "param_2",
                    "17": "divisor",
                    "2": "secondary_param"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "lower_bits"
                },
                "param_4": {
                    "1": "low_bits",
                    "2": "upper_bits"
                },
                "param_5": {
                    "1": "output_param",
                    "18": "result_array",
                    "4": "output_array",
                    "6": "result"
                },
                "uVar1": {
                    "1": "calculation_result",
                    "13": "quotient",
                    "2": "result_uint",
                    "3": "result"
                }
            },
            "called": [
                "FUN_00084860"
            ],
            "calling": [
                "FUN_00084530"
            ],
            "code": "\nvoid calculate_difference_0008458c(uint dividend,int divisor,undefined4 lower_bits,undefined4 upper_bits,int *result_array)\n\n{\n  uint quotient;\n  longlong division_result;\n  \n  division_result = perform_division();\n  division_result = division_result * multiplication_factor;\n  quotient = (uint)division_result;\n  *result_array = dividend - quotient;\n  result_array[1] = (divisor - (int)((ulonglong)division_result >> 0x20)) - (uint)(dividend < quotient);\n  return;\n}\n\n",
            "current_name": "calculate_difference_0008458c",
            "entrypoint": "0x0008458c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44(param_4,param_3)": "multiplication_factor",
                "FUN_0008458c": "calculate_difference_0008458c",
                "calculate_division_00084860": "perform_division",
                "lVar2": "division_result",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "lower_bits",
                "param_4": "upper_bits",
                "param_5": "result_array",
                "uVar1": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000845c0": {
            "additional_data": {
                "CARRY4": {
                    "1": "carry4"
                },
                "F": {
                    "1": "divide_unsigned_integers"
                },
                "FUN_000845c0": {
                    "1": "div_mod_uint",
                    "3": "perform_division",
                    "4": "divide_with_overflow_check",
                    "6": "divide_unsigned_integers"
                },
                "LZCOUNT": {
                    "1": "leading_zeros"
                },
                "bVar13": {
                    "1": "needs_correction",
                    "13": "carry_flag",
                    "2": "has_carry",
                    "3": "carry",
                    "5": "is_carry"
                },
                "bVar15": {
                    "1": "borrow"
                },
                "iVar1": {
                    "1": "loop_iteration"
                },
                "iVar6": {
                    "1": "leading_zeros_count",
                    "13": "shift_amount",
                    "3": "shift",
                    "6": "shift_count"
                },
                "lVar1": {
                    "1": "quotient",
                    "2": "quotient_product",
                    "4": "product"
                },
                "lVar16": {
                    "1": "temporary_result"
                },
                "param_1": {
                    "31": "dividend"
                },
                "param_2": {
                    "1": "dividend_lsb",
                    "3": "dividend_hi",
                    "6": "divisor",
                    "7": "dividend_high"
                },
                "param_3": {
                    "1": "divisor_lower",
                    "2": "divisor_lo",
                    "22": "divisor",
                    "5": "quotient"
                },
                "param_4": {
                    "1": "divisor_extension",
                    "3": "divisor_sign",
                    "5": "remainder",
                    "6": "divisor_upper",
                    "7": "divisor_high"
                },
                "uVar10": {
                    "1": "quotient_partial1",
                    "2": "temp3",
                    "4": "is_negative_divisor",
                    "5": "is_divisor_negative"
                },
                "uVar11": {
                    "1": "dividend_guess_tmp",
                    "2": "temp4"
                },
                "uVar12": {
                    "1": "divisor_shifted_upper",
                    "2": "temp3",
                    "3": "shifted_divisor"
                },
                "uVar13": {
                    "1": "quotient_guess"
                },
                "uVar14": {
                    "1": "normalized_divisor"
                },
                "uVar15": {
                    "1": "quotient_high_updated"
                },
                "uVar16": {
                    "1": "quotient_product"
                },
                "uVar17": {
                    "1": "rem_high_updated"
                },
                "uVar18": {
                    "1": "quotient_by_divisor_low"
                },
                "uVar19": {
                    "1": "quotient_by_divisor_high"
                },
                "uVar2": {
                    "1": "quotient_high",
                    "2": "quotient_lo",
                    "3": "quotient_lower",
                    "4": "quotient1",
                    "6": "quotient",
                    "7": "quotient_low"
                },
                "uVar20": {
                    "1": "remainder_by_divisor_low"
                },
                "uVar21": {
                    "1": "remainder_by_divisor_high"
                },
                "uVar22": {
                    "1": "bit_shift"
                },
                "uVar23": {
                    "1": "divisor_shifted_low"
                },
                "uVar24": {
                    "1": "divisor_shifted_high"
                },
                "uVar3": {
                    "1": "temp13",
                    "2": "remainder",
                    "4": "quotient2",
                    "8": "quotient_high"
                },
                "uVar4": {
                    "1": "dividend_low",
                    "4": "temp1"
                },
                "uVar5": {
                    "1": "temp3",
                    "2": "temp",
                    "4": "temp2"
                },
                "uVar6": {
                    "1": "temp3"
                },
                "uVar7": {
                    "1": "temp1_lower",
                    "2": "temp4",
                    "3": "temp3",
                    "6": "temp1"
                },
                "uVar8": {
                    "1": "remainder_hi",
                    "2": "temp4",
                    "6": "temp2"
                },
                "uVar9": {
                    "1": "is_neg_dividend",
                    "10": "is_dividend_negative",
                    "2": "dividend_sign",
                    "6": "is_negative_dividend"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008455c"
            ],
            "code": "\nundefined8 divide_unsigned_integers_000845c0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong product;\n  uint quotient_low;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint is_dividend_negative;\n  uint is_divisor_negative;\n  uint quotient2;\n  uint divisor_extended;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = leading_zeros(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient_low = divisor >> 0x10;\n      temp1 = dividend_high / quotient_low;\n      temp1 = (divisor & 0xffff) * temp1;\n      is_divisor_negative = dividend >> 0x10 | (dividend_high - quotient_low * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (is_divisor_negative <= temp1 && temp1 - is_divisor_negative != 0) {\n        carry_flag = carry4(is_divisor_negative,divisor);\n        is_divisor_negative = is_divisor_negative + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry_flag == false) && (is_divisor_negative <= temp1 && temp1 - is_divisor_negative != 0)) {\n          quotient_high = temp1 - 2;\n          is_divisor_negative = is_divisor_negative + divisor;\n        }\n      }\n      temp2 = (is_divisor_negative - temp1) / quotient_low;\n      temp1 = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((is_divisor_negative - temp1) - quotient_low * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= temp1 && temp1 - temp1 != 0) {\n        quotient_low = temp2 - 1;\n        if ((carry4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp1 && temp1 - (temp1 + divisor) != 0)) {\n          quotient_low = temp2 - 2;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = leading_zeros(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        divisor_extended = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp1 = divisor >> 0x10;\n        is_divisor_negative = quotient_high / temp1;\n        divisor_extended = divisor & 0xffff;\n        temp1 = divisor_extended * is_divisor_negative;\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = temp2 >> 0x10 | (quotient_high - temp1 * is_divisor_negative) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_low = is_divisor_negative;\n        if (quotient_high <= temp1 && temp1 - quotient_high != 0) {\n          carry_flag = carry4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient_low = is_divisor_negative - 1;\n          if ((carry_flag == false) && (quotient_high <= temp1 && temp1 - quotient_high != 0)) {\n            quotient_low = is_divisor_negative - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp1) / temp1;\n        is_divisor_negative = divisor_extended * temp2;\n        dividend_high = temp2 & 0xffff | ((quotient_high - temp1) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0) {\n          carry_flag = carry4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - is_divisor_negative;\n        quotient_high = quotient_high | quotient_low << 0x10;\n      }\n      quotient_low = dividend_high / temp1;\n      is_divisor_negative = divisor_extended * quotient_low;\n      temp2 = dividend >> 0x10 | (dividend_high - temp1 * quotient_low) * 0x10000;\n      temp1 = quotient_low;\n      if (temp2 <= is_divisor_negative && is_divisor_negative - temp2 != 0) {\n        carry_flag = carry4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient_low - 1;\n        if ((carry_flag == false) && (temp2 <= is_divisor_negative && is_divisor_negative - temp2 != 0)) {\n          temp1 = quotient_low - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp2 = (temp2 - is_divisor_negative) / temp1;\n      divisor_extended = divisor_extended * temp2;\n      temp1 = dividend & 0xffff | ((temp2 - is_divisor_negative) - temp1 * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= divisor_extended && divisor_extended - temp1 != 0) {\n        quotient_low = temp2 - 1;\n        if ((carry4(temp1,divisor) == false) &&\n           (temp1 + divisor <= divisor_extended && divisor_extended - (temp1 + divisor) != 0)) {\n          quotient_low = temp2 - 2;\n        }\n      }\n      quotient_low = quotient_low | temp1 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    shift_amount = leading_zeros(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient_low = 1;\n      }\n      else {\n        quotient_low = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      divisor_extended = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      is_divisor_negative = divisor_extended >> 0x10;\n      quotient_low = temp1 / is_divisor_negative;\n      temp2 = (divisor_extended & 0xffff) * quotient_low;\n      temp1 = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      temp1 = temp1 >> 0x10 | (temp1 - is_divisor_negative * quotient_low) * 0x10000;\n      quotient_high = quotient_low;\n      if (temp1 <= temp2 && temp2 - temp1 != 0) {\n        carry_flag = carry4(temp1,divisor_extended);\n        temp1 = temp1 + divisor_extended;\n        quotient_high = quotient_low - 1;\n        if ((carry_flag == false) && (temp1 <= temp2 && temp2 - temp1 != 0)) {\n          quotient_high = quotient_low - 2;\n          temp1 = temp1 + divisor_extended;\n        }\n      }\n      temp2 = (temp1 - temp2) / is_divisor_negative;\n      quotient2 = (divisor_extended & 0xffff) * temp2;\n      temp1 = temp1 & 0xffff | ((temp1 - temp2) - is_divisor_negative * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= quotient2 && quotient2 - temp1 != 0) {\n        carry_flag = carry4(temp1,divisor_extended);\n        temp1 = temp1 + divisor_extended;\n        quotient_low = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= quotient2 && quotient2 - temp1 != 0)) {\n          quotient_low = temp2 - 2;\n          temp1 = temp1 + divisor_extended;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      product = (ulonglong)quotient_low * (ulonglong)(divisor << shift_amount);\n      temp1 = (uint)((ulonglong)product >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - quotient2 < temp1) ||\n         ((temp1 - quotient2 == temp1 && (dividend << shift_amount < (uint)product)))) {\n        quotient_low = quotient_low - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    carry_flag = quotient_low != 0;\n    quotient_low = -quotient_low;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient_low);\n}\n\n",
            "current_name": "divide_unsigned_integers_000845c0",
            "entrypoint": "0x000845c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry4",
                "FUN_000845c0": "divide_unsigned_integers_000845c0",
                "LZCOUNT": "leading_zeros",
                "bVar13": "carry_flag",
                "iVar6": "shift_amount",
                "lVar1": "product",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar10": "is_divisor_negative",
                "uVar11": "quotient2",
                "uVar12": "divisor_extended",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_dividend_negative"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084860": {
            "additional_data": {
                "CARRY4": {
                    "1": "check_for_carry"
                },
                "FUN_00084860": {
                    "1": "divide_with_carry",
                    "2": "divide_with_remainder",
                    "3": "calculate_quotient",
                    "4": "perform_division",
                    "5": "calculate_division"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "bVar11": {
                    "1": "carry_check",
                    "20": "carry_flag",
                    "8": "carry"
                },
                "iVar10": {
                    "1": "bits_to_shift",
                    "12": "shift_count",
                    "2": "bit_count",
                    "5": "shift_amount",
                    "6": "shift"
                },
                "lVar1": {
                    "1": "quotient_and_remainder",
                    "2": "quotient",
                    "3": "product",
                    "6": "result"
                },
                "param_1": {
                    "2": "numerator",
                    "29": "dividend"
                },
                "param_2": {
                    "1": "quotient",
                    "2": "denominator",
                    "22": "divisor",
                    "3": "dividend_high"
                },
                "param_3": {
                    "1": "quotient_high",
                    "17": "quotient",
                    "2": "temp1",
                    "8": "divisor"
                },
                "param_4": {
                    "1": "comparison",
                    "18": "remainder",
                    "2": "temp2",
                    "3": "divisor_high"
                },
                "uVar11": {
                    "1": "temp3"
                },
                "uVar12": {
                    "1": "temp_dividend2"
                },
                "uVar13": {
                    "1": "quotient"
                },
                "uVar14": {
                    "1": "remainder"
                },
                "uVar2": {
                    "1": "current_quotient",
                    "3": "result",
                    "4": "temp1"
                },
                "uVar3": {
                    "1": "quotient_step2",
                    "2": "quotient2",
                    "3": "temp2"
                },
                "uVar4": {
                    "1": "dividend_low",
                    "2": "quotient3",
                    "3": "temp3"
                },
                "uVar5": {
                    "1": "result4",
                    "3": "temp4",
                    "4": "product1"
                },
                "uVar6": {
                    "1": "temp4",
                    "2": "temp1",
                    "3": "temp5"
                },
                "uVar7": {
                    "1": "quotient_step6",
                    "2": "quotient2",
                    "3": "temp6"
                },
                "uVar8": {
                    "1": "quotient_multiplier1",
                    "2": "temp3",
                    "3": "temp7",
                    "4": "temp1"
                },
                "uVar9": {
                    "1": "temp4",
                    "2": "product2",
                    "3": "temp8",
                    "5": "temp2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008458c"
            ],
            "code": "\nulonglong calculate_division_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint product1;\n  uint temp5;\n  uint temp6;\n  uint temp1;\n  uint temp2;\n  int shift_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_count = leading_zeros_count(quotient);\n      if (shift_count == 0) {\n        divisor = divisor - quotient;\n        temp2 = quotient >> 0x10;\n        product1 = quotient & 0xffff;\n        temp1 = 1;\n      }\n      else {\n        quotient = quotient << shift_count;\n        temp1 = divisor >> (0x20U - shift_count & 0xff);\n        temp2 = quotient >> 0x10;\n        temp2 = temp1 / temp2;\n        product1 = quotient & 0xffff;\n        temp1 = product1 * temp2;\n        temp5 = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        temp3 = temp5 >> 0x10 | (temp1 - temp2 * temp2) * 0x10000;\n        dividend = dividend << shift_count;\n        temp1 = temp2;\n        if (temp3 <= temp1 && temp1 - temp3 != 0) {\n          carry_flag = check_for_carry(temp3,quotient);\n          temp3 = temp3 + quotient;\n          temp1 = temp2 - 1;\n          if ((carry_flag == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n            temp1 = temp2 - 2;\n            temp3 = temp3 + quotient;\n          }\n        }\n        temp6 = (temp3 - temp1) / temp2;\n        temp2 = product1 * temp6;\n        divisor = temp5 & 0xffff | ((temp3 - temp1) - temp2 * temp6) * 0x10000;\n        temp1 = temp6;\n        if (divisor <= temp2 && temp2 - divisor != 0) {\n          carry_flag = check_for_carry(divisor,quotient);\n          divisor = divisor + quotient;\n          temp1 = temp6 - 1;\n          if ((carry_flag == false) && (divisor <= temp2 && temp2 - divisor != 0)) {\n            temp1 = temp6 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp2;\n        temp1 = temp1 | temp1 << 0x10;\n      }\n      temp2 = divisor / temp2;\n      temp3 = product1 * temp2;\n      temp5 = dividend >> 0x10 | (divisor - temp2 * temp2) * 0x10000;\n      temp1 = temp2;\n      if (temp5 <= temp3 && temp3 - temp5 != 0) {\n        carry_flag = check_for_carry(temp5,quotient);\n        temp5 = temp5 + quotient;\n        temp1 = temp2 - 1;\n        if ((carry_flag == false) && (temp5 <= temp3 && temp3 - temp5 != 0)) {\n          temp1 = temp2 - 2;\n          temp5 = temp5 + quotient;\n        }\n      }\n      temp2 = (temp5 - temp3) / temp2;\n      product1 = product1 * temp2;\n      temp5 = dividend & 0xffff | ((temp5 - temp3) - temp2 * temp2) * 0x10000;\n      temp2 = temp2;\n      if (temp5 <= product1 && product1 - temp5 != 0) {\n        temp2 = temp2 - 1;\n        if ((check_for_carry(temp5,quotient) == false) &&\n           (temp5 + quotient <= product1 && product1 - (temp5 + quotient) != 0)) {\n          temp2 = temp2 - 2;\n        }\n      }\n      return CONCAT44(temp1,temp2 | temp1 << 0x10);\n    }\n    shift_count = leading_zeros_count(quotient);\n    if (shift_count != 0) {\n      temp1 = dividend >> (0x20U - shift_count & 0xff);\n      quotient = quotient << shift_count;\n      dividend = dividend << shift_count;\n      divisor = temp1 | divisor << shift_count;\n    }\n    temp1 = quotient >> 0x10;\n    temp2 = divisor / temp1;\n    product1 = (quotient & 0xffff) * temp2;\n    temp2 = dividend >> 0x10 | (divisor - temp1 * temp2) * 0x10000;\n    temp1 = temp2;\n    if (temp2 <= product1 && product1 - temp2 != 0) {\n      carry_flag = check_for_carry(temp2,quotient);\n      temp2 = temp2 + quotient;\n      temp1 = temp2 - 1;\n      if ((carry_flag == false) && (temp2 <= product1 && product1 - temp2 != 0)) {\n        temp1 = temp2 - 2;\n        temp2 = temp2 + quotient;\n      }\n    }\n    temp5 = (temp2 - product1) / temp1;\n    temp2 = (quotient & 0xffff) * temp5;\n    product1 = dividend & 0xffff | ((temp2 - product1) - temp1 * temp5) * 0x10000;\n    temp1 = temp5;\n    if (product1 <= temp2 && temp2 - product1 != 0) {\n      temp1 = temp5 - 1;\n      if ((check_for_carry(product1,quotient) == false) &&\n         (product1 + quotient <= temp2 && temp2 - (product1 + quotient) != 0)) {\n        temp1 = temp5 - 2;\n      }\n    }\n    temp1 = temp1 | temp1 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_count = leading_zeros_count(remainder);\n    if (shift_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      temp1 = 0;\n    }\n    else {\n      temp1 = 0x20 - shift_count;\n      temp1 = divisor >> (temp1 & 0xff);\n      temp2 = remainder << shift_count | quotient >> (temp1 & 0xff);\n      product1 = temp2 >> 0x10;\n      temp3 = temp1 / product1;\n      temp2 = (temp2 & 0xffff) * temp3;\n      temp5 = dividend >> (temp1 & 0xff) | divisor << shift_count;\n      temp1 = temp5 >> 0x10 | (temp1 - product1 * temp3) * 0x10000;\n      temp1 = temp3;\n      if (temp1 <= temp2 && temp2 - temp1 != 0) {\n        carry_flag = check_for_carry(temp1,temp2);\n        temp1 = temp1 + temp2;\n        temp1 = temp3 - 1;\n        if ((carry_flag == false) && (temp1 <= temp2 && temp2 - temp1 != 0)) {\n          temp1 = temp3 - 2;\n          temp1 = temp1 + temp2;\n        }\n      }\n      temp3 = (temp1 - temp2) / product1;\n      temp6 = (temp2 & 0xffff) * temp3;\n      product1 = temp5 & 0xffff | ((temp1 - temp2) - product1 * temp3) * 0x10000;\n      temp1 = temp3;\n      if (product1 <= temp6 && temp6 - product1 != 0) {\n        carry_flag = check_for_carry(product1,temp2);\n        product1 = product1 + temp2;\n        temp1 = temp3 - 1;\n        if ((carry_flag == false) && (product1 <= temp6 && temp6 - product1 != 0)) {\n          temp1 = temp3 - 2;\n          product1 = product1 + temp2;\n        }\n      }\n      temp1 = temp1 | temp1 << 0x10;\n      result = (ulonglong)temp1 * (ulonglong)(quotient << shift_count);\n      temp1 = (uint)((ulonglong)result >> 0x20);\n      if ((product1 - temp6 < temp1) || ((product1 - temp6 == temp1 && (dividend << shift_count < (uint)result)))\n         ) {\n        temp1 = temp1 - 1;\n      }\n    }\n  }\n  return (ulonglong)temp1;\n}\n\n",
            "current_name": "calculate_division_00084860",
            "entrypoint": "0x00084860",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "check_for_carry",
                "FUN_00084860": "calculate_division_00084860",
                "LZCOUNT": "leading_zeros_count",
                "bVar11": "carry_flag",
                "iVar10": "shift_count",
                "lVar1": "result",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "product1",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp1",
                "uVar9": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00085844": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00085844",
            "entrypoint": "0x00085844",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_000815ec"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_control_system_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00080c20",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "DAT_5678": {
                    "1": "dat"
                },
                "PTR_1234": {
                    "1": "ptr"
                },
                "thunk_FUN_00080efe": {
                    "1": "reset_value",
                    "12": "get_error_code",
                    "2": "initialize_value",
                    "3": "get_negative_one",
                    "8": "get_default_value"
                },
                "undefined4": {
                    "1": "uint32_t"
                }
            },
            "called": [
                "FUN_00080efe"
            ],
            "calling": [
                "FUN_000841e4"
            ],
            "code": "\nvoid get_error_code_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_thunk_00080efe",
            "entrypoint": "0x0008421c",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "additional_data": {
                "convert_to_base_000810fc": {
                    "1": "convert_to_base_helper",
                    "2": "convert_number_to_base",
                    "3": "convert_to_base"
                },
                "execute_function_000810cc": {
                    "1": "execute_operation",
                    "2": "execute_function"
                },
                "iVar1": {
                    "1": "return_value",
                    "30": "result"
                },
                "iVar2": {
                    "1": "neg_prefix_result",
                    "17": "negative_result",
                    "2": "negative_value"
                },
                "param_1": {
                    "1": "base_pointer",
                    "2": "input_array",
                    "3": "input",
                    "4": "input_ptr",
                    "5": "data_ptr",
                    "6": "data"
                },
                "param_2": {
                    "1": "number_to_convert",
                    "12": "number",
                    "13": "value",
                    "3": "input_value"
                },
                "param_3": {
                    "1": "radix",
                    "30": "base"
                },
                "param_4": {
                    "1": "converter",
                    "2": "param4",
                    "3": "unknown_param",
                    "4": "unknown",
                    "5": "param",
                    "7": "param_4"
                },
                "thunk_FUN_0008113a": {
                    "1": "convert_base_to_string",
                    "11": "convert_to_base",
                    "2": "convert_param_to_base",
                    "3": "convert_number_base",
                    "5": "convert_to_base_or_execute"
                }
            },
            "called": [
                "FUN_0008113a"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint convert_to_base_thunk_0008113a(undefined4 *data,uint value,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*data)(data,value & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)value < 0) {\n      result = execute_function(data,0x2d);\n      negative_result = convert_to_base_thunk_0008113a(data,-value,10);\n      return negative_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_to_base_thunk_0008113a(data,value,base,param_4);\n  return result;\n}\n\n",
            "current_name": "convert_to_base_thunk_0008113a",
            "entrypoint": "0x00081176",
            "imported": false,
            "improved": true,
            "renaming": {
                "convert_to_base_000810fc": "convert_to_base",
                "execute_function_000810cc": "execute_function",
                "iVar1": "result",
                "iVar2": "negative_result",
                "param_1": "data",
                "param_2": "value",
                "param_3": "base",
                "thunk_FUN_0008113a": "convert_to_base_thunk_0008113a"
            },
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "additional_data": {
                "DAT_2007120c": {
                    "1": "value",
                    "3": "data",
                    "4": "global_variable",
                    "5": "global_data"
                },
                "thunk_FUN_000816d8": {
                    "1": "get_dat_2007120c",
                    "2": "get_return_value",
                    "3": "get_data",
                    "4": "get_global_variable",
                    "6": "get_global_data",
                    "8": "get_data_value"
                }
            },
            "called": [
                "FUN_000816d8"
            ],
            "calling": [
                "FUN_000811e8"
            ],
            "code": "\nundefined4 get_data_value_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "current_name": "get_data_value_thunk_000816d8",
            "entrypoint": "0x00080f04",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_000816d8": "get_data_value_thunk_000816d8"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000805a8",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811ca",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_0008145c",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_000840f8",
            "thunk_FUN_00080efe",
            "FUN_0008439c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_000806f8",
            "FUN_00080970",
            "FUN_00080a30",
            "FUN_000810a6",
            "FUN_000811b0",
            "FUN_000811e8",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_000815b8",
            "FUN_00081624",
            "FUN_0008236c",
            "FUN_00083888",
            "FUN_000841e4",
            "FUN_0008434c",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_0008455c",
            "FUN_0008458c"
        ],
        [
            "FUN_00080164",
            "FUN_0008089c",
            "FUN_00080f0c",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_00083a74",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_00084530"
        ],
        [
            "FUN_00081014",
            "FUN_000810e8",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_00083b10"
        ],
        [
            "FUN_0008044c",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00083850"
        ],
        [
            "FUN_00081472",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_000817f0",
            "FUN_00081fac",
            "FUN_00084018",
            "FUN_00084484"
        ],
        [
            "FUN_00081560",
            "FUN_00081f9c",
            "FUN_0008356c"
        ],
        [
            "FUN_00081496",
            "FUN_00083ca8",
            "FUN_000842a4"
        ],
        [
            "FUN_000814ae",
            "FUN_000839b4"
        ],
        [
            "FUN_000814d0",
            "FUN_00081570",
            "FUN_00082824"
        ],
        [
            "FUN_000814f6",
            "FUN_0008159e"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_000834f0"
        ],
        [
            "FUN_00080eec",
            "FUN_0008289c"
        ],
        [
            "FUN_000836ec"
        ],
        [
            "FUN_000816f8"
        ],
        [
            "FUN_00080b2c"
        ],
        [
            "FUN_000803fc"
        ],
        [
            "FUN_000806a0"
        ],
        [
            "FUN_000801e0"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 473552
}