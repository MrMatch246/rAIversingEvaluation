{
    "functions": {
        "FUN_000800f4": {
            "additional_data": {
                "DAT_200708a0": {
                    "1": "global_flag",
                    "17": "flag",
                    "4": "flag_variable"
                },
                "DAT_200708a0._0_1_": {
                    "1": "flag"
                },
                "FUN_000800f4": {
                    "1": "initialize_global_flag",
                    "17": "initialize_flag",
                    "2": "update_flag_if_zero",
                    "5": "set_flag_if_not_set"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "input",
                    "11": "input_value",
                    "7": "value"
                }
            },
            "called": [],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_000800f4(undefined4 input_value)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_000800f4",
            "entrypoint": "0x000800f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080118": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080118",
            "entrypoint": "0x00080118",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080164": {
            "additional_data": {
                "&DAT_200708d4": {
                    "1": "component2_data"
                },
                "&DAT_200708e8": {
                    "1": "component1_data"
                },
                "FUN_00080164": {
                    "1": "initialize_data_structures",
                    "2": "initialize_components",
                    "25": "initialize_data"
                },
                "FUN_000806f8": {
                    "1": "configure_byte_data",
                    "2": "perform_operation",
                    "4": "set_byte_value",
                    "9": "process_data"
                },
                "param_1": {
                    "1": "first_parameter",
                    "2": "byte_array",
                    "8": "data"
                },
                "param_2": {
                    "1": "second_parameter",
                    "2": "arg2",
                    "4": "length",
                    "5": "value",
                    "7": "size"
                },
                "param_3": {
                    "1": "component_3",
                    "2": "data1",
                    "3": "data3",
                    "5": "param3",
                    "8": "arg3"
                },
                "param_4": {
                    "1": "optional_param2",
                    "2": "data2",
                    "3": "data4",
                    "5": "param4",
                    "8": "arg4"
                }
            },
            "called": [
                "FUN_000806f8"
            ],
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "code": "\nvoid initialize_data_00080164(undefined4 data,undefined4 size,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000806f8(&DAT_200708e8,0x5a);\n  FUN_000806f8(&DAT_200708d4,0x5a,arg3,arg4);\n  return;\n}\n\n",
            "current_name": "initialize_data_00080164",
            "entrypoint": "0x00080164",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "data",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000801e0": {
            "additional_data": {
                "&DAT_200708bc": {
                    "1": "flag"
                },
                "&DAT_200708d4": {
                    "1": "data2"
                },
                "&DAT_200708e8": {
                    "1": "data3"
                },
                "&DAT_20070be8": {
                    "1": "data1"
                },
                "0xe100": {
                    "1": "value1"
                },
                "DAT_200708bc": {
                    "1": "data4",
                    "2": "flag"
                },
                "DAT_200708d4": {
                    "1": "device1",
                    "2": "data2"
                },
                "DAT_200708e8": {
                    "1": "feature2",
                    "2": "data3"
                },
                "DAT_20070be8": {
                    "1": "component_data",
                    "3": "data1"
                },
                "FUNC_00080f08": {
                    "1": "set_timer_interval",
                    "3": "delay",
                    "7": "delay_execution"
                },
                "FUN_00080164": {
                    "1": "log_information",
                    "2": "reset",
                    "3": "perform_initialization",
                    "5": "perform_action"
                },
                "FUN_00080199": {
                    "1": "initialize_system"
                },
                "FUN_000801e0": {
                    "1": "initialize_components",
                    "17": "initialize_system",
                    "2": "initialize_hardware",
                    "3": "initialize_device"
                },
                "FUN_000806a0": {
                    "1": "configure_property",
                    "2": "set_configuration",
                    "6": "configure_device",
                    "7": "set_byte_value"
                },
                "FUN_00080f0c": {
                    "1": "execute_operation",
                    "2": "set_mode",
                    "3": "set_flag",
                    "6": "set_int_value",
                    "8": "set_configuration"
                },
                "FUN_000813dc": {
                    "1": "initialize_database",
                    "2": "initialize_module",
                    "3": "send_data",
                    "5": "initialize_memory",
                    "9": "initialize_data"
                },
                "byte": {
                    "1": "byte_value"
                },
                "configure_byte": {
                    "1": "configure_byte"
                },
                "initialize_components": {
                    "1": "initialize_components"
                },
                "initialize_device": {
                    "1": "initialize_device"
                },
                "initialize_memory": {
                    "1": "initialize_memory"
                },
                "int": {
                    "1": "int_value"
                },
                "param_1": {
                    "1": "config_param",
                    "2": "var1",
                    "5": "param1",
                    "8": "arg1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "2": "var2",
                    "5": "param_2",
                    "8": "arg2"
                },
                "param_3": {
                    "1": "config_param3",
                    "2": "var3",
                    "5": "param_3",
                    "8": "param3",
                    "9": "arg3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "var4",
                    "5": "param_4",
                    "8": "param4",
                    "9": "arg4"
                },
                "set_configuration": {
                    "1": "set_configuration"
                },
                "software_interrupt": {
                    "1": "invoke_system_interrupt",
                    "6": "trigger_interrupt"
                },
                "wait_for_completion": {
                    "1": "wait_for_completion"
                }
            },
            "called": [
                "FUN_000806a0",
                "FUN_00080f0c",
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000813dc"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nundefined8 initialize_system_000801e0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000813dc(&DAT_20070be8,0xe100,arg3,arg4,arg4);\n  FUN_00080f0c(0xd,1);\n  FUN_00080f0c(6,1);\n  FUN_00080f0c(0x39,0);\n  FUN_00080f0c(4,0);\n  FUN_00080f0c(3,0);\n  FUN_00080f0c(2,0);\n  FUN_000806a0(&DAT_200708d4,5);\n  FUN_000806a0(&DAT_200708e8,6);\n  FUN_00080164();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    trigger_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_system_000801e0",
            "entrypoint": "0x000801e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000801e0": "initialize_system_000801e0",
                "int": "int_value",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "software_interrupt": "trigger_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080250": {
            "additional_data": {
                "DAT_200708c0": {
                    "1": "sensor_value"
                },
                "DAT_200708c4": {
                    "1": "toggle_value"
                },
                "DAT_200708c8": {
                    "1": "sensor_data2"
                },
                "DAT_200708d4": {
                    "1": "steer_output_value"
                },
                "DAT_200708d8": {
                    "1": "control_value1"
                },
                "DAT_200708dc": {
                    "1": "sensor_data1"
                },
                "DAT_200708e8": {
                    "1": "motor_output_value"
                },
                "DAT_200708eb": {
                    "1": "manual_control_mode"
                },
                "DAT_200708ec": {
                    "1": "control_value2"
                },
                "DAT_20070be8": {
                    "1": "output_buffer"
                },
                "FUNC_00080f08": {
                    "1": "perform_initialization",
                    "2": "set_control_mode",
                    "3": "initialize_system",
                    "4": "initialize_control",
                    "6": "set_mode"
                },
                "FUN_00080164": {
                    "1": "print_debug_message",
                    "11": "print_message",
                    "2": "print_debug_info",
                    "3": "print_log"
                },
                "FUN_00080250": {
                    "1": "control_mode_selector",
                    "2": "control_mode_function",
                    "3": "control_mode_switch",
                    "4": "control_function",
                    "8": "control_mode"
                },
                "FUN_000806f8": {
                    "1": "execute_control",
                    "2": "update_control_signal",
                    "3": "set_control_value",
                    "5": "update_data"
                },
                "FUN_00081014": {
                    "1": "send_command",
                    "2": "set_control_timeout",
                    "5": "set_threshold"
                },
                "FUN_000810c4": {
                    "1": "update_motor_values",
                    "2": "update_control",
                    "3": "process_data"
                },
                "FUN_000810e8": {
                    "1": "set_mode_description",
                    "3": "display_message",
                    "6": "set_message"
                },
                "FUN_0008113a": {
                    "1": "handle_control"
                },
                "FUN_0008117a": {
                    "1": "control_operation",
                    "2": "execute_command"
                },
                "FUN_00081214": {
                    "1": "copy_buffer_entry",
                    "10": "copy_data",
                    "2": "copy_control_data"
                },
                "FUN_00081248": {
                    "1": "get_buffer_length",
                    "2": "get_control_count",
                    "3": "get_queue_length",
                    "5": "get_queue_size"
                },
                "FUN_00081276": {
                    "1": "clear_control_signal",
                    "2": "process_message",
                    "3": "process_queue_item",
                    "4": "process_queue"
                },
                "FUN_0008145c": {
                    "1": "initialize_value",
                    "2": "initialize_motor",
                    "5": "initialize_data"
                },
                "FUN_00081472": {
                    "1": "print_values",
                    "2": "update_motor"
                },
                "FUN_00081560": {
                    "1": "save_copy_data",
                    "3": "convert_data",
                    "9": "parse_data"
                },
                "FUN_000815b8": {
                    "1": "compare_buffer_entry",
                    "2": "compare_strings",
                    "3": "compare_data"
                },
                "FUN_000815de": {
                    "1": "convert_value",
                    "2": "get_data",
                    "3": "get_value"
                },
                "FUN_00081624": {
                    "1": "get_control_input",
                    "2": "initialize_sensor",
                    "3": "get_sensor_data",
                    "4": "initialize_control"
                },
                "auStack_1c": {
                    "1": "temp_buffer"
                },
                "iVar2": {
                    "1": "loop_counter",
                    "2": "count"
                },
                "puVar3": {
                    "1": "data_pointer",
                    "2": "ptr"
                },
                "thunk_FUN_0008113a": {
                    "1": "control_system_helper",
                    "2": "execute_control",
                    "4": "thunk_function",
                    "5": "process_data"
                },
                "uVar1": {
                    "1": "return_value",
                    "2": "result"
                }
            },
            "called": [
                "FUN_000810c4",
                "FUN_00081472",
                "FUN_000815b8",
                "FUN_00081248",
                "FUN_000806f8",
                "FUN_00081214",
                "FUN_00080164",
                "FUN_000810e8",
                "FUN_00080f08",
                "FUN_00081276",
                "FUN_00081560",
                "FUN_00081014",
                "FUN_00081624",
                "thunk_FUN_0008113a",
                "FUN_000815de",
                "FUN_0008117a",
                "FUN_0008145c"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid control_mode_00080250(void)\n\n{\n  undefined4 result;\n  int count;\n  undefined *ptr;\n  undefined temp_buffer [12];\n  \n  DAT_200708c0 = FUN_00081624(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  FUN_00081014(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      result = FUN_00081624(3,1,20000);\n      DAT_200708d8 = FUN_0008145c(0,1000,2000,0x28,0x96);\n      DAT_200708ec = FUN_0008145c(result,1000,2000,0x28,0x96);\n      while (count = FUN_00081248(&DAT_20070be8), 0 < count) {\n        FUN_00081276(&DAT_20070be8);\n        thunk_FUN_0008113a(&DAT_20070be8,DAT_200708d8,10);\n        FUN_000810c4(&DAT_20070be8,&DAT_00084b13);\n        FUN_0008117a(&DAT_20070be8,DAT_200708ec,10);\n      }\n      FUN_000806f8(&DAT_200708e8,DAT_200708ec);\n      FUN_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      count = FUN_00081248(&DAT_20070be8);\n      if (0 < count) {\n        FUN_00081214(temp_buffer,&DAT_20070be8,0x2c);\n        FUN_00081560(&DAT_200708dc,temp_buffer);\n        FUN_00081472(temp_buffer);\n        FUN_00081214(temp_buffer,&DAT_20070be8,10);\n        FUN_00081560(&DAT_200708c8,temp_buffer);\n        FUN_00081472(temp_buffer);\n        FUN_00081276(&DAT_20070be8);\n        count = FUN_000815b8(&DAT_200708dc,\"steer\");\n        if (count == 0) goto LAB_0008039c;\n        result = FUN_000815de(&DAT_200708c8);\n        ptr = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    FUN_00080164();\n    FUN_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  count = FUN_000815b8(&DAT_200708dc,\"motor\");\n  if (count != 0) {\n    result = FUN_000815de(&DAT_200708c8);\n    ptr = &DAT_200708e8;\nLAB_000803b2:\n    FUN_000806f8(ptr,result);\n  }\n  goto LAB_00080346;\n}\n\n",
            "current_name": "control_mode_00080250",
            "entrypoint": "0x00080250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080250": "control_mode_00080250",
                "auStack_1c": "temp_buffer",
                "iVar2": "count",
                "puVar3": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000803fc": {
            "additional_data": {
                "FUN_000803fc": {
                    "1": "start_tc",
                    "16": "initialize_tc_channel",
                    "2": "initialize_channel",
                    "9": "initialize_tc"
                },
                "FUN_00080aa8": {
                    "1": "initialize_channel_config",
                    "2": "initialize_value",
                    "5": "initialize_param"
                },
                "FUN_00080b2c": {
                    "1": "configure_tc",
                    "2": "initialize_channel",
                    "7": "print_error_message"
                },
                "FUN_00080b90": {
                    "1": "initialize_channel2",
                    "2": "perform_action_c",
                    "3": "set_bit_in_memory"
                },
                "FUN_000816f8": {
                    "1": "verify_tc_start",
                    "2": "check_channel_range",
                    "3": "check_channel_bounds",
                    "4": "check_channel_size"
                },
                "in_lr": {
                    "1": "variable2",
                    "3": "in_link_register",
                    "7": "in_lr"
                },
                "param_1": {
                    "1": "param1",
                    "17": "channel_index",
                    "3": "channel_id",
                    "6": "channel"
                },
                "param_2": {
                    "1": "length",
                    "2": "parameter_index",
                    "4": "param2",
                    "6": "size",
                    "9": "dw_channel"
                },
                "param_3": {
                    "1": "channel_config",
                    "18": "param3",
                    "3": "param"
                },
                "param_4": {
                    "1": "constant2",
                    "2": "bit_mask",
                    "3": "bit_offset",
                    "5": "bit_index",
                    "6": "bit_position",
                    "7": "param4"
                },
                "uVar1": {
                    "1": "concatenated_value",
                    "15": "combined_params",
                    "3": "combined_value",
                    "4": "concatenated_params"
                },
                "unaff_r4": {
                    "1": "variable1",
                    "2": "unaffected_r4",
                    "7": "unaff_r4"
                }
            },
            "called": [
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_00080aa8",
                "FUN_000816f8"
            ],
            "calling": [
                "FUN_000806a0"
            ],
            "code": "\nvoid initialize_tc_channel_000803fc(int channel_index,uint dw_channel,undefined4 param3,uint param4)\n\n{\n  undefined4 unaff_r4;\n  undefined4 in_lr;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(dw_channel,channel_index);\n  FUN_00080aa8(param3);\n  FUN_00080b2c(channel_index,dw_channel,0xc002);\n  FUN_00080b90(channel_index,dw_channel,0xa41);\n  *(int *)((param4 >> 5) * 4 + -0x1fff1f00) = 1 << (param4 & 0x1f);\n  *(undefined4 *)(channel_index + dw_channel * 0x40 + 0x24) = 4;\n  if (2 < dw_channel) {\n    combined_params = FUN_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         unaff_r4,in_lr);\n  }\n  *(undefined4 *)((int)combined_params + (int)((ulonglong)combined_params >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "current_name": "initialize_tc_channel_000803fc",
            "entrypoint": "0x000803fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000803fc": "initialize_tc_channel_000803fc",
                "param_1": "channel_index",
                "param_2": "dw_channel",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combined_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008044c": {
            "additional_data": {
                "FUN_0008044c": {
                    "1": "update_flags_and_values",
                    "11": "process_data",
                    "15": "update_data"
                },
                "FUN_00081014": {
                    "1": "handle_condition",
                    "3": "handle_error",
                    "4": "process_data"
                },
                "iVar2": {
                    "1": "multiplier",
                    "2": "array_index",
                    "3": "offset2",
                    "4": "offset_multiplier",
                    "8": "temp_var"
                },
                "param_1": {
                    "1": "param1",
                    "28": "index"
                },
                "param_2": {
                    "1": "base_address",
                    "12": "data",
                    "2": "data_pointer",
                    "3": "data_ptr",
                    "6": "buffer"
                },
                "param_3": {
                    "1": "is_negative",
                    "2": "multiplier",
                    "27": "offset"
                },
                "uVar1": {
                    "1": "upper_bound",
                    "11": "limit",
                    "2": "upper_limit",
                    "3": "threshold",
                    "4": "data_size",
                    "9": "max_value"
                },
                "undefined4": {
                    "1": "param_3"
                }
            },
            "called": [
                "FUN_00081014"
            ],
            "calling": [],
            "code": "\nvoid update_data_0008044c(int index,int data,int offset)\n\n{\n  uint limit;\n  int temp_var;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    temp_var = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + temp_var < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp_var) * 8] << 0x19) < 0\n       )) {\n      FUN_00081014((&DAT_200708f8)[(temp_var + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  limit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  temp_var = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + temp_var < (int)limit) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + temp_var) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp_var) * 8] << 0x19\n                  )) {\n      return;\n    }\n    FUN_00081014((&DAT_200708f8)[(temp_var + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  limit = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (limit <= *(int *)(data + 0x10) + 4U) {\n    limit = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = limit;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "current_name": "update_data_0008044c",
            "entrypoint": "0x0008044c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008044c": "update_data_0008044c",
                "iVar2": "temp_var",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "limit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000805a8": {
            "additional_data": {
                "*(uint *)(&DAT_200708fc + uVar2 * 8)": {
                    "1": "stored_offset"
                },
                "*param_1": {
                    "1": "output_value"
                },
                "0x3c": {
                    "1": "threshold"
                },
                "0xff": {
                    "1": "default_value"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_relocations",
                    "2": "relocation_array",
                    "3": "relocation_table",
                    "4": "rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "offset_value"
                },
                "FUN_000805a8": {
                    "1": "update_param_with_offset",
                    "2": "update_relocation_entry",
                    "3": "update_data"
                },
                "byteArray": {
                    "1": "output_array"
                },
                "cVar1": {
                    "1": "incremented_value",
                    "2": "new_byte",
                    "3": "next_byte",
                    "8": "next_value"
                },
                "elfRelArray": {
                    "1": "rel_array"
                },
                "newChar": {
                    "1": "new_byte"
                },
                "offset": {
                    "1": "relocation_offset"
                },
                "param_1": {
                    "1": "relocation_entry",
                    "2": "byte_array",
                    "3": "output_data",
                    "4": "output_buffer",
                    "7": "output_byte"
                },
                "r_offset": {
                    "1": "relative_offset",
                    "4": "offset"
                },
                "size": {
                    "1": "array_size"
                },
                "uVar2": {
                    "1": "current_index",
                    "13": "counter",
                    "2": "index",
                    "3": "current_value"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_data_000805a8(byte *output_byte)\n\n{\n  char next_value;\n  uint counter;\n  \n  counter = (uint)DAT_200708f0;\n  if (counter < 0x3c) {\n    next_value = DAT_200708f0 + 1;\n    *output_byte = DAT_200708f0;\n    DAT_200708f0 = next_value;\n    *(uint *)(&DAT_200708fc + counter * 8) =\n         (offset_value / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output_byte = 0xff;\n  return;\n}\n\n",
            "current_name": "update_data_000805a8",
            "entrypoint": "0x000805a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "offset_value",
                "FUN_000805a8": "update_data_000805a8",
                "cVar1": "next_value",
                "offset": "relocation_offset",
                "param_1": "output_byte",
                "r_offset": "offset",
                "uVar2": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000806a0": {
            "additional_data": {
                "*param_1": {
                    "1": "data"
                },
                "FUN_000803fc": {
                    "1": "perform_operation",
                    "2": "sub_function1"
                },
                "FUN_000806a0": {
                    "1": "decode_and_modify_byte",
                    "13": "process_data",
                    "2": "decode_and_process_data",
                    "5": "process_byte"
                },
                "FUN_00080f0c": {
                    "1": "perform_operation",
                    "2": "sub_function2"
                },
                "bVar1": {
                    "1": "masked_byte",
                    "2": "result",
                    "3": "temp",
                    "6": "temp_byte",
                    "9": "byte_value"
                },
                "iVar5": {
                    "1": "loop_index",
                    "2": "loop_counter",
                    "24": "counter"
                },
                "param_1": {
                    "1": "byte_data",
                    "18": "data",
                    "2": "data_array",
                    "3": "byte_array"
                },
                "param_2": {
                    "1": "size",
                    "19": "value",
                    "3": "param"
                },
                "uVar2": {
                    "1": "temp2",
                    "13": "address",
                    "2": "base_addr",
                    "3": "constant1",
                    "4": "base_address"
                },
                "uVar3": {
                    "1": "input_divided",
                    "24": "index",
                    "3": "quotient"
                },
                "uVar4": {
                    "1": "register_value",
                    "2": "length",
                    "3": "constant2"
                },
                "uVar6": {
                    "1": "byte_param",
                    "11": "data_value",
                    "2": "temp",
                    "3": "value",
                    "5": "byte_value"
                }
            },
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "calling": [
                "FUN_000801e0"
            ],
            "code": "\nbyte process_data_000806a0(byte *data,undefined4 value)\n\n{\n  byte byte_value;\n  undefined4 address;\n  uint index;\n  undefined4 count;\n  int counter;\n  uint data_value;\n  \n  if (0x3b < *data) goto LAB_00080660;\n  FUN_00080f0c(value,1,0x220,*data,0x960);\n  data_value = (uint)*data;\n  byte_value = (&DAT_200708f8)[data_value * 8];\n  data[2] = 0;\n  index = data_value / 0xc;\n  (&DAT_200708f8)[data_value * 8] = byte_value & 0xc0 | (byte)value & 0x3f;\n  data[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (index == 0) {\n    address = 0x40084000;\n    count = 0x1e;\nLAB_0008064c:\n    FUN_000803fc(address,index,count,count);\n  }\n  else {\n    if (index == 1) {\n      address = 0x40084000;\n      count = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      address = 0x40084000;\n      count = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      address = 0x40080000;\n      index = 2;\n      count = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      address = 0x40080000;\n      index = 0;\n      count = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nLAB_00080660:\n  return *data;\n}\n\n",
            "current_name": "process_data_000806a0",
            "entrypoint": "0x000806a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "bVar1": "byte_value",
                "iVar5": "counter",
                "param_1": "data",
                "param_2": "value",
                "uVar2": "address",
                "uVar3": "index",
                "uVar4": "count",
                "uVar6": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000806f8": {
            "additional_data": {
                "(0x88 - (char)param_1[1]) * 4": {
                    "1": "offset1"
                },
                "(600 - (char)param_1[2]) * 4": {
                    "1": "offset2"
                },
                "*(uint *)(&DAT_200708fc + (uint)*param_1 * 8)": {
                    "1": "result"
                },
                "*param_1": {
                    "1": "first_byte"
                },
                "DAT_20070000": {
                    "4": "elf32_rel_array"
                },
                "DAT_200708fc": {
                    "1": "offset_array",
                    "4": "result_array"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_relocation_array"
                },
                "FUN_000806f8": {
                    "1": "process_input_data",
                    "25": "process_data"
                },
                "FUN_0008145c": {
                    "1": "calculate_result",
                    "13": "calculate_value",
                    "5": "calculate_offset"
                },
                "PTR_20070000": {
                    "1": "elf32_rel_array"
                },
                "SBORROW4": {
                    "1": "check_overflow"
                },
                "param_1": {
                    "1": "input_data",
                    "15": "data",
                    "2": "buffer",
                    "3": "data_buffer"
                },
                "param_1[1]": {
                    "1": "first_byte"
                },
                "param_1[2]": {
                    "1": "value2"
                },
                "param_2": {
                    "1": "value2",
                    "11": "length",
                    "2": "b",
                    "3": "buffer_size",
                    "6": "size"
                },
                "param_2 & ~((int)uVar1 >> 0x1f)": {
                    "1": "adjusted_size_without_sign_extension"
                },
                "param_2 + (0x88 - (char)param_1[1]) * -4": {
                    "1": "modified_length"
                },
                "param_3": {
                    "1": "value_3",
                    "2": "c"
                },
                "param_4": {
                    "1": "constant2",
                    "2": "d"
                },
                "param_5": {
                    "1": "constant3",
                    "2": "e"
                },
                "r_offset": {
                    "2": "offset"
                },
                "uVar1": {
                    "1": "new_size",
                    "3": "min_length",
                    "4": "clamped_length",
                    "6": "adjusted_length"
                },
                "uVar2": {
                    "1": "index"
                },
                "uVar3": {
                    "1": "offset"
                },
                "uVar4": {
                    "1": "multiplier"
                }
            },
            "called": [
                "FUN_0008145c"
            ],
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "code": "\nvoid process_data_000806f8(byte *data,uint length)\n\n{\n  uint adjusted_length;\n  \n  if ((int)length < 0x220) {\n    adjusted_length = length;\n    if (0xb3 < (int)length) {\n      adjusted_length = 0xb4;\n    }\n    length = FUN_0008145c(adjusted_length & ~((int)adjusted_length >> 0x1f),0,0xb4,(0x88 - (char)byte1) * 4,\n                           (600 - (char)byte2) * 4,length);\n  }\n  if (*data < 0x3c) {\n    adjusted_length = (0x88 - (char)byte1) * 4;\n    if (((int)(length + (0x88 - (char)byte1) * -4) < 0 == check_overflow(length,adjusted_length)) &&\n       (adjusted_length = (600 - (char)byte2) * 4, (int)length <= (int)adjusted_length)) {\n      adjusted_length = length;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*data * 8) =\n         (elf_relocation_array[6].offset / 1000000) * (adjusted_length - 2) >> 5;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_000806f8",
            "entrypoint": "0x000806f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_relocation_array",
                "FUN_000806f8": "process_data_000806f8",
                "SBORROW4": "check_overflow",
                "param_1": "data",
                "param_1[1]": "byte1",
                "param_1[2]": "byte2",
                "param_2": "length",
                "r_offset": "offset",
                "uVar1": "adjusted_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008073a": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008073a",
            "entrypoint": "0x0008073a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080748": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080748",
            "entrypoint": "0x00080748",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008074a": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008074a",
            "entrypoint": "0x0008074a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008074c": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008074c",
            "entrypoint": "0x0008074c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080774": {
            "additional_data": {
                "DAT_e000ed23": {
                    "1": "constant_value"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array"
                },
                "FUN_00080774": {
                    "1": "initialize_function",
                    "2": "initialize_components",
                    "26": "initialize_system"
                },
                "FUN_00080a30": {
                    "1": "set_values",
                    "4": "configure_module",
                    "5": "configure_peripheral",
                    "9": "configure_device"
                },
                "FUN_00080aa8": {
                    "1": "execute_process",
                    "2": "enable_interrupt",
                    "3": "set_timer",
                    "4": "set_flag",
                    "6": "set_mode"
                },
                "FUN_00080b98": {
                    "1": "initialize_elf_rel_data",
                    "2": "perform_initialization",
                    "4": "initialize_elf"
                },
                "FUN_00080c98": {
                    "1": "load_configuration",
                    "2": "configure_memory",
                    "3": "initialize_memory"
                },
                "FUN_00080d30": {
                    "1": "update_data",
                    "2": "erase_memory",
                    "9": "clear_memory"
                },
                "FUN_00080d3e": {
                    "1": "configure_memory_partition",
                    "3": "initialize_memory",
                    "9": "copy_memory"
                },
                "FUN_00080d62": {
                    "1": "cleanup_data",
                    "3": "enable_interrupts"
                },
                "FUN_00080d6a": {
                    "1": "shutdown_system",
                    "2": "disable_interrupts"
                },
                "FUN_00081014": {
                    "1": "configure_peripheral",
                    "2": "initialize_value",
                    "3": "process_data",
                    "5": "perform_operation"
                },
                "FUN_00081778": {
                    "1": "initialize",
                    "2": "configure_modules",
                    "4": "initialize_registers"
                },
                "_DAT_400e0ea0": {
                    "1": "variable3"
                },
                "_DAT_400e10a0": {
                    "1": "constant2"
                },
                "_DAT_400e12a0": {
                    "1": "constant3"
                },
                "_DAT_400e14a0": {
                    "1": "constant4"
                },
                "_DAT_e000e010": {
                    "1": "variable2"
                },
                "_DAT_e000e014": {
                    "1": "relocated_offset"
                },
                "_DAT_e000e018": {
                    "1": "initialized_data"
                },
                "iVar1": {
                    "1": "i",
                    "4": "index"
                },
                "iVar2": {
                    "4": "next_counter",
                    "5": "next_index"
                },
                "param_1": {
                    "1": "input"
                },
                "param_2": {
                    "1": "index"
                },
                "param_3": {
                    "1": "value"
                },
                "param_4": {
                    "1": "size"
                }
            },
            "called": [
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080c98",
                "FUN_00080b98",
                "FUN_00080a30",
                "FUN_00080d30",
                "FUN_00080aa8",
                "FUN_00080d6a",
                "FUN_00080d62"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\n\n\nvoid initialize_system_00080774(void)\n\n{\n  int counter;\n  int next_index;\n  \n  FUN_00080b98();\n  _DAT_e000e014 = array[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081778();\n  counter = 0;\n  do {\n    next_index = counter + 1;\n    FUN_00081014(counter,0);\n    counter = next_index;\n  } while (next_index != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080a30(0x400e0e00,1,0x300,0);\n  FUN_00081014(0,1);\n  FUN_00080a30(0x400e0e00,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,0x3000,0);\n  FUN_00080a30(0x400e1400,2,0x30,0);\n  FUN_00080a30(0x400e1000,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,3,0);\n  FUN_00080a30(0x400e1000,1,0xc000,0);\n  FUN_00080aa8(0x25);\n  FUN_00080c98(0x400c0000,array[6].r_offset,20000000,0xc);\n  FUN_00080d3e(0x400c0000,0,0x300000,1);\n  FUN_00080d30(0x400c0000,0,0);\n  FUN_00080d6a(0x400c0000,0xffffffff);\n  FUN_00080d62(0x400c0000);\n  return;\n}\n\n",
            "current_name": "initialize_system_00080774",
            "entrypoint": "0x00080774",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "FUN_00080774": "initialize_system_00080774",
                "iVar1": "counter",
                "iVar2": "next_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008089c": {
            "additional_data": {
                "&DAT_20070ad8": {
                    "1": "component7"
                },
                "&DAT_20070b60": {
                    "1": "config_param4"
                },
                "&DAT_20070be8": {
                    "1": "component3"
                },
                "&DAT_20070c0c": {
                    "1": "address1"
                },
                "&DAT_20070c94": {
                    "1": "component10"
                },
                "&DAT_20070cbc": {
                    "1": "component11"
                },
                "&DAT_20070ce4": {
                    "1": "component12"
                },
                "&DAT_20070d0c": {
                    "1": "component8"
                },
                "&DAT_20070d94": {
                    "1": "component9"
                },
                "&DAT_20070e6c": {
                    "1": "component4"
                },
                "&DAT_20070ef4": {
                    "1": "component5"
                },
                "&DAT_20070f7c": {
                    "1": "sub_component_param11"
                },
                "0x11": {
                    "1": "sub_component_param2"
                },
                "0x12": {
                    "1": "param_f"
                },
                "0x14": {
                    "1": "param_h"
                },
                "0x40098000": {
                    "1": "param_c"
                },
                "0x4009c000": {
                    "1": "param_e"
                },
                "0x400a4000": {
                    "1": "value7"
                },
                "0x400e0800": {
                    "1": "value1"
                },
                "8": {
                    "1": "param_b"
                },
                "DAT_20070ad8": {
                    "1": "data7"
                },
                "DAT_20070b60": {
                    "1": "data_structure2",
                    "2": "data2"
                },
                "DAT_20070be8": {
                    "1": "data_structure3"
                },
                "DAT_20070c0c": {
                    "1": "object1",
                    "2": "data1"
                },
                "DAT_20070c94": {
                    "1": "data10"
                },
                "DAT_20070cbc": {
                    "1": "configuration3"
                },
                "DAT_20070ce4": {
                    "1": "object12"
                },
                "DAT_20070d0c": {
                    "1": "component_data8"
                },
                "DAT_20070d94": {
                    "1": "component_data9"
                },
                "DAT_20070e6c": {
                    "1": "data5"
                },
                "DAT_20070ef4": {
                    "1": "object5"
                },
                "DAT_20070f7c": {
                    "1": "data7"
                },
                "FUN_0008089c": {
                    "1": "initialize_some_components",
                    "19": "initialize_components",
                    "2": "initialize_devices",
                    "3": "initialize_data",
                    "5": "initialize_data_structures"
                },
                "FUN_000811b0": {
                    "1": "set_up_component",
                    "10": "initialize_data",
                    "2": "activate_component",
                    "3": "initialize_pointer",
                    "5": "initialize_component"
                },
                "FUN_00081348": {
                    "1": "configure_data_structure",
                    "10": "configure_component",
                    "2": "configure_device",
                    "5": "configure_data"
                },
                "FUN_00081438": {
                    "1": "initialize_array_with_data",
                    "2": "load_data",
                    "3": "configure_sub_component"
                },
                "param_1": {
                    "1": "component1",
                    "2": "unused_param_1",
                    "6": "param1"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "unused_param2",
                    "3": "address",
                    "6": "arg2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "value2",
                    "10": "param3",
                    "6": "arg3"
                },
                "param_4": {
                    "1": "value2",
                    "5": "param4"
                }
            },
            "called": [
                "FUN_000811b0",
                "FUN_00081348",
                "FUN_00081438"
            ],
            "calling": [],
            "code": "\nvoid initialize_components_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000811b0(&DAT_20070c0c);\n  FUN_000811b0(&DAT_20070b60);\n  FUN_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  FUN_000811b0(&DAT_20070e6c);\n  FUN_000811b0(&DAT_20070ef4);\n  FUN_000811b0(&DAT_20070f7c);\n  FUN_000811b0(&DAT_20070ad8);\n  FUN_000811b0(&DAT_20070d0c);\n  FUN_000811b0(&DAT_20070d94);\n  FUN_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  FUN_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  FUN_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "current_name": "initialize_components_0008089c",
            "entrypoint": "0x0008089c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008089c": "initialize_components_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080970": {
            "additional_data": {
                "&DAT_20070be8": {
                    "1": "configuration1"
                },
                "&DAT_20070c94": {
                    "1": "dependency2"
                },
                "&DAT_20070cbc": {
                    "1": "dependency3"
                },
                "&DAT_20070ce4": {
                    "1": "condition4"
                },
                "DAT_20070be8": {
                    "1": "data_a"
                },
                "DAT_20070c94": {
                    "1": "data_b"
                },
                "DAT_20070cbc": {
                    "1": "data_c"
                },
                "DAT_20070ce4": {
                    "1": "data_d"
                },
                "FUNC_0008073a": {
                    "1": "perform_action_b",
                    "2": "execute_function_b",
                    "3": "execute_function_a"
                },
                "FUNC_00080748": {
                    "1": "perform_action_c",
                    "2": "perform_action_b",
                    "3": "execute_function_b"
                },
                "FUNC_0008074a": {
                    "1": "execute_third_function",
                    "2": "execute_function3",
                    "3": "execute_function_c"
                },
                "FUNC_0008074c": {
                    "1": "execute_sub_function_d",
                    "2": "execute_function4",
                    "3": "perform_action_d",
                    "5": "execute_function_d"
                },
                "FUNC_00081248": {
                    "1": "check_data"
                },
                "FUN_0008073a": {
                    "1": "handle_dependency1"
                },
                "FUN_00080748": {
                    "1": "execute_function_b"
                },
                "FUN_0008074a": {
                    "1": "perform_action_3"
                },
                "FUN_0008074c": {
                    "1": "handle_data_loss"
                },
                "FUN_00080970": {
                    "1": "initialize_data",
                    "2": "check_and_call_functions",
                    "7": "check_data_validity",
                    "9": "check_and_execute_functions"
                },
                "FUN_00081248": {
                    "1": "check_validity",
                    "2": "check_status",
                    "4": "check_condition",
                    "7": "check_data"
                },
                "iVar1": {
                    "1": "return_value",
                    "18": "result"
                },
                "param_1": {
                    "1": "data_pointer"
                }
            },
            "called": [
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748",
                "FUN_0008074c"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid check_and_execute_functions_00080970(void)\n\n{\n  int result;\n  \n  result = FUN_00081248(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = FUN_00081248(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = FUN_00081248(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = FUN_00081248(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_execute_functions_00080970",
            "entrypoint": "0x00080970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080970": "check_and_execute_functions_00080970",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000809be": {
            "additional_data": {
                "FUN_000809be": {
                    "1": "update_data",
                    "10": "update_parameter_value",
                    "14": "update_parameter"
                },
                "param_1": {
                    "1": "registry_key_address",
                    "16": "base_address",
                    "2": "data_ptr",
                    "3": "data_pointer",
                    "4": "object_address"
                },
                "param_2": {
                    "1": "mode",
                    "10": "option",
                    "2": "operation_code",
                    "3": "operation",
                    "8": "operation_type"
                },
                "param_3": {
                    "2": "new_parameter",
                    "22": "new_value",
                    "7": "value"
                },
                "switchD_000809c4_caseD_6": {
                    "1": "default_case_label",
                    "2": "default_case"
                },
                "uVar1": {
                    "1": "temp_value",
                    "25": "updated_value",
                    "3": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30"
            ],
            "code": "\nvoid update_parameter_000809be(int base_address,undefined4 option,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto default_case;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\ndefault_case:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameter_000809be",
            "entrypoint": "0x000809be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000809be": "update_parameter_000809be",
                "param_1": "base_address",
                "param_2": "option",
                "param_3": "new_value",
                "switchD_000809c4_caseD_6": "default_case",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000809e4": {
            "additional_data": {
                "*param_1": {
                    "1": "parameter8"
                },
                "0x11": {
                    "1": "array_index1",
                    "3": "index1"
                },
                "0x18": {
                    "1": "param_index3",
                    "3": "index3"
                },
                "0x19": {
                    "1": "param_index2",
                    "3": "index2"
                },
                "0x20": {
                    "1": "array_index6",
                    "3": "index6"
                },
                "5": {
                    "1": "array_index7",
                    "2": "index7"
                },
                "8": {
                    "1": "param_index4",
                    "3": "index4"
                },
                "9": {
                    "1": "array_index5",
                    "3": "index5"
                },
                "FUN_000809e4": {
                    "1": "update_flags_and_values",
                    "2": "set_flags_and_values",
                    "3": "set_param_values",
                    "4": "update_parameters",
                    "5": "set_values"
                },
                "PTR_FUN_000809e4": {
                    "1": "original_function_pointer"
                },
                "[0x11]": {
                    "1": "param_array[17]"
                },
                "[0x18]": {
                    "1": "param_array[24]"
                },
                "[0x19]": {
                    "1": "param_array[25]"
                },
                "[0x20]": {
                    "1": "param_array[32]"
                },
                "[5]": {
                    "1": "param_array[5]"
                },
                "[8]": {
                    "1": "param_array[8]"
                },
                "[9]": {
                    "1": "param_array[9]"
                },
                "bVar1": {
                    "1": "is_negative_flag_set",
                    "18": "is_negative",
                    "2": "is_flag_negative",
                    "5": "is_flag_set"
                },
                "param_1": {
                    "1": "result_array",
                    "3": "params",
                    "4": "parameters",
                    "5": "output_array",
                    "8": "array"
                },
                "param_1[0x11]": {
                    "1": "result_array[17]",
                    "2": "param_array[17]"
                },
                "param_1[0x18]": {
                    "1": "result_array[24]",
                    "2": "param_array[24]"
                },
                "param_1[0x19]": {
                    "1": "result_array[25]",
                    "2": "param_array[25]"
                },
                "param_1[0x20]": {
                    "1": "param1_0x20",
                    "2": "array[32]"
                },
                "param_1[5]": {
                    "1": "result_array[5]",
                    "2": "array[5]"
                },
                "param_1[8]": {
                    "1": "param_pointer[8]",
                    "2": "array[8]"
                },
                "param_1[9]": {
                    "1": "parameter5",
                    "2": "array[9]"
                },
                "param_2": {
                    "10": "new_value",
                    "19": "value",
                    "2": "param_value"
                },
                "param_3": {
                    "1": "update_flags",
                    "23": "flags"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30"
            ],
            "code": "\nvoid set_values_000809e4(undefined4 *array,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  array[17] = value;\n  if (is_negative) {\n    array[25] = value;\n  }\n  if (!is_negative) {\n    array[24] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    array[8] = value;\n  }\n  if (!is_negative) {\n    array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    array[32] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "current_name": "set_values_000809e4",
            "entrypoint": "0x000809e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "[0x11]": "param_array[17]",
                "[0x18]": "param_array[24]",
                "[0x19]": "param_array[25]",
                "[0x20]": "param_array[32]",
                "[5]": "param_array[5]",
                "[8]": "param_array[8]",
                "[9]": "param_array[9]",
                "bVar1": "is_negative",
                "param_1": "array",
                "param_1[0x11]": "array[17]",
                "param_1[0x18]": "array[24]",
                "param_1[0x19]": "array[25]",
                "param_1[0x20]": "array[32]",
                "param_1[5]": "array[5]",
                "param_1[8]": "array[8]",
                "param_1[9]": "array[9]",
                "param_2": "value",
                "param_3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "additional_data": {
                "*param_1": {
                    "1": "array[0]"
                },
                "0x11": {
                    "1": "array_index1"
                },
                "0x14": {
                    "1": "array_index5"
                },
                "0x15": {
                    "1": "array_index4"
                },
                "0x18": {
                    "1": "array_index2"
                },
                "0x19": {
                    "1": "array_index3"
                },
                "0xc": {
                    "1": "array_index7"
                },
                "0xd": {
                    "1": "array_index6"
                },
                "4": {
                    "1": "array_index8"
                },
                "FUN_00080a0a": {
                    "1": "update_values",
                    "2": "set_values",
                    "4": "update_parameters",
                    "5": "update_param_values",
                    "8": "set_param_values"
                },
                "param_1": {
                    "1": "result",
                    "10": "params",
                    "3": "param_array",
                    "4": "parameters"
                },
                "param_1[0x11]": {
                    "1": "array[17]"
                },
                "param_1[0x14]": {
                    "1": "array[20]"
                },
                "param_1[0x15]": {
                    "1": "array[21]"
                },
                "param_1[0x18]": {
                    "1": "array[24]"
                },
                "param_1[0x19]": {
                    "1": "array[25]"
                },
                "param_1[0xc]": {
                    "1": "array[12]"
                },
                "param_1[0xd]": {
                    "1": "array[13]"
                },
                "param_1[4]": {
                    "1": "array[4]"
                },
                "param_2": {
                    "1": "parameter_value",
                    "13": "value"
                },
                "param_3": {
                    "1": "check_param3",
                    "2": "condition_1",
                    "4": "is_param3_zero",
                    "8": "flag1"
                },
                "param_4": {
                    "1": "is_zero_param2",
                    "2": "condition_2",
                    "4": "is_param4_zero",
                    "8": "flag2"
                },
                "param_5": {
                    "1": "should_update_index3",
                    "2": "condition_3",
                    "4": "condition_c",
                    "8": "condition3"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081014",
                "FUN_00080a30"
            ],
            "code": "\nvoid set_param_values_00080a0a(undefined4 *params,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  array[17] = value;\n  if (condition3 == 0) {\n    array[24] = value;\n  }\n  else {\n    array[25] = value;\n  }\n  if (condition2 == 0) {\n    array[21] = value;\n  }\n  else {\n    array[20] = value;\n  }\n  if (condition1 == 0) {\n    array[13] = value;\n  }\n  else {\n    array[12] = value;\n  }\n  array[4] = value;\n  *params = value;\n  return;\n}\n\n",
            "current_name": "set_param_values_00080a0a",
            "entrypoint": "0x00080a0a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a0a": "set_param_values_00080a0a",
                "param_1": "params",
                "param_1[0x11]": "array[17]",
                "param_1[0x14]": "array[20]",
                "param_1[0x15]": "array[21]",
                "param_1[0x18]": "array[24]",
                "param_1[0x19]": "array[25]",
                "param_1[0xc]": "array[12]",
                "param_1[0xd]": "array[13]",
                "param_1[4]": "array[4]",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a30": {
            "additional_data": {
                "!bVar1": {
                    "1": "is_positive"
                },
                "(param_4 << 0x1d) >> 0x1f": {
                    "1": "is_negative_bit"
                },
                "*(undefined4 *)(param_1 + 0x44)": {
                    "1": "data->field_a"
                },
                "*(undefined4 *)(param_1 + 0x60)": {
                    "1": "default_new_value"
                },
                "*(undefined4 *)(param_1 + 100)": {
                    "1": "data->field_b"
                },
                "0x809e5": {
                    "1": "constant"
                },
                "FUN_000809be": {
                    "1": "update_data",
                    "2": "update_parameter_type",
                    "3": "set_param",
                    "5": "update_value"
                },
                "FUN_000809e4": {
                    "1": "update_parameter_helper2",
                    "2": "process_option3",
                    "5": "handle_type3",
                    "6": "process_type3"
                },
                "FUN_00080a0a": {
                    "1": "process_type_four_or_five",
                    "2": "handle_type4_and5",
                    "3": "process_type4_or5"
                },
                "FUN_00080a30": {
                    "1": "update_parameters",
                    "2": "update_parameter_value",
                    "3": "update_data",
                    "5": "update_param_values"
                },
                "PTR_FUN_000809be": {
                    "1": "update_parameter"
                },
                "PTR_FUN_000809e4": {
                    "1": "set_flags"
                },
                "PTR_FUN_00080a0a": {
                    "1": "process_data"
                },
                "PTR_fun_000809be": {
                    "1": "update_value_case1or2"
                },
                "PTR_fun_000809e4": {
                    "1": "update_value_case3"
                },
                "PTR_fun_00080a0a": {
                    "1": "update_value_case4or5"
                },
                "bVar1": {
                    "1": "is_flag_set",
                    "24": "is_negative",
                    "3": "is_negative_flag"
                },
                "case 1": {
                    "1": "case_type1"
                },
                "case 2": {
                    "1": "case_type2"
                },
                "case 3": {
                    "1": "case_type3"
                },
                "case 4": {
                    "1": "case_type4"
                },
                "case 5": {
                    "1": "case_type5"
                },
                "param_1": {
                    "1": "context",
                    "2": "object",
                    "3": "data_ptr",
                    "8": "data"
                },
                "param_1 + 0x44": {
                    "1": "data_ptr1"
                },
                "param_1 + 0x60": {
                    "1": "context.parameter3"
                },
                "param_1 + 100": {
                    "1": "device_register2"
                },
                "param_2": {
                    "1": "mode",
                    "2": "operation_type",
                    "4": "param_type",
                    "8": "option",
                    "9": "type"
                },
                "param_2 == 5": {
                    "3": "is_type5"
                },
                "param_3": {
                    "1": "value2",
                    "10": "new_value",
                    "17": "value"
                },
                "param_4": {
                    "1": "is_negative_bit",
                    "13": "flag",
                    "4": "bitmask",
                    "9": "flags"
                },
                "param_4 & 1": {
                    "1": "flag_bit"
                },
                "param_4 << 0x1d": {
                    "1": "shifted_flag"
                },
                "param_5": {
                    "1": "value4",
                    "2": "bit_mask"
                }
            },
            "called": [
                "FUN_00080a0a",
                "FUN_000809e4",
                "FUN_000809be"
            ],
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "code": "\nundefined4 update_parameter_00080a30(int data,int type,undefined4 value,uint flag)\n\n{\n  bool is_negative;\n  \n  switch(type) {\n  case 1:\n  case 2:\n    FUN_000809be(data,type,value);\n    is_negative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(data + 0x44) = value;\n    if (is_negative) {\n      *(undefined4 *)(data + 100) = value;\n    }\n    if (is_positive) {\n      *(undefined4 *)(data + 0x60) = value;\n    }\n    break;\n  case 3:\n    FUN_000809e4(data,value,flag,0x809e5,data);\n    break;\n  case 4:\n  case 5:\n    FUN_00080a0a(data,value,type == 5,(flag << 0x1d) >> 0x1f,flag & 1,type,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_parameter_00080a30",
            "entrypoint": "0x00080a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "!bVar1": "is_positive",
                "FUN_00080a30": "update_parameter_00080a30",
                "bVar1": "is_negative",
                "param_1": "data",
                "param_2": "type",
                "param_3": "value",
                "param_4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a94": {
            "additional_data": {
                "DAT_": {
                    "1": ""
                },
                "FUN_00080a94": {
                    "1": "check_bitwise_and",
                    "2": "check_bitwise_condition",
                    "3": "check_bitwise_conditions",
                    "4": "check_permissions"
                },
                "PTR_": {
                    "1": ""
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_ptr",
                    "3": "data_address",
                    "4": "input_value",
                    "5": "base_address"
                },
                "param_2": {
                    "1": "input_2",
                    "10": "mask",
                    "2": "flags",
                    "3": "bit_mask",
                    "4": "bitmask"
                },
                "uVar1": {
                    "31": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081014"
            ],
            "code": "\nuint check_permissions_00080a94(int base_address,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(base_address + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(base_address + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "check_permissions_00080a94",
            "entrypoint": "0x00080a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a94": "check_permissions_00080a94",
                "param_1": "base_address",
                "param_2": "mask",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "additional_data": {
                "FUN_00080aa8": {
                    "1": "check_bit_and_set_value",
                    "14": "check_and_set_bit",
                    "2": "update_bitmask",
                    "3": "check_bit_and_set",
                    "5": "check_and_update_bit"
                },
                "param_1": {
                    "1": "index",
                    "2": "input_value",
                    "5": "bit_index",
                    "6": "value",
                    "8": "bit_position"
                },
                "uVar1": {
                    "1": "bit",
                    "28": "bit_mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_000803fc",
                "FUN_00080f0c",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "code": "\n\n\nundefined4 check_and_set_bit_00080aa8(uint input)\n\n{\n  uint bit_mask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bit_mask = 1 << (input & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (input - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_set_bit_00080aa8",
            "entrypoint": "0x00080aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080aa8": "check_and_set_bit_00080aa8",
                "param_1": "input",
                "uVar1": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "additional_data": {
                "FUM_000816f8": {
                    "1": "handle_error"
                },
                "FUN_00080b2c": {
                    "1": "initialize_channel_configuration",
                    "15": "configure_tc_channel",
                    "6": "configure_channel"
                },
                "FUN_000816f8": {
                    "1": "handle_error",
                    "2": "log_error"
                },
                "iVar1": {
                    "1": "index",
                    "2": "channel_index",
                    "20": "offset",
                    "3": "index_offset",
                    "4": "channel_offset"
                },
                "iVar2": {
                    "1": "channel_addr",
                    "11": "address",
                    "2": "channel_offset",
                    "3": "channel_ptr",
                    "6": "channel_address"
                },
                "param_1": {
                    "1": "configuration",
                    "2": "config_param1",
                    "20": "param1"
                },
                "param_2": {
                    "1": "arg2",
                    "17": "param2",
                    "2": "config_param2",
                    "4": "num_channels"
                },
                "param_3": {
                    "1": "config_param3",
                    "2": "error_string",
                    "7": "param3",
                    "8": "error_message",
                    "9": "channel_name"
                },
                "param_4": {
                    "1": "error_param4"
                },
                "uVar3": {
                    "1": "channel_config",
                    "2": "config_value",
                    "23": "combined_params"
                },
                "uVar3 >> 0x20": {
                    "1": "param_high"
                }
            },
            "called": [
                "FUN_000816f8"
            ],
            "calling": [
                "FUN_000803fc"
            ],
            "code": "\nvoid configure_tc_channel_00080b2c(undefined4 param1,uint param2,char *channel_name)\n\n{\n  int offset;\n  int address;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(param2,param1);\n  if (2 < param2) {\n    channel_name = \"TC_Configure\";\n    combined_params = FUN_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combined_params >> 0x20) * 0x40;\n  address = (int)combined_params + offset;\n  *(undefined4 *)((int)combined_params + offset) = 2;\n  *(undefined4 *)(address + 0x28) = 0xffffffff;\n  *(char **)(address + 4) = channel_name;\n  return;\n}\n\n",
            "current_name": "configure_tc_channel_00080b2c",
            "entrypoint": "0x00080b2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "iVar1": "offset",
                "iVar2": "address",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "channel_name",
                "uVar3": "combined_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b90": {
            "additional_data": {
                "0x14": {
                    "2": "value_offset"
                },
                "0x40": {
                    "1": "offset_per_index"
                },
                "FUN_00080b90": {
                    "1": "store_value_at_offset",
                    "2": "store_value_at_index",
                    "3": "update_parameter_value",
                    "5": "set_value_at_offset",
                    "7": "set_param_value"
                },
                "param_1": {
                    "1": "array_address",
                    "2": "memory_address",
                    "23": "base_address",
                    "4": "array"
                },
                "param_2": {
                    "1": "offset_value",
                    "22": "index",
                    "8": "offset"
                },
                "param_3": {
                    "1": "data_value",
                    "10": "new_value",
                    "19": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_000803fc"
            ],
            "code": "\nvoid set_param_value_00080b90(int base_address,int index,undefined4 value)\n\n{\n  *(undefined4 *)(base_address + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_00080b90",
            "entrypoint": "0x00080b90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b98": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "array_data",
                    "2": "rel_array",
                    "3": "elf_relocation_array",
                    "8": "relocation_array"
                },
                "Elf32_Rel_ARRAY_200700000[6].r_offset": {
                    "1": "set_offset"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "1": "elf_rel_offset"
                },
                "F\n: <original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "FUN_00080b98": {
                    "1": "initialize_data",
                    "25": "initialize_memory"
                },
                "_DAT_400e0620": {
                    "1": "memory_offset",
                    "2": "data_register",
                    "3": "memory_value",
                    "5": "memory_address",
                    "7": "shifted_value"
                },
                "_DAT_400e0628": {
                    "1": "status_register",
                    "2": "data1"
                },
                "_DAT_400e0630": {
                    "1": "counter_register",
                    "2": "data2"
                },
                "_DAT_400e0660": {
                    "1": "control_value2"
                },
                "_DAT_400e0668": {
                    "1": "limit",
                    "2": "loop_counter2",
                    "4": "loop_counter"
                },
                "_DAT_400e0668_2": {
                    "1": "loop_value2"
                },
                "_DAT_400e0a00": {
                    "1": "register_a",
                    "2": "base_address1"
                },
                "_DAT_400e0c00": {
                    "1": "memory_location2",
                    "2": "memory_block2"
                },
                "_FUN_00080b98": {
                    "1": "initialize_memory"
                },
                "r_offset": {
                    "1": "relative_offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\n\n\nvoid initialize_memory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elf_rel_offset = 84000000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00080b98",
            "entrypoint": "0x00080b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "elf_rel_offset",
                "FUN_00080b98": "initialize_memory_00080b98",
                "r_offset": "relative_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080c98": {
            "additional_data": {
                "*param_1": {
                    "1": "result[0]"
                },
                "FUN_00080c98": {
                    "1": "calculate_result",
                    "20": "calculate_threshold"
                },
                "local_58": {
                    "1": "section_thresholds",
                    "12": "thresholds",
                    "2": "threshold_table",
                    "6": "threshold_array",
                    "9": "threshold_values"
                },
                "local_58[0]": {
                    "1": "threshold[0]"
                },
                "local_58[10]": {
                    "1": "thresholds[10]"
                },
                "local_58[11]": {
                    "1": "threshold[11]"
                },
                "local_58[12]": {
                    "1": "threshold[12]"
                },
                "local_58[13]": {
                    "1": "threshold[13]"
                },
                "local_58[14]": {
                    "1": "threshold[14]"
                },
                "local_58[15]": {
                    "1": "threshold[15]"
                },
                "local_58[1]": {
                    "1": "thresholds[1]"
                },
                "local_58[2]": {
                    "1": "threshold[2]"
                },
                "local_58[3]": {
                    "1": "thresholds[3]"
                },
                "local_58[4]": {
                    "1": "thresholds[4]"
                },
                "local_58[5]": {
                    "1": "threshold[5]"
                },
                "local_58[6]": {
                    "1": "threshold[6]"
                },
                "local_58[7]": {
                    "1": "thresholds[7]"
                },
                "local_58[8]": {
                    "1": "thresholds[8]"
                },
                "local_58[9]": {
                    "1": "thresholds[9]"
                },
                "param_1": {
                    "1": "memory_offset",
                    "2": "result_array",
                    "7": "output"
                },
                "param_1[0x41]": {
                    "1": "result[65]"
                },
                "param_1[0x45]": {
                    "1": "result[69]"
                },
                "param_1[0x48]": {
                    "1": "result[72]"
                },
                "param_1[1]": {
                    "1": "result[1]"
                },
                "param_2": {
                    "1": "length",
                    "2": "data_size",
                    "3": "size",
                    "5": "total_size",
                    "6": "input_value",
                    "9": "input_size"
                },
                "param_3": {
                    "1": "chunk_size",
                    "2": "element_size",
                    "3": "factor",
                    "4": "block_size",
                    "5": "multiplier"
                },
                "param_4": {
                    "1": "time_delay",
                    "2": "factor",
                    "3": "factor2",
                    "4": "divisor",
                    "6": "multiplier"
                },
                "uVar1": {
                    "1": "num_of_units",
                    "10": "quotient",
                    "2": "num_iterations",
                    "4": "divisor"
                },
                "uVar2": {
                    "1": "array_index",
                    "21": "index",
                    "4": "i"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nundefined4 calculate_threshold_00080c98(undefined4 *output_array,uint input_size,int multiplier,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output_array = 1;\n  result[1] = 0;\n  result[72] = 0x202;\n  result[65] = 0;\n  result[69] = 0;\n  quotient = input_size / (uint)(multiplier * 2);\n  if (input_size == multiplier * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      result[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_threshold_00080c98",
            "entrypoint": "0x00080c98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "local_58": "thresholds",
                "local_58[0]": "thresholds[0]",
                "local_58[10]": "thresholds[10]",
                "local_58[11]": "thresholds[11]",
                "local_58[12]": "thresholds[12]",
                "local_58[13]": "thresholds[13]",
                "local_58[14]": "thresholds[14]",
                "local_58[15]": "thresholds[15]",
                "local_58[1]": "thresholds[1]",
                "local_58[2]": "thresholds[2]",
                "local_58[3]": "thresholds[3]",
                "local_58[4]": "thresholds[4]",
                "local_58[5]": "thresholds[5]",
                "local_58[6]": "thresholds[6]",
                "local_58[7]": "thresholds[7]",
                "local_58[8]": "thresholds[8]",
                "local_58[9]": "thresholds[9]",
                "param_1": "output_array",
                "param_1[0x41]": "result[65]",
                "param_1[0x45]": "result[69]",
                "param_1[0x48]": "result[72]",
                "param_1[1]": "result[1]",
                "param_2": "input_size",
                "param_3": "multiplier",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d30": {
            "additional_data": {
                "(param_1 + 4)": {
                    "1": "ptr_after4_bytes"
                },
                "(param_3 & 1)": {
                    "1": "bit_mask",
                    "2": "flag_bit"
                },
                "(param_3 & 1) << 7": {
                    "1": "bit_mask",
                    "2": "shifted_bit"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "current_param_value",
                    "2": "flags",
                    "6": "current_value"
                },
                "*(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "1": "updated_flags"
                },
                "4": {
                    "1": "flags"
                },
                "<original_variable_name_1>": {
                    "1": "config_flags"
                },
                "DAT_": {
                    "2": ""
                },
                "FUN_00080d30": {
                    "1": "update_bitwise_operations",
                    "2": "update_value_with_flag",
                    "3": "set_flag",
                    "5": "update_flags"
                },
                "PTR_": {
                    "2": ""
                },
                "param_1": {
                    "1": "base_pointer",
                    "2": "memory_address",
                    "9": "base_address"
                },
                "param_1 + 4": {
                    "1": "address_to_update"
                },
                "param_2": {
                    "1": "flag1",
                    "2": "new_data",
                    "3": "bit_value",
                    "6": "new_value",
                    "8": "value"
                },
                "param_2 | *(uint *)(param_1 + 4)": {
                    "1": "updated_flag_value"
                },
                "param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7": {
                    "1": "updated_flags",
                    "2": "updated_value"
                },
                "param_3": {
                    "1": "flag2",
                    "10": "flag",
                    "2": "flag_value",
                    "3": "bit_value"
                },
                "param_3 & 1": {
                    "1": "bit_mask",
                    "2": "bit"
                },
                "param_4": {
                    "1": "result"
                },
                "param_5": {
                    "1": "mask"
                },
                "param_6": {
                    "1": "offset"
                },
                "param_7": {
                    "1": "shifted_offset"
                },
                "param_8": {
                    "1": "masked_flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid update_flags_00080d30(int base_address,uint value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "current_name": "update_flags_00080d30",
            "entrypoint": "0x00080d30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d30": "update_flags_00080d30",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "additional_data": {
                "(param_1 + 4)": {
                    "1": "register_value_address"
                },
                "(param_2 & 0xf)": {
                    "1": "bit_value"
                },
                "(param_2 & 0xf) << 0x18": {
                    "1": "masked_value1"
                },
                "(param_4 & 3)": {
                    "1": "extra_bits_value"
                },
                "(param_4 & 3) << 0x1c": {
                    "1": "shifted_value"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "current_value",
                    "2": "register_value"
                },
                "0x18": {
                    "1": "shift1"
                },
                "0x1c": {
                    "1": "shift2"
                },
                "0xf": {
                    "1": "mask1"
                },
                "<DAT_variable>": {
                    "1": "<new_variable_name>"
                },
                "<PTR_variable>": {
                    "1": "<new_variable_name>"
                },
                "FUN_00080d3e": {
                    "1": "update_parameters",
                    "2": "update_values",
                    "3": "update_flags"
                },
                "newValue": {
                    "1": "updated_value"
                },
                "orgValue": {
                    "1": "original_value"
                },
                "param_1": {
                    "1": "data_struct_ptr",
                    "12": "base_address",
                    "2": "memory_address",
                    "7": "register_address"
                },
                "param_1 + 4": {
                    "1": "address_to_modify"
                },
                "param_1+4": {
                    "1": "register_value_address"
                },
                "param_2": {
                    "1": "input_data",
                    "17": "value1",
                    "2": "bit_mask",
                    "3": "bits_to_set"
                },
                "param_2 & 0xf": {
                    "2": "masked_bits_to_set"
                },
                "param_3": {
                    "1": "register_value",
                    "17": "value2",
                    "2": "bits_to_or"
                },
                "param_4": {
                    "1": "extra_bits",
                    "17": "value3",
                    "2": "additional_bits"
                },
                "param_4 & 3": {
                    "1": "masked_additional_bits",
                    "2": "masked_value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid combine_parameters_00080d3e(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "current_name": "combine_parameters_00080d3e",
            "entrypoint": "0x00080d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d3e": "combine_parameters_00080d3e",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d58": {
            "additional_data": {
                "0x14": {
                    "1": "offset"
                },
                "FUN_00080d58": {
                    "1": "set_bit_in_array",
                    "14": "set_bit",
                    "3": "set_bit_at_index",
                    "4": "set_bit_value"
                },
                "param_1": {
                    "1": "array_address",
                    "24": "base_address"
                },
                "param_2": {
                    "1": "position",
                    "19": "bit_position",
                    "3": "bit_number",
                    "7": "bit_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080f0c"
            ],
            "code": "\nvoid set_bit_00080d58(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_00080d58",
            "entrypoint": "0x00080d58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d62": {
            "additional_data": {
                "*(undefined4 *)(param_1 + 0x14)": {
                    "1": "data_offset",
                    "2": "value_to_set"
                },
                "0x14": {
                    "1": "error_offset"
                },
                "0xffff": {
                    "1": "default_value"
                },
                "<original_variable_name_1>": {
                    "1": "value_address"
                },
                "<unnamed_variable>": {
                    "1": "value"
                },
                "FUN_00080d62": {
                    "1": "initialize_with_ffff",
                    "14": "set_default_value",
                    "2": "initialize_data",
                    "3": "set_error_code",
                    "5": "initialize_value"
                },
                "param_1": {
                    "1": "input_address",
                    "11": "base_address",
                    "2": "input_parameter",
                    "3": "data_address",
                    "5": "memory_address"
                },
                "param_1 + 0x14": {
                    "1": "output_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid set_default_value_00080d62(int base_address)\n\n{\n  *(undefined4 *)(base_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "current_name": "set_default_value_00080d62",
            "entrypoint": "0x00080d62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "additional_data": {
                "FUN_00080d6a": {
                    "1": "set_user_data",
                    "13": "set_param_value",
                    "4": "set_parameter",
                    "5": "set_param"
                },
                "param_1": {
                    "1": "parameter_address",
                    "21": "object_address",
                    "5": "base_address"
                },
                "param_1 + 0x28": {
                    "1": "object_property_address"
                },
                "param_2": {
                    "1": "value_to_store",
                    "10": "new_value",
                    "6": "parameter_value",
                    "8": "param_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid set_param_value_00080d6a(int object_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = new_value;\n  return;\n}\n\n",
            "current_name": "set_param_value_00080d6a",
            "entrypoint": "0x00080d6a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "object_address",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e80": {
            "additional_data": {
                "<no_change>": {
                    "1": "<no_change>"
                },
                "<original_variable_name>": {
                    "1": "result"
                },
                "FUN_00080e80": {
                    "1": "initialize_components",
                    "13": "initialize",
                    "3": "get_return_value",
                    "8": "get_default_value"
                },
                "PTR_Parameter_1": {
                    "1": "input"
                },
                "PTR_Parameter_2": {
                    "1": "output"
                },
                "VAR_LocalVariable_1": {
                    "1": "counter"
                },
                "VAR_LocalVariable_2": {
                    "1": "result"
                },
                "return": {
                    "2": "result"
                },
                "return value": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "return_value",
                    "2": "int",
                    "4": "void"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid initialize_00080e80(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_00080e80",
            "entrypoint": "0x00080e80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e80": "initialize_00080e80",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e88": {
            "additional_data": {
                "DAT_20071208": {
                    "1": "current_sum"
                },
                "FUN_00080e88": {
                    "1": "addition_result",
                    "16": "calculate_sum",
                    "3": "add_and_return_previous_value",
                    "6": "calculate_new_value"
                },
                "iVar1": {
                    "1": "stored_value",
                    "2": "original_value",
                    "20": "previous_value",
                    "6": "previous_sum"
                },
                "param_1": {
                    "1": "param",
                    "15": "input_value",
                    "3": "value_to_add",
                    "8": "input"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008236c"
            ],
            "code": "\nint calculate_sum_00080e88(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previous_value = DAT_20071208;\n  DAT_20071208 = input_value + DAT_20071208;\n  return previous_value;\n}\n\n",
            "current_name": "calculate_sum_00080e88",
            "entrypoint": "0x00080e88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "iVar1": "previous_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "additional_data": {
                "0xffffffff": {
                    "1": "default_value"
                },
                "<original_variable_name>": {
                    "1": "error_code"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<parameter_name>": {
                    "1": "<parameter_name>"
                },
                "<variable_name>": {
                    "1": "<variable_name>"
                },
                "FUN_00080eaa": {
                    "1": "set_default_value",
                    "14": "get_error_code",
                    "3": "initialize_return_value",
                    "5": "get_default_value"
                },
                "PTR_00000008": {
                    "1": "error_code"
                },
                "return": {
                    "1": "default_value"
                },
                "undefined4": {
                    "1": "return_value",
                    "2": "uint32",
                    "3": "uint32_t"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint32_t get_error_code_00080eaa(void)\n\n{\n  default_value 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_00080eaa",
            "entrypoint": "0x00080eaa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eaa": "get_error_code_00080eaa",
                "return": "default_value",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "memory_address",
                    "4": "memory_value"
                },
                "0x2000": {
                    "1": "initial_value",
                    "2": "page_size"
                },
                "FUN_00080eb0": {
                    "1": "init_memory",
                    "15": "initialize_memory",
                    "3": "set_memory_page_size",
                    "4": "set_page_size",
                    "5": "set_memory_size"
                },
                "param_1": {
                    "1": "unused_param",
                    "10": "param1",
                    "2": "param_1",
                    "4": "param",
                    "9": "result"
                },
                "param_2": {
                    "1": "memory_offset",
                    "13": "memory_address",
                    "2": "address",
                    "3": "memory",
                    "4": "buffer"
                },
                "param_2 + 4": {
                    "1": "memory_offset",
                    "2": "param2_offset"
                },
                "return": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00084494"
            ],
            "code": "\nundefined4 initialize_memory_00080eb0(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  result 0;\n}\n\n",
            "current_name": "initialize_memory_00080eb0",
            "entrypoint": "0x00080eb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param1",
                "param_2": "memory_address",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eba": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "FUN_00080eba": {
                    "1": "get_result",
                    "12": "get_return_value",
                    "2": "initialize_return_value",
                    "4": "initialize",
                    "5": "get_one"
                },
                "PTR_PARAMETER_1": {
                    "1": "parameter1"
                },
                "PTR_PARAMETER_2": {
                    "1": "parameter2"
                },
                "return": {
                    "1": "status",
                    "5": "result"
                },
                "undefined4": {
                    "2": "uint32_t",
                    "3": "int"
                }
            },
            "called": [],
            "calling": [
                "FUN_000844bc"
            ],
            "code": "\nint get_return_value_00080eba(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_00080eba",
            "entrypoint": "0x00080eba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eba": "get_return_value_00080eba",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "additional_data": {
                "...": {
                    "1": "..."
                },
                "<unnamed_return_variable>": {
                    "1": "result"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_00080ebe": {
                    "1": "calculate_result",
                    "13": "initialize",
                    "2": "get_zero",
                    "3": "get_return_value",
                    "5": "get_default_value"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "return": {
                    "1": "status"
                },
                "return value": {
                    "1": "success"
                },
                "return_value": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "10": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_000844e0"
            ],
            "code": "\nvoid initialize_00080ebe(void)\n\n{\n  status 0;\n}\n\n",
            "current_name": "initialize_00080ebe",
            "entrypoint": "0x00080ebe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ebe": "initialize_00080ebe",
                "return": "status",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "additional_data": {
                "<No parameters>": {
                    "1": ""
                },
                "<No variables>": {
                    "1": ""
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_variable_name_1>": {
                    "1": "result",
                    "3": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_00080ec2": {
                    "1": "calculate_result",
                    "2": "get_zero",
                    "4": "initialize_data",
                    "6": "get_default_value",
                    "9": "initialize"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "3": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00084508"
            ],
            "code": "\nvoid initialize_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "current_name": "initialize_00080ec2",
            "entrypoint": "0x00080ec2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ec2": "initialize_00080ec2",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "additional_data": {
                "FUN_00080ec8": {
                    "1": "parse_bytes",
                    "12": "copy_bytes",
                    "2": "convert_bytes_to_u_int",
                    "6": "process_data"
                },
                "_DAT_400e0814": {
                    "1": "internal_variable_1"
                },
                "_DAT_400e081c": {
                    "1": "internal_variable_2"
                },
                "iVar1": {
                    "1": "current_index",
                    "10": "i",
                    "14": "index"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param",
                    "3": "param_1",
                    "6": "param1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "source_address",
                    "3": "data_ptr",
                    "4": "src",
                    "5": "byte_array"
                },
                "param_3": {
                    "1": "arg3",
                    "2": "num_elements",
                    "3": "data_length",
                    "5": "length",
                    "7": "size",
                    "9": "num_bytes"
                }
            },
            "called": [],
            "calling": [
                "FUN_00084244"
            ],
            "code": "\n\n\nuint copy_bytes_00080ec8(undefined4 param1,int byte_array,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(byte_array + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "current_name": "copy_bytes_00080ec8",
            "entrypoint": "0x00080ec8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "iVar1": "index",
                "param_1": "param1",
                "param_2": "byte_array",
                "param_3": "num_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eec": {
            "additional_data": {
                "FUN_00080eec": {
                    "31": "exit_with_status"
                },
                "FUN_000817c8": {
                    "1": "print_exiting_status",
                    "2": "print_status_message",
                    "4": "print_message",
                    "5": "print_exit_message",
                    "9": "print_exit_status"
                },
                "param_1": {
                    "31": "status"
                },
                "param_2": {
                    "1": "unused_param2",
                    "2": "unused",
                    "3": "unused1"
                },
                "param_3": {
                    "1": "param_2",
                    "2": "arg3",
                    "3": "unused",
                    "4": "unused2",
                    "6": "param3"
                },
                "param_4": {
                    "1": "param_2",
                    "2": "arg4",
                    "4": "unused2",
                    "6": "param4"
                }
            },
            "called": [
                "FUN_000817c8"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nvoid exit_with_status_00080eec(undefined4 status,undefined4 unused1,undefined4 param3,undefined4 param4)\n\n{\n  FUN_000817c8(\"Exiting with status %d.\\n\",status,param3,param4,param4);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "exit_with_status_00080eec",
            "entrypoint": "0x00080eec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "unused1",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080efc": {
            "called": [],
            "calling": [
                "FUN_000841e4"
            ],
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080efc",
            "entrypoint": "0x00080efc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080efe": {
            "additional_data": {
                "0xffffffff": {
                    "1": "error_code"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_00080efe": {
                    "1": "return_default_value",
                    "2": "set_return_value_to_negative_one",
                    "3": "initialize_return_value",
                    "4": "get_return_value",
                    "6": "get_negative_one",
                    "8": "get_error_code"
                },
                "PTR_": {
                    "1": "pointer"
                },
                "getNegativeOne": {
                    "1": "get_negative_one"
                },
                "return": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "unsigned_int",
                    "3": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "code": "\nint get_error_code_00080efe(void)\n\n{\n  result 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_00080efe",
            "entrypoint": "0x00080efe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f08": {
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_000815ec"
            ],
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080f08",
            "entrypoint": "0x00080f08",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080f0c": {
            "additional_data": {
                "&DAT_00084b44": {
                    "1": "device_cleanup_action"
                },
                "&DAT_00084b48": {
                    "1": "device_cleanup_value"
                },
                "&DAT_00084b4c": {
                    "1": "data12"
                },
                "&DAT_00084b50": {
                    "1": "device_flags"
                },
                "&DAT_00084b54": {
                    "1": "data16"
                },
                "&DAT_00084b5d": {
                    "1": "data3"
                },
                "&DAT_20070e1c": {
                    "1": "device_status"
                },
                "&DAT_20070e1c[param_1]": {
                    "1": "device_status[param_1]"
                },
                "(_DAT_400e0618 & uVar2)": {
                    "1": "register_value"
                },
                "(_DAT_400e0708 & uVar2)": {
                    "1": "register_value"
                },
                "DAT_00084b44": {
                    "1": "data5"
                },
                "DAT_00084b48": {
                    "1": "data6"
                },
                "DAT_00084b4c": {
                    "1": "data4"
                },
                "DAT_00084b50": {
                    "1": "data1"
                },
                "DAT_00084b54": {
                    "1": "data8"
                },
                "DAT_00084b5d": {
                    "1": "data3"
                },
                "DAT_20070e1c": {
                    "1": "data7"
                },
                "DAT_400e0614": {
                    "1": "register2"
                },
                "DAT_400e0618": {
                    "1": "register1"
                },
                "DAT_400e0704": {
                    "1": "register4"
                },
                "DAT_400e0708": {
                    "1": "register3"
                },
                "FUN_00080a30": {
                    "1": "execute_operation",
                    "3": "perform_operation"
                },
                "FUN_00080aa8": {
                    "1": "cleanup_device",
                    "2": "perform_action"
                },
                "FUN_00080d58": {
                    "1": "initialize_value"
                },
                "FUN_00080f0c": {
                    "1": "handle_parameter",
                    "4": "process_function"
                },
                "LAB_00080f68": {
                    "1": "cleanup_branch_label"
                },
                "_DAT_400e0614": {
                    "1": "register_value"
                },
                "_DAT_400e0618": {
                    "1": "data9"
                },
                "_DAT_400e0704": {
                    "1": "data12"
                },
                "_DAT_400e0708": {
                    "1": "data11"
                },
                "bVar5": {
                    "1": "extracted_value1",
                    "2": "temp_var4",
                    "3": "condition1",
                    "4": "lower_bits",
                    "7": "lower_nibble"
                },
                "bVar6": {
                    "1": "all_bits",
                    "2": "temp_byte",
                    "3": "condition2"
                },
                "iVar1": {
                    "1": "output_var1",
                    "25": "result",
                    "3": "return_value"
                },
                "iVar7": {
                    "1": "address_index",
                    "2": "temp4",
                    "6": "index",
                    "9": "temp_var1"
                },
                "iVar8": {
                    "1": "var2",
                    "10": "temp_var2",
                    "2": "temp2",
                    "4": "value"
                },
                "param_1": {
                    "1": "input_value1",
                    "14": "input_param",
                    "2": "input_value",
                    "3": "input_param1",
                    "4": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "mode",
                    "3": "operation",
                    "4": "input2",
                    "5": "mode_param"
                },
                "uVar2": {
                    "1": "value2",
                    "2": "value",
                    "3": "temp1",
                    "5": "temp_var1",
                    "6": "temp_var3"
                },
                "uVar3": {
                    "1": "flag2",
                    "2": "status",
                    "3": "temp2",
                    "5": "temp_var4"
                },
                "uVar4": {
                    "1": "flag_result",
                    "2": "temp_var4",
                    "3": "temp3",
                    "5": "temp_var5",
                    "6": "temp_var3"
                }
            },
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "code": "\n\n\nint process_function_00080f0c(int input_param,int mode_param)\n\n{\n  int result;\n  uint temp_var3;\n  undefined4 temp_var2;\n  uint temp_var3;\n  byte lower_nibble;\n  byte condition2;\n  int temp_var1;\n  int temp_var2;\n  \n  result = input_param;\n  if ((&DAT_00084b50)[input_param * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[input_param] & 0xf) == 4) {\n      result = FUN_00080d58(0x400c0000,(&DAT_00084b5d)[input_param * 0x1c]);\n    }\n    condition2 = (&DAT_20070e1c)[input_param];\n    lower_nibble = condition2 & 0xf;\n    if ((lower_nibble < 3) && (condition2 != 0)) {\n      if (lower_nibble == 2) {\n        if (mode_param == 0) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 1) {\n        if (mode_param == 2) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 3) {\n        if (mode_param == 1) {\n          return result;\n        }\n        goto cleanup_branch_label;\n      }\n    }\n    if (mode_param != 1) {\ncleanup_branch_label:\n      if (mode_param == 0) {\n        result = input_param * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        condition2 = (&DAT_20070e1c)[input_param] & 0xf0 | 2;\n      }\n      else {\n        if (mode_param != 2) {\n          return result;\n        }\n        result = input_param * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        condition2 = (&DAT_20070e1c)[input_param] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[input_param] = condition2;\n      return result;\n    }\n    temp_var1 = input_param * 0x1c;\n    temp_var2 = *(int *)(&DAT_00084b44 + temp_var1);\n    if (condition2 >> 4 == 0) {\n      temp_var2 = 4;\n    }\n    else {\n      temp_var2 = 5;\n    }\n    result = FUN_00080a30(temp_var2,temp_var2,*(undefined4 *)(&DAT_00084b48 + temp_var1),\n                         *(undefined4 *)(&DAT_00084b54 + temp_var1));\n    (&DAT_20070e1c)[input_param] = (&DAT_20070e1c)[input_param] & 0xf0 | 3;\n    if (*(int *)(temp_var2 + 0x18) == -1) {\n      temp_var3 = *(uint *)(&DAT_00084b4c + temp_var1);\n      if (0x2c < temp_var3) {\n        return 1;\n      }\n      if (temp_var3 < 0x20) {\n        temp_var3 = 1 << (temp_var3 & 0xff);\n        temp_var3 = _DAT_400e0618 & temp_var3;\n        if (temp_var3 == temp_var3) {\n          _DAT_400e0614 = temp_var3;\n        }\n      }\n      else {\n        temp_var3 = 1 << (temp_var3 - 0x20 & 0xff);\n        temp_var3 = _DAT_400e0708 & temp_var3;\n        if (temp_var3 == temp_var3) {\n          _DAT_400e0704 = temp_var3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "process_function_00080f0c",
            "entrypoint": "0x00080f0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080f0c": "process_function_00080f0c",
                "LAB_00080f68": "cleanup_branch_label",
                "bVar5": "lower_nibble",
                "bVar6": "condition2",
                "iVar1": "result",
                "iVar7": "temp_var1",
                "iVar8": "temp_var2",
                "param_1": "input_param",
                "param_2": "mode_param",
                "uVar2": "temp_var3",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081014": {
            "additional_data": {
                "&DAT_00084b50": {
                    "1": "array1"
                },
                "&DAT_20070e1c": {
                    "1": "array2"
                },
                "&DAT_20070e1c[param_1]": {
                    "1": "array2_value"
                },
                "*(int *)(&DAT_00084b44 + param_1 * 0x1c)": {
                    "1": "var3"
                },
                "*(undefined4 *)(&DAT_00084b48 + param_1 * 0x1c)": {
                    "1": "var4"
                },
                "*(undefined4 *)(var3 + 0x60)": {
                    "1": "var6"
                },
                "*(undefined4 *)(var3 + 100)": {
                    "1": "var5"
                },
                "FUN_00080a0a": {
                    "1": "apply_configuration",
                    "2": "update_entry",
                    "3": "update_data",
                    "8": "update_value"
                },
                "FUN_00080a94": {
                    "1": "validate_data",
                    "2": "check_data",
                    "8": "check_value"
                },
                "FUN_00080f0c": {
                    "1": "reverse_entry",
                    "2": "reverse_data",
                    "6": "reverse_bits"
                },
                "FUN_00081014": {
                    "1": "update_device_setting",
                    "2": "update_parameter_value",
                    "3": "update_parameter",
                    "6": "update_param",
                    "9": "update_data"
                },
                "iVar1": {
                    "2": "status",
                    "24": "result",
                    "4": "return_value"
                },
                "iVar3": {
                    "1": "data_address",
                    "13": "ptr",
                    "2": "configuration",
                    "4": "data_pointer",
                    "5": "address"
                },
                "param_1": {
                    "1": "config_index",
                    "27": "index"
                },
                "param_2": {
                    "1": "new_setting",
                    "28": "value"
                },
                "param_3": {
                    "1": "info",
                    "19": "param",
                    "2": "param_value"
                },
                "uVar2": {
                    "1": "updated_value",
                    "14": "data",
                    "2": "value2"
                }
            },
            "called": [
                "FUN_00080a0a",
                "FUN_00080f0c",
                "FUN_00080a94"
            ],
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "code": "\nvoid update_data_00081014(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int ptr;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      FUN_00080f0c(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    ptr = *(int *)(&DAT_00084b44 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = FUN_00080a94(ptr,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(ptr + 100) = data;\n        return;\n      }\n      *(undefined4 *)(ptr + 0x60) = data;\n      return;\n    }\n    FUN_00080a0a(ptr,data,value,0,1);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_00081014",
            "entrypoint": "0x00081014",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081014": "update_data_00081014",
                "iVar1": "result",
                "iVar3": "ptr",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "uVar2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810a6": {
            "additional_data": {
                "(*param_1 + 4)": {
                    "1": "function_with_params"
                },
                "*(code **)(*param_1 + 4)": {
                    "1": "code_pointer"
                },
                "*param_1": {
                    "1": "function"
                },
                "FUN_000810a6": {
                    "1": "execute_subroutine",
                    "12": "execute_function",
                    "2": "execute_function_with_params",
                    "3": "process_data"
                },
                "FUN_00082688": {
                    "1": "get_integer",
                    "2": "calculate_value"
                },
                "code": {
                    "1": "function_pointer"
                },
                "param_1": {
                    "1": "binary_pointer",
                    "11": "function_pointer",
                    "2": "data_pointer",
                    "3": "function_array"
                },
                "param_2": {
                    "1": "array_length",
                    "2": "length",
                    "3": "param_value",
                    "4": "input_value",
                    "6": "size"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "param_a",
                    "5": "param3",
                    "8": "arg1"
                },
                "param_4": {
                    "1": "arg3",
                    "2": "var2",
                    "5": "param4",
                    "8": "arg2"
                },
                "uVar1": {
                    "19": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_00082688"
            ],
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810e8"
            ],
            "code": "\nvoid execute_function_000810a6(int *function_pointer,int size,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 result;\n  \n  if (size != 0) {\n    result = FUN_00082688(size);\n    (**(function_pointer **)(*function_pointer + 4))(function_pointer,size,result,*(function_pointer **)(*function_pointer + 4),arg2);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_000810a6",
            "entrypoint": "0x000810a6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810a6": "execute_function_000810a6",
                "code": "function_pointer",
                "param_1": "function_pointer",
                "param_2": "size",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810c4": {
            "additional_data": {
                "FUN_000810a6": {
                    "1": "perform_operation",
                    "2": "perform_initial_setup",
                    "4": "perform_initialization",
                    "5": "call_sub_function"
                },
                "FUN_000810c4": {
                    "1": "run_main_function",
                    "10": "execute_initialization",
                    "2": "execute_initial_setup",
                    "3": "execute_initialization_process"
                },
                "param_1": {
                    "1": "unused_parameter",
                    "2": "input_array",
                    "4": "data_pointer",
                    "5": "array",
                    "6": "array_pointer"
                },
                "param_2": {
                    "1": "data_length",
                    "12": "size",
                    "4": "array_size",
                    "5": "array_length"
                },
                "param_3": {
                    "1": "argument1",
                    "2": "param_a",
                    "3": "value1",
                    "7": "param3"
                },
                "param_4": {
                    "1": "constant2",
                    "2": "arg2",
                    "3": "value2",
                    "7": "param4"
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nvoid execute_initialization_000810c4(void)\n\n{\n  FUN_000810a6();\n  return;\n}\n\n",
            "current_name": "execute_initialization_000810c4",
            "entrypoint": "0x000810c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810c4": "execute_initialization_000810c4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810cc": {
            "additional_data": {
                "*(code **)*param_1": {
                    "1": "callback"
                },
                "*(code **)param_1": {
                    "1": "code_to_execute"
                },
                "**(code **)*param_1": {
                    "1": "func_to_execute"
                },
                "*param_1": {
                    "1": "function"
                },
                "FUN_000810cc": {
                    "1": "execute_code_from_pointer",
                    "20": "execute_function",
                    "8": "execute_code"
                },
                "param_1": {
                    "1": "callback_function",
                    "21": "function_pointer",
                    "6": "code_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008113a"
            ],
            "code": "\nvoid execute_function_000810cc(undefined4 *function_pointer)\n\n{\n  (**(code **)*function_pointer)();\n  return;\n}\n\n",
            "current_name": "execute_function_000810cc",
            "entrypoint": "0x000810cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810d8": {
            "additional_data": {
                "FIND_AND_EXECUTE": {
                    "1": "find_and_execute"
                },
                "FUN_000810a6": {
                    "1": "update_config_values",
                    "8": "process_data"
                },
                "FUN_000810d8": {
                    "1": "perform_operation",
                    "12": "initialize_data",
                    "2": "initialize_function",
                    "4": "process_data"
                },
                "param_1": {
                    "1": "widget_pointer",
                    "2": "array",
                    "3": "array_pointer",
                    "4": "data_ptr",
                    "6": "data_pointer"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "data_size",
                    "3": "value",
                    "4": "size",
                    "6": "param2"
                },
                "param_3": {
                    "1": "param",
                    "12": "param3",
                    "2": "value1",
                    "4": "param_a",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "end",
                    "12": "param4",
                    "2": "value2",
                    "4": "param_b",
                    "5": "param_4"
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_0008117a",
                "FUN_000810e8"
            ],
            "code": "\nvoid initialize_data_000810d8(undefined4 data_pointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  FUN_000810a6(data_pointer,&DAT_00085635,param3,param4,param4);\n  return;\n}\n\n",
            "current_name": "initialize_data_000810d8",
            "entrypoint": "0x000810d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810d8": "initialize_data_000810d8",
                "param_1": "data_pointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810e8": {
            "additional_data": {
                "FUN_000810a6": {
                    "1": "calculate_value1"
                },
                "FUN_000810d8": {
                    "1": "calculate_value2"
                },
                "FUN_000810e8": {
                    "1": "sum_of_functions",
                    "19": "calculate_sum",
                    "2": "sum_of_function_results"
                },
                "iVar1": {
                    "1": "first_result",
                    "30": "result1"
                },
                "iVar2": {
                    "1": "second_result",
                    "30": "result2"
                },
                "param_1": {
                    "1": "param",
                    "16": "input",
                    "2": "input_param",
                    "7": "input_value"
                }
            },
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_sum_000810e8(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_000810a6();\n  result2 = FUN_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "current_name": "calculate_sum_000810e8",
            "entrypoint": "0x000810e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "iVar1": "result1",
                "iVar2": "result2",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810fc": {
            "additional_data": {
                "FUN_000810fc": {
                    "1": "convert_number_base",
                    "13": "convert_to_base",
                    "2": "convert_number_to_string",
                    "3": "convert_decimal_to_base_n",
                    "5": "convert_number_to_base"
                },
                "cVar4": {
                    "1": "encoded_char",
                    "2": "char_value",
                    "4": "converted_digit",
                    "5": "converted_char",
                    "9": "digit"
                },
                "local_15": {
                    "1": "encoded_number",
                    "14": "converted_number",
                    "2": "converted_num"
                },
                "param_1": {
                    "1": "base_number",
                    "10": "output_array",
                    "2": "result",
                    "5": "output",
                    "9": "output_buffer"
                },
                "param_2": {
                    "1": "number_to_convert",
                    "15": "number",
                    "5": "decimal_number",
                    "6": "input_number"
                },
                "param_3": {
                    "1": "base_number",
                    "30": "base"
                },
                "pcVar1": {
                    "1": "output_position",
                    "10": "current_char",
                    "2": "buffer_ptr",
                    "3": "result",
                    "4": "current_digit"
                },
                "pcVar3": {
                    "1": "current_output_pointer",
                    "2": "next_char",
                    "3": "current_position",
                    "4": "previous_digit",
                    "5": "previous_char"
                },
                "uVar2": {
                    "1": "dividend",
                    "25": "quotient"
                },
                "uVar5": {
                    "27": "remainder"
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_0008113a"
            ],
            "code": "\nvoid convert_to_base_000810fc(undefined4 output_array,uint number,uint base)\n\n{\n  char *current_char;\n  uint quotient;\n  char *previous_char;\n  char digit;\n  uint remainder;\n  char converted_number [5];\n  \n  converted_number[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  current_char = converted_number;\n  do {\n    previous_char = current_char;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *previous_char = digit;\n    number = quotient;\n    current_char = previous_char + -1;\n  } while (quotient != 0);\n  FUN_000810a6(output_array,previous_char);\n  return;\n}\n\n",
            "current_name": "convert_to_base_000810fc",
            "entrypoint": "0x000810fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810fc": "convert_to_base_000810fc",
                "cVar4": "digit",
                "local_15": "converted_number",
                "param_1": "output_array",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "current_char",
                "pcVar3": "previous_char",
                "uVar2": "quotient",
                "uVar5": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008113a": {
            "additional_data": {
                "FUN_000810cc": {
                    "1": "append_character",
                    "2": "print_char"
                },
                "FUN_000810fc": {
                    "1": "output_integer",
                    "2": "convert_number_to_base"
                },
                "FUN_0008113a": {
                    "1": "reverse_and_format_number",
                    "2": "process_number",
                    "3": "format_number",
                    "4": "convert_number_to_string"
                },
                "iVar1": {
                    "2": "return_value",
                    "28": "result"
                },
                "iVar2": {
                    "1": "neg_result",
                    "2": "negative_value",
                    "5": "negative_result"
                },
                "param_1": {
                    "1": "format_function_ptr",
                    "2": "data_ptr",
                    "4": "array",
                    "6": "output_buffer"
                },
                "param_2": {
                    "1": "value1",
                    "10": "value",
                    "13": "number",
                    "3": "input_number"
                },
                "param_3": {
                    "1": "value2",
                    "25": "base",
                    "4": "radix"
                },
                "param_4": {
                    "1": "param",
                    "12": "param_4",
                    "2": "flags"
                }
            },
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "code": "\nint process_data_0008113a(undefined4 *output_buffer,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative;\n  \n  if (base == 0) {\n    result = (**(code **)*output_buffer)(output_buffer,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = FUN_000810cc(output_buffer,0x2d);\n      negative = FUN_000810fc(output_buffer,-number,10);\n      return negative + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(output_buffer,number,base,param_4);\n  return result;\n}\n\n",
            "current_name": "process_data_0008113a",
            "entrypoint": "0x0008113a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008113a": "process_data_0008113a",
                "iVar1": "result",
                "iVar2": "negative",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "base"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008117a": {
            "additional_data": {
                "FUN_000810d8": {
                    "1": "calculate_first_value"
                },
                "FUN_0008113a": {
                    "1": "calculate_second_value"
                },
                "FUN_0008117a": {
                    "1": "sum_of_functions",
                    "2": "sum_of_function_results",
                    "21": "calculate_sum",
                    "3": "add_values"
                },
                "iVar1": {
                    "1": "value1",
                    "29": "result1"
                },
                "iVar2": {
                    "1": "value2",
                    "29": "result2"
                },
                "param_1": {
                    "1": "function_parameter",
                    "16": "input",
                    "2": "input_param",
                    "9": "input_value"
                }
            },
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_sum_0008117a(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_0008113a();\n  result2 = FUN_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "current_name": "calculate_sum_0008117a",
            "entrypoint": "0x0008117a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "iVar1": "result1",
                "iVar2": "result2",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081190": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "relocation_info_array",
                    "5": "relocation_table",
                    "7": "rel_array",
                    "9": "relocation_array"
                },
                "Elf32_Rel_ARRAY_20070000[0].r_offset": {
                    "1": "rel_offset"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_info": {
                    "1": "rel_info"
                },
                "FUN_00081190": {
                    "1": "execute_if_relocation_info_is_minus_one",
                    "3": "execute_if_r_info_is_zero",
                    "4": "execute_function_if_condition_met"
                },
                "code": {
                    "1": "callback"
                },
                "r_info": {
                    "1": "r_info",
                    "10": "info",
                    "17": "relocation_info"
                },
                "r_offset": {
                    "1": "entry_offset",
                    "12": "offset",
                    "15": "relocation_offset"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_function_if_condition_met_00081190(void)\n\n{\n  if ((rel_info != 0xffffffff) &&\n     (rel_info = rel_info - 1,\n     rel_info == 0)) {\n    (*(callback *)((int)&rel_offset + 1))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_if_condition_met_00081190",
            "entrypoint": "0x00081190",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[0].r_offset": "rel_offset",
                "Elf32_Rel_ARRAY_20070000[6].r_info": "rel_info",
                "FUN_00081190": "execute_function_if_condition_met_00081190",
                "code": "callback",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811b0": {
            "additional_data": {
                "*(undefined4 *)(param_1 + 0x80)": {
                    "1": "set_pointer_value"
                },
                "*(undefined4 *)(param_1 + 0x84)": {
                    "1": "data_pointer[offset2]"
                },
                "0x80": {
                    "1": "offset"
                },
                "0x84": {
                    "1": "offset2"
                },
                "DAT_": {
                    "1": "data_"
                },
                "FUN_000811b0": {
                    "1": "reset_memory_and_return",
                    "14": "initialize_memory",
                    "2": "initialize_param1",
                    "3": "initialize_data",
                    "5": "initialize_buffer"
                },
                "FUN_00081f00": {
                    "1": "clear_buffer_contents",
                    "2": "set_default_value",
                    "4": "initialize_memory"
                },
                "PTR_": {
                    "1": "pointer_"
                },
                "param_1": {
                    "1": "function_parameter",
                    "2": "param",
                    "3": "memory_pointer",
                    "5": "buffer",
                    "7": "memory_address"
                },
                "param_2": {
                    "1": "start_offset",
                    "2": "param",
                    "5": "value",
                    "6": "param2"
                },
                "param_3": {
                    "1": "value2",
                    "19": "size",
                    "2": "block_size",
                    "6": "param3"
                },
                "undefined4": {
                    "1": "data_type"
                }
            },
            "called": [
                "FUN_00081f00"
            ],
            "calling": [
                "FUN_0008089c"
            ],
            "code": "\nint initialize_memory_000811b0(int memory_address)\n\n{\n  FUN_00081f00(memory_address,0,0x80);\n  *(data_type *)(memory_address + 0x80) = 0;\n  *(data_type *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "current_name": "initialize_memory_000811b0",
            "entrypoint": "0x000811b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memory_address",
                "undefined4": "data_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811ca": {
            "additional_data": {
                "FUN_000811ca": {
                    "1": "update_buffer_data",
                    "17": "update_buffer",
                    "2": "update_pointer_value",
                    "3": "update_and_store_value",
                    "5": "update_data"
                },
                "param_1": {
                    "1": "input_data",
                    "12": "buffer",
                    "2": "data_address",
                    "4": "buffer_address"
                },
                "param_2": {
                    "1": "new_element",
                    "17": "new_value",
                    "4": "new_data",
                    "5": "value"
                },
                "uVar1": {
                    "1": "updated_value",
                    "5": "updated_index",
                    "6": "current_index",
                    "7": "next_index",
                    "8": "new_index"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_buffer_000811ca(int buffer,undefined new_value)\n\n{\n  uint new_index;\n  \n  new_index = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (new_index != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = new_value;\n    *(uint *)(buffer + 0x80) = new_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_buffer_000811ca",
            "entrypoint": "0x000811ca",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer",
                "param_2": "new_value",
                "uVar1": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811e8": {
            "additional_data": {
                "FUN_000811e8": {
                    "1": "calculate_result",
                    "8": "process_data"
                },
                "code": {
                    "1": "function_pointer"
                },
                "iVar1": {
                    "1": "return_value",
                    "22": "result",
                    "3": "random_value",
                    "5": "thunk_result"
                },
                "param_1": {
                    "1": "arguments",
                    "10": "input_array",
                    "3": "data",
                    "5": "data_array"
                },
                "thunk_FUN_000816d8": {
                    "1": "get_thunk_result",
                    "3": "get_next_value",
                    "4": "get_random_number",
                    "9": "get_random_value"
                }
            },
            "called": [
                "thunk_FUN_000816d8"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nint process_data_000811e8(int *array)\n\n{\n  int result;\n  \n  result = thunk_FUN_000816d8();\n  array[3] = result;\n  do {\n    result = (**(function_pointer **)(*array + 0xc))(array);\n    if (-1 < result) {\n      return result;\n    }\n    result = thunk_FUN_000816d8();\n  } while ((uint)(result - array[3]) < (uint)array[2]);\n  return -1;\n}\n\n",
            "current_name": "process_data_000811e8",
            "entrypoint": "0x000811e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811e8": "process_data_000811e8",
                "code": "function_pointer",
                "iVar1": "result",
                "param_1": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081214": {
            "additional_data": {
                "&DAT_00085637": {
                    "1": "data_array"
                },
                "DAT_00085637": {
                    "1": "data_array"
                },
                "FUN_000811e8": {
                    "1": "get_data_function",
                    "11": "get_next_value",
                    "2": "get_next_result",
                    "4": "get_value"
                },
                "FUN_00081214": {
                    "1": "handle_data_processing",
                    "19": "process_data",
                    "2": "reverse_and_process"
                },
                "FUN_000814f6": {
                    "1": "find_target",
                    "15": "initialize_data",
                    "2": "get_next_value"
                },
                "FUN_0008159e": {
                    "1": "send_value",
                    "14": "process_value",
                    "4": "send_data"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "data_ptr",
                    "3": "input1",
                    "6": "input_param",
                    "8": "arg1"
                },
                "param_2": {
                    "1": "output_buffer",
                    "3": "input_param2",
                    "4": "output_param",
                    "8": "arg2"
                },
                "param_3": {
                    "1": "target_byte",
                    "25": "target_value",
                    "3": "target"
                },
                "uVar1": {
                    "1": "processing_result",
                    "21": "result",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nvoid process_data_00081214(undefined4 arg1,undefined4 arg2,uint target_value)\n\n{\n  uint result;\n  \n  FUN_000814f6(arg1,&DAT_00085637);\n  while ((result = FUN_000811e8(arg2), -1 < (int)result && (result != target_value))) {\n    FUN_0008159e(arg1,result & 0xff);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00081214",
            "entrypoint": "0x00081214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "target_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081248": {
            "additional_data": {
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": {
                    "1": "address_sum",
                    "5": "first_value"
                },
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": {
                    "1": "address_subtract",
                    "5": "second_value"
                },
                "*(int *)(basePointer + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(basePointer + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(first_pointer + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(first_pointer + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "base_pointer",
                    "2": "pointer1"
                },
                "*(int *)(param_1 + 0x10) + 0x80": {
                    "1": "first_data_address"
                },
                "*(int *)(param_1 + 0x10) + 0x84": {
                    "1": "second_data_address"
                },
                "*(int *)(pointer1 + 0x80)": {
                    "1": "memory_value1"
                },
                "*(int *)(pointer1 + 0x84)": {
                    "1": "value2"
                },
                "*(int *)(ptr1 + 0x80)": {
                    "1": "ptr2"
                },
                "*(int *)(ptr1 + 0x84)": {
                    "1": "value2"
                },
                "*(int *)(ptrOffset + 0x80)": {
                    "1": "first_value"
                },
                "*(int *)(ptrOffset + 0x84)": {
                    "1": "second_value"
                },
                "*(int *)(ptr_1 + 0x80)": {
                    "1": "ptr_2"
                },
                "*(int *)(ptr_1 + 0x84)": {
                    "1": "ptr_3"
                },
                "0x10": {
                    "1": "offset_1",
                    "3": "offset"
                },
                "0x7f": {
                    "1": "bitwise_and_value"
                },
                "0x80": {
                    "1": "first_value_offset",
                    "2": "first_offset"
                },
                "0x84": {
                    "1": "offset_3",
                    "2": "second_offset"
                },
                "DAT_1": {
                    "1": "dat1"
                },
                "DAT_2": {
                    "1": "dat2"
                },
                "FUN_00081248": {
                    "1": "calculate_checksum",
                    "2": "calculate_offset",
                    "23": "calculate_difference",
                    "3": "calculate_difference_and_mask"
                },
                "PTR_1": {
                    "1": "base_address"
                },
                "PTR_2": {
                    "1": "ptr2"
                },
                "input": {
                    "1": "input"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_param",
                    "21": "input_value",
                    "4": "input"
                },
                "param_1 + 0x10": {
                    "1": "data_pointer"
                },
                "param_2": {
                    "1": "offset"
                },
                "param_3": {
                    "1": "constant"
                },
                "result": {
                    "1": "difference"
                },
                "var_1": {
                    "1": "base_address"
                },
                "var_2": {
                    "1": "ptr2"
                },
                "var_3": {
                    "1": "offset_2"
                },
                "var_4": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "code": "\nuint calculate_difference_00081248(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "current_name": "calculate_difference_00081248",
            "entrypoint": "0x00081248",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081276": {
            "additional_data": {
                "FUN_00081276": {
                    "1": "extract_byte_from_memory",
                    "2": "get_value_from_buffer",
                    "20": "extract_byte_from_buffer",
                    "3": "get_byte_from_buffer"
                },
                "bVar1": {
                    "1": "next_byte",
                    "23": "extracted_byte",
                    "5": "byte_value"
                },
                "iVar2": {
                    "1": "memory_segment_address",
                    "12": "buffer_ptr",
                    "2": "buffer_address",
                    "4": "buffer_pointer"
                },
                "param_1": {
                    "1": "memory_address",
                    "12": "buffer",
                    "2": "buffer_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nuint extract_byte_from_buffer_00081276(int buffer_address)\n\n{\n  byte extracted_byte;\n  int buffer_ptr;\n  \n  buffer_ptr = *(int *)(buffer_address + 0x10);\n  if (*(int *)(buffer_ptr + 0x80) != *(int *)(buffer_ptr + 0x84)) {\n    extracted_byte = *(byte *)(buffer_ptr + *(int *)(buffer_ptr + 0x84));\n    *(uint *)(buffer_ptr + 0x84) = *(int *)(buffer_ptr + 0x84) + 1U & 0x7f;\n    return (uint)extracted_byte;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "extract_byte_from_buffer_00081276",
            "entrypoint": "0x00081276",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "bVar1": "extracted_byte",
                "iVar2": "buffer_ptr",
                "param_1": "buffer_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000812b8": {
            "additional_data": {
                "FUN_000812b8": {
                    "1": "write_data_to_memory",
                    "19": "update_data",
                    "2": "update_parameter",
                    "4": "update_value"
                },
                "iVar1": {
                    "1": "offset",
                    "2": "data_value",
                    "3": "data_ptr",
                    "4": "data_offset"
                },
                "param_1": {
                    "1": "array_index",
                    "2": "input_param",
                    "3": "memory_address",
                    "6": "data_ptr",
                    "8": "data_pointer"
                },
                "param_2": {
                    "1": "data",
                    "2": "value",
                    "24": "new_value",
                    "4": "new_data"
                },
                "uVar2": {
                    "1": "current_index",
                    "10": "new_index",
                    "12": "updated_value",
                    "2": "value2"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nundefined4 update_data_000812b8(int data_pointer,undefined4 new_value)\n\n{\n  int data_offset;\n  uint updated_value;\n  \n  data_offset = *(int *)(data_pointer + 0x14);\n  if ((*(int *)(*(int *)(data_pointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(data_offset + 0x84) == *(int *)(data_offset + 0x80))) {\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    updated_value = *(int *)(data_offset + 0x80) + 1U & 0x8000007f;\n    if ((int)updated_value < 0) {\n      updated_value = (updated_value - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data_offset + 0x84) == updated_value);\n    *(char *)(data_offset + *(int *)(data_offset + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_pointer + 0x14) + 0x80) = updated_value;\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_000812b8",
            "entrypoint": "0x000812b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "iVar1": "data_offset",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081348": {
            "additional_data": {
                "&PTR_FUN_000812b8_1_00085650": {
                    "1": "function_pointer"
                },
                "*(undefined *)(inputPointer + 7)": {
                    "1": "initialized_value3"
                },
                "*inputPointer": {
                    "1": "function_pointer"
                },
                "1000": {
                    "1": "default_parameter_value"
                },
                "FUN_00081348": {
                    "1": "initialize_function_parameters",
                    "14": "initialize_parameters",
                    "6": "initialize_params",
                    "8": "initialize_function"
                },
                "PTR_FUN_000812b8_1_00085650": {
                    "2": "function_pointer"
                },
                "inputPointer[1]": {
                    "1": "initialized_value1"
                },
                "inputPointer[2]": {
                    "1": "initialized_value2"
                },
                "inputPointer[4]": {
                    "1": "value5"
                },
                "inputPointer[5]": {
                    "1": "value6"
                },
                "inputPointer[6]": {
                    "1": "value2"
                },
                "inputPointer[8]": {
                    "1": "value4"
                },
                "param_1": {
                    "1": "input_pointer",
                    "4": "param_array",
                    "5": "function_params",
                    "7": "parameters"
                },
                "param_1[1]": {
                    "1": "function_params[1]",
                    "2": "parameters[1]"
                },
                "param_1[2]": {
                    "1": "function_params[2]",
                    "2": "parameters[2]"
                },
                "param_1[4]": {
                    "1": "function_params[4]",
                    "2": "parameters[4]"
                },
                "param_1[5]": {
                    "1": "function_params[5]",
                    "2": "parameters[5]"
                },
                "param_1[6]": {
                    "1": "function_params[6]",
                    "2": "parameters[6]"
                },
                "param_1[7]": {
                    "1": "function_params[7]"
                },
                "param_1[8]": {
                    "1": "function_params[8]",
                    "2": "parameters[8]"
                },
                "param_2": {
                    "1": "input_parameter1",
                    "2": "value",
                    "3": "input_value1",
                    "4": "input_value",
                    "7": "value2"
                },
                "param_3": {
                    "1": "input_parameter2",
                    "2": "input_byte",
                    "3": "value2",
                    "4": "flag",
                    "6": "param3",
                    "7": "value3"
                },
                "param_4": {
                    "1": "parameter_a",
                    "3": "input_value3",
                    "5": "param4_value",
                    "7": "value4",
                    "8": "param4"
                },
                "param_5": {
                    "1": "value_d",
                    "3": "value4",
                    "5": "param5_value",
                    "7": "value5",
                    "8": "param5"
                },
                "param_6": {
                    "1": "value4",
                    "3": "value5",
                    "5": "param6_value",
                    "7": "value6",
                    "8": "param6"
                },
                "undefined4": {
                    "1": "u_int32"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "code": "\nvoid initialize_parameters_00081348(u_int32 *output_array,u_int32 value2,undefined value3,u_int32 param4,\n                 u_int32 param5,u_int32 param6)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value2;\n  *output_array = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(output_array + 7) = value3;\n  parameters[4] = param5;\n  parameters[8] = param4;\n  parameters[5] = param6;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_00081348",
            "entrypoint": "0x00081348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "output_array",
                "param_1[1]": "parameters[1]",
                "param_1[2]": "parameters[2]",
                "param_1[4]": "parameters[4]",
                "param_1[5]": "parameters[5]",
                "param_1[6]": "parameters[6]",
                "param_1[8]": "parameters[8]",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "undefined4": "u_int32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813dc": {
            "additional_data": {
                "*(byte *)(param_1 + 0x1c)": {
                    "1": "byte_val"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "ptr1"
                },
                "*(int *)(param_1 + 0x14)": {
                    "1": "ptr2"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "address"
                },
                "*(undefined4 **)(param_1 + 0x18)": {
                    "1": "struct_pointer"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "array_relocation",
                    "2": "elf_rel_array",
                    "3": "rel_array"
                },
                "FUN_00080aa8": {
                    "1": "process_parameter",
                    "2": "perform_initialization"
                },
                "FUN_000813dc": {
                    "1": "initialize_variables",
                    "19": "initialize_function",
                    "2": "initialize_module",
                    "4": "initialize_data"
                },
                "iVar1": {
                    "1": "i_var",
                    "2": "offset",
                    "3": "local_var1",
                    "5": "temp_var",
                    "6": "temp_var1",
                    "8": "variable1"
                },
                "initializeFunction": {
                    "1": "initialize_function"
                },
                "param_1": {
                    "1": "param",
                    "10": "param1",
                    "2": "function_pointer",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "arg2",
                    "10": "param2",
                    "2": "param_2",
                    "3": "param_divider"
                },
                "puVar2": {
                    "1": "config_ptr",
                    "2": "ptr_var",
                    "3": "pointer_var",
                    "4": "pointer_var1",
                    "5": "variable2"
                },
                "r_offset": {
                    "1": "offset_value",
                    "2": "offset"
                }
            },
            "called": [
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000801e0"
            ],
            "code": "\nvoid initialize_function_000813dc(int param1,uint param2)\n\n{\n  int variable1;\n  undefined4 *variable2;\n  \n  FUN_00080aa8(*(undefined4 *)(param1 + 0x20));\n  variable2 = *(undefined4 **)(param1 + 0x18);\n  variable2[0x48] = 0x202;\n  *variable2 = 0xac;\n  variable2[1] = 0x800;\n  variable2[8] = rel_array[6].offset / param2 >> 4;\n  variable2[3] = 0xffffffff;\n  variable2[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(param1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(param1 + 0x1c) & 0x1f);\n  variable1 = *(int *)(param1 + 0x10);\n  *(undefined4 *)(variable1 + 0x84) = 0;\n  *(undefined4 *)(variable1 + 0x80) = 0;\n  variable1 = *(int *)(param1 + 0x14);\n  *(undefined4 *)(variable1 + 0x84) = 0;\n  *(undefined4 *)(variable1 + 0x80) = 0;\n  *variable2 = 0x50;\n  return;\n}\n\n",
            "current_name": "initialize_function_000813dc",
            "entrypoint": "0x000813dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000813dc": "initialize_function_000813dc",
                "iVar1": "variable1",
                "param_1": "param1",
                "param_2": "param2",
                "puVar2": "variable2",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081438": {
            "additional_data": {
                "F": {
                    "1": "initialize_function"
                },
                "FUN_00081348": {
                    "1": "perform_operation",
                    "2": "perform_initialization"
                },
                "FUN_00081438": {
                    "1": "set_function_pointer_and_param",
                    "18": "initialize_function",
                    "3": "initialize_data"
                },
                "param_1": {
                    "1": "result_array",
                    "11": "output_pointer",
                    "2": "result_pointer",
                    "7": "output_array"
                },
                "param_2": {
                    "1": "input_data",
                    "19": "input_value",
                    "2": "value",
                    "3": "input_param"
                },
                "param_3": {
                    "1": "unknown_param",
                    "2": "param3"
                },
                "param_4": {
                    "1": "unknown_param2",
                    "2": "additional_value"
                }
            },
            "called": [
                "FUN_00081348"
            ],
            "calling": [
                "FUN_0008089c"
            ],
            "code": "\nundefined4 * initialize_function_00081438(undefined4 *output_pointer,undefined4 input_value)\n\n{\n  FUN_00081348();\n  *output_pointer = &PTR_FUN_000812b8_1_00085680;\n  output_pointer[9] = input_value;\n  return output_pointer;\n}\n\n",
            "current_name": "initialize_function_00081438",
            "entrypoint": "0x00081438",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081438": "initialize_function_00081438",
                "param_1": "output_pointer",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008145c": {
            "additional_data": {
                "FUN_0008145c": {
                    "1": "compute_interpolation",
                    "2": "calculate_interpolation_value",
                    "3": "calculate_result",
                    "4": "calculate_weighted_average",
                    "5": "calculate_new_value",
                    "8": "calculate_interpolation"
                },
                "division_result + param_4": {
                    "1": "final_result"
                },
                "multiply_and_subtract_result / (param_3 - param_2)": {
                    "1": "division_result"
                },
                "param_1": {
                    "1": "current_value",
                    "13": "start_value",
                    "2": "value_1",
                    "3": "value1"
                },
                "param_1 - param_2": {
                    "1": "difference1"
                },
                "param_1 - param_2 * param_5 - param_4": {
                    "1": "multiply_and_subtract_result"
                },
                "param_2": {
                    "1": "current_value",
                    "2": "value2",
                    "3": "second_value",
                    "6": "start_range"
                },
                "param_3": {
                    "1": "next_value",
                    "2": "value_3",
                    "3": "end_point",
                    "6": "end_range"
                },
                "param_3 - param_2": {
                    "1": "difference3"
                },
                "param_4": {
                    "1": "start_interpolated",
                    "2": "value4",
                    "4": "start_range",
                    "5": "start_output"
                },
                "param_5": {
                    "1": "end_value2",
                    "2": "fifth_value",
                    "4": "end_range",
                    "5": "end_output"
                },
                "param_5 - param_4": {
                    "1": "difference2"
                },
                "result": {
                    "1": "calculated_value"
                },
                "value_4": {
                    "1": "offset_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "code": "\nint calculate_interpolation_0008145c(int start_value,int start_range,int end_range,int start_output,int end_output)\n\n{\n  return (uint)((start_value - start_range) * (end_output - start_output)) / (uint)(end_range - start_range) + start_output;\n}\n\n",
            "current_name": "calculate_interpolation_0008145c",
            "entrypoint": "0x0008145c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_0008145c",
                "param_1": "start_value",
                "param_2": "start_range",
                "param_3": "end_range",
                "param_4": "start_output",
                "param_5": "end_output"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081472": {
            "additional_data": {
                "*param_1": {
                    "1": "param"
                },
                "FUN_00081472": {
                    "1": "perform_function",
                    "12": "execute_function",
                    "2": "perform_operation",
                    "5": "process_data"
                },
                "FUN_00081800": {
                    "1": "execute_operation",
                    "2": "reverse_data",
                    "3": "execute_sub_function"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_pointer",
                    "3": "input_param",
                    "4": "input_array",
                    "5": "data"
                }
            },
            "called": [
                "FUN_00081800"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nundefined4 * execute_function_00081472(undefined4 *data)\n\n{\n  FUN_00081800(*data);\n  return data;\n}\n\n",
            "current_name": "execute_function_00081472",
            "entrypoint": "0x00081472",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081472": "execute_function_00081472",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081480": {
            "additional_data": {
                "*param_1": {
                    "1": "param_value"
                },
                "FUN_00081480": {
                    "1": "reset_parameter_values",
                    "2": "reset_values",
                    "3": "reset_param",
                    "4": "reset_params",
                    "5": "reset_variables",
                    "9": "reset_parameters"
                },
                "FUN_00081800": {
                    "1": "call_print",
                    "11": "reset_function",
                    "2": "reset",
                    "3": "perform_reset"
                },
                "param_1": {
                    "1": "memory_array",
                    "2": "variable",
                    "3": "param",
                    "5": "params",
                    "8": "parameters"
                },
                "param_1[1]": {
                    "1": "unused_var1"
                },
                "param_1[2]": {
                    "1": "unused_var2"
                }
            },
            "called": [
                "FUN_00081800"
            ],
            "calling": [
                "FUN_000814d0"
            ],
            "code": "\nvoid reset_parameters_00081480(int *parameters)\n\n{\n  if (*parameters != 0) {\n    FUN_00081800();\n  }\n  *parameters = 0;\n  unused_var2 = 0;\n  unused_var1 = 0;\n  return;\n}\n\n",
            "current_name": "reset_parameters_00081480",
            "entrypoint": "0x00081480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081480": "reset_parameters_00081480",
                "param_1": "parameters",
                "param_1[1]": "unused_var1",
                "param_1[2]": "unused_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081496": {
            "additional_data": {
                "FUN_00081496": {
                    "1": "update_array_value",
                    "2": "reverse_and_update_array",
                    "3": "update_array",
                    "4": "update_and_check_value",
                    "6": "update_param_and_return"
                },
                "iVar1": {
                    "11": "return_value",
                    "20": "result"
                },
                "param_1": {
                    "1": "input_pointer",
                    "10": "array",
                    "2": "ptr",
                    "3": "param_array",
                    "5": "input_array"
                },
                "param_2": {
                    "1": "current_index",
                    "12": "index",
                    "2": "size",
                    "3": "input_value",
                    "4": "value"
                },
                "param_3": {
                    "1": "param_3",
                    "11": "param3",
                    "3": "arg1",
                    "4": "value1",
                    "5": "param_a"
                },
                "param_4": {
                    "1": "var2",
                    "11": "param4",
                    "3": "arg2",
                    "4": "value2",
                    "5": "param_b"
                }
            },
            "called": [
                "FUN_00081f9c"
            ],
            "calling": [
                "FUN_000814ae"
            ],
            "code": "\nint update_param_and_return_00081496(int *array,int index,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  result = FUN_00081f9c(*array,index + 1,param3,param4,param4);\n  if (result != 0) {\n    *array = result;\n    array[1] = index;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "update_param_and_return_00081496",
            "entrypoint": "0x00081496",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081496": "update_param_and_return_00081496",
                "iVar1": "result",
                "param_1": "array",
                "param_2": "index",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814ae": {
            "additional_data": {
                "FUN_00081496": {
                    "1": "check_and_update_array"
                },
                "FUN_000814ae": {
                    "1": "check_and_update_record",
                    "2": "check_and_update_array",
                    "5": "check_and_update_param",
                    "6": "check_and_update_value"
                },
                "iVar1": {
                    "1": "error",
                    "25": "result",
                    "4": "return_value"
                },
                "param_1": {
                    "1": "value_pointer",
                    "2": "value_ptr",
                    "3": "param_array",
                    "4": "input_array",
                    "9": "array"
                },
                "param_2": {
                    "1": "value_threshold",
                    "14": "threshold",
                    "2": "size",
                    "6": "limit"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "param3"
                },
                "param_4": {
                    "1": "param_4",
                    "2": "param4"
                }
            },
            "called": [
                "FUN_00081496"
            ],
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "code": "\nundefined4 check_and_update_value_000814ae(int *array,uint threshold)\n\n{\n  int result;\n  \n  if ((*array == 0) || ((uint)array[1] < threshold)) {\n    result = FUN_00081496(array);\n    if (result == 0) {\n      return 0;\n    }\n    if (array[2] == 0) {\n      *(undefined *)*array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_update_value_000814ae",
            "entrypoint": "0x000814ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814ae": "check_and_update_value_000814ae",
                "iVar1": "result",
                "param_1": "array",
                "param_2": "threshold"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814d0": {
            "additional_data": {
                "FUN_00081480": {
                    "1": "cleanup_params",
                    "2": "reset_parameter",
                    "6": "cleanup_data"
                },
                "FUN_000814ae": {
                    "1": "verify_data",
                    "2": "check_validity",
                    "3": "check_data"
                },
                "FUN_000814d0": {
                    "1": "check_and_execute",
                    "2": "validate_and_process",
                    "6": "validate_and_process_data",
                    "7": "process_data"
                },
                "FUN_000825cc": {
                    "1": "perform_operation",
                    "2": "process_values",
                    "7": "process_data"
                },
                "iVar1": {
                    "1": "update_result",
                    "15": "result"
                },
                "param_1": {
                    "1": "parameters",
                    "10": "data",
                    "2": "input_data",
                    "4": "input_array",
                    "5": "data_array"
                },
                "param_1[2]": {
                    "1": "input_array[2]"
                },
                "param_2": {
                    "1": "param",
                    "2": "size",
                    "4": "param_value",
                    "6": "value",
                    "9": "value1"
                },
                "param_3": {
                    "1": "new_data",
                    "2": "value_2",
                    "3": "value",
                    "6": "new_value",
                    "9": "value2"
                }
            },
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_000814f6"
            ],
            "code": "\nundefined4 * process_data_000814d0(undefined4 *data,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  \n  result = FUN_000814ae(data,value2);\n  if (result == 0) {\n    FUN_00081480(data);\n  }\n  else {\n    input_array[2] = value2;\n    FUN_000825cc(*data,value1);\n  }\n  return data;\n}\n\n",
            "current_name": "process_data_000814d0",
            "entrypoint": "0x000814d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814d0": "process_data_000814d0",
                "iVar1": "result",
                "param_1": "data",
                "param_1[2]": "input_array[2]",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814f6": {
            "additional_data": {
                "FUN_000814d0": {
                    "1": "set_param_values",
                    "2": "copy_parameters",
                    "3": "copy_data",
                    "4": "assign_values"
                },
                "FUN_000814f6": {
                    "1": "initialize_values",
                    "13": "initialize_param_array",
                    "2": "initialize_function",
                    "3": "initialize_param",
                    "5": "initialize_parameters"
                },
                "FUN_00082688": {
                    "1": "get_data",
                    "2": "process_value",
                    "3": "perform_calculation",
                    "5": "calculate_result"
                },
                "FUN_00082688_param_1": {
                    "1": "input"
                },
                "param_1": {
                    "1": "result_array",
                    "12": "param_array",
                    "2": "array_pointer",
                    "3": "array",
                    "4": "output_array"
                },
                "param_2": {
                    "1": "input_param",
                    "13": "input_value",
                    "2": "input_data",
                    "5": "value"
                },
                "param_3": {
                    "1": "input_value_to_copy",
                    "7": "result"
                },
                "uVar1": {
                    "1": "data_result",
                    "13": "result"
                }
            },
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nundefined4 * initialize_param_array_000814f6(undefined4 *param_array,int input_value)\n\n{\n  undefined4 result;\n  \n  *param_array = 0;\n  param_array[1] = 0;\n  param_array[2] = 0;\n  if (input_value != 0) {\n    result = FUN_00082688(input_value);\n    FUN_000814d0(param_array,input_value,result);\n  }\n  return param_array;\n}\n\n",
            "current_name": "initialize_param_array_000814f6",
            "entrypoint": "0x000814f6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814f6": "initialize_param_array_000814f6",
                "param_1": "param_array",
                "param_2": "input_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008151c": {
            "additional_data": {
                "(uint)param_1[1]": {
                    "1": "value1"
                },
                "(uint)param_2[2]": {
                    "1": "value2"
                },
                "*param_1": {
                    "1": "old_param"
                },
                "*param_2": {
                    "1": "new_param"
                },
                "FUN_0008151c": {
                    "1": "copy_data_from_param2_to_param1",
                    "12": "update_parameters",
                    "13": "update_params",
                    "2": "update_param1_with_param2"
                },
                "FUN_00081800": {
                    "1": "handle_invalid_destination",
                    "2": "reset_old_params",
                    "6": "reset_source_params",
                    "7": "reset_params"
                },
                "FUN_000825cc": {
                    "1": "copy_data_from_param2_to_param1",
                    "16": "copy_params",
                    "2": "copy_param2_to_param1"
                },
                "LAB_00081558": {
                    "1": "after_data_copy"
                },
                "param_1": {
                    "1": "target_params",
                    "12": "source_params",
                    "2": "source",
                    "3": "current_params",
                    "4": "old_params"
                },
                "param_1[1]": {
                    "1": "destination_param1"
                },
                "param_1[2]": {
                    "1": "new_param2"
                },
                "param_2": {
                    "1": "destination_data",
                    "15": "new_params",
                    "2": "source",
                    "3": "target_params"
                },
                "param_2[1]": {
                    "1": "source_param1"
                },
                "param_2[2]": {
                    "1": "new_params[2]"
                }
            },
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_00081560"
            ],
            "code": "\nvoid update_params_0008151c(int *source_params,int *new_params)\n\n{\n  if (*source_params != 0) {\n    if ((*new_params != 0) && (value2 <= value1)) {\n      FUN_000825cc();\n      current_params[2] = new_params[2];\n      goto end_label;\n    }\n    FUN_00081800();\n  }\n  *source_params = *new_params;\n  current_params[1] = new_params[1];\n  current_params[2] = new_params[2];\n  *new_params = 0;\n  new_params[1] = 0;\nend_label:\n  new_params[2] = 0;\n  return;\n}\n\n",
            "current_name": "update_params_0008151c",
            "entrypoint": "0x0008151c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(uint)param_1[1]": "value1",
                "(uint)param_2[2]": "value2",
                "FUN_0008151c": "update_params_0008151c",
                "LAB_00081558": "end_label",
                "param_1": "source_params",
                "param_1[1]": "current_params[1]",
                "param_1[2]": "current_params[2]",
                "param_2": "new_params",
                "param_2[1]": "new_params[1]",
                "param_2[2]": "new_params[2]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081560": {
            "additional_data": {
                "*param_1": {
                    "1": "ptr_param_1"
                },
                "*param_2": {
                    "1": "ptr_param_2"
                },
                "FUN_0008151c": {
                    "1": "perform_operation",
                    "2": "handle_parameter_mismatch",
                    "4": "perform_action",
                    "6": "handle_mismatch"
                },
                "FUN_00081560": {
                    "1": "check_parameters_equal",
                    "12": "check_parameters",
                    "2": "check_and_call",
                    "3": "check_parameters_equality",
                    "5": "check_and_call_function"
                },
                "int": {
                    "1": "result"
                },
                "param_1": {
                    "1": "pointer1",
                    "2": "input_param1",
                    "3": "first_param",
                    "6": "input_1",
                    "9": "value1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "2": "expected_value",
                    "3": "second_param",
                    "6": "input_2",
                    "9": "value2"
                }
            },
            "called": [
                "FUN_0008151c"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nresult check_parameters_00081560(result value1,result value2)\n\n{\n  if (value1 != value2) {\n    FUN_0008151c();\n  }\n  return value1;\n}\n\n",
            "current_name": "check_parameters_00081560",
            "entrypoint": "0x00081560",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081560": "check_parameters_00081560",
                "int": "result",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081570": {
            "additional_data": {
                "FUN_000814ae": {
                    "1": "verify_data",
                    "2": "check_validity"
                },
                "FUN_00081570": {
                    "1": "update_parameter_value",
                    "2": "validate_and_update_data",
                    "3": "check_and_update_data",
                    "7": "process_data"
                },
                "FUN_000825cc": {
                    "1": "copy_data",
                    "2": "update_data",
                    "4": "update_values"
                },
                "iVar1": {
                    "2": "return_value",
                    "29": "result"
                },
                "iVar2": {
                    "1": "array_value2",
                    "2": "value2",
                    "4": "array_index",
                    "6": "current_offset"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "parameters",
                    "3": "data_array",
                    "4": "input_array",
                    "9": "array"
                },
                "param_2": {
                    "1": "length",
                    "19": "size",
                    "2": "param2"
                },
                "param_3": {
                    "2": "param3",
                    "29": "offset"
                }
            },
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_0008159e"
            ],
            "code": "\nundefined4 process_data_00081570(int *data,int size,int offset)\n\n{\n  int result;\n  int current_offset;\n  \n  current_offset = data[2];\n  if (size == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    result = FUN_000814ae(data,current_offset + offset);\n    if (result == 0) {\n      return 0;\n    }\n    FUN_000825cc(*data + data[2],size);\n    data[2] = current_offset + offset;\n  }\n  return 1;\n}\n\n",
            "current_name": "process_data_00081570",
            "entrypoint": "0x00081570",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081570": "process_data_00081570",
                "iVar1": "result",
                "iVar2": "current_offset",
                "param_1": "data",
                "param_2": "size",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008159e": {
            "additional_data": {
                "FUN_00081570": {
                    "1": "retrieve_data"
                },
                "FUN_0008159e": {
                    "1": "decompile_and_execute",
                    "2": "extract_and_process_data",
                    "4": "extract_data"
                },
                "local_c": {
                    "1": "decoded_length",
                    "2": "local_variable_c",
                    "4": "local_variable",
                    "5": "buffer"
                },
                "param_1": {
                    "1": "first_parameter",
                    "2": "input_data",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "decoded_data",
                    "11": "size",
                    "2": "input_parameter2"
                },
                "param_3": {
                    "1": "result",
                    "2": "output_pointer",
                    "9": "output_param"
                },
                "uStack_8": {
                    "1": "stack_variable_8",
                    "2": "stack_variable"
                }
            },
            "called": [
                "FUN_00081570"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nvoid extract_data_0008159e(undefined4 input_param,undefined4 size,undefined4 output_param)\n\n{\n  undefined4 buffer;\n  undefined4 result;\n  \n  result = output_param;\n  FUN_00081570(input_param,&buffer,1,0,input_param);\n  return;\n}\n\n",
            "current_name": "extract_data_0008159e",
            "entrypoint": "0x0008159e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008159e": "extract_data_0008159e",
                "local_c": "buffer",
                "param_1": "input_param",
                "param_2": "size",
                "param_3": "output_param",
                "uStack_8": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815b8": {
            "additional_data": {
                "*param_1": {
                    "1": "input_array"
                },
                "*param_2": {
                    "1": "input_pointer"
                },
                "FUN_000815b8": {
                    "1": "check_param_and_return_result",
                    "2": "check_range",
                    "3": "check_parameter",
                    "5": "check_input"
                },
                "iVar2": {
                    "1": "comparison_result",
                    "22": "result"
                },
                "param_1": {
                    "1": "data_array",
                    "2": "data_ptr",
                    "3": "data",
                    "5": "input_array"
                },
                "param_2": {
                    "1": "value",
                    "2": "input",
                    "3": "input_ptr"
                },
                "uVar1": {
                    "1": "result",
                    "2": "length",
                    "3": "array_length",
                    "4": "param_value"
                }
            },
            "called": [
                "FUN_00082390"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint check_input_000815b8(byte **input_array,byte *input_ptr)\n\n{\n  uint param_value;\n  int result;\n  \n  if (input_array[2] == (byte *)0x0) {\n    if (input_ptr == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (input_ptr != (byte *)0x0) {\n      param_value = FUN_00082390(*input_array);\n      goto LAB_000815d4;\n    }\n    input_ptr = *input_array;\n  }\n  param_value = (uint)*input_ptr;\nLAB_000815d4:\n  result = 1 - param_value;\n  if (1 < param_value) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_input_000815b8",
            "entrypoint": "0x000815b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815b8": "check_input_000815b8",
                "iVar2": "result",
                "param_1": "input_array",
                "param_2": "input_ptr",
                "uVar1": "param_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815de": {
            "additional_data": {
                "*param_1": {
                    "1": "input"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "data_array"
                },
                "FUN_000815de": {
                    "1": "parse_string_to_integer",
                    "18": "parse_integer",
                    "5": "parse_number"
                },
                "bVar1": {
                    "1": "info",
                    "2": "info_byte",
                    "3": "byte_value",
                    "5": "flags",
                    "6": "current_byte",
                    "7": "byte1"
                },
                "bVar2": {
                    "1": "has_positive_sign",
                    "17": "is_negative",
                    "5": "negative_flag",
                    "6": "byte2"
                },
                "iVar7": {
                    "1": "info_index",
                    "2": "difference",
                    "3": "offset",
                    "4": "adjusted_value"
                },
                "iVar8": {
                    "1": "parse_state",
                    "3": "flag",
                    "6": "is_valid"
                },
                "param_1": {
                    "1": "buffer",
                    "16": "input",
                    "5": "input_string"
                },
                "pbVar4": {
                    "1": "string_ptr",
                    "3": "current_ptr",
                    "6": "ptr",
                    "8": "current_char",
                    "9": "current_byte"
                },
                "pbVar6": {
                    "1": "current_position",
                    "2": "next_ptr",
                    "5": "current_byte",
                    "7": "next_char",
                    "9": "next_byte"
                },
                "uVar10": {
                    "1": "sign_limit",
                    "12": "min_value",
                    "4": "limit",
                    "7": "max_value"
                },
                "uVar3": {
                    "1": "parsed_value",
                    "21": "result",
                    "4": "parsed_number",
                    "5": "parsed_integer"
                },
                "uVar5": {
                    "1": "character_value",
                    "10": "current_value",
                    "2": "byte_val",
                    "3": "char_value",
                    "7": "byte_value"
                },
                "uVar9": {
                    "1": "max_digit_count",
                    "5": "divisor",
                    "6": "max_divisor",
                    "7": "max_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_integer_000815de(byte **input)\n\n{\n  byte byte1;\n  byte is_negative;\n  uint result;\n  byte *current_byte;\n  uint current_value;\n  byte *next_byte;\n  int adjusted_value;\n  int is_valid;\n  uint max_value;\n  uint min_value;\n  \n  current_byte = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    next_byte = current_byte;\n    current_byte = next_byte + 1;\n    current_value = (uint)*next_byte;\n    byte1 = *(byte *)(data_array[270].r_info + current_value + 1);\n    is_negative = byte1 & 8;\n  } while ((byte1 & 8) != 0);\n  if (current_value == 0x2d) {\n    current_byte = next_byte + 2;\n    current_value = (uint)next_byte[1];\n    is_negative = 1;\n  }\n  else if (current_value == 0x2b) {\n    current_value = (uint)next_byte[1];\n    current_byte = next_byte + 2;\n  }\n  if (is_negative == 0) {\n    min_value = 0x7fffffff;\n  }\n  else {\n    min_value = 0x80000000;\n  }\n  max_value = min_value / 10;\n  is_valid = 0;\n  result = 0;\n  do {\n    byte1 = *(byte *)(data_array[270].r_info + current_value + 1);\n    if ((byte1 & 4) == 0) {\n      if ((byte1 & 3) == 0) {\nLAB_0008277e:\n        if (is_valid == -1) {\n          if (is_negative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)data_array[140].r_offset = 0x22;\n        }\n        else if (is_negative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((byte1 & 3) == 1) {\n        adjusted_value = 0x37;\n      }\n      else {\n        adjusted_value = 0x57;\n      }\n      adjusted_value = current_value - adjusted_value;\n    }\n    else {\n      adjusted_value = current_value - 0x30;\n    }\n    if (9 < adjusted_value) goto LAB_0008277e;\n    if (is_valid != -1) {\n      if ((max_value <= result && result != max_value) || ((result == max_value && ((int)(min_value % 10) < adjusted_value))))\n      {\n        is_valid = -1;\n      }\n      else {\n        result = result * 10 + adjusted_value;\n        is_valid = 1;\n      }\n    }\n    current_value = (uint)*current_byte;\n    current_byte = current_byte + 1;\n  } while( true );\n}\n\n",
            "current_name": "parse_integer_000815de",
            "entrypoint": "0x000815de",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "data_array",
                "FUN_000815de": "parse_integer_000815de",
                "bVar1": "byte1",
                "bVar2": "is_negative",
                "iVar7": "adjusted_value",
                "iVar8": "is_valid",
                "param_1": "input",
                "pbVar4": "current_byte",
                "pbVar6": "next_byte",
                "uVar10": "min_value",
                "uVar3": "result",
                "uVar5": "current_value",
                "uVar9": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815e8": {
            "called": [],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000815e8",
            "entrypoint": "0x000815e8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000815ec": {
            "additional_data": {
                "FUNC_00080f08": {
                    "1": "enable_feature",
                    "13": "set_mode",
                    "3": "configure",
                    "4": "configure_settings"
                },
                "FUNC_000815e8": {
                    "1": "init_components",
                    "2": "initialize",
                    "3": "initialize_components",
                    "5": "setup_environment"
                },
                "FUN_000801e0": {
                    "1": "calculate_result",
                    "2": "initialize_data",
                    "4": "process_data",
                    "7": "initialize_system"
                },
                "FUN_00080250": {
                    "1": "perform_task_1",
                    "2": "update_data",
                    "3": "perform_task1",
                    "4": "perform_action",
                    "5": "process_data",
                    "6": "perform_task_a"
                },
                "FUN_00080774": {
                    "1": "initialize_display",
                    "2": "initialize_resources",
                    "3": "perform_setup"
                },
                "FUN_00080970": {
                    "1": "perform_action_b",
                    "2": "handle_events",
                    "3": "perform_task2",
                    "6": "perform_task_b"
                },
                "FUN_000815ec": {
                    "1": "execute_process",
                    "2": "run_application",
                    "4": "execute_main_loop",
                    "5": "main_loop",
                    "6": "initialize_system"
                },
                "FUN_00081618": {
                    "1": "initialize_subsystems",
                    "2": "initialize_subsystem",
                    "3": "initialize_components",
                    "4": "initialize",
                    "7": "initialize_system"
                }
            },
            "called": [
                "FUN_00080250",
                "FUN_00080970",
                "FUN_000801e0",
                "FUN_000815e8",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_00080774"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid initialize_system_000815ec(void)\n\n{\n  FUN_00081618();\n  FUN_00080774();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  FUN_000801e0();\n  do {\n    FUN_00080250();\n    FUN_00080970();\n  } while( true );\n}\n\n",
            "current_name": "initialize_system_000815ec",
            "entrypoint": "0x000815ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815ec": "initialize_system_000815ec"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081618": {
            "additional_data": {
                "": {
                    "5": ""
                },
                "FUN_00081618": {
                    "1": "set_initial_value",
                    "11": "initialize_data",
                    "12": "initialize_memory"
                },
                "_DAT_400e1a54": {
                    "1": "flag_value",
                    "10": "memory_address",
                    "2": "data_flag",
                    "3": "data_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\n\n\nvoid initialize_memory_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00081618",
            "entrypoint": "0x00081618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081618": "initialize_memory_00081618"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081624": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[6].r_offset": {
                    "2": "constant"
                },
                "FUN_00081624": {
                    "1": "calculate_modified_value",
                    "2": "calculate_adjusted_value",
                    "3": "calculate_offset",
                    "4": "calculate_time_offset",
                    "6": "calculate_time",
                    "7": "calculate_result"
                },
                "FUN_00081684": {
                    "1": "calculate_sub_result",
                    "2": "calculate_offset",
                    "3": "calculate_result",
                    "8": "perform_calculation"
                },
                "FUN_000816984": {
                    "1": "process_calculation"
                },
                "iVar1": {
                    "1": "elapsed_time",
                    "29": "result"
                },
                "param_1": {
                    "1": "ptr",
                    "25": "index"
                },
                "param_2": {
                    "1": "offset",
                    "2": "value1",
                    "23": "flag"
                },
                "param_3": {
                    "1": "val2",
                    "2": "value2",
                    "26": "multiplier"
                },
                "param_4": {
                    "1": "constant",
                    "16": "param",
                    "2": "unknown",
                    "3": "offset"
                },
                "uVar2": {
                    "1": "offset_value",
                    "10": "offset",
                    "14": "value",
                    "2": "initial_value"
                }
            },
            "called": [
                "FUN_00081684"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_result_00081624(int index,int flag,int multiplier,undefined4 param)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = FUN_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((constant / 1000000) * multiplier) / 0x12,param);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)constant / 1000));\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_result_00081624",
            "entrypoint": "0x00081624",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[6].r_offset": "constant",
                "FUN_00081624": "calculate_result_00081624",
                "iVar1": "result",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "param",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081684": {
            "additional_data": {
                "FUN_00081684": {
                    "1": "check_value_presence",
                    "2": "check_and_count",
                    "4": "check_bit_pattern"
                },
                "PARAM_1": {
                    "1": "array"
                },
                "PTR_FUN_00081684": {
                    "1": "check_bits"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "2": "occurrence_count",
                    "3": "count",
                    "4": "result",
                    "5": "index"
                },
                "param_1": {
                    "1": "ptr_array_start",
                    "2": "bit_array",
                    "3": "sequence",
                    "7": "data",
                    "9": "array"
                },
                "param_2": {
                    "10": "bit_mask",
                    "20": "mask"
                },
                "param_3": {
                    "1": "expected_pattern",
                    "2": "check_value",
                    "3": "target",
                    "4": "pattern",
                    "6": "value"
                },
                "param_4": {
                    "1": "num_bits",
                    "2": "iteration_count",
                    "3": "count",
                    "4": "num_iterations",
                    "5": "length",
                    "8": "max_iterations"
                },
                "return": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081624"
            ],
            "code": "\nint check_bit_pattern_00081684(uint *array,uint mask,uint expected_value,int max_iterations)\n\n{\n  int index;\n  \n  do {\n    if ((*array & mask) != expected_value) {\n      do {\n        if ((*array & mask) == expected_value) {\n          index = 0;\n          do {\n            if ((*array & mask) != expected_value) {\n              result index;\n            }\n            index = index + 1;\n          } while (max_iterations != index);\n          result 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      result 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  result 0;\n}\n\n",
            "current_name": "check_bit_pattern_00081684",
            "entrypoint": "0x00081684",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081684": "check_bit_pattern_00081684",
                "iVar1": "index",
                "param_1": "array",
                "param_2": "mask",
                "param_3": "expected_value",
                "param_4": "max_iterations",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816d8": {
            "additional_data": {
                "DAT_2007120c": {
                    "1": "global_variable_value",
                    "2": "global_variable",
                    "6": "global_value"
                },
                "FUN_000816d8": {
                    "1": "get_global_data",
                    "10": "get_global_value",
                    "2": "get_global_data_value",
                    "6": "get_data_value",
                    "8": "get_data"
                },
                "undefined4": {
                    "1": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "code": "\nuint32_t get_global_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "current_name": "get_global_value_000816d8",
            "entrypoint": "0x000816d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816d8": "get_global_value_000816d8",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816ec": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "3": "relocation_array",
                    "5": "rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[48].r_offset": {
                    "1": "base_offset"
                },
                "FUN_000816ec": {
                    "1": "update_parameters",
                    "2": "update_relocation_table",
                    "8": "update_data",
                    "9": "update_relocation_entry"
                },
                "FUN_000817f0": {
                    "2": "allocate_memory"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "unrecovered_jumptable_fn",
                    "2": "jump_table_function",
                    "3": "unrecovered_jump_table",
                    "4": "jump_table_func",
                    "8": "jump_table"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "input1",
                    "3": "value1",
                    "5": "new_address"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "new_param2",
                    "3": "value2",
                    "4": "value",
                    "5": "new_value2"
                },
                "param_3": {
                    "1": "old_value",
                    "2": "new_param3",
                    "3": "offset",
                    "5": "new_value3"
                },
                "pdVar1": {
                    "1": "pointer_array",
                    "11": "relocation_entry",
                    "2": "data_ptr",
                    "3": "rel_array"
                },
                "r_offset": {
                    "2": "offset"
                },
                "uVar2": {
                    "1": "array_index",
                    "21": "index",
                    "6": "entry_index"
                },
                "uVar3": {
                    "1": "bitwise_flag",
                    "2": "bitmask",
                    "23": "bit_mask"
                },
                "uVar3: : bitMask: ,\n: UNRECOVERED_JUMPTABLE_00": {
                    "1": "error_handler"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_relocation_entry_000816ec(dword new_address,dword new_value2,dword new_value3)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  code *jump_table;\n  \n  if (base_offset == 0) {\n    base_offset = 0x20070184;\n  }\n  index = *(uint *)(base_offset + 4);\n  relocation_entry = (dword *)base_offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)FUN_000817f0(400);\n    if (relocation_entry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *relocation_entry = base_offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    base_offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = new_address;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = new_value3;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = new_value2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "update_relocation_entry_000816ec",
            "entrypoint": "0x000816ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "Elf32_Rel_ARRAY_20070000[48].r_offset": "base_offset",
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "param_1": "new_address",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "pdVar1": "relocation_entry",
                "r_offset": "offset",
                "uVar2": "index",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816f8": {
            "additional_data": {
                "FUN_000816f8": {
                    "1": "assertion_failed_handler",
                    "14": "assertion_failed",
                    "2": "print_assertion_failed_message",
                    "3": "handle_assertion_failure",
                    "4": "validate_assertion"
                },
                "param_1": {
                    "1": "context",
                    "15": "file",
                    "2": "assertion",
                    "4": "message",
                    "7": "file_name"
                },
                "param_2": {
                    "11": "line_number",
                    "14": "line",
                    "6": "file"
                },
                "param_3": {
                    "1": "error_message",
                    "2": "function_name",
                    "3": "file_name",
                    "4": "assertion_message",
                    "6": "message",
                    "8": "assertion"
                },
                "param_4": {
                    "1": "function_failed",
                    "14": "function",
                    "4": "line",
                    "9": "function_name"
                },
                "pcVar3": {
                    "1": "pc_var3",
                    "2": "delimiter",
                    "3": "function_name",
                    "4": "extra_info",
                    "7": "additional_info"
                },
                "uVar1": {
                    "1": "assertion_len",
                    "2": "string_offset",
                    "3": "u_var1"
                },
                "uVar2": {
                    "1": "function_name_copy",
                    "3": "u_var2"
                },
                "uVar4": {
                    "1": "u_var_return",
                    "16": "result",
                    "2": "time_stamp",
                    "5": "timestamp"
                }
            },
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "code": "\nvoid assertion_failed_000816f8(undefined4 file,undefined4 line,char *assertion,undefined4 function)\n\n{\n  undefined4 u_var1;\n  undefined4 u_var2;\n  char *additional_info;\n  undefined8 result;\n  \n  u_var1 = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion == (char *)0x0) goto LAB_0008171c;\n  u_var2 = function;\n  additional_info = \", function: \";\n  do {\n    function = file;\n    FUN_00081750(u_var1,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",u_var2,file,line,\n                 additional_info,assertion);\n    result = FUN_000836ec();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    u_var1 = (undefined4)result;\nLAB_0008171c:\n    assertion = \"\";\n    u_var2 = function;\n    additional_info = assertion;\n  } while( true );\n}\n\n",
            "current_name": "assertion_failed_000816f8",
            "entrypoint": "0x000816f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816f8": "assertion_failed_000816f8",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "function",
                "pcVar3": "additional_info",
                "uVar1": "u_var1",
                "uVar2": "u_var2",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081750": {
            "additional_data": {
                "FUN_00081750": {
                    "1": "process_function",
                    "2": "process_relocation_entry",
                    "4": "process_relocation",
                    "6": "execute_relocation"
                },
                "FUN_0008289c": {
                    "1": "perform_relocation"
                },
                "param_1": {
                    "1": "input1",
                    "11": "offset",
                    "2": "arg1",
                    "3": "relocation_offset",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "input_2",
                    "3": "arg2",
                    "4": "output_param",
                    "5": "param_1",
                    "7": "param2"
                },
                "param_3": {
                    "1": "source_param",
                    "2": "arg3",
                    "3": "param3",
                    "5": "param_2"
                },
                "param_4": {
                    "1": "output_buffer",
                    "2": "arg4",
                    "4": "param4",
                    "5": "param_3"
                },
                "uStack_4": {
                    "1": "pointer_value",
                    "2": "param4_copy"
                },
                "uStack_8": {
                    "1": "temp_param_1",
                    "2": "relocation_value"
                }
            },
            "called": [
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_000816f8"
            ],
            "code": "\nvoid execute_relocation_00081750(undefined4 offset,undefined4 param2,undefined4 param_2,undefined4 param_3)\n\n{\n  undefined4 relocation_value;\n  undefined4 param4_copy;\n  \n  relocation_value = param_2;\n  param4_copy = param_3;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,param2,&relocation_value);\n  return;\n}\n\n",
            "current_name": "execute_relocation_00081750",
            "entrypoint": "0x00081750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081750": "execute_relocation_00081750",
                "param_1": "offset",
                "param_2": "param2",
                "param_3": "param_2",
                "param_4": "param_3",
                "uStack_4": "param4_copy",
                "uStack_8": "relocation_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081778": {
            "additional_data": {
                "FUNC_00080118": {
                    "1": "function_a",
                    "4": "sub_function1"
                },
                "FUNC_000836d8": {
                    "1": "sub_function_2",
                    "3": "sub_function2"
                },
                "FUNC_00085844": {
                    "1": "initialize_function",
                    "4": "initialize"
                },
                "FUN_00081778": {
                    "1": "execute_four_sub_functions",
                    "17": "execute_sub_functions",
                    "2": "execute_functions",
                    "4": "execute_subfunctions",
                    "6": "execute_function_set"
                },
                "iVar1": {
                    "1": "index",
                    "11": "counter",
                    "13": "iteration_count",
                    "3": "iteration_counter"
                },
                "ppcVar2": {
                    "1": "function_list",
                    "2": "sub_function_pointer",
                    "3": "function_array",
                    "8": "function_pointer",
                    "9": "function_pointers"
                }
            },
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid execute_sub_functions_00081778(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  FUNC_00085844();\n  function_pointers = (code **)0x8584c;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "current_name": "execute_sub_functions_00081778",
            "entrypoint": "0x00081778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081778": "execute_sub_functions_00081778",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000817c8": {
            "additional_data": {
                "FUN_000817c8": {
                    "1": "process_relocation_entry",
                    "2": "extract_and_call_function",
                    "3": "execute_relocation"
                },
                "FUN_0008289c": {
                    "1": "perform_relocation",
                    "2": "execute_sub_function"
                },
                "param_1": {
                    "1": "param",
                    "2": "offset",
                    "4": "input_param",
                    "5": "param_1",
                    "8": "param1"
                },
                "param_2": {
                    "1": "source_param",
                    "10": "param2",
                    "2": "relocation_offset",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "relocation_value",
                    "10": "param3",
                    "2": "input_param3",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "pointer_value",
                    "10": "param4",
                    "2": "input_param4",
                    "4": "param_4"
                },
                "uStack_4": {
                    "1": "stack_var4",
                    "2": "temp_var_4",
                    "3": "stack4"
                },
                "uStack_8": {
                    "1": "stack_var8",
                    "2": "temp_var_8",
                    "3": "stack8"
                },
                "uStack_c": {
                    "1": "source_param",
                    "2": "temp_var_c",
                    "3": "param2_copy"
                }
            },
            "called": [
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_00080eec"
            ],
            "code": "\nvoid execute_relocation_000817c8(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 stack_var3;\n  \n  stack_var1 = param2;\n  stack_var2 = param3;\n  stack_var3 = param4;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param1,&stack_var1);\n  return;\n}\n\n",
            "current_name": "execute_relocation_000817c8",
            "entrypoint": "0x000817c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000817c8": "execute_relocation_000817c8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_4": "stack_var3",
                "uStack_8": "stack_var2",
                "uStack_c": "stack_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000817f0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array",
                    "2": "relocation_array"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "2": "relocation_offset"
                },
                "FUN_000817f0": {
                    "1": "process_function",
                    "15": "process_relocation",
                    "2": "process_relocation_entry",
                    "3": "process_elf_relocation"
                },
                "FUN_00081810": {
                    "1": "process_rel_entry",
                    "16": "apply_relocation",
                    "3": "process_relocation",
                    "5": "perform_relocation"
                },
                "PARAM_1": {
                    "1": "input_parameter"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "offset",
                    "4": "relocation_array",
                    "6": "data",
                    "7": "param"
                },
                "param_2": {
                    "1": "param",
                    "2": "relocation_offset",
                    "3": "index",
                    "7": "offset"
                },
                "r_offset": {
                    "1": "offset"
                }
            },
            "called": [
                "FUN_00081810"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nvoid process_relocation_000817f0(undefined4 param)\n\n{\n  FUN_00081810(relocation_offset,param);\n  return;\n}\n\n",
            "current_name": "process_relocation_000817f0",
            "entrypoint": "0x000817f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "relocation_offset",
                "FUN_000817f0": "process_relocation_000817f0",
                "param_1": "param",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081800": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf32_rel_array",
                    "2": "relocation_array",
                    "3": "relocation_table"
                },
                "Elf32_Rel_ARRAY_20070000[140].r_offset": {
                    "1": "rel_offset"
                },
                "FUN_00081800": {
                    "1": "perform_relocation",
                    "2": "execute_function",
                    "4": "process_relocation",
                    "8": "execute_relocation"
                },
                "FUN_00083b10": {
                    "1": "execute_operation",
                    "2": "process_relocation_entry",
                    "7": "perform_relocation",
                    "9": "apply_relocation"
                },
                "param_1": {
                    "1": "relocation_entry",
                    "2": "arg",
                    "3": "param",
                    "4": "input_param",
                    "7": "offset"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "data_param",
                    "4": "param",
                    "5": "offset"
                }
            },
            "called": [
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_0008151c",
                "FUN_00081472",
                "FUN_00081480"
            ],
            "code": "\nvoid execute_relocation_00081800(undefined4 offset)\n\n{\n  FUN_00083b10(rel_offset,offset);\n  return;\n}\n\n",
            "current_name": "execute_relocation_00081800",
            "entrypoint": "0x00081800",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "rel_offset",
                "FUN_00081800": "execute_relocation_00081800",
                "param_1": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081810": {
            "additional_data": {
                "FUNC_00081f94": {
                    "1": "initialize_function_1",
                    "2": "initialize_function"
                },
                "FUNC_00081f98": {
                    "2": "finalize_function"
                },
                "FUN_00081810": {
                    "1": "defragment_memory",
                    "2": "allocate_memory"
                },
                "FUN_0008236c": {
                    "1": "allocate_memory_function"
                },
                "LAB_00081876": {
                    "1": "return_size_error"
                },
                "dVar1": {
                    "1": "info1",
                    "2": "index",
                    "3": "rel_info",
                    "5": "temp1"
                },
                "dVar11": {
                    "1": "prev_entry",
                    "2": "temp10",
                    "3": "temp_var11"
                },
                "dVar12": {
                    "1": "tmp_ptr3",
                    "2": "prev_offset",
                    "3": "temp_var12"
                },
                "dVar17": {
                    "1": "start_entry"
                },
                "dVar22": {
                    "1": "temp_entry"
                },
                "dVar7": {
                    "1": "entry",
                    "2": "temp_d_var7",
                    "3": "temp_var7",
                    "5": "temp7"
                },
                "iVar13": {
                    "1": "offset",
                    "2": "counter",
                    "3": "var13"
                },
                "iVar19": {
                    "1": "var19"
                },
                "iVar2": {
                    "1": "temp_int1",
                    "3": "var2",
                    "4": "temp_var2",
                    "5": "temp2"
                },
                "iVar20": {
                    "1": "limit"
                },
                "iVar21": {
                    "1": "offset"
                },
                "iVar30": {
                    "1": "temp_var1"
                },
                "iVar31": {
                    "1": "temp_var2"
                },
                "iVar32": {
                    "1": "temp_var3"
                },
                "iVar33": {
                    "1": "temp_var4"
                },
                "iVar34": {
                    "1": "temp_var5"
                },
                "iVar35": {
                    "1": "temp_var6"
                },
                "iVar36": {
                    "1": "temp_var7"
                },
                "iVar37": {
                    "1": "temp_var8"
                },
                "iVar38": {
                    "1": "temp_var9"
                },
                "iVar39": {
                    "1": "temp_var10"
                },
                "iVar40": {
                    "1": "temp_var11"
                },
                "iVar41": {
                    "1": "temp_var12"
                },
                "iVar42": {
                    "1": "temp_var13"
                },
                "iVar43": {
                    "1": "temp_var14"
                },
                "iVar44": {
                    "1": "temp_var15"
                },
                "iVar5": {
                    "1": "temp4",
                    "2": "i_var5",
                    "4": "var5",
                    "5": "temp5"
                },
                "iVar9": {
                    "1": "value7",
                    "2": "i_var9",
                    "4": "temp_var9",
                    "5": "temp9"
                },
                "param_1": {
                    "1": "param_1",
                    "13": "param_array",
                    "2": "output",
                    "5": "input_array"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "array_size",
                    "4": "array_length",
                    "5": "param_length",
                    "7": "size",
                    "8": "param_size"
                },
                "pdVar14": {
                    "1": "temp_ptr_var14",
                    "2": "ptr_var14",
                    "3": "temp_ptr2"
                },
                "pdVar17": {
                    "1": "var34",
                    "2": "ptr4",
                    "3": "temp_ptr4"
                },
                "puVar10": {
                    "1": "curr_rel_entry",
                    "2": "temp_ptr",
                    "3": "temp_ptr1"
                },
                "puVar16": {
                    "1": "pointer3",
                    "2": "ptr_var16",
                    "3": "pointer_var3"
                },
                "uVar15": {
                    "1": "new_size",
                    "2": "temp13",
                    "3": "temp_var15",
                    "4": "var15",
                    "6": "aligned_size"
                },
                "uVar18": {
                    "1": "nested_temp53",
                    "2": "temp14",
                    "3": "var18",
                    "4": "temp_var18"
                },
                "uVar19": {
                    "1": "bitmask"
                },
                "uVar23": {
                    "1": "flags"
                },
                "uVar24": {
                    "1": "temp_size"
                },
                "uVar25": {
                    "1": "temp_ptr"
                },
                "uVar3": {
                    "1": "temp_uint1",
                    "2": "mask",
                    "3": "var3",
                    "4": "temp_var3",
                    "5": "temp3"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "temp_var2",
                    "3": "var4",
                    "5": "temp4"
                },
                "uVar6": {
                    "1": "nested_temp52",
                    "2": "temp_var5",
                    "3": "var6",
                    "4": "temp_var6",
                    "5": "temp6"
                },
                "uVar8": {
                    "1": "value6",
                    "2": "temp_var6",
                    "3": "var8",
                    "4": "temp_var8",
                    "5": "temp8"
                }
            },
            "called": [
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "calling": [
                "FUN_00081fac",
                "FUN_00084018",
                "FUN_00083ca8",
                "FUN_000817f0"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * process_function_00081810(undefined4 *param_array,uint param_size)\n\n{\n  dword temp1;\n  int temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  dword temp7;\n  uint temp8;\n  int temp9;\n  undefined *temp_ptr1;\n  dword temp_var11;\n  dword temp_var12;\n  int temp_var13;\n  dword *temp_ptr2;\n  uint aligned_size;\n  undefined *temp_ptr3;\n  dword *temp_ptr4;\n  uint temp_var18;\n  \n  if (param_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < param_size) goto return_size_error;\n  }\n  else {\n    aligned_size = param_size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < param_size)) {\nreturn_size_error:\n      *param_array = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(param_array);\n  temp1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (aligned_size < 0x1f8) {\n    temp_var13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + aligned_size);\n    if ((temp_var13 != aligned_size + 0x20070464) ||\n       (temp2 = temp_var13 + 8, temp_var13 = *(int *)(temp_var13 + 0x14), temp2 != temp_var13)) {\n      temp5 = *(int *)(temp_var13 + 0xc);\n      temp9 = (*(uint *)(temp_var13 + 4) & 0xfffffffc) + temp_var13;\n      aligned_size = *(uint *)(temp9 + 4);\n      temp2 = *(int *)(temp_var13 + 8);\n      *(int *)(temp2 + 0xc) = temp5;\n      *(int *)(temp5 + 8) = temp2;\n      *(uint *)(temp9 + 4) = aligned_size | 1;\n      FUNC_00081f98(param_array);\n      return (int *)(temp_var13 + 8);\n    }\n    temp_var18 = (aligned_size >> 3) + 2;\n  }\n  else {\n    temp_var18 = aligned_size >> 9;\n    if (temp_var18 == 0) {\n      temp2 = 0x7e;\n      temp_var13 = 0x3f;\n    }\n    else if (temp_var18 < 5) {\n      temp_var13 = (aligned_size >> 6) + 0x38;\n      temp2 = temp_var13 * 2;\n    }\n    else if (temp_var18 < 0x15) {\n      temp_var13 = temp_var18 + 0x5b;\n      temp2 = temp_var13 * 2;\n    }\n    else if (temp_var18 < 0x55) {\n      temp_var13 = (aligned_size >> 0xc) + 0x6e;\n      temp2 = temp_var13 * 2;\n    }\n    else if (temp_var18 < 0x155) {\n      temp_var13 = (aligned_size >> 0xf) + 0x77;\n      temp2 = temp_var13 * 2;\n    }\n    else if (temp_var18 < 0x555) {\n      temp_var13 = (aligned_size >> 0x12) + 0x7c;\n      temp2 = temp_var13 * 2;\n    }\n    else {\n      temp2 = 0xfc;\n      temp_var13 = 0x7e;\n    }\n    for (temp7 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp2]; temp2 * 4 + 0x20070464U != temp7\n        ; temp7 = *(dword *)(temp7 + 0xc)) {\n      temp_var18 = *(uint *)(temp7 + 4) & 0xfffffffc;\n      temp5 = temp_var18 - aligned_size;\n      if (0xf < temp5) {\n        temp_var13 = temp_var13 + -1;\n        break;\n      }\n      if (-1 < temp5) {\n        temp2 = temp_var18 + temp7;\n        aligned_size = *(uint *)(temp2 + 4);\n        temp5 = *(int *)(temp7 + 0xc);\n        temp_var13 = *(int *)(temp7 + 8);\n        *(int *)(temp_var13 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp_var13;\n        *(uint *)(temp2 + 4) = aligned_size | 1;\n        FUNC_00081f98(param_array);\n        return (int *)(temp7 + 8);\n      }\n    }\n    temp_var18 = temp_var13 + 1;\n  }\n  temp7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp3 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp4 = temp3 & 0xfffffffc;\n    temp6 = temp4 - aligned_size;\n    if (0xf < (int)temp6) {\n      temp7 = aligned_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = aligned_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = temp7;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = temp7;\n      *(undefined4 *)(temp7 + 0xc) = 0x2007046c;\n      *(undefined4 *)(temp7 + 8) = 0x2007046c;\n      *(uint *)(temp7 + 4) = temp6 | 1;\n      *(uint *)(temp7 + temp6) = temp6;\n      FUNC_00081f98(param_array);\n      return (int *)(temp1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp6) {\n      *(uint *)(temp4 + temp1 + 4) = *(uint *)(temp4 + temp1 + 4) | 1;\n      FUNC_00081f98(param_array);\n      return (int *)(temp1 + 8);\n    }\n    if (temp4 < 0x200) {\n      temp4 = temp3 & 0xfffffff8;\n      temp_var13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4);\n      temp7 = 1 << ((int)(temp3 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(temp1 + 8) = temp_var13;\n      *(uint *)(temp1 + 0xc) = temp4 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = temp7;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4) = temp1;\n      *(dword *)(temp_var13 + 0xc) = temp1;\n    }\n    else {\n      temp6 = temp3 >> 9;\n      if (temp6 < 5) {\n        temp2 = (temp3 >> 6) + 0x38;\n        temp_var13 = temp2 * 2;\n      }\n      else if (temp6 < 0x15) {\n        temp2 = temp6 + 0x5b;\n        temp_var13 = temp2 * 2;\n      }\n      else if (temp6 < 0x55) {\n        temp2 = (temp3 >> 0xc) + 0x6e;\n        temp_var13 = temp2 * 2;\n      }\n      else if (temp6 < 0x155) {\n        temp2 = (temp3 >> 0xf) + 0x77;\n        temp_var13 = temp2 * 2;\n      }\n      else if (temp6 < 0x555) {\n        temp2 = (temp3 >> 0x12) + 0x7c;\n        temp_var13 = temp2 * 2;\n      }\n      else {\n        temp_var13 = 0xfc;\n        temp2 = 0x7e;\n      }\n      temp7 = temp_var13 * 4 + 0x20070464;\n      temp_var11 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp_var13];\n      if (temp_var11 == temp7) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp2 >> 2 & 0xffU);\n        temp_var12 = temp_var11;\n      }\n      else {\n        do {\n          temp_var12 = temp_var11;\n          if ((*(uint *)(temp_var11 + 4) & 0xfffffffc) <= temp4) break;\n          temp_var11 = *(dword *)(temp_var11 + 8);\n          temp_var12 = temp_var11;\n        } while (temp7 != temp_var11);\n        temp_var11 = *(dword *)(temp_var12 + 0xc);\n      }\n      temp7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(temp1 + 0xc) = temp_var11;\n      *(dword *)(temp1 + 8) = temp_var12;\n      *(dword *)(temp_var11 + 8) = temp1;\n      *(dword *)(temp_var12 + 0xc) = temp1;\n    }\n  }\n  temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp3 = 1 << ((int)temp_var18 >> 2 & 0xffU);\n  if (temp3 <= temp7) {\n    if ((temp7 & temp3) == 0) {\n      temp_var18 = temp_var18 & 0xfffffffc;\n      do {\n        temp3 = temp3 << 1;\n        temp_var18 = temp_var18 + 4;\n      } while ((temp7 & temp3) == 0);\n    }\n    do {\n      temp_ptr4 = &Elf32_Rel_ARRAY_20070000[temp_var18 + 0x8c].r_info;\n      temp_ptr2 = temp_ptr4;\n      temp4 = temp_var18;\n      do {\n        for (temp_ptr1 = (undefined *)temp_ptr2[3]; temp_ptr2 != (dword *)temp_ptr1;\n            temp_ptr1 = *(undefined **)(temp_ptr1 + 0xc)) {\n          temp6 = *(uint *)(temp_ptr1 + 4) & 0xfffffffc;\n          temp8 = temp6 - aligned_size;\n          if (0xf < (int)temp8) {\n            temp2 = *(int *)(temp_ptr1 + 8);\n            temp_var13 = *(int *)(temp_ptr1 + 0xc);\n            temp_ptr3 = temp_ptr1 + aligned_size;\n            *(uint *)(temp_ptr1 + 4) = aligned_size | 1;\n            *(int *)(temp2 + 0xc) = temp_var13;\n            *(int *)(temp_var13 + 8) = temp2;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)temp_ptr3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)temp_ptr3;\n            *(undefined4 *)(temp_ptr3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp_ptr3 + 8) = 0x2007046c;\n            *(uint *)(temp_ptr3 + 4) = temp8 | 1;\n            *(uint *)(temp_ptr3 + temp8) = temp8;\n            FUNC_00081f98(param_array);\n            return (int *)(temp_ptr1 + 8);\n          }\n          if (-1 < (int)temp8) {\n            temp_var13 = *(int *)(temp_ptr1 + 8);\n            temp2 = *(int *)(temp_ptr1 + 0xc);\n            *(uint *)(temp_ptr1 + temp6 + 4) = *(uint *)(temp_ptr1 + temp6 + 4) | 1;\n            *(int *)(temp_var13 + 0xc) = temp2;\n            *(int *)(temp2 + 8) = temp_var13;\n            FUNC_00081f98(param_array);\n            return (int *)(temp_ptr1 + 8);\n          }\n        }\n        temp4 = temp4 + 1;\n        temp_ptr2 = temp_ptr2 + 2;\n      } while ((temp4 & 3) != 0);\n      do {\n        temp6 = temp_var18 & 3;\n        temp_ptr1 = (undefined *)(temp_ptr4 + -2);\n        temp_var18 = temp_var18 - 1;\n        if (temp6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp3;\n          break;\n        }\n        temp_ptr4 = (dword *)*temp_ptr4;\n      } while (temp_ptr4 == (dword *)temp_ptr1);\n      temp3 = temp3 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp3 &&\n           temp3 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp_var18 = temp4, temp3 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp3) == 0; temp3 = temp3 << 1) {\n        temp_var18 = temp_var18 + 4;\n      }\n    } while( true );\n  }\n  temp_var18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= temp_var18) &&\n     (temp3 = temp_var18 - aligned_size, temp7 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp3))\n  goto LAB_00081b1a;\n  temp3 = Elf32_Rel_ARRAY_20070000[141].r_info + temp_var18;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp4 = aligned_size + DAT_20071218 + 0x10;\n  }\n  else {\n    temp4 = aligned_size + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  temp7 = FUN_0008236c(param_array,temp4);\n  if ((temp7 == 0xffffffff) || ((temp7 < temp3 && (temp1 != 0x20070464)))) {\n    temp_var18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp6 = DAT_2007121c + temp4;\n    DAT_2007121c = temp6;\n    if ((temp3 == temp7) && ((temp3 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp4 + temp_var18 | 1;\n    }\n    else {\n      temp_var11 = temp7;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp_var11 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = temp6 + (temp7 - temp3);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp_var11;\n      temp3 = temp7 & 7;\n      if (temp3 == 0) {\n        temp_var13 = 0x1000;\n      }\n      else {\n        temp7 = temp7 + (8 - temp3);\n        temp_var13 = 0x1008 - temp3;\n      }\n      temp_var13 = temp_var13 - (temp4 + temp7 & 0xfff);\n      temp2 = FUN_0008236c(param_array,temp_var13);\n      if (temp2 == -1) {\n        temp3 = 1;\n        temp_var13 = 0;\n      }\n      else {\n        temp3 = (temp2 - temp7) + temp_var13 | 1;\n      }\n      temp6 = DAT_2007121c + temp_var13;\n      Elf32_Rel_ARRAY_20070000[141].r_info = temp7;\n      DAT_2007121c = temp6;\n      *(uint *)(temp7 + 4) = temp3;\n      if (temp1 != 0x20070464) {\n        if (temp_var18 < 0x10) {\n          *(undefined4 *)(temp7 + 4) = 1;\n          temp_var18 = 0;\n          goto LAB_00081b04;\n        }\n        temp_var18 = temp_var18 - 0xc & 0xfffffff8;\n        *(uint *)(temp1 + 4) = temp_var18 | *(uint *)(temp1 + 4) & 1;\n        *(undefined4 *)(temp1 + temp_var18 + 4) = 5;\n        *(undefined4 *)(temp1 + temp_var18 + 8) = 5;\n        if (0xf < temp_var18) {\n          FUN_00083b10(param_array,temp1 + 8);\n          temp6 = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < temp6) {\n      DAT_20071214 = temp6;\n    }\n    if (DAT_20071210 < temp6) {\n      DAT_20071210 = temp6;\n    }\n    temp_var18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  temp3 = temp_var18 - aligned_size;\n  if ((temp_var18 < aligned_size) || ((int)temp3 < 0x10)) {\n    FUNC_00081f98(param_array);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = aligned_size + temp7;\n  *(uint *)(temp7 + 4) = aligned_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp3 | 1;\n  FUNC_00081f98(param_array);\n  return (int *)(temp7 + 8);\n}\n\n",
            "current_name": "process_function_00081810",
            "entrypoint": "0x00081810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081810": "process_function_00081810",
                "LAB_00081876": "return_size_error",
                "dVar1": "temp1",
                "dVar11": "temp_var11",
                "dVar12": "temp_var12",
                "dVar17": "start_entry",
                "dVar7": "temp7",
                "iVar13": "temp_var13",
                "iVar2": "temp2",
                "iVar5": "temp5",
                "iVar9": "temp9",
                "param_1": "param_array",
                "param_2": "param_size",
                "pdVar14": "temp_ptr2",
                "pdVar17": "temp_ptr4",
                "puVar10": "temp_ptr1",
                "puVar16": "temp_ptr3",
                "uVar15": "aligned_size",
                "uVar18": "temp_var18",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar6": "temp6",
                "uVar8": "temp8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d48": {
            "additional_data": {
                "*(undefined *)((int)puVar1 + 2)": {
                    "1": "byte_value2"
                },
                "*(undefined *)((int)puVar1 + 3)": {
                    "1": "byte_value3"
                },
                "*(undefined *)((int)puVar3 + 2)": {
                    "1": "byte_value2"
                },
                "*(undefined *)((int)puVar3 + 3)": {
                    "1": "byte_value3"
                },
                "*(undefined *)(undefined4 *)((int)puVar1 + 1)": {
                    "1": "byte_value1"
                },
                "*(undefined *)puVar3": {
                    "1": "byte_value"
                },
                "*(undefined4 *)((int)puVar3 + 1)": {
                    "1": "byte_value1"
                },
                "*puVar2": {
                    "1": "word_value"
                },
                "FUN_00081d48": {
                    "1": "memcpy_aligned",
                    "29": "copy_memory"
                },
                "LAB_00081dcc": {
                    "1": "handle_remaining_bytes"
                },
                "bVar6": {
                    "1": "continue_copying",
                    "2": "condition",
                    "3": "is_looping",
                    "4": "is_remaining",
                    "6": "loop_condition"
                },
                "param_1": {
                    "12": "dest",
                    "19": "destination"
                },
                "param_2": {
                    "12": "src",
                    "19": "source"
                },
                "param_2 + 0x10": {
                    "1": "src_ptr"
                },
                "param_3": {
                    "22": "size",
                    "9": "length"
                },
                "param_3 - 0x40": {
                    "1": "new_size"
                },
                "puVar1": {
                    "2": "dest_pointer",
                    "25": "dest_ptr",
                    "4": "dst_ptr"
                },
                "puVar2": {
                    "1": "dst_ptr",
                    "2": "dest_ptr",
                    "3": "dest_end",
                    "4": "dest_end_ptr",
                    "8": "src_ptr"
                },
                "puVar2 + 0x10": {
                    "1": "dest_ptr"
                },
                "puVar2[0x1]": {
                    "1": "word_value1"
                },
                "puVar3": {
                    "1": "temp_pointer",
                    "15": "src_ptr",
                    "2": "dest_ptr",
                    "3": "src"
                },
                "uVar4": {
                    "1": "block_size",
                    "15": "remaining_size",
                    "2": "remainder",
                    "6": "remaining_length"
                },
                "uVar4 - 0x10": {
                    "1": "new_size"
                },
                "uVar5": {
                    "1": "copy_length",
                    "2": "unrolled_size",
                    "3": "copy_size",
                    "4": "remaining_size"
                },
                "uVar5 - 0x4": {
                    "1": "new_size"
                }
            },
            "called": [],
            "calling": [
                "FUN_00083ca8"
            ],
            "code": "\nundefined4 * copy_memory_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint remaining_size;\n  bool loop_condition;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      remaining_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          loop_condition = remaining_size != 0;\n          remaining_size = remaining_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto handle_remaining_bytes;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remaining_size = 4 - ((uint)destination & 3);\n      size = size - remaining_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((remaining_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  remaining_size = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < remaining_size;\n      remaining_size = remaining_size - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\nhandle_remaining_bytes:\n  if (remaining_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((remaining_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((remaining_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_00081d48",
            "entrypoint": "0x00081d48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "LAB_00081dcc": "handle_remaining_bytes",
                "bVar6": "loop_condition",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e34": {
            "additional_data": {
                "FUN_00081e34": {
                    "1": "copy_from_to",
                    "19": "copy_memory",
                    "6": "reverse_copy"
                },
                "iVar1": {
                    "1": "counter",
                    "17": "index",
                    "2": "iterator",
                    "5": "i"
                },
                "param_1": {
                    "1": "source_array",
                    "11": "destination",
                    "13": "dest",
                    "5": "source"
                },
                "param_2": {
                    "1": "dest_array",
                    "11": "source",
                    "14": "src",
                    "5": "destination"
                },
                "param_3": {
                    "14": "length",
                    "17": "size"
                },
                "puVar2": {
                    "1": "source_pointer",
                    "18": "dest_ptr",
                    "2": "src_ptr",
                    "3": "dst_ptr"
                },
                "puVar3": {
                    "1": "dst_ptr",
                    "2": "source_ptr",
                    "21": "src_ptr",
                    "3": "destination_ptr"
                },
                "puVar4": {
                    "1": "dest_last_ptr",
                    "12": "temp_ptr",
                    "3": "copy_ptr",
                    "4": "dest_end"
                },
                "puVar5": {
                    "1": "temp_ptr"
                },
                "puVar6": {
                    "1": "src_end",
                    "2": "dest_end",
                    "3": "dest_byte_ptr",
                    "4": "temp_char"
                },
                "puVar7": {
                    "1": "temp_ptr"
                },
                "uVar5": {
                    "1": "temp_val",
                    "2": "remaining_length",
                    "3": "remaining_size",
                    "4": "temp_size",
                    "5": "temp_length"
                },
                "uVar7": {
                    "1": "remaining_size_mod16",
                    "2": "remaining_length",
                    "3": "remainder_size",
                    "6": "remaining_size",
                    "7": "remainder"
                }
            },
            "called": [],
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "code": "\nvoid copy_memory_00081e34(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_length;\n  undefined *temp_char;\n  uint remainder;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + size), dest < temp_ptr)) {\n    temp_char = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp_char = temp_char + -1;\n        *temp_char = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    temp_length = remainder;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < remainder) {\n      do {\n        temp_length = temp_length - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_length);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "current_name": "copy_memory_00081e34",
            "entrypoint": "0x00081e34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "iVar1": "index",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "puVar6": "temp_char",
                "uVar5": "temp_length",
                "uVar7": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081f00": {
            "additional_data": {
                "FUN_00081f00": {
                    "1": "memset_uint32",
                    "4": "fill_buffer_with_byte",
                    "5": "memset",
                    "6": "fill_memory_with_byte",
                    "7": "fill_memory"
                },
                "LAB_00081f7c": {
                    "1": "end_of_loop"
                },
                "bVar5": {
                    "1": "is_zero_length",
                    "2": "is_end",
                    "5": "is_size_zero",
                    "9": "is_zero"
                },
                "param_1": {
                    "1": "ptr",
                    "10": "dest",
                    "2": "dst",
                    "3": "memory",
                    "6": "buffer",
                    "8": "destination"
                },
                "param_2": {
                    "1": "byte_value",
                    "2": "fill_byte",
                    "21": "value",
                    "5": "byte"
                },
                "param_3": {
                    "14": "size",
                    "2": "num",
                    "3": "count",
                    "9": "length"
                },
                "puVar1": {
                    "1": "dest_ptr1",
                    "14": "dest_ptr",
                    "2": "current_pointer",
                    "3": "current",
                    "4": "dst_ptr"
                },
                "puVar2": {
                    "1": "next_pos",
                    "2": "next_dst_ptr",
                    "3": "next_ptr",
                    "4": "temp_ptr",
                    "8": "next_dest_ptr"
                },
                "uVar3": {
                    "1": "four_copies_of_value",
                    "2": "combined_value",
                    "4": "pattern",
                    "6": "fill_value"
                },
                "uVar4": {
                    "1": "count_remaining",
                    "11": "remaining_size",
                    "2": "temp_count",
                    "7": "remaining_length"
                }
            },
            "called": [],
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "code": "\nvoid fill_memory_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 fill_value;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = fill_value;\n        dest_ptr[1] = fill_value;\n        dest_ptr[2] = fill_value;\n        dest_ptr[3] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_of_loop;\n    }\n    do {\n      size = size - 4;\n      *dest = fill_value;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_of_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_00081f00",
            "entrypoint": "0x00081f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081f00": "fill_memory_00081f00",
                "LAB_00081f7c": "end_of_loop",
                "bVar5": "is_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "fill_value",
                "uVar4": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081f94": {
            "called": [],
            "calling": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00081f94",
            "entrypoint": "0x00081f94",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081f98": {
            "called": [],
            "calling": [
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00083a74"
            ],
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00081f98",
            "entrypoint": "0x00081f98",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081f9c": {
            "additional_data": {
                "FUN_00081f9c": {
                    "1": "process_function",
                    "2": "perform_relocation",
                    "4": "process_relocation_entry",
                    "8": "process_relocation"
                },
                "FUN_00081fac": {
                    "1": "process_rel_entry",
                    "12": "apply_relocation",
                    "3": "process_relocation",
                    "5": "perform_relocation"
                },
                "param_1": {
                    "1": "entries",
                    "2": "r_offset",
                    "3": "offset",
                    "7": "relocation_entry"
                },
                "param_2": {
                    "1": "param",
                    "10": "param2",
                    "2": "param_1",
                    "6": "param1",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "arg3",
                    "4": "param2",
                    "5": "param_3",
                    "9": "param3"
                }
            },
            "called": [
                "FUN_00081fac"
            ],
            "calling": [
                "FUN_00081496"
            ],
            "code": "\nvoid process_relocation_00081f9c(undefined4 relocation_entry,undefined4 param2)\n\n{\n  FUN_00081fac(Elf32_Rel_ARRAY_20070000[140].r_offset,relocation_entry,param2);\n  return;\n}\n\n",
            "current_name": "process_relocation_00081f9c",
            "entrypoint": "0x00081f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081f9c": "process_relocation_00081f9c",
                "param_1": "relocation_entry",
                "param_2": "param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081fac": {
            "additional_data": {
                "*(uint *)((*(uint *)(dVar1 + 4) & 0xfffffffe) + dVar1 + 4) & 1": {
                    "1": "data3"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_array",
                    "3": "array"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info": {
                    "1": "data1"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info + 4": {
                    "1": "data2"
                },
                "FNC_00081e34": {
                    "1": "copy_memory"
                },
                "FUNC_00081810": {
                    "1": "allocate_buffer",
                    "3": "allocate_memory"
                },
                "FUNC_00081e34": {
                    "1": "helper_function_3"
                },
                "FUNC_00081f94": {
                    "1": "helper_function_1",
                    "3": "helper_function"
                },
                "FUNC_00081f98": {
                    "1": "helper_function3",
                    "2": "cleanup",
                    "3": "cleanup_function"
                },
                "FUNC_00083b10": {
                    "1": "cleanup_buffer"
                },
                "FUN_00081810": {
                    "1": "allocate_array",
                    "2": "allocate_memory"
                },
                "FUN_00081e34": {
                    "1": "helper_function4",
                    "4": "copy_memory"
                },
                "FUN_00081f94": {
                    "1": "initialize_function"
                },
                "FUN_00081fac": {
                    "1": "decompile_function",
                    "3": "reallocate_memory"
                },
                "FUN_00083b10": {
                    "1": "helper_function_4"
                },
                "dVar1": {
                    "1": "temp9",
                    "2": "temp_dword",
                    "4": "temp_var1",
                    "6": "temp",
                    "8": "temp1"
                },
                "iVar4": {
                    "1": "var2",
                    "2": "temp4",
                    "3": "temp2",
                    "4": "temp_var3",
                    "7": "temp3"
                },
                "iVar6": {
                    "1": "temp_variable4",
                    "2": "temp_var4",
                    "4": "temp4",
                    "5": "temp5"
                },
                "param_1": {
                    "1": "param",
                    "13": "input_array",
                    "2": "array_pointer",
                    "3": "param_array",
                    "4": "parameter1"
                },
                "param_2": {
                    "1": "dynamic_array",
                    "2": "buffer",
                    "4": "parameter2",
                    "9": "output_array"
                },
                "param_3": {
                    "1": "new_size",
                    "3": "array_size",
                    "4": "parameter3",
                    "8": "size",
                    "9": "array_length"
                },
                "piVar10": {
                    "1": "var7",
                    "2": "temp10",
                    "3": "temp_pointer2",
                    "5": "temp_array2"
                },
                "piVar10[1]": {
                    "1": "data4"
                },
                "piVar2": {
                    "1": "new_memory",
                    "14": "result",
                    "2": "temp2",
                    "3": "result_pointer",
                    "5": "result_array"
                },
                "piVar7": {
                    "1": "temp_array1",
                    "2": "temp_ptr1",
                    "3": "temp_pointer1",
                    "5": "temp6",
                    "7": "temp_array"
                },
                "uVar3": {
                    "1": "temp_value2",
                    "2": "temp_var1",
                    "5": "temp_var2",
                    "7": "temp2"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "temp3",
                    "4": "temp_var4",
                    "5": "temp4"
                },
                "uVar8": {
                    "1": "new_size",
                    "2": "temp_var5",
                    "3": "temp_var7",
                    "4": "temp7"
                },
                "uVar9": {
                    "1": "u_var2",
                    "2": "temp9",
                    "3": "temp_var8",
                    "4": "temp8"
                }
            },
            "called": [
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00081e34"
            ],
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "code": "\nint * reallocate_memory_00081fac(undefined4 *input_array,int *output_array,uint array_length)\n\n{\n  dword temp1;\n  int *result;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  int *temp_array;\n  uint temp7;\n  uint aligned_size;\n  int *temp_array2;\n  \n  if (output_array == (int *)0x0) {\n    result = (int *)FUN_00081810(input_array,array_length);\n    return result;\n  }\n  FUNC_00081f94();\n  temp4 = output_array[-1];\n  temp7 = temp4 & 0xfffffffc;\n  result = output_array + -2;\n  if (array_length + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = array_length + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_00082078;\n  }\n  if (aligned_size < array_length) {\nLAB_00082078:\n    *input_array = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp7 < (int)aligned_size) {\n    temp1 = (int)result + temp7;\n    if (data1 == temp1) {\n      temp2 = *(uint *)(data1 + 4) & 0xfffffffc;\n      temp1 = data1;\n      if ((int)(aligned_size + 0x10) <= (int)(temp2 + temp7)) {\n        data1 = (int)result + aligned_size;\n        *(uint *)(data1 + 4) = (temp2 + temp7) - aligned_size | 1;\n        output_array[-1] = aligned_size | output_array[-1] & 1U;\n        FUNC_00081f98(input_array);\n        return output_array;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp2 + temp7)) {\n        temp5 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp2 + temp7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp4 << 0x1f)) {\n      temp_array2 = (int *)((int)result - output_array[-2]);\n      temp4 = (data4 & 0xfffffffcU) + temp7;\n      if (temp1 != 0) {\n        if (temp1 == data1) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp2 + temp4)) {\n            result = temp_array2 + 2;\n            temp3 = *result;\n            temp5 = temp_array2[3];\n            temp7 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            if (temp7 < 0x25) {\n              temp_array = result;\n              if (0x13 < temp7) {\n                temp_array2[2] = *output_array;\n                temp_array2[3] = output_array[1];\n                if (temp7 < 0x1c) {\n                  output_array = output_array + 2;\n                  temp_array = temp_array2 + 4;\n                }\n                else {\n                  temp_array2[4] = output_array[2];\n                  temp_array2[5] = output_array[3];\n                  if (temp7 == 0x24) {\n                    temp_array2[6] = output_array[4];\n                    temp_array = output_array + 5;\n                    output_array = output_array + 6;\n                    temp_array2[7] = *temp_array;\n                    temp_array = temp_array2 + 8;\n                  }\n                  else {\n                    output_array = output_array + 4;\n                    temp_array = temp_array2 + 6;\n                  }\n                }\n              }\n              *temp_array = *output_array;\n              temp_array[1] = output_array[1];\n              temp_array[2] = output_array[2];\n            }\n            else {\n              FUN_00081e34(result,output_array);\n            }\n            data1 = (int)temp_array2 + aligned_size;\n            *(uint *)(data1 + 4) = (temp2 + temp4) - aligned_size | 1;\n            data4 = aligned_size | data4 & 1U;\n            FUNC_00081f98(input_array);\n            return result;\n          }\n        }\n        else {\n          temp2 = temp2 + temp4;\n          if ((int)aligned_size <= (int)temp2) {\n            temp5 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp_array = temp_array2 + 2;\n            temp3 = *temp_array;\n            temp5 = temp_array2[3];\n            temp4 = temp7 - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp7 = temp2;\n            if (temp4 < 0x25) {\n              result = temp_array;\n              if (0x13 < temp4) {\n                temp_array2[2] = *output_array;\n                temp_array2[3] = output_array[1];\n                if (temp4 < 0x1c) {\n                  output_array = output_array + 2;\n                  result = temp_array2 + 4;\n                }\n                else {\n                  temp_array2[4] = output_array[2];\n                  temp_array2[5] = output_array[3];\n                  if (temp4 == 0x24) {\n                    temp_array2[6] = output_array[4];\n                    result = output_array + 5;\n                    output_array = output_array + 6;\n                    temp_array2[7] = *result;\n                    result = temp_array2 + 8;\n                  }\n                  else {\n                    output_array = output_array + 4;\n                    result = temp_array2 + 6;\n                  }\n                }\n              }\n              *result = *output_array;\n              result[1] = output_array[1];\n              result[2] = output_array[2];\n              temp4 = data4;\n              result = temp_array2;\n              output_array = temp_array;\n            }\n            else {\n              FUN_00081e34(temp_array,output_array);\n              temp4 = data4;\n              result = temp_array2;\n              output_array = temp_array;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)temp4) {\n        temp_array = temp_array2 + 2;\n        temp3 = *temp_array;\n        temp5 = temp_array2[3];\n        temp2 = temp7 - 4;\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        temp7 = temp4;\n        if (temp2 < 0x25) {\n          result = temp_array;\n          if (0x13 < temp2) {\n            temp_array2[2] = *output_array;\n            temp_array2[3] = output_array[1];\n            if (temp2 < 0x1c) {\n              output_array = output_array + 2;\n              result = temp_array2 + 4;\n            }\n            else {\n              temp_array2[4] = output_array[2];\n              temp_array2[5] = output_array[3];\n              if (temp2 == 0x24) {\n                temp_array2[6] = output_array[4];\n                result = output_array + 5;\n                output_array = output_array + 6;\n                temp_array2[7] = *result;\n                result = temp_array2 + 8;\n              }\n              else {\n                output_array = output_array + 4;\n                result = temp_array2 + 6;\n              }\n            }\n          }\n          *result = *output_array;\n          result[1] = output_array[1];\n          result[2] = output_array[2];\n          temp4 = data4;\n          result = temp_array2;\n          output_array = temp_array;\n        }\n        else {\n          FUN_00081e34(temp_array,output_array);\n          temp4 = data4;\n          result = temp_array2;\n          output_array = temp_array;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp_array2 = (int *)FUN_00081810(input_array,array_length);\n    if (temp_array2 == (int *)0x0) goto LAB_000820a0;\n    temp4 = output_array[-1];\n    if (temp_array2 + -2 != (int *)((temp4 & 0xfffffffe) + (int)result)) {\n      temp7 = temp7 - 4;\n      if (temp7 < 0x25) {\n        result = output_array;\n        temp_array = temp_array2;\n        if (0x13 < temp7) {\n          *temp_array2 = *output_array;\n          data4 = output_array[1];\n          if (temp7 < 0x1c) {\n            result = output_array + 2;\n            temp_array = temp_array2 + 2;\n          }\n          else {\n            temp_array2[2] = output_array[2];\n            temp_array2[3] = output_array[3];\n            if (temp7 == 0x24) {\n              temp_array2[4] = output_array[4];\n              temp_array2[5] = output_array[5];\n              result = output_array + 6;\n              temp_array = temp_array2 + 6;\n            }\n            else {\n              result = output_array + 4;\n              temp_array = temp_array2 + 4;\n            }\n          }\n        }\n        *temp_array = *result;\n        temp_array[1] = result[1];\n        temp_array[2] = result[2];\n      }\n      else {\n        FUN_00081e34(temp_array2,output_array);\n      }\n      FUN_00083b10(input_array,output_array);\n      goto LAB_000820a0;\n    }\n    temp7 = temp7 + (temp_array2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp2 = temp7 - aligned_size;\n  temp_array2 = output_array;\n  if (temp2 < 0x10) {\n    result[1] = temp4 & 1 | temp7;\n    *(uint *)((int)result + temp7 + 4) = *(uint *)((int)result + temp7 + 4) | 1;\n  }\n  else {\n    result[1] = temp4 & 1 | aligned_size;\n    *(uint *)((int)result + aligned_size + 4) = temp2 | 1;\n    *(uint *)((int)result + temp2 + aligned_size + 4) = *(uint *)((int)result + temp2 + aligned_size + 4) | 1;\n    FUN_00083b10(input_array,(int)result + aligned_size + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(input_array);\n  return temp_array2;\n}\n\n",
            "current_name": "reallocate_memory_00081fac",
            "entrypoint": "0x00081fac",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "data1",
                "FUN_00081fac": "reallocate_memory_00081fac",
                "dVar1": "temp1",
                "iVar4": "temp3",
                "iVar6": "temp5",
                "param_1": "input_array",
                "param_2": "output_array",
                "param_3": "array_length",
                "piVar10": "temp_array2",
                "piVar10[1]": "data4",
                "piVar2": "result",
                "piVar7": "temp_array",
                "uVar3": "temp2",
                "uVar5": "temp4",
                "uVar8": "temp7",
                "uVar9": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008236c": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "extracted_data"
                },
                "FUN_0008236c": {
                    "1": "update_value_if_needed",
                    "2": "find_and_assign_value",
                    "6": "extract_data",
                    "9": "process_data"
                },
                "iVar1": {
                    "1": "output_value",
                    "11": "result",
                    "2": "error_code",
                    "4": "status",
                    "8": "return_value"
                },
                "param_1": {
                    "1": "output_buffer",
                    "13": "result",
                    "2": "output_value",
                    "9": "output"
                },
                "param_2": {
                    "18": "input",
                    "2": "input_param",
                    "9": "input_value"
                }
            },
            "called": [
                "FUN_00080e88"
            ],
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "code": "\nvoid process_data_0008236c(int *result,undefined4 input)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080e88(input);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0008236c",
            "entrypoint": "0x0008236c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008236c": "process_data_0008236c",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082390": {
            "additional_data": {
                "FUN_00082390": {
                    "1": "compare_int_arrays",
                    "10": "compare_uint_arrays",
                    "2": "compare_byte_arrays",
                    "3": "compare_and_return",
                    "4": "compare_buffers",
                    "7": "compare_arrays"
                },
                "LAB_00082410": {
                    "1": "skip_comparison"
                },
                "LAB_0008258e": {
                    "1": "convert_vars"
                },
                "LAB_0008259a": {
                    "1": "compare_aligned"
                },
                "LAB_0008259e": {
                    "1": "convert_vars_shift"
                },
                "LZCOUNT": {
                    "2": "leading_zeroes_count"
                },
                "iVar2": {
                    "1": "index",
                    "25": "result",
                    "5": "comparison_result"
                },
                "param_1": {
                    "1": "pointer1",
                    "2": "input1",
                    "21": "array1",
                    "4": "buffer1"
                },
                "param_2": {
                    "1": "ptr2",
                    "2": "input2",
                    "21": "array2",
                    "4": "buffer2"
                },
                "puVar1": {
                    "1": "current_pointer1",
                    "18": "ptr1",
                    "2": "ptr_buffer1",
                    "5": "ptr_array1"
                },
                "puVar3": {
                    "1": "array2_ptr",
                    "18": "ptr2",
                    "2": "ptr_buffer2",
                    "5": "ptr_array2"
                },
                "puVar4": {
                    "1": "temp_pointer",
                    "16": "ptr3",
                    "2": "temp_ptr",
                    "4": "ptr"
                },
                "uVar10": {
                    "1": "temp5"
                },
                "uVar5": {
                    "1": "array1_remaining",
                    "2": "byte1",
                    "3": "value1",
                    "5": "val1",
                    "9": "temp1"
                },
                "uVar6": {
                    "1": "byte_compare",
                    "2": "value1",
                    "3": "value2",
                    "4": "val2",
                    "9": "temp2"
                },
                "uVar7": {
                    "1": "byte3",
                    "10": "temp3",
                    "2": "value2",
                    "3": "value3",
                    "4": "val3",
                    "5": "val2"
                },
                "uVar8": {
                    "1": "byte4",
                    "2": "temp3",
                    "3": "value4",
                    "4": "temp1",
                    "9": "temp4"
                },
                "uVar9": {
                    "1": "temp_value2",
                    "2": "temp4",
                    "3": "value5",
                    "4": "temp2",
                    "9": "temp5"
                }
            },
            "called": [],
            "calling": [
                "FUN_000815b8"
            ],
            "code": "\nint compare_uint_arrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      temp1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nskip_comparison:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        temp2 = temp1 >> 0x10 & 0xff;\n        result = temp2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (temp2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          temp2 = temp1 >> 8 & 0xff;\n          result = temp2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp2 == 0) {\n            return 0;\n          }\n          goto skip_comparison;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (temp1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (temp1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    temp1 = (uint)array2 & 3;\n    if (temp1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (temp1 == 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x10;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffff;\n          if ((temp4 & 0x8080) != 0 || temp2 != temp1) goto convert_vars;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else if (temp1 < 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 8;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffffff;\n          if ((temp4 & 0x808080) != 0 || temp2 != temp1) goto convert_vars;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x18;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xff;\n          if ((temp4 & 0x80) != 0 || temp2 != temp1) goto convert_vars;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n              temp2 >> 0x18;\n      temp1 = (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 | temp3 >> 0x18;\n      goto convert_vars_shift;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      temp1 = *ptr1;\n      ptr2 = array2 + 1;\n      temp3 = *array2;\n      temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n      if (temp1 != temp3 || temp5 != 0) {\ncompare_aligned:\n        temp2 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n                temp1 >> 0x18;\n        temp1 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n                temp3 >> 0x18;\n        goto convert_vars_shift;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      temp1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        temp2 = *array1;\n        temp3 = array1[1];\n        temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n        if (temp2 != temp1 || temp5 != 0) goto convert_vars;\n        temp4 = *ptr1;\n        temp1 = ptr1[1];\n        temp5 = temp3 + 0xfefefeff & ~temp3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (temp3 == temp4 && temp5 == 0);\n      temp2 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n              temp3 >> 0x18;\n      temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 |\n              temp4 >> 0x18;\n      goto convert_vars_shift;\n    }\n  }\n  do {\n    temp1 = *array1;\n    temp2 = array1[1];\n    temp3 = *array2;\n    temp4 = array2[1];\n    temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n    if (temp1 != temp3 || temp5 != 0) goto compare_aligned;\n    temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (temp2 == temp4 && temp5 == 0);\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 | temp4 >> 0x18;\nconvert_vars_shift:\n  temp3 = temp5 << 0x18 | (temp5 >> 8 & 0xff) << 0x10 | (temp5 >> 0x10 & 0xff) << 8 | temp5 >> 0x18;\n  if (temp3 != 0) {\n    temp3 = 0x18 - leading_zeroes_count(temp3);\n    temp2 = temp2 >> (temp3 & 0xff);\n    temp1 = temp1 >> (temp3 & 0xff);\n  }\n  result = 1;\n  if (temp2 <= temp1) {\n    result = -(uint)(temp2 < temp1);\n  }\n  return result;\nconvert_vars:\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  goto convert_vars_shift;\n}\n\n",
            "current_name": "compare_uint_arrays_00082390",
            "entrypoint": "0x00082390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082390": "compare_uint_arrays_00082390",
                "LAB_00082410": "skip_comparison",
                "LAB_0008258e": "convert_vars",
                "LAB_0008259a": "compare_aligned",
                "LAB_0008259e": "convert_vars_shift",
                "LZCOUNT": "leading_zeroes_count",
                "iVar2": "result",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000825cc": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "copy_string"
                },
                "<param_1>": {
                    "1": "destination"
                },
                "<param_2>": {
                    "1": "source"
                },
                "FUN_000825cc": {
                    "1": "copy_strings",
                    "22": "copy_string",
                    "3": "copy_string_with_alignment"
                },
                "LAB_00082630": {
                    "1": "check_non_ascii"
                },
                "bVar8": {
                    "1": "is_null",
                    "16": "is_zero_byte",
                    "7": "is_zero"
                },
                "cVar1": {
                    "1": "ch",
                    "27": "current_char"
                },
                "param_1": {
                    "14": "destination",
                    "16": "dest"
                },
                "param_2": {
                    "14": "source",
                    "16": "src"
                },
                "puVar3": {
                    "1": "next_uint_ptr",
                    "2": "temp_pointer1",
                    "3": "next_source",
                    "5": "next_pointer",
                    "6": "next_src"
                },
                "puVar4": {
                    "1": "next_uint_pointer2",
                    "2": "temp_pointer2",
                    "3": "next_pointer2",
                    "4": "next_dest"
                },
                "puVar7": {
                    "1": "result_pointer",
                    "2": "next_dest",
                    "3": "next_destination",
                    "4": "destination_ptr",
                    "6": "dest_ptr"
                },
                "uVar2": {
                    "1": "current_ushort",
                    "27": "current_short"
                },
                "uVar5": {
                    "1": "current_value",
                    "13": "current_word",
                    "2": "current_u_int",
                    "4": "current_int",
                    "6": "current_uint"
                },
                "uVar6": {
                    "1": "current_reversed_word",
                    "2": "temp",
                    "3": "current_byte",
                    "4": "temp_uint"
                },
                "uVar6 != 0": {
                    "1": "non_zero_byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008151c",
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "code": "\nvoid copy_string_000825cc(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_src;\n  uint *next_dest;\n  uint current_word;\n  uint temp_uint;\n  uint *dest_ptr;\n  bool is_zero_byte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    next_dest = src;\n    if (((uint)src & 1) != 0) {\n      next_dest = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = next_dest;\n    if (((uint)next_dest & 2) != 0) {\n      src = (uint *)((int)next_dest + 2);\n      current_short = *(ushort *)next_dest;\n      is_zero_byte = (current_short & 0xff) == 0;\n      if (is_zero_byte) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_zero_byte = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero_byte) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  next_dest = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto check_non_ascii;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    next_dest = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    next_src = next_dest + 1;\n    temp_uint = *next_dest;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = temp_uint;\n    if ((temp_uint + 0xfefefeff & ~temp_uint & 0x80808080) != 0) break;\n    next_dest = next_dest + 2;\n    current_word = *next_src;\n    dest_ptr = dest_ptr + 2;\n    *dest = temp_uint;\n  }\ncheck_non_ascii:\n  do {\n    *(char *)dest = (char)current_word;\n    temp_uint = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp_uint != 0);\n  return;\n}\n\n",
            "current_name": "copy_string_000825cc",
            "entrypoint": "0x000825cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "LAB_00082630": "check_non_ascii",
                "bVar8": "is_zero_byte",
                "cVar1": "current_char",
                "param_1": "dest",
                "param_2": "src",
                "puVar3": "next_src",
                "puVar4": "next_dest",
                "puVar7": "dest_ptr",
                "uVar2": "current_short",
                "uVar5": "current_word",
                "uVar6": "temp_uint"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082688": {
            "additional_data": {
                "0x1f": {
                    "1": "shift_bits"
                },
                "0x80808080": {
                    "1": "zero_check"
                },
                "0xfefefeff": {
                    "1": "check_mask"
                },
                "0xff": {
                    "1": "byte_mask"
                },
                "0xff00": {
                    "1": "byte2_mask"
                },
                "0xff0000": {
                    "1": "byte3_mask"
                },
                "0xfffffffc": {
                    "2": "mask"
                },
                "0xffffffffU": {
                    "2": "full_mask"
                },
                "3": {
                    "1": "int_mask"
                },
                "4U": {
                    "1": "increment"
                },
                "FUN_00082688": {
                    "1": "calculate_num_zeros",
                    "14": "count_leading_zeros",
                    "2": "find_last_nonzero_byte_index",
                    "3": "count_leading_zeroes",
                    "5": "count_trailing_zeros"
                },
                "bVar4": {
                    "1": "is_byte_zero",
                    "26": "is_zero"
                },
                "iVar1": {
                    "1": "result",
                    "10": "leading_zeros",
                    "2": "index",
                    "3": "leading_zeros_count",
                    "4": "count"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_value",
                    "20": "input",
                    "6": "value"
                },
                "puVar2": {
                    "1": "p_value",
                    "18": "ptr",
                    "2": "ptr_value"
                },
                "uVar3": {
                    "1": "first_word",
                    "18": "value",
                    "2": "current_value",
                    "5": "word"
                },
                "uVar5": {
                    "1": "mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008289c",
                "FUN_000814f6",
                "FUN_000810a6"
            ],
            "code": "\nint count_leading_zeros_00082688(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | full_mask >> ((leading_zeros + four & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_00082688",
            "entrypoint": "0x00082688",
            "imported": false,
            "improved": true,
            "renaming": {
                "0xffffffffU": "full_mask",
                "4U": "four",
                "FUN_00082688": "count_leading_zeros_00082688",
                "bVar4": "is_zero",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082824": {
            "additional_data": {
                "FUN_00082824": {
                    "1": "process_function",
                    "22": "process_data"
                },
                "FUN_000839b4": {
                    "1": "process_data"
                },
                "FUN_00083ca8": {
                    "1": "initialize_data"
                },
                "iVar2": {
                    "1": "error_code",
                    "25": "result",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "param_a",
                    "11": "param1",
                    "2": "ptr",
                    "3": "input",
                    "6": "arg1"
                },
                "param_2": {
                    "1": "input_param",
                    "11": "param2",
                    "2": "length",
                    "3": "size",
                    "6": "arg2"
                },
                "param_3": {
                    "1": "ptr_list",
                    "11": "param3",
                    "2": "data_array",
                    "5": "arg3",
                    "6": "data"
                },
                "piVar1": {
                    "1": "data_pointer1",
                    "2": "current_ptr",
                    "3": "current_pointer",
                    "4": "ptr1",
                    "6": "current_data"
                },
                "piVar3": {
                    "1": "remaining_pointer",
                    "2": "remaining_ptr",
                    "3": "remaining_data",
                    "4": "ptr2"
                },
                "puVar5": {
                    "1": "pointer3",
                    "2": "data_ptr",
                    "4": "ptr3",
                    "7": "current_value"
                },
                "uVar4": {
                    "1": "iteration_count",
                    "10": "index",
                    "11": "counter",
                    "6": "count"
                },
                "uVar6": {
                    "1": "current_item_data",
                    "2": "temp_var1",
                    "4": "temp1",
                    "5": "value1",
                    "7": "value"
                },
                "uVar7": {
                    "1": "shifted_val",
                    "2": "temp_var2",
                    "4": "temp2",
                    "5": "value2",
                    "8": "shifted_value"
                }
            },
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint process_data_00082824(undefined4 param1,int param2,int **param3)\n\n{\n  int *current_data;\n  int result;\n  int *ptr2;\n  uint counter;\n  undefined4 *current_value;\n  uint value;\n  uint shifted_value;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = FUN_00083ca8();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  ptr2 = param3[2];\n  current_data = *param3;\n  while (ptr2 != (int *)0x0) {\n    value = current_data[1];\n    shifted_value = value >> 2;\n    if (shifted_value != 0) {\n      current_value = (undefined4 *)(*current_data + -4);\n      counter = 0;\n      do {\n        current_value = current_value + 1;\n        result = FUN_000839b4(param1,*current_value,param2);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (shifted_value != counter);\n      ptr2 = param3[2];\n    }\n    ptr2 = (int *)((int)ptr2 - (value & 0xfffffffc));\n    param3[2] = ptr2;\n    current_data = current_data + 2;\n  }\n  result = 0;\nLAB_00082864:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "current_name": "process_data_00082824",
            "entrypoint": "0x00082824",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "iVar2": "result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "current_data",
                "piVar3": "ptr2",
                "puVar5": "current_value",
                "uVar4": "counter",
                "uVar6": "value",
                "uVar7": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008289c": {
            "additional_data": {
                "FUN_00082688": {
                    "1": "get_format_specifier_size"
                },
                "FUN_00082824": {
                    "1": "handle_format_specifier"
                },
                "FUN_0008289c": {
                    "1": "decode_and_process",
                    "11": "parse_format_string"
                },
                "FUN_000834f0": {
                    "1": "execute_format_specifier"
                },
                "FUN_0008356c": {
                    "1": "check_condition"
                },
                "FUN_00083888": {
                    "1": "perform_cleanup"
                },
                "FUN_000840f8": {
                    "1": "format_unsigned_integer"
                },
                "FUN_00084530": {
                    "1": "format_integer"
                },
                "bVar1": {
                    "1": "is_type1",
                    "2": "is_negative"
                },
                "bVar2": {
                    "1": "is_width"
                },
                "bVar26": {
                    "1": "use_upper_case",
                    "3": "is_negative"
                },
                "bVar3": {
                    "1": "found_octal",
                    "2": "has_precision"
                },
                "bVar5": {
                    "1": "is_precision_specified",
                    "2": "is_zero_padded"
                },
                "cStack_6a": {
                    "1": "local_char_var",
                    "2": "buffer",
                    "4": "temp_char"
                },
                "cVar26": {
                    "1": "is_negative"
                },
                "cVar4": {
                    "1": "flag_character",
                    "2": "char_var4",
                    "3": "char_var",
                    "5": "sign_char"
                },
                "cVar9": {
                    "1": "character_variable_9",
                    "2": "char_var2"
                },
                "iVar15": {
                    "1": "temp_int1",
                    "2": "temp_count"
                },
                "iVar17": {
                    "1": "nested_var2"
                },
                "iVar25": {
                    "1": "is_error"
                },
                "iVar26": {
                    "1": "is_false"
                },
                "iVar8": {
                    "1": "int_value1",
                    "2": "i_var",
                    "3": "index",
                    "4": "return_value",
                    "5": "result"
                },
                "lVar27": {
                    "1": "temp_val",
                    "2": "combined_arg",
                    "4": "longlong_var"
                },
                "local(a)_68": {
                    "1": "format_array"
                },
                "local_64": {
                    "1": "param_3_temp"
                },
                "local_64 [16]": {
                    "1": "local_pointer_array6"
                },
                "local_68": {
                    "1": "char_array2",
                    "2": "local_array"
                },
                "local_68 [4]": {
                    "1": "local_undef_var5"
                },
                "local_69": {
                    "1": "sign_char_replacement"
                },
                "local_6a": {
                    "1": "local_char_variable"
                },
                "local_90": {
                    "1": "null_char"
                },
                "local_94": {
                    "1": "local_double_ptr_var4"
                },
                "local_98": {
                    "1": "local_value_2",
                    "2": "num_args",
                    "3": "arg_count"
                },
                "local_9c": {
                    "1": "arg_pointer_array"
                },
                "local_9f": {
                    "1": "null_char"
                },
                "local_a0": {
                    "1": "specifier_length",
                    "2": "zero_padding_char"
                },
                "local_a1": {
                    "1": "format_char",
                    "2": "local_char_var1",
                    "6": "sign_char"
                },
                "local_c0": {
                    "1": "temp_str",
                    "3": "hex_chars"
                },
                "local_c4": {
                    "1": "local_variable3",
                    "2": "total_length",
                    "3": "result_length",
                    "4": "result"
                },
                "local_c8": {
                    "1": "args_array",
                    "2": "arg_ptr"
                },
                "local_d4": {
                    "1": "remaining_args",
                    "2": "local_variable2"
                },
                "local_dc": {
                    "1": "remaining_args",
                    "2": "local_variable1"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "param1",
                    "4": "input1",
                    "5": "arg1",
                    "6": "format_string"
                },
                "param_2": {
                    "1": "arg_list_length",
                    "2": "format",
                    "3": "param2",
                    "4": "input2",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "output_buffer",
                    "2": "param3",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "num_args",
                    "2": "arg_ptr",
                    "3": "arg_list",
                    "4": "arg4"
                },
                "piVar19": {
                    "1": "temp_pointer",
                    "2": "arg_pointer1"
                },
                "piVar22": {
                    "1": "pointer3",
                    "2": "arg_pointer2"
                },
                "piVar7": {
                    "1": "pointer_value",
                    "2": "arg_pointer"
                },
                "ppiVar10": {
                    "1": "ptr_array_ptr"
                },
                "ppiVar12": {
                    "1": "double_pointer",
                    "2": "arg_ptr"
                },
                "ppiVar16": {
                    "1": "local_pointer_variable2"
                },
                "ppiVar18": {
                    "1": "local_pointer_variable3"
                },
                "ppiVar20": {
                    "1": "local_pointer_variable4"
                },
                "ppiVar23": {
                    "1": "local_pointer_variable5"
                },
                "ppiVar25": {
                    "1": "local_pointer_variable6"
                },
                "pppDataPtr10": {
                    "1": "current_data_ptr"
                },
                "pppDataPtr20": {
                    "1": "input_data_ptr"
                },
                "pppDataPtr23": {
                    "1": "output_data_ptr"
                },
                "ppppDataPtr18": {
                    "1": "input_data_ptr"
                },
                "pppppppiVar10": {
                    "1": "double_ptr_var2",
                    "3": "current_char"
                },
                "pppppppiVar16": {
                    "1": "pointer_16",
                    "2": "temp_ptr"
                },
                "pppppppiVar18": {
                    "1": "pointer_18",
                    "2": "remaining_args"
                },
                "pppppppiVar19": {
                    "1": "arg_width_ptr"
                },
                "pppppppiVar20": {
                    "1": "current_format_specifier"
                },
                "pppppppiVar23": {
                    "1": "save_temp_format_ptr"
                },
                "pppppppiVar25": {
                    "1": "arg_type"
                },
                "pppppppiVar6": {
                    "1": "result_ptr"
                },
                "pppppppiVar9": {
                    "1": "temp_ptr2"
                },
                "pppppppiiVar25": {
                    "1": "value_ptr"
                },
                "ppppppppiVar10": {
                    "1": "format_specifier"
                },
                "ppppppppiVar16": {
                    "1": "pointer_var5"
                },
                "ppppppppiVar18": {
                    "1": "num_ptr"
                },
                "ppppppppiVar23": {
                    "1": "temp_format"
                },
                "ppppppppiVar25": {
                    "1": "ptr_var25"
                },
                "ppppppppiVar6": {
                    "1": "arg_pointer_array",
                    "2": "format_args"
                },
                "uVar11": {
                    "1": "uint_value_1",
                    "3": "ushort_var",
                    "8": "digit"
                },
                "uVar13": {
                    "1": "var13",
                    "2": "flag_bits",
                    "3": "format_flags"
                },
                "uVar14": {
                    "1": "format_char",
                    "3": "byte_var"
                },
                "uVar21": {
                    "1": "uint_var_2"
                },
                "uVar24": {
                    "1": "converted_to_deciaml3",
                    "2": "undefined4_var"
                }
            },
            "called": [
                "FUN_000834f0",
                "FUN_00082824",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_00083888"
            ],
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parse_format_string_0008289c(int format_string,int arg2,int *******arg3,int **arg4)\n\n{\n  bool has_flag;\n  bool has_length_modifier;\n  bool has_precision;\n  char sign_char;\n  bool is_zero_padded;\n  int ********format_args;\n  int *int_pointer;\n  int result;\n  char char_var2;\n  int *******current_char;\n  uint digit;\n  int **ptr_ptr;\n  uint flags;\n  uint ch;\n  int temp_index;\n  int ********double_ptr_var3;\n  int arg_index;\n  int *******remaining_args;\n  int *arg_pointer1;\n  int *******double_ptr_var5;\n  uint temp_value;\n  int *arg_pointer2;\n  int *******double_ptr_var6;\n  undefined4 undefined4_var;\n  int ********temp_pointer;\n  bool is_negative;\n  longlong longlong_var;\n  int *******max_width;\n  int *******local_variable2;\n  int **param4_pointer;\n  int result;\n  char *hex_chars;\n  char sign_char;\n  undefined zero_padding_char;\n  undefined hex_digit_specifier;\n  int ********argptr_local_copy;\n  int arg_count;\n  int *******arg_format_copy;\n  undefined local_undefined4;\n  char temp_char;\n  undefined placeholder_char;\n  undefined local_array [4];\n  int *******padding_buffer [16];\n  \n  if ((format_string != 0) && (*(int *)(format_string + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  flags = (uint)*(ushort *)(arg2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(arg2 + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(arg2 + 0xc) = (short)flags;\n    *(uint *)(arg2 + 100) = *(uint *)(arg2 + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(arg2 + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = FUN_0008356c(format_string,arg2);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(arg2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(arg2 + 0xe)) {\n    result = FUN_000834f0(format_string,arg2,arg3,arg4);\n    return result;\n  }\nLAB_000828ee:\n  hex_chars = (char *)0x0;\n  arg_format_copy = (int *******)0x0;\n  arg_count = 0;\n  result = 0;\n  format_args = (int ********)local_array;\n  param4_pointer = arg4;\n  argptr_local_copy = (int ********)local_array;\nLAB_00082902:\n  current_char = arg3;\n  if ((*(char *)arg3 != '\\0') && (*(char *)arg3 != '%')) {\n    do {\n      current_char = (int *******)((int)current_char + 1);\n      if (*(char *)current_char == '\\0') break;\n    } while (*(char *)current_char != '%');\n    double_ptr_var5 = (int *******)((int)current_char - (int)arg3);\n    if (double_ptr_var5 != (int *******)0x0) {\n      arg_count = arg_count + 1;\n      arg_format_copy = (int *******)((int)arg_format_copy + (int)double_ptr_var5);\n      *format_args = arg3;\n      format_args[1] = double_ptr_var5;\n      if (arg_count < 8) {\n        format_args = format_args + 2;\n      }\n      else {\n        if (arg_format_copy == (int *******)0x0) {\n          result = result + (int)double_ptr_var5;\n          arg_count = 0;\n          format_args = (int ********)local_array;\n          goto LAB_00082952;\n        }\n        result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n        format_args = (int ********)local_array;\n        if (result != 0) goto LAB_00083142;\n      }\n      result = result + (int)double_ptr_var5;\n    }\n  }\nLAB_00082952:\n  if (*(char *)current_char != '\\0') {\n    sign_char = '\\0';\n    ch = (uint)*(byte *)((int)current_char + 1);\n    flags = 0;\n    is_zero_padded = false;\n    has_length_modifier = false;\n    has_flag = false;\n    has_precision = false;\n    is_negative = false;\n    double_ptr_var5 = (int *******)0x0;\n    local_variable2 = (int *******)0xffffffff;\n    arg3 = (int *******)((int)current_char + 1);\nLAB_00082976:\n    arg3 = (int *******)((int)arg3 + 1);\nLAB_0008297a:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (ch != 0) {\n        max_width = (int *******)0x1;\n        local_variable2 = (int *******)0x1;\n        temp_pointer = (int ********)&local_undefined4;\n        local_undefined4 = (char)ch;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      has_precision = true;\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082976;\n    case 0x2a:\n      double_ptr_var5 = (int *******)*param4_pointer;\n      param4_pointer = param4_pointer + 1;\n      if ((int)double_ptr_var5 < 0) {\n        double_ptr_var5 = (int *******)-(int)double_ptr_var5;\n        goto switchD_00082984_caseD_2d;\n      }\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082976;\n    case 0x2b:\n      ch = (uint)*(byte *)arg3;\n      sign_char = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082976;\n    case 0x2e:\n      ch = (uint)*(byte *)arg3;\n      current_char = (int *******)((int)arg3 + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)arg3 + 1);\n        local_variable2 = (int *******)*param4_pointer;\n        param4_pointer = param4_pointer + 1;\n        arg3 = current_char;\n        if ((int)local_variable2 < 0) {\n          local_variable2 = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        temp_value = 0;\n        do {\n          arg3 = (int *******)((int)current_char + 1);\n          ch = (uint)*(byte *)current_char;\n          temp_value = digit + temp_value * 10;\n          digit = ch - 0x30;\n          current_char = arg3;\n        } while (digit < 10);\n        local_variable2 = (int *******)(temp_value | (int)temp_value >> 0x1f);\n      }\n      else {\n        local_variable2 = (int *******)0x0;\n        arg3 = current_char;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      has_length_modifier = true;\n      if (has_flag == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      param4_pointer = (int **)((int)param4_pointer + 7U & 0xfffffff8);\n      arg_pointer1 = *param4_pointer;\n      arg_pointer2 = param4_pointer[1];\n      param4_pointer = param4_pointer + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      has_length_modifier = true;\n      if (has_flag != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)has_length_modifier << 4;\n      temp_index = (uint)has_flag << 5;\n      if ((has_length_modifier == 0) && (temp_index = (uint)is_negative << 6, is_negative != 0)) {\n        arg_pointer1 = (int *)(uint)*(ushort *)param4_pointer;\n        param4_pointer = param4_pointer + 1;\n        arg_pointer2 = (int *)0x0;\n      }\n      else {\n        result = temp_index;\n        arg_pointer1 = *param4_pointer;\n        param4_pointer = param4_pointer + 1;\n        arg_pointer2 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      has_length_modifier = true;\n      if (has_flag != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((has_length_modifier) || (is_negative == false)) {\n        result = 1;\n        arg_pointer1 = *param4_pointer;\n        param4_pointer = param4_pointer + 1;\n        arg_pointer2 = (int *)0x0;\n      }\n      else {\n        arg_pointer2 = (int *)0x0;\n        arg_pointer1 = (int *)(uint)*(ushort *)param4_pointer;\n        param4_pointer = param4_pointer + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hex_chars = \"0123456789ABCDEF\";\n      if (has_flag == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ptr_ptr = (int **)((int)param4_pointer + 7U & 0xfffffff8);\n      param4_pointer = ptr_ptr + 2;\n      arg_pointer1 = *ptr_ptr;\n      arg_pointer2 = ptr_ptr[1];\n      goto LAB_00082d2e;\n    case 99:\n      arg_pointer1 = *param4_pointer;\n      param4_pointer = param4_pointer + 1;\n      max_width = (int *******)0x1;\n      local_undefined4 = SUB41(arg_pointer1,0);\n      local_variable2 = (int *******)0x1;\n      temp_pointer = (int ********)&local_undefined4;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (has_flag != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((has_length_modifier == false) && (is_negative != false)) {\n        arg_pointer1 = (int *)(int)*(short *)param4_pointer;\n        param4_pointer = param4_pointer + 1;\n        arg_pointer2 = (int *)((int)arg_pointer1 >> 0x1f);\n      }\n      else {\n        arg_pointer1 = *param4_pointer;\n        param4_pointer = param4_pointer + 1;\n        arg_pointer2 = (int *)((int)arg_pointer1 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)arg_pointer2 < 0) {\n        is_negative = arg_pointer1 != (int *)0x0;\n        arg_pointer1 = (int *)-(int)arg_pointer1;\n        arg_pointer2 = (int *)(-(int)arg_pointer2 - (uint)is_negative);\n        sign_char = '-';\n        sign_char = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_variable2) {\n        flags = flags & 0xffffff7f;\n      }\n      is_zero_padded = false;\n      ch = (uint)arg_pointer1 | (uint)arg_pointer2;\n      result = 1;\n      sign_char = sign_char;\n      goto joined_r0x00082adc;\n    case 0x68:\n      is_negative = true;\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082976;\n    case 0x6c:\n      ch = (uint)*(byte *)arg3;\n      if (ch == 0x6c) {\n        has_flag = true;\n        ch = (uint)*(byte *)((int)arg3 + 1);\n        arg3 = (int *******)((int)arg3 + 1);\n      }\n      else {\n        has_length_modifier = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (has_flag == false) {\n        if (has_length_modifier == false) {\n          if (is_negative) {\n            arg_pointer1 = *param4_pointer;\n            param4_pointer = param4_pointer + 1;\n            *(short *)arg_pointer1 = (short)result;\n          }\n          else {\n            arg_pointer1 = *param4_pointer;\n            param4_pointer = param4_pointer + 1;\n            *arg_pointer1 = result;\n          }\n        }\n        else {\n          arg_pointer1 = *param4_pointer;\n          param4_pointer = param4_pointer + 1;\n          *arg_pointer1 = result;\n        }\n      }\n      else {\n        arg_pointer1 = *param4_pointer;\n        param4_pointer = param4_pointer + 1;\n        *arg_pointer1 = result;\n        arg_pointer1[1] = result >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (has_flag == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ptr_ptr = (int **)((int)param4_pointer + 7U & 0xfffffff8);\n      param4_pointer = ptr_ptr + 2;\n      arg_pointer1 = *ptr_ptr;\n      arg_pointer2 = ptr_ptr[1];\n      result = 0;\n      break;\n    case 0x70:\n      arg_pointer1 = *param4_pointer;\n      param4_pointer = param4_pointer + 1;\n      hex_digit_specifier = 0x78;\n      is_zero_padded = true;\n      arg_pointer2 = (int *)0x0;\n      zero_padding_char = 0x30;\n      hex_chars = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      has_flag = true;\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082976;\n    case 0x73:\n      temp_pointer = (int ********)*param4_pointer;\n      sign_char = '\\0';\n      param4_pointer = param4_pointer + 1;\n      if (temp_pointer != (int ********)0x0) {\n        if ((int)local_variable2 < 0) {\n          local_variable2 = (int *******)FUN_00082688(temp_pointer);\n          current_char = (int *******)0x0;\n          sign_char = sign_char;\n        }\n        else {\n          result = FUN_000840f8(temp_pointer,0,local_variable2);\n          sign_char = sign_char;\n          if (result == 0) {\n            current_char = (int *******)0x0;\n          }\n          else {\n            remaining_args = (int *******)(result - (int)temp_pointer);\n            if ((int)local_variable2 <= (int)(int *******)(result - (int)temp_pointer)) {\n              remaining_args = local_variable2;\n            }\n            current_char = (int *******)0x0;\n            local_variable2 = remaining_args;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < local_variable2) {\n        local_variable2 = (int *******)0x6;\n      }\n      max_width = (int *******)((uint)local_variable2 & ~((int)local_variable2 >> 0x1f));\n      temp_pointer = (int ********)&UNK_00085728;\nLAB_00082d76:\n      sign_char = '\\0';\n      current_char = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!has_flag) goto LAB_00082ce0;\nLAB_00082bc6:\n      ptr_ptr = (int **)((int)param4_pointer + 7U & 0xfffffff8);\n      param4_pointer = ptr_ptr + 2;\n      arg_pointer1 = *ptr_ptr;\n      arg_pointer2 = ptr_ptr[1];\n      result = 1;\n      break;\n    case 0x78:\n      hex_chars = \"0123456789abcdef\";\n      if (has_flag != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((has_length_modifier == false) && (is_negative != false)) {\n        arg_pointer2 = (int *)0x0;\n        arg_pointer1 = (int *)(uint)*(ushort *)param4_pointer;\n        param4_pointer = param4_pointer + 1;\n      }\n      else {\n        arg_pointer1 = *param4_pointer;\n        param4_pointer = param4_pointer + 1;\n        arg_pointer2 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((has_precision) && (((uint)arg_pointer1 | (uint)arg_pointer2) != 0)) {\n        is_zero_padded = true;\n        zero_padding_char = 0x30;\n        result = 2;\n        hex_digit_specifier = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    sign_char = '\\0';\n    sign_char = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_variable2) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)arg_pointer1 | (uint)arg_pointer2;\njoined_r0x00082adc:\n    longlong_var = CONCAT44(arg_pointer2,arg_pointer1);\n    current_char = local_variable2;\n    if ((ch == 0) && (local_variable2 == (int *******)0x0)) {\n      temp_pointer = (int ********)local_array;\n      if ((result != 0) || (!has_precision)) goto LAB_00082b04;\n      temp_pointer = (int ********)(&temp_char + 1);\n      placeholder_char = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (arg_pointer2 != (int *)0x0 || (int *)0x9 < arg_pointer1) {\n        double_ptr_var3 = (int ********)(&temp_char + 1);\n        do {\n          temp_pointer = double_ptr_var3;\n          undefined4_var = (undefined4)((ulonglong)longlong_var >> 0x20);\n          char_var2 = '\\n';\n          FUN_00084530((int)longlong_var,undefined4_var,10,0);\n          *(char *)temp_pointer = char_var2 + '0';\n          longlong_var = FUN_00084530((int)longlong_var,undefined4_var,10,0);\n          double_ptr_var3 = (int ********)((int)temp_pointer + -1);\n        } while (longlong_var != 0);\n        local_variable2 = (int *******)((int)local_array - (int)temp_pointer);\n        goto LAB_00082b04;\n      }\n      placeholder_char = (char)arg_pointer1 + '0';\n      temp_pointer = (int ********)(&temp_char + 1);\n      goto LAB_00083282;\n    }\n    double_ptr_var3 = (int ********)(&temp_char + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      temp_pointer = double_ptr_var3;\n      ch = (uint)arg_pointer1 & 0xf;\n      arg_pointer1 = (int *)((uint)arg_pointer1 >> 4 | (int)arg_pointer2 << 0x1c);\n      arg_pointer2 = (int *)((uint)arg_pointer2 >> 4);\n      *(char *)temp_pointer = hex_chars[ch];\n      double_ptr_var3 = (int ********)((int)temp_pointer + -1);\n    } while (((uint)arg_pointer1 | (uint)arg_pointer2) != 0);\n    local_variable2 = (int *******)((int)local_array - (int)temp_pointer);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (arg_format_copy != (int *******)0x0) {\n    FUN_00082824(format_string,arg2,&argptr_local_copy);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result;\nLAB_000830e2:\n  do {\n    temp_pointer = double_ptr_var3;\n    int_pointer = (int *)((uint)arg_pointer1 >> 3 | (int)arg_pointer2 << 0x1d);\n    arg_pointer2 = (int *)((uint)arg_pointer2 >> 3);\n    result = ((uint)arg_pointer1 & 7) + 0x30;\n    *(char *)temp_pointer = (char)result;\n    double_ptr_var3 = (int ********)((int)temp_pointer + -1);\n    arg_pointer1 = int_pointer;\n  } while (((uint)int_pointer | (uint)arg_pointer2) != 0);\n  if (has_precision) {\n    if (result == 0x30) {\nLAB_00082afe:\n      local_variable2 = (int *******)((int)local_array - (int)temp_pointer);\n    }\n    else {\n      *(undefined *)((int)temp_pointer + -1) = 0x30;\n      temp_pointer = double_ptr_var3;\n      local_variable2 = (int *******)((int)local_array - (int)double_ptr_var3);\n    }\n  }\n  else {\nLAB_00083282:\n    local_variable2 = (int *******)((int)local_array - (int)temp_pointer);\n  }\nLAB_00082b04:\n  max_width = local_variable2;\n  if ((int)local_variable2 < (int)current_char) {\n    max_width = current_char;\n  }\n  if (sign_char != '\\0') {\n    max_width = (int *******)((int)max_width + 1);\n  }\nLAB_00082b1e:\n  if (is_zero_padded) {\n    max_width = (int *******)((int)max_width + 2);\n  }\n  if ((flags == 0) &&\n     (remaining_args = (int *******)((int)double_ptr_var5 - (int)max_width), 0 < (int)remaining_args)) {\n    if ((int)remaining_args < 0x11) {\n      arg_count = arg_count + 1;\n    }\n    else {\n      do {\n        double_ptr_var6 = remaining_args;\n        result = arg_count + 1;\n        arg_format_copy = arg_format_copy + 4;\n        *format_args = (int *******)0x856f0;\n        format_args[1] = (int *******)0x10;\n        if (result < 8) {\n          temp_index = arg_count + 2;\n          format_args = format_args + 2;\n          arg_count = result;\n        }\n        else if (arg_format_copy == (int *******)0x0) {\n          temp_index = 1;\n          format_args = (int ********)local_array;\n          arg_count = 0;\n        }\n        else {\n          arg_count = result;\n          result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n          if (result != 0) goto LAB_00083142;\n          temp_index = arg_count + 1;\n          format_args = (int ********)local_array;\n        }\n        remaining_args = double_ptr_var6 + -4;\n      } while (0x10 < (int)remaining_args);\n      remaining_args = double_ptr_var6 + -4;\n      arg_count = temp_index;\n    }\n    arg_format_copy = (int *******)((int)arg_format_copy + (int)remaining_args);\n    *format_args = (int *******)0x856f0;\n    format_args[1] = remaining_args;\n    if (arg_count < 8) {\n      result = arg_count + 1;\n      format_args = format_args + 2;\n    }\n    else if (arg_format_copy == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      format_args = (int ********)local_array;\n    }\n    else {\n      result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      format_args = (int ********)local_array;\n    }\n  }\n  else {\n    result = arg_count + 1;\n  }\n  temp_index = result;\n  if (sign_char != '\\0') {\n    arg_format_copy = (int *******)((int)arg_format_copy + 1);\n    temp_index = 1;\n    *format_args = (int *******)&sign_char;\n    format_args[1] = (int *******)0x1;\n    arg_count = result;\n    if (result < 8) {\n      temp_index = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (arg_format_copy == (int *******)0x0) {\n      arg_count = 0;\n      format_args = (int ********)local_array;\n    }\n    else {\n      result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n      if (result != 0) goto LAB_00083142;\n      temp_index = arg_count + 1;\n      format_args = (int ********)local_array;\n    }\n  }\n  result = temp_index;\n  arg_index = arg_count;\n  if (is_zero_padded) {\n    arg_format_copy = (int *******)((int)arg_format_copy + 2);\n    *format_args = (int *******)&zero_padding_char;\n    format_args[1] = (int *******)0x2;\n    if (temp_index < 8) {\n      result = temp_index + 1;\n      arg_index = temp_index;\n      format_args = format_args + 2;\n    }\n    else if (arg_format_copy == (int *******)0x0) {\n      result = 1;\n      arg_index = 0;\n      format_args = (int ********)local_array;\n    }\n    else {\n      arg_count = temp_index;\n      result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      arg_index = arg_count;\n      format_args = (int ********)local_array;\n    }\n  }\n  arg_count = arg_index;\n  if ((flags == 0x80) &&\n     (remaining_args = (int *******)((int)double_ptr_var5 - (int)max_width), 0 < (int)remaining_args)) {\n    if (0x10 < (int)remaining_args) {\n      do {\n        while( true ) {\n          double_ptr_var6 = remaining_args;\n          arg_count = arg_index + 1;\n          arg_format_copy = arg_format_copy + 4;\n          *format_args = (int *******)\"0000000000000000\";\n          format_args[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = arg_index + 2;\n          format_args = format_args + 2;\nLAB_000831f2:\n          arg_index = arg_count;\n          remaining_args = double_ptr_var6 + -4;\n          if ((int)(double_ptr_var6 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (arg_format_copy != (int *******)0x0) {\n          result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n          if (result == 0) {\n            result = arg_count + 1;\n            format_args = (int ********)local_array;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        arg_index = 0;\n        remaining_args = double_ptr_var6 + -4;\n        format_args = (int ********)local_array;\n      } while (0x10 < (int)(double_ptr_var6 + -4));\nLAB_00083218:\n      remaining_args = double_ptr_var6 + -4;\n    }\n    arg_format_copy = (int *******)((int)arg_format_copy + (int)remaining_args);\n    *format_args = (int *******)\"0000000000000000\";\n    format_args[1] = remaining_args;\n    arg_count = result;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (arg_format_copy == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      format_args = (int ********)local_array;\n    }\n    else {\n      result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      format_args = (int ********)local_array;\n    }\n  }\n  current_char = (int *******)((int)current_char - (int)local_variable2);\n  double_ptr_var3 = (int ********)local_array;\n  if ((int)current_char < 1) {\nLAB_0008302a:\n    arg_format_copy = (int *******)((int)arg_format_copy + (int)local_variable2);\n    *format_args = (int *******)temp_pointer;\n    format_args[1] = local_variable2;\n    local_variable2 = arg_format_copy;\n    arg_count = result;\n    if (result < 8) goto LAB_000831be;\n    if (arg_format_copy == (int *******)0x0) {\n      arg_count = 0;\n    }\n    else {\n      result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    temp_index = arg_count;\n    if (0x10 < (int)current_char) {\n      do {\n        while( true ) {\n          remaining_args = current_char;\n          arg_count = temp_index + 1;\n          arg_format_copy = arg_format_copy + 4;\n          *format_args = (int *******)\"0000000000000000\";\n          format_args[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = temp_index + 2;\n          format_args = format_args + 2;\nLAB_00082fe6:\n          temp_index = arg_count;\n          current_char = remaining_args + -4;\n          if ((int)(remaining_args + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (arg_format_copy != (int *******)0x0) {\n          result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n          if (result == 0) {\n            result = arg_count + 1;\n            format_args = (int ********)local_array;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        format_args = (int ********)local_array;\n        temp_index = 0;\n        current_char = remaining_args + -4;\n      } while (0x10 < (int)(remaining_args + -4));\nLAB_0008300e:\n      current_char = remaining_args + -4;\n    }\n    arg_format_copy = (int *******)((int)arg_format_copy + (int)current_char);\n    *format_args = (int *******)\"0000000000000000\";\n    format_args[1] = current_char;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n      goto LAB_0008302a;\n    }\n    if (arg_format_copy != (int *******)0x0) {\n      arg_count = result;\n      result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      format_args = (int ********)local_array;\n      goto LAB_0008302a;\n    }\n    padding_buffer[0] = local_variable2;\n    arg_count = 1;\n    format_args = (int ********)local_array;\n    local_array = (undefined  [4])temp_pointer;\nLAB_000831be:\n    double_ptr_var3 = format_args + 2;\n    arg_format_copy = local_variable2;\n  }\n  if (((flags & 4) != 0) &&\n     (current_char = (int *******)((int)double_ptr_var5 - (int)max_width), 0 < (int)current_char)) {\n    result = arg_count;\n    if ((int)current_char < 0x11) {\n      temp_index = arg_count + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          arg_count = result + 1;\n          arg_format_copy = arg_format_copy + 4;\n          *double_ptr_var3 = (int *******)0x856f0;\n          double_ptr_var3[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          temp_index = result + 2;\n          double_ptr_var3 = double_ptr_var3 + 2;\nLAB_0008307a:\n          current_char = current_char + -4;\n          result = arg_count;\n          if ((int)current_char < 0x11) goto LAB_000830a2;\n        }\n        if (arg_format_copy != (int *******)0x0) {\n          result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n          if (result == 0) {\n            temp_index = arg_count + 1;\n            double_ptr_var3 = (int ********)local_array;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        current_char = current_char + -4;\n        temp_index = 1;\n        result = 0;\n        double_ptr_var3 = (int ********)local_array;\n      } while (0x10 < (int)current_char);\n    }\nLAB_000830a2:\n    arg_format_copy = (int *******)((int)arg_format_copy + (int)current_char);\n    *double_ptr_var3 = (int *******)0x856f0;\n    double_ptr_var3[1] = current_char;\n    arg_count = temp_index;\n    if (7 < temp_index) {\n      if (arg_format_copy == (int *******)0x0) {\n        if ((int)max_width < (int)double_ptr_var5) {\n          max_width = double_ptr_var5;\n        }\n        result = result + (int)max_width;\n        goto LAB_00083186;\n      }\n      result = FUN_00082824(format_string,arg2,&argptr_local_copy);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)max_width < (int)double_ptr_var5) {\n    max_width = double_ptr_var5;\n  }\n  result = result + (int)max_width;\n  if ((arg_format_copy != (int *******)0x0) &&\n     (result = FUN_00082824(format_string,arg2,&argptr_local_copy), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  arg_count = 0;\n  format_args = (int ********)local_array;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = ch - 0x30;\n  double_ptr_var5 = (int *******)0x0;\n  current_char = arg3;\n  do {\n    arg3 = (int *******)((int)current_char + 1);\n    ch = (uint)*(byte *)current_char;\n    double_ptr_var5 = (int *******)(digit + (int)double_ptr_var5 * 10);\n    digit = ch - 0x30;\n    current_char = arg3;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  ch = (uint)*(byte *)arg3;\n  if (sign_char == '\\0') {\n    sign_char = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "current_name": "parse_format_string_0008289c",
            "entrypoint": "0x0008289c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008289c": "parse_format_string_0008289c",
                "bVar1": "has_flag",
                "bVar2": "has_length_modifier",
                "bVar26": "is_negative",
                "bVar3": "has_precision",
                "bVar5": "is_zero_padded",
                "cStack_6a": "temp_char",
                "cVar4": "sign_char",
                "cVar9": "char_var2",
                "iVar15": "temp_index",
                "iVar17": "arg_index",
                "iVar25": "is_error",
                "iVar8": "result",
                "lVar27": "longlong_var",
                "local_64": "padding_buffer",
                "local_68": "local_array",
                "local_69": "placeholder_char",
                "local_90": "local_undefined4",
                "local_94": "arg_format_copy",
                "local_98": "arg_count",
                "local_9c": "argptr_local_copy",
                "local_9f": "hex_digit_specifier",
                "local_a0": "zero_padding_char",
                "local_a1": "sign_char",
                "local_c0": "hex_chars",
                "local_c4": "result",
                "local_c8": "param4_pointer",
                "local_d4": "local_variable2",
                "local_dc": "max_width",
                "param_1": "format_string",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "piVar19": "arg_pointer1",
                "piVar22": "arg_pointer2",
                "piVar7": "int_pointer",
                "ppiVar10": "ptr_array_ptr",
                "ppiVar12": "ptr_ptr",
                "ppiVar16": "temp_array_ptr",
                "ppiVar18": "local_pointer_variable3",
                "ppiVar20": "local_pointer_variable4",
                "ppiVar23": "local_pointer_variable5",
                "ppiVar25": "local_pointer_variable6",
                "pppppppiVar10": "current_char",
                "pppppppiVar16": "temp_ptr",
                "pppppppiVar18": "remaining_args",
                "pppppppiVar20": "double_ptr_var5",
                "pppppppiVar23": "double_ptr_var6",
                "pppppppiVar25": "temp_format_ptr_copy",
                "pppppppiVar6": "result_ptr",
                "ppppppppiVar16": "double_ptr_var3",
                "ppppppppiVar25": "temp_pointer",
                "ppppppppiVar6": "format_args",
                "uVar11": "digit",
                "uVar13": "flags",
                "uVar14": "ch",
                "uVar21": "temp_value",
                "uVar24": "undefined4_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000834f0": {
            "additional_data": {
                "FUN_0008289c": {
                    "1": "initialize_buffer"
                },
                "FUN_000834f0": {
                    "1": "decode_and_modify",
                    "5": "process_data"
                },
                "FUN_00083850": {
                    "1": "process_sub_function2"
                },
                "auStack_420": {
                    "1": "temporary_buffer",
                    "2": "data_buffer",
                    "7": "stack_array",
                    "8": "stack_buffer"
                },
                "iVar1": {
                    "1": "result_code",
                    "16": "result",
                    "2": "return_value",
                    "6": "result1"
                },
                "iVar2": {
                    "1": "result_2",
                    "3": "check_result",
                    "5": "sub_result",
                    "7": "result2"
                },
                "local_424": {
                    "1": "local_var6",
                    "2": "value4"
                },
                "local_464": {
                    "1": "local_value7",
                    "2": "value2",
                    "3": "value3"
                },
                "local_46c": {
                    "1": "data_offset",
                    "2": "value4",
                    "3": "value2"
                },
                "local_470": {
                    "1": "local_var3",
                    "2": "value3",
                    "3": "local_var6"
                },
                "local_474": {
                    "1": "buffer_size1",
                    "2": "local_size2",
                    "3": "local_var5",
                    "4": "buffer_size_2",
                    "6": "buffer_size2"
                },
                "local_478": {
                    "1": "pointer_value",
                    "10": "buffer",
                    "2": "buffer_ptr",
                    "3": "local_var4",
                    "4": "buffer_pointer"
                },
                "local_47a": {
                    "1": "local_value",
                    "2": "data_value",
                    "3": "local_var3",
                    "7": "value"
                },
                "local_47c": {
                    "1": "param_7",
                    "2": "value1",
                    "3": "local_var2",
                    "4": "modified_value",
                    "6": "masked_value"
                },
                "local_480": {
                    "1": "buffer_size_1",
                    "15": "buffer_size",
                    "4": "buffer_size1"
                },
                "local_488": {
                    "1": "string_pointers",
                    "4": "buffer",
                    "9": "buffer_array"
                },
                "local_488[0]": {
                    "1": "stack_array"
                },
                "local_488[2]": {
                    "1": "temporary_buffer[2]"
                },
                "param_1": {
                    "1": "param",
                    "2": "first_param",
                    "4": "input_param",
                    "8": "param1"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "second_param",
                    "3": "binary_param",
                    "4": "arg2",
                    "8": "param2"
                }
            },
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint process_data_000834f0(undefined4 param1,int param2)\n\n{\n  int result;\n  int result2;\n  undefined *local_array [2];\n  undefined4 buffer_size;\n  ushort flag;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_size2;\n  undefined4 zero_value;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined stack_buffer [1024];\n  \n  value4 = *(undefined4 *)(param2 + 100);\n  value2 = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  value3 = *(undefined4 *)(param2 + 0x24);\n  stack_array = stack_buffer;\n  flag = *(ushort *)(param2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size2 = 0x400;\n  zero_value = 0;\n  buffer = stack_array;\n  result = FUN_0008289c(param1,local_array);\n  if ((-1 < result) && (result2 = FUN_00083850(param1,local_array), result2 != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_000834f0",
            "entrypoint": "0x000834f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "auStack_420": "stack_buffer",
                "iVar1": "result",
                "iVar2": "result2",
                "local_424": "value4",
                "local_464": "value3",
                "local_46c": "value2",
                "local_470": "zero_value",
                "local_474": "buffer_size2",
                "local_478": "buffer",
                "local_47a": "value",
                "local_47c": "flag",
                "local_480": "buffer_size",
                "local_488": "local_array",
                "local_488[0]": "stack_array",
                "param_1": "param1",
                "param_2": "param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008356c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "2": "relocation_array"
                },
                "FUN_0008356c": {
                    "1": "validate_data",
                    "11": "process_data",
                    "2": "process_function"
                },
                "FUN_00083888": {
                    "1": "perform_action",
                    "2": "handle_error"
                },
                "FUN_00083b10": {
                    "1": "cleanup_data"
                },
                "FUN_00084018": {
                    "1": "perform_operation",
                    "3": "process_data"
                },
                "iVar1": {
                    "1": "flag_value",
                    "2": "temp1",
                    "6": "temp_var1",
                    "7": "value1"
                },
                "iVar2": {
                    "1": "temp_variable2",
                    "2": "var2",
                    "6": "temp_var2",
                    "7": "value2"
                },
                "param_1": {
                    "1": "result_status",
                    "12": "result",
                    "2": "output_param",
                    "3": "output_status",
                    "6": "output"
                },
                "param_2": {
                    "1": "input_values",
                    "10": "data",
                    "2": "input_param",
                    "4": "input_data",
                    "7": "input"
                },
                "uVar3": {
                    "1": "uint_val",
                    "2": "value",
                    "4": "temp_value",
                    "6": "temp_var3"
                },
                "uVar4": {
                    "1": "ushort_val",
                    "2": "temp2",
                    "3": "temp_flag",
                    "6": "temp_var4"
                }
            },
            "called": [
                "FUN_00083b10",
                "FUN_00084018",
                "FUN_00083888"
            ],
            "calling": [
                "FUN_0008289c",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "code": "\nundefined4 process_data_0008356c(undefined4 *result,int *data)\n\n{\n  int value1;\n  int value2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((relocation_array[140].r_offset != 0) &&\n     (*(int *)(relocation_array[140].r_offset + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  temp_var4 = *(ushort *)(data + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    value2 = data[4];\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          FUN_00083b10(result);\n          temp_var4 = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      value2 = data[4];\n      temp_var4 = temp_var4 & 0xffdb;\n      *data = value2;\n      data[1] = 0;\n    }\n    else {\n      value2 = data[4];\n    }\n    *(ushort *)(data + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((value2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    FUN_00084018(result,data);\n    temp_var3 = (uint)*(ushort *)(data + 3);\n    value2 = data[4];\n  }\n  if ((temp_var3 & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      value1 = data[5];\n    }\n    data[2] = value1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0008356c",
            "entrypoint": "0x0008356c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_0008356c": "process_data_0008356c",
                "iVar1": "value1",
                "iVar2": "value2",
                "param_1": "result",
                "param_2": "data",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000836d8": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000836d8",
            "entrypoint": "0x000836d8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000836ec": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "elf_rel_array",
                    "3": "array"
                },
                "Elf32_Rel_ARRAY_20070000[48].r_offset": {
                    "1": "array"
                },
                "FUN_00080eec": {
                    "1": "calculate_var",
                    "2": "get_data",
                    "4": "get_relocation_value"
                },
                "FUN_000817f0": {
                    "17": "allocate_memory"
                },
                "FUN_000836ec": {
                    "1": "update_data",
                    "2": "initialize_memory",
                    "4": "initialize_data",
                    "5": "initialize_function"
                },
                "FUN_000841e4": {
                    "1": "set_initial_value",
                    "2": "initialize_value",
                    "3": "initialize_counter"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jump_table_pointer",
                    "2": "jump_table_func",
                    "3": "unrecovered_jump_table",
                    "8": "jump_table"
                },
                "dVar2": {
                    "1": "value_to_insert",
                    "10": "result",
                    "4": "value"
                },
                "iVar3": {
                    "1": "array_index",
                    "10": "index",
                    "4": "counter"
                },
                "param_1": {
                    "1": "size"
                },
                "pdVar1": {
                    "1": "memory_array",
                    "3": "data_pointer"
                }
            },
            "called": [
                "FUN_000841e4",
                "FUN_00080eec",
                "FUN_000817f0"
            ],
            "calling": [
                "FUN_000816f8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initialize_function_000836ec(void)\n\n{\n  dword *data_pointer;\n  dword result;\n  int index;\n  code *jump_table;\n  \n  FUN_000841e4(6);\n  jump_table = (code *)0x836fb;\n  result = FUN_00080eec(1);\n  if (array == 0) {\n    array = 0x20070184;\n  }\n  index = *(int *)(array + 4);\n  data_pointer = (dword *)array;\n  if (0x1f < index) {\n    data_pointer = (dword *)FUN_000817f0(400);\n    if (data_pointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *data_pointer = array;\n    data_pointer[1] = 0;\n    index = 0;\n    array = (dword)data_pointer;\n    data_pointer[0x62] = 0;\n    data_pointer[99] = 0;\n  }\n  data_pointer[1] = index + 1;\n  data_pointer[index + 2] = result;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "initialize_function_000836ec",
            "entrypoint": "0x000836ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "Elf32_Rel_ARRAY_20070000[48].r_offset": "array",
                "FUN_000836ec": "initialize_function_000836ec",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "dVar2": "result",
                "iVar3": "index",
                "pdVar1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083850": {
            "additional_data": {
                "FUN_00083850": {
                    "1": "decode_data",
                    "15": "process_data"
                },
                "FUN_00083888": {
                    "1": "reset_header"
                },
                "iVar1": {
                    "1": "temp_var1"
                },
                "iVar2": {
                    "1": "temp_variable_1",
                    "2": "variable1",
                    "3": "temp_var"
                },
                "iVar5": {
                    "1": "variable2",
                    "2": "var5",
                    "3": "int_var5"
                },
                "iVar7": {
                    "1": "temp_value_5",
                    "2": "temp_var",
                    "3": "temp_var7"
                },
                "param_1": {
                    "1": "array1",
                    "15": "input_array",
                    "2": "data_pointer",
                    "3": "data_buffer",
                    "5": "input_data"
                },
                "param_2": {
                    "1": "destination_buffer",
                    "13": "output_array",
                    "2": "info",
                    "5": "output_data"
                },
                "pcVar6": {
                    "1": "func_ptr",
                    "15": "function_pointer",
                    "2": "callback_func",
                    "3": "callback",
                    "8": "function_ptr"
                },
                "piVar1": {
                    "1": "ptr_var1",
                    "2": "pointer1",
                    "6": "pointer_var1",
                    "7": "temp_ptr"
                },
                "uVar3": {
                    "1": "variable2",
                    "2": "flags",
                    "3": "ushort_var",
                    "5": "flag"
                },
                "uVar4": {
                    "1": "temp1",
                    "2": "temp",
                    "3": "uint_var"
                },
                "unaff_r4": {
                    "1": "temp_undefined4",
                    "11": "return_value",
                    "2": "unaff_r4",
                    "6": "result"
                }
            },
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "code": "\nundefined4 process_data_00083850(int *input_array,int *output_array)\n\n{\n  int *temp_ptr;\n  int temp_var;\n  ushort flag;\n  uint flag2;\n  int temp_var2;\n  code *function_pointer;\n  undefined4 return_value;\n  int int_var7;\n  \n  if ((input_array != (int *)0x0) && (input_array[0xe] == 0)) {\n    FUN_00083888();\n  }\n  if (*(short *)(output_array + 3) == 0) {\n    return 0;\n  }\n  flag = *(ushort *)(output_array + 3);\n  if ((int)((uint)flag << 0x1c) < 0) {\n    int_var7 = output_array[4];\n    if (int_var7 == 0) {\n      return 0;\n    }\n    temp_var = *output_array;\n    if ((flag & 3) == 0) {\n      temp_var2 = output_array[5];\n    }\n    else {\n      temp_var2 = 0;\n    }\n    *output_array = int_var7;\n    temp_var = temp_var - int_var7;\n    output_array[2] = temp_var2;\n    do {\n      if (temp_var < 1) {\n        return 0;\n      }\n      temp_var2 = (*(code *)output_array[9])(input_array,output_array[7],int_var7,temp_var,return_value);\n      temp_var = temp_var - temp_var2;\n      int_var7 = int_var7 + temp_var2;\n    } while (0 < temp_var2);\nLAB_000837c8:\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_array + 3) = flag | 0x800;\n  if ((output_array[1] < 1) && (output_array[0xf] < 1)) {\n    return 0;\n  }\n  function_pointer = (code *)output_array[10];\n  if (function_pointer == (code *)0x0) {\n    return 0;\n  }\n  flag2 = (uint)(flag | 0x800);\n  int_var7 = *input_array;\n  *input_array = 0;\n  if ((flag & 0x1000) == 0) {\n    temp_var = (*function_pointer)(input_array,output_array[7],flag2 & 0x1000,1);\n    if ((temp_var == -1) && (temp_var2 = *input_array, temp_var2 != 0)) {\n      if ((temp_var2 == 0x1d) || (temp_var2 == 0x16)) {\n        *input_array = int_var7;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    flag2 = (uint)*(ushort *)(output_array + 3);\n    function_pointer = (code *)output_array[10];\n  }\n  else {\n    temp_var = output_array[0x14];\n  }\n  if (((int)(flag2 << 0x1d) < 0) && (temp_var = temp_var - output_array[1], output_array[0xc] != 0)) {\n    temp_var = temp_var - output_array[0xf];\n  }\n  temp_var = (*function_pointer)(input_array,output_array[7],temp_var,0);\n  if (temp_var == -1) {\n    temp_var2 = *input_array;\n    if (temp_var2 != 0) {\n      if ((temp_var2 != 0x1d) && (temp_var2 != 0x16)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xf7ff;\n      *output_array = output_array[4];\n      output_array[1] = 0;\n      goto LAB_00083774;\n    }\n    flag = *(ushort *)(output_array + 3) & 0xf7ff;\n    output_array[1] = 0;\n    *(ushort *)(output_array + 3) = flag;\n    *output_array = output_array[4];\n  }\n  else {\n    flag = *(ushort *)(output_array + 3) & 0xf7ff;\n    *output_array = output_array[4];\n    *(ushort *)(output_array + 3) = flag;\n    output_array[1] = 0;\n  }\n  if ((int)((uint)flag << 0x13) < 0) {\n    output_array[0x14] = temp_var;\n  }\nLAB_00083774:\n  temp_ptr = (int *)output_array[0xc];\n  *input_array = int_var7;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != output_array + 0x10) {\n    FUN_00083b10(input_array);\n  }\n  output_array[0xc] = 0;\n  return 0;\n}\n\n",
            "current_name": "process_data_00083850",
            "entrypoint": "0x00083850",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "iVar1": "temp_var1",
                "iVar2": "temp_var",
                "iVar5": "temp_var2",
                "iVar7": "int_var7",
                "param_1": "input_array",
                "param_2": "output_array",
                "pcVar6": "function_pointer",
                "piVar1": "temp_ptr",
                "uVar3": "flag",
                "uVar4": "flag2",
                "unaff_r4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083888": {
            "additional_data": {
                "&LAB_0008387c_1": {
                    "1": "label1"
                },
                "&LAB_0008429c_1": {
                    "1": "label2"
                },
                "(int)puVar1 + 0xe": {
                    "1": "buffer1[14]"
                },
                "(int)puVar2 + 0xe": {
                    "1": "buffer2[14]"
                },
                "*(undefined4 **)(param_1 + 0xc)": {
                    "1": "data_structure->field10"
                },
                "*(undefined4 **)(param_1 + 4)": {
                    "1": "data_structure->field2"
                },
                "*(undefined4 **)(param_1 + 8)": {
                    "1": "data_structure->field9"
                },
                "**(int *)(param_1 + 0x38)": {
                    "1": "data_structure->field1"
                },
                "FUN_00081f00": {
                    "3": "initialize_array"
                },
                "FUN_00083888": {
                    "1": "initialize_device",
                    "21": "initialize_data_structures",
                    "3": "initialize_function",
                    "5": "initialize_data"
                },
                "LAB_0008387c_1": {
                    "1": "data_label4"
                },
                "param_1": {
                    "1": "data_structures_address",
                    "2": "param",
                    "3": "data_structures",
                    "5": "base_address"
                },
                "param_1 + 0x2e0": {
                    "1": "data_structure->field6"
                },
                "param_1 + 0x2e4": {
                    "1": "data_structure->field4"
                },
                "param_1 + 0x2e8": {
                    "1": "data_structure->field5"
                },
                "param_1 + 0x38": {
                    "1": "data_structure->field1"
                },
                "param_1 + 0x3c": {
                    "1": "data_structure->field3"
                },
                "param_1 + 0xc": {
                    "1": "data_structure->field10"
                },
                "param_1 + 4": {
                    "1": "data_structure->field2"
                },
                "param_1 + 8": {
                    "1": "data_structure->field9"
                },
                "param_1+0x2e0": {
                    "1": "data_value3"
                },
                "param_1+0x2e4": {
                    "1": "data_value1"
                },
                "param_1+0x2e8": {
                    "1": "data_value2"
                },
                "param_1+0x38": {
                    "1": "data_value14"
                },
                "param_1+0x3c": {
                    "1": "data_label1"
                },
                "param_1+0xc": {
                    "1": "data_structure_pointer2"
                },
                "param_1+4": {
                    "1": "data_structure_pointer1"
                },
                "param_1+8": {
                    "1": "data_structure_pointer3"
                },
                "param_2": {
                    "2": "value"
                },
                "param_3": {
                    "2": "length"
                },
                "pntr_1": {
                    "1": "ptr1"
                },
                "puVar1": {
                    "1": "array1",
                    "2": "data_struct1",
                    "3": "data_structure1",
                    "6": "ptr1"
                },
                "puVar1 + 3": {
                    "1": "buffer1[3]"
                },
                "puVar1+0x17": {
                    "1": "data_pointer15"
                },
                "puVar1+0x19": {
                    "1": "data_pointer4"
                },
                "puVar1+1": {
                    "1": "data_pointer2"
                },
                "puVar1+2": {
                    "1": "data_pointer3"
                },
                "puVar1+3": {
                    "1": "data_value4"
                },
                "puVar1+4": {
                    "1": "data_pointer5"
                },
                "puVar1+5": {
                    "1": "data_pointer6"
                },
                "puVar1+6": {
                    "1": "data_pointer7"
                },
                "puVar1[0xb]": {
                    "1": "data_label3"
                },
                "puVar1[10]": {
                    "1": "data_value13"
                },
                "puVar1[4]": {
                    "1": "data_pointer16"
                },
                "puVar1[5]": {
                    "1": "data_pointer17"
                },
                "puVar1[6]": {
                    "1": "data_pointer18"
                },
                "puVar1[7]": {
                    "1": "data_pointer19"
                },
                "puVar1[8]": {
                    "1": "data_value11"
                },
                "puVar1[9]": {
                    "1": "data_value12"
                },
                "puVar2": {
                    "1": "data_pointer2",
                    "2": "param2",
                    "3": "data_structure2",
                    "6": "ptr2"
                },
                "puVar2 + 3": {
                    "1": "data_structure2->field7"
                },
                "puVar2+0x19": {
                    "1": "data_pointer11"
                },
                "puVar2+0xe": {
                    "1": "data_value7"
                },
                "puVar2+1": {
                    "1": "data_pointer9"
                },
                "puVar2+2": {
                    "1": "data_pointer10"
                },
                "puVar2+3": {
                    "1": "data_value5"
                },
                "puVar2+4": {
                    "1": "data_pointer12"
                },
                "puVar2+5": {
                    "1": "data_pointer13"
                },
                "puVar2+6": {
                    "1": "data_pointer14"
                }
            },
            "called": [
                "FUN_00081f00"
            ],
            "calling": [
                "FUN_0008289c",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "code": "\nvoid initialize_data_structures_00083888(int base_address)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(base_address + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(base_address + 4);\n    *(undefined **)(base_address + 0x3c) = label_ptr;\n    *(undefined4 *)(base_address + 0x2e4) = 3;\n    *(int *)(base_address + 0x2e8) = base_address + 0x2ec;\n    *(undefined4 *)(base_address + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    data_pointer16 = 0;\n    data_pointer17 = 0;\n    data_pointer18 = 0;\n    FUN_00081f00(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(base_address + 8);\n    data_pointer19 = ptr1;\n    data_value11 = 0x84221;\n    data_value12 = 0x84245;\n    data_value13 = 0x8427d;\n    data_label3 = data_label5;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    FUN_00081f00(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(base_address + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = data_label5;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    data_pointer16 = 0;\n    data_pointer17 = 0;\n    data_pointer18 = 0;\n    FUN_00081f00(ptr1 + 0x17,0,8);\n    data_pointer19 = ptr1;\n    data_value11 = 0x84221;\n    data_value12 = 0x84245;\n    data_value13 = 0x8427d;\n    data_label3 = data_label5;\n    *(undefined4 *)(base_address + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00083888",
            "entrypoint": "0x00083888",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_0008387c_1": "label_ptr",
                "&LAB_0008429c_1": "data_label5",
                "FUN_00083888": "initialize_data_structures_00083888",
                "LAB_0008387c_1": "data_label4",
                "param_1": "base_address",
                "puVar1": "ptr1",
                "puVar1[0xb]": "data_label3",
                "puVar1[10]": "data_value13",
                "puVar1[4]": "data_pointer16",
                "puVar1[5]": "data_pointer17",
                "puVar1[6]": "data_pointer18",
                "puVar1[7]": "data_pointer19",
                "puVar1[8]": "data_value11",
                "puVar1[9]": "data_value12",
                "puVar2": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008397c": {
            "called": [],
            "calling": [
                "FUN_00084484"
            ],
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008397c",
            "entrypoint": "0x0008397c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083980": {
            "called": [],
            "calling": [
                "FUN_00084484"
            ],
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083980",
            "entrypoint": "0x00083980",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000839b4": {
            "additional_data": {
                "*param_3": {
                    "1": "buffer_ptr"
                },
                "FUN_000839b4": {
                    "1": "copy_bytes_with_limit",
                    "26": "process_data"
                },
                "FUN_0008400c": {
                    "1": "check_condition"
                },
                "FUN_000842a4": {
                    "1": "process_data_sub2"
                },
                "FUN_0008434c": {
                    "1": "process_data_sub1"
                },
                "abStack_1b": {
                    "1": "bytes_array",
                    "13": "byte_array",
                    "2": "data_stack",
                    "7": "stack_array"
                },
                "iVar1": {
                    "1": "error_code",
                    "20": "result",
                    "3": "return_value",
                    "7": "status"
                },
                "local_1c": {
                    "1": "current_value",
                    "10": "temp_byte",
                    "2": "current_byte",
                    "3": "byte_var",
                    "7": "byte_value"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "param1",
                    "2": "param_ptr",
                    "3": "param",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "input_size",
                    "3": "size",
                    "6": "data_size",
                    "7": "length",
                    "8": "param2"
                },
                "param_3": {
                    "1": "input_data",
                    "11": "data",
                    "2": "data_ptr",
                    "5": "buffer",
                    "6": "param3"
                },
                "pbVar4": {
                    "1": "input_byte_ptr",
                    "2": "data_ptr",
                    "4": "byte_ptr",
                    "5": "current_ptr",
                    "6": "current_byte"
                },
                "uVar2": {
                    "1": "is_single_byte",
                    "3": "status",
                    "4": "result",
                    "6": "is_success"
                },
                "uVar3": {
                    "1": "byte_to_write",
                    "11": "current_byte",
                    "2": "data_byte",
                    "5": "value",
                    "9": "byte_value"
                },
                "uVar5": {
                    "1": "iteration",
                    "10": "counter",
                    "14": "index",
                    "2": "iteration_count",
                    "3": "count"
                }
            },
            "called": [
                "FUN_0008434c",
                "FUN_0008400c",
                "FUN_000842a4"
            ],
            "calling": [
                "FUN_00082824"
            ],
            "code": "\nuint process_data_000839b4(undefined4 param1,uint param2,byte **data)\n\n{\n  int result;\n  uint is_success;\n  uint current_byte;\n  byte *current_byte;\n  uint index;\n  byte temp_byte;\n  byte byte_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  result = FUN_0008400c();\n  if ((result == 1) && (param2 - 1 < 0xff)) {\n    current_byte = param2 & 0xff;\n    temp_byte = (byte)current_byte;\n    is_success = 1;\n  }\n  else {\n    is_success = FUN_0008434c(param1,&temp_byte,param2,data + 0x17);\n    if (is_success == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (is_success == 0) {\n      return param2;\n    }\n    current_byte = (uint)temp_byte;\n  }\n  index = 0;\n  do {\n    current_byte = data[2] + -1;\n    data[2] = current_byte;\n    if ((int)current_byte < 0) {\n      if ((int)data[6] <= (int)current_byte) {\n        **data = (byte)current_byte;\n        current_byte = *data;\n        current_byte = (uint)*current_byte;\n        if (current_byte != 10) goto LAB_00083a04;\n      }\n      result = FUN_000842a4(param1,current_byte,data);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)current_byte;\n      current_byte = *data;\nLAB_00083a04:\n      *data = current_byte + 1;\n    }\n    if (is_success <= index + 1) {\n      return param2;\n    }\n    current_byte = (uint)byte_array[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_data_000839b4",
            "entrypoint": "0x000839b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "abStack_1b": "byte_array",
                "iVar1": "result",
                "local_1c": "temp_byte",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "pbVar4": "current_byte",
                "uVar2": "is_success",
                "uVar3": "current_byte",
                "uVar5": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083a74": {
            "additional_data": {
                "*(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4)": {
                    "1": "extracted_value"
                },
                "141": {
                    "2": "index"
                },
                "DAT_2007121c": {
                    "1": "modified_value",
                    "2": "data_offset",
                    "4": "data_value"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "3": "rel_array"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info": {
                    "1": "rel_info"
                },
                "Elf32_Rel_ARRAY_20070000[141].r_info + 4": {
                    "1": "rel_info_plus_4"
                },
                "Elf32_Rel_ARRAY_20070000[270].r_offset": {
                    "1": "other_rel_offset"
                },
                "FUNC_00081f94": {
                    "1": "initialize_resources",
                    "2": "perform_initialization",
                    "6": "initialize"
                },
                "FUNC_00081f98": {
                    "1": "finalize_process",
                    "3": "cleanup"
                },
                "FUNC_0008236c": {
                    "1": "adjust_offset"
                },
                "FUN_0008236c": {
                    "1": "perform_operation",
                    "3": "adjust_offset"
                },
                "FUN_00083a74": {
                    "1": "reverse_offset"
                },
                "elf32_Rel_ARRAY_20070000[270].r_offset": {
                    "1": "offset_270"
                },
                "iVar1": {
                    "1": "partial_match",
                    "2": "result_1",
                    "22": "result"
                },
                "iVar3": {
                    "1": "calculated_var",
                    "12": "adjusted_offset",
                    "2": "calculated_offset",
                    "3": "adjusted_value",
                    "6": "new_offset"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "param",
                    "5": "arg1",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "input_2",
                    "19": "offset",
                    "2": "param2",
                    "4": "arg2"
                },
                "uVar2": {
                    "1": "original_value",
                    "2": "value",
                    "3": "adjusted_offset",
                    "4": "rel_info"
                }
            },
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "calling": [
                "FUN_00083b10"
            ],
            "code": "\nundefined4 reverse_binary_code_00083a74(undefined4 input_param,int offset)\n\n{\n  int result;\n  uint rel_info;\n  int adjusted_offset;\n  \n  FUNC_00081f94();\n  rel_info = *(uint *)(rel_info + 4) & 0xfffffffc;\n  adjusted_offset = ((rel_info - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_offset) {\n    result = FUN_0008236c(input_param,0);\n    if (result == rel_info + rel_info) {\n      result = FUN_0008236c(input_param,-adjusted_offset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - adjusted_offset;\n        *(uint *)(rel_info + 4) = rel_info - adjusted_offset | 1;\n        FUNC_00081f98(input_param);\n        return 1;\n      }\n      adjusted_offset = FUN_0008236c(input_param,0);\n      if (0xf < (int)(adjusted_offset - rel_info)) {\n        DAT_2007121c = adjusted_offset - other_rel_offset;\n        *(dword *)(rel_info + 4) =\n             adjusted_offset - rel_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(input_param);\n  return 0;\n}\n\n",
            "current_name": "reverse_binary_code_00083a74",
            "entrypoint": "0x00083a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "Elf32_Rel_ARRAY_20070000[141].r_info": "rel_info",
                "Elf32_Rel_ARRAY_20070000[270].r_offset": "other_rel_offset",
                "FUN_00083a74": "reverse_binary_code_00083a74",
                "iVar1": "result",
                "iVar3": "adjusted_offset",
                "param_1": "input_param",
                "param_2": "offset",
                "uVar2": "rel_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083b10": {
            "additional_data": {
                "DAT_20071218": {
                    "1": "magic_value"
                },
                "FUNC_00081f94": {
                    "1": "initialize_relocation_table",
                    "2": "initialize"
                },
                "FUNC_00081f98": {
                    "1": "finalize_function",
                    "2": "cleanup"
                },
                "FUN_00083a74": {
                    "1": "perform_magic"
                },
                "FUN_00083b10": {
                    "1": "update_relocation_table",
                    "2": "process_relocations",
                    "4": "process_relocation"
                },
                "bVar2": {
                    "1": "is_match",
                    "2": "is_var2_true",
                    "3": "is_special_case",
                    "4": "flag"
                },
                "dVar4": {
                    "1": "temp3",
                    "2": "var2",
                    "3": "temp_var3",
                    "4": "address1"
                },
                "dVar7": {
                    "1": "temp_var",
                    "2": "var4",
                    "3": "temp_var6",
                    "4": "address2"
                },
                "dVar9": {
                    "1": "value6",
                    "2": "next_relocation",
                    "3": "temp_var8",
                    "4": "address3"
                },
                "iVar1": {
                    "1": "first_int_ptr",
                    "2": "index",
                    "5": "var1",
                    "8": "temp_var1"
                },
                "iVar5": {
                    "1": "temp2",
                    "2": "next_offset",
                    "3": "temp_var4",
                    "5": "temp_var2"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "arg1",
                    "6": "param",
                    "7": "param1"
                },
                "param_2": {
                    "1": "data_param",
                    "10": "arg2",
                    "2": "input_param",
                    "7": "param2"
                },
                "uVar3": {
                    "1": "value",
                    "2": "var1",
                    "3": "temp_var2",
                    "4": "var3",
                    "6": "value1"
                },
                "uVar6": {
                    "1": "flag2",
                    "2": "var3",
                    "3": "temp_var5",
                    "4": "offset",
                    "5": "value2"
                },
                "uVar8": {
                    "1": "new_data",
                    "2": "var5",
                    "3": "temp_var7",
                    "4": "var8",
                    "5": "value3"
                }
            },
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00083a74"
            ],
            "calling": [
                "FUN_00081fac",
                "FUN_00081800",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_00083ca8"
            ],
            "code": "\nvoid process_function_00083b10(undefined4 arg1,int arg2)\n\n{\n  int temp_var1;\n  bool flag;\n  uint value1;\n  dword var4;\n  int temp_var2;\n  uint value2;\n  dword var7;\n  uint value3;\n  dword var9;\n  \n  if (arg2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  value1 = *(uint *)(arg2 + -4);\n  var7 = arg2 - 8;\n  value2 = value1 & 0xfffffffe;\n  var4 = var7 + value2;\n  value3 = *(uint *)(var4 + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == var4) {\n    value3 = value3 + value2;\n    if (-1 < (int)(value1 << 0x1f)) {\n      var7 = var7 - *(int *)(arg2 + -8);\n      temp_var2 = *(int *)(var7 + 0xc);\n      temp_var1 = *(int *)(var7 + 8);\n      value3 = value3 + *(int *)(arg2 + -8);\n      *(int *)(temp_var1 + 0xc) = temp_var2;\n      *(int *)(temp_var2 + 8) = temp_var1;\n    }\n    var4 = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(var7 + 4) = value3 | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = var7;\n    if (var4 <= value3) {\n      FUN_00083a74(arg1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(var4 + 4) = value3;\n    if ((value1 & 1) == 0) {\n      var7 = var7 - *(int *)(arg2 + -8);\n      temp_var1 = *(int *)(var7 + 8);\n      value2 = value2 + *(int *)(arg2 + -8);\n      if (temp_var1 == 0x2007046c) {\n        flag = true;\n      }\n      else {\n        temp_var2 = *(int *)(var7 + 0xc);\n        *(int *)(temp_var1 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp_var1;\n        flag = false;\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (-1 < *(int *)(var4 + value3 + 4) << 0x1f) {\n      value2 = value2 + value3;\n      temp_var1 = *(int *)(var4 + 8);\n      if ((!flag) && (temp_var1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = var7;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = var7;\n        *(undefined4 *)(var7 + 0xc) = 0x2007046c;\n        *(undefined4 *)(var7 + 8) = 0x2007046c;\n        *(uint *)(var7 + 4) = value2 | 1;\n        *(uint *)(var7 + value2) = value2;\n        goto LAB_00083ba4;\n      }\n      temp_var2 = *(int *)(var4 + 0xc);\n      *(int *)(temp_var1 + 0xc) = temp_var2;\n      *(int *)(temp_var2 + 8) = temp_var1;\n    }\n    *(uint *)(var7 + 4) = value2 | 1;\n    *(uint *)(var7 + value2) = value2;\n    if (!flag) {\n      if (value2 < 0x200) {\n        value1 = value2 & 0xfffffff8;\n        temp_var1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + value1);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(value2 >> 3) >> 2 & 0xffU);\n        *(int *)(var7 + 8) = temp_var1;\n        *(uint *)(var7 + 0xc) = value1 + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + value1) = var7;\n        *(dword *)(temp_var1 + 0xc) = var7;\n        FUNC_00081f98(arg1);\n        return;\n      }\n      value1 = value2 >> 9;\n      if (value1 < 5) {\n        temp_var1 = (value2 >> 6) + 0x38;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x15) {\n        temp_var1 = value1 + 0x5b;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x55) {\n        temp_var1 = (value2 >> 0xc) + 0x6e;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x155) {\n        temp_var1 = (value2 >> 0xf) + 0x77;\n        temp_var2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x555) {\n        temp_var1 = (value2 >> 0x12) + 0x7c;\n        temp_var2 = temp_var1 * 2;\n      }\n      else {\n        temp_var2 = 0xfc;\n        temp_var1 = 0x7e;\n      }\n      var9 = temp_var2 * 4 + 0x20070464;\n      var4 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp_var2];\n      if (var4 == var9) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp_var1 >> 2 & 0xffU);\n        var9 = var4;\n      }\n      else {\n        do {\n          if ((*(uint *)(var4 + 4) & 0xfffffffc) <= value2) break;\n          var4 = *(dword *)(var4 + 8);\n        } while (var9 != var4);\n        var9 = *(dword *)(var4 + 0xc);\n      }\n      *(dword *)(var7 + 0xc) = var9;\n      *(dword *)(var7 + 8) = var4;\n      *(dword *)(var9 + 8) = var7;\n      *(dword *)(var4 + 0xc) = var7;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(arg1);\n  return;\n}\n\n",
            "current_name": "process_function_00083b10",
            "entrypoint": "0x00083b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083b10": "process_function_00083b10",
                "bVar2": "flag",
                "dVar4": "var4",
                "dVar7": "var7",
                "dVar9": "var9",
                "iVar1": "temp_var1",
                "iVar5": "temp_var2",
                "param_1": "arg1",
                "param_2": "arg2",
                "uVar3": "value1",
                "uVar6": "value2",
                "uVar8": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "additional_data": {
                "FUN_00081810": {
                    "1": "function4",
                    "2": "function2"
                },
                "FUN_00081d48": {
                    "1": "allocate_memory",
                    "2": "function_a"
                },
                "FUN_00081e34": {
                    "1": "helper_function7",
                    "2": "function8"
                },
                "FUN_00081fac": {
                    "1": "function2",
                    "2": "function3"
                },
                "FUN_0008356c": {
                    "1": "check_validity"
                },
                "FUN_00083850": {
                    "1": "helper_function5",
                    "2": "function_e"
                },
                "FUN_00083b10": {
                    "1": "allocate_memory2",
                    "2": "function4"
                },
                "FUN_00083ca8": {
                    "13": "process_data"
                },
                "FUN_00083da2": {
                    "1": "error_handling"
                },
                "FUN_000840f8": {
                    "1": "perform_operation",
                    "2": "function_f"
                },
                "iVar1": {
                    "1": "error_code",
                    "20": "result",
                    "7": "return_value"
                },
                "local_2c": {
                    "1": "temp_value_5",
                    "2": "temp_var9",
                    "3": "local_variable",
                    "9": "local_var"
                },
                "param_1": {
                    "1": "array_ptr",
                    "10": "output",
                    "2": "output_buffer",
                    "3": "result",
                    "5": "input_array"
                },
                "param_2": {
                    "1": "input_parameters",
                    "2": "input1",
                    "3": "input_buffer",
                    "4": "input_data",
                    "6": "input_array"
                },
                "param_3": {
                    "1": "input_pointer",
                    "2": "params",
                    "3": "buffer"
                },
                "puVar6": {
                    "1": "temp_pointer",
                    "10": "ptr1",
                    "3": "temp_pointer1",
                    "8": "pointer1"
                },
                "puVar7": {
                    "1": "pointer_var2",
                    "10": "ptr2",
                    "3": "temp_pointer2",
                    "8": "pointer2"
                },
                "uVar10": {
                    "1": "temp_value3",
                    "2": "offset",
                    "4": "count",
                    "5": "temp_var7"
                },
                "uVar11": {
                    "1": "temp4",
                    "2": "var8",
                    "3": "temp3",
                    "5": "temp_var8"
                },
                "uVar2": {
                    "1": "element1",
                    "2": "flag1",
                    "3": "var1",
                    "4": "value1",
                    "5": "temp_var1",
                    "8": "temp1"
                },
                "uVar3": {
                    "1": "flag2",
                    "3": "var2",
                    "4": "value2",
                    "5": "temp_var2",
                    "8": "temp2"
                },
                "uVar4": {
                    "1": "flag2",
                    "11": "flag",
                    "2": "var3",
                    "3": "temp3",
                    "5": "temp_var3"
                },
                "uVar5": {
                    "1": "flag2",
                    "2": "temp4",
                    "3": "temp_value",
                    "5": "temp_var4"
                },
                "uVar8": {
                    "1": "var1",
                    "2": "var5",
                    "3": "value1",
                    "5": "temp_var5"
                },
                "uVar9": {
                    "1": "temp_value3",
                    "2": "size",
                    "3": "temp3",
                    "5": "temp_var6"
                }
            },
            "called": [
                "FUN_00081d48",
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_00081e34"
            ],
            "calling": [
                "FUN_00082824"
            ],
            "code": "\nundefined4 process_data_00083ca8(undefined4 *output,uint *input_array,uint **pointer_array)\n\n{\n  int result;\n  uint temp1;\n  uint temp2;\n  ushort flag;\n  uint temp_var4;\n  uint *ptr1;\n  uint *ptr2;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint local_var;\n  \n  if (pointer_array[2] != (uint *)0x0) {\n    flag = *(ushort *)(input_array + 3);\n    temp_var4 = (uint)flag;\n    if (((int)(temp_var4 << 0x1c) < 0) && (input_array[4] != 0)) {\n      ptr2 = *pointer_array;\n    }\n    else {\n      result = FUN_0008356c(output,input_array);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input_array + 3);\n      temp_var4 = (uint)flag;\n      ptr2 = *pointer_array;\n    }\n    if ((flag & 2) == 0) {\n      temp1 = temp_var4 & 2;\n      temp_var7 = temp1;\n      temp_var5 = temp1;\n      local_var = temp1;\n      if ((temp_var4 & 1) == 0) {\n        temp1 = 0;\n        temp_var7 = 0;\n        while( true ) {\n          while (temp1 == 0) {\n            temp_var7 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp1 = *ptr1;\n          }\n          temp_var5 = input_array[2];\n          if ((int)(temp_var4 << 0x16) < 0) {\n            if (temp1 < temp_var5) {\n              temp_var4 = *input_array;\n              temp_var5 = temp1;\n            }\n            else if ((temp_var4 & 0x480) == 0) {\n              temp_var4 = *input_array;\n            }\n            else {\n              result = *input_array - input_array[4];\n              temp_var5 = result + 1 + temp1;\n              temp_var6 = (int)(input_array[5] * 3) / 2;\n              if (temp_var5 <= temp_var6) {\n                temp_var5 = temp_var6;\n              }\n              if ((int)(temp_var4 << 0x15) < 0) {\n                temp_var6 = FUN_00081810(output,temp_var5);\n                if (temp_var6 == 0) {\n                  *output = 0xc;\n                  flag = *(ushort *)(input_array + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(temp_var6,input_array[4],result);\n                *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp_var6 = FUN_00081fac(output);\n                if (temp_var6 == 0) {\n                  FUN_00083b10(output,input_array[4]);\n                  flag = *(ushort *)(input_array + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              temp_var4 = temp_var6 + result;\n              input_array[4] = temp_var6;\n              input_array[5] = temp_var5;\n              *input_array = temp_var4;\n              input_array[2] = temp_var5 - result;\n              temp_var5 = temp1;\n            }\n            FUN_00081e34(temp_var4,temp_var7,temp_var5);\n            input_array[2] = input_array[2] - temp_var5;\n            *input_array = *input_array + temp_var5;\n            temp_var5 = temp1;\n          }\n          else if ((input_array[4] < *input_array) || (temp_var4 = input_array[5], temp1 < temp_var4)) {\n            if (temp1 < temp_var5) {\n              temp_var5 = temp1;\n            }\n            FUN_00081e34(*input_array,temp_var7,temp_var5);\n            temp_var4 = input_array[2];\n            input_array[2] = temp_var4 - temp_var5;\n            *input_array = *input_array + temp_var5;\n            if ((temp_var4 - temp_var5 == 0) && (result = FUN_00083850(output,input_array), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            temp_var5 = 0x7fffffff;\n            if (temp1 < 0x7fffffff) {\n              temp_var5 = temp1;\n            }\n            temp_var5 = (*(code *)input_array[9])(output,input_array[7],temp_var7,(temp_var5 / temp_var4) * temp_var4);\n            if ((int)temp_var5 < 1) goto LAB_00083da2;\n          }\n          ptr1 = pointer_array[2];\n          temp_var7 = temp_var7 + temp_var5;\n          temp1 = temp1 - temp_var5;\n          pointer_array[2] = (uint *)((int)ptr1 - temp_var5);\n          if ((uint *)((int)ptr1 - temp_var5) == (uint *)0x0) break;\n          temp_var4 = (uint)*(ushort *)(input_array + 3);\n        }\n      }\n      else {\n        do {\n          while (temp1 == 0) {\n            temp_var5 = *ptr2;\n            temp1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = FUN_000840f8(temp_var5,10,temp1);\n            if (result == 0) {\n              temp_var7 = temp1 + 1;\n              local_var = 1;\n            }\n            else {\n              temp_var7 = (result + 1) - temp_var5;\n              local_var = 1;\n            }\n          }\n          temp_var6 = *input_array;\n          temp_var4 = temp_var7;\n          if (temp1 <= temp_var7) {\n            temp_var4 = temp1;\n          }\n          temp2 = input_array[5];\n          if ((input_array[4] < temp_var6) && (temp_var8 = input_array[2] + temp2, (int)temp_var8 < (int)temp_var4)) {\n            FUN_00081e34(temp_var6,temp_var5,temp_var8);\n            *input_array = *input_array + temp_var8;\n            result = FUN_00083850(output,input_array);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)temp_var4 < (int)temp2) {\n            FUN_00081e34(temp_var6,temp_var5,temp_var4);\n            input_array[2] = input_array[2] - temp_var4;\n            *input_array = temp_var4 + *input_array;\n            temp_var8 = temp_var4;\n          }\n          else {\n            temp_var8 = (*(code *)input_array[9])(output,input_array[7],temp_var5,temp2);\n            if ((int)temp_var8 < 1) goto LAB_00083da2;\n          }\n          temp_var7 = temp_var7 - temp_var8;\n          if (temp_var7 == 0) {\n            result = FUN_00083850(output,input_array);\n            if (result != 0) goto LAB_00083da2;\n            local_var = 0;\n          }\n          ptr1 = pointer_array[2];\n          temp_var5 = temp_var5 + temp_var8;\n          temp1 = temp1 - temp_var8;\n          pointer_array[2] = (uint *)((int)ptr1 - temp_var8);\n        } while ((uint *)((int)ptr1 - temp_var8) != (uint *)0x0);\n      }\n    }\n    else {\n      temp1 = 0;\n      temp_var4 = 0;\n      do {\n        while( true ) {\n          temp_var7 = temp_var4;\n          if (0x7ffffbff < temp_var4) {\n            temp_var7 = 0x7ffffc00;\n          }\n          if (temp_var4 != 0) break;\n          temp1 = *ptr2;\n          temp_var4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input_array[9])(output,input_array[7],temp1,temp_var7);\n        if (result < 1) {\nLAB_00083da2:\n          flag = *(ushort *)(input_array + 3);\nLAB_00083da4:\n          *(ushort *)(input_array + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = pointer_array[2];\n        temp1 = temp1 + result;\n        temp_var4 = temp_var4 - result;\n        pointer_array[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00083ca8",
            "entrypoint": "0x00083ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "iVar1": "result",
                "local_2c": "local_var",
                "param_1": "output",
                "param_2": "input_array",
                "param_3": "pointer_array",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar10": "temp_var7",
                "uVar11": "temp_var8",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "flag",
                "uVar5": "temp_var4",
                "uVar8": "temp_var5",
                "uVar9": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084004": {
            "additional_data": {
                "0x20070878": {
                    "1": "base_address",
                    "3": "memory_address"
                },
                "DAT_20070878": {
                    "1": "base_address"
                },
                "FUN_00084004": {
                    "1": "get_constant_value",
                    "17": "get_memory_address",
                    "5": "get_base_address",
                    "7": "get_magic_number"
                },
                "return": {
                    "1": "memory_address"
                },
                "return value": {
                    "1": "memory_address"
                },
                "undefined4": {
                    "1": "uint32",
                    "13": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008434c"
            ],
            "code": "\nuint32_t get_memory_address_00084004(void)\n\n{\n  memory_address 0x20070878;\n}\n\n",
            "current_name": "get_memory_address_00084004",
            "entrypoint": "0x00084004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004",
                "return": "memory_address",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008400c": {
            "additional_data": {
                ".r_offset": {
                    "1": "offset"
                },
                "275": {
                    "1": "index"
                },
                "<original_function_name>": {
                    "1": "get_elf_relocation_offset"
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "rel_table",
                    "2": "elf_rel_array",
                    "4": "elf_relocations",
                    "6": "rel_array",
                    "7": "relocation_array"
                },
                "FUN_0008400c": {
                    "1": "get_elf32_rel_array_offset",
                    "11": "get_relocation_offset",
                    "2": "get_elf_rel_offset",
                    "3": "get_elf32_rel_offset",
                    "7": "get_elf_relocation_offset"
                },
                "r_offset": {
                    "1": "rel_offset",
                    "3": "relocation_offset",
                    "9": "offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\ndword get_relocation_offset_0008400c(void)\n\n{\n  return relocation_array[275]offset;\n}\n\n",
            "current_name": "get_relocation_offset_0008400c",
            "entrypoint": "0x0008400c",
            "imported": false,
            "improved": true,
            "renaming": {
                ".r_offset": "offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_0008400c": "get_relocation_offset_0008400c",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084018": {
            "additional_data": {
                "FUN_00081810": {
                    "1": "allocate_memory",
                    "2": "sub_function2"
                },
                "FUN_00084018": {
                    "1": "decode_and_process_data",
                    "10": "process_data"
                },
                "FUN_00084494": {
                    "1": "check_condition",
                    "2": "sub_function1"
                },
                "FUN_000844bc": {
                    "1": "calculate_result",
                    "2": "sub_function3"
                },
                "LAB_00084074": {
                    "1": "update_flags"
                },
                "auStack_54": {
                    "1": "temporary_buffer",
                    "10": "stack_array",
                    "3": "stack_data",
                    "4": "temp_stack",
                    "7": "temp_array"
                },
                "bVar5": {
                    "1": "bool_variable",
                    "15": "flag",
                    "2": "is_flag_set",
                    "3": "condition",
                    "7": "is_condition_met"
                },
                "iVar2": {
                    "1": "result_var1",
                    "15": "result",
                    "4": "status",
                    "8": "result1"
                },
                "iVar3": {
                    "1": "temp_value3",
                    "10": "result2",
                    "2": "error_code",
                    "3": "result",
                    "8": "status"
                },
                "local_50": {
                    "1": "flag2",
                    "15": "local_value",
                    "5": "local_var",
                    "6": "local_variable"
                },
                "param_1": {
                    "1": "context",
                    "2": "ptr",
                    "3": "input_param",
                    "5": "input_value",
                    "8": "input"
                },
                "param_2": {
                    "1": "array_param",
                    "2": "output_param",
                    "3": "params",
                    "8": "output"
                },
                "uVar1": {
                    "1": "param_value_1",
                    "2": "flags",
                    "6": "value1"
                },
                "uVar4": {
                    "1": "flag2",
                    "2": "converted_value",
                    "3": "temp_value",
                    "6": "value2"
                }
            },
            "called": [
                "FUN_00081810",
                "FUN_00084494",
                "FUN_000844bc"
            ],
            "calling": [
                "FUN_0008356c"
            ],
            "code": "\nvoid process_data_00084018(int input,int *output)\n\n{\n  ushort value1;\n  int result;\n  int result2;\n  uint value2;\n  bool flag;\n  undefined stack_array [4];\n  uint local_value;\n  \n  value1 = *(ushort *)(output + 3);\n  value2 = (uint)value1;\n  if ((int)(value2 << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    result = FUN_00084494(input,(int)*(short *)((int)output + 0xe),stack_array);\n    if (-1 < result) {\n      flag = (local_value & 0xf000) == 0x2000;\n      if (((local_value & 0xf000) == 0x8000) && (output[10] == 0x8427d)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto update_flags;\n    }\n    value1 = *(ushort *)(output + 3);\n    value2 = (uint)value1;\n  }\n  *(ushort *)(output + 3) = value1 | 0x800;\n  if ((value2 & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  flag = false;\nupdate_flags:\n  result2 = FUN_00081810(input,result);\n  value1 = *(ushort *)(output + 3);\n  if (result2 == 0) {\n    if (-1 < (int)((uint)value1 << 0x16)) {\n      *(ushort *)(output + 3) = value1 | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(output + 3) = value1 | 0x80;\n    *output = result2;\n    output[4] = result2;\n    output[5] = result;\n    if ((flag) && (result = FUN_000844bc(input,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084018",
            "entrypoint": "0x00084018",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084018": "process_data_00084018",
                "LAB_00084074": "update_flags",
                "auStack_54": "stack_array",
                "bVar5": "flag",
                "iVar2": "result",
                "iVar3": "result2",
                "local_50": "local_value",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "value1",
                "uVar4": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000840f8": {
            "additional_data": {
                "FUN_000840f8": {
                    "1": "find_character_in_buffer",
                    "2": "find_char_sequence",
                    "6": "find_first_occurrence",
                    "7": "find_character"
                },
                "LAB_00084128": {
                    "1": "check_alignment"
                },
                "LAB_00084150": {
                    "1": "not_found"
                },
                "bVar4": {
                    "1": "is_last_char",
                    "2": "is_last_character",
                    "3": "is_last_iteration",
                    "4": "is_last_element",
                    "7": "is_last_index"
                },
                "iVar2": {
                    "1": "i",
                    "25": "index"
                },
                "param_1": {
                    "1": "byte_array",
                    "13": "array",
                    "3": "input_array",
                    "4": "buffer"
                },
                "param_2": {
                    "1": "search_char",
                    "14": "character",
                    "2": "target_byte",
                    "3": "target_char",
                    "9": "target"
                },
                "param_3": {
                    "1": "array_size",
                    "21": "length",
                    "7": "array_length"
                },
                "puVar3": {
                    "1": "p",
                    "2": "pointer",
                    "4": "current",
                    "7": "current_ptr",
                    "8": "ptr"
                },
                "uVar1": {
                    "1": "temp1",
                    "12": "xor_result",
                    "2": "xored_value",
                    "3": "temp",
                    "4": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "code": "\nuint * find_character_000840f8(uint *array,char character,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\ncheck_alignment:\n    if (3 < length) {\n      ptr = array;\n      do {\n        xor_result = *ptr ^ CONCAT22(CONCAT11(character,character),CONCAT11(character,character));\n        array = ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != character) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = index == length - 1;\n        index = index + 1;\n        if (is_last_index) goto not_found;\n      } while (*(char *)array != character);\n    }\n  }\n  else if (length == 0) {\nnot_found:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != character) {\n    ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto check_alignment;\n      if (length == 0) goto not_found;\n      ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != character);\n  }\n  return array;\n}\n\n",
            "current_name": "find_character_000840f8",
            "entrypoint": "0x000840f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000840f8": "find_character_000840f8",
                "LAB_00084128": "check_alignment",
                "LAB_00084150": "not_found",
                "bVar4": "is_last_index",
                "iVar2": "index",
                "param_1": "array",
                "param_2": "character",
                "param_3": "length",
                "puVar3": "ptr",
                "uVar1": "xor_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000841e4": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "data_value"
                },
                "FNC_00080efc": {
                    "1": "<new_name>"
                },
                "FUNC_00080efc": {
                    "1": "execute_function"
                },
                "FUN_000841e4": {
                    "1": "process_code",
                    "10": "process_param",
                    "3": "process_data",
                    "6": "process_function"
                },
                "dVar1": {
                    "15": "offset",
                    "2": "offset_value",
                    "3": "rel_array_offset",
                    "7": "rel_offset"
                },
                "iVar3": {
                    "1": "func_ret_val",
                    "3": "function_ptr",
                    "4": "ptr",
                    "5": "value"
                },
                "in_lr": {
                    "1": "unused_lr",
                    "2": "return_address"
                },
                "param_1": {
                    "1": "index",
                    "2": "parameter",
                    "3": "input_value",
                    "4": "input_param",
                    "5": "value",
                    "9": "param"
                },
                "pcVar4": {
                    "1": "function_code",
                    "2": "func",
                    "3": "function",
                    "4": "code_ptr",
                    "5": "func_ptr",
                    "6": "function_ptr"
                },
                "thunk_FUN_00080efe": {
                    "1": "get_return_value"
                },
                "uVar2": {
                    "1": "function",
                    "10": "thunk_result",
                    "14": "result",
                    "2": "return_value"
                },
                "uVar5": {
                    "1": "constant_val",
                    "11": "constant",
                    "13": "constant_value"
                },
                "unaff_r4": {
                    "1": "arg1"
                },
                "unaff_r5": {
                    "1": "arg2"
                }
            },
            "called": [
                "FUN_00080efc",
                "thunk_FUN_00080efe"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nint process_param_000841e4(uint param)\n\n{\n  dword offset;\n  undefined4 result;\n  int value;\n  code *function_ptr;\n  undefined4 unaff4;\n  undefined4 unaff5;\n  undefined4 return_address;\n  undefined4 constant_value;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant_value = 0x20070460;\n  if (0x1f < param) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  value = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((value == 0) || (function_ptr = *(code **)(value + param * 4), function_ptr == (code *)0x0)) {\n    result = thunk_FUN_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    value = FUNC_00080efc(result,param,param,0,constant_value,unaff4,unaff5,return_address);\n    if ((value == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return value;\n  }\n  if (function_ptr == (code *)0x1) {\n    return 0;\n  }\n  if (function_ptr != (code *)0xffffffff) {\n    *(undefined4 *)(value + param * 4) = 0;\n    (*function_ptr)(param);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "current_name": "process_param_000841e4",
            "entrypoint": "0x000841e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000841e4": "process_param_000841e4",
                "dVar1": "offset",
                "iVar3": "value",
                "in_lr": "return_address",
                "param_1": "param",
                "pcVar4": "function_ptr",
                "uVar2": "result",
                "uVar5": "constant_value",
                "unaff_r4": "unaff4",
                "unaff_r5": "unaff5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084220": {
            "additional_data": {
                "*(int *)(param_2 + 0x50)": {
                    "1": "data"
                },
                "*(short *)(param_2 + 0xe)": {
                    "1": "value_index"
                },
                "*(ushort *)(param_2 + 0xc)": {
                    "1": "flag"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00084220": {
                    "1": "update_data_values",
                    "2": "update_values",
                    "3": "update_value",
                    "8": "update_value_based_on_condition"
                },
                "FUN_00084508": {
                    "1": "calculate_result",
                    "2": "compute_result",
                    "5": "calculate_value"
                },
                "PTR_": {
                    "1": ""
                },
                "iVar1": {
                    "2": "return_value",
                    "28": "result"
                },
                "param_1": {
                    "1": "counter_ptr",
                    "2": "arg1",
                    "4": "param",
                    "5": "param1",
                    "8": "data"
                },
                "param_2": {
                    "1": "base_addr",
                    "2": "arg2",
                    "3": "base_address",
                    "4": "data",
                    "5": "param2",
                    "7": "offset"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                }
            },
            "called": [
                "FUN_00084508"
            ],
            "calling": [],
            "code": "\nvoid update_value_based_on_condition_00084220(undefined4 data,int offset)\n\n{\n  int result;\n  \n  result = FUN_00084508(data,(int)*(short *)(offset + 0xe));\n  if (-1 < result) {\n    *(int *)(offset + 0x50) = *(int *)(offset + 0x50) + result;\n    return;\n  }\n  *(ushort *)(offset + 0xc) = *(ushort *)(offset + 0xc) & 0xefff;\n  return;\n}\n\n",
            "current_name": "update_value_based_on_condition_00084220",
            "entrypoint": "0x00084220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084220": "update_value_based_on_condition_00084220",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084244": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "global_var",
                    "2": "error_flag"
                },
                "FUN_00080ec8": {
                    "1": "some_subfunction",
                    "2": "perform_calculation"
                },
                "FUN_00084244": {
                    "1": "updated_function",
                    "17": "process_data",
                    "7": "update_data"
                },
                "FUN_000844e0": {
                    "1": "print_message",
                    "2": "modify_data"
                },
                "iVar1": {
                    "1": "error_code",
                    "21": "result",
                    "5": "return_value"
                },
                "in_lr": {
                    "1": "param7",
                    "2": "unused_4",
                    "3": "unused4",
                    "5": "unused_param4"
                },
                "param_1": {
                    "1": "input_array",
                    "11": "output_array",
                    "2": "data_pointer",
                    "4": "result",
                    "7": "output"
                },
                "param_2": {
                    "1": "data_addr",
                    "2": "input_pointer",
                    "4": "input_address",
                    "7": "input"
                },
                "param_3": {
                    "1": "arg1",
                    "11": "param1",
                    "3": "value1",
                    "4": "param3",
                    "8": "param_a"
                },
                "param_4": {
                    "1": "param_z",
                    "11": "param2",
                    "3": "value2",
                    "4": "param4",
                    "8": "param_b"
                },
                "uVar2": {
                    "1": "value_to_update",
                    "18": "value",
                    "2": "input_value",
                    "3": "data_value",
                    "4": "ushort_value"
                },
                "unaff_r4": {
                    "1": "unaffected1",
                    "2": "unused_1",
                    "3": "unused1",
                    "6": "unused_param1"
                },
                "unaff_r5": {
                    "1": "param5",
                    "2": "var2",
                    "3": "unused2",
                    "6": "unused_param2"
                },
                "unaff_r6": {
                    "1": "unaff6",
                    "2": "unused_var3",
                    "3": "unused3",
                    "6": "unused_param3"
                }
            },
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "calling": [],
            "code": "\nvoid process_data_00084244(int *output_array,int input,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused_param1;\n  undefined4 unused_param2;\n  undefined4 unused_param3;\n  undefined4 unused_param4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_000844e0(output_array,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  result = FUN_00080ec8((int)*(short *)(input + 0xe),param1,param2,param2,unused_param1,unused_param2,\n                       unused_param3,unused_param4);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output_array = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084244",
            "entrypoint": "0x00084244",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "iVar1": "result",
                "in_lr": "unused_param4",
                "param_1": "output_array",
                "param_2": "input",
                "param_3": "param1",
                "param_4": "param2",
                "uVar2": "value",
                "unaff_r4": "unused_param1",
                "unaff_r5": "unused_param2",
                "unaff_r6": "unused_param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008427c": {
            "additional_data": {
                "FUN_0008427c": {
                    "1": "update_flags_and_values",
                    "3": "update_data",
                    "4": "update_flag",
                    "5": "update_value",
                    "7": "update_status"
                },
                "iVar1": {
                    "1": "result_code",
                    "30": "result"
                },
                "param_1": {
                    "1": "flag_array",
                    "2": "input_array",
                    "4": "data",
                    "6": "param",
                    "8": "param1"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "offset",
                    "3": "data_ptr",
                    "5": "data",
                    "8": "param2"
                },
                "uVar2": {
                    "1": "status_flag",
                    "11": "updated_value",
                    "2": "modified_value",
                    "3": "updated_flag",
                    "4": "flag"
                }
            },
            "called": [
                "FUN_000844e0"
            ],
            "calling": [],
            "code": "\nvoid update_status_0008427c(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort updated_value;\n  \n  result = FUN_000844e0(param1,(int)*(short *)(param2 + 0xe));\n  if (result == -1) {\n    updated_value = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    updated_value = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(param2 + 0x50) = result;\n  }\n  *(ushort *)(param2 + 0xc) = updated_value;\n  return;\n}\n\n",
            "current_name": "update_status_0008427c",
            "entrypoint": "0x0008427c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008427c": "update_status_0008427c",
                "iVar1": "result",
                "param_1": "param1",
                "param_2": "param2",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000842a4": {
            "additional_data": {
                "FUN_0008356c": {
                    "1": "process_data_helper",
                    "4": "sub_function1"
                },
                "FUN_00083850": {
                    "1": "perform_operation",
                    "4": "sub_function2"
                },
                "FUN_00083888": {
                    "1": "initialize_data",
                    "2": "sub_function3",
                    "5": "initialize"
                },
                "FUN_000842a4": {
                    "1": "decode_and_verify_data",
                    "26": "process_data"
                },
                "iVar4": {
                    "1": "int_var",
                    "2": "offset",
                    "4": "temp_var",
                    "5": "counter",
                    "8": "index"
                },
                "param_1": {
                    "1": "buffer_address",
                    "2": "input1",
                    "3": "data_pointer",
                    "4": "input_param",
                    "5": "input_data"
                },
                "param_2": {
                    "1": "size",
                    "2": "data_length",
                    "3": "flags",
                    "5": "value",
                    "8": "flag"
                },
                "param_3": {
                    "1": "metadata",
                    "2": "output_data",
                    "3": "data_buffer",
                    "4": "data",
                    "5": "buffer",
                    "7": "data_array"
                },
                "param_4": {
                    "1": "input4",
                    "2": "size",
                    "3": "additional_param",
                    "4": "extra_param",
                    "5": "param",
                    "6": "value"
                },
                "puVar3": {
                    "1": "pointer_value",
                    "2": "ptr_value",
                    "3": "byte_pointer",
                    "4": "pointer",
                    "7": "ptr"
                },
                "uVar1": {
                    "1": "metadata_flag",
                    "13": "ushort_value",
                    "2": "data_value",
                    "3": "value"
                },
                "uVar2": {
                    "1": "uint_val",
                    "13": "uint_value",
                    "2": "temp2"
                }
            },
            "called": [
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00083888"
            ],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\nuint process_data_000842a4(int input,uint flag,undefined4 *data_array,undefined4 value)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr;\n  int index;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  ushort_value = *(ushort *)(data_array + 3);\n  uint_value = (uint)ushort_value;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = data_array[4], index == 0)) {\n    index = FUN_0008356c(input,data_array,ushort_value,uint_value,value);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_array + 3);\n    index = data_array[4];\n    uint_value = (uint)ushort_value;\n  }\n  flag = flag & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr = (undefined *)*data_array;\n    index = (int)ptr - index;\n    if (index < (int)data_array[5]) {\nLAB_000842d6:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    ptr = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = ushort_value | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)data_array[5]) goto LAB_000842d6;\n  }\n  index = FUN_00083850(input,data_array);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*data_array;\n  index = 1;\nLAB_000842d8:\n  data_array[2] = data_array[2] + -1;\n  *data_array = ptr + 1;\n  *ptr = (char)flag;\n  if (((data_array[5] == index) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (flag == 10)))) &&\n     (index = FUN_00083850(input,data_array), index != 0)) {\n    return 0xffffffff;\n  }\n  return flag;\n}\n\n",
            "current_name": "process_data_000842a4",
            "entrypoint": "0x000842a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "iVar4": "index",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "data_array",
                "param_4": "value",
                "puVar3": "ptr",
                "uVar1": "ushort_value",
                "uVar2": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008434c": {
            "additional_data": {
                "FUN_0008434c": {
                    "1": "perform_operation",
                    "4": "process_function",
                    "6": "execute_relocation",
                    "8": "execute_function"
                },
                "auStack_24": {
                    "1": "auxiliary_stack",
                    "4": "temp_buffer",
                    "6": "temporary_buffer",
                    "9": "buffer"
                },
                "dVar1": {
                    "1": "elf32_rel_array_20070000_r_info",
                    "10": "r_info",
                    "11": "relocation_info",
                    "2": "rel_info"
                },
                "iVar3": {
                    "1": "result_code",
                    "2": "execution_result",
                    "23": "return_value",
                    "3": "result"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "output_data",
                    "3": "output_param",
                    "5": "result",
                    "6": "output_pointer"
                },
                "param_2": {
                    "1": "condition",
                    "14": "input_size",
                    "2": "option",
                    "3": "input_length",
                    "5": "size",
                    "6": "length"
                },
                "param_3": {
                    "1": "input_data",
                    "10": "input_value",
                    "2": "param",
                    "3": "input_param",
                    "8": "value"
                },
                "param_4": {
                    "1": "error_flag_ptr",
                    "2": "result_ptr",
                    "3": "status_ptr",
                    "5": "result_pointer",
                    "6": "result"
                },
                "uVar2": {
                    "1": "auxiliary_var",
                    "2": "result",
                    "3": "return_value",
                    "5": "function_pointer",
                    "8": "function_result"
                }
            },
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\nvoid execute_function_0008434c(undefined4 *output_pointer,int input_size,undefined4 input_value,undefined4 *result)\n\n{\n  dword relocation_info;\n  undefined4 function_result;\n  int return_value;\n  undefined buffer [12];\n  \n  relocation_info = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (input_size == 0) {\n    function_result = FUN_00084004();\n    return_value = (*(code *)relocation_info)(output_pointer,buffer,0,function_result,result);\n  }\n  else {\n    function_result = FUN_00084004();\n    return_value = (*(code *)relocation_info)(output_pointer,input_size,input_value,function_result,result);\n  }\n  if (return_value == -1) {\n    *result = 0;\n    *output_pointer = 0x8a;\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_0008434c",
            "entrypoint": "0x0008434c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008434c": "execute_function_0008434c",
                "auStack_24": "buffer",
                "dVar1": "relocation_info",
                "iVar3": "return_value",
                "param_1": "output_pointer",
                "param_2": "input_size",
                "param_3": "input_value",
                "param_4": "result",
                "uVar2": "function_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008439c": {
            "additional_data": {
                "(char)param_3": {
                    "1": "static_cast<char>(value)"
                },
                "0x0": {
                    "1": "null"
                },
                "0x100": {
                    "1": "max_value"
                },
                "0x8a": {
                    "1": "error_code"
                },
                "0xffffffff": {
                    "1": "error"
                },
                "FUN_0008439c": {
                    "1": "store_byte_or_return_error",
                    "2": "write_byte_to_memory",
                    "3": "convert_value_to_char"
                },
                "char": {
                    "1": "output_char"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "output_byte",
                    "3": "buffer",
                    "4": "output",
                    "5": "output_value"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "input_ptr",
                    "4": "output_buffer"
                },
                "param_3": {
                    "1": "number_to_convert",
                    "11": "value",
                    "2": "input_number",
                    "3": "byte_value",
                    "8": "input_value"
                },
                "param_3 < 0x100": {
                    "1": "value_within_byte_range"
                },
                "undefined": {
                    "1": "byte"
                },
                "undefined4": {
                    "1": "uint32"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008434c"
            ],
            "code": "\nuint32 convert_value_to_char_0008439c(uint32 *output_value,byte *buffer,uint value)\n\n{\n  if (buffer == (byte *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer = (output_char)value;\n    return 1;\n  }\n  *output_value = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "current_name": "convert_value_to_char_0008439c",
            "entrypoint": "0x0008439c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008439c": "convert_value_to_char_0008439c",
                "char": "output_char",
                "param_1": "output_value",
                "param_2": "buffer",
                "param_3": "value",
                "undefined": "byte",
                "undefined4": "uint32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084484": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "1": "symbol_table"
                },
                "FUNC_0008397c": {
                    "1": "prepare_operation",
                    "2": "perform_operation"
                },
                "FUNC_00083980": {
                    "1": "cleanup_1",
                    "2": "cleanup",
                    "3": "finalize_processing"
                },
                "FUN_00083850": {
                    "1": "process_code",
                    "2": "perform_operation",
                    "6": "process_data"
                },
                "FUN_00083888": {
                    "1": "perform_initialization",
                    "2": "execute_function",
                    "4": "perform_action"
                },
                "FUN_00083b10": {
                    "1": "execute_cleanup_operation",
                    "2": "handle_error"
                },
                "FUN_00084484": {
                    "1": "process_param1",
                    "2": "process_function",
                    "3": "check_param",
                    "4": "process_parameter",
                    "9": "process_param"
                },
                "code": {
                    "1": "function_pointer"
                },
                "dVar1": {
                    "1": "offset_value",
                    "17": "offset",
                    "4": "rel_offset",
                    "7": "r_offset"
                },
                "iVar3": {
                    "1": "result_code",
                    "11": "result",
                    "2": "callback_result",
                    "4": "status",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "parameter",
                    "12": "input_param",
                    "3": "data",
                    "5": "param"
                },
                "param_1 + 0x10": {
                    "1": "arg2"
                },
                "param_1 + 0x1c": {
                    "1": "arg1"
                },
                "param_1 + 0x2c": {
                    "1": "callback_pointer"
                },
                "param_1 + 0x30": {
                    "1": "pointer1"
                },
                "param_1 + 0x38": {
                    "1": "offset1"
                },
                "param_1 + 0x40": {
                    "1": "pointer2"
                },
                "param_1 + 0x44": {
                    "1": "pointer3"
                },
                "param_1 + 0xc": {
                    "1": "condition"
                },
                "param_2": {
                    "1": "symbol",
                    "2": "param_value"
                },
                "uVar2": {
                    "15": "result",
                    "16": "return_value"
                }
            },
            "called": [
                "FUN_00083b10",
                "FUN_00083850",
                "FUN_00083980",
                "FUN_0008397c",
                "FUN_00083888"
            ],
            "calling": [],
            "code": "\nundefined4 process_param_00084484(int input_param)\n\n{\n  dword offset;\n  undefined4 return_value;\n  int result;\n  \n  offset = symbol_table[140].r_offset;\n  if (input_param != 0) {\n    if ((symbol_table[140].r_offset != 0) &&\n       (*(int *)(symbol_table[140].r_offset + 0x38) == 0)) {\n      FUN_00083888();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      return_value = FUN_00083850(offset,input_param);\n      if ((*(function_pointer **)(input_param + 0x2c) != (function_pointer *)0x0) &&\n         (result = (**(function_pointer **)(input_param + 0x2c))(offset,*(undefined4 *)(input_param + 0x1c)), result < 0))\n      {\n        return_value = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        FUN_00083b10(offset,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          FUN_00083b10(offset);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        FUN_00083b10(offset);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      FUNC_00083980();\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_param_00084484",
            "entrypoint": "0x00084484",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "symbol_table",
                "FUN_00084484": "process_param_00084484",
                "code": "function_pointer",
                "dVar1": "offset",
                "iVar3": "result",
                "param_1": "input_param",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084494": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "stored_result"
                },
                "FUN_00080eb0": {
                    "1": "calculate_error"
                },
                "FUN_00084494": {
                    "1": "extract_data_from_binary",
                    "2": "find_error_value",
                    "3": "update_param_if_error",
                    "7": "process_data"
                },
                "iVar1": {
                    "1": "sub_function_result",
                    "10": "return_value",
                    "13": "result",
                    "3": "error_code"
                },
                "param_1": {
                    "1": "output_param",
                    "16": "result",
                    "2": "result_ptr",
                    "9": "output"
                },
                "param_2": {
                    "1": "arg1",
                    "14": "input1",
                    "2": "input_value1",
                    "3": "input_param1",
                    "7": "input_1"
                },
                "param_3": {
                    "1": "arg2",
                    "14": "input2",
                    "2": "value2",
                    "3": "input_param2",
                    "7": "input_2"
                },
                "param_4": {
                    "1": "value_3",
                    "14": "input3",
                    "2": "input_value3",
                    "3": "input_param3",
                    "7": "input_3"
                }
            },
            "called": [
                "FUN_00080eb0"
            ],
            "calling": [
                "FUN_00084018"
            ],
            "code": "\nvoid process_data_00084494(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080eb0(input1,input2,input2,0,input3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084494",
            "entrypoint": "0x00084494",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084494": "process_data_00084494",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844bc": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "error_value"
                },
                "FUN_000844bc": {
                    "1": "extract_integer",
                    "2": "update_parameter_if_error",
                    "6": "process_data"
                },
                "iVar1": {
                    "1": "result_code",
                    "13": "result",
                    "2": "function_result",
                    "4": "status",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "result_pointer",
                    "10": "output",
                    "11": "result",
                    "2": "output_data",
                    "3": "output_value"
                },
                "param_2": {
                    "1": "binary_data",
                    "15": "input",
                    "2": "input_param",
                    "4": "input_data",
                    "7": "input_value"
                }
            },
            "called": [
                "FUN_00080eba"
            ],
            "calling": [
                "FUN_00084018"
            ],
            "code": "\nvoid process_data_000844bc(int *result,undefined4 input)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080eba(input);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_000844bc",
            "entrypoint": "0x000844bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844bc": "process_data_000844bc",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844e0": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "extracted_data"
                },
                "FUN_000844e0": {
                    "1": "extract_integer",
                    "2": "check_and_assign_value",
                    "4": "extract_data",
                    "5": "process_data"
                },
                "iVar1": {
                    "1": "error_code",
                    "14": "result",
                    "2": "func_result",
                    "4": "status",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "result_pointer",
                    "13": "result",
                    "3": "result_ptr",
                    "4": "output_value",
                    "8": "output"
                },
                "param_2": {
                    "1": "input_value1",
                    "12": "input1",
                    "5": "input_1",
                    "6": "arg1"
                },
                "param_3": {
                    "1": "value2",
                    "12": "input2",
                    "5": "input_2",
                    "6": "arg2"
                },
                "param_4": {
                    "1": "input_value3",
                    "12": "input3",
                    "5": "input_3",
                    "6": "arg3"
                }
            },
            "called": [
                "FUN_00080ebe"
            ],
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "code": "\nvoid process_data_000844e0(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080ebe(input1,input2,input3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_000844e0",
            "entrypoint": "0x000844e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844e0": "process_data_000844e0",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084508": {
            "additional_data": {
                "DAT_20071244": {
                    "1": "saved_result"
                },
                "FUN_00080ec2": {
                    "1": "compute_error_code"
                },
                "FUN_00084508": {
                    "1": "extract_return_value",
                    "2": "extract_data",
                    "3": "process_result",
                    "4": "process_function",
                    "5": "extract_error_code",
                    "6": "process_data"
                },
                "iVar1": {
                    "1": "function_result",
                    "16": "result",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "error",
                    "10": "output",
                    "2": "result_pointer",
                    "4": "error_code",
                    "9": "result"
                },
                "param_2": {
                    "1": "input_arg1",
                    "12": "input1",
                    "2": "param_2",
                    "5": "arg1"
                },
                "param_3": {
                    "1": "val2",
                    "12": "input2",
                    "2": "param_3",
                    "5": "arg2"
                },
                "param_4": {
                    "1": "arg_3",
                    "12": "input3",
                    "2": "param_4",
                    "5": "arg3"
                }
            },
            "called": [
                "FUN_00080ec2"
            ],
            "calling": [
                "FUN_00084220"
            ],
            "code": "\nvoid process_data_00084508(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080ec2(input1,input2,input3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084508",
            "entrypoint": "0x00084508",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084508": "process_data_00084508",
                "iVar1": "result",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084530": {
            "additional_data": {
                "FUM_0008458c": {
                    "1": "process_data"
                },
                "FUN_00084530": {
                    "1": "calculate_return_value",
                    "2": "check_params_and_return_value",
                    "5": "check_params"
                },
                "FUN_0008458c": {
                    "1": "get_output"
                },
                "iVar1": {
                    "1": "return_value",
                    "24": "result"
                },
                "param_1": {
                    "1": "input_param_1",
                    "18": "input1",
                    "2": "first_param",
                    "3": "value1"
                },
                "param_2": {
                    "1": "int2",
                    "18": "input2",
                    "2": "input_2",
                    "3": "value2"
                },
                "param_3": {
                    "1": "arg3",
                    "10": "input3",
                    "2": "third_param",
                    "3": "value3",
                    "5": "flag1"
                },
                "param_4": {
                    "1": "int4",
                    "10": "input4",
                    "2": "fourth_param",
                    "3": "value4",
                    "5": "flag2"
                }
            },
            "called": [
                "FUN_0008458c"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint check_params_00084530(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_0008458c();\n  return result;\n}\n\n",
            "current_name": "check_params_00084530",
            "entrypoint": "0x00084530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084530": "check_params_00084530",
                "iVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008455c": {
            "additional_data": {
                "FUN_0008455c": {
                    "1": "subtract_and_update_param",
                    "2": "subtract_and_assign_values",
                    "3": "subtract_and_adjust",
                    "5": "subtract_and_update",
                    "6": "calculate_difference"
                },
                "FUN_000845c0": {
                    "1": "calculate_product"
                },
                "lVar2": {
                    "1": "result_long",
                    "3": "multiply_result",
                    "4": "multiplied_value",
                    "7": "product",
                    "8": "result"
                },
                "param_1": {
                    "1": "arg_1",
                    "2": "input_param",
                    "20": "input_value"
                },
                "param_2": {
                    "1": "value_2",
                    "2": "value2",
                    "3": "count"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param_b"
                },
                "param_5": {
                    "1": "output",
                    "12": "output_array",
                    "13": "result_array",
                    "2": "output_values"
                },
                "uVar1": {
                    "1": "lower_result",
                    "2": "result_uint",
                    "3": "calculated_value",
                    "6": "result",
                    "8": "converted_result"
                }
            },
            "called": [
                "FUN_000845c0"
            ],
            "calling": [],
            "code": "\nvoid calculate_difference_0008455c(uint input_value,int subtract_value,undefined4 param_a,undefined4 param_b,int *result_array)\n\n{\n  uint converted_result;\n  longlong result;\n  \n  result = FUN_000845c0();\n  result = result * CONCAT44(param_b,param_a);\n  converted_result = (uint)result;\n  *result_array = input_value - converted_result;\n  result_array[1] = (subtract_value - (int)((ulonglong)result >> 0x20)) - (uint)(input_value < converted_result);\n  return;\n}\n\n",
            "current_name": "calculate_difference_0008455c",
            "entrypoint": "0x0008455c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "lVar2": "result",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_3": "param_a",
                "param_4": "param_b",
                "param_5": "result_array",
                "uVar1": "converted_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008458c": {
            "additional_data": {
                "*param_5": {
                    "1": "result"
                },
                "CONCAT44": {
                    "1": "combine_values"
                },
                "FUN_0008458c": {
                    "1": "subtract_params",
                    "2": "subtract_and_shift",
                    "3": "subtract_and_store",
                    "5": "subtract_values",
                    "6": "subtract_and_adjust"
                },
                "FUN_00084860": {
                    "1": "calculate_product",
                    "2": "multiply_values"
                },
                "lVar2": {
                    "1": "result_long",
                    "3": "temp_result",
                    "4": "multiplied_value",
                    "6": "product",
                    "9": "result"
                },
                "param_1": {
                    "1": "original_value",
                    "19": "input_value",
                    "2": "input_param",
                    "4": "input1"
                },
                "param_2": {
                    "1": "limit",
                    "2": "count",
                    "3": "param_value",
                    "4": "param2"
                },
                "param_3": {
                    "1": "third_param",
                    "7": "param3"
                },
                "param_4": {
                    "1": "value4",
                    "7": "param4"
                },
                "param_5": {
                    "1": "result",
                    "11": "output_array",
                    "14": "result_array",
                    "2": "output_values"
                },
                "param_5[1]": {
                    "1": "result_1"
                },
                "uVar1": {
                    "1": "result_uint",
                    "2": "result1",
                    "3": "converted_result",
                    "6": "result"
                }
            },
            "called": [
                "FUN_00084860"
            ],
            "calling": [
                "FUN_00084530"
            ],
            "code": "\nvoid subtract_and_adjust_0008458c(uint input_value,int value2,undefined4 param3,undefined4 param4,int *result_array)\n\n{\n  uint result;\n  longlong result;\n  \n  result = FUN_00084860();\n  result = result * combine_values(param4,param3);\n  result = (uint)result;\n  *result_array = input_value - result;\n  result_1 = (value2 - (int)((ulonglong)result >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_and_adjust_0008458c",
            "entrypoint": "0x0008458c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_values",
                "FUN_0008458c": "subtract_and_adjust_0008458c",
                "lVar2": "result",
                "param_1": "input_value",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result_array",
                "param_5[1]": "result_1",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000845c0": {
            "additional_data": {
                "FUN_000845c0": {
                    "1": "divide_with_carry",
                    "2": "division_with_remainder",
                    "3": "divide_unsigned_integers",
                    "4": "divide_unsigned",
                    "6": "divide_with_remainder"
                },
                "bVar13": {
                    "1": "has_remainder",
                    "2": "carry",
                    "3": "is_negative",
                    "8": "carry_flag"
                },
                "iVar6": {
                    "1": "shift",
                    "13": "shift_amount",
                    "5": "shift_count"
                },
                "lVar1": {
                    "1": "result"
                },
                "param_1": {
                    "1": "input1",
                    "29": "dividend"
                },
                "param_2": {
                    "1": "dividend_upper32",
                    "2": "dividend_hi",
                    "3": "dividend_upper",
                    "4": "dividend_low",
                    "7": "dividend_high"
                },
                "param_3": {
                    "1": "quotient_high",
                    "2": "divisor_high",
                    "24": "divisor"
                },
                "param_4": {
                    "1": "divisor_bits",
                    "2": "divisor_hi",
                    "3": "divisor_upper",
                    "4": "divisor_low",
                    "7": "divisor_high"
                },
                "uVar10": {
                    "1": "estimated_quotient",
                    "2": "temp4",
                    "3": "tmp5"
                },
                "uVar11": {
                    "1": "temp1",
                    "2": "temp4",
                    "3": "temp3"
                },
                "uVar12": {
                    "1": "quotient_low_temp_2",
                    "2": "temp4",
                    "3": "shifted_divisor"
                },
                "uVar13": {
                    "1": "quotient"
                },
                "uVar14": {
                    "1": "is_neg_divisor"
                },
                "uVar15": {
                    "1": "shifted_dividend"
                },
                "uVar2": {
                    "1": "quotient7",
                    "2": "quotient_lower",
                    "3": "quotient_upper",
                    "4": "quotient_high",
                    "5": "quotient",
                    "6": "quotient_low"
                },
                "uVar3": {
                    "1": "quotient",
                    "2": "remainder",
                    "3": "quotient_lower",
                    "4": "quotient_low",
                    "7": "quotient_high"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "quotient3",
                    "3": "temp1"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "temp1",
                    "3": "tmp2",
                    "4": "temp2"
                },
                "uVar7": {
                    "1": "temp7",
                    "2": "temp3",
                    "3": "tmp3",
                    "4": "temp1"
                },
                "uVar8": {
                    "1": "temp_dividend_high",
                    "2": "remainder_high",
                    "3": "temp4",
                    "5": "temp2"
                },
                "uVar9": {
                    "1": "carry_bit_mask",
                    "2": "sign",
                    "8": "is_dividend_negative",
                    "9": "is_negative_dividend"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008455c"
            ],
            "code": "\nundefined8 divide_with_remainder_000845c0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong temp6;\n  uint quotient_low;\n  uint quotient_high;\n  uint tmp1;\n  uint temp2;\n  int shift_amount;\n  uint temp;\n  uint temp2;\n  uint is_negative_dividend;\n  uint tmp5;\n  uint temp5;\n  uint shifted_divisor;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_negative_dividend = 0xffffffff;\n  }\n  else {\n    is_negative_dividend = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_negative_dividend = ~is_negative_dividend;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient_low = divisor >> 0x10;\n      tmp1 = dividend_high / quotient_low;\n      temp = (divisor & 0xffff) * tmp1;\n      tmp5 = dividend >> 0x10 | (dividend_high - quotient_low * tmp1) * 0x10000;\n      quotient_high = tmp1;\n      if (tmp5 <= temp && temp - tmp5 != 0) {\n        carry_flag = CARRY4(tmp5,divisor);\n        tmp5 = tmp5 + divisor;\n        quotient_high = tmp1 - 1;\n        if ((carry_flag == false) && (tmp5 <= temp && temp - tmp5 != 0)) {\n          quotient_high = tmp1 - 2;\n          tmp5 = tmp5 + divisor;\n        }\n      }\n      temp2 = (tmp5 - temp) / quotient_low;\n      tmp1 = (divisor & 0xffff) * temp2;\n      temp = dividend & 0xffff | ((tmp5 - temp) - quotient_low * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp <= tmp1 && tmp1 - temp != 0) {\n        quotient_low = temp2 - 1;\n        if ((CARRY4(temp,divisor) == false) &&\n           (temp + divisor <= tmp1 && tmp1 - (temp + divisor) != 0)) {\n          quotient_low = temp2 - 2;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        tmp1 = divisor >> 0x10;\n        shifted_divisor = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        tmp1 = divisor >> 0x10;\n        tmp5 = quotient_high / tmp1;\n        shifted_divisor = divisor & 0xffff;\n        temp = shifted_divisor * tmp5;\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = temp2 >> 0x10 | (quotient_high - tmp1 * tmp5) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_low = tmp5;\n        if (quotient_high <= temp && temp - quotient_high != 0) {\n          carry_flag = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient_low = tmp5 - 1;\n          if ((carry_flag == false) && (quotient_high <= temp && temp - quotient_high != 0)) {\n            quotient_low = tmp5 - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp) / tmp1;\n        tmp5 = shifted_divisor * temp2;\n        dividend_high = temp2 & 0xffff | ((quotient_high - temp) - tmp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= tmp5 && tmp5 - dividend_high != 0) {\n          carry_flag = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= tmp5 && tmp5 - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - tmp5;\n        quotient_high = quotient_high | quotient_low << 0x10;\n      }\n      quotient_low = dividend_high / tmp1;\n      tmp5 = shifted_divisor * quotient_low;\n      temp2 = dividend >> 0x10 | (dividend_high - tmp1 * quotient_low) * 0x10000;\n      temp = quotient_low;\n      if (temp2 <= tmp5 && tmp5 - temp2 != 0) {\n        carry_flag = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp = quotient_low - 1;\n        if ((carry_flag == false) && (temp2 <= tmp5 && tmp5 - temp2 != 0)) {\n          temp = quotient_low - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp2 = (temp2 - tmp5) / tmp1;\n      shifted_divisor = shifted_divisor * temp2;\n      tmp1 = dividend & 0xffff | ((temp2 - tmp5) - tmp1 * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (tmp1 <= shifted_divisor && shifted_divisor - tmp1 != 0) {\n        quotient_low = temp2 - 1;\n        if ((CARRY4(tmp1,divisor) == false) &&\n           (tmp1 + divisor <= shifted_divisor && shifted_divisor - (tmp1 + divisor) != 0)) {\n          quotient_low = temp2 - 2;\n        }\n      }\n      quotient_low = quotient_low | temp << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient_low = 1;\n      }\n      else {\n        quotient_low = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      tmp1 = dividend_high >> (quotient_high & 0xff);\n      shifted_divisor = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      tmp5 = shifted_divisor >> 0x10;\n      quotient_low = tmp1 / tmp5;\n      temp2 = (shifted_divisor & 0xffff) * quotient_low;\n      temp = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      tmp1 = temp >> 0x10 | (tmp1 - tmp5 * quotient_low) * 0x10000;\n      quotient_high = quotient_low;\n      if (tmp1 <= temp2 && temp2 - tmp1 != 0) {\n        carry_flag = CARRY4(tmp1,shifted_divisor);\n        tmp1 = tmp1 + shifted_divisor;\n        quotient_high = quotient_low - 1;\n        if ((carry_flag == false) && (tmp1 <= temp2 && temp2 - tmp1 != 0)) {\n          quotient_high = quotient_low - 2;\n          tmp1 = tmp1 + shifted_divisor;\n        }\n      }\n      temp2 = (tmp1 - temp2) / tmp5;\n      temp5 = (shifted_divisor & 0xffff) * temp2;\n      tmp1 = temp & 0xffff | ((tmp1 - temp2) - tmp5 * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (tmp1 <= temp5 && temp5 - tmp1 != 0) {\n        carry_flag = CARRY4(tmp1,shifted_divisor);\n        tmp1 = tmp1 + shifted_divisor;\n        quotient_low = temp2 - 1;\n        if ((carry_flag == false) && (tmp1 <= temp5 && temp5 - tmp1 != 0)) {\n          quotient_low = temp2 - 2;\n          tmp1 = tmp1 + shifted_divisor;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      temp6 = (ulonglong)quotient_low * (ulonglong)(divisor << shift_amount);\n      temp = (uint)((ulonglong)temp6 >> 0x20);\n      quotient_high = 0;\n      if ((tmp1 - temp5 < temp) ||\n         ((tmp1 - temp5 == temp && (dividend << shift_amount < (uint)temp6)))) {\n        quotient_low = quotient_low - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_negative_dividend != 0) {\n    carry_flag = quotient_low != 0;\n    quotient_low = -quotient_low;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient_low);\n}\n\n",
            "current_name": "divide_with_remainder_000845c0",
            "entrypoint": "0x000845c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000845c0": "divide_with_remainder_000845c0",
                "bVar13": "carry_flag",
                "iVar6": "shift_amount",
                "lVar1": "temp6",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar10": "tmp5",
                "uVar11": "temp5",
                "uVar12": "shifted_divisor",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high",
                "uVar4": "tmp1",
                "uVar5": "temp2",
                "uVar7": "temp",
                "uVar8": "temp2",
                "uVar9": "is_negative_dividend"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084860": {
            "additional_data": {
                "CARRY4": {
                    "1": "carry4"
                },
                "FUN_00084860": {
                    "1": "divide_and_calculate_remainder",
                    "2": "divide_with_remainder",
                    "3": "divide_and_remainder",
                    "6": "calculate_quotient"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "bVar11": {
                    "1": "has_carry",
                    "11": "carry_flag",
                    "2": "is_carry",
                    "9": "carry"
                },
                "bVar14": {
                    "1": "carry"
                },
                "iVar10": {
                    "1": "bit_shift_amount",
                    "2": "bit_count",
                    "5": "shift_amount",
                    "7": "shift_count",
                    "8": "shift"
                },
                "iVar13": {
                    "1": "loop_counter"
                },
                "lVar1": {
                    "1": "quotient",
                    "3": "result",
                    "6": "temp"
                },
                "param_1": {
                    "31": "dividend"
                },
                "param_2": {
                    "1": "quotient",
                    "2": "dividend_upper",
                    "23": "divisor",
                    "4": "dividend_high"
                },
                "param_3": {
                    "1": "divisor1",
                    "16": "quotient",
                    "4": "temp1",
                    "7": "divisor"
                },
                "param_4": {
                    "1": "upper_half_divisor",
                    "17": "remainder",
                    "2": "divisor_upper",
                    "4": "temp2"
                },
                "uVar10": {
                    "1": "remainder1"
                },
                "uVar11": {
                    "1": "carry_flag"
                },
                "uVar12": {
                    "1": "temp1"
                },
                "uVar13": {
                    "1": "temp2"
                },
                "uVar15": {
                    "1": "temp1"
                },
                "uVar16": {
                    "1": "temp2"
                },
                "uVar17": {
                    "1": "temp3"
                },
                "uVar18": {
                    "1": "temp4"
                },
                "uVar2": {
                    "1": "quotient_level1",
                    "10": "quotient1",
                    "2": "result",
                    "5": "quotient"
                },
                "uVar3": {
                    "1": "temp3",
                    "2": "temp1",
                    "8": "quotient2"
                },
                "uVar4": {
                    "1": "temp_divisor_quotient",
                    "2": "quotient_low",
                    "3": "remainder",
                    "6": "quotient3"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "mul1",
                    "3": "temp3",
                    "4": "product1"
                },
                "uVar6": {
                    "1": "temp_quotient",
                    "2": "mul2",
                    "3": "temp4"
                },
                "uVar7": {
                    "1": "temp3",
                    "2": "mul3",
                    "3": "temp5"
                },
                "uVar8": {
                    "1": "temp3",
                    "2": "remainder2",
                    "3": "temp1"
                },
                "uVar9": {
                    "1": "quotient_low",
                    "2": "temp4",
                    "3": "temp2",
                    "4": "quotient2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0008458c"
            ],
            "code": "\nulonglong calculate_quotient_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint product1;\n  uint remainder2;\n  uint remainder3;\n  uint temp1;\n  uint quotient2;\n  int shift;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift = leading_zero_count(quotient);\n      if (shift == 0) {\n        divisor = divisor - quotient;\n        quotient2 = quotient >> 0x10;\n        product1 = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << shift;\n        temp1 = divisor >> (0x20U - shift & 0xff);\n        quotient2 = quotient >> 0x10;\n        quotient2 = temp1 / quotient2;\n        product1 = quotient & 0xffff;\n        quotient1 = product1 * quotient2;\n        remainder2 = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        quotient3 = remainder2 >> 0x10 | (temp1 - quotient2 * quotient2) * 0x10000;\n        dividend = dividend << shift;\n        temp1 = quotient2;\n        if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n          carry_flag = carry4(quotient3,quotient);\n          quotient3 = quotient3 + quotient;\n          temp1 = quotient2 - 1;\n          if ((carry_flag == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n            temp1 = quotient2 - 2;\n            quotient3 = quotient3 + quotient;\n          }\n        }\n        remainder3 = (quotient3 - quotient1) / quotient2;\n        quotient2 = product1 * remainder3;\n        divisor = remainder2 & 0xffff | ((quotient3 - quotient1) - quotient2 * remainder3) * 0x10000;\n        quotient1 = remainder3;\n        if (divisor <= quotient2 && quotient2 - divisor != 0) {\n          carry_flag = carry4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = remainder3 - 1;\n          if ((carry_flag == false) && (divisor <= quotient2 && quotient2 - divisor != 0)) {\n            quotient1 = remainder3 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - quotient2;\n        quotient1 = quotient1 | temp1 << 0x10;\n      }\n      quotient2 = divisor / quotient2;\n      quotient3 = product1 * quotient2;\n      remainder2 = dividend >> 0x10 | (divisor - quotient2 * quotient2) * 0x10000;\n      temp1 = quotient2;\n      if (remainder2 <= quotient3 && quotient3 - remainder2 != 0) {\n        carry_flag = carry4(remainder2,quotient);\n        remainder2 = remainder2 + quotient;\n        temp1 = quotient2 - 1;\n        if ((carry_flag == false) && (remainder2 <= quotient3 && quotient3 - remainder2 != 0)) {\n          temp1 = quotient2 - 2;\n          remainder2 = remainder2 + quotient;\n        }\n      }\n      quotient2 = (remainder2 - quotient3) / quotient2;\n      product1 = product1 * quotient2;\n      remainder2 = dividend & 0xffff | ((remainder2 - quotient3) - quotient2 * quotient2) * 0x10000;\n      quotient2 = quotient2;\n      if (remainder2 <= product1 && product1 - remainder2 != 0) {\n        quotient2 = quotient2 - 1;\n        if ((carry4(remainder2,quotient) == false) &&\n           (remainder2 + quotient <= product1 && product1 - (remainder2 + quotient) != 0)) {\n          quotient2 = quotient2 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient2 | temp1 << 0x10);\n    }\n    shift = leading_zero_count(quotient);\n    if (shift != 0) {\n      temp1 = dividend >> (0x20U - shift & 0xff);\n      quotient = quotient << shift;\n      dividend = dividend << shift;\n      divisor = temp1 | divisor << shift;\n    }\n    quotient1 = quotient >> 0x10;\n    quotient2 = divisor / quotient1;\n    product1 = (quotient & 0xffff) * quotient2;\n    quotient2 = dividend >> 0x10 | (divisor - quotient1 * quotient2) * 0x10000;\n    temp1 = quotient2;\n    if (quotient2 <= product1 && product1 - quotient2 != 0) {\n      carry_flag = carry4(quotient2,quotient);\n      quotient2 = quotient2 + quotient;\n      temp1 = quotient2 - 1;\n      if ((carry_flag == false) && (quotient2 <= product1 && product1 - quotient2 != 0)) {\n        temp1 = quotient2 - 2;\n        quotient2 = quotient2 + quotient;\n      }\n    }\n    remainder2 = (quotient2 - product1) / quotient1;\n    quotient2 = (quotient & 0xffff) * remainder2;\n    product1 = dividend & 0xffff | ((quotient2 - product1) - quotient1 * remainder2) * 0x10000;\n    quotient1 = remainder2;\n    if (product1 <= quotient2 && quotient2 - product1 != 0) {\n      quotient1 = remainder2 - 1;\n      if ((carry4(product1,quotient) == false) &&\n         (product1 + quotient <= quotient2 && quotient2 - (product1 + quotient) != 0)) {\n        quotient1 = remainder2 - 2;\n      }\n    }\n    quotient1 = quotient1 | temp1 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift = leading_zero_count(remainder);\n    if (shift == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shift;\n      temp1 = divisor >> (quotient1 & 0xff);\n      quotient2 = remainder << shift | quotient >> (quotient1 & 0xff);\n      product1 = quotient2 >> 0x10;\n      quotient3 = temp1 / product1;\n      quotient2 = (quotient2 & 0xffff) * quotient3;\n      remainder2 = dividend >> (quotient1 & 0xff) | divisor << shift;\n      quotient1 = remainder2 >> 0x10 | (temp1 - product1 * quotient3) * 0x10000;\n      temp1 = quotient3;\n      if (quotient1 <= quotient2 && quotient2 - quotient1 != 0) {\n        carry_flag = carry4(quotient1,quotient2);\n        quotient1 = quotient1 + quotient2;\n        temp1 = quotient3 - 1;\n        if ((carry_flag == false) && (quotient1 <= quotient2 && quotient2 - quotient1 != 0)) {\n          temp1 = quotient3 - 2;\n          quotient1 = quotient1 + quotient2;\n        }\n      }\n      quotient3 = (quotient1 - quotient2) / product1;\n      remainder3 = (quotient2 & 0xffff) * quotient3;\n      product1 = remainder2 & 0xffff | ((quotient1 - quotient2) - product1 * quotient3) * 0x10000;\n      quotient1 = quotient3;\n      if (product1 <= remainder3 && remainder3 - product1 != 0) {\n        carry_flag = carry4(product1,quotient2);\n        product1 = product1 + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((carry_flag == false) && (product1 <= remainder3 && remainder3 - product1 != 0)) {\n          quotient1 = quotient3 - 2;\n          product1 = product1 + quotient2;\n        }\n      }\n      quotient1 = quotient1 | temp1 << 0x10;\n      temp = (ulonglong)quotient1 * (ulonglong)(quotient << shift);\n      temp1 = (uint)((ulonglong)temp >> 0x20);\n      if ((product1 - remainder3 < temp1) || ((product1 - remainder3 == temp1 && (dividend << shift < (uint)temp)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "current_name": "calculate_quotient_00084860",
            "entrypoint": "0x00084860",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry4",
                "FUN_00084860": "calculate_quotient_00084860",
                "LZCOUNT": "leading_zero_count",
                "bVar11": "carry_flag",
                "iVar10": "shift",
                "lVar1": "temp",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "product1",
                "uVar6": "remainder2",
                "uVar7": "remainder3",
                "uVar8": "temp1",
                "uVar9": "quotient2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00085844": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00085844",
            "entrypoint": "0x00085844",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_000815ec"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00080c20",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "additional_data": {
                "FUN_00080efe": {
                    "1": "calculate_return_value",
                    "2": "calculate_result",
                    "6": "retrieve_value"
                },
                "thunk_FUN_00080efe": {
                    "1": "get_status",
                    "14": "get_default_value",
                    "2": "get_result",
                    "3": "get_error_code"
                }
            },
            "called": [
                "FUN_00080efe"
            ],
            "calling": [
                "FUN_000841e4"
            ],
            "code": "\nundefined4 get_default_value_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "current_name": "get_default_value_thunk_00080efe",
            "entrypoint": "0x0008421c",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_00080efe": "get_default_value_thunk_00080efe"
            },
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "additional_data": {
                "FUN_000810cc": {
                    "1": "print_char"
                },
                "FUN_000810fc": {
                    "1": "print_number"
                },
                "iVar1": {
                    "1": "formatted_length",
                    "2": "return_value",
                    "27": "result"
                },
                "iVar2": {
                    "1": "negative_sign_printed",
                    "2": "negative_length",
                    "4": "negative_sign_length",
                    "5": "negative_value",
                    "8": "negative_result"
                },
                "param_1": {
                    "1": "context",
                    "2": "output_stream",
                    "6": "output_buffer"
                },
                "param_2": {
                    "1": "data_length",
                    "11": "number",
                    "13": "value",
                    "2": "input_number",
                    "3": "input_value"
                },
                "param_3": {
                    "1": "number_base",
                    "27": "base"
                },
                "param_4": {
                    "1": "format_flag",
                    "2": "format",
                    "3": "unknown",
                    "8": "param_4"
                },
                "thunk_FUN_0008113a": {
                    "1": "convert_to_base",
                    "2": "format_integer",
                    "3": "formatted_print",
                    "6": "format_number"
                }
            },
            "called": [
                "FUN_0008113a"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint format_number_thunk_0008113a(undefined4 *output_buffer,uint value,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*output_buffer)(output_buffer,value & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)value < 0) {\n      result = FUN_000810cc(output_buffer,0x2d);\n      negative_result = FUN_000810fc(output_buffer,-value,10);\n      return negative_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(output_buffer,value,base,param_4);\n  return result;\n}\n\n",
            "current_name": "format_number_thunk_0008113a",
            "entrypoint": "0x00081176",
            "imported": false,
            "improved": true,
            "renaming": {
                "iVar1": "result",
                "iVar2": "negative_result",
                "param_1": "output_buffer",
                "param_2": "value",
                "param_3": "base",
                "thunk_FUN_0008113a": "format_number_thunk_0008113a"
            },
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "additional_data": {
                "DAT_2007120c": {
                    "1": "data",
                    "2": "global_variable",
                    "4": "global_data"
                },
                "FUN_000816d8": {
                    "1": "get_local_data",
                    "2": "get_global_value",
                    "4": "get_local_value",
                    "5": "retrieve_data"
                },
                "thunk_FUN_000816d8": {
                    "1": "get_return_value",
                    "2": "get_global_variable_value",
                    "6": "get_data",
                    "7": "get_global_value"
                }
            },
            "called": [
                "FUN_000816d8"
            ],
            "calling": [
                "FUN_000811e8"
            ],
            "code": "\nundefined4 get_global_value_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "current_name": "get_global_value_thunk_000816d8",
            "entrypoint": "0x00080f04",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_000816d8": "get_global_value_thunk_000816d8"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_00080250",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810c4",
            "FUN_000810cc",
            "FUN_000810d8",
            "FUN_000810e8",
            "FUN_000810fc",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_0008117a",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_0008159e",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_000815ec",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "thunk_FUN_00080efe",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 487134
}