{
    "functions": {
        "FUN_08000188": {
            "additional_data": {
                "DAT_2000044c": {
                    "18": "flag",
                    "5": "flag_variable"
                },
                "FUN_08000188": {
                    "1": "toggle_flag",
                    "29": "initialize_flag"
                },
                "param_1": {
                    "1": "input_flag",
                    "12": "input",
                    "3": "input_param",
                    "9": "input_value"
                }
            },
            "called": [
                "FUN_0800b5b0"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initialize_flag_08000188(undefined4 input)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_08000188",
            "entrypoint": "0x08000188",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080001ac": {
            "additional_data": {
                "FUN_080001ac": {
                    "1": "concatenate_and_convert_to_int64",
                    "2": "concatenate_integers",
                    "4": "concatenate_parameters",
                    "5": "concatenate_values",
                    "9": "concatenate_params"
                },
                "param_1": {
                    "1": "lower32_bits",
                    "2": "number1",
                    "3": "value1",
                    "7": "first_param",
                    "9": "first_parameter"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "number2",
                    "3": "value2",
                    "7": "second_param",
                    "9": "second_parameter"
                }
            },
            "called": [
                "FUN_0800b5b0"
            ],
            "calling": [
                "FUN_0800b3e8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_params_080001ac(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "current_name": "concatenate_params_080001ac",
            "entrypoint": "0x080001ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080001ac": "concatenate_params_080001ac",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080001c8": {
            "called": [],
            "calling": [
                "FUN_08000220"
            ],
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001c8",
            "entrypoint": "0x080001c8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001d4": {
            "called": [],
            "calling": [
                "FUN_08000210"
            ],
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001d4",
            "entrypoint": "0x080001d4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001e0": {
            "called": [],
            "calling": [
                "FUN_08000220"
            ],
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001e0",
            "entrypoint": "0x080001e0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001ec": {
            "called": [],
            "calling": [
                "FUN_08000210"
            ],
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001ec",
            "entrypoint": "0x080001ec",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001f8": {
            "additional_data": {
                "FUN_080001f8": {
                    "1": "initialize_data_and_variables",
                    "2": "initialize_system",
                    "3": "initialize_and_reset",
                    "5": "initialize_program",
                    "7": "initialize_data"
                },
                "initialize_08000210": {
                    "1": "setup_initialization",
                    "2": "initialize_memory",
                    "3": "initialize_data",
                    "5": "initialize_resources"
                }
            },
            "called": [
                "FUN_08000210"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_data_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  initialize_resources();\n  return;\n}\n\n",
            "current_name": "initialize_data_080001f8",
            "entrypoint": "0x080001f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080001f8": "initialize_data_080001f8",
                "initialize_08000210": "initialize_resources"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000210": {
            "additional_data": {
                "FUNC_080001d4": {
                    "1": "initialize_resource_2",
                    "2": "initialize_data",
                    "3": "initialize_second_component"
                },
                "FUNC_080001ec": {
                    "1": "perform_initialization",
                    "2": "initialize_modules",
                    "3": "initialize_first_component"
                },
                "FUN_08000210": {
                    "1": "execute_functions",
                    "2": "initialize_components",
                    "4": "initialize_program",
                    "5": "execute_initialization",
                    "9": "initialize"
                }
            },
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "code": "\nvoid initialize_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "current_name": "initialize_08000210",
            "entrypoint": "0x08000210",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000210": "initialize_08000210"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000220": {
            "additional_data": {
                "DAT_20000468": {
                    "1": "current_state",
                    "2": "previous_input",
                    "3": "current_param"
                },
                "FUNC_080001c8": {
                    "1": "process_param_1_func",
                    "6": "perform_action1",
                    "7": "handle_case_1"
                },
                "FUNC_080001e0": {
                    "1": "handle_case2",
                    "6": "perform_action2",
                    "7": "handle_case_2"
                },
                "FUN_08000220": {
                    "1": "process_and_update_parameter",
                    "2": "handle_data_processing",
                    "3": "handle_data",
                    "9": "update_data"
                },
                "initialize_08000210": {
                    "1": "initialize_func",
                    "12": "initialize",
                    "18": "initialize_data"
                },
                "param_1": {
                    "1": "param",
                    "2": "new_param",
                    "3": "input_param",
                    "4": "new_data",
                    "5": "input_data",
                    "9": "input"
                },
                "process_data_08002fd4": {
                    "30": "process_data"
                }
            },
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid update_data_08000220(char input)\n\n{\n  if (input != DAT_20000468) {\n    process_data();\n    if (input == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = input;\n    }\n    else if (input == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = input;\n    }\n    else {\n      initialize_data();\n      DAT_20000468 = input;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08000220",
            "entrypoint": "0x08000220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000220": "update_data_08000220",
                "initialize_08000210": "initialize_data",
                "param_1": "input",
                "process_data_08002fd4": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000268": {
            "additional_data": {
                "0xa8": {
                    "1": "constant_value2"
                },
                "FUN_08000268": {
                    "1": "calculate_modified_value",
                    "10": "calculate_result",
                    "11": "calculate_adjusted_value",
                    "2": "calculate_delay",
                    "3": "calculate_time_difference"
                },
                "_DAT_e000e018": {
                    "1": "variable2",
                    "2": "memory_value",
                    "3": "data_value",
                    "5": "constant_value"
                },
                "get_data_08005a84": {
                    "1": "get_data_from_address_08005a84",
                    "13": "get_data",
                    "2": "get_data_value",
                    "4": "retrieve_data"
                },
                "iVar1": {
                    "1": "input_value",
                    "13": "data_value",
                    "14": "data"
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_080002b6"
            ],
            "code": "\n\n\nint calculate_adjusted_value_08000268(void)\n\n{\n  int data;\n  \n  data = get_data();\n  return (data + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "current_name": "calculate_adjusted_value_08000268",
            "entrypoint": "0x08000268",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000268": "calculate_adjusted_value_08000268",
                "get_data_08005a84": "get_data",
                "iVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002a0": {
            "additional_data": {
                "FUN_080002a0": {
                    "1": "execute_target_search",
                    "2": "process_target_value",
                    "3": "find_and_process_target",
                    "6": "find_and_process_target_value",
                    "7": "find_target_value",
                    "9": "find_and_return_target_value"
                },
                "find_target_value_08005a98": {
                    "1": "search_for_value",
                    "3": "find_target_value"
                },
                "param_1": {
                    "10": "target_value",
                    "17": "input_value",
                    "4": "value"
                }
            },
            "called": [
                "FUN_08005a98"
            ],
            "calling": [
                "FUN_08002408"
            ],
            "code": "\nvoid find_and_return_target_value_080002a0(undefined4 input_value)\n\n{\n  find_target_value(input_value);\n  return;\n}\n\n",
            "current_name": "find_and_return_target_value_080002a0",
            "entrypoint": "0x080002a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002a0": "find_and_return_target_value_080002a0",
                "find_target_value_08005a98": "find_target_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002b6": {
            "additional_data": {
                "FUN_080002b6": {
                    "1": "calculate_until_value_reached",
                    "11": "find_adjusted_value",
                    "2": "check_adjusted_value",
                    "3": "reverse_and_adjust_value"
                },
                "bVar3": {
                    "1": "is_match",
                    "2": "condition_met",
                    "3": "is_condition_met",
                    "4": "is_greater"
                },
                "lVar4": {
                    "1": "adjusted_value_bit64",
                    "17": "adjusted_value",
                    "2": "adjusted_result",
                    "3": "adjusted_value_sum"
                },
                "param_1": {
                    "1": "param",
                    "20": "input_value",
                    "3": "input_param",
                    "4": "input"
                },
                "uVar1": {
                    "1": "value1",
                    "2": "upper_adjusted_value",
                    "3": "adjusted_value",
                    "6": "adjusted_value_upper",
                    "7": "adjusted_value1"
                },
                "uVar2": {
                    "1": "adjusted_value_bit20",
                    "2": "upper_bits2",
                    "3": "adjusted_value_lower",
                    "7": "adjusted_value2"
                },
                "uVar5": {
                    "1": "adjusted_value_result_temp",
                    "2": "adjusted_value4",
                    "3": "adjusted_value3",
                    "4": "new_adjusted_value",
                    "5": "adjusted_value_temp"
                }
            },
            "called": [
                "FUN_08000268"
            ],
            "calling": [],
            "code": "\nvoid find_adjusted_value_080002b6(uint input_value)\n\n{\n  uint adjusted_value1;\n  uint adjusted_value2;\n  bool is_greater;\n  longlong adjusted_value;\n  undefined8 adjusted_value_temp;\n  \n  adjusted_value = calculate_adjusted_value_08000268();\n  adjusted_value2 = (uint)(adjusted_value + (ulonglong)input_value >> 0x20);\n  do {\n    adjusted_value_temp = calculate_adjusted_value_08000268();\n    adjusted_value1 = (uint)((ulonglong)adjusted_value_temp >> 0x20);\n    is_greater = adjusted_value2 <= adjusted_value1;\n    if (adjusted_value1 == adjusted_value2) {\n      is_greater = (uint)(adjusted_value + (ulonglong)input_value) <= (uint)adjusted_value_temp;\n    }\n  } while (!is_greater);\n  return;\n}\n\n",
            "current_name": "find_adjusted_value_080002b6",
            "entrypoint": "0x080002b6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002b6": "find_adjusted_value_080002b6",
                "bVar3": "is_greater",
                "lVar4": "adjusted_value",
                "param_1": "input_value",
                "uVar1": "adjusted_value1",
                "uVar2": "adjusted_value2",
                "uVar5": "adjusted_value_temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002f0": {
            "additional_data": {
                "&DAT_20000470": {
                    "1": "memory_address"
                },
                "0xff": {
                    "1": "value_to_fill"
                },
                "DAT_20000446c": {
                    "1": "flag"
                },
                "DAT_2000046c": {
                    "1": "status_flag",
                    "16": "flag",
                    "3": "value"
                },
                "DAT_20000470": {
                    "1": "memory_array",
                    "2": "memory_buffer",
                    "3": "memory_address",
                    "9": "memory_block"
                },
                "FUN_080002f0": {
                    "1": "initialize_data",
                    "30": "initialize_memory"
                },
                "VAR_2000046c": {
                    "1": "flag"
                },
                "VAR_20000470": {
                    "1": "memory_block"
                },
                "enableFlag": {
                    "1": "dat_2000046c"
                },
                "fillLength": {
                    "1": "4"
                },
                "fillValue": {
                    "1": "0xff"
                },
                "fill_memory_0800b430": {
                    "30": "fill_memory"
                },
                "memory": {
                    "1": "memory"
                },
                "memoryToFill": {
                    "1": "dat_20000470"
                },
                "original_function_name": {
                    "1": "new_function_name"
                },
                "value": {
                    "1": "value"
                },
                "var_20000470": {
                    "1": "memory_address"
                }
            },
            "called": [
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "code": "\nvoid initialize_memory_080002f0(void)\n\n{\n  fill_memory(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "current_name": "initialize_memory_080002f0",
            "entrypoint": "0x080002f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002f0": "initialize_memory_080002f0",
                "fill_memory_0800b430": "fill_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000310": {
            "additional_data": {
                "&DAT_20000470": {
                    "1": "memory",
                    "2": "memory_values",
                    "9": "memory_array"
                },
                "&DAT_20000470[param_1 & 0x3ff]": {
                    "1": "table_entry"
                },
                "0x3ff": {
                    "2": "mask"
                },
                "DAT_2000046c": {
                    "1": "memory_initialized_flag",
                    "2": "is_memory_initialized",
                    "20": "memory_initialized"
                },
                "DAT_20000470": {
                    "1": "lookup_table",
                    "2": "memory_array",
                    "5": "memory_data"
                },
                "FUN_08000310": {
                    "1": "get_value_from_table",
                    "21": "get_memory_value",
                    "3": "retrieve_data"
                },
                "initialize_memory_080002f0": {
                    "29": "initialize_memory"
                },
                "param_1": {
                    "1": "memory_index",
                    "13": "index",
                    "3": "entry_index",
                    "4": "value",
                    "5": "input_value"
                },
                "param_1 & 0x3ff": {
                    "1": "masked_index"
                }
            },
            "called": [
                "FUN_080002f0"
            ],
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "code": "\nundefined get_memory_value_08000310(uint index)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_memory();\n  }\n  return (&DAT_20000470)[index & 0x3ff];\n}\n\n",
            "current_name": "get_memory_value_08000310",
            "entrypoint": "0x08000310",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000310": "get_memory_value_08000310",
                "initialize_memory_080002f0": "initialize_memory",
                "param_1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000340": {
            "additional_data": {
                "FUN_08000340": {
                    "1": "store_param_value",
                    "2": "store_parameter_value",
                    "3": "store_data_in_memory",
                    "6": "store_value_in_memory",
                    "9": "store_data"
                },
                "initialize_memory_080002f0": {
                    "1": "initialize_memory"
                },
                "param_1": {
                    "1": "address",
                    "2": "parameter_index",
                    "28": "index"
                },
                "param_2": {
                    "11": "data",
                    "18": "value",
                    "2": "parameter_value"
                }
            },
            "called": [
                "FUN_080002f0"
            ],
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "code": "\nvoid store_data_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_memory();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "current_name": "store_data_08000340",
            "entrypoint": "0x08000340",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "initialize_memory_080002f0": "initialize_memory",
                "param_1": "index",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000374": {
            "additional_data": {
                "FUN_08000374": {
                    "1": "process_input_data",
                    "2": "store_data_with_checksum",
                    "24": "process_data"
                },
                "local_14": {
                    "1": "current_position",
                    "12": "current_index",
                    "2": "store_index",
                    "6": "current_offset"
                },
                "local_18": {
                    "1": "string_ptr",
                    "13": "current_data",
                    "2": "current_byte",
                    "3": "current_char_ptr",
                    "4": "current_char"
                },
                "local_1c": {
                    "1": "iteration_count",
                    "17": "remaining_length",
                    "2": "length",
                    "3": "remaining_iterations"
                },
                "local_9": {
                    "1": "result",
                    "2": "sum",
                    "26": "checksum"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_index",
                    "3": "index",
                    "4": "input_length",
                    "5": "data_offset",
                    "7": "data_length"
                },
                "param_2": {
                    "1": "input_array",
                    "10": "data",
                    "2": "data_buffer",
                    "3": "data_ptr",
                    "4": "input_string",
                    "8": "input_data"
                },
                "param_3": {
                    "1": "input_count",
                    "2": "string_length",
                    "3": "num_iterations",
                    "5": "input_length",
                    "6": "length",
                    "9": "data_length"
                }
            },
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "code": "\nvoid process_data_08000374(int data_length,char *data,int data_length)\n\n{\n  int remaining_length;\n  char *current_data;\n  int current_index;\n  char checksum;\n  \n  checksum = '\\0';\n  remaining_length = data_length;\n  current_data = data;\n  current_index = data_length;\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n    current_data = data;\n    current_index = data_length;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    checksum = (checksum != '\\0') + *current_data;\n    store_data_08000340(current_index,*current_data);\n    current_data = current_data + 1;\n    current_index = current_index + 1;\n  }\n  store_data_08000340(current_index,checksum);\n  return;\n}\n\n",
            "current_name": "process_data_08000374",
            "entrypoint": "0x08000374",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000374": "process_data_08000374",
                "local_14": "current_index",
                "local_18": "current_data",
                "local_1c": "remaining_length",
                "local_9": "checksum",
                "param_1": "data_length",
                "param_2": "data",
                "param_3": "data_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003ec": {
            "additional_data": {
                "FUN_080003ec": {
                    "1": "is_memory_values_equal",
                    "10": "check_memory_equality",
                    "12": "check_memory_values",
                    "2": "verify_memory_values"
                },
                "cVar1": {
                    "1": "current_char",
                    "2": "memory_value",
                    "6": "current_value"
                },
                "get_memory_value_08000310": {
                    "2": "get_memory_value"
                },
                "initialize_memory_080002f0": {
                    "1": "initialize_memory"
                },
                "local_14": {
                    "1": "current_string_index",
                    "2": "current_pointer",
                    "4": "current_ptr",
                    "5": "current_address",
                    "7": "output_string"
                },
                "local_18": {
                    "31": "current_index"
                },
                "local_1c": {
                    "1": "current_length",
                    "30": "remaining_length"
                },
                "local_9": {
                    "1": "num_equal_chars",
                    "10": "sum",
                    "2": "counter",
                    "5": "sum_of_values"
                },
                "param_1": {
                    "1": "string",
                    "14": "buffer",
                    "2": "input_array",
                    "3": "data",
                    "9": "input_string"
                },
                "param_2": {
                    "1": "source_index",
                    "30": "start_index"
                },
                "param_3": {
                    "1": "string_length",
                    "2": "array_length",
                    "28": "length"
                },
                "uVar2": {
                    "1": "last_memory_value",
                    "3": "expected_value",
                    "4": "memory_value"
                }
            },
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "code": "\nbool check_memory_values_080003ec(char *buffer,int start_index,int length)\n\n{\n  char current_value;\n  uint memory_value;\n  int remaining_length;\n  int current_index;\n  char *output_string;\n  byte sum;\n  \n  sum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  output_string = buffer;\n  if (DAT_2000046c == 0) {\n    initialize_memory();\n    current_index = start_index;\n    output_string = buffer;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_value = get_memory_value(current_index);\n    sum = current_value + (sum != 0);\n    *output_string = current_value;\n    current_index = current_index + 1;\n    output_string = output_string + 1;\n  }\n  memory_value = get_memory_value(current_index);\n  return sum == memory_value;\n}\n\n",
            "current_name": "check_memory_values_080003ec",
            "entrypoint": "0x080003ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080003ec": "check_memory_values_080003ec",
                "cVar1": "current_value",
                "get_memory_value_08000310": "get_memory_value",
                "initialize_memory_080002f0": "initialize_memory",
                "local_14": "output_string",
                "local_18": "current_index",
                "local_1c": "remaining_length",
                "local_9": "sum",
                "param_1": "buffer",
                "param_2": "start_index",
                "param_3": "length",
                "uVar2": "memory_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000478": {
            "additional_data": {
                "FUN_08000478": {
                    "1": "set_params",
                    "11": "initialize_params",
                    "2": "set_parameters",
                    "3": "initialize_variables",
                    "6": "initialize_data",
                    "8": "initialize_parameters"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "parameter1",
                    "3": "input1",
                    "4": "data1",
                    "6": "value1",
                    "9": "param1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "parameter2",
                    "3": "input2",
                    "4": "data2",
                    "6": "value2",
                    "9": "param2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "parameter3",
                    "3": "input3",
                    "4": "data3",
                    "6": "value3",
                    "9": "param3"
                }
            },
            "called": [],
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "code": "\nvoid initialize_params_08000478(undefined param1,undefined param2,undefined param3)\n\n{\n  DAT_20000e89 = param1;\n  DAT_20000e8a = param2;\n  DAT_20000e8b = param3;\n  return;\n}\n\n",
            "current_name": "initialize_params_08000478",
            "entrypoint": "0x08000478",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000478": "initialize_params_08000478",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004ac": {
            "additional_data": {
                "DAT_20000e70": {
                    "1": "data_buffer",
                    "3": "memory_block"
                },
                "DAT_20000e74": {
                    "1": "status",
                    "5": "flag"
                },
                "DAT_20000e78": {
                    "1": "config_data"
                },
                "DAT_20000e8c": {
                    "1": "data_1",
                    "3": "input_data"
                },
                "DAT_20000e90": {
                    "1": "data2",
                    "4": "output_data"
                },
                "FUN_080004ac": {
                    "1": "process_data",
                    "2": "initialize_and_process",
                    "27": "initialize_and_process_data"
                },
                "check_and_process_data_08004d7c": {
                    "1": "process_data",
                    "26": "check_and_process_data",
                    "4": "validate_and_process_data"
                },
                "fill_memory_0800b430": {
                    "14": "fill_memory",
                    "8": "initialize_memory"
                },
                "iVar1": {
                    "1": "return_value",
                    "23": "result"
                },
                "initialize_params_08000478": {
                    "1": "setup_parameters",
                    "2": "set_initial_parameters",
                    "22": "initialize_parameters",
                    "6": "initialize_params"
                },
                "print_error_message_08004030": {
                    "26": "print_error_message",
                    "4": "display_error_message"
                }
            },
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_and_process_data_080004ac(void)\n\n{\n  int result;\n  \n  fill_memory(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initialize_parameters(0,1,2);\n  DAT_20000e74 = 1;\n  result = check_and_process_data(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    print_error_message(10);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_process_data_080004ac",
            "entrypoint": "0x080004ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004ac": "initialize_and_process_data_080004ac",
                "check_and_process_data_08004d7c": "check_and_process_data",
                "fill_memory_0800b430": "fill_memory",
                "iVar1": "result",
                "initialize_params_08000478": "initialize_parameters",
                "print_error_message_08004030": "print_error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004fc": {
            "additional_data": {
                "DAT_20000e7c": {
                    "1": "reversed_float_1",
                    "4": "result1",
                    "6": "result_1"
                },
                "DAT_20000e80": {
                    "1": "reversed_float_2",
                    "4": "result2",
                    "6": "result_2"
                },
                "DAT_20000e84": {
                    "1": "reversed_float_3",
                    "4": "result3",
                    "6": "result_3"
                },
                "DAT_20000ebc": {
                    "1": "floating_point_value1",
                    "2": "floating_point_value_1",
                    "3": "constant_1"
                },
                "DAT_20000ec0": {
                    "1": "floating_point_value2",
                    "2": "floating_point_value_2",
                    "3": "constant_2"
                },
                "DAT_20000ec4": {
                    "1": "floating_point_param3",
                    "2": "floating_point_value_3",
                    "3": "constant_3"
                },
                "FUN_080004fc": {
                    "1": "calculate_and_assign_floats",
                    "2": "reverse_and_calculate_floating_point",
                    "3": "calculate_floating_point_values",
                    "4": "calculate_and_store_floating_points"
                },
                "calculate_and_store_floating_point_values": {
                    "1": "calculate_and_store_floating_point_values"
                },
                "calculate_floating_point_08009054": {
                    "1": "calculate_floating_point_from_reversed",
                    "2": "calculate_float",
                    "20": "calculate_floating_point",
                    "4": "perform_floating_point_calculation"
                },
                "input_1": {
                    "1": "input_1"
                },
                "input_2": {
                    "1": "input_2"
                },
                "input_3": {
                    "1": "input_3"
                },
                "param_1": {
                    "1": "input_param1",
                    "18": "input_1",
                    "4": "input_param_1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "18": "input_2",
                    "4": "input_param_2",
                    "7": "input2"
                },
                "param_3": {
                    "1": "input_value_3",
                    "18": "input_3",
                    "4": "input_param_3",
                    "7": "input3"
                },
                "reverse_bits_08008e44": {
                    "15": "reverse_bits"
                },
                "uVar1": {
                    "1": "reversed_bits",
                    "26": "reversed_input",
                    "3": "reversed_value"
                }
            },
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "calling": [
                "FUN_0800283a"
            ],
            "code": "\nvoid calculate_and_store_floating_points_080004fc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 reversed_input;\n  \n  reversed_input = reverse_bits(input_1);\n  DAT_20000e7c = calculate_floating_point(reversed_input,DAT_20000ebc);\n  reversed_input = reverse_bits(input_2);\n  DAT_20000e80 = calculate_floating_point(reversed_input,DAT_20000ec0);\n  reversed_input = reverse_bits(input_3);\n  DAT_20000e84 = calculate_floating_point(reversed_input,DAT_20000ec4);\n  return;\n}\n\n",
            "current_name": "calculate_and_store_floating_points_080004fc",
            "entrypoint": "0x080004fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004fc": "calculate_and_store_floating_points_080004fc",
                "calculate_floating_point_08009054": "calculate_floating_point",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "reverse_bits_08008e44": "reverse_bits",
                "uVar1": "reversed_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800056c": {
            "additional_data": {
                "FUN_0800056c": {
                    "1": "reverse_and_calculate",
                    "2": "calculate_and_convert",
                    "3": "process_input",
                    "4": "calculate_result",
                    "7": "process_data"
                },
                "calculate_float_08008c30": {
                    "8": "calculate_float"
                },
                "calculate_result_08008640": {
                    "8": "calculate_result"
                },
                "param_1": {
                    "1": "input_param",
                    "16": "input_value",
                    "4": "input_data",
                    "9": "input"
                },
                "reverse_bits_08008590": {
                    "8": "reverse_bits"
                },
                "uVar1": {
                    "1": "reversed_param",
                    "16": "reversed_value",
                    "2": "reversed_data",
                    "9": "reversed_input"
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nundefined4 process_data_0800056c(undefined4 input_value)\n\n{\n  undefined8 reversed_value;\n  \n  if (DAT_20000e73 != '\\0') {\n    reversed_value = reverse_bits(input_value);\n    reversed_value = calculate_result((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),0x66666666,0x40396666);\n    input_value = calculate_float((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n  }\n  return input_value;\n}\n\n",
            "current_name": "process_data_0800056c",
            "entrypoint": "0x0800056c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800056c": "process_data_0800056c",
                "calculate_float_08008c30": "calculate_float",
                "calculate_result_08008640": "calculate_result",
                "param_1": "input_value",
                "reverse_bits_08008590": "reverse_bits",
                "uVar1": "reversed_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080005b4": {
            "additional_data": {
                "DAT_20000e70": {
                    "1": "error_flag"
                },
                "DAT_20000e71": {
                    "1": "flag9"
                },
                "DAT_20000e72": {
                    "1": "flag10"
                },
                "DAT_20000e73": {
                    "1": "flag11"
                },
                "DAT_20000e74": {
                    "1": "status_az"
                },
                "DAT_20000e75": {
                    "1": "flag13"
                },
                "DAT_20000e76": {
                    "1": "status_ah"
                },
                "DAT_20000e77": {
                    "1": "status_ai"
                },
                "DAT_20000e78": {
                    "1": "temp_value3"
                },
                "DAT_20000e7c": {
                    "1": "val1"
                },
                "DAT_20000e80": {
                    "1": "val2"
                },
                "DAT_20000e84": {
                    "1": "status_am"
                },
                "DAT_20000e88": {
                    "1": "temp_uint3"
                },
                "DAT_20000e89": {
                    "1": "status_ax"
                },
                "DAT_20000e8a": {
                    "1": "status_aw"
                },
                "DAT_20000e8b": {
                    "1": "status_av"
                },
                "DAT_20000e8c": {
                    "1": "status_ao"
                },
                "DAT_20000e90": {
                    "1": "status_ap"
                },
                "DAT_20000e94": {
                    "1": "status_aq"
                },
                "DAT_20000e95": {
                    "1": "status_ay"
                },
                "DAT_20000e98": {
                    "1": "output_val3"
                },
                "DAT_20000e9c": {
                    "1": "status_as"
                },
                "DAT_20000ea9": {
                    "1": "constant"
                },
                "DAT_20000eb8": {
                    "1": "flag16"
                },
                "DAT_20000ed0": {
                    "1": "status_at"
                },
                "FUN_080005b4": {
                    "1": "main_function",
                    "2": "process_function",
                    "6": "process_input",
                    "9": "process_data"
                },
                "auStack_70": {
                    "1": "array_var2",
                    "2": "float_params2",
                    "4": "temp_array2"
                },
                "cVar3": {
                    "1": "error_flag",
                    "10": "error_code",
                    "2": "result",
                    "3": "status",
                    "4": "output",
                    "5": "error"
                },
                "calculate_and_initialize_0800981c": {
                    "1": "calculate_and_initialize"
                },
                "calculate_double_precision_08008894": {
                    "1": "calculate_double_precision"
                },
                "calculate_float_08008c30": {
                    "1": "calculate_float"
                },
                "calculate_float_08008eec": {
                    "1": "calculate_float"
                },
                "calculate_floating_point_08008cd8": {
                    "1": "calculate_floating_point"
                },
                "calculate_floating_point_08008cdc": {
                    "1": "calculate_floating_point"
                },
                "calculate_shifted_value_08008bf0": {
                    "1": "calculate_shifted_value"
                },
                "calculate_shifted_value_08009798": {
                    "1": "calculate_shifted_value"
                },
                "check_and_process_data_08004d7c": {
                    "1": "check_and_process_data"
                },
                "check_concatenation_result_08009214": {
                    "1": "check_concatenation_result"
                },
                "check_concatenation_result_0800923c": {
                    "1": "check_concatenation_result"
                },
                "fill_memory_0800b430": {
                    "1": "fill_memory"
                },
                "iVar1": {
                    "1": "return_value",
                    "28": "result"
                },
                "idx": {
                    "1": "index"
                },
                "initialize_params_08000478": {
                    "1": "initialize_params"
                },
                "initialize_system_080025e8": {
                    "1": "initialize_system"
                },
                "is_string_empty_08009228": {
                    "1": "is_string_empty"
                },
                "local_24": {
                    "1": "int_value4",
                    "2": "reverse_value"
                },
                "local_26": {
                    "1": "bytes_mask",
                    "2": "flag8"
                },
                "local_27": {
                    "1": "option_flag",
                    "2": "flag7"
                },
                "local_2c": {
                    "1": "float_value3",
                    "2": "var21"
                },
                "local_2d": {
                    "1": "mode2",
                    "2": "concatenation_type"
                },
                "local_2e": {
                    "1": "char_var2",
                    "2": "var19"
                },
                "local_2f": {
                    "1": "float_shift_index",
                    "2": "shift"
                },
                "local_34": {
                    "1": "current_value",
                    "2": "var17"
                },
                "local_38": {
                    "1": "operation_index",
                    "2": "var16"
                },
                "local_39": {
                    "1": "float_flag",
                    "2": "flag7"
                },
                "local_3a": {
                    "1": "temp_var_10",
                    "2": "var14"
                },
                "local_3b": {
                    "1": "loop_var3",
                    "2": "var13"
                },
                "local_3c": {
                    "1": "temp9",
                    "2": "flag4"
                },
                "local_3d": {
                    "1": "temp_bit_offset",
                    "2": "var11",
                    "3": "flag3"
                },
                "local_44": {
                    "1": "result_flag",
                    "2": "float_result"
                },
                "local_45": {
                    "1": "is_float_calc_param",
                    "2": "var9",
                    "4": "flag2"
                },
                "local_4c": {
                    "1": "float_result1",
                    "2": "var8",
                    "3": "float_value2"
                },
                "local_50": {
                    "1": "temp_param_1",
                    "2": "float_value"
                },
                "local_51": {
                    "1": "local_variable8",
                    "2": "empty_flag",
                    "3": "is_empty",
                    "5": "flag1"
                },
                "local_52": {
                    "1": "current_value",
                    "2": "char_value",
                    "4": "input_char",
                    "5": "character"
                },
                "local_58": {
                    "1": "current_char",
                    "2": "local_var6",
                    "4": "character",
                    "5": "input_value"
                },
                "local_7c": {
                    "1": "temp3",
                    "2": "temp_value3",
                    "3": "temp_var9",
                    "4": "param3"
                },
                "local_80": {
                    "1": "temp_var",
                    "2": "result2",
                    "3": "temp_var8",
                    "4": "param2"
                },
                "local_84": {
                    "1": "temp1",
                    "2": "var1",
                    "3": "temp_var7",
                    "4": "param1"
                },
                "local_94": {
                    "1": "float_array",
                    "2": "params_array",
                    "3": "array1",
                    "4": "params",
                    "5": "temp_array1"
                },
                "param_1": {
                    "1": "config_data",
                    "10": "input",
                    "2": "param",
                    "8": "input_param"
                },
                "parse_and_validate_character_0800184c": {
                    "1": "parse_and_validate_character"
                },
                "process_data_0800056c": {
                    "1": "process_data"
                },
                "process_data_08001f00": {
                    "1": "process_data"
                },
                "process_data_08002408": {
                    "1": "process_data"
                },
                "process_data_08002fd4": {
                    "1": "process_data"
                },
                "process_data_0800525c": {
                    "1": "process_data"
                },
                "reverse_bits_08008590": {
                    "1": "reverse_bits"
                },
                "reverse_bits_08008ba0": {
                    "1": "reverse_bits"
                },
                "uStack_74": {
                    "1": "temp_value3",
                    "2": "temp_stack2",
                    "3": "temp_var11"
                },
                "uStack_78": {
                    "1": "temp_value3",
                    "2": "temp4",
                    "3": "temp_var10"
                },
                "uVar2": {
                    "1": "shifted_value",
                    "2": "temp_value",
                    "3": "temp1",
                    "5": "value",
                    "6": "temp_var1",
                    "9": "temp"
                },
                "uVar4": {
                    "1": "temp_var1",
                    "4": "temp",
                    "5": "index",
                    "6": "temp2"
                },
                "uVar5": {
                    "1": "temp_value2",
                    "6": "temp3",
                    "8": "temp2"
                },
                "uVar6": {
                    "1": "value1",
                    "2": "reverse_bits_result",
                    "3": "temp3",
                    "6": "temp4"
                },
                "uVar7": {
                    "1": "value2",
                    "3": "temp4",
                    "6": "temp_var5"
                },
                "uVar8": {
                    "1": "value2",
                    "2": "calculate_and_initialize_result",
                    "3": "temp5",
                    "6": "temp_var6"
                },
                "update_data_08000220": {
                    "1": "update_data"
                }
            },
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "code": "\nchar process_data_080005b4(undefined4 input)\n\n{\n  int result;\n  undefined4 temp;\n  char error_code;\n  uint temp_var2;\n  undefined4 temp2;\n  undefined8 temp_var4;\n  undefined8 temp_var5;\n  undefined8 temp_var6;\n  undefined4 temp_array1 [4];\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 temp_var10;\n  undefined4 temp_var11;\n  undefined4 temp_array2 [6];\n  undefined4 input_value;\n  byte character;\n  undefined flag1;\n  undefined4 var7;\n  undefined4 float_value2;\n  undefined flag2;\n  uint var10;\n  byte flag3;\n  byte var12;\n  byte var13;\n  byte var14;\n  char var15;\n  uint var16;\n  undefined4 var17;\n  sbyte var18;\n  char var19;\n  char var20;\n  undefined4 var21;\n  byte var22;\n  ushort var23;\n  uint var24;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    error_code = '\\f';\n  }\n  else {\n    flag1 = 0;\n    var23 = 0;\n    var22 = 0;\n    var21 = 0xbf800000;\n    var20 = '\\0';\n    var19 = '\\0';\n    fill_memory(temp_array2 + 3,0,0xc);\n    fill_memory(temp_array2,0,0xc);\n    DAT_20000e70 = '\\0';\n    var18 = 0;\n    while (result = parse_and_validate_character(&character,temp_array2 + 6,input,&flag1), result != 0) {\n      temp_var4 = reverse_bits(input_value);\n      temp_var4 = calculate_shifted_value((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n      var24 = reverse_bits((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n      if (character == 0x47) {\n        switch(var24) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          var18 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          var18 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          var18 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          var18 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          var18 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          var18 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          var18 = 6;\n        }\n        switch(var24) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          var19 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          var19 = '\\x02';\n          break;\n        case 0x11:\n          initialize_params(0,1,2);\n          break;\n        case 0x12:\n          initialize_params(2,0,1);\n          break;\n        case 0x13:\n          initialize_params(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp = calculate_float(input_value,0x41200000);\n          temp_var4 = reverse_bits(temp);\n          temp_var4 = calculate_shifted_value((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var24 = reverse_bits((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          switch(var24) {\n          case 0x118:\n            var19 = '\\x03';\n            break;\n          case 0x119:\n            var19 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            var19 = '\\x05';\n            break;\n          case 0x12d:\n            var19 = '\\x06';\n          }\n          break;\n        case 0x35:\n          var20 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)var24 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp = calculate_float(input_value,0x41200000);\n          temp_var4 = reverse_bits(temp);\n          temp_var4 = calculate_shifted_value((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var24 = reverse_bits((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          if (var24 == 0x398) {\n            var19 = '\\a';\n          }\n          else if (var24 == 0x399) {\n            var19 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (character == 0x4d) {\n        if (var24 == 0x1e) {\nLAB_08000b96:\n          var18 = 5;\n        }\n        else if ((int)var24 < 0x1f) {\n          if ((int)var24 < 3) {\n            if (-1 < (int)var24) goto LAB_08000b96;\n          }\n          else if (var24 - 3 < 3) {\n            var18 = 8;\n          }\n        }\n        switch(var24) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (var18 != 0) {\n        if (((int)(uint)var23 >> var18 & 1U) == 0) {\n          var23 = var23 | (ushort)(1 << var18);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        var18 = 0;\n      }\n    }\n    error_code = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      var17 = 0;\n      var16 = 0;\n      var15 = '\\0';\n      flag1 = 0;\nswitchD_08000d18_caseD_47:\n      result = parse_and_validate_character(&character,temp_array2 + 6,input,&flag1);\n      if (result != 0) {\n        switch(character) {\n        case 0x46:\n          result = check_concatenation_result(input_value,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = process_data_080005b4(input_value);\n          }\n          else {\n            var21 = process_data_080005b4(input_value);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp_var2 = (uint)character;\n          temp = process_data_080005b4(input_value);\n          temp_array2[temp_var2 - 0x49] = temp;\n          break;\n        case 0x4c:\n          temp_var4 = reverse_bits(input_value);\n          temp_var4 = calculate_shifted_value((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var15 = calculate_shifted_value((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          break;\n        case 0x50:\n          var17 = input_value;\n          break;\n        case 0x52:\n          var16 = process_data_080005b4(input_value);\n          break;\n        case 0x53:\n          result = is_string_empty(input_value,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = is_string_empty(input_value,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          temp_var4 = reverse_bits(input_value);\n          temp_var4 = calculate_shifted_value((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          DAT_20000e88 = calculate_shifted_value((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          break;\n        case 0x58:\n          temp_array2[3] = process_data_080005b4(input_value);\n          var22 = var22 | 1;\n          break;\n        case 0x59:\n          temp_array2[4] = process_data_080005b4(input_value);\n          var22 = var22 | 2;\n          break;\n        case 0x5a:\n          temp_array2[5] = process_data_080005b4(input_value);\n          var22 = var22 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      error_code = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          process_data_080005b4((int)DAT_20000e76);\n          update_data(DAT_20000e77);\n        }\n        if ((var23 & 0x200) != 0) {\n          result = check_and_process_data_080005b4(DAT_20000e8c,&param3);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = param3;\n          DAT_20000e94 = temp_var10;\n          DAT_20000e98 = temp_var11;\n        }\n        switch(var19) {\n        case '\\x01':\n          result = is_string_empty(var17,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_data_080005b4(var17);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          temp_var4 = reverse_bits(var17);\n          temp_var4 = calculate_shifted_value((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var24 = reverse_bits((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          if ((((var15 == '\\x02') || (var15 == '\\x14')) && (-1 < (int)var24)) &&\n             ((int)var24 < 7)) {\n            if ((var22 == 0) && (var15 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)var24 < 1) {\n                var24 = (uint)DAT_20000e8c;\n              }\n              else {\n                var24 = var24 - 1;\n              }\n              result = check_and_process_data_080005b4(var24 & 0xff,temp_array1);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (var14 = 0; var14 < 3; var14 = var14 + 1) {\n                if (((int)(uint)var22 >> var14 & 1U) != 0) {\n                  if (var15 == '\\x14') {\n                    temp_var2 = (uint)var14;\n                    temp = calculate_floating_point(*(undefined4 *)(&DAT_20000e74 + (var14 + 2) * 4),\n                                         temp_array2[var14 + 3]);\n                    temp_array1[temp_var2] = temp;\n                  }\n                  else {\n                    temp_array1[var14] = temp_array2[var14 + 3];\n                  }\n                }\n              }\n              process_data_080005b4_08004bf4(var24 & 0xff,temp_array1);\n              if (var24 == DAT_20000e8c) {\n                DAT_20000e90 = temp_array1[0];\n                DAT_20000e94 = temp_array1[1];\n                DAT_20000e98 = temp_array1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          var22 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (var22 != 0) {\n            for (var13 = 0; var13 < 3; var13 = var13 + 1) {\n              if (((int)(uint)var22 >> var13 & 1U) == 0) {\n                temp_array2[var13 + 3] = *(undefined4 *)(&DAT_20000e74 + (var13 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)var13;\n                temp = calculate_floating_point(temp_array2[var13 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (var13 + 2) * 4));\n                temp_array2[temp_var2 + 3] = temp;\n              }\n              else {\n                temp2 = temp_array2[var13 + 3];\n                temp = calculate_floating_point(*(undefined4 *)(&DAT_20000e70 + (var13 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (var13 + 10) * 4));\n                temp_var2 = (uint)var13;\n                temp = calculate_floating_point(temp2,temp);\n                temp_array2[temp_var2 + 3] = temp;\n              }\n            }\n            process_data_080005b4_08001e98(temp_array2[3],temp_array2[4],temp_array2[5],DAT_20000ed0,0);\n          }\n          if (var19 == '\\x05') {\n            result = check_and_process_data_080005b4(7,temp_array1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = check_and_process_data_080005b4(6,temp_array1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          process_data_080005b4_08001e98(temp_array1[3],param1,param2,DAT_20000ed0,0);\n          DAT_20000e7c = temp_array1[3];\n          DAT_20000e80 = param1;\n          DAT_20000e84 = param2;\n          var22 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (var19 == '\\x06') {\n            process_data_080005b4_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            process_data_080005b4_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (var22 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (var12 = 0; var12 < 3; var12 = var12 + 1) {\n              if (((int)(uint)var22 >> var12 & 1U) != 0) {\n                temp = calculate_floating_point(*(undefined4 *)(&DAT_20000e74 + (var12 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (var12 + 8) * 4));\n                temp_var2 = (uint)var12;\n                temp = calculate_floating_point(temp,temp_array2[var12 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp_var2 + 10) * 4) = temp;\n              }\n            }\n          }\n          var22 = 0;\n          break;\n        case '\\b':\n          fill_memory(&DAT_20000e9c,0,0xc);\n        }\n        if (((var23 & 4) != 0) || (var22 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = is_string_empty(var21,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((var20 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (flag3 = 0; flag3 < 3; flag3 = flag3 + 1) {\n            if (((int)(uint)var22 >> flag3 & 1U) == 0) {\n              temp_array2[flag3 + 3] = *(undefined4 *)(&DAT_20000e74 + (flag3 + 2) * 4);\n            }\n            else if (var20 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)flag3;\n                temp = calculate_floating_point(temp_array2[flag3 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (flag3 + 2) * 4));\n                temp_array2[temp_var2 + 3] = temp;\n              }\n              else {\n                temp2 = temp_array2[flag3 + 3];\n                temp = calculate_floating_point(*(undefined4 *)(&DAT_20000e70 + (flag3 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (flag3 + 10) * 4));\n                temp_var2 = (uint)flag3;\n                temp = calculate_floating_point(temp2,temp);\n                temp_array2[temp_var2 + 3] = temp;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (var22 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              process_data_080005b4_08001e98(temp_array2[3],temp_array2[4],temp_array2[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (var22 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp = var21;\n              if (DAT_20000e72 == '\\0') {\n                temp = DAT_20000e78;\n              }\n              process_data_080005b4_08001e98(temp_array2[3],temp_array2[4],temp_array2[5],temp,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            var22 = var22 & ~(byte)(1 << DAT_20000e8b);\n            if ((var22 == 0) ||\n               (((result = check_concatenation_result(var16,0), result != 0 &&\n                 (result = check_concatenation_result(temp_array2[DAT_20000e89],0), result != 0)) &&\n                (result = check_concatenation_result(temp_array2[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = check_concatenation_result(var16,0);\n              if (result == 0) {\n                float_value2 = calculate_floating_point(temp_array2[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                var7 = calculate_floating_point(temp_array2[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                fill_memory(temp_array2,0,0xc);\n                temp = calculate_float(var16,0x40800000);\n                temp = calculate_float(temp,var16);\n                temp2 = calculate_float(float_value2,float_value2);\n                temp = calculate_floating_point(temp,temp2);\n                temp2 = calculate_float(var7,var7);\n                var10 = calculate_floating_point(temp,temp2);\n                result = is_string_empty(var10,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                temp_var4 = reverse_bits(var10);\n                temp_var4 = process_data_080005b4_080098d0((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n                temp_var5 = reverse_bits(float_value2);\n                temp_var6 = reverse_bits(var7);\n                temp_var5 = calculate_and_initialize((int)temp_var5,(int)((ulonglong)temp_var5 >> 0x20),(int)temp_var6,\n                                     (int)((ulonglong)temp_var6 >> 0x20));\n                temp_var4 = calculate_double_precision((int)temp_var4,(uint)((ulonglong)temp_var4 >> 0x20) ^ 0x80000000,\n                                     (int)temp_var5,(int)((ulonglong)temp_var5 >> 0x20));\n                var10 = calculate_float((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  var10 = var10 ^ 0x80000000;\n                }\n                result = is_string_empty(var16,0);\n                if (result != 0) {\n                  var10 = var10 ^ 0x80000000;\n                  var16 = var16 ^ 0x80000000;\n                }\n                temp = calculate_float(var7,var10);\n                temp = calculate_floating_point(float_value2,temp);\n                temp_var2 = (uint)DAT_20000e89;\n                temp = calculate_float(temp,0x3f000000);\n                temp_array2[temp_var2] = temp;\n                temp = calculate_float(float_value2,var10);\n                temp = calculate_floating_point(temp,var7);\n                temp_var2 = (uint)DAT_20000e8a;\n                temp = calculate_float(temp,0x3f000000);\n                temp_array2[temp_var2] = temp;\n              }\n              else {\n                temp_var4 = reverse_bits(temp_array2[DAT_20000e89]);\n                temp_var5 = reverse_bits(temp_array2[DAT_20000e8a]);\n                temp_var4 = calculate_and_initialize((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20),(int)temp_var5,\n                                     (int)((ulonglong)temp_var5 >> 0x20));\n                var16 = calculate_float((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n              }\n              flag2 = DAT_20000e71 == '\\x02';\n              temp = var21;\n              if (DAT_20000e72 == '\\0') {\n                temp = DAT_20000e78;\n              }\n              process_data_080005b4(&DAT_20000e7c,temp_array2 + 3,temp_array2,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,temp,DAT_20000e72,var16,flag2);\n            }\n            break;\n          case '\\x04':\n            if (var22 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = temp_array2[3];\n          DAT_20000e80 = temp_array2[4];\n          DAT_20000e84 = temp_array2[5];\n        }\n        error_code = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          process_data_080005b4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_system();\n            error_code = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            error_code = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return error_code;\n}\n\n",
            "current_name": "process_data_080005b4",
            "entrypoint": "0x080005b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080005b4": "process_data_080005b4",
                "auStack_70": "temp_array2",
                "cVar3": "error_code",
                "calculate_and_initialize_0800981c": "calculate_and_initialize",
                "calculate_double_precision_08008894": "calculate_double_precision",
                "calculate_float_08008c30": "calculate_float",
                "calculate_float_08008eec": "calculate_float",
                "calculate_floating_point_08008cd8": "calculate_floating_point",
                "calculate_floating_point_08008cdc": "calculate_floating_point",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "calculate_shifted_value_08009798": "calculate_shifted_value",
                "check_and_process_data_08004d7c": "check_and_process_data",
                "check_concatenation_result_08009214": "check_concatenation_result",
                "check_concatenation_result_0800923c": "check_concatenation_result",
                "fill_memory_0800b430": "fill_memory",
                "iVar1": "result",
                "initialize_params_08000478": "initialize_params",
                "initialize_system_080025e8": "initialize_system",
                "is_string_empty_08009228": "is_string_empty",
                "local_24": "var24",
                "local_26": "var23",
                "local_27": "var22",
                "local_2c": "var21",
                "local_2d": "var20",
                "local_2e": "var19",
                "local_2f": "var18",
                "local_34": "var17",
                "local_38": "var16",
                "local_39": "var15",
                "local_3a": "var14",
                "local_3b": "var13",
                "local_3c": "var12",
                "local_3d": "flag3",
                "local_44": "var10",
                "local_45": "flag2",
                "local_4c": "float_value2",
                "local_50": "var7",
                "local_51": "flag1",
                "local_52": "character",
                "local_58": "input_value",
                "local_7c": "param3",
                "local_80": "param2",
                "local_84": "param1",
                "local_94": "temp_array1",
                "param_1": "input",
                "parse_and_validate_character_0800184c": "parse_and_validate_character",
                "process_data_0800056c": "process_data",
                "process_data_08001f00": "process_data",
                "process_data_08002408": "process_data",
                "process_data_08002fd4": "process_data",
                "process_data_0800525c": "process_data",
                "reverse_bits_08008590": "reverse_bits",
                "reverse_bits_08008ba0": "reverse_bits",
                "uStack_74": "temp_var11",
                "uStack_78": "temp_var10",
                "uVar2": "temp",
                "uVar4": "temp_var2",
                "uVar5": "temp2",
                "uVar6": "temp_var4",
                "uVar7": "temp_var5",
                "uVar8": "temp_var6",
                "update_data_08000220": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800184c": {
            "additional_data": {
                "FUN_0800184c": {
                    "1": "parse_and_validate_letter",
                    "2": "parse_and_validate_input",
                    "3": "decode_character",
                    "4": "check_and_update_character",
                    "5": "parse_and_validate_character"
                },
                "iVar1": {
                    "1": "integer_result",
                    "24": "parse_result",
                    "3": "result"
                },
                "param_1": {
                    "1": "decoded_character",
                    "2": "character_output",
                    "3": "output_char",
                    "5": "output_character",
                    "9": "output"
                },
                "param_2": {
                    "1": "limit",
                    "2": "data_size",
                    "3": "max_value"
                },
                "param_3": {
                    "1": "base_addr",
                    "2": "input_data",
                    "3": "data",
                    "7": "data_offset",
                    "8": "base_address"
                },
                "param_4": {
                    "1": "current_address",
                    "2": "input_string",
                    "3": "index",
                    "5": "input"
                },
                "uVar2": {
                    "1": "status",
                    "2": "is_valid",
                    "3": "success",
                    "4": "result",
                    "6": "return_value",
                    "8": "success_flag"
                }
            },
            "called": [
                "FUN_08002638"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nundefined4 parse_and_validate_character_0800184c(byte *output,undefined4 max_value,int base_address,byte *input)\n\n{\n  int parse_result;\n  undefined4 success_flag;\n  \n  if (*(char *)(base_address + (uint)*input) == '\\0') {\n    success_flag = 0;\n  }\n  else {\n    *output = *(byte *)(base_address + (uint)*input);\n    if ((*output < 0x41) || (0x5a < *output)) {\n      DAT_20000e70 = 2;\n      success_flag = 0;\n    }\n    else {\n      *input = *input + 1;\n      parse_result = parse_integer_08002638(base_address,input,max_value);\n      if (parse_result == 0) {\n        DAT_20000e70 = 1;\n        success_flag = 0;\n      }\n      else {\n        success_flag = 1;\n      }\n    }\n  }\n  return success_flag;\n}\n\n",
            "current_name": "parse_and_validate_character_0800184c",
            "entrypoint": "0x0800184c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800184c": "parse_and_validate_character_0800184c",
                "iVar1": "parse_result",
                "param_1": "output",
                "param_2": "max_value",
                "param_3": "base_address",
                "param_4": "input",
                "uVar2": "success_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080018cc": {
            "additional_data": {
                "0xfffffaaf": {
                    "1": "mask_value"
                },
                "FUN_080018cc": {
                    "1": "update_data_with_param",
                    "2": "combine_and_update_values",
                    "3": "update_data_with_mask",
                    "5": "update_register_value"
                },
                "_DAT_40021014": {
                    "1": "current_value",
                    "4": "data_register",
                    "5": "existing_value",
                    "6": "register_value"
                },
                "_DAT_40021014 & 0xfffffaaf": {
                    "1": "masked_value"
                },
                "param_1": {
                    "1": "input_param",
                    "15": "new_value",
                    "2": "new_config_value",
                    "3": "value",
                    "5": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\n\n\nvoid update_data_080018cc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "current_name": "update_data_080018cc",
            "entrypoint": "0x080018cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080018cc": "update_data_080018cc",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080018fc": {
            "additional_data": {
                "0xfffff55f": {
                    "1": "mask"
                },
                "FUN_080018fc": {
                    "1": "update_memory_address",
                    "2": "update_register_value",
                    "3": "update_flag_bits"
                },
                "_DAT_40021014": {
                    "1": "status_register",
                    "2": "memory_value",
                    "3": "flag_register",
                    "4": "memory_address",
                    "6": "register_value"
                },
                "param_1": {
                    "1": "new_data",
                    "2": "new_bits",
                    "3": "input_value",
                    "6": "value",
                    "7": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\n\n\nvoid update_flag_bits_080018fc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "current_name": "update_flag_bits_080018fc",
            "entrypoint": "0x080018fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080018fc": "update_flag_bits_080018fc",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800192c": {
            "additional_data": {
                "DAT_20000e4c": {
                    "1": "flag_result",
                    "3": "output_flag",
                    "4": "is_bit_set"
                },
                "DAT_20000ee4": {
                    "1": "flag_value",
                    "2": "original_value",
                    "3": "input_data",
                    "4": "input_flag"
                },
                "FUN_0800192c": {
                    "1": "update_flag_based_on_bit_check",
                    "3": "set_flag_based_on_condition"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "code": "\nvoid set_flag_based_on_condition_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "current_name": "set_flag_based_on_condition_0800192c",
            "entrypoint": "0x0800192c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800192c": "set_flag_based_on_condition_0800192c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800195c": {
            "additional_data": {
                "DAT_20000ea9": {
                    "1": "flag_check",
                    "2": "status",
                    "3": "condition_check",
                    "9": "flag"
                },
                "DAT_20000eaa": {
                    "1": "flag_byte",
                    "11": "system_flags",
                    "2": "status",
                    "4": "flags"
                },
                "FUN_0800195c": {
                    "1": "initialize_system_and_update_flag",
                    "13": "initialize_system_if_needed",
                    "2": "initialize_system_if_necessary",
                    "3": "initialize_and_set_flag",
                    "8": "initialize_system"
                },
                "initialize_system_080025e8": {
                    "1": "system_initializer"
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid initialize_system_if_needed_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    system_initializer();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_system_if_needed_0800195c",
            "entrypoint": "0x0800195c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800195c": "initialize_system_if_needed_0800195c",
                "initialize_system_080025e8": "system_initializer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001994": {
            "additional_data": {
                "FUN_08001994": {
                    "1": "reverse_and_process_data",
                    "21": "process_data"
                },
                "local_11": {
                    "1": "flag_counter",
                    "14": "counter",
                    "2": "counter_flag",
                    "5": "count"
                },
                "local_18": {
                    "1": "lower_limit",
                    "2": "constant3",
                    "3": "min_value",
                    "4": "limit",
                    "8": "min_product",
                    "9": "threshold"
                },
                "local_1a": {
                    "1": "flag_data",
                    "2": "updated_flag",
                    "3": "flag_bits",
                    "6": "xor_value"
                },
                "local_20": {
                    "1": "shift_reg_reset",
                    "2": "value6",
                    "4": "counter3"
                },
                "local_24": {
                    "1": "difference3",
                    "2": "value5",
                    "5": "counter2"
                },
                "local_28": {
                    "1": "difference2",
                    "2": "value4",
                    "5": "counter1"
                },
                "local_2c": {
                    "1": "delta",
                    "16": "difference"
                },
                "local_30": {
                    "1": "value7",
                    "2": "total_shift",
                    "5": "accumulator",
                    "6": "total",
                    "7": "sum"
                },
                "local_34": {
                    "1": "limit",
                    "2": "sum",
                    "8": "counter"
                },
                "local_36": {
                    "1": "variable3",
                    "2": "value2",
                    "5": "updated_data",
                    "9": "data2"
                },
                "local_3c": {
                    "1": "bitwise_or_val",
                    "15": "bitwise_or",
                    "3": "bitwise_or_value",
                    "4": "bitwise_or_result"
                },
                "local_40": {
                    "1": "product1",
                    "16": "max_product",
                    "2": "float_value2",
                    "4": "max_value"
                },
                "local_44": {
                    "1": "result",
                    "13": "float_value",
                    "2": "float_val",
                    "3": "float_result",
                    "4": "float1",
                    "6": "float_value1"
                },
                "local_48": {
                    "1": "shifted_val",
                    "2": "shift_value",
                    "27": "shifted_value"
                },
                "local_4c": {
                    "1": "variable2",
                    "2": "product1",
                    "7": "product",
                    "9": "product4"
                },
                "local_4e": {
                    "1": "init_data1",
                    "15": "data1",
                    "2": "value4"
                },
                "local_54": {
                    "1": "local_product3",
                    "10": "value3",
                    "14": "product3"
                },
                "local_58": {
                    "1": "max_product_2",
                    "10": "value2",
                    "14": "product2"
                },
                "local_5c": {
                    "1": "input1",
                    "10": "value1",
                    "14": "product1"
                },
                "local_61": {
                    "1": "flag_bitmask",
                    "2": "flag_counter",
                    "8": "temp_flag"
                },
                "param_1": {
                    "1": "input1",
                    "18": "flags",
                    "2": "byte_flag",
                    "9": "flag"
                },
                "param_2": {
                    "1": "enable_bitwise_operation",
                    "2": "condition1",
                    "3": "flag1",
                    "4": "condition"
                },
                "param_3": {
                    "1": "xor_param",
                    "2": "condition2",
                    "4": "flag2"
                },
                "param_4": {
                    "1": "input4",
                    "2": "param",
                    "3": "input_value",
                    "7": "data",
                    "9": "value"
                },
                "uVar1": {
                    "7": "result1",
                    "8": "result"
                },
                "uVar2": {
                    "1": "result2",
                    "10": "max_value",
                    "3": "max_product"
                },
                "uVar3": {
                    "1": "reversed_value",
                    "2": "result2",
                    "3": "reverse_bits"
                },
                "uVar4": {
                    "1": "value2",
                    "2": "processed_data",
                    "3": "temp2",
                    "4": "processed_value"
                }
            },
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "calling": [
                "FUN_08001d4c"
            ],
            "code": "\nvoid process_data_08001994(byte flags,char condition,char flag2,undefined4 value)\n\n{\n  undefined4 result;\n  uint max_value;\n  undefined8 reverse_bits;\n  undefined8 processed_value;\n  byte temp_flag;\n  uint product1;\n  uint product2;\n  uint product3;\n  ushort data1;\n  uint product4;\n  int shifted_value;\n  undefined4 float_value;\n  uint max_product;\n  uint bitwise_or;\n  ushort data2;\n  uint counter;\n  uint sum;\n  int difference;\n  int counter1;\n  int counter2;\n  int counter3;\n  ushort xor_value;\n  uint threshold;\n  char counter;\n  \n  counter = '\\0';\n  fill_memory_0800b430(&product1,0,0xc);\n  if ((flags & 1) != 0) {\n    counter = counter + '\\x01';\n    reverse_bits = reverse_bits_08008590(DAT_20000ebc);\n    product1 = calculate_product_080095b8((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    counter = counter + '\\x01';\n    reverse_bits = reverse_bits_08008590(DAT_20000ec0);\n    product2 = calculate_product_080095b8((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    counter = counter + '\\x01';\n    reverse_bits = reverse_bits_08008590(DAT_20000ec4);\n    product3 = calculate_product_080095b8((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20));\n  }\n  max_value = product3;\n  if (product3 < product2) {\n    max_value = product2;\n  }\n  max_product = product1;\n  if (product1 < max_value) {\n    max_product = max_value;\n  }\n  reverse_bits = reverse_bits_0800854c(max_product);\n  processed_value = reverse_bits_0800854c(counter);\n  processed_value = process_data_08001994_080098d0((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n  reverse_bits = calculate_double_precision_08008894((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20),(int)processed_value,\n                       (int)((ulonglong)processed_value >> 0x20));\n  float_value = calculate_float_08008c30((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20));\n  result = calculate_float_08008eec(DAT_20000edc,float_value);\n  result = calculate_floating_point_08009054(result,0x453b8000);\n  reverse_bits = reverse_bits_08008590(result);\n  reverse_bits = calculate_value_08009318((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20));\n  shifted_value = calculate_shifted_value_08008bf0((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20));\n  reverse_bits = reverse_bits_0800854c(counter);\n  reverse_bits = process_data_08001994_080098d0((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20));\n  processed_value = reverse_bits_08008590(value);\n  reverse_bits = calculate_result_08008640((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20),(int)processed_value,\n                       (int)((ulonglong)processed_value >> 0x20));\n  result = calculate_float_08008c30((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20));\n  result = calculate_float_08008eec(float_value,result);\n  result = calculate_floating_point_08009054(0x4c64e1c0,result);\n  reverse_bits = reverse_bits_08008590(result);\n  product4 = calculate_product_080095b8((int)reverse_bits,(int)((ulonglong)reverse_bits >> 0x20));\n  threshold = 75000;\n  if (product4 < 75000) {\n    threshold = product4;\n  }\n  data1 = DAT_20000ed4;\n  xor_value = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (condition == '\\0') {\n    xor_value = xor_value ^ 0xaa0;\n  }\n  update_flag_bits_080018fc(xor_value);\n  update_data_080018cc(data1);\n  counter1 = -(max_product >> 1);\n  difference = threshold - DAT_20000ec9;\n  sum = 0;\n  counter = 10000;\n  temp_flag = flags;\n  counter2 = counter1;\n  counter3 = counter1;\n  while( true ) {\n    data2 = data1;\n    bitwise_or = calculate_bitwise_or_080078f4();\n    if (flag2 == '\\0') {\n      bitwise_or = bitwise_or ^ 0x1e;\n    }\n    if (((temp_flag & 1) != 0) && (counter3 = counter3 + product1, 0 < counter3)) {\n      if ((bitwise_or & 0x10) == 0) {\n        temp_flag = temp_flag & 0xfe;\n      }\n      else {\n        data2 = data2 ^ 0x10;\n      }\n      counter3 = counter3 - max_product;\n    }\n    if (((temp_flag & 2) != 0) && (counter2 = counter2 + product2, 0 < counter2)) {\n      if ((bitwise_or & 8) == 0) {\n        temp_flag = temp_flag & 0xfd;\n      }\n      else {\n        data2 = data2 ^ 0x440;\n      }\n      counter2 = counter2 - max_product;\n    }\n    if (((temp_flag & 4) != 0) && (counter1 = counter1 + product3, 0 < counter1)) {\n      if ((bitwise_or & 4) == 0) {\n        temp_flag = temp_flag & 0xfb;\n      }\n      else {\n        data2 = data2 ^ 0x100;\n      }\n      counter1 = counter1 - max_product;\n    }\n    if ((temp_flag == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_data_080018cc(data2);\n    FUNC_08002828(DAT_20000ec9);\n    update_data_080018cc(data1);\n    FUNC_08002828(difference);\n    if ((product4 < threshold) && (counter = threshold + counter, 20000 < counter)) {\n      counter = counter - 20000;\n      sum = shifted_value + sum;\n      threshold = 60000000 / sum;\n      if (threshold < product4) {\n        threshold = product4;\n      }\n      difference = threshold - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08001994",
            "entrypoint": "0x08001994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001994": "process_data_08001994",
                "local_11": "counter",
                "local_18": "threshold",
                "local_1a": "xor_value",
                "local_20": "counter3",
                "local_24": "counter2",
                "local_28": "counter1",
                "local_2c": "difference",
                "local_30": "sum",
                "local_34": "counter",
                "local_36": "data2",
                "local_3c": "bitwise_or",
                "local_40": "max_product",
                "local_44": "float_value",
                "local_48": "shifted_value",
                "local_4c": "product4",
                "local_4e": "data1",
                "local_54": "product3",
                "local_58": "product2",
                "local_5c": "product1",
                "local_61": "temp_flag",
                "param_1": "flags",
                "param_2": "condition",
                "param_3": "flag2",
                "param_4": "value",
                "uVar1": "result",
                "uVar2": "max_value",
                "uVar3": "reverse_bits",
                "uVar4": "processed_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "additional_data": {
                "DAT_20000ee8": {
                    "1": "data3",
                    "2": "data_3"
                },
                "DAT_20000eec": {
                    "1": "data_array",
                    "2": "data1",
                    "3": "data_1"
                },
                "DAT_20000ef0": {
                    "1": "data2",
                    "3": "data_2"
                },
                "FUNC_08002814": {
                    "1": "perform_function",
                    "2": "perform_action"
                },
                "FUN_08001d4c": {
                    "1": "initialize_data_processing",
                    "30": "initialize_and_process_data"
                },
                "cVar1": {
                    "1": "updated_char",
                    "2": "decremented_counter",
                    "5": "updated_counter"
                },
                "initialize_flags_080057e4": {
                    "6": "initialize_flags"
                },
                "initialize_global_variables_08005790": {
                    "6": "initialize_global_variables"
                },
                "local_9": {
                    "1": "countdown",
                    "12": "counter",
                    "15": "loop_counter",
                    "3": "count"
                },
                "process_data_08001994": {
                    "6": "process_data"
                }
            },
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "calling": [
                "FUN_080024c4"
            ],
            "code": "\nvoid initialize_and_process_data_08001d4c(void)\n\n{\n  char updated_counter;\n  char loop_counter;\n  \n  initialize_global_variables();\n  process_data(4,1,0,DAT_20000eec);\n  process_data(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  loop_counter = '\\x02';\n  while( true ) {\n    updated_counter = loop_counter + -1;\n    if (loop_counter == '\\0') break;\n    process_data(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    loop_counter = updated_counter;\n    if ('\\0' < updated_counter) {\n      process_data(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  initialize_flags();\n  return;\n}\n\n",
            "current_name": "initialize_and_process_data_08001d4c",
            "entrypoint": "0x08001d4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001d4c": "initialize_and_process_data_08001d4c",
                "cVar1": "updated_counter",
                "initialize_flags_080057e4": "initialize_flags",
                "initialize_global_variables_08005790": "initialize_global_variables",
                "local_9": "loop_counter",
                "process_data_08001994": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "additional_data": {
                "FUNC_08008244": {
                    "1": "execute_initialization",
                    "2": "execute_initial_functions",
                    "3": "initialize_functions",
                    "5": "initialize_system"
                },
                "FUNC_080082ba": {
                    "1": "execute_additional_code",
                    "2": "execute_initialization",
                    "3": "initialize_memory"
                },
                "FUN_08001ddc": {
                    "1": "initialize_program_loop",
                    "2": "initialize_program_and_process_data",
                    "22": "initialize_program",
                    "3": "initialize_and_process"
                },
                "display_status_message_080041a0": {
                    "1": "display_status",
                    "29": "display_status_message"
                },
                "fill_memory_0800b430": {
                    "1": "reset_memory",
                    "2": "initialize_memory",
                    "24": "fill_memory"
                },
                "initialize_and_calculate_floating_points_0800283a": {
                    "1": "initialize_and_calculate_float",
                    "21": "initialize_and_calculate_floating_points",
                    "4": "initialize_and_calculate_floats"
                },
                "initialize_and_print_grbl_version_080039a0": {
                    "1": "init_and_print_version",
                    "21": "initialize_and_print_grbl_version",
                    "6": "initialize_and_print_version"
                },
                "initialize_and_process_data_080004ac": {
                    "1": "initialize_data_processing",
                    "2": "initialize_and_process_data_2",
                    "23": "initialize_and_process_data"
                },
                "initialize_and_process_data_080051b4": {
                    "1": "initialize_and_process_input_data",
                    "2": "initialize_data_processing",
                    "27": "initialize_and_process_data"
                },
                "initialize_data_080001f8": {
                    "1": "init_data",
                    "30": "initialize_data"
                },
                "initialize_execution_08005238": {
                    "1": "init_execution",
                    "30": "initialize_execution"
                },
                "initialize_memory_08002f24": {
                    "1": "initialize_memory_usage",
                    "29": "initialize_memory"
                },
                "initialize_memory_08005814": {
                    "1": "initialize_memory2",
                    "2": "initialize_memory_2",
                    "25": "initialize_memory"
                },
                "initialize_program_0800583c": {
                    "1": "initialize_program_2",
                    "20": "initialize_program",
                    "3": "initialize_program_components"
                },
                "process_alarm_08003a74": {
                    "31": "process_alarm"
                },
                "process_data_loop_080039bc": {
                    "31": "process_data_loop"
                },
                "process_input_08003f34": {
                    "31": "process_input"
                },
                "set_flag_based_on_condition_0800192c": {
                    "20": "set_flag_based_on_condition",
                    "4": "set_flag_conditionally",
                    "7": "set_flag"
                }
            },
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_program_08001ddc(void)\n\n{\n  FUNC_08008244();\n  initialize_and_process_data();\n  initialize_program_08001ddc();\n  fill_memory(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initialize_memory();\n      initialize_and_process_data();\n      initialize_and_print_grbl_version();\n      initialize_execution();\n      initialize_data();\n      set_flag_based_on_condition();\n      initialize_memory();\n      initialize_and_calculate_floating_points();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        display_status_message(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        process_data_loop();\n      }\n    }\n    process_alarm();\n    process_input();\n  } while( true );\n}\n\n",
            "current_name": "initialize_program_08001ddc",
            "entrypoint": "0x08001ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ddc": "initialize_program_08001ddc",
                "display_status_message_080041a0": "display_status_message",
                "fill_memory_0800b430": "fill_memory",
                "initialize_and_calculate_floating_points_0800283a": "initialize_and_calculate_floating_points",
                "initialize_and_print_grbl_version_080039a0": "initialize_and_print_grbl_version",
                "initialize_and_process_data_080004ac": "initialize_and_process_data",
                "initialize_and_process_data_080051b4": "initialize_and_process_data",
                "initialize_data_080001f8": "initialize_data",
                "initialize_execution_08005238": "initialize_execution",
                "initialize_memory_08002f24": "initialize_memory",
                "initialize_memory_08005814": "initialize_memory",
                "initialize_program_0800583c": "initialize_program",
                "process_alarm_08003a74": "process_alarm",
                "process_data_loop_080039bc": "process_data_loop",
                "process_input_08003f34": "process_input",
                "set_flag_based_on_condition_0800192c": "set_flag_based_on_condition"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001e98": {
            "additional_data": {
                "DAT_20000ea8": {
                    "1": "data_check_complete"
                },
                "DAT_20000ea9": {
                    "1": "alarm_status"
                },
                "DAT_20000eb8": {
                    "1": "initialization_flag"
                },
                "FUN_08001e98": {
                    "1": "update_values_if_not_alarm",
                    "19": "process_data",
                    "2": "process_alarm",
                    "3": "process_and_update_values"
                },
                "calculate_and_update_values_08003004": {
                    "1": "calculate_and_upd_values",
                    "7": "calculate_and_update_values"
                },
                "check_data_equality_08002fac": {
                    "7": "check_data_equality"
                },
                "iVar1": {
                    "1": "is_data_equal",
                    "2": "check_result",
                    "4": "result",
                    "5": "data_equality_check_result",
                    "6": "is_equal",
                    "9": "equality_check_result"
                },
                "initialize_if_needed_0800585c": {
                    "9": "initialize_if_needed"
                },
                "param_1": {
                    "1": "input_1",
                    "3": "arg1",
                    "4": "input_param_1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "input_2",
                    "3": "arg2",
                    "4": "value2",
                    "7": "input2"
                },
                "param_3": {
                    "1": "data3",
                    "3": "arg3",
                    "4": "value_3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "data4",
                    "3": "arg4",
                    "4": "input_param_4",
                    "7": "input4"
                },
                "param_5": {
                    "1": "param_5",
                    "3": "input_param5",
                    "4": "param5",
                    "6": "input5"
                },
                "process_alarm_08003a74": {
                    "7": "process_alarm"
                }
            },
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "code": "\nvoid process_data_08001e98(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined input5)\n\n{\n  int equality_check_result;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      process_alarm();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      equality_check_result = check_data_equality();\n    } while (equality_check_result != 0);\n    calculate_and_update_values(input1,input2,input3,input4,input5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initialize_if_needed();\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08001e98",
            "entrypoint": "0x08001e98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001e98": "process_data_08001e98",
                "calculate_and_update_values_08003004": "calculate_and_update_values",
                "check_data_equality_08002fac": "check_data_equality",
                "iVar1": "equality_check_result",
                "initialize_if_needed_0800585c": "initialize_if_needed",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "process_alarm_08003a74": "process_alarm"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f00": {
            "additional_data": {
                "FUN_08001f00": {
                    "1": "calculate_and_process_data",
                    "21": "process_data",
                    "3": "calculate_improved_result"
                },
                "iVar3": {
                    "1": "flag_result",
                    "14": "check_result",
                    "3": "result"
                },
                "local_1c": {
                    "1": "float_result3",
                    "2": "value3"
                },
                "local_20": {
                    "1": "temp_value3",
                    "2": "local_var16",
                    "3": "float_result2"
                },
                "local_24": {
                    "1": "loop_var3",
                    "2": "result",
                    "3": "float_result"
                },
                "local_26": {
                    "1": "temp_count",
                    "2": "counter",
                    "8": "loop_index"
                },
                "local_27": {
                    "1": "loop_var1",
                    "11": "counter",
                    "2": "char_var"
                },
                "local_2c": {
                    "1": "op3",
                    "2": "local_var12"
                },
                "local_30": {
                    "1": "local_param1",
                    "2": "local_var11"
                },
                "local_34": {
                    "1": "local_value_2",
                    "2": "local_var10"
                },
                "local_38": {
                    "1": "var38",
                    "2": "temp_9"
                },
                "local_3c": {
                    "1": "temp_value7",
                    "2": "temp_var7"
                },
                "local_40": {
                    "1": "local_var6",
                    "2": "float_result"
                },
                "local_42": {
                    "1": "limit",
                    "10": "shift_value",
                    "2": "local_var7",
                    "7": "shifted_value"
                },
                "local_48": {
                    "1": "variable1",
                    "2": "temp_var_6",
                    "3": "temp6",
                    "4": "temp_var6",
                    "5": "local_var6"
                },
                "local_4c": {
                    "1": "temp_value_5",
                    "2": "temp_var_5",
                    "3": "temp_5",
                    "4": "temp_var5",
                    "6": "local_var5"
                },
                "local_50": {
                    "1": "temp_variable4",
                    "2": "temp_var_4",
                    "3": "temp4",
                    "4": "temp_var4",
                    "6": "local_var4"
                },
                "local_54": {
                    "1": "temp_value3",
                    "2": "temp_var_3",
                    "3": "temp3",
                    "4": "temp_var3",
                    "6": "local_var3"
                },
                "local_58": {
                    "1": "local_value_2",
                    "2": "temp_var_2",
                    "3": "temp2",
                    "4": "temp_var2",
                    "5": "local_var2"
                },
                "local_5c": {
                    "1": "local_output_1",
                    "2": "temp_var_1",
                    "3": "temp1",
                    "4": "temp_var1",
                    "5": "local_var1"
                },
                "local_6c": {
                    "1": "byte_array",
                    "2": "float_array",
                    "6": "temp_array",
                    "7": "result_array"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "array1",
                    "3": "data1",
                    "4": "input_1",
                    "5": "input1"
                },
                "param_10": {
                    "1": "char_param2",
                    "2": "param10",
                    "4": "flag2",
                    "5": "flag",
                    "6": "flag_2"
                },
                "param_2": {
                    "1": "input_ptr_2",
                    "2": "data2",
                    "3": "input_2",
                    "6": "input_array"
                },
                "param_3": {
                    "1": "data_array_3",
                    "2": "array3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "param_a",
                    "10": "index_1",
                    "15": "index1",
                    "2": "byte_param1"
                },
                "param_5": {
                    "1": "byte_index2",
                    "10": "index_2",
                    "15": "index2",
                    "2": "byte_param2"
                },
                "param_6": {
                    "1": "param_c",
                    "10": "index_3",
                    "15": "index3",
                    "2": "byte_param3"
                },
                "param_7": {
                    "1": "undefined4_param1",
                    "2": "param1",
                    "3": "param7",
                    "4": "value_1",
                    "8": "value1"
                },
                "param_8": {
                    "1": "char_param1",
                    "2": "param8",
                    "4": "flag1",
                    "6": "flag_1"
                },
                "param_9": {
                    "1": "floating_param2",
                    "2": "value3",
                    "3": "value_2",
                    "6": "value2"
                },
                "uVar1": {
                    "1": "temp_result_11",
                    "16": "result1",
                    "8": "result_1"
                },
                "uVar2": {
                    "1": "var2",
                    "16": "result2",
                    "8": "result_2"
                },
                "uVar4": {
                    "1": "result4",
                    "2": "temp",
                    "3": "floating_result",
                    "4": "temp_result"
                },
                "uVar5": {
                    "1": "var_5",
                    "2": "temp_result1",
                    "3": "temp2"
                },
                "uVar6": {
                    "1": "var_6",
                    "2": "reverse_result2",
                    "3": "temp3"
                }
            },
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid process_data_08001f00(int input1,undefined4 *input_array,int input_3,byte index1,byte index2,byte index3\n                 ,undefined4 value1,char flag_1,undefined4 value2,char flag_2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int check_result;\n  uint temp_result;\n  undefined8 temp2;\n  undefined8 temp3;\n  uint result_array [4];\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  ushort shift_value;\n  undefined4 float_result;\n  undefined4 temp_8;\n  undefined4 temp_var1;\n  uint local_var10;\n  undefined4 local_var11;\n  undefined4 local_var12;\n  char counter;\n  ushort loop_index;\n  undefined4 float_result;\n  uint float_result2;\n  uint value3;\n  \n  local_var12 = calculate_floating_point_08008cdc(*(undefined4 *)((uint)index1 * 4 + input1),\n                          *(undefined4 *)((uint)index1 * 4 + input_3));\n  local_var11 = calculate_floating_point_08008cdc(*(undefined4 *)((uint)index2 * 4 + input1),\n                          *(undefined4 *)((uint)index2 * 4 + input_3));\n  local_var10 = calculate_floating_point_08008cd8(input_array[index3],*(undefined4 *)((uint)index3 * 4 + input1));\n  value3 = *(uint *)((uint)index1 * 4 + input_3) ^ 0x80000000;\n  float_result2 = *(uint *)((uint)index2 * 4 + input_3) ^ 0x80000000;\n  temp_var1 = calculate_floating_point_08008cd8(input_array[index1],local_var12);\n  temp_8 = calculate_floating_point_08008cd8(input_array[index2],local_var11);\n  result1 = calculate_float_08008eec(value3,temp_8);\n  result2 = calculate_float_08008eec(float_result2,temp_var1);\n  result1 = calculate_floating_point_08008cd8(result1,result2);\n  temp2 = reverse_bits_08008590(result1);\n  result1 = calculate_float_08008eec(value3,temp_var1);\n  result2 = calculate_float_08008eec(float_result2,temp_8);\n  result1 = calculate_floating_point_08008cdc(result1,result2);\n  temp3 = reverse_bits_08008590(result1);\n  temp2 = calculate_result_thunk_08009990((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                             (int)((ulonglong)temp3 >> 0x20));\n  float_result = calculate_float_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  if (flag_2 == '\\0') {\n    check_result = check_concatenation_result_0800923c(float_result,0);\n    if (check_result != 0) {\n      temp2 = reverse_bits_08008590(float_result);\n      temp2 = calculate_sum_080082d4((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x54442d18,0x401921fb);\n      float_result = calculate_float_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    }\n  }\n  else {\n    check_result = check_concatenation_result_08009250(float_result,0);\n    if (check_result != 0) {\n      temp2 = reverse_bits_08008590(float_result);\n      temp2 = reverse_bits_080082d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x54442d18,0x401921fb);\n      float_result = calculate_float_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    }\n  }\n  result1 = calculate_float_08008eec(float_result,value2);\n  temp2 = reverse_bits_08008590(result1);\n  temp3 = reverse_bits_08008590(local_var10 & 0x7fffffff);\n  temp2 = calculate_and_initialize_0800981c((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                       (int)((ulonglong)temp3 >> 0x20));\n  float_result = calculate_float_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  check_result = check_concatenation_result_08009214(float_result,0);\n  if (check_result == 0) {\n    result1 = calculate_floating_point_08009054(float_result,DAT_20000ed8);\n    temp2 = reverse_bits_08008590(result1);\n    temp2 = calculate_result_080094c0((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    shift_value = calculate_shifted_value_08008bf0((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if (flag_1 != '\\0') {\n      result1 = reverse_bits_08008e44(shift_value);\n      value1 = calculate_float_08008eec(value1,result1);\n    }\n    result1 = reverse_bits_08008e44(shift_value);\n    local_var6 = calculate_floating_point_08009054(float_result,result1);\n    result1 = reverse_bits_08008e44(shift_value);\n    local_var5 = calculate_floating_point_08009054(local_var10,result1);\n    temp2 = reverse_bits_08008590(local_var6);\n    temp2 = calculate_result_08008640((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3fe00000);\n    temp3 = reverse_bits_08008590(local_var6);\n    temp2 = calculate_result_08008640((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                         (int)((ulonglong)temp3 >> 0x20));\n    temp2 = reverse_bits_080082d0(0,0x3ff00000,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    local_var4 = calculate_float_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    local_var3 = local_var6;\n    counter = '\\0';\n    result_array[index3] = *(uint *)(input1 + (uint)index3 * 4);\n    for (loop_index = 1; loop_index < shift_value; loop_index = loop_index + 1) {\n      if ((int)counter < (int)(uint)DAT_20000efa) {\n        result1 = calculate_float_08008eec(value3,local_var3);\n        result2 = calculate_float_08008eec(float_result2,local_var4);\n        result_array[3] = calculate_floating_point_08008cdc(result1,result2);\n        result1 = calculate_float_08008eec(value3,local_var4);\n        result2 = calculate_float_08008eec(float_result2,local_var3);\n        value3 = calculate_floating_point_08008cd8(result1,result2);\n        float_result2 = result_array[3];\n        counter = counter + '\\x01';\n      }\n      else {\n        result1 = reverse_bits_08008e44(loop_index);\n        result1 = calculate_float_08008eec(result1,local_var6);\n        temp2 = reverse_bits_08008590(result1);\n        temp2 = calculate_result_08009410((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        local_var2 = calculate_float_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        result1 = reverse_bits_08008e44(loop_index);\n        result1 = calculate_float_08008eec(result1,local_var6);\n        temp2 = reverse_bits_08008590(result1);\n        temp2 = calculate_result_080096e8((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        local_var1 = calculate_float_08008c30((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        result1 = calculate_float_08008eec(*(uint *)((uint)index1 * 4 + input_3) ^ 0x80000000,local_var2);\n        result2 = calculate_float_08008eec(*(undefined4 *)((uint)index2 * 4 + input_3),local_var1);\n        value3 = calculate_floating_point_08008cdc(result1,result2);\n        result1 = calculate_float_08008eec(*(uint *)((uint)index1 * 4 + input_3) ^ 0x80000000,local_var1);\n        result2 = calculate_float_08008eec(*(undefined4 *)((uint)index2 * 4 + input_3),local_var2);\n        float_result2 = calculate_floating_point_08008cd8(result1,result2);\n        counter = '\\0';\n      }\n      temp_result = calculate_floating_point_08008cdc(local_var12,value3);\n      result_array[index1] = temp_result;\n      temp_result = calculate_floating_point_08008cdc(local_var11,float_result2);\n      result_array[index2] = temp_result;\n      temp_result = calculate_floating_point_08008cdc(result_array[index3],local_var5);\n      result_array[index3] = temp_result;\n      process_data_08001f00_08001e98(result_array[0],result_array[1],result_array[2],value1,flag_1);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    process_data_08001f00_08001e98(*input_array,input_array[1],input_array[2],value1,flag_1);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08001f00",
            "entrypoint": "0x08001f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f00": "process_data_08001f00",
                "iVar3": "check_result",
                "local_1c": "value3",
                "local_20": "float_result2",
                "local_24": "float_result",
                "local_26": "loop_index",
                "local_27": "counter",
                "local_2c": "local_var12",
                "local_30": "local_var11",
                "local_34": "local_var10",
                "local_38": "temp_var1",
                "local_3c": "temp_8",
                "local_40": "float_result",
                "local_42": "shift_value",
                "local_48": "local_var6",
                "local_4c": "local_var5",
                "local_50": "local_var4",
                "local_54": "local_var3",
                "local_58": "local_var2",
                "local_5c": "local_var1",
                "local_6c": "result_array",
                "param_1": "input1",
                "param_10": "flag_2",
                "param_2": "input_array",
                "param_3": "input_3",
                "param_4": "index1",
                "param_5": "index2",
                "param_6": "index3",
                "param_7": "value1",
                "param_8": "flag_1",
                "param_9": "value2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar4": "temp_result",
                "uVar5": "temp2",
                "uVar6": "temp3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002408": {
            "additional_data": {
                "DAT_20000ea8": {
                    "1": "data_alarm"
                },
                "FUNC_08002814": {
                    "1": "execute_func",
                    "2": "perform_action"
                },
                "FUN_08002408": {
                    "1": "process_data_and_alarm",
                    "2": "process_and_find_target_values",
                    "22": "process_data"
                },
                "calculate_float_08008eec": {
                    "1": "calculate_float_value",
                    "4": "calculate_float"
                },
                "calculate_floating_point_08008cd8": {
                    "6": "calculate_floating_point"
                },
                "calculate_result_080094c0": {
                    "6": "calculate_result"
                },
                "calculate_shifted_value_08008bf0": {
                    "6": "calculate_shifted_value"
                },
                "find_and_return_target_value_080002a0": {
                    "2": "find_and_return_target",
                    "3": "find_and_return_target_value"
                },
                "local_12": {
                    "1": "shifted_value_calculated",
                    "10": "shifted_value",
                    "2": "loop_count",
                    "6": "loop_counter",
                    "8": "iteration_count"
                },
                "param_1": {
                    "15": "input_value",
                    "3": "input_data",
                    "6": "input_param",
                    "7": "input"
                },
                "process_alarm_08003a74": {
                    "6": "process_alarm"
                },
                "process_data_08002fd4": {
                    "1": "process_data_function",
                    "3": "process_data"
                },
                "reverse_bits_08008590": {
                    "6": "reverse_bits"
                },
                "reverse_bits_08008e44": {
                    "1": "reverse_bits_2",
                    "2": "reverse_bits2"
                },
                "uVar1": {
                    "1": "result_1",
                    "15": "shifted_value",
                    "2": "result",
                    "3": "result1"
                },
                "uVar2": {
                    "1": "floating_point_value1",
                    "10": "float_value_1",
                    "2": "float_result_1",
                    "4": "float_value1",
                    "6": "float_value"
                },
                "uVar3": {
                    "1": "reverse_bits_param",
                    "10": "reversed_bits",
                    "2": "float_value_2",
                    "4": "reverse_bits_value"
                },
                "uVar4": {
                    "1": "float_result",
                    "2": "result2",
                    "5": "float_value_2",
                    "7": "result_value",
                    "8": "result"
                }
            },
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid process_data_08002408(undefined4 input_value)\n\n{\n  undefined2 shifted_value;\n  undefined4 float_value_1;\n  undefined4 reversed_bits;\n  undefined8 result;\n  ushort shifted_value;\n  \n  float_value_1 = calculate_float(input_value,0x41a00000);\n  result = reverse_bits(float_value_1);\n  result = calculate_result((int)result,(int)((ulonglong)result >> 0x20));\n  shifted_value = calculate_shifted_value((int)result,(int)((ulonglong)result >> 0x20));\n  process_data_08002408();\n  float_value_1 = calculate_float(input_value,0x447a0000);\n  reversed_bits = reverse_bits2((uint)shifted_value * 0x32);\n  float_value_1 = calculate_floating_point(float_value_1,reversed_bits);\n  result = reverse_bits(float_value_1);\n  result = calculate_result((int)result,(int)((ulonglong)result >> 0x20));\n  shifted_value = calculate_shifted_value((int)result,(int)((ulonglong)result >> 0x20));\n  FUNC_08002814(shifted_value);\n  while ((shifted_value != 0 && (process_alarm(), DAT_20000ea8 == '\\0'))) {\n    find_and_return_target_value(0x32);\n    shifted_value = shifted_value - 1;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08002408",
            "entrypoint": "0x08002408",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002408": "process_data_08002408",
                "calculate_float_08008eec": "calculate_float",
                "calculate_floating_point_08008cd8": "calculate_floating_point",
                "calculate_result_080094c0": "calculate_result",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "find_and_return_target_value_080002a0": "find_and_return_target_value",
                "local_12": "shifted_value",
                "param_1": "input_value",
                "process_alarm_08003a74": "process_alarm",
                "process_data_08002fd4": "process_data",
                "reverse_bits_08008590": "reverse_bits",
                "reverse_bits_08008e44": "reverse_bits2",
                "uVar1": "shifted_value",
                "uVar2": "float_value_1",
                "uVar3": "reversed_bits",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080024c4": {
            "additional_data": {
                "DAT_20000e4c": {
                    "1": "constant2",
                    "2": "result"
                },
                "DAT_20000ea8": {
                    "1": "check_flag"
                },
                "DAT_20000ea9": {
                    "1": "constant_one"
                },
                "DAT_20000eac": {
                    "1": "memory"
                },
                "DAT_20000ee4": {
                    "1": "flag6"
                },
                "DAT_20000ee6": {
                    "1": "flag5",
                    "3": "flags"
                },
                "DAT_20000eec": {
                    "2": "data"
                },
                "DAT_20000ef4": {
                    "1": "floating_constant",
                    "2": "constant"
                },
                "FUN_080024c4": {
                    "1": "initialize_data_and_process",
                    "19": "initialize_and_process_data",
                    "2": "initialize_data",
                    "5": "initialize_data_processing"
                },
                "calculate_float_08008eec": {
                    "13": "calculate_float",
                    "4": "calc_float"
                },
                "fill_memory_0800b430": {
                    "17": "fill_memory"
                },
                "flag1": {
                    "1": "flag1"
                },
                "flag2": {
                    "1": "flag2"
                },
                "flag3": {
                    "1": "flag3"
                },
                "initializeAndProcessData": {
                    "2": "initialize_and_process_data"
                },
                "initialize_and_calculate_floating_points_0800283a": {
                    "1": "init_and_calc_floating_points",
                    "11": "initialize_and_calculate_floating_points",
                    "2": "initialize_and_calculate_floats"
                },
                "initialize_and_process_data_08001d4c": {
                    "1": "initialize_and_process_data_a",
                    "2": "initialize_and_process_data_helper",
                    "9": "initialize_and_process_data"
                },
                "initialize_if_needed_0800585c": {
                    "15": "initialize_if_needed",
                    "2": "init_if_needed"
                },
                "local_11": {
                    "1": "is_condition1_set",
                    "12": "flag3",
                    "4": "flag1"
                },
                "local_12": {
                    "1": "status_flag2",
                    "16": "flag2",
                    "2": "is_local12_set"
                },
                "local_13": {
                    "1": "flag_check3",
                    "12": "flag1",
                    "4": "flag3"
                },
                "process_alarm_08003a74": {
                    "17": "process_alarm"
                },
                "process_data_08001e98": {
                    "17": "process_data"
                },
                "process_data_08002fd4": {
                    "1": "process_data_b",
                    "2": "process_data_helper",
                    "5": "process_data2",
                    "6": "process_data"
                },
                "reverse_bits_08008e44": {
                    "17": "reverse_bits"
                },
                "uVar1": {
                    "1": "reversed_status_flag1",
                    "2": "reversed_bit1",
                    "5": "reversed_flag1"
                },
                "uVar2": {
                    "1": "reversed2",
                    "2": "reversed_bit2",
                    "5": "reversed_flag2"
                },
                "uVar3": {
                    "1": "result_c",
                    "2": "reversed_bit3",
                    "5": "reversed_flag3"
                }
            },
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid initialize_and_process_data_080024c4(void)\n\n{\n  undefined4 reversed_flag1;\n  undefined4 reversed_flag2;\n  undefined4 reversed_flag3;\n  char flag1;\n  char flag2;\n  char flag3;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initialize_and_process_data_080024c4();\n  process_alarm();\n  if (DAT_20000ea8 == '\\0') {\n    fill_memory(&DAT_20000eac,0,0xc);\n    initialize_and_calculate_floating_points();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      flag3 = -1;\n    }\n    else {\n      flag3 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      flag2 = -1;\n    }\n    else {\n      flag2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      flag1 = -1;\n    }\n    else {\n      flag1 = '\\x01';\n    }\n    reversed_flag1 = reverse_bits((int)flag3);\n    reversed_flag1 = calculate_float(reversed_flag1,DAT_20000ef4);\n    reversed_flag2 = reverse_bits((int)flag2);\n    reversed_flag2 = calculate_float(reversed_flag2,DAT_20000ef4);\n    reversed_flag3 = reverse_bits((int)flag1);\n    reversed_flag3 = calculate_float(reversed_flag3,DAT_20000ef4);\n    process_data(reversed_flag1,reversed_flag2,reversed_flag3,DAT_20000eec,0);\n    initialize_if_needed();\n    process_data();\n    initialize_and_calculate_floating_points();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_process_data_080024c4",
            "entrypoint": "0x080024c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080024c4": "initialize_and_process_data_080024c4",
                "calculate_float_08008eec": "calculate_float",
                "fill_memory_0800b430": "fill_memory",
                "initialize_and_calculate_floating_points_0800283a": "initialize_and_calculate_floating_points",
                "initialize_and_process_data_08001d4c": "initialize_and_process_data",
                "initialize_if_needed_0800585c": "initialize_if_needed",
                "local_11": "flag3",
                "local_12": "flag2",
                "local_13": "flag1",
                "process_alarm_08003a74": "process_alarm",
                "process_data_08001e98": "process_data",
                "process_data_08002fd4": "process_data",
                "reverse_bits_08008e44": "reverse_bits",
                "uVar1": "reversed_flag1",
                "uVar2": "reversed_flag2",
                "uVar3": "reversed_flag3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025e8": {
            "additional_data": {
                "DAT_20000ea9": {
                    "1": "user_input"
                },
                "DAT_20000eaa": {
                    "2": "flags"
                },
                "FUN_080025e8": {
                    "1": "execute_if_not_initialized",
                    "2": "initialize",
                    "24": "initialize_system"
                },
                "execute_initialization_08005250": {
                    "1": "execute_initial_setup",
                    "28": "execute_initialization"
                },
                "initialize_08000210": {
                    "1": "initialize_additional_components",
                    "2": "initialize_resources",
                    "3": "initialize_components",
                    "8": "initialize",
                    "9": "initialize_data"
                },
                "initialize_flags_080057e4": {
                    "1": "initialize_system_flags",
                    "27": "initialize_flags"
                }
            },
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "code": "\nvoid initialize_system_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    execute_initialization();\n    initialize_data();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      initialize_flags();\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_system_080025e8",
            "entrypoint": "0x080025e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025e8": "initialize_system_080025e8",
                "execute_initialization_08005250": "execute_initialization",
                "initialize_08000210": "initialize_data",
                "initialize_flags_080057e4": "initialize_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002638": {
            "additional_data": {
                "FUN_08002638": {
                    "1": "parse_and_calculate_number",
                    "2": "parse_integer_string",
                    "20": "parse_integer",
                    "3": "parse_integer_from_string"
                },
                "bVar1": {
                    "1": "parsed_digit",
                    "16": "digit",
                    "2": "numeric_value"
                },
                "bVar2": {
                    "1": "is_negative_flag",
                    "21": "is_negative",
                    "6": "negative"
                },
                "bVar3": {
                    "1": "concatenation_flag",
                    "2": "is_float",
                    "4": "is_overflow"
                },
                "iVar4": {
                    "1": "concatenation_check_result",
                    "10": "concatenation_result",
                    "8": "concat_result"
                },
                "local_14": {
                    "1": "integer_part",
                    "2": "result",
                    "3": "parsed_number",
                    "4": "integer_value",
                    "6": "parsed_value"
                },
                "local_15": {
                    "1": "exponents",
                    "10": "exponent",
                    "2": "decimal_point"
                },
                "local_16": {
                    "1": "digits",
                    "23": "digit_count",
                    "3": "num_digits"
                },
                "local_1c": {
                    "1": "reverse_bits",
                    "2": "digit_count",
                    "5": "reversed_integer",
                    "6": "reversed_value"
                },
                "local_c": {
                    "1": "current_position",
                    "2": "remaining_chars",
                    "3": "current_pos",
                    "5": "current_ptr"
                },
                "local_d": {
                    "1": "current",
                    "10": "current_digit",
                    "13": "current_char",
                    "2": "current_byte"
                },
                "param_1": {
                    "1": "start_address",
                    "13": "base_address",
                    "2": "base_addr",
                    "3": "param_base",
                    "5": "base"
                },
                "param_2": {
                    "1": "input_data",
                    "10": "input_string",
                    "2": "string_ptr",
                    "3": "byte_array"
                },
                "param_3": {
                    "1": "result_pointer",
                    "12": "result",
                    "2": "param_result",
                    "3": "output",
                    "5": "output_value"
                },
                "pcVar5": {
                    "1": "next_char",
                    "14": "current_char",
                    "2": "curr_char",
                    "6": "current_char_ptr"
                },
                "pcVar6": {
                    "1": "current_char",
                    "16": "next_char",
                    "6": "next_char_ptr"
                },
                "uVar7": {
                    "1": "return_status",
                    "2": "result",
                    "3": "return_val",
                    "4": "success",
                    "9": "return_value"
                },
                "uVar8": {
                    "1": "temp_val",
                    "4": "calculation_result",
                    "7": "temp_result"
                }
            },
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "code": "\nundefined4 parse_integer_08002638(int base_address,byte *input_string,uint *result)\n\n{\n  byte digit;\n  bool is_negative;\n  bool is_overflow;\n  int concatenation_result;\n  char *current_char;\n  char *next_char;\n  undefined4 return_value;\n  undefined8 temp_result;\n  uint reversed_value;\n  byte digit_count;\n  char exponent;\n  int parsed_value;\n  char current_char;\n  char *current_ptr;\n  \n  next_char = (char *)(base_address + (uint)*input_string);\n  current_char = next_char + 1;\n  current_char = *next_char;\n  is_negative = false;\n  if (current_char == '-') {\n    is_negative = true;\n    current_char = *current_char;\n    current_ptr = next_char + 2;\n  }\n  else {\n    current_ptr = current_char;\n    if (current_char == '+') {\n      current_ptr = next_char + 2;\n      current_char = *current_char;\n    }\n  }\n  parsed_value = 0;\n  exponent = '\\0';\n  digit_count = 0;\n  is_overflow = false;\n  do {\n    digit = current_char - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (is_overflow) {\n          exponent = exponent + -1;\n        }\n        parsed_value = (uint)digit + parsed_value * 10;\n      }\n      else if (!is_overflow) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (is_overflow)) {\n        if (digit_count == 0) {\n          return_value = 0;\n        }\n        else {\n          reversed_value = reverse_bits_08008e3c(parsed_value);\n          concatenation_result = check_concatenation_result_08009214(reversed_value,0);\n          if (concatenation_result == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              temp_result = reverse_bits_08008590(reversed_value);\n              temp_result = calculate_result_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              reversed_value = calculate_float_08008c30((int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n            }\n            if (exponent < '\\0') {\n              temp_result = reverse_bits_08008590(reversed_value);\n              temp_result = calculate_result_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              reversed_value = calculate_float_08008c30((int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                reversed_value = calculate_float_08008eec(reversed_value,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *result = reversed_value ^ 0x80000000;\n          }\n          else {\n            *result = reversed_value;\n          }\n          *input_string = ((char)current_ptr - (char)base_address) - 1;\n          return_value = 1;\n        }\n        return return_value;\n      }\n      is_overflow = true;\n    }\n    current_char = *current_ptr;\n    current_ptr = current_ptr + 1;\n  } while( true );\n}\n\n",
            "current_name": "parse_integer_08002638",
            "entrypoint": "0x08002638",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "is_overflow",
                "iVar4": "concatenation_result",
                "local_14": "parsed_value",
                "local_15": "exponent",
                "local_16": "digit_count",
                "local_1c": "reversed_value",
                "local_c": "current_ptr",
                "local_d": "current_char",
                "param_1": "base_address",
                "param_2": "input_string",
                "param_3": "result",
                "pcVar5": "current_char",
                "pcVar6": "next_char",
                "uVar7": "return_value",
                "uVar8": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002814": {
            "called": [],
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002814",
            "entrypoint": "0x08002814",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002828": {
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002828",
            "entrypoint": "0x08002828",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800283a": {
            "additional_data": {
                "DAT_20000eac": {
                    "1": "parameters_1"
                },
                "DAT_20000eb0": {
                    "1": "parameters_2"
                },
                "DAT_20000eb4": {
                    "1": "parameter3"
                },
                "Dato20000eac": {
                    "1": "parameter1"
                },
                "Dato20000eb0": {
                    "1": "parameter2"
                },
                "Dato20000eb4": {
                    "1": "parameter3"
                },
                "FUN_0800283a": {
                    "1": "initialize_and_calculate_floats",
                    "2": "initialize_and_store_floating_points",
                    "27": "initialize_and_calculate_floating_points"
                },
                "calculate_and_store_floating_points_080004fc": {
                    "1": "calculate_and_store_floats",
                    "21": "calculate_and_store_floating_points"
                },
                "initialize_parameters_080035ec": {
                    "22": "initialize_parameters"
                }
            },
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "code": "\nvoid initialize_and_calculate_floating_points_0800283a(void)\n\n{\n  initialize_parameters(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  calculate_and_store_floating_points(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "current_name": "initialize_and_calculate_floating_points_0800283a",
            "entrypoint": "0x0800283a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800283a": "initialize_and_calculate_floating_points_0800283a",
                "calculate_and_store_floating_points_080004fc": "calculate_and_store_floating_points",
                "initialize_parameters_080035ec": "initialize_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002870": {
            "additional_data": {
                "FUN_08002870": {
                    "1": "increment_and_wrap",
                    "13": "increment_and_check",
                    "2": "increment_and_reset",
                    "4": "increment_and_check_limit",
                    "6": "increment_and_limit"
                },
                "local_9": {
                    "1": "incremented_value",
                    "28": "result"
                },
                "param_1": {
                    "18": "input",
                    "2": "input_char",
                    "5": "input_value",
                    "6": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "code": "\nchar increment_and_check_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "current_name": "increment_and_check_08002870",
            "entrypoint": "0x08002870",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002870": "increment_and_check_08002870",
                "local_9": "result",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002896": {
            "additional_data": {
                "FUN_08002896": {
                    "1": "change_char",
                    "2": "decrement_and_default_value",
                    "3": "decrement_and_set_default",
                    "4": "decrement_and_default"
                },
                "local_9": {
                    "1": "output",
                    "13": "result",
                    "2": "updated_char",
                    "5": "result_char"
                },
                "param_1": {
                    "1": "input_char_code",
                    "15": "input_char",
                    "2": "value",
                    "8": "input"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002a94"
            ],
            "code": "\nchar decrement_and_default_08002896(char input_char)\n\n{\n  char result;\n  \n  result = input_char;\n  if (input_char == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "current_name": "decrement_and_default_08002896",
            "entrypoint": "0x08002896",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002896": "decrement_and_default_08002896",
                "local_9": "result",
                "param_1": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080028bc": {
            "additional_data": {
                "FUN_080028bc": {
                    "1": "calculate_reversed_result",
                    "2": "perform_calculation",
                    "24": "calculate_result"
                },
                "calculate_float_08008eec": {
                    "1": "calculate_square"
                },
                "calculate_floating_point_08008cd8": {
                    "1": "calculate_average"
                },
                "calculate_floating_point_08008cdc": {
                    "1": "calculate_square_root"
                },
                "calculate_floating_point_08009054": {
                    "1": "calculate_product"
                },
                "param_1": {
                    "1": "first_param",
                    "15": "input_1",
                    "2": "input_param_1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "second_float",
                    "15": "input_2",
                    "2": "value_2",
                    "6": "input2"
                },
                "param_3": {
                    "1": "third_param",
                    "15": "input_3",
                    "2": "value_3",
                    "6": "input3"
                },
                "uVar1": {
                    "1": "calculated_result_1",
                    "23": "result_1",
                    "7": "result1"
                },
                "uVar2": {
                    "1": "calculated_result_2",
                    "23": "result_2",
                    "7": "result2"
                }
            },
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "calling": [
                "FUN_08002c18"
            ],
            "code": "\nundefined4 calculate_result_080028bc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_square(input_2,input_2);\n  result_2 = calculate_square(input_1,input_1);\n  result_1 = calculate_average(result_1,result_2);\n  result_2 = calculate_square_root(input_3,input_3);\n  result_1 = calculate_product(result_1,result_2);\n  return result_1;\n}\n\n",
            "current_name": "calculate_result_080028bc",
            "entrypoint": "0x080028bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "calculate_float_08008eec": "calculate_square",
                "calculate_floating_point_08008cd8": "calculate_average",
                "calculate_floating_point_08008cdc": "calculate_square_root",
                "calculate_floating_point_08009054": "calculate_product",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002908": {
            "additional_data": {
                "FUN_08002908": {
                    "1": "calculate_final_result",
                    "29": "calculate_result"
                },
                "param_1": {
                    "1": "input_param_1",
                    "15": "input_1",
                    "2": "input_a",
                    "9": "input1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "15": "input_2",
                    "2": "value_2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "input_param_3",
                    "15": "input_3",
                    "2": "value_3",
                    "9": "input3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "15": "input_4",
                    "2": "input_d",
                    "9": "input4"
                },
                "uVar1": {
                    "20": "result_1",
                    "3": "result",
                    "8": "result1"
                },
                "uVar2": {
                    "1": "temp_value",
                    "2": "temp",
                    "20": "result_2",
                    "8": "result2"
                }
            },
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "calling": [
                "FUN_08002c18"
            ],
            "code": "\nundefined4 calculate_result_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_floating_point_08008cdc(input_3,input_3);\n  result_1 = calculate_float_08008eec(result_1,input_4);\n  result_2 = calculate_float_08008eec(input_1,input_1);\n  result_1 = calculate_floating_point_08008cd8(result_1,result_2);\n  result_2 = calculate_float_08008eec(input_2,input_2);\n  result_1 = calculate_floating_point_08008cdc(result_1,result_2);\n  result_2 = calculate_float_08008eec(input_3,0x40800000);\n  result_1 = calculate_floating_point_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "current_name": "calculate_result_08002908",
            "entrypoint": "0x08002908",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002978": {
            "additional_data": {
                "FUN_08002978": {
                    "1": "calculate_updated_value",
                    "2": "calculate_processed_float",
                    "3": "calculate_and_process",
                    "4": "calculate_and_process_data",
                    "5": "process_data",
                    "8": "calculate_result"
                },
                "calculate_float_08008c30": {
                    "1": "calculate_float_once_more"
                },
                "calculate_float_08008cd8": {
                    "1": "calculate_float3"
                },
                "calculate_float_08008eec": {
                    "1": "calculate_float_product",
                    "3": "calculate_float"
                },
                "calculate_float_08008eec_2": {
                    "1": "calculate_float_with_input"
                },
                "calculate_floating_point_08008cd8": {
                    "1": "calculate_result"
                },
                "calculate_floating_point_08008cdc": {
                    "1": "calculate_float_squared",
                    "4": "calculate_floating_point"
                },
                "param_1": {
                    "1": "data_1",
                    "11": "input_1",
                    "2": "input_param",
                    "5": "input_param_1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "temp_param",
                    "11": "input_2",
                    "5": "input_param_2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "float_param",
                    "11": "input_3",
                    "2": "additional_value",
                    "5": "input_param_3",
                    "8": "input3"
                },
                "process_data_080098d0": {
                    "1": "process_reversed_data",
                    "8": "process_data"
                },
                "reverse_bits_08008590": {
                    "1": "reverse_bit_sequence",
                    "8": "reverse_bits"
                },
                "uVar1": {
                    "1": "factor_squared",
                    "18": "result_1",
                    "2": "float_result_1",
                    "8": "result1"
                },
                "uVar2": {
                    "1": "floating_point_result",
                    "18": "result_2",
                    "2": "float_result_2",
                    "8": "result2"
                },
                "uVar3": {
                    "1": "reverse_bits_result",
                    "19": "reversed_result",
                    "2": "processed_data",
                    "3": "reversed_bits"
                }
            },
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "code": "\nundefined4 calculate_result_08002978(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined8 reversed_result;\n  \n  result_1 = calculate_float(input_2,input_2);\n  result_2 = calculate_floating_point(input_1,input_1);\n  result_2 = calculate_float(result_2,input_3);\n  result_1 = calculate_float_with_results(result_1,result_2);\n  reversed_result = reverse_bits(result_1);\n  reversed_result = process_data((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n  result_1 = calculate_float_with_reversed_results((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n  return result_1;\n}\n\n",
            "current_name": "calculate_result_08002978",
            "entrypoint": "0x08002978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002978": "calculate_result_08002978",
                "calculate_float_08008c30": "calculate_float_with_reversed_results",
                "calculate_float_08008eec": "calculate_float",
                "calculate_floating_point_08008cd8": "calculate_float_with_results",
                "calculate_floating_point_08008cdc": "calculate_floating_point",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "process_data_080098d0": "process_data",
                "reverse_bits_08008590": "reverse_bits",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "reversed_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080029d8": {
            "additional_data": {
                "DAT_20000edc": {
                    "1": "constant_value"
                },
                "FUN_080029d8": {
                    "1": "improve_code",
                    "2": "process_parameters",
                    "3": "update_parameters",
                    "4": "concatenation_check",
                    "7": "update_concatenation_result"
                },
                "calculate_result_08002978": {
                    "1": "perform_calculation",
                    "5": "calculate_result"
                },
                "check_concatenation_result_08009214": {
                    "1": "check_concat_result",
                    "3": "check_concatenation_result"
                },
                "check_if_concatenated_parameters_are_empty_08009264": {
                    "1": "check_if_parameters_are_empty"
                },
                "iVar1": {
                    "1": "result_check1",
                    "10": "concatenation_result",
                    "13": "result",
                    "2": "concat_result"
                },
                "is_string_empty_08009228": {
                    "1": "check_empty_string",
                    "5": "is_string_empty"
                },
                "param_1": {
                    "1": "result_pointer",
                    "12": "param1",
                    "2": "some_parameter",
                    "3": "status"
                },
                "param_2": {
                    "1": "source_parameter",
                    "2": "string1",
                    "3": "source_param",
                    "4": "input1"
                },
                "param_3": {
                    "1": "string_struct2",
                    "2": "target_param",
                    "3": "parameter_struct",
                    "4": "input2"
                },
                "uVar2": {
                    "1": "concatenated_string_result",
                    "10": "calculated_result",
                    "2": "result",
                    "3": "result1",
                    "5": "new_result"
                },
                "uVar3": {
                    "1": "source_param_copy",
                    "2": "original_result",
                    "3": "concatenated_param",
                    "4": "temp_result"
                }
            },
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "calling": [
                "FUN_08002a94"
            ],
            "code": "\nvoid update_concatenation_result_080029d8(undefined4 param1,int input1,int input2)\n\n{\n  int result;\n  undefined4 calculated_result;\n  undefined4 temp_result;\n  \n  if (((input1 != 0) && (input2 != 0)) &&\n     (result = check_concatenation_result(*(undefined4 *)(input1 + 0x18),*(undefined4 *)(input1 + 0x1c)),\n     result == 0)) {\n    if ((*(char *)(input1 + 0x25) == '\\0') &&\n       (result = check_empty_params(*(undefined4 *)(input1 + 0x1c),*(undefined4 *)(input2 + 0x18)),\n       result != 0)) {\n      temp_result = *(undefined4 *)(input1 + 0x1c);\n      calculated_result = calculate_result(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input2 + 0x18),\n                           *(undefined4 *)(input1 + 0x20));\n      result = is_string_empty(temp_result,calculated_result);\n      if (result == 0) {\n        calculated_result = calculate_result(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input2 + 0x18),\n                             *(undefined4 *)(input1 + 0x20));\n      }\n      else {\n        calculated_result = *(undefined4 *)(input1 + 0x1c);\n      }\n      *(undefined4 *)(input1 + 0x18) = calculated_result;\n    }\n    else {\n      *(undefined4 *)(input1 + 0x18) = *(undefined4 *)(input1 + 0x1c);\n    }\n    *(undefined *)(input1 + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "update_concatenation_result_080029d8",
            "entrypoint": "0x080029d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080029d8": "update_concatenation_result_080029d8",
                "calculate_result_08002978": "calculate_result",
                "check_concatenation_result_08009214": "check_concatenation_result",
                "check_if_concatenated_parameters_are_empty_08009264": "check_empty_params",
                "iVar1": "result",
                "is_string_empty_08009228": "is_string_empty",
                "param_1": "param1",
                "param_2": "input1",
                "param_3": "input2",
                "uVar2": "calculated_result",
                "uVar3": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002a94": {
            "additional_data": {
                "DAT_20000cf0": {
                    "1": "initial_byte_value"
                },
                "DAT_20000cf1": {
                    "1": "final_byte"
                },
                "FUN_08002a94": {
                    "1": "decrement_and_update_result",
                    "11": "update_concatenation",
                    "2": "concatenation_update",
                    "3": "update_concatenation_result"
                },
                "decrement_and_default_08002896": {
                    "1": "decrement_and_default"
                },
                "local_14": {
                    "1": "current_concatenation_result",
                    "2": "previous_address",
                    "3": "current_address",
                    "5": "current_pointer"
                },
                "local_18": {
                    "1": "current_chunk",
                    "2": "current_address",
                    "3": "current_pointer",
                    "5": "previous_pointer"
                },
                "local_9": {
                    "1": "current_iteration",
                    "10": "byte_value",
                    "11": "current_byte",
                    "2": "input_byte",
                    "3": "current_value"
                },
                "puVar1": {
                    "1": "previous_block_copy",
                    "2": "temp_pointer",
                    "3": "previous_result"
                },
                "update_concatenation_result_080029d8": {
                    "1": "update_concatenation_result"
                }
            },
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid update_concatenation_08002a94(void)\n\n{\n  undefined *previous_result;\n  undefined *previous_pointer;\n  undefined *current_pointer;\n  byte current_byte;\n  \n  current_byte = DAT_20000cf0;\n  previous_pointer = (undefined *)0x0;\n  current_pointer = (undefined *)0x0;\n  while (previous_result = current_pointer, current_byte != DAT_20000cf1) {\n    current_byte = decrement_and_default(current_byte);\n    current_pointer = previous_pointer;\n    update_concatenation_08002a94_result(&DAT_20000870 + (uint)current_byte * 0x40,previous_pointer,previous_result);\n    previous_pointer = &DAT_20000870 + (uint)current_byte * 0x40;\n  }\n  return;\n}\n\n",
            "current_name": "update_concatenation_08002a94",
            "entrypoint": "0x08002a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002a94": "update_concatenation_08002a94",
                "decrement_and_default_08002896": "decrement_and_default",
                "local_14": "current_pointer",
                "local_18": "previous_pointer",
                "local_9": "current_byte",
                "puVar1": "previous_result",
                "update_concatenation_result_080029d8": "update_concatenation_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002afc": {
            "additional_data": {
                "FUN_08002afc": {
                    "1": "update_result_if_empty_string",
                    "10": "check_and_update_result",
                    "2": "process_parameters",
                    "3": "check_string_concatenation"
                },
                "calculate_result_08002978": {
                    "3": "calculate_result"
                },
                "check_concatenation_result_08009214": {
                    "3": "check_concatenation_result"
                },
                "iVar1": {
                    "1": "is_input1_empty",
                    "21": "is_empty",
                    "3": "is_empty_result"
                },
                "is_string_empty_08009228": {
                    "1": "is_string_empty_check",
                    "2": "is_string_empty"
                },
                "param_1": {
                    "1": "parameter_1",
                    "3": "input1",
                    "4": "string1",
                    "5": "input_param",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "input_2",
                    "3": "input_param_2",
                    "4": "string2",
                    "5": "output_param",
                    "6": "output_data"
                },
                "uVar2": {
                    "1": "calc_result_1",
                    "2": "result1",
                    "3": "calculation_result",
                    "7": "result_1",
                    "9": "result"
                },
                "uVar3": {
                    "1": "calculation_input",
                    "2": "result2",
                    "3": "output_param_value",
                    "7": "result_2"
                }
            },
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "calling": [
                "FUN_08002ba8"
            ],
            "code": "\nvoid check_and_update_result_08002afc(int input_data,int output_data)\n\n{\n  int is_empty;\n  undefined4 result;\n  undefined4 result_2;\n  \n  if (((input_data != 0) && (*(char *)(input_data + 0x25) == '\\0')) &&\n     (is_empty = is_string_empty(*(undefined4 *)(input_data + 0x18),*(undefined4 *)(output_data + 0x18)),\n     is_empty != 0)) {\n    result_2 = *(undefined4 *)(output_data + 0x18);\n    result = calculate_result(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input_data + 0x18),\n                         *(undefined4 *)(input_data + 0x20));\n    is_empty = is_string_empty(result_2,result);\n    if (is_empty == 0) {\n      result = calculate_result(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input_data + 0x18),\n                           *(undefined4 *)(input_data + 0x20));\n    }\n    else {\n      result = *(undefined4 *)(output_data + 0x18);\n    }\n    is_empty = check_concatenation_result(result,*(undefined4 *)(output_data + 0x18));\n    if (is_empty == 0) {\n      *(undefined4 *)(output_data + 0x18) = result;\n      *(undefined *)(output_data + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "check_and_update_result_08002afc",
            "entrypoint": "0x08002afc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002afc": "check_and_update_result_08002afc",
                "calculate_result_08002978": "calculate_result",
                "check_concatenation_result_08009214": "check_concatenation_result",
                "iVar1": "is_empty",
                "is_string_empty_08009228": "is_string_empty",
                "param_1": "input_data",
                "param_2": "output_data",
                "uVar2": "result",
                "uVar3": "result_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "additional_data": {
                "&DAT_20000870": {
                    "1": "result_data",
                    "2": "data_array"
                },
                "0": {
                    "1": "null"
                },
                "0x0": {
                    "1": "null"
                },
                "DAT_20000cf0": {
                    "1": "final_byte"
                },
                "DAT_20000cf1": {
                    "1": "target_byte"
                },
                "FUN_08002ba8": {
                    "1": "update_and_check_result",
                    "10": "update_result",
                    "7": "update_results",
                    "9": "process_data"
                },
                "check_and_update_result_08002afc": {
                    "4": "check_and_update_result"
                },
                "increment_and_check_08002870": {
                    "4": "increment_and_check"
                },
                "local_10": {
                    "1": "curr_data",
                    "2": "current_value",
                    "3": "current_result",
                    "6": "current_data",
                    "9": "current_ptr"
                },
                "local_14": {
                    "1": "previous_undefined",
                    "2": "current_result",
                    "3": "previous_result",
                    "6": "previous_data",
                    "8": "previous_ptr"
                },
                "local_9": {
                    "1": "byte_val",
                    "10": "current_byte",
                    "11": "byte_value",
                    "4": "current_value"
                },
                "puVar2": {
                    "1": "prev_data_ptr",
                    "2": "previous_result_ptr",
                    "6": "previous_ptr"
                },
                "puVar3": {
                    "1": "previous_data_ptr_last",
                    "2": "previous_ptr_2",
                    "4": "current_ptr"
                },
                "uVar1": {
                    "1": "current_value",
                    "3": "current_byte_as_uint"
                }
            },
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid update_result_08002ba8(void)\n\n{\n  uint index;\n  undefined *previous_ptr;\n  undefined *current_ptr;\n  undefined *previous_ptr;\n  undefined *current_ptr;\n  byte byte_value;\n  \n  previous_ptr = (undefined *)0x0;\n  current_ptr = (undefined *)0x0;\n  byte_value = DAT_20000cf1;\n  current_ptr = (undefined *)0x0;\n  while (previous_ptr = previous_ptr, byte_value != DAT_20000cf0) {\n    previous_ptr = current_ptr;\n    index = (uint)byte_value;\n    check_and_update_result_08002ba8(previous_ptr,current_ptr,&DAT_20000870 + index * 0x40);\n    byte_value = increment_and_check(byte_value);\n    current_ptr = previous_ptr;\n    current_ptr = &DAT_20000870 + index * 0x40;\n  }\n  check_and_update_result_08002ba8(previous_ptr,current_ptr,0,previous_ptr,current_ptr);\n  return;\n}\n\n",
            "current_name": "update_result_08002ba8",
            "entrypoint": "0x08002ba8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ba8": "update_result_08002ba8",
                "check_and_update_result_08002afc": "check_and_update_result",
                "increment_and_check_08002870": "increment_and_check",
                "local_10": "current_ptr",
                "local_14": "previous_ptr",
                "local_9": "byte_value",
                "puVar2": "previous_ptr",
                "puVar3": "current_ptr",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c18": {
            "additional_data": {
                "FUN_08002c18": {
                    "1": "calculate_and_set_values",
                    "10": "calculate_values",
                    "2": "calculate_and_update_values",
                    "9": "calculate_result"
                },
                "iVar2": {
                    "1": "reversed_int",
                    "2": "reversed_value2",
                    "3": "reversed_value",
                    "4": "reversed_value_2",
                    "5": "reversed_bits2",
                    "6": "shifted_value"
                },
                "local_1c": {
                    "1": "offset_2",
                    "2": "result4",
                    "6": "result2",
                    "9": "result_2"
                },
                "local_20": {
                    "1": "local_var1",
                    "2": "difference",
                    "4": "final_result",
                    "6": "result1",
                    "9": "result_1"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "input_data",
                    "2": "input_address",
                    "3": "data",
                    "4": "input_ptr"
                },
                "param_2": {
                    "1": "float_param",
                    "2": "float_value1",
                    "3": "value1",
                    "5": "param_2"
                },
                "param_3": {
                    "1": "parameter3",
                    "2": "value_2",
                    "3": "float_value_2",
                    "5": "param_3"
                },
                "uVar1": {
                    "1": "reversed_bits_value",
                    "2": "reversed_value",
                    "3": "reversed_value1",
                    "4": "reversed_bits",
                    "5": "reversed_value_1"
                },
                "uVar3": {
                    "1": "reversed_value2",
                    "2": "reversed_value3",
                    "3": "reversed_value_3",
                    "5": "reversed_bits3"
                },
                "uVar4": {
                    "1": "reversed4",
                    "2": "result4",
                    "3": "reversed_value_4",
                    "5": "reversed_bits4"
                },
                "uVar5": {
                    "1": "reversed_val_5",
                    "2": "reversed_value_4",
                    "3": "reversed_value_5",
                    "5": "reversed_bits5"
                },
                "uVar6": {
                    "1": "value2",
                    "13": "shifted_value",
                    "2": "result1",
                    "3": "shifted_result"
                },
                "uVar7": {
                    "1": "processed_value",
                    "12": "calculated_value",
                    "2": "value"
                }
            },
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "calling": [
                "FUN_08002e08"
            ],
            "code": "\nvoid calculate_values_08002c18(int input_data,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 reversed_value_1;\n  int shifted_value;\n  undefined4 reversed_bits3;\n  undefined4 reversed_bits4;\n  undefined4 reversed_bits5;\n  uint shifted_value;\n  undefined8 calculated_value;\n  int result_1;\n  uint result_2;\n  \n  reversed_value_1 = reverse_bits_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  reversed_value_1 = calculate_float_08008eec(reversed_value_1,param2);\n  calculated_value = reverse_bits_08008590(reversed_value_1);\n  calculated_value = calculate_value_08009318((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n  reversed_value_1 = calculate_shifted_value_08008bf0((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n  *(undefined4 *)(input_data + 0x28) = reversed_value_1;\n  reversed_value_1 = reverse_bits_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  reversed_value_1 = calculate_float_08008eec(reversed_value_1,param3);\n  calculated_value = reverse_bits_08008590(reversed_value_1);\n  calculated_value = calculate_value_08009318((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n  reversed_value_1 = calculate_shifted_value_08008bf0((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n  *(undefined4 *)(input_data + 0x2c) = reversed_value_1;\n  calculated_value = reverse_bits_0800856c(*(int *)(input_data + 0x30) * 0x32);\n  calculated_value = calculate_result_08008640((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20),0,0x404e0000);\n  shifted_value = reverse_bits_08008ba0((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n  reversed_value_1 = reverse_bits_08008e3c(*(undefined4 *)(input_data + 0x28));\n  reversed_bits3 = reverse_bits_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  reversed_bits4 = reverse_bits_08008e44(shifted_value);\n  reversed_value_1 = calculate_result_080028bc(reversed_value_1,reversed_bits3,reversed_bits4);\n  calculated_value = reverse_bits_08008590(reversed_value_1);\n  calculated_value = calculate_value_08009318((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n  result_2 = reverse_bits_08008ba0((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n  reversed_value_1 = reverse_bits_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  reversed_bits3 = reverse_bits_08008e3c(*(undefined4 *)(input_data + 0x2c));\n  reversed_bits4 = reverse_bits_08008e44(-shifted_value);\n  reversed_value_1 = calculate_result_080028bc(reversed_value_1,reversed_bits3,reversed_bits4);\n  calculated_value = reverse_bits_08008590(reversed_value_1);\n  calculated_value = calculate_result_080094c0((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n  result_1 = reverse_bits_08008ba0((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n  result_1 = (*(int *)(input_data + 0x10) - result_2) - result_1;\n  if (result_1 < 0) {\n    reversed_value_1 = reverse_bits_08008e3c(*(undefined4 *)(input_data + 0x28));\n    reversed_bits3 = reverse_bits_08008e3c(*(undefined4 *)(input_data + 0x2c));\n    reversed_bits4 = reverse_bits_08008e44(shifted_value);\n    reversed_bits5 = reverse_bits_08008e44(*(undefined4 *)(input_data + 0x10));\n    reversed_value_1 = calculate_result_08002908(reversed_value_1,reversed_bits3,reversed_bits4,reversed_bits5);\n    calculated_value = reverse_bits_08008590(reversed_value_1);\n    calculated_value = calculate_value_08009318((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n    shifted_value = reverse_bits_08008ba0((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20));\n    shifted_value = shifted_value & ~((int)shifted_value >> 0x1f);\n    result_2 = *(uint *)(input_data + 0x10);\n    if ((int)shifted_value <= (int)*(uint *)(input_data + 0x10)) {\n      result_2 = shifted_value;\n    }\n    result_1 = 0;\n  }\n  *(uint *)(input_data + 0x34) = result_2;\n  *(uint *)(input_data + 0x38) = result_1 + result_2;\n  return;\n}\n\n",
            "current_name": "calculate_values_08002c18",
            "entrypoint": "0x08002c18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c18": "calculate_values_08002c18",
                "iVar2": "shifted_value",
                "local_1c": "result_2",
                "local_20": "result_1",
                "param_1": "input_data",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "reversed_value_1",
                "uVar3": "reversed_bits3",
                "uVar4": "reversed_bits4",
                "uVar5": "reversed_bits5",
                "uVar6": "shifted_value",
                "uVar7": "calculated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002e08": {
            "additional_data": {
                "DAT_20000cf0": {
                    "1": "loop_end_byte"
                },
                "DAT_20000cf1": {
                    "1": "loop_start_byte"
                },
                "FUN_08002e08": {
                    "1": "process_data",
                    "18": "calculate_and_update_values",
                    "2": "calculate_values_and_update",
                    "7": "calculate_values"
                },
                "calculate_and_update_values": {
                    "1": "calculate_and_update_values"
                },
                "calculate_floating_point_08009054": {
                    "1": "calculate_floating_point_values"
                },
                "calculate_values_08002c18": {
                    "1": "update_values"
                },
                "iVar3": {
                    "1": "current_index",
                    "12": "index",
                    "2": "data_index",
                    "3": "array_index",
                    "5": "data_offset"
                },
                "increment_and_check_08002870": {
                    "1": "increment_and_check_index"
                },
                "local_11": {
                    "1": "current_value",
                    "11": "current_index",
                    "13": "current_byte",
                    "3": "loop_counter"
                },
                "local_18": {
                    "1": "current_value",
                    "2": "ptr_data",
                    "21": "current_data"
                },
                "uVar1": {
                    "10": "result_1",
                    "20": "result1"
                },
                "uVar2": {
                    "10": "result_2",
                    "20": "result2"
                }
            },
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid calculate_and_update_values_08002e08(void)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int index;\n  undefined *current_data;\n  byte current_byte;\n  \n  current_data = (undefined *)0x0;\n  current_byte = DAT_20000cf1;\n  while (current_byte != DAT_20000cf0) {\n    index = (uint)current_byte * 0x40;\n    if ((current_data != (undefined *)0x0) &&\n       ((current_data[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      result1 = calculate_floating_point_values(*(undefined4 *)(current_data + 0x18),*(undefined4 *)(current_data + 0x14));\n      result2 = calculate_floating_point_values(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(current_data + 0x14));\n      update_calculated_values(current_data,result1,result2);\n      current_data[0x24] = 0;\n    }\n    current_byte = increment_and_check_index(current_byte);\n    current_data = &DAT_20000870 + index;\n  }\n  result1 = calculate_floating_point_values(*(undefined4 *)(current_data + 0x18),*(undefined4 *)(current_data + 0x14));\n  result2 = calculate_floating_point_values(0,*(undefined4 *)(current_data + 0x14));\n  update_calculated_values(current_data,result1,result2);\n  current_data[0x24] = 0;\n  return;\n}\n\n",
            "current_name": "calculate_and_update_values_08002e08",
            "entrypoint": "0x08002e08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002e08": "calculate_and_update_values_08002e08",
                "calculate_floating_point_08009054": "calculate_floating_point_values",
                "calculate_values_08002c18": "update_calculated_values",
                "iVar3": "index",
                "increment_and_check_08002870": "increment_and_check_index",
                "local_11": "current_byte",
                "local_18": "current_data",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002edc": {
            "additional_data": {
                "FUN_08002edc": {
                    "1": "perform_operations",
                    "11": "update_all_values",
                    "2": "update_data",
                    "5": "update_and_calculate_values",
                    "7": "update_values"
                },
                "calculate_and_update_values_08002e08": {
                    "1": "calculate_and_update_all_values",
                    "2": "calculate_and_update",
                    "25": "calculate_and_update_values"
                },
                "update_concatenation_08002a94": {
                    "1": "concatenate_values",
                    "2": "perform_concatenation",
                    "20": "update_concatenation",
                    "3": "concatenate_strings"
                },
                "update_result_08002ba8": {
                    "1": "update_output",
                    "2": "calculate_result",
                    "21": "update_result",
                    "5": "update_final_result"
                }
            },
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "code": "\nvoid update_all_values_08002edc(void)\n\n{\n  update_concatenation();\n  update_result();\n  calculate_and_update_values();\n  return;\n}\n\n",
            "current_name": "update_all_values_08002edc",
            "entrypoint": "0x08002edc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002edc": "update_all_values_08002edc",
                "calculate_and_update_values_08002e08": "calculate_and_update_values",
                "update_concatenation_08002a94": "update_concatenation",
                "update_result_08002ba8": "update_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "additional_data": {
                "DAT_20000cf0": {
                    "1": "original_value",
                    "2": "data_value"
                },
                "DAT_20000cf1": {
                    "1": "current_value",
                    "2": "previous_data_value",
                    "3": "updated_data",
                    "5": "updated_value"
                },
                "DAT_20000cf2": {
                    "1": "new_data",
                    "2": "check_result",
                    "5": "checked_value"
                },
                "FUN_08002ef0": {
                    "1": "update_data_and_increment",
                    "11": "update_data",
                    "3": "initialize_data"
                },
                "increment_and_check_08002870": {
                    "1": "check_and_update",
                    "13": "increment_and_check",
                    "2": "check_and_increment",
                    "4": "check_increment"
                }
            },
            "called": [
                "FUN_08002870"
            ],
            "calling": [
                "FUN_08002f24"
            ],
            "code": "\nvoid update_data_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = increment_and_check(DAT_20000cf0);\n  return;\n}\n\n",
            "current_name": "update_data_08002ef0",
            "entrypoint": "0x08002ef0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ef0": "update_data_08002ef0",
                "increment_and_check_08002870": "increment_and_check"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f24": {
            "additional_data": {
                "FUN_08002f24": {
                    "2": "update_and_fill_memory",
                    "26": "initialize_memory",
                    "3": "initialize_data"
                },
                "fill_memory_0800b430": {
                    "23": "fill_memory",
                    "8": "clear_memory"
                },
                "update_data_08002ef0": {
                    "31": "update_data"
                }
            },
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_memory_08002f24(void)\n\n{\n  update_data();\n  fill_memory(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "current_name": "initialize_memory_08002f24",
            "entrypoint": "0x08002f24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f24": "initialize_memory_08002f24",
                "fill_memory_0800b430": "fill_memory",
                "update_data_08002ef0": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f40": {
            "additional_data": {
                "DAT_20000cf0": {
                    "1": "current_value",
                    "2": "original_value",
                    "5": "previous_value"
                },
                "DAT_20000cf1": {
                    "1": "new_data",
                    "13": "current_value",
                    "2": "previous_value",
                    "3": "updated_value"
                },
                "FUN_08002f40": {
                    "1": "update_check_value",
                    "2": "check_and_increment",
                    "3": "check_and_increment_value",
                    "5": "update_if_not_equal"
                },
                "increment_and_check_08002870": {
                    "1": "increment_and_verify_value",
                    "19": "increment_and_check",
                    "3": "increment_and_validate"
                }
            },
            "called": [
                "FUN_08002870"
            ],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\nvoid update_if_not_equal_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_check(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "current_name": "update_if_not_equal_08002f40",
            "entrypoint": "0x08002f40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f40": "update_if_not_equal_08002f40",
                "increment_and_check_08002870": "increment_and_check"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f74": {
            "additional_data": {
                "&DAT_20000870": {
                    "1": "data"
                },
                "0x40": {
                    "1": "size_of_data_point"
                },
                "DAT_20000870": {
                    "1": "data_entries_array"
                },
                "DAT_20000cf0": {
                    "1": "start_address",
                    "2": "current_index"
                },
                "DAT_20000cf1": {
                    "1": "current_index",
                    "2": "end_index"
                },
                "FUN_08002f74": {
                    "1": "get_next_block_address",
                    "2": "get_next_data_block",
                    "4": "get_current_data_pointer",
                    "6": "get_data_pointer"
                },
                "puVar1": {
                    "1": "next_data_block_ptr",
                    "2": "current_data_ptr",
                    "3": "data_ptr",
                    "6": "data_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "code": "\nundefined * get_data_pointer_08002f74(void)\n\n{\n  undefined *data_pointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    data_pointer = (undefined *)0x0;\n  }\n  else {\n    data_pointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return data_pointer;\n}\n\n",
            "current_name": "get_data_pointer_08002f74",
            "entrypoint": "0x08002f74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f74": "get_data_pointer_08002f74",
                "puVar1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fac": {
            "additional_data": {
                "DAT_20000cf1": {
                    "1": "data_pointer1",
                    "12": "data1",
                    "2": "variable1",
                    "3": "value1"
                },
                "DAT_20000cf2": {
                    "1": "second_data",
                    "12": "data2",
                    "2": "variable2",
                    "3": "value2"
                },
                "FUN_08002fac": {
                    "1": "are_datas_equal",
                    "2": "are_values_equal",
                    "3": "compare_data",
                    "4": "check_equality",
                    "5": "check_data_equality"
                },
                "cf1": {
                    "1": "value1"
                },
                "cf2": {
                    "1": "value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001e98"
            ],
            "code": "\nbool check_data_equality_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "current_name": "check_data_equality_08002fac",
            "entrypoint": "0x08002fac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fac": "check_data_equality_08002fac"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "additional_data": {
                "DAT_20000ea8": {
                    "1": "should_return",
                    "2": "exit_condition",
                    "3": "exit_flag"
                },
                "DAT_20000ea9": {
                    "1": "is_alarm_triggered",
                    "5": "alarm_flag",
                    "8": "alarm_status"
                },
                "FUN_08002fd4": {
                    "1": "process_until_data_pointers_zero_or_alarm_triggered",
                    "2": "process_alarm_loop",
                    "26": "process_data"
                },
                "get_data_pointer_08002f74": {
                    "31": "get_data_pointer"
                },
                "iVar1": {
                    "26": "data_pointer"
                },
                "process_alarm_08003a74": {
                    "31": "process_alarm"
                }
            },
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "code": "\nvoid process_data_08002fd4(void)\n\n{\n  int data_pointer;\n  \n  while ((data_pointer = get_data_pointer(), data_pointer != 0 || (DAT_20000ea9 == '\\x03'))) {\n    process_alarm();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08002fd4",
            "entrypoint": "0x08002fd4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fd4": "process_data_08002fd4",
                "get_data_pointer_08002f74": "get_data_pointer",
                "iVar1": "data_pointer",
                "process_alarm_08003a74": "process_alarm"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003004": {
            "additional_data": {
                "FUN_08003004": {
                    "1": "calculate_final_output",
                    "11": "calculate_and_update_values",
                    "3": "calculate_values",
                    "4": "calculate_results",
                    "6": "process_data"
                },
                "iVar10": {
                    "1": "data_offset",
                    "11": "offset",
                    "14": "index",
                    "2": "array_index"
                },
                "iVar12": {
                    "1": "absolute_diff",
                    "3": "abs_difference",
                    "4": "diff",
                    "6": "abs_diff",
                    "8": "difference"
                },
                "iVar2": {
                    "1": "product_var1",
                    "23": "product1",
                    "4": "product_1"
                },
                "iVar3": {
                    "1": "product_var2",
                    "23": "product2",
                    "4": "product_2"
                },
                "iVar4": {
                    "1": "product_result3",
                    "23": "product3",
                    "4": "product_3"
                },
                "local_1c": {
                    "1": "float_result",
                    "3": "result2"
                },
                "local_20": {
                    "1": "selected_input",
                    "2": "concatenated_value",
                    "3": "result"
                },
                "param_1": {
                    "1": "input_param_1",
                    "12": "input1",
                    "3": "param1",
                    "4": "input_1",
                    "8": "value1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "12": "input2",
                    "3": "param2",
                    "4": "input_2",
                    "8": "value2"
                },
                "param_3": {
                    "1": "input_param_3",
                    "12": "input3",
                    "3": "param3",
                    "4": "input_3",
                    "8": "value3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "12": "input4",
                    "3": "param4",
                    "4": "input_4",
                    "8": "value4"
                },
                "param_5": {
                    "1": "is_param_four_empty",
                    "15": "flag",
                    "2": "is_concatenated",
                    "3": "param5"
                },
                "puVar11": {
                    "1": "ptr_data",
                    "10": "pointer",
                    "2": "ptr",
                    "4": "result_array"
                },
                "uVar1": {
                    "1": "calculation1",
                    "2": "float_1",
                    "3": "float_value1",
                    "6": "result1"
                },
                "uVar13": {
                    "1": "max_offset",
                    "4": "max_diff",
                    "6": "max_difference",
                    "7": "max_value"
                },
                "uVar14": {
                    "1": "result",
                    "2": "processed_data",
                    "3": "result1",
                    "4": "processed_value"
                },
                "uVar15": {
                    "1": "value2",
                    "2": "processed_value2",
                    "4": "result2"
                },
                "uVar16": {
                    "1": "temp_value3",
                    "2": "processed_data3",
                    "4": "result3"
                },
                "uVar5": {
                    "1": "reversed_value2",
                    "2": "float_input2",
                    "3": "float_value2",
                    "6": "result2"
                },
                "uVar6": {
                    "1": "calculated_float3",
                    "2": "float_input3",
                    "3": "float_value3",
                    "6": "result3"
                },
                "uVar7": {
                    "1": "calculation1",
                    "2": "float_result1",
                    "4": "result1",
                    "5": "result4"
                },
                "uVar8": {
                    "1": "temp_value2",
                    "2": "float_5",
                    "3": "float_result2",
                    "4": "result2",
                    "5": "float5"
                },
                "uVar9": {
                    "1": "max_diff",
                    "11": "max_value",
                    "2": "max_difference",
                    "6": "min_value"
                }
            },
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "calling": [
                "FUN_08001e98"
            ],
            "code": "\nvoid calculate_and_update_values_08003004(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 char flag)\n\n{\n  undefined4 result1;\n  int product1;\n  int product2;\n  int product3;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  uint max_value;\n  int index;\n  ushort *pointer;\n  int difference;\n  uint max_value;\n  undefined8 processed_value;\n  undefined8 result2;\n  undefined8 result3;\n  undefined4 result;\n  undefined4 result2;\n  \n  index = (uint)DAT_20000cf0 * 0x40;\n  pointer = (ushort *)(&DAT_20000870 + index);\n  result1 = calculate_float_08008eec(DAT_20000ebc,input1);\n  processed_value = reverse_bits_08008590(result1);\n  product1 = calculate_product_080095b8((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n  result1 = calculate_float_08008eec(DAT_20000ec0,input2);\n  processed_value = reverse_bits_08008590(result1);\n  product2 = calculate_product_080095b8((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n  result1 = calculate_float_08008eec(DAT_20000ec4,input3);\n  processed_value = reverse_bits_08008590(result1);\n  product3 = calculate_product_080095b8((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n  *pointer = 0;\n  if (product1 < DAT_20000cf4) {\n    *pointer = *pointer | 0x20;\n  }\n  if (product2 < DAT_20000cf8) {\n    *pointer = *pointer | 0x880;\n  }\n  if (product3 < DAT_20000cfc) {\n    *pointer = *pointer | 0x200;\n  }\n  difference = product1 - DAT_20000cf4;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000874 + index) = difference;\n  difference = product2 - DAT_20000cf8;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000878 + index) = difference;\n  difference = product3 - DAT_20000cfc;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_2000087c + index) = difference;\n  max_value = *(uint *)(&DAT_2000087c + index);\n  if (*(uint *)(&DAT_2000087c + index) < *(uint *)(&DAT_20000878 + index)) {\n    max_value = *(uint *)(&DAT_20000878 + index);\n  }\n  max_value = *(uint *)(&DAT_20000874 + index);\n  if (*(uint *)(&DAT_20000874 + index) < max_value) {\n    max_value = max_value;\n  }\n  *(uint *)(&DAT_20000880 + index) = max_value;\n  if (*(int *)(&DAT_20000880 + index) != 0) {\n    result1 = reverse_bits_08008e44(product1 - DAT_20000cf4);\n    result1 = calculate_floating_point_08009054(result1,DAT_20000ebc);\n    result2 = reverse_bits_08008e44(product2 - DAT_20000cf8);\n    result2 = calculate_floating_point_08009054(result2,DAT_20000ec0);\n    result3 = reverse_bits_08008e44(product3 - DAT_20000cfc);\n    result3 = calculate_floating_point_08009054(result3,DAT_20000ec4);\n    result4 = calculate_float_08008eec(result1,result1);\n    result5 = calculate_float_08008eec(result2,result2);\n    result4 = calculate_floating_point_08008cdc(result4,result5);\n    result5 = calculate_float_08008eec(result3,result3);\n    result4 = calculate_floating_point_08008cdc(result4,result5);\n    processed_value = reverse_bits_08008590(result4);\n    processed_value = process_data_080098d0((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n    result4 = calculate_float_08008c30((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + index) = result4;\n    result4 = calculate_floating_point_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + index));\n    if (flag == '\\0') {\n      result2 = calculate_float_08008eec(input4,result4);\n    }\n    else {\n      result2 = calculate_floating_point_08009054(0x3f800000,input4);\n    }\n    result5 = calculate_float_08008eec(*(undefined4 *)(&DAT_20000890 + index),result2);\n    *(undefined4 *)(&DAT_20000884 + index) = result5;\n    result5 = reverse_bits_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    result5 = calculate_float_08008eec(result5,result2);\n    processed_value = reverse_bits_08008590(result5);\n    processed_value = calculate_value_08009318((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n    result5 = calculate_shifted_value_08008bf0((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + index) = result5;\n    result5 = reverse_bits_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    result5 = calculate_float_08008eec(result5,result4);\n    result5 = calculate_float_08008eec(result5,DAT_20000edc);\n    result5 = calculate_floating_point_08009054(result5,0x453b8000);\n    processed_value = reverse_bits_08008590(result5);\n    processed_value = calculate_value_08009318((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n    result5 = reverse_bits_08008ba0((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + index) = result5;\n    max_value = calculate_float_08008eec(result1,result4);\n    result1 = calculate_float_08008eec(result2,result4);\n    result2 = calculate_float_08008eec(result3,result4);\n    result = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (difference = check_if_concatenated_parameters_are_empty_08009264(DAT_20000d0c,0), difference != 0)) {\n      result3 = calculate_float_08008eec(DAT_20000d00 ^ 0x80000000,max_value);\n      result4 = calculate_float_08008eec(DAT_20000d04,result1);\n      result3 = calculate_floating_point_08008cd8(result3,result4);\n      result4 = calculate_float_08008eec(DAT_20000d08,result2);\n      result3 = calculate_floating_point_08008cd8(result3,result4);\n      processed_value = reverse_bits_08008590(result3);\n      difference = check_if_string_empty_08008b24((int)processed_value,(int)((ulonglong)processed_value >> 0x20),0x66666666,0x3fee6666);\n      if (difference != 0) {\n        difference = is_string_empty_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + index));\n        result = DAT_20000d0c;\n        if (difference == 0) {\n          result = *(undefined4 *)(&DAT_20000884 + index);\n        }\n        processed_value = reverse_bits_08008590(result3);\n        difference = is_cy_null_08008b60((int)processed_value,(int)((ulonglong)processed_value >> 0x20),0x66666666,0xbfee6666);\n        if (difference != 0) {\n          processed_value = reverse_bits_08008590(result3);\n          processed_value = reverse_bits_080082d0(0,0x3ff00000,(int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n          processed_value = calculate_result_08008640((int)processed_value,(int)((ulonglong)processed_value >> 0x20),0,0x3fe00000);\n          processed_value = process_data_080098d0((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n          result3 = calculate_float_08008c30((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n          processed_value = reverse_bits_08008590(result);\n          result4 = calculate_float_08008eec(DAT_20000edc,DAT_20000ee0);\n          result4 = calculate_float_08008eec(result4,result3);\n          result2 = reverse_bits_08008590(result4);\n          result3 = reverse_bits_08008590(result3);\n          result3 = reverse_bits_080082d0(0,0x3ff00000,(int)result3,(int)((ulonglong)result3 >> 0x20));\n          result2 = calculate_double_precision_08008894((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                                (int)((ulonglong)result3 >> 0x20));\n          result2 = process_data_080098d0((int)result2,(int)((ulonglong)result2 >> 0x20));\n          difference = check_if_string_empty_08008b24((int)processed_value,(int)((ulonglong)processed_value >> 0x20),(int)result2,\n                                (int)((ulonglong)result2 >> 0x20));\n          if (difference == 0) {\n            result4 = calculate_float_08008eec(DAT_20000edc,DAT_20000ee0);\n            result4 = calculate_float_08008eec(result4,result3);\n            processed_value = reverse_bits_08008590(result4);\n            result2 = reverse_bits_08008590(result3);\n            result2 = reverse_bits_080082d0(0,0x3ff00000,(int)result2,(int)((ulonglong)result2 >> 0x20));\n            processed_value = calculate_double_precision_08008894((int)processed_value,(int)((ulonglong)processed_value >> 0x20),(int)result2,\n                                  (int)((ulonglong)result2 >> 0x20));\n            processed_value = process_data_080098d0((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n            result = calculate_float_08008c30((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + index) = result;\n    result4 = calculate_result_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + index));\n    difference = is_string_empty_08009228(result,result4);\n    result3 = result4;\n    if (difference != 0) {\n      result3 = result;\n    }\n    *(undefined4 *)(&DAT_20000888 + index) = result3;\n    difference = check_concatenation_result_08009250(result4,*(undefined4 *)(&DAT_20000884 + index));\n    if (difference == 0) {\n      (&DAT_20000895)[index] = 0;\n    }\n    else {\n      (&DAT_20000895)[index] = 1;\n    }\n    (&DAT_20000894)[index] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + index);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = max_value;\n    DAT_20000d04 = result1;\n    DAT_20000d08 = result2;\n    DAT_20000cf2 = increment_and_check_08002870(DAT_20000cf2);\n    DAT_20000cf4 = product1;\n    DAT_20000cf8 = product2;\n    DAT_20000cfc = product3;\n    update_all_values_08002edc();\n  }\n  return;\n}\n\n",
            "current_name": "calculate_and_update_values_08003004",
            "entrypoint": "0x08003004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003004": "calculate_and_update_values_08003004",
                "iVar10": "index",
                "iVar12": "difference",
                "iVar2": "product1",
                "iVar3": "product2",
                "iVar4": "product3",
                "local_1c": "result2",
                "local_20": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag",
                "puVar11": "pointer",
                "uVar1": "result1",
                "uVar13": "max_value",
                "uVar14": "processed_value",
                "uVar15": "result2",
                "uVar16": "result3",
                "uVar5": "result2",
                "uVar6": "result3",
                "uVar7": "result4",
                "uVar8": "result5",
                "uVar9": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035ec": {
            "additional_data": {
                "FUN_080035ec": {
                    "1": "initialize_function",
                    "16": "initialize_parameters",
                    "2": "initialize_variables",
                    "5": "initialize_data"
                },
                "param_1": {
                    "1": "parameter_1",
                    "2": "first_param",
                    "3": "input1",
                    "4": "value1",
                    "5": "first_parameter"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "second_param",
                    "3": "input2",
                    "4": "value2",
                    "5": "second_parameter"
                },
                "param_3": {
                    "1": "argument3",
                    "2": "third_param",
                    "3": "input3",
                    "4": "value3",
                    "5": "third_parameter"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800283a"
            ],
            "code": "\nvoid initialize_parameters_080035ec(undefined4 parameter1,undefined4 parameter2,undefined4 parameter3)\n\n{\n  DAT_20000cf4 = parameter1;\n  DAT_20000cf8 = parameter2;\n  DAT_20000cfc = parameter3;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_080035ec",
            "entrypoint": "0x080035ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035ec": "initialize_parameters_080035ec",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003618": {
            "additional_data": {
                "DAT_20000cf1": {
                    "1": "constant"
                },
                "FUN_08003618": {
                    "1": "update_data_values",
                    "2": "update_data",
                    "20": "update_values",
                    "3": "update_value"
                },
                "calculate_float_08008eec": {
                    "1": "perform_float_calculation",
                    "15": "calculate_float"
                },
                "calculate_floating_point_08009054": {
                    "1": "perform_floating_point_calculation",
                    "15": "calculate_floating_point"
                },
                "iVar2": {
                    "1": "data_offset",
                    "22": "index",
                    "7": "offset"
                },
                "param_1": {
                    "1": "input_val",
                    "2": "input_param",
                    "20": "input_value"
                },
                "reverse_bits_08008e44": {
                    "18": "reverse_bits"
                },
                "reverse_bits_08008e44_1": {
                    "1": "reverse_bits1"
                },
                "uVar1": {
                    "1": "reversed_param",
                    "19": "reversed_input",
                    "2": "reversed_input_value",
                    "8": "reversed_value"
                },
                "uVar3": {
                    "1": "reversed_value",
                    "2": "value",
                    "3": "original_value",
                    "4": "stored_value",
                    "5": "current_value"
                },
                "update_all_values_08002edc": {
                    "19": "update_all_values"
                }
            },
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "calling": [
                "FUN_080058a0"
            ],
            "code": "\nvoid update_values_08003618(undefined4 input_value)\n\n{\n  undefined4 reversed_input;\n  int index;\n  undefined4 current_value;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  current_value = *(undefined4 *)(&DAT_20000890 + index);\n  reversed_input = reverse_bits(input_value);\n  reversed_input = calculate_float(current_value,reversed_input);\n  current_value = reverse_bits(*(undefined4 *)(&DAT_20000880 + index));\n  reversed_input = calculate_floating_point(reversed_input,current_value);\n  *(undefined4 *)(&DAT_20000890 + index) = reversed_input;\n  *(undefined4 *)(&DAT_20000880 + index) = input_value;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  update_all_values();\n  return;\n}\n\n",
            "current_name": "update_values_08003618",
            "entrypoint": "0x08003618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003618": "update_values_08003618",
                "calculate_float_08008eec": "calculate_float",
                "calculate_floating_point_08009054": "calculate_floating_point",
                "iVar2": "index",
                "param_1": "input_value",
                "reverse_bits_08008e44": "reverse_bits",
                "uVar1": "reversed_input",
                "uVar3": "current_value",
                "update_all_values_08002edc": "update_all_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800369c": {
            "additional_data": {
                "FUN_0800369c": {
                    "1": "convert_string_to_bytes",
                    "28": "write_string_to_memory"
                },
                "local_c": {
                    "1": "char_pointer",
                    "27": "current_char",
                    "3": "current_character"
                },
                "param_1": {
                    "1": "str",
                    "25": "string",
                    "5": "input_string"
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "code": "\nvoid write_string_to_memory_0800369c(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    write_byte_to_memory_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "current_name": "write_string_to_memory_0800369c",
            "entrypoint": "0x0800369c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800369c": "write_string_to_memory_0800369c",
                "local_c": "current_char",
                "param_1": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036c6": {
            "additional_data": {
                "FUN_080036c6": {
                    "1": "decode_string",
                    "29": "write_string_to_memory"
                },
                "local_c": {
                    "28": "current_char",
                    "3": "current_character"
                },
                "param_1": {
                    "1": "encoded_string",
                    "20": "string",
                    "3": "str",
                    "6": "input_string"
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "code": "\nvoid write_string_to_memory_080036c6(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    write_byte_to_memory_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "current_name": "write_string_to_memory_080036c6",
            "entrypoint": "0x080036c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036c6": "write_string_to_memory_080036c6",
                "local_c": "current_char",
                "param_1": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036f0": {
            "additional_data": {
                "FUN_080036f0": {
                    "1": "convert_and_write_bits",
                    "12": "print_binary",
                    "2": "print_bits",
                    "3": "print_binary_number"
                },
                "local_10": {
                    "1": "current_bit",
                    "15": "bit_index",
                    "2": "bit_count",
                    "3": "index",
                    "7": "bit_position"
                },
                "local_c": {
                    "23": "bit_mask",
                    "8": "mask"
                },
                "param_1": {
                    "1": "binary_number",
                    "2": "input_number",
                    "21": "number"
                },
                "param_2": {
                    "1": "length",
                    "19": "num_bits",
                    "3": "bit_length",
                    "8": "bit_count"
                },
                "uVar1": {
                    "1": "bit_value_to_write",
                    "20": "bit_value",
                    "5": "binary_digit"
                },
                "write_byte_to_memory_08008250": {
                    "1": "write_bit_to_memory"
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "code": "\nvoid print_binary_080036f0(uint number,int num_bits)\n\n{\n  undefined4 bit_value;\n  int bit_index;\n  uint bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (bit_index = 0; bit_index < num_bits; bit_index = bit_index + 1) {\n    if ((bit_mask & number) == 0) {\n      bit_value = 0x30;\n    }\n    else {\n      bit_value = 0x31;\n    }\n    write_bit_to_memory(bit_value);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "current_name": "print_binary_080036f0",
            "entrypoint": "0x080036f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036f0": "print_binary_080036f0",
                "local_10": "bit_index",
                "local_c": "bit_mask",
                "param_1": "number",
                "param_2": "num_bits",
                "uVar1": "bit_value",
                "write_byte_to_memory_08008250": "write_bit_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003740": {
            "additional_data": {
                "FUN_08003740": {
                    "1": "print_binary_wrapper",
                    "28": "print_binary"
                },
                "param_1": {
                    "14": "data",
                    "2": "binary",
                    "3": "input",
                    "4": "input_data",
                    "8": "binary_data"
                },
                "print_binary": {
                    "1": "print_binary"
                },
                "print_binary_080036f0": {
                    "1": "print_binary_data",
                    "2": "print_binary"
                }
            },
            "called": [
                "FUN_080036f0"
            ],
            "calling": [],
            "code": "\nvoid print_binary_08003740(undefined data)\n\n{\n  print_binary_08003740(data,8);\n  return;\n}\n\n",
            "current_name": "print_binary_08003740",
            "entrypoint": "0x08003740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003740": "print_binary_08003740",
                "param_1": "data",
                "print_binary_080036f0": "print_binary"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800375c": {
            "additional_data": {
                "0x10": {
                    "1": "byte_count"
                },
                "FUN_0800375c": {
                    "1": "print_buffer",
                    "22": "print_binary",
                    "3": "print_binary_data"
                },
                "param_1": {
                    "10": "binary_data",
                    "12": "data",
                    "2": "binary",
                    "5": "buffer"
                },
                "print_binary_080036f0": {
                    "1": "print_data_hex",
                    "4": "print_binary_data"
                }
            },
            "called": [
                "FUN_080036f0"
            ],
            "calling": [
                "FUN_08004250"
            ],
            "code": "\nvoid print_binary_0800375c(undefined2 data)\n\n{\n  print_binary_0800375c(data,0x10);\n  return;\n}\n\n",
            "current_name": "print_binary_0800375c",
            "entrypoint": "0x0800375c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800375c": "print_binary_0800375c",
                "param_1": "data",
                "print_binary_080036f0": "print_binary"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003778": {
            "additional_data": {
                "FUN_08003778": {
                    "1": "convert_and_write_integer_to_memory",
                    "2": "convert_number_to_chars",
                    "3": "convert_and_write_to_memory",
                    "4": "write_number_to_memory",
                    "5": "print_number"
                },
                "acStack_15": {
                    "1": "char_array",
                    "2": "number_stack",
                    "3": "number_string",
                    "4": "digit_buffer",
                    "6": "digits"
                },
                "local_1c": {
                    "1": "temp_number",
                    "2": "current_number",
                    "3": "remaining_digits",
                    "5": "remaining_number",
                    "8": "remainder"
                },
                "local_9": {
                    "1": "char_index",
                    "15": "digit_count",
                    "2": "num_digits",
                    "7": "digit"
                },
                "param_1": {
                    "1": "number_to_convert",
                    "25": "number",
                    "5": "input_number"
                },
                "uVar1": {
                    "1": "temp_var",
                    "10": "index",
                    "2": "loop_index",
                    "3": "temp_var1",
                    "6": "temp"
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080037fc"
            ],
            "code": "\nvoid print_number_08003778(uint number)\n\n{\n  uint index;\n  uint remainder;\n  char digits [12];\n  byte digit_count;\n  \n  digit_count = 0;\n  remainder = number;\n  if (number == 0) {\n    write_byte_to_memory_08008250(0x30);\n  }\n  else {\n    for (; remainder != 0; remainder = remainder / 10) {\n      index = (uint)digit_count;\n      digit_count = digit_count + 1;\n      digits[index + 1] = (char)(remainder % 10) + '0';\n    }\n    for (; digit_count != 0; digit_count = digit_count - 1) {\n      write_byte_to_memory_08008250(digits[digit_count]);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "print_number_08003778",
            "entrypoint": "0x08003778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003778": "print_number_08003778",
                "acStack_15": "digits",
                "local_1c": "remainder",
                "local_9": "digit_count",
                "param_1": "number",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080037fc": {
            "additional_data": {
                "FUN_080037fc": {
                    "1": "print_number_or_negative",
                    "21": "print_absolute_value",
                    "7": "print_signed_number"
                },
                "local_c": {
                    "1": "absolute_val",
                    "24": "absolute_value",
                    "3": "abs_value"
                },
                "param_1": {
                    "15": "number",
                    "3": "num",
                    "4": "input_number",
                    "5": "value"
                }
            },
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "code": "\nvoid print_absolute_value_080037fc(int number)\n\n{\n  int absolute_value;\n  \n  absolute_value = number;\n  if (number < 0) {\n    write_byte_to_memory_08008250(0x2d);\n    absolute_value = -number;\n  }\n  print_number_08003778(absolute_value);\n  return;\n}\n\n",
            "current_name": "print_absolute_value_080037fc",
            "entrypoint": "0x080037fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "local_c": "absolute_value",
                "param_1": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003826": {
            "additional_data": {
                "DAT_20000ef9": {
                    "1": "max_digits"
                },
                "FUN_08003826": {
                    "1": "format_floating_point_number",
                    "3": "format_float_to_decimal",
                    "4": "convert_float_to_ascii",
                    "9": "convert_float_to_decimal"
                },
                "acStack_1d": {
                    "1": "output_str",
                    "11": "decimal_string",
                    "3": "output_string"
                },
                "bVar3": {
                    "1": "next_digit",
                    "16": "temp_byte",
                    "2": "digit",
                    "6": "byte_value"
                },
                "calculate_float_08008eec": {
                    "2": "calculate_float"
                },
                "calculate_floating_point_08008cdc": {
                    "2": "calculate_floating_point"
                },
                "iVar1": {
                    "1": "is_input_empty",
                    "2": "is_string_empty",
                    "21": "is_empty",
                    "5": "is_empty_string"
                },
                "is_string_empty_08009228": {
                    "1": "check_string_empty"
                },
                "local_10": {
                    "1": "quotient",
                    "12": "reversed_number",
                    "2": "reversed_decimal",
                    "5": "reversed_digits",
                    "6": "reversed_value"
                },
                "local_24": {
                    "1": "temp_number",
                    "2": "original_value",
                    "3": "modified_number",
                    "6": "float_value"
                },
                "local_9": {
                    "1": "temp_byte2",
                    "14": "loop_counter",
                    "2": "loop_index",
                    "3": "loop_count"
                },
                "local_a": {
                    "1": "digit",
                    "10": "index",
                    "4": "digit_index",
                    "5": "current_digit",
                    "6": "current_index"
                },
                "param_1": {
                    "1": "float_value",
                    "2": "input_value",
                    "4": "input_number",
                    "8": "number",
                    "9": "input_float"
                },
                "reverse_bits_08009278": {
                    "2": "reverse_bits"
                },
                "uVar2": {
                    "1": "float_result",
                    "12": "converted_float",
                    "2": "float_number",
                    "3": "converted_value",
                    "6": "float_value"
                },
                "uVar4": {
                    "1": "digit",
                    "2": "temp_var",
                    "3": "index",
                    "7": "temp_value",
                    "9": "temp_uint"
                },
                "write_byte_to_memory_08008250": {
                    "2": "write_byte_to_memory"
                }
            },
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "code": "\nvoid convert_float_to_decimal_08003826(uint input_float)\n\n{\n  int is_empty;\n  undefined4 converted_float;\n  byte temp_byte;\n  uint temp_uint;\n  uint float_value;\n  char decimal_string [13];\n  uint reversed_number;\n  byte index;\n  byte loop_counter;\n  \n  is_empty = check_string_empty(input_float,0);\n  float_value = input_float;\n  if (is_empty != 0) {\n    write_byte_to_memory(0x2d);\n    float_value = input_float ^ 0x80000000;\n  }\n  for (loop_counter = DAT_20000ef9; 1 < loop_counter; loop_counter = loop_counter - 2) {\n    float_value = calculate_float(float_value,0x42c80000);\n  }\n  if (loop_counter != 0) {\n    float_value = calculate_float(float_value,0x41200000);\n  }\n  converted_float = calculate_floating_point(float_value,0x3f000000);\n  index = 0;\n  reversed_number = reverse_bits(converted_float);\n  decimal_string[DAT_20000ef9 + 1] = '.';\n  for (; reversed_number != 0; reversed_number = reversed_number / 10) {\n    if (index == DAT_20000ef9) {\n      index = index + 1;\n    }\n    temp_uint = (uint)index;\n    index = index + 1;\n    decimal_string[temp_uint + 1] = (char)(reversed_number % 10) + '0';\n  }\n  while (index < DAT_20000ef9) {\n    temp_uint = (uint)index;\n    index = index + 1;\n    decimal_string[temp_uint + 1] = '0';\n  }\n  if (index == DAT_20000ef9) {\n    temp_byte = index + 1;\n    index = index + 2;\n    decimal_string[temp_byte + 1] = '0';\n  }\n  for (; index != 0; index = index - 1) {\n    write_byte_to_memory(decimal_string[index]);\n  }\n  return;\n}\n\n",
            "current_name": "convert_float_to_decimal_08003826",
            "entrypoint": "0x08003826",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003826": "convert_float_to_decimal_08003826",
                "acStack_1d": "decimal_string",
                "bVar3": "temp_byte",
                "calculate_float_08008eec": "calculate_float",
                "calculate_floating_point_08008cdc": "calculate_floating_point",
                "iVar1": "is_empty",
                "is_string_empty_08009228": "check_string_empty",
                "local_10": "reversed_number",
                "local_24": "float_value",
                "local_9": "loop_counter",
                "local_a": "index",
                "param_1": "input_float",
                "reverse_bits_08009278": "reverse_bits",
                "uVar2": "converted_float",
                "uVar4": "temp_uint",
                "write_byte_to_memory_08008250": "write_byte_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003980": {
            "additional_data": {
                "DAT_20000e10": {
                    "1": "counter_1",
                    "2": "counter1",
                    "3": "data_counter",
                    "4": "data_counter1",
                    "7": "counter"
                },
                "DAT_20000e11": {
                    "1": "initialized_variable2",
                    "2": "index",
                    "3": "data_flag2",
                    "4": "data_flag",
                    "8": "flag"
                },
                "FUN_08003980": {
                    "1": "initialize_counters",
                    "2": "initialize_variables",
                    "23": "initialize_data",
                    "3": "reset_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "code": "\nvoid initialize_data_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_08003980",
            "entrypoint": "0x08003980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080039a0": {
            "additional_data": {
                "FUN_080039a0": {
                    "1": "initialize_grbl",
                    "2": "initialize_and_print_version",
                    "22": "initialize_and_print_grbl_version"
                },
                "initialize_data_08003980": {
                    "1": "initialize_data_structures",
                    "26": "initialize_data"
                },
                "print_grbl_version_08004228": {
                    "28": "print_grbl_version"
                }
            },
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_and_print_grbl_version_080039a0(void)\n\n{\n  initialize_data();\n  print_grbl_version();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_and_print_grbl_version_080039a0",
            "entrypoint": "0x080039a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080039a0": "initialize_and_print_grbl_version_080039a0",
                "initialize_data_08003980": "initialize_data",
                "print_grbl_version_08004228": "print_grbl_version"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080039bc": {
            "additional_data": {
                "DAT_20000d10": {
                    "2": "data_buffer"
                },
                "FUN_080039bc": {
                    "1": "process_and_print_data",
                    "22": "process_data_loop",
                    "3": "process_data"
                },
                "check_and_process_data_08004d2c": {
                    "7": "check_and_process_data"
                },
                "iVar1": {
                    "1": "check_result",
                    "12": "data_check_result",
                    "15": "result",
                    "2": "data_processing_result"
                },
                "local_9": {
                    "1": "iteration_counter",
                    "12": "loop_counter",
                    "2": "iteration_index",
                    "3": "loop_index",
                    "4": "iteration_count"
                },
                "print_error_message_08004030": {
                    "7": "print_error_message"
                },
                "process_data_080005b4": {
                    "7": "process_data"
                },
                "uVar2": {
                    "1": "error",
                    "2": "processed_data_result",
                    "24": "error_code"
                },
                "write_string_to_memory_0800369c": {
                    "7": "write_string_to_memory"
                }
            },
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "code": "\nvoid process_data_loop_080039bc(void)\n\n{\n  int result;\n  undefined4 error_code;\n  byte loop_counter;\n  \n  for (loop_counter = 0; loop_counter < 2; loop_counter = loop_counter + 1) {\n    result = check_and_process_data(loop_counter,&DAT_20000d10);\n    if (result == 0) {\n      print_error_message(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      write_string_to_memory(&DAT_20000d10);\n      error_code = process_data(&DAT_20000d10);\n      print_error_message(error_code);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_loop_080039bc",
            "entrypoint": "0x080039bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080039bc": "process_data_loop_080039bc",
                "check_and_process_data_08004d2c": "check_and_process_data",
                "iVar1": "result",
                "local_9": "loop_counter",
                "print_error_message_08004030": "print_error_message",
                "process_data_080005b4": "process_data",
                "uVar2": "error_code",
                "write_string_to_memory_0800369c": "write_string_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a18": {
            "additional_data": {
                "DAT_20000eaa": {
                    "1": "status",
                    "14": "system_status",
                    "2": "system_state",
                    "6": "system_flags"
                },
                "FUN_08003a18": {
                    "1": "update_flags",
                    "2": "check_param",
                    "3": "update_system_status",
                    "4": "process_param",
                    "6": "update_status"
                },
                "initialize_system_080025e8": {
                    "1": "initialize_system"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_data",
                    "5": "param",
                    "7": "status"
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid update_status_08003a18(uint status)\n\n{\n  if ((status & 0x80) == 0) {\n    if ((status & 0x40) == 0) {\n      if ((status & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initialize_system();\n  }\n  return;\n}\n\n",
            "current_name": "update_status_08003a18",
            "entrypoint": "0x08003a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a18": "update_status_08003a18",
                "initialize_system_080025e8": "initialize_system",
                "param_1": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a74": {
            "additional_data": {
                "DAT_20000ea8": {
                    "1": "return_flag",
                    "2": "status_flag"
                },
                "DAT_20000ea9": {
                    "1": "error_level",
                    "2": "alarm_type",
                    "3": "alarm_code"
                },
                "DAT_20000eaa": {
                    "1": "data_byte1",
                    "2": "alarm_flags",
                    "3": "alarm_status"
                },
                "DAT_20000eaa & 0x1": {
                    "1": "alarm_code_mask4"
                },
                "DAT_20000eaa & 0x10": {
                    "1": "alarm_code_mask3"
                },
                "DAT_20000eaa & 0x2": {
                    "1": "alarm_code_mask7"
                },
                "DAT_20000eaa & 0x4": {
                    "1": "alarm_code_mask6"
                },
                "DAT_20000eaa & 0x40": {
                    "1": "alarm_code_mask2"
                },
                "DAT_20000eaa & 0x60": {
                    "1": "alarm_code_mask1"
                },
                "DAT_20000eaa & 0x8": {
                    "1": "alarm_code_mask5"
                },
                "DAT_20000eb8": {
                    "1": "data_flag",
                    "2": "flag_variable",
                    "3": "initialized_flag"
                },
                "DAT_20000ee4": {
                    "1": "system_flags"
                },
                "DAT_20000ee4 & 0x2": {
                    "1": "check_condition_flag"
                },
                "FUN_08003a74": {
                    "1": "handle_alarm_function",
                    "2": "update_system_status",
                    "3": "handle_alarm",
                    "7": "process_alarm"
                },
                "bVar1": {
                    "1": "current_alarm_state",
                    "2": "original_byte",
                    "3": "data_byte",
                    "4": "current_byte"
                },
                "display_status_message_080041a0": {
                    "19": "display_status_message"
                },
                "initialize_if_needed_0800585c": {
                    "1": "initialize_system_if_needed",
                    "18": "initialize_if_needed"
                },
                "print_alarm_message_08004148": {
                    "17": "print_alarm_message",
                    "2": "print_error_message"
                },
                "print_status_08004940": {
                    "1": "print_system_status",
                    "18": "print_status"
                },
                "update_status_0800587c": {
                    "1": "update_system_status",
                    "18": "update_status"
                },
                "update_values_080058a0": {
                    "1": "update_sensor_values",
                    "18": "update_values"
                }
            },
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid process_alarm_08003a74(void)\n\n{\n  byte current_byte;\n  \n  current_byte = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        print_alarm_message(0xffffffff);\n        display_status_message(1);\n        do {\n        } while( true );\n      }\n      print_alarm_message(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((current_byte & 0x10) == 0) {\n      if ((current_byte & 1) != 0) {\n        print_status();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((current_byte & 8) != 0) {\n        update_status();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((current_byte & 4) != 0) {\n        update_values();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((current_byte & 2) != 0) {\n        initialize_if_needed();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_alarm_08003a74",
            "entrypoint": "0x08003a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a74": "process_alarm_08003a74",
                "bVar1": "current_byte",
                "display_status_message_080041a0": "display_status_message",
                "initialize_if_needed_0800585c": "initialize_if_needed",
                "print_alarm_message_08004148": "print_alarm_message",
                "print_status_08004940": "print_status",
                "update_status_0800587c": "update_status",
                "update_values_080058a0": "update_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003b98": {
            "additional_data": {
                "DAT_20000ea8": {
                    "1": "process_config"
                },
                "DAT_20000ea9": {
                    "2": "system_status"
                },
                "DAT_20000ee4": {
                    "1": "system_config"
                },
                "FUN_08003b98": {
                    "1": "process_commands",
                    "30": "process_command"
                },
                "bVar1": {
                    "1": "byte_val",
                    "12": "first_char",
                    "3": "byte_value",
                    "9": "command_char"
                },
                "calculate_shifted_value_08008bf0": {
                    "2": "calculate_shifted_value",
                    "4": "calculate_shifted_value2"
                },
                "calculate_shifted_value_08009798": {
                    "2": "calculate_shifted_value1",
                    "4": "calculate_shifted_value"
                },
                "check_and_process_data_08004d2c": {
                    "6": "check_and_process_data"
                },
                "display_status_message_080041a0": {
                    "3": "display_status_message2"
                },
                "iVar2": {
                    "1": "error_code",
                    "16": "result",
                    "2": "status",
                    "8": "return_value"
                },
                "initialize_and_process_data_080024c4": {
                    "1": "init_and_process_data",
                    "4": "initialize_and_process_data"
                },
                "initialize_and_set_values_08004e30": {
                    "1": "init_and_set_values",
                    "5": "initialize_and_set_values"
                },
                "initialize_system_080025e8": {
                    "6": "initialize_system"
                },
                "local_10": {
                    "1": "int_value",
                    "10": "value2",
                    "2": "value",
                    "3": "first_integer",
                    "6": "first_value"
                },
                "local_14": {
                    "1": "coordinate",
                    "10": "value1",
                    "2": "config_value",
                    "3": "second_integer",
                    "8": "second_value"
                },
                "local_9": {
                    "1": "index_b",
                    "16": "flag",
                    "4": "index2"
                },
                "local_a": {
                    "1": "length",
                    "14": "index",
                    "2": "command_length",
                    "4": "start_index"
                },
                "param_1": {
                    "2": "command_string",
                    "29": "command"
                },
                "parse_integer_08002638": {
                    "6": "parse_integer"
                },
                "print_absolute_value_08004900": {
                    "6": "print_absolute_value"
                },
                "print_configuration_08004250": {
                    "6": "print_configuration"
                },
                "print_error_message_08004030": {
                    "6": "print_error_message"
                },
                "print_g92_coordinates_080044e8": {
                    "1": "print_coordinates",
                    "5": "print_g92_coordinates"
                },
                "print_grbl_commands_0800423c": {
                    "1": "print_available_commands",
                    "4": "print_grbl_commands"
                },
                "print_information_080046d0": {
                    "6": "print_information"
                },
                "process_data_080005b4": {
                    "4": "process_data"
                },
                "process_data_08004bc0": {
                    "3": "process_data2"
                },
                "process_data_loop_080039bc": {
                    "6": "process_data_loop"
                },
                "reverse_bits_08008590": {
                    "2": "reverse_bits"
                },
                "reverse_bits_08009278": {
                    "6": "reverse_bits"
                },
                "uVar3": {
                    "1": "reverse_bit",
                    "12": "reversed_value",
                    "2": "reverse_bits_result",
                    "3": "reversed_bits"
                },
                "uVar4": {
                    "1": "u_val2",
                    "15": "return_value",
                    "3": "status",
                    "4": "error_code",
                    "8": "result"
                },
                "uVar5": {
                    "1": "u_val3",
                    "30": "shifted_value"
                }
            },
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "calling": [
                "FUN_08003f34"
            ],
            "code": "\nuint process_command_08003b98(char *command)\n\n{\n  byte first_char;\n  int result;\n  undefined4 reversed_value;\n  uint return_value;\n  undefined8 shifted_value;\n  undefined4 value1;\n  undefined4 value2;\n  byte index;\n  byte flag;\n  \n  if (*command != '$') {\n    return_value = process_data(command);\n    return return_value;\n  }\n  index = 1;\n  flag = '\\0';\n  first_char = command[1];\n  if (first_char == 0) {\n    print_grbl_commands();\n    return 0;\n  }\n  if ((0x58 < first_char) || (first_char < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(first_char) {\n  case 0x23:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_g92_coordinates();\n    break;\n  case 0x24:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_configuration();\n    break;\n  case 0x43:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_system();\n      display_status_message(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      display_status_message(4);\n    }\n    break;\n  case 0x47:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_information();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initialize_and_process_data();\n    if (DAT_20000ea8 == '\\0') {\n      process_data_loop();\n    }\n    break;\n  case 0x4e:\n    index = 2;\n    if (command[2] == '\\0') {\n      for (flag = 0; flag < 2; flag = flag + 1) {\n        result = check_and_process_data(flag,command);\n        if (result == 0) {\n          print_error_message(10);\n        }\n        else {\n          print_absolute_value(flag,command);\n        }\n      }\n      return 0;\n    }\n    flag = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = parse_integer(command,&index,&value2);\n    if (result == 0) {\n      return 1;\n    }\n    first_char = index + 1;\n    if (command[index] != '=') {\n      return 3;\n    }\n    index = first_char;\n    if (flag == '\\0') {\n      result = parse_integer(command,&index,&value1);\n      if (result == 0) {\n        return 1;\n      }\n      if (command[index] == '\\0') {\n        reversed_value = reverse_bits(value2);\n        return_value = initialize_and_set_values(reversed_value,value1);\n        return return_value;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)index - (uint)first_char] = command[index];\n      return_value = (uint)index;\n      index = index + 1;\n    } while (command[return_value] != '\\0');\n    flag = first_char;\n    flag = process_data(command);\n    if (flag != 0) {\n      return (uint)flag;\n    }\n    shifted_value = reverse_bits(value2);\n    shifted_value = calculate_shifted_value((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    flag = calculate_shifted_value2((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    process_data2(flag,command);\n    break;\n  case 0x58:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      display_status_message(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_command_08003b98",
            "entrypoint": "0x08003b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003b98": "process_command_08003b98",
                "bVar1": "first_char",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value2",
                "calculate_shifted_value_08009798": "calculate_shifted_value",
                "check_and_process_data_08004d2c": "check_and_process_data",
                "display_status_message_080041a0": "display_status_message",
                "iVar2": "result",
                "initialize_and_process_data_080024c4": "initialize_and_process_data",
                "initialize_and_set_values_08004e30": "initialize_and_set_values",
                "initialize_system_080025e8": "initialize_system",
                "local_10": "value2",
                "local_14": "value1",
                "local_9": "flag",
                "local_a": "index",
                "param_1": "command",
                "parse_integer_08002638": "parse_integer",
                "print_absolute_value_08004900": "print_absolute_value",
                "print_configuration_08004250": "print_configuration",
                "print_error_message_08004030": "print_error_message",
                "print_g92_coordinates_080044e8": "print_g92_coordinates",
                "print_grbl_commands_0800423c": "print_grbl_commands",
                "print_information_080046d0": "print_information",
                "process_data_080005b4": "process_data",
                "process_data_08004bc0": "process_data2",
                "process_data_loop_080039bc": "process_data_loop",
                "reverse_bits_08008590": "reverse_bits",
                "reverse_bits_08009278": "reverse_bits",
                "uVar3": "reversed_value",
                "uVar4": "return_value",
                "uVar5": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f34": {
            "additional_data": {
                "&DAT_20000d10": {
                    "1": "input_data",
                    "2": "data_array"
                },
                "DAT_20000d10": {
                    "1": "input_data",
                    "4": "input_buffer",
                    "5": "data_buffer"
                },
                "DAT_20000e10": {
                    "1": "input_counter",
                    "2": "current_index",
                    "6": "data_index"
                },
                "DAT_20000e11": {
                    "1": "is_inside_parentheses",
                    "2": "in_parenthesis",
                    "3": "in_parentheses",
                    "9": "inside_parentheses"
                },
                "DAT_20000ea8": {
                    "1": "process_alarm_flag",
                    "2": "exit_flag",
                    "4": "alarm_triggered",
                    "5": "alarm_flag"
                },
                "FUN_08003f34": {
                    "1": "process_data",
                    "29": "process_input"
                },
                "bVar1": {
                    "1": "byte_code",
                    "10": "input_byte",
                    "3": "data",
                    "6": "data_byte",
                    "9": "byte_value"
                },
                "initialize_data_08003980": {
                    "19": "initialize_data",
                    "2": "initialize_input_data",
                    "3": "reset_data"
                },
                "print_error_message_08004030": {
                    "1": "display_error_message",
                    "19": "print_error_message",
                    "4": "print_error"
                },
                "process_alarm_08003a74": {
                    "2": "handle_alarm",
                    "22": "process_alarm"
                },
                "process_command_08003b98": {
                    "19": "process_command",
                    "3": "execute_command"
                },
                "process_data_08008286": {
                    "1": "read_byte",
                    "6": "get_input_byte",
                    "9": "get_next_byte"
                },
                "uVar2": {
                    "1": "result_code",
                    "14": "error_code",
                    "2": "command_result",
                    "3": "result",
                    "8": "return_value"
                },
                "uVar3": {
                    "2": "data_index",
                    "25": "index",
                    "3": "counter"
                }
            },
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid process_input_08003f34(void)\n\n{\n  byte input_byte;\n  undefined4 error_code;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      input_byte = get_next_byte();\n      if (input_byte == 0xff) {\n        return;\n      }\n      if ((input_byte == 10) || (input_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < input_byte) && (input_byte != 0x2f)) {\n          if (input_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            print_error_message(0xd);\n            initialize_data();\n          }\n          else if ((input_byte < 0x61) || (0x7a < input_byte)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte - 0x20;\n          }\n        }\n      }\n      else if (input_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    process_alarm();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      print_error_message(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      error_code = process_command(&DAT_20000d10);\n      print_error_message(error_code);\n    }\n    initialize_data();\n  }\n  return;\n}\n\n",
            "current_name": "process_input_08003f34",
            "entrypoint": "0x08003f34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f34": "process_input_08003f34",
                "bVar1": "input_byte",
                "initialize_data_08003980": "initialize_data",
                "print_error_message_08004030": "print_error_message",
                "process_alarm_08003a74": "process_alarm",
                "process_command_08003b98": "process_command",
                "process_data_08008286": "get_next_byte",
                "uVar2": "error_code",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004030": {
            "additional_data": {
                "&DAT_0800b5c8": {
                    "1": "empty_string"
                },
                "&DAT_0800b6d8": {
                    "1": "error_suffix"
                },
                "'\\a'": {
                    "1": "setting_disabled"
                },
                "'\\b'": {
                    "1": "value_less_than_zero"
                },
                "'\\f'": {
                    "1": "alarm_lock"
                },
                "'\\n'": {
                    "1": "eeprom_read_fail"
                },
                "'\\r'": {
                    "1": "line_overflow"
                },
                "'\\t'": {
                    "1": "value_less_than_3_usec"
                },
                "'\\v'": {
                    "1": "busy_or_queued"
                },
                "'\\x01'": {
                    "1": "bad_number_format"
                },
                "'\\x02'": {
                    "1": "expected_command_letter"
                },
                "'\\x03'": {
                    "1": "unsupported_statement"
                },
                "'\\x04'": {
                    "1": "invalid_radius"
                },
                "'\\x05'": {
                    "1": "modal_group_violation"
                },
                "'\\x06'": {
                    "1": "invalid_statement"
                },
                "DAT_0800b5c8": {
                    "1": "null_error_message"
                },
                "DAT_0800b6d8": {
                    "1": "line_end_error_message"
                },
                "FUN_08004030": {
                    "1": "handle_error_message",
                    "17": "print_error_message",
                    "4": "handle_error",
                    "8": "display_error_message"
                },
                "param_1": {
                    "1": "error_type",
                    "30": "error_code"
                },
                "write_string_to_memory_080036c6": {
                    "1": "write_to_memory"
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "code": "\nvoid print_error_message_08004030(char error_code)\n\n{\n  if (error_code == '\\0') {\n    write_to_memory(&DAT_0800b5c8);\n  }\n  else {\n    write_to_memory(\"error: \");\n    switch(error_code) {\n    case '\\x01':\n      write_to_memory(\"Bad number format\");\n      break;\n    case '\\x02':\n      write_to_memory(\"Expected command letter\");\n      break;\n    case '\\x03':\n      write_to_memory(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      write_to_memory(\"Invalid radius\");\n      break;\n    case '\\x05':\n      write_to_memory(\"Modal group violation\");\n      break;\n    case '\\x06':\n      write_to_memory(\"Invalid statement\");\n      break;\n    case '\\a':\n      write_to_memory(\"Setting disabled\");\n      break;\n    case '\\b':\n      write_to_memory(\"Value < 0.0\");\n      break;\n    case '\\t':\n      write_to_memory(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      write_to_memory(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      write_to_memory(\"Busy or queued\");\n      break;\n    case '\\f':\n      write_to_memory(\"Alarm lock\");\n      break;\n    case '\\r':\n      write_to_memory(\"Line overflow\");\n    }\n    write_to_memory(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "current_name": "print_error_message_08004030",
            "entrypoint": "0x08004030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004030": "print_error_message_08004030",
                "param_1": "error_code",
                "write_string_to_memory_080036c6": "write_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004148": {
            "additional_data": {
                "FUNC_08002814": {
                    "1": "delay"
                },
                "FUN_08004148": {
                    "1": "display_error_message",
                    "12": "display_alarm_message",
                    "14": "print_alarm_message",
                    "2": "display_alarm"
                },
                "param_1": {
                    "1": "error_type",
                    "2": "alarm_type",
                    "27": "error_code"
                },
                "write_string_to_memory_080036c6": {
                    "1": "write_to_memory"
                }
            },
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid print_alarm_message_08004148(char error_code)\n\n{\n  write_to_memory(\"ALARM: \");\n  if (error_code == -2) {\n    write_to_memory(\"Abort during cycle\");\n  }\n  else if (error_code == -1) {\n    write_to_memory(\"Hard limit\");\n  }\n  write_to_memory(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "current_name": "print_alarm_message_08004148",
            "entrypoint": "0x08004148",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004148": "print_alarm_message_08004148",
                "param_1": "error_code",
                "write_string_to_memory_080036c6": "write_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041a0": {
            "additional_data": {
                "&DAT_0800b710": {
                    "1": "header",
                    "3": "header_message"
                },
                "&DAT_0800b764": {
                    "1": "final_message",
                    "3": "footer_message"
                },
                "1": {
                    "1": "reset"
                },
                "2": {
                    "1": "unlock"
                },
                "3": {
                    "1": "caution"
                },
                "4": {
                    "1": "enabled"
                },
                "5": {
                    "1": "disabled"
                },
                "DAT_0800b710": {
                    "1": "status_message_before",
                    "3": "reset_message",
                    "4": "header_message"
                },
                "DAT_0800b764": {
                    "1": "goodbye_message",
                    "3": "end_message",
                    "4": "footer_message"
                },
                "FUN_080041a0": {
                    "1": "display_status",
                    "17": "display_status_message",
                    "5": "print_status_message",
                    "8": "display_message"
                },
                "case 1": {
                    "1": "status_reset"
                },
                "case 2": {
                    "1": "status_unlock"
                },
                "case 3": {
                    "1": "status_caution_unlocked"
                },
                "case 4": {
                    "1": "status_enabled"
                },
                "case 5": {
                    "1": "status_disabled"
                },
                "param_1": {
                    "1": "option",
                    "11": "status",
                    "9": "status_code"
                },
                "write_string_to_memory_080036c6": {
                    "1": "write_message_to_memory",
                    "2": "print_to_memory",
                    "3": "write_string_to_memory",
                    "6": "write_to_memory"
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "code": "\nvoid display_status_message_080041a0(undefined status)\n\n{\n  write_to_memory(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    write_to_memory(\"Reset to continue\");\n    break;\n  case 2:\n    write_to_memory(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    write_to_memory(\"Caution: Unlocked\");\n    break;\n  case 4:\n    write_to_memory(\"Enabled\");\n    break;\n  case 5:\n    write_to_memory(\"Disabled\");\n  }\n  write_to_memory(&DAT_0800b764);\n  return;\n}\n\n",
            "current_name": "display_status_message_080041a0",
            "entrypoint": "0x080041a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041a0": "display_status_message_080041a0",
                "param_1": "status",
                "write_string_to_memory_080036c6": "write_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004228": {
            "additional_data": {
                "FUN_08004228": {
                    "1": "initialize_grbl",
                    "2": "print_welcome_message",
                    "22": "print_grbl_version",
                    "5": "display_grbl_version"
                },
                "write_string_to_memory_080036c6": {
                    "1": "write_message",
                    "15": "write_string_to_memory",
                    "2": "print_to_memory",
                    "4": "write_message_to_memory"
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_080039a0"
            ],
            "code": "\nvoid print_grbl_version_08004228(void)\n\n{\n  write_string_to_memory(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "current_name": "print_grbl_version_08004228",
            "entrypoint": "0x08004228",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228",
                "write_string_to_memory_080036c6": "write_string_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800423c": {
            "additional_data": {
                "!": {
                    "3": "feed_hold"
                },
                "$#": {
                    "1": "view_parameter_count"
                },
                "$$": {
                    "2": "view_grbl_settings"
                },
                "$C": {
                    "4": "check_gcode_mode"
                },
                "$G": {
                    "2": "view_parser_state"
                },
                "$H": {
                    "4": "run_homing_cycle"
                },
                "$N": {
                    "2": "view_startup_blocks"
                },
                "$Nx": {
                    "2": "save_startup_block"
                },
                "$Nx=line": {
                    "3": "save_startup_block"
                },
                "$X": {
                    "1": "unlock_alarm",
                    "3": "kill_alarm_lock"
                },
                "$x": {
                    "2": "save_grbl_setting"
                },
                "$x=value": {
                    "1": "save_grbl_setting",
                    "2": "set_grbl_setting"
                },
                "<parameter_name>": {
                    "1": "<new_parameter_name>"
                },
                "<variable_name>": {
                    "1": "<new_variable_name>"
                },
                "?": {
                    "1": "get_current_status",
                    "2": "current_status"
                },
                "DAT_080036c6": {
                    "1": "command_string"
                },
                "FUN_0800423c": {
                    "1": "print_available_commands",
                    "11": "print_grbl_commands",
                    "2": "print_command_menu",
                    "3": "print_menu_options"
                },
                "PTR_FUN_08003678": {
                    "1": "view_grbl_settings"
                },
                "PTR_FUN_0800367e": {
                    "1": "view_parameters"
                },
                "PTR_FUN_08003684": {
                    "1": "view_parser_state"
                },
                "PTR_FUN_0800368a": {
                    "1": "view_startup_blocks"
                },
                "PTR_FUN_08003690": {
                    "1": "save_grbl_setting"
                },
                "PTR_FUN_08003696": {
                    "1": "save_startup_block"
                },
                "PTR_FUN_0800369c": {
                    "1": "check_gcode_mode"
                },
                "PTR_FUN_080036a2": {
                    "1": "kill_alarm_lock"
                },
                "PTR_FUN_080036a8": {
                    "1": "run_homing_cycle"
                },
                "PTR_FUN_080036ae": {
                    "1": "cycle_start"
                },
                "PTR_FUN_080036b4": {
                    "1": "feed_hold"
                },
                "PTR_FUN_080036ba": {
                    "1": "current_status"
                },
                "PTR_FUN_080036c0": {
                    "1": "reset_grbl"
                },
                "ctrl-x": {
                    "4": "reset_grbl"
                },
                "line": {
                    "1": "startup_block_number"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                },
                "original_parameter_name": {
                    "1": "new_parameter_name"
                },
                "original_variable_name": {
                    "1": "new_variable_name"
                },
                "settingValue": {
                    "1": "setting_value"
                },
                "startupBlock": {
                    "1": "startup_block"
                },
                "value": {
                    "2": "setting_value"
                },
                "write_string_to_memory_080036c6": {
                    "1": "write_text_to_memory",
                    "15": "write_string_to_memory",
                    "2": "write_menu_string_to_memory",
                    "3": "write_to_memory"
                },
                "~": {
                    "3": "cycle_start"
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid print_grbl_commands_0800423c(void)\n\n{\n  write_string_to_memory(\n              \"view_grbl_settings (view Grbl settings)\\r\\nview_parameters (view # parameters)\\r\\nview_parser_state (view parser state)\\r\\nview_startup_blocks (view startup blocks)\\r\\nset_grbl_setting (save Grbl setting)\\r\\nsave_startup_block (save startup block)\\r\\ncheck_gcode_mode (check gcode mode)\\r\\nkill_alarm_lock (kill alarm lock)\\r\\nrun_homing_cycle (run homing cycle)\\r\\ncycle_start (cycle start)\\r\\nfeed_hold (feed hold)\\r\\n? (current status)\\r\\nreset_grbl (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "current_name": "print_grbl_commands_0800423c",
            "entrypoint": "0x0800423c",
            "imported": false,
            "improved": true,
            "renaming": {
                "!": "feed_hold",
                "$#": "view_parameters",
                "$$": "view_grbl_settings",
                "$C": "check_gcode_mode",
                "$G": "view_parser_state",
                "$H": "run_homing_cycle",
                "$N": "view_startup_blocks",
                "$Nx": "save_startup_block",
                "$Nx=line": "save_startup_block",
                "$X": "kill_alarm_lock",
                "$x": "save_grbl_setting",
                "$x=value": "set_grbl_setting",
                "FUN_0800423c": "print_grbl_commands_0800423c",
                "ctrl-x": "reset_grbl",
                "line": "startup_block",
                "value": "setting_value",
                "write_string_to_memory_080036c6": "write_string_to_memory",
                "~": "cycle_start"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004250": {
            "additional_data": {
                "DAT_0800b8b8": {
                    "1": "memory_string1"
                },
                "DAT_0800bb94": {
                    "1": "memory_string2"
                },
                "DAT_20000ebc": {
                    "1": "x_step_per_mm"
                },
                "DAT_20000ec0": {
                    "1": "y_step_per_mm"
                },
                "DAT_20000ec4": {
                    "1": "z_step_per_mm"
                },
                "DAT_20000ec9": {
                    "1": "step_pulse_usec"
                },
                "DAT_20000ecc": {
                    "1": "default_feed_mm_per_min"
                },
                "DAT_20000ed0": {
                    "1": "default_seek_mm_per_min"
                },
                "DAT_20000ed4": {
                    "1": "step_port_invert_mask"
                },
                "DAT_20000ed6": {
                    "1": "dir_port_invert_mask"
                },
                "DAT_20000ed8": {
                    "1": "arc_mm_per_segment"
                },
                "DAT_20000edc": {
                    "1": "floating_point_value"
                },
                "DAT_20000ee0": {
                    "1": "junction_deviation_mm"
                },
                "DAT_20000ee4": {
                    "1": "report_auto_inches_start"
                },
                "DAT_20000ee6": {
                    "1": "homing_cycle"
                },
                "DAT_20000ee8": {
                    "1": "homing_feed_mm_per_min"
                },
                "DAT_20000eec": {
                    "1": "homing_seek_mm_per_min"
                },
                "DAT_20000ef0": {
                    "1": "homing_debounce_msec"
                },
                "DAT_20000ef4": {
                    "1": "homing_pull_off_mm"
                },
                "DAT_20000ef8": {
                    "1": "step_idle_delay_msec"
                },
                "DAT_20000ef9": {
                    "1": "n_decimals"
                },
                "DAT_20000efa": {
                    "1": "n_arc_correction"
                },
                "FUN_08004250": {
                    "1": "print_configuration_details",
                    "11": "print_configuration",
                    "2": "print_settings_information",
                    "4": "print_settings"
                },
                "calculate_floating_point_08009054": {
                    "24": "calculate_floating_point"
                },
                "convert_float_to_decimal_08003826": {
                    "1": "float_to_decimal",
                    "27": "convert_float_to_decimal"
                },
                "print_absolute_value_080037fc": {
                    "28": "print_absolute_value"
                },
                "print_binary_0800375c": {
                    "28": "print_binary"
                },
                "uVar1": {
                    "1": "acceleration_value",
                    "7": "acceleration"
                },
                "write_string_to_memory_080036c6": {
                    "1": "write_memory_string",
                    "19": "write_string_to_memory",
                    "6": "write_to_memory"
                }
            },
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "code": "\nvoid print_configuration_08004250(void)\n\n{\n  undefined4 acceleration;\n  \n  write_string_to_memory(&DAT_0800b8b8);\n  convert_float_to_decimal(DAT_20000ebc);\n  write_string_to_memory(\" (x, step/mm)\\r\\n$1=\");\n  convert_float_to_decimal(DAT_20000ec0);\n  write_string_to_memory(\" (y, step/mm)\\r\\n$2=\");\n  convert_float_to_decimal(DAT_20000ec4);\n  write_string_to_memory(\" (z, step/mm)\\r\\n$3=\");\n  print_absolute_value(DAT_20000ec9);\n  write_string_to_memory(\" (step pulse, usec)\\r\\n$4=\");\n  convert_float_to_decimal(DAT_20000ecc);\n  write_string_to_memory(\" (default feed, mm/min)\\r\\n$5=\");\n  convert_float_to_decimal(DAT_20000ed0);\n  write_string_to_memory(\" (default seek, mm/min)\\r\\n$6=\");\n  print_absolute_value(DAT_20000ed4);\n  write_string_to_memory(\" (step port invert mask, int:\");\n  print_binary(DAT_20000ed4);\n  write_string_to_memory(\")\\r\\n$7=\");\n  print_absolute_value(DAT_20000ef8);\n  write_string_to_memory(\" (step idle delay, msec)\\r\\n$8=\");\n  acceleration = calculate_floating_point(DAT_20000edc,0x45610000);\n  convert_float_to_decimal(acceleration);\n  write_string_to_memory(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  convert_float_to_decimal(DAT_20000ee0);\n  write_string_to_memory(\" (junction deviation, mm)\\r\\n$10=\");\n  convert_float_to_decimal(DAT_20000ed8);\n  write_string_to_memory(\" (arc, mm/segment)\\r\\n$11=\");\n  print_absolute_value(DAT_20000efa);\n  write_string_to_memory(\" (n-arc correction, int)\\r\\n$12=\");\n  print_absolute_value(DAT_20000ef9);\n  write_string_to_memory(\" (n-decimals, int)\\r\\n$13=\");\n  print_absolute_value((DAT_20000ee4 & 1) != 0);\n  write_string_to_memory(\" (report inches, bool)\\r\\n$14=\");\n  print_absolute_value((DAT_20000ee4 & 2) != 0);\n  write_string_to_memory(\" (auto start, bool)\\r\\n$15=\");\n  print_absolute_value((DAT_20000ee4 & 4) != 0);\n  write_string_to_memory(\" (invert step enable, bool)\\r\\n$16=\");\n  print_absolute_value((DAT_20000ee4 & 8) != 0);\n  write_string_to_memory(\" (hard limits, bool)\\r\\n$17=\");\n  print_absolute_value((DAT_20000ee4 & 0x10) != 0);\n  write_string_to_memory(\" (homing cycle, bool)\\r\\n$18=\");\n  print_absolute_value(DAT_20000ee6);\n  write_string_to_memory(\" (homing dir invert mask, int:\");\n  print_binary(DAT_20000ee6);\n  write_string_to_memory(\")\\r\\n$19=\");\n  convert_float_to_decimal(DAT_20000ee8);\n  write_string_to_memory(\" (homing feed, mm/min)\\r\\n$20=\");\n  convert_float_to_decimal(DAT_20000eec);\n  write_string_to_memory(\" (homing seek, mm/min)\\r\\n$21=\");\n  print_absolute_value(DAT_20000ef0);\n  write_string_to_memory(\" (homing debounce, msec)\\r\\n$22=\");\n  convert_float_to_decimal(DAT_20000ef4);\n  write_string_to_memory(\" (homing pull-off, mm)\\r\\n$23=\");\n  print_absolute_value(DAT_20000ed6);\n  write_string_to_memory(\" (dir port invert mask, int:\");\n  print_binary(DAT_20000ed6);\n  write_string_to_memory(&DAT_0800bb94);\n  return;\n}\n\n",
            "current_name": "print_configuration_08004250",
            "entrypoint": "0x08004250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004250": "print_configuration_08004250",
                "calculate_floating_point_08009054": "calculate_floating_point",
                "convert_float_to_decimal_08003826": "convert_float_to_decimal",
                "print_absolute_value_080037fc": "print_absolute_value",
                "print_binary_0800375c": "print_binary",
                "uVar1": "acceleration",
                "write_string_to_memory_080036c6": "write_string_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080044e8": {
            "additional_data": {
                "&DAT_0800b764": {
                    "1": "string2_pointer"
                },
                "&DAT_0800bb98": {
                    "1": "string3"
                },
                "&DAT_0800bb9c": {
                    "1": "string3_pointer"
                },
                "&DAT_0800bba0": {
                    "1": "string4_pointer"
                },
                "&DAT_0800bba4": {
                    "1": "string5_pointer"
                },
                "&DAT_0800bba8": {
                    "1": "string7"
                },
                "&DAT_0800bbac": {
                    "1": "string8"
                },
                "&DAT_0800bbb0": {
                    "1": "string8_pointer"
                },
                "&DAT_0800bbb4": {
                    "1": "string9_pointer"
                },
                "&DAT_0800bbb8": {
                    "1": "string11"
                },
                "&DAT_0800bbbc": {
                    "1": "string1_pointer"
                },
                "&DAT_20000e74": {
                    "1": "float_pointer"
                },
                "<original_function_name>": {
                    "1": "decode_and_process_data"
                },
                "DAT_0800b764": {
                    "1": "format_string2",
                    "2": "separator2"
                },
                "DAT_0800bb98": {
                    "1": "str3"
                },
                "DAT_0800bb9c": {
                    "1": "str4"
                },
                "DAT_0800bba0": {
                    "1": "error_message3"
                },
                "DAT_0800bba4": {
                    "1": "str6"
                },
                "DAT_0800bba8": {
                    "1": "error_msg5"
                },
                "DAT_0800bbac": {
                    "1": "string4"
                },
                "DAT_0800bbb0": {
                    "1": "str9"
                },
                "DAT_0800bbb4": {
                    "1": "string6"
                },
                "DAT_0800bbb8": {
                    "1": "error_message9"
                },
                "DAT_0800bbbc": {
                    "1": "str1",
                    "2": "separator1"
                },
                "DAT_20000e74": {
                    "1": "data_value",
                    "2": "data"
                },
                "DAT_20000ee4": {
                    "1": "data_validation_flag",
                    "4": "data_flag"
                },
                "FUN_080044e8": {
                    "1": "extract_and_print_data",
                    "2": "print_data",
                    "3": "convert_data_and_print",
                    "5": "print_g92_coordinates"
                },
                "auStack_18": {
                    "1": "float_array",
                    "2": "converted_values",
                    "3": "data_buffer",
                    "4": "processed_data",
                    "6": "data_array"
                },
                "calculate_float_08008c30": {
                    "8": "calculate_float"
                },
                "calculate_result_08008640": {
                    "8": "calculate_result"
                },
                "check_and_process_data_08004d7c": {
                    "5": "check_and_process_data"
                },
                "convert_float_to_decimal_08003826": {
                    "1": "convert_to_decimal",
                    "8": "convert_float_to_decimal"
                },
                "iVar1": {
                    "1": "data_result",
                    "13": "result",
                    "2": "data_check_result",
                    "3": "check_result",
                    "4": "data_processing_result"
                },
                "local_9": {
                    "1": "loop_iterator",
                    "13": "counter",
                    "2": "iteration_count",
                    "7": "iteration"
                },
                "local_a": {
                    "1": "inner_loop_counter",
                    "2": "loop_index",
                    "21": "index"
                },
                "print_error_message_08004030": {
                    "9": "print_error_message"
                },
                "reverse_bits_08008590": {
                    "8": "reverse_bits"
                },
                "uVar2": {
                    "1": "result",
                    "2": "converted_value",
                    "3": "calculated_float",
                    "4": "float_calculation_result",
                    "7": "float_result"
                },
                "uVar3": {
                    "1": "bit_reversal_result",
                    "3": "reverse_bits_result",
                    "5": "reversed_value",
                    "6": "reversed_bits"
                },
                "write_string_to_memory_080036c6": {
                    "3": "write_to_memory",
                    "6": "write_string_to_memory"
                },
                "write_string_to_memory_080036c6(\"[G92:\")": {
                    "1": "write_string_to_memory(\"[g92:\")"
                }
            },
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid print_g92_coordinates_080044e8(void)\n\n{\n  int result;\n  undefined4 float_result;\n  undefined8 reversed_bits;\n  undefined4 data_array [3];\n  byte index;\n  byte counter;\n  \n  counter = 0;\n  while( true ) {\n    if (7 < counter) {\n      write_string_to_memory(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          convert_float_to_decimal(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          reversed_bits = reverse_bits(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          reversed_bits = calculate_result((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20),0x57e16865,0x3fa42851);\n          float_result = calculate_float((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20));\n          convert_float_to_decimal(float_result);\n        }\n        if (index < 2) {\n          write_string_to_memory(&DAT_0800bbbc);\n        }\n        else {\n          write_string_to_memory(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    result = check_and_process_data(counter,data_array);\n    if (result == 0) break;\n    write_string_to_memory(&DAT_0800bb98);\n    switch(counter) {\n    case 0:\n      write_string_to_memory(&DAT_0800bb9c);\n      break;\n    case 1:\n      write_string_to_memory(&DAT_0800bba0);\n      break;\n    case 2:\n      write_string_to_memory(&DAT_0800bba4);\n      break;\n    case 3:\n      write_string_to_memory(&DAT_0800bba8);\n      break;\n    case 4:\n      write_string_to_memory(&DAT_0800bbac);\n      break;\n    case 5:\n      write_string_to_memory(&DAT_0800bbb0);\n      break;\n    case 6:\n      write_string_to_memory(&DAT_0800bbb4);\n      break;\n    case 7:\n      write_string_to_memory(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        convert_float_to_decimal(data_array[index]);\n      }\n      else {\n        reversed_bits = reverse_bits(data_array[index]);\n        reversed_bits = calculate_result((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20),0x57e16865,0x3fa42851);\n        float_result = calculate_float((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20));\n        convert_float_to_decimal(float_result);\n      }\n      if (index < 2) {\n        write_string_to_memory(&DAT_0800bbbc);\n      }\n      else {\n        write_string_to_memory(&DAT_0800b764);\n      }\n    }\n    counter = counter + 1;\n  }\n  print_error_message(10);\n  return;\n}\n\n",
            "current_name": "print_g92_coordinates_080044e8",
            "entrypoint": "0x080044e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080044e8": "print_g92_coordinates_080044e8",
                "auStack_18": "data_array",
                "calculate_float_08008c30": "calculate_float",
                "calculate_result_08008640": "calculate_result",
                "check_and_process_data_08004d7c": "check_and_process_data",
                "convert_float_to_decimal_08003826": "convert_float_to_decimal",
                "iVar1": "result",
                "local_9": "counter",
                "local_a": "index",
                "print_error_message_08004030": "print_error_message",
                "reverse_bits_08008590": "reverse_bits",
                "uVar2": "float_result",
                "uVar3": "reversed_bits",
                "write_string_to_memory_080036c6": "write_string_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046d0": {
            "additional_data": {
                "DAT_20000e71": {
                    "1": "selection",
                    "2": "switch_value"
                },
                "DAT_20000e72": {
                    "1": "condition_5"
                },
                "DAT_20000e73": {
                    "1": "condition_3"
                },
                "DAT_20000e74": {
                    "1": "condition_4"
                },
                "DAT_20000e75": {
                    "1": "flag6"
                },
                "DAT_20000e76": {
                    "1": "condition_g"
                },
                "DAT_20000e77": {
                    "1": "condition_h"
                },
                "DAT_20000e78": {
                    "1": "float_value_2",
                    "2": "float_value"
                },
                "DAT_20000e88": {
                    "1": "temp_value_2"
                },
                "DAT_20000e89": {
                    "1": "condition_1"
                },
                "DAT_20000e8a": {
                    "1": "flag2"
                },
                "DAT_20000e8c": {
                    "1": "temp_value"
                },
                "FUN_080046d0": {
                    "1": "print_data_summary",
                    "10": "print_information",
                    "2": "print_results",
                    "6": "print_info"
                },
                "calculate_float_08008c30": {
                    "17": "calculate_float"
                },
                "calculate_result_08008640": {
                    "17": "calculate_result"
                },
                "convert_float_to_decimal_08003826": {
                    "17": "convert_float_to_decimal"
                },
                "print_absolute_value_080037fc": {
                    "1": "print_abs_value",
                    "16": "print_absolute_value"
                },
                "reverse_bits_08008590": {
                    "17": "reverse_bits"
                },
                "uVar1": {
                    "1": "converted_output",
                    "12": "result",
                    "3": "converted_value"
                },
                "uVar2": {
                    "1": "temp_var",
                    "2": "temp",
                    "3": "converted_result",
                    "4": "reversed_value"
                },
                "write_string_to_memory_080036c6": {
                    "1": "write_memory_string",
                    "2": "write_string",
                    "5": "write_to_memory",
                    "9": "write_string_to_memory"
                }
            },
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid print_information_080046d0(void)\n\n{\n  undefined4 result;\n  undefined8 reversed_value;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    write_string_to_memory(&DAT_0800bbc8);\n    break;\n  case 1:\n    write_string_to_memory(&DAT_0800bbcc);\n    break;\n  case 2:\n    write_string_to_memory(&DAT_0800bbd0);\n    break;\n  case 3:\n    write_string_to_memory(&DAT_0800bbd4);\n    break;\n  case 4:\n    write_string_to_memory(&DAT_0800bbd8);\n  }\n  write_string_to_memory(&DAT_0800bbe0);\n  print_absolute_value(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      write_string_to_memory(&DAT_0800bbe4);\n    }\n    else {\n      write_string_to_memory(&DAT_0800bbec);\n    }\n  }\n  else {\n    write_string_to_memory(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    write_string_to_memory(&DAT_0800bc04);\n  }\n  else {\n    write_string_to_memory(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    write_string_to_memory(&DAT_0800bc14);\n  }\n  else {\n    write_string_to_memory(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    write_string_to_memory(&DAT_0800bc24);\n  }\n  else {\n    write_string_to_memory(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    write_string_to_memory(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      write_string_to_memory(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      write_string_to_memory(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    write_string_to_memory(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      write_string_to_memory(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      write_string_to_memory(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    write_string_to_memory(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      write_string_to_memory(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      write_string_to_memory(&DAT_0800bc48);\n    }\n  }\n  write_string_to_memory(&DAT_0800bc50);\n  print_absolute_value(DAT_20000e88);\n  write_string_to_memory(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    convert_float_to_decimal(DAT_20000e78);\n  }\n  else {\n    reversed_value = reverse_bits(DAT_20000e78);\n    reversed_value = calculate_result((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),0x57e16865,0x3fa42851);\n    result = calculate_float((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n    convert_float_to_decimal(result);\n  }\n  write_string_to_memory(&DAT_0800b764);\n  return;\n}\n\n",
            "current_name": "print_information_080046d0",
            "entrypoint": "0x080046d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046d0": "print_information_080046d0",
                "calculate_float_08008c30": "calculate_float",
                "calculate_result_08008640": "calculate_result",
                "convert_float_to_decimal_08003826": "convert_float_to_decimal",
                "print_absolute_value_080037fc": "print_absolute_value",
                "reverse_bits_08008590": "reverse_bits",
                "uVar1": "result",
                "uVar2": "reversed_value",
                "write_string_to_memory_080036c6": "write_string_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004900": {
            "additional_data": {
                "&DAT_0800b6d8": {
                    "1": "string_3"
                },
                "&DAT_0800bc58": {
                    "1": "string_1"
                },
                "&DAT_0800bc5c": {
                    "1": "string_2"
                },
                "DAT_0800b6d8": {
                    "1": "error_message_3"
                },
                "DAT_0800bc58": {
                    "1": "header_1"
                },
                "DAT_0800bc5c": {
                    "1": "string2"
                },
                "FUN_08004900": {
                    "1": "print_abs_value_and_param",
                    "2": "print_absolute_value_with_message",
                    "3": "print_abs_value",
                    "9": "print_absolute_value"
                },
                "param_1": {
                    "1": "info_param",
                    "21": "value",
                    "3": "value_1",
                    "4": "value1"
                },
                "param_2": {
                    "1": "absolute_value",
                    "2": "string_address",
                    "3": "value_2",
                    "4": "value2",
                    "6": "number",
                    "7": "address"
                },
                "print_absolute_value_080037fc": {
                    "1": "print_abs_val",
                    "3": "print_value",
                    "6": "print_absolute_value"
                },
                "write_string_to_memory_0800369c": {
                    "1": "write_str_to_mem",
                    "2": "write_string_to_memory_2"
                },
                "write_string_to_memory_080036c6": {
                    "1": "write_data_to_memory",
                    "2": "write_string_to_memory"
                }
            },
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid print_absolute_value_08004900(undefined value,undefined4 address)\n\n{\n  write_string_to_memory(&DAT_0800bc58);\n  print_absolute_value_08004900(value);\n  write_string_to_memory(&DAT_0800bc5c);\n  write_string_to_memory_2(address);\n  write_string_to_memory(&DAT_0800b6d8);\n  return;\n}\n\n",
            "current_name": "print_absolute_value_08004900",
            "entrypoint": "0x08004900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004900": "print_absolute_value_08004900",
                "param_1": "value",
                "param_2": "address",
                "print_absolute_value_080037fc": "print_absolute_value",
                "write_string_to_memory_0800369c": "write_string_to_memory_2",
                "write_string_to_memory_080036c6": "write_string_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004940": {
            "additional_data": {
                "&DAT_0800bbbc": {
                    "1": "string1"
                },
                "&DAT_0800bc70": {
                    "1": "string0"
                },
                "&DAT_0800bca8": {
                    "1": "string2"
                },
                "DAT_0800bbbc": {
                    "1": "decimal_separator",
                    "2": "string2"
                },
                "DAT_0800bc70": {
                    "1": "data4",
                    "2": "string1"
                },
                "DAT_0800bca8": {
                    "1": "end_message",
                    "2": "string3"
                },
                "DAT_20000e70": {
                    "1": "operand_a0"
                },
                "DAT_20000e70 + (local_11 + 8) * 4": {
                    "1": "operand_a"
                },
                "DAT_20000e74": {
                    "1": "data2"
                },
                "DAT_20000e74 + (local_11 + 10) * 4": {
                    "1": "operand_b"
                },
                "DAT_20000ea9": {
                    "1": "status_value",
                    "4": "status"
                },
                "DAT_20000eac": {
                    "1": "status_string2"
                },
                "DAT_20000eb0": {
                    "1": "constant2"
                },
                "DAT_20000eb4": {
                    "1": "constant3"
                },
                "DAT_20000ebc": {
                    "1": "constant4"
                },
                "DAT_20000ee4": {
                    "1": "is_reverse",
                    "7": "flag"
                },
                "DAT_20000ee4 & 1": {
                    "1": "flag_check"
                },
                "DAT_20000ee4 & 1 != 0": {
                    "1": "flag_condition"
                },
                "FUN_08004940": {
                    "1": "display_system_status",
                    "15": "print_status",
                    "2": "display_machine_status",
                    "3": "display_status",
                    "4": "print_machine_status"
                },
                "auStack_2c": {
                    "1": "status_position_array",
                    "2": "status_data",
                    "4": "values",
                    "7": "status_values",
                    "8": "status_array"
                },
                "calculate_float_08008c30": {
                    "11": "calculate_float"
                },
                "calculate_floating_point_08008cdc": {
                    "4": "calculate_floating_point",
                    "5": "calculate_floating_point2"
                },
                "calculate_floating_point_08009054": {
                    "11": "calculate_floating_point"
                },
                "calculate_result_08008640": {
                    "11": "calculate_result"
                },
                "convert_float_to_decimal_08003826": {
                    "11": "convert_float_to_decimal"
                },
                "local_11": {
                    "18": "index",
                    "2": "axis_index",
                    "5": "i"
                },
                "reverse_bits_080082d0": {
                    "4": "reverse_bits",
                    "5": "reverse_bits3"
                },
                "reverse_bits_08008590": {
                    "4": "reverse_bits",
                    "5": "reverse_bits2"
                },
                "reverse_bits_08008e44": {
                    "11": "reverse_bits"
                },
                "uVar1": {
                    "1": "result",
                    "16": "reversed_value",
                    "2": "temp_var1",
                    "3": "reversed_bits"
                },
                "uVar2": {
                    "1": "uint_val",
                    "12": "index",
                    "2": "loop_index"
                },
                "uVar3": {
                    "1": "temp_value3",
                    "2": "temp_var3",
                    "5": "floating_point_value",
                    "8": "calculated_value"
                },
                "uVar4": {
                    "1": "reversed_bits_value",
                    "2": "reversed_value2",
                    "4": "reversed_value",
                    "7": "reversed_result"
                },
                "uVar5": {
                    "1": "reversed_value3",
                    "2": "reversed_value",
                    "3": "reversed_value2",
                    "4": "result_value"
                },
                "write_string_to_memory_080036c6": {
                    "2": "write_to_memory",
                    "9": "write_string_to_memory"
                }
            },
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid print_status_08004940(void)\n\n{\n  undefined4 reversed_value;\n  uint index;\n  undefined4 calculated_value;\n  undefined8 reversed_result;\n  undefined8 result_value;\n  undefined4 status_array [6];\n  byte index;\n  \n  status_array[3] = DAT_20000eac;\n  status_array[4] = DAT_20000eb0;\n  status_array[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    write_string_to_memory(\"<Idle\");\n    break;\n  case 2:\n    write_string_to_memory(\"<Queue\");\n    break;\n  case 3:\n    write_string_to_memory(&DAT_0800bc70);\n    break;\n  case 4:\n    write_string_to_memory(\"<Hold\");\n    break;\n  case 5:\n    write_string_to_memory(\"<Home\");\n    break;\n  case 6:\n    write_string_to_memory(\"<Alarm\");\n    break;\n  case 7:\n    write_string_to_memory(\"<Check\");\n  }\n  write_string_to_memory(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    reversed_value = reverse_bits(status_array[index + 3]);\n    index = (uint)index;\n    reversed_value = calculate_floating_point(reversed_value,(&DAT_20000ebc)[index]);\n    status_array[index] = reversed_value;\n    if ((DAT_20000ee4 & 1) != 0) {\n      reversed_result = reverse_bits2(status_array[index]);\n      reversed_result = calculate_result((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)index;\n      reversed_value = calculate_float((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n      status_array[index] = reversed_value;\n    }\n    convert_float_to_decimal(status_array[index]);\n    write_string_to_memory(&DAT_0800bbbc);\n  }\n  write_string_to_memory(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      calculated_value = status_array[index];\n      reversed_value = calculate_floating_point2(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      index = (uint)index;\n      reversed_value = calculate_floating_point_08008cd8(calculated_value,reversed_value);\n      status_array[index] = reversed_value;\n    }\n    else {\n      reversed_result = reverse_bits2(status_array[index]);\n      reversed_value = calculate_floating_point2(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      result_value = reverse_bits2(reversed_value);\n      result_value = calculate_result((int)result_value,(int)((ulonglong)result_value >> 0x20),0x57e16865,0x3fa42851);\n      reversed_result = reverse_bits3((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),(int)result_value,\n                           (int)((ulonglong)result_value >> 0x20));\n      index = (uint)index;\n      reversed_value = calculate_float((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n      status_array[index] = reversed_value;\n    }\n    convert_float_to_decimal(status_array[index]);\n    if (index < 2) {\n      write_string_to_memory(&DAT_0800bbbc);\n    }\n  }\n  write_string_to_memory(&DAT_0800bca8);\n  return;\n}\n\n",
            "current_name": "print_status_08004940",
            "entrypoint": "0x08004940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004940": "print_status_08004940",
                "auStack_2c": "status_array",
                "calculate_float_08008c30": "calculate_float",
                "calculate_floating_point_08008cdc": "calculate_floating_point2",
                "calculate_floating_point_08009054": "calculate_floating_point",
                "calculate_result_08008640": "calculate_result",
                "convert_float_to_decimal_08003826": "convert_float_to_decimal",
                "local_11": "index",
                "reverse_bits_080082d0": "reverse_bits3",
                "reverse_bits_08008590": "reverse_bits2",
                "reverse_bits_08008e44": "reverse_bits",
                "uVar1": "reversed_value",
                "uVar2": "index",
                "uVar3": "calculated_value",
                "uVar4": "reversed_result",
                "uVar5": "result_value",
                "write_string_to_memory_080036c6": "write_string_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "additional_data": {
                "0x100": {
                    "1": "length",
                    "2": "data_size"
                },
                "0x101": {
                    "1": "conversion_factor",
                    "4": "multiplier"
                },
                "0x300": {
                    "1": "base_offset",
                    "4": "offset"
                },
                "FUN_08004bc0": {
                    "1": "process_and_convert_data",
                    "21": "process_data",
                    "3": "process_byte_data",
                    "5": "process_and_store_data"
                },
                "param_1": {
                    "1": "byte_data",
                    "19": "input_byte",
                    "2": "byte_value",
                    "3": "data_byte",
                    "4": "data"
                },
                "param_1 * 0x101 + 0x300": {
                    "2": "calculated_address"
                },
                "param_2": {
                    "1": "parameter_value",
                    "2": "data_address",
                    "3": "param",
                    "4": "input_data",
                    "9": "input_value"
                },
                "process_data_08000374": {
                    "1": "process_data_at_address",
                    "2": "process_data_helper",
                    "9": "process_data"
                },
                "ushort": {
                    "1": "data_offset",
                    "2": "unsigned_short"
                }
            },
            "called": [
                "FUN_08000374"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "code": "\nvoid process_data_08004bc0(byte input_byte,undefined4 input_value)\n\n{\n  process_data_08004bc0((unsigned_short)input_byte * 0x101 + 0x300,input_value,0x100);\n  return;\n}\n\n",
            "current_name": "process_data_08004bc0",
            "entrypoint": "0x08004bc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bc0": "process_data_08004bc0",
                "param_1": "input_byte",
                "param_2": "input_value",
                "process_data_08000374": "process_data",
                "ushort": "unsigned_short"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "additional_data": {
                "0x200": {
                    "1": "512",
                    "4": "offset"
                },
                "0xc": {
                    "1": "additional_param",
                    "5": "length"
                },
                "0xd": {
                    "1": "13",
                    "7": "multiplier"
                },
                "DAT_": {
                    "1": "unchanged_variable"
                },
                "FUN_08004bf4": {
                    "1": "process_and_process_data",
                    "2": "process_and_send_data",
                    "21": "process_data"
                },
                "PTR_": {
                    "1": "unchanged_variable"
                },
                "param_1": {
                    "1": "input_param",
                    "26": "input_byte"
                },
                "param_2": {
                    "1": "param",
                    "15": "input_value",
                    "2": "data_address",
                    "5": "input_data"
                },
                "process_data_08000374": {
                    "1": "process_input_data",
                    "7": "process_data"
                },
                "ushort": {
                    "1": "param_1_as_ushort",
                    "2": "short_value",
                    "7": "unsigned_short"
                }
            },
            "called": [
                "FUN_08000374"
            ],
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "code": "\nvoid process_data_08004bf4(byte input_byte,undefined4 input_value)\n\n{\n  process_data_08004bf4((unsigned_short)input_byte * 0xd + 0x200,input_value,0xc);\n  return;\n}\n\n",
            "current_name": "process_data_08004bf4",
            "entrypoint": "0x08004bf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bf4": "process_data_08004bf4",
                "param_1": "input_byte",
                "param_2": "input_value",
                "process_data_08000374": "process_data",
                "ushort": "unsigned_short"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "additional_data": {
                "DAT_20000ebc": {
                    "1": "data_buffer"
                },
                "FUN_08004c2a": {
                    "1": "initialize_and_process_data",
                    "12": "initialize_data_processing",
                    "16": "initialize_data"
                },
                "process_data_08000374": {
                    "1": "process_application_data",
                    "30": "process_data"
                },
                "store_data_08000340": {
                    "1": "set_initial_values",
                    "2": "store_initial_values",
                    "24": "store_data",
                    "4": "store_initial_data"
                }
            },
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "code": "\nvoid initialize_data_08004c2a(void)\n\n{\n  store_data(0,5);\n  process_data(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "current_name": "initialize_data_08004c2a",
            "entrypoint": "0x08004c2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c2a": "initialize_data_08004c2a",
                "process_data_08000374": "process_data",
                "store_data_08000340": "store_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c48": {
            "additional_data": {
                "DAT_20000ebc": {
                    "1": "first_constant",
                    "2": "constant_value_1",
                    "5": "constant_1"
                },
                "DAT_20000ec0": {
                    "1": "second_constant",
                    "2": "constant2",
                    "5": "constant_2"
                },
                "DAT_20000ec4": {
                    "1": "color_setting_3",
                    "2": "constant3",
                    "5": "constant_3"
                },
                "DAT_20000ec9": {
                    "1": "num_value",
                    "2": "constant4",
                    "3": "constant_4"
                },
                "DAT_20000ecc": {
                    "1": "constant_4",
                    "2": "constant_value_5",
                    "3": "constant_5"
                },
                "DAT_20000ed0": {
                    "1": "float_value_2",
                    "2": "constant_value_6",
                    "3": "constant_6"
                },
                "DAT_20000ed4": {
                    "1": "constant_value_9",
                    "2": "constant9",
                    "3": "constant_9"
                },
                "DAT_20000ed6": {
                    "1": "ninth_constant",
                    "2": "constant10",
                    "3": "variable_2"
                },
                "DAT_20000ed8": {
                    "1": "floating_value4",
                    "2": "constant8",
                    "3": "constant_8"
                },
                "DAT_20000edc": {
                    "1": "constant_6",
                    "2": "constant7",
                    "3": "constant_7"
                },
                "DAT_20000ee0": {
                    "1": "constant_value_10",
                    "2": "constant11",
                    "3": "variable_3"
                },
                "DAT_20000ee4": {
                    "1": "constant_l",
                    "2": "constant12",
                    "3": "constant_12"
                },
                "DAT_20000ee6": {
                    "1": "constant2",
                    "2": "constant_2",
                    "3": "variable_4"
                },
                "DAT_20000ee8": {
                    "1": "threshold_setting",
                    "2": "constant_value_3",
                    "3": "constant_14"
                },
                "DAT_20000eec": {
                    "1": "constant_value13",
                    "2": "constant_value_4"
                },
                "DAT_20000ef0": {
                    "1": "constant_6",
                    "2": "constant_16"
                },
                "DAT_20000ef4": {
                    "1": "constant_6",
                    "2": "constant_17"
                },
                "DAT_20000ef8": {
                    "1": "constant_4",
                    "2": "constant_value_7"
                },
                "DAT_20000ef9": {
                    "1": "constant8",
                    "2": "constant_19"
                },
                "DAT_20000efa": {
                    "1": "constant_6",
                    "2": "constant_20"
                },
                "FUN_08004c48": {
                    "1": "initialize_function",
                    "25": "initialize_data"
                },
                "initialize_data_08004c2a": {
                    "1": "initialize_data_internal",
                    "3": "initialize_data",
                    "5": "initialize_data_helper"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param",
                    "3": "input_char",
                    "6": "input_param",
                    "7": "input_flag"
                }
            },
            "called": [
                "FUN_08004c2a"
            ],
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "code": "\nvoid initialize_data_08004c48(char input_flag)\n\n{\n  if (input_flag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_data_08004c48_helper();\n  return;\n}\n\n",
            "current_name": "initialize_data_08004c48",
            "entrypoint": "0x08004c48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c48": "initialize_data_08004c48",
                "initialize_data_08004c2a": "initialize_data_helper",
                "param_1": "input_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "additional_data": {
                "FUN_08004d2c": {
                    "1": "check_and_process_memory",
                    "18": "check_and_process_data",
                    "8": "validate_and_process_data"
                },
                "check_memory_values_080003ec": {
                    "3": "check_memory_values"
                },
                "iVar1": {
                    "1": "validation_result",
                    "14": "result",
                    "2": "memory_check_result",
                    "7": "check_result"
                },
                "param_1": {
                    "1": "byte",
                    "19": "byte_value",
                    "7": "input_byte"
                },
                "param_2": {
                    "1": "memory_array",
                    "2": "output_buffer",
                    "7": "data_ptr",
                    "9": "data_buffer"
                },
                "process_data_08004bc0": {
                    "3": "process_data"
                }
            },
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "code": "\nbool check_and_process_data_08004d2c(byte byte_value,undefined *data_buffer)\n\n{\n  int result;\n  \n  result = check_memory_values(data_buffer,(ushort)byte_value * 0x101 + 0x300,0x100);\n  if (result == 0) {\n    *data_buffer = 0;\n    process_data(byte_value,data_buffer);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "check_and_process_data_08004d2c",
            "entrypoint": "0x08004d2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d2c": "check_and_process_data_08004d2c",
                "check_memory_values_080003ec": "check_memory_values",
                "iVar1": "result",
                "param_1": "byte_value",
                "param_2": "data_buffer",
                "process_data_08004bc0": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "additional_data": {
                "FUN_08004d7c": {
                    "1": "check_and_fill_memory",
                    "17": "check_and_process_data",
                    "2": "verify_and_process_data",
                    "3": "validate_and_process_data",
                    "5": "check_and_process_memory"
                },
                "iVar1": {
                    "17": "result",
                    "5": "memory_check_result",
                    "8": "check_result"
                },
                "param_1": {
                    "1": "byte_val",
                    "16": "byte_value",
                    "3": "byte_param",
                    "9": "input_byte"
                },
                "param_2": {
                    "1": "param_2",
                    "11": "memory_address",
                    "2": "ptr_data",
                    "4": "memory_ptr"
                }
            },
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "code": "\nbool check_and_process_data_08004d7c(byte byte_value,undefined4 memory_address)\n\n{\n  int result;\n  \n  result = check_memory_values_080003ec(memory_address,(ushort)byte_value * 0xd + 0x200,0xc);\n  if (result == 0) {\n    fill_memory_0800b430(memory_address,0,0xc);\n    process_data_08004bf4(byte_value,memory_address);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "check_and_process_data_08004d7c",
            "entrypoint": "0x08004d7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d7c": "check_and_process_data_08004d7c",
                "iVar1": "result",
                "param_1": "byte_value",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "additional_data": {
                "FUN_08004dd2": {
                    "1": "check_memory_validity",
                    "11": "check_memory_and_initialize",
                    "4": "check_and_initialize_data",
                    "8": "check_memory_and_initialize_data"
                },
                "bVar1": {
                    "1": "memory_value_1",
                    "29": "memory_value"
                },
                "check_memory_values_080003ec": {
                    "2": "check_memory_values"
                },
                "get_memory_value_08000310": {
                    "1": "get_initial_memory_value"
                },
                "iVar2": {
                    "1": "memory_check_result",
                    "22": "result",
                    "7": "check_result"
                },
                "initialize_data_08004c48": {
                    "2": "initialize_data"
                }
            },
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "calling": [
                "FUN_080051b4"
            ],
            "code": "\nundefined4 check_memory_and_initialize_08004dd2(void)\n\n{\n  byte memory_value;\n  int result;\n  \n  memory_value = get_memory_value(0);\n  if (memory_value == 5) {\n    result = check_memory_values(&DAT_20000ebc,1,0x40);\n    if (result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < memory_value) {\n      return 0;\n    }\n    result = check_memory_values(&DAT_20000ebc,1,0x28);\n    if (result == 0) {\n      return 0;\n    }\n    initialize_data(0);\n  }\n  return 1;\n}\n\n",
            "current_name": "check_memory_and_initialize_08004dd2",
            "entrypoint": "0x08004dd2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004dd2": "check_memory_and_initialize_08004dd2",
                "bVar1": "memory_value",
                "check_memory_values_080003ec": "check_memory_values",
                "get_memory_value_08000310": "get_memory_value",
                "iVar2": "result",
                "initialize_data_08004c48": "initialize_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e30": {
            "additional_data": {
                "DAT_20000ebc": {
                    "1": "concatenation_results"
                },
                "DAT_20000ec9": {
                    "2": "shifted_value_1"
                },
                "DAT_20000ecc": {
                    "1": "parameter_4"
                },
                "DAT_20000ed0": {
                    "1": "parameter_5"
                },
                "DAT_20000ed4": {
                    "2": "shifted_value_2"
                },
                "DAT_20000ed6": {
                    "2": "shifted_value_8"
                },
                "DAT_20000ed8": {
                    "1": "value_3"
                },
                "DAT_20000edc": {
                    "1": "float_value_1"
                },
                "DAT_20000ee0": {
                    "1": "masked_parameter"
                },
                "DAT_20000ee4": {
                    "2": "flag"
                },
                "DAT_20000ee6": {
                    "2": "shifted_value_6"
                },
                "DAT_20000ee8": {
                    "1": "parameter_19"
                },
                "DAT_20000eec": {
                    "1": "parameter_20"
                },
                "DAT_20000ef0": {
                    "2": "shifted_value_7"
                },
                "DAT_20000ef4": {
                    "1": "value_4"
                },
                "DAT_20000ef8": {
                    "2": "shifted_value_3"
                },
                "DAT_20000ef9": {
                    "2": "shifted_value_5"
                },
                "DAT_20000efa": {
                    "2": "shifted_value_4"
                },
                "FUN_08004e30": {
                    "1": "update_data",
                    "2": "update_configuration",
                    "3": "initialize_and_update_data",
                    "6": "initialize_data",
                    "8": "initialize_and_set_values"
                },
                "calculate_float_08008eec": {
                    "1": "calculate_float_value",
                    "5": "calculate_float"
                },
                "calculate_shifted_value_08008bf0": {
                    "6": "calculate_shifted_value"
                },
                "calculate_shifted_value_08009798": {
                    "1": "calculate_shifted_value_v2",
                    "2": "calculate_shifted_value_2"
                },
                "check_concatenation_result_08009214": {
                    "1": "check_concatenation_result",
                    "3": "check_concatenation_result_2"
                },
                "check_concatenation_result_0800923c": {
                    "6": "check_concatenation_result"
                },
                "convert_to_double_08009654": {
                    "6": "convert_to_double"
                },
                "iVar2": {
                    "1": "check",
                    "17": "result",
                    "2": "concatenation_result",
                    "5": "check_result"
                },
                "initialize_data_08004c2a": {
                    "5": "initialize_data"
                },
                "is_string_empty_08009228": {
                    "6": "is_string_empty"
                },
                "param_1": {
                    "1": "command",
                    "2": "operation_code",
                    "3": "operation_type",
                    "7": "option"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "config_value",
                    "20": "value",
                    "7": "input_value"
                },
                "return_8": {
                    "1": "concatenation_error"
                },
                "reverse_bits_08008590": {
                    "6": "reverse_bits"
                },
                "set_flag_based_on_condition_0800192c": {
                    "5": "set_flag_based_on_condition"
                },
                "uVar1": {
                    "1": "float_conversion_result",
                    "12": "float_result",
                    "5": "float_value",
                    "7": "result"
                },
                "uVar3": {
                    "1": "transformed_value",
                    "19": "converted_value",
                    "4": "reversed_value"
                }
            },
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nundefined4 initialize_and_set_values_08004e30(int option,uint value)\n\n{\n  undefined4 float_result;\n  int result;\n  undefined8 converted_value;\n  \n  switch(option) {\n  case 0:\n  case 1:\n  case 2:\n    result = check_concatenation_result(value,0);\n    if (result != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[option] = value;\n    break;\n  case 3:\n    result = is_string_empty(value,0x40400000);\n    if (result != 0) {\n      return 9;\n    }\n    converted_value = reverse_bits(value);\n    converted_value = convert_to_double((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ec9 = calculate_shifted_value((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = value;\n    break;\n  case 5:\n    DAT_20000ed0 = value;\n    break;\n  case 6:\n    converted_value = reverse_bits(value);\n    converted_value = calculate_shifted_value_2((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ed4 = calculate_shifted_value((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 7:\n    converted_value = reverse_bits(value);\n    converted_value = convert_to_double((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef8 = calculate_shifted_value((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 8:\n    float_result = calculate_float(value,0x42700000);\n    DAT_20000edc = calculate_float(float_result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = value;\n    break;\n  case 0xb:\n    converted_value = reverse_bits(value);\n    converted_value = convert_to_double((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000efa = calculate_shifted_value((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0xc:\n    converted_value = reverse_bits(value);\n    converted_value = convert_to_double((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef9 = calculate_shifted_value((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0xd:\n    result = check_concatenation_result_2(value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    result = check_concatenation_result_2(value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    result = check_concatenation_result_2(value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    result = check_concatenation_result_2(value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    set_flag_based_on_condition();\n    break;\n  case 0x11:\n    result = check_concatenation_result_2(value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    converted_value = reverse_bits(value);\n    converted_value = calculate_shifted_value_2((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ee6 = calculate_shifted_value((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = value;\n    break;\n  case 0x14:\n    DAT_20000eec = value;\n    break;\n  case 0x15:\n    converted_value = reverse_bits(value);\n    converted_value = convert_to_double((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef0 = calculate_shifted_value((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = value;\n    break;\n  case 0x17:\n    converted_value = reverse_bits(value);\n    converted_value = calculate_shifted_value_2((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ed6 = calculate_shifted_value((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_data();\n  return 0;\n}\n\n",
            "current_name": "initialize_and_set_values_08004e30",
            "entrypoint": "0x08004e30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e30": "initialize_and_set_values_08004e30",
                "calculate_float_08008eec": "calculate_float",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "calculate_shifted_value_08009798": "calculate_shifted_value_2",
                "check_concatenation_result_08009214": "check_concatenation_result_2",
                "check_concatenation_result_0800923c": "check_concatenation_result",
                "convert_to_double_08009654": "convert_to_double",
                "iVar2": "result",
                "initialize_data_08004c2a": "initialize_data",
                "is_string_empty_08009228": "is_string_empty",
                "param_1": "option",
                "param_2": "value",
                "reverse_bits_08008590": "reverse_bits",
                "set_flag_based_on_condition_0800192c": "set_flag_based_on_condition",
                "uVar1": "float_result",
                "uVar3": "converted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080051b4": {
            "additional_data": {
                "FUN_080051b4": {
                    "1": "process_and_print_data",
                    "18": "initialize_and_process_data",
                    "4": "check_and_process_data",
                    "7": "process_data"
                },
                "auStack_18": {
                    "1": "processed_data",
                    "10": "data_buffer",
                    "2": "temporary_buffer",
                    "3": "buffer"
                },
                "iVar1": {
                    "4": "memory_check_result",
                    "8": "result"
                },
                "local_9": {
                    "1": "current_iteration",
                    "17": "index",
                    "2": "iteration_index",
                    "7": "counter"
                }
            },
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_and_process_data_080051b4(void)\n\n{\n  int result;\n  undefined data_buffer [15];\n  byte index;\n  \n  result = check_memory_and_initialize_08004dd2();\n  if (result == 0) {\n    print_error_message_08004030(10);\n    initialize_data_08004c48(1);\n    print_configuration_08004250();\n  }\n  for (index = 0; index < 8; index = index + 1) {\n    result = check_and_process_data_08004d7c(index,data_buffer);\n    if (result == 0) {\n      print_error_message_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_process_data_080051b4",
            "entrypoint": "0x080051b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080051b4": "initialize_and_process_data_080051b4",
                "auStack_18": "data_buffer",
                "iVar1": "result",
                "local_9": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005208": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005208",
            "entrypoint": "0x08005208",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005214": {
            "called": [],
            "calling": [
                "FUN_08005250"
            ],
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005214",
            "entrypoint": "0x08005214",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005220": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005220",
            "entrypoint": "0x08005220",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800522c": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800522c",
            "entrypoint": "0x0800522c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005238": {
            "additional_data": {
                "DAT_20000e12": {
                    "1": "initialized_flag"
                },
                "FUN_08005238": {
                    "1": "initialize_function",
                    "11": "initialize_execution",
                    "5": "initialize_data",
                    "6": "initialize_program"
                },
                "execute_initialization_08005250": {
                    "1": "initialize_execution",
                    "2": "perform_initialization",
                    "24": "execute_initialization"
                }
            },
            "called": [
                "FUN_08005250"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_execution_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  execute_initialization();\n  return;\n}\n\n",
            "current_name": "initialize_execution_08005238",
            "entrypoint": "0x08005238",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005238": "initialize_execution_08005238",
                "execute_initialization_08005250": "execute_initialization"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005250": {
            "additional_data": {
                "FUNC_08005214": {
                    "1": "initialize_resources",
                    "2": "run_initialization",
                    "6": "initialize_system",
                    "8": "perform_initialization"
                },
                "FUN_08005250": {
                    "1": "perform_initialization",
                    "10": "execute_initialization",
                    "2": "initialize_system",
                    "4": "initialize_program",
                    "5": "initialize"
                }
            },
            "called": [
                "FUN_08005214"
            ],
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "code": "\nvoid execute_initialization_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "current_name": "execute_initialization_08005250",
            "entrypoint": "0x08005250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005250": "execute_initialization_08005250"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800525c": {
            "additional_data": {
                "DAT_20000e12": {
                    "1": "current_value",
                    "2": "saved_value"
                },
                "FUNC_08005208": {
                    "1": "finalize_update",
                    "2": "perform_additional_tasks",
                    "3": "cleanup",
                    "5": "final_processing",
                    "6": "finalize_processing"
                },
                "FUNC_08005220": {
                    "1": "process_input_greater_than_zero",
                    "3": "handle_positive_input",
                    "6": "handle_valid_input"
                },
                "FUNC_0800522c": {
                    "1": "handle_input_zero",
                    "2": "handle_error",
                    "3": "handle_negative_input",
                    "6": "handle_invalid_input"
                },
                "FUN_0800525c": {
                    "1": "handle_byte_param",
                    "2": "process_byte",
                    "4": "process_and_execute",
                    "5": "process_and_update_data",
                    "8": "process_data"
                },
                "execute_initialization_08005250": {
                    "1": "init_execution",
                    "10": "execute_initialization",
                    "6": "initialize"
                },
                "param_1": {
                    "1": "byte_param",
                    "15": "input_byte",
                    "3": "input_param"
                },
                "process_data_08002fd4": {
                    "21": "process_data"
                }
            },
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid process_data_0800525c(byte input_byte)\n\n{\n  if ((int)(char)input_byte != (uint)DAT_20000e12) {\n    process_data_0800525c();\n    if (input_byte == 0) {\n      execute_initialization();\n      DAT_20000e12 = input_byte;\n    }\n    else {\n      if ((char)input_byte < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = input_byte;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0800525c",
            "entrypoint": "0x0800525c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800525c": "process_data_0800525c",
                "execute_initialization_08005250": "execute_initialization",
                "param_1": "input_byte",
                "process_data_08002fd4": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052ac": {
            "additional_data": {
                "0xfffffaaf": {
                    "1": "bitmask",
                    "2": "mask"
                },
                "FUN_080052ac": {
                    "1": "update_data_in_memory",
                    "10": "update_data",
                    "2": "update_flags"
                },
                "_DAT_40021014": {
                    "1": "flag_value",
                    "2": "memory_value",
                    "3": "register_value",
                    "5": "existing_data"
                },
                "_DAT_40021014&0xfffffaaf": {
                    "1": "masked_value"
                },
                "param_1": {
                    "1": "new_bitmask",
                    "10": "new_value",
                    "2": "value",
                    "6": "new_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "code": "\n\n\nvoid update_data_080052ac(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "current_name": "update_data_080052ac",
            "entrypoint": "0x080052ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052ac": "update_data_080052ac",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052dc": {
            "additional_data": {
                "0xfffff55f": {
                    "1": "bit_mask"
                },
                "FUN_080052dc": {
                    "1": "update_memory_address",
                    "2": "set_bits_in_register",
                    "3": "update_register_value",
                    "6": "update_data"
                },
                "_DAT_40021014": {
                    "1": "flags",
                    "2": "memory_address",
                    "3": "existing_data",
                    "4": "register_value"
                },
                "_DAT_40021014 & 0xfffff55f": {
                    "2": "masked_data"
                },
                "param_1": {
                    "1": "new_data",
                    "13": "new_value",
                    "2": "value",
                    "3": "input",
                    "4": "input_value"
                },
                "param_2": {
                    "1": "original_register_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\n\n\nvoid update_data_080052dc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "current_name": "update_data_080052dc",
            "entrypoint": "0x080052dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052dc": "update_data_080052dc",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800530c": {
            "called": [],
            "calling": [
                "FUN_080057e4"
            ],
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800530c",
            "entrypoint": "0x0800530c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005318": {
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005318",
            "entrypoint": "0x08005318",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005324": {
            "additional_data": {
                "FUN_08005324": {
                    "1": "calculate_inverse",
                    "13": "calculate_and_update_min_value",
                    "2": "calculate_update_time",
                    "4": "calculate_min_value"
                },
                "local_14": {
                    "1": "minimum_number",
                    "15": "adjusted_value",
                    "2": "updated_value",
                    "6": "clamped_value"
                },
                "param_1": {
                    "1": "input_size",
                    "28": "input_value"
                }
            },
            "called": [
                "FUN_08007bf0"
            ],
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "code": "\nvoid calculate_and_update_min_value_08005324(uint input_value)\n\n{\n  uint adjusted_value;\n  \n  adjusted_value = input_value;\n  if (input_value < 800) {\n    adjusted_value = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjusted_value;\n  update_min_value_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "current_name": "calculate_and_update_min_value_08005324",
            "entrypoint": "0x08005324",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005324": "calculate_and_update_min_value_08005324",
                "local_14": "adjusted_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005360": {
            "additional_data": {
                "DAT_20000e28": {
                    "1": "previous_total",
                    "2": "base_value",
                    "9": "initial_value"
                },
                "DAT_20000e2c": {
                    "1": "sum",
                    "2": "accumulator",
                    "6": "current_value"
                },
                "FUN_08005360": {
                    "1": "adjust_data",
                    "2": "accumulate_and_check_overflow",
                    "3": "calculate_excess",
                    "4": "check_if_threshold_exceeded"
                },
                "bVar1": {
                    "1": "is_accumulation_exceeding_limit",
                    "10": "is_threshold_exceeded",
                    "2": "is_exceeded",
                    "3": "exceeded_threshold",
                    "5": "is_overflow"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\nbool check_if_threshold_exceeded_08005360(void)\n\n{\n  bool is_threshold_exceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  is_threshold_exceeded = 420000 < DAT_20000e2c;\n  if (is_threshold_exceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return is_threshold_exceeded;\n}\n\n",
            "current_name": "check_if_threshold_exceeded_08005360",
            "entrypoint": "0x08005360",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005360": "check_if_threshold_exceeded_08005360",
                "bVar1": "is_threshold_exceeded"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053a0": {
            "additional_data": {
                "DAT_20000e14": {
                    "1": "data5",
                    "3": "value1"
                },
                "DAT_20000e18": {
                    "1": "value4",
                    "2": "value3"
                },
                "DAT_20000e1c": {
                    "1": "value5",
                    "2": "value4"
                },
                "DAT_20000e20": {
                    "1": "value5",
                    "3": "value2"
                },
                "DAT_20000e24": {
                    "1": "value6",
                    "3": "counter"
                },
                "DAT_20000e2c": {
                    "1": "value2"
                },
                "DAT_20000e30": {
                    "1": "data4",
                    "3": "min_value"
                },
                "DAT_20000e34": {
                    "1": "constant2"
                },
                "DAT_20000e36": {
                    "1": "value7"
                },
                "DAT_20000e38": {
                    "1": "data_ptr",
                    "4": "data_pointer"
                },
                "DAT_20000e3a": {
                    "1": "value8"
                },
                "DAT_20000e3c": {
                    "1": "updated_data3"
                },
                "DAT_20000e3e": {
                    "1": "new_data",
                    "2": "data1"
                },
                "DAT_20000e40": {
                    "1": "data_value2",
                    "3": "data2"
                },
                "DAT_20000ea9": {
                    "1": "flag2"
                },
                "DAT_20000eaa": {
                    "1": "flags",
                    "2": "flags1"
                },
                "DAT_20000eac": {
                    "1": "counter2",
                    "2": "flags2"
                },
                "DAT_20000eb0": {
                    "1": "counter2",
                    "2": "flags3"
                },
                "DAT_20000eb4": {
                    "1": "counter3",
                    "2": "flags4"
                },
                "DAT_20000ed4": {
                    "1": "random_data1"
                },
                "DAT_20000ed6": {
                    "1": "xor2"
                },
                "FUN_080053a0": {
                    "1": "calculate_and_update_threshold",
                    "20": "update_data",
                    "3": "update_and_calculate_min_value",
                    "4": "update_and_calculate_values"
                },
                "calculate_and_update_min_value_08005324": {
                    "1": "calculate_update_min_value",
                    "27": "calculate_and_update_min_value"
                },
                "char": {
                    "1": "char_val"
                },
                "check_if_threshold_exceeded_08005360": {
                    "1": "check_threshold_exceeded_function",
                    "19": "check_if_threshold_exceeded",
                    "8": "check_threshold_exceeded"
                },
                "get_data_pointer_08002f74": {
                    "1": "get_data_pointer_function",
                    "27": "get_data_pointer"
                },
                "iVar1": {
                    "1": "comparison_result",
                    "14": "result",
                    "3": "check_result",
                    "4": "threshold_exceeded"
                },
                "initialize_flags_080057e4": {
                    "1": "initialize_flags_function",
                    "27": "initialize_flags"
                },
                "uint": {
                    "1": "uint_val"
                },
                "update_data_080052dc": {
                    "10": "update_data",
                    "13": "update_data_pointer"
                },
                "update_if_not_equal_08002f40": {
                    "1": "update_if_not_equal_function",
                    "21": "update_if_not_equal"
                },
                "ushort": {
                    "1": "ushort_ptr"
                }
            },
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid update_data_080053a0(void)\n\n{\n  int result;\n  \n  update_data_080053a0_pointer(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort_ptr *)0x0) {\n    DAT_20000e38 = (ushort_ptr *)get_data_pointer();\n    if (DAT_20000e38 == (ushort_ptr *)0x0) {\n      initialize_flags();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint_val *)(DAT_20000e38 + 0x14);\n        calculate_and_update_min_value(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort_ptr *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint_val *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        result = check_if_threshold_exceeded();\n        if (result != 0) {\n          if (*(uint_val *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculate_and_update_min_value(DAT_20000e30);\n          }\n          else {\n            initialize_flags();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint_val *)(DAT_20000e38 + 0x1a)) {\n        result = check_if_threshold_exceeded();\n        if (result != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint_val *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint_val *)(DAT_20000e38 + 0x1e);\n          }\n          calculate_and_update_min_value(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint_val *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint_val *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint_val *)(DAT_20000e38 + 0x1e);\n          calculate_and_update_min_value(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint_val *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint_val *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        result = check_if_threshold_exceeded();\n        if (result != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint_val *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint_val *)(DAT_20000e38 + 0x16);\n          }\n          calculate_and_update_min_value(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort_ptr *)0x0;\n      update_if_not_equal();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "current_name": "update_data_080053a0",
            "entrypoint": "0x080053a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053a0": "update_data_080053a0",
                "calculate_and_update_min_value_08005324": "calculate_and_update_min_value",
                "check_if_threshold_exceeded_08005360": "check_if_threshold_exceeded",
                "get_data_pointer_08002f74": "get_data_pointer",
                "iVar1": "result",
                "initialize_flags_080057e4": "initialize_flags",
                "uint": "uint_val",
                "update_data_080052dc": "update_data_pointer",
                "update_if_not_equal_08002f40": "update_if_not_equal",
                "ushort": "ushort_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005760": {
            "additional_data": {
                "DAT_20000ed4": {
                    "1": "data_to_update",
                    "20": "data",
                    "4": "data_buffer"
                },
                "FUN_08005760": {
                    "1": "update_data_from_binary",
                    "23": "update_data",
                    "4": "initialize_data"
                },
                "update_data_080052ac": {
                    "1": "update_data_helper",
                    "2": "update_data"
                }
            },
            "called": [
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid update_data_08005760(void)\n\n{\n  update_data_08005760(DAT_20000ed4);\n  return;\n}\n\n",
            "current_name": "update_data_08005760",
            "entrypoint": "0x08005760",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005760": "update_data_08005760",
                "update_data_080052ac": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005778": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize_data"
                },
                "<original_variable_name_1>": {
                    "1": "data_buffer"
                },
                "<original_variable_name_2>": {
                    "1": "data_array"
                },
                "DAT_20000e40": {
                    "1": "data_to_update",
                    "19": "data",
                    "4": "data_buffer"
                },
                "FUN_08005778": {
                    "1": "update_data_function",
                    "11": "initialize_data",
                    "16": "update_data"
                },
                "_080052ac": {
                    "1": "data_ptr"
                },
                "update_data_080052ac": {
                    "10": "update_data"
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid update_data_08005778(void)\n\n{\n  update_data_08005778(DAT_20000e40);\n  return;\n}\n\n",
            "current_name": "update_data_08005778",
            "entrypoint": "0x08005778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005778": "update_data_08005778",
                "_080052ac": "data_ptr",
                "update_data_080052ac": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005790": {
            "additional_data": {
                "DAT_20000e3c": {
                    "1": "global_variable1"
                },
                "DAT_20000e3e": {
                    "1": "global_variable2"
                },
                "DAT_20000ea9": {
                    "1": "flag"
                },
                "DAT_20000ec9": {
                    "1": "value_3"
                },
                "DAT_20000ed4": {
                    "1": "temporary_data1"
                },
                "DAT_20000ed6": {
                    "1": "temporary_data2"
                },
                "FUNC_08005318": {
                    "1": "perform_initial_setup",
                    "3": "perform_initialization"
                },
                "FUN_08005790": {
                    "1": "update_flags",
                    "20": "initialize_global_variables",
                    "3": "initialize_globals"
                },
                "PTR_08007c40": {
                    "1": "set_global_variable1"
                },
                "PTR_08007c5e": {
                    "1": "set_global_variable2"
                },
                "VAR_20000e3c": {
                    "1": "output_value_1"
                },
                "VAR_20000e3e": {
                    "1": "output_value_2"
                },
                "VAR_20000ea9": {
                    "1": "input_value"
                },
                "VAR_20000ec9": {
                    "1": "input_value_3"
                },
                "VAR_20000ed4": {
                    "1": "input_value_1"
                },
                "VAR_20000ed6": {
                    "1": "input_value_2"
                },
                "set_global_variable_08007c40": {
                    "1": "set_flag_a",
                    "3": "set_global_variable1",
                    "6": "set_flag_value"
                },
                "set_global_variable_08007c5e": {
                    "1": "set_global_multiplier",
                    "3": "set_global_variable2",
                    "4": "calculate_and_update_value"
                },
                "update_flags_08007b70": {
                    "1": "update_game_flags",
                    "25": "update_flags",
                    "3": "update_status_flags"
                }
            },
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "code": "\nvoid initialize_global_variables_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    set_flag_value(0x69);\n    calculate_value((DAT_20000ec9 + 5) * 0x15);\n    update_flags();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_global_variables_08005790",
            "entrypoint": "0x08005790",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005790": "initialize_global_variables_08005790",
                "set_global_variable_08007c40": "set_flag_value",
                "set_global_variable_08007c5e": "calculate_value",
                "update_flags_08007b70": "update_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080057e4": {
            "additional_data": {
                "DAT_20000eaa": {
                    "1": "flag2",
                    "2": "flag_variable"
                },
                "DAT_20000ef8": {
                    "1": "flag_value"
                },
                "FUNC_0800530c": {
                    "1": "run_specific_function",
                    "14": "perform_action",
                    "2": "perform_additional_tasks",
                    "3": "execute_task",
                    "7": "execute_function"
                },
                "FUN_080057e4": {
                    "1": "update_flags",
                    "12": "initialize_flags",
                    "2": "clear_flags_and_execute_function",
                    "6": "clear_flags_and_check_condition"
                },
                "clear_flags_08007bc2": {
                    "16": "clear_flags"
                }
            },
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "code": "\nvoid initialize_flags_080057e4(void)\n\n{\n  clear_flags();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_flags_080057e4",
            "entrypoint": "0x080057e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080057e4": "initialize_flags_080057e4",
                "clear_flags_08007bc2": "clear_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005814": {
            "additional_data": {
                "800": {
                    "1": "starting_value",
                    "2": "value",
                    "3": "initial_value"
                },
                "DAT_20000e14": {
                    "3": "memory_block"
                },
                "DAT_20000e38": {
                    "1": "counter",
                    "2": "min_value"
                },
                "FUN_08005814": {
                    "1": "initialize_memory_and_values",
                    "17": "initialize_memory",
                    "2": "initialize_memory_and_min_value",
                    "3": "initialize_data",
                    "6": "initialize_memory_and_calculate_min_value"
                },
                "calculateAndUpdateMinValue": {
                    "1": "calculate_and_update_min_value"
                },
                "calculate_and_update_min_value_08005324": {
                    "1": "calculate_and_update_minimum_value",
                    "23": "calculate_and_update_min_value",
                    "3": "calculate_and_set_min_value"
                },
                "fillMemoryWithZeros": {
                    "1": "fill_memory_with_zeros"
                },
                "fill_memory_0800b430": {
                    "1": "initialize_memory",
                    "19": "fill_memory"
                },
                "initializeMemory": {
                    "1": "initialize_memory"
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_memory_08005814(void)\n\n{\n  fill_memory(&DAT_20000e14,0,0x24);\n  calculate_and_update_min_value(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_memory_08005814",
            "entrypoint": "0x08005814",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005814": "initialize_memory_08005814",
                "calculate_and_update_min_value_08005324": "calculate_and_update_min_value",
                "fill_memory_0800b430": "fill_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800583c": {
            "additional_data": {
                "FUN_0800583c": {
                    "1": "initialize_and_update_data",
                    "12": "initialize_program",
                    "7": "initialize_data_and_variables",
                    "8": "initialize_application"
                },
                "data_080052ac": {
                    "1": "program_data"
                },
                "initialize_flags_080057e4": {
                    "31": "initialize_flags"
                },
                "initialize_global_variables_08005790": {
                    "1": "initialize_global_vars",
                    "30": "initialize_global_variables"
                },
                "update_data_080052ac": {
                    "19": "update_data",
                    "2": "update_application_data"
                }
            },
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_program_0800583c(void)\n\n{\n  update_data(DAT_20000ed4);\n  initialize_global_variables();\n  initialize_flags();\n  return;\n}\n\n",
            "current_name": "initialize_program_0800583c",
            "entrypoint": "0x0800583c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800583c": "initialize_program_0800583c",
                "data_080052ac": "program_data",
                "initialize_flags_080057e4": "initialize_flags",
                "initialize_global_variables_08005790": "initialize_global_variables",
                "update_data_080052ac": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800585c": {
            "additional_data": {
                "DAT_20000ea9": {
                    "1": "global_variable_status",
                    "3": "status_flag",
                    "5": "status"
                },
                "FUN_0800585c": {
                    "1": "initialize_global_variables",
                    "2": "initialize_if_status_is_2",
                    "4": "initialize_global_variables_if_needed",
                    "8": "initialize_if_needed"
                },
                "initialize_global_variables_08005790": {
                    "16": "initialize_global_variables",
                    "3": "initialize_globals"
                }
            },
            "called": [
                "FUN_08005790"
            ],
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "code": "\nvoid initialize_if_needed_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_global_variables();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_if_needed_0800585c",
            "entrypoint": "0x0800585c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800585c": "initialize_if_needed_0800585c",
                "initialize_global_variables_08005790": "initialize_global_variables"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800587c": {
            "additional_data": {
                "": {
                    "3": ""
                },
                "04": {
                    "1": "new_flag_value"
                },
                "DAT_20000ea9": {
                    "1": "current_state",
                    "11": "current_status",
                    "2": "status_flag",
                    "3": "flag",
                    "8": "status"
                },
                "DAT_20000eb8": {
                    "1": "update_count",
                    "2": "error_code",
                    "25": "counter"
                },
                "FUN_0800587c": {
                    "1": "update_flags",
                    "18": "update_status",
                    "2": "update_data_if_needed",
                    "3": "update_data"
                },
                "ea9": {
                    "1": "flag"
                },
                "eb8": {
                    "1": "counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid update_status_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "current_name": "update_status_0800587c",
            "entrypoint": "0x0800587c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058a0": {
            "additional_data": {
                "*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24": {
                    "1": "difference"
                },
                "<new_variable_name>": {
                    "1": "<original_variable_name>"
                },
                "<original_variable_name_1>": {
                    "1": "data_ptr"
                },
                "<original_variable_name_2>": {
                    "1": "value_diff"
                },
                "<original_variable_name_3>": {
                    "1": "min_value"
                },
                "<original_variable_name_4>": {
                    "1": "max_value"
                },
                "<original_variable_name_5>": {
                    "1": "new_value"
                },
                "DAT_20000e24": {
                    "1": "initial_value",
                    "2": "previous_value"
                },
                "DAT_20000e2c": {
                    "1": "limit",
                    "5": "max_value"
                },
                "DAT_20000e30": {
                    "1": "data4",
                    "2": "flag",
                    "5": "counter"
                },
                "DAT_20000e38": {
                    "1": "pointer_to_data",
                    "2": "data_ptr",
                    "7": "data_pointer"
                },
                "DAT_20000ea9": {
                    "1": "data_flag",
                    "6": "status"
                },
                "FUN_080058a0": {
                    "1": "update_values_and_min_value",
                    "12": "update_values",
                    "2": "initialize_data",
                    "3": "update_values_and_calculate_min",
                    "5": "update_data"
                },
                "calculate_and_update_min_value_08005324": {
                    "1": "update_min_value",
                    "2": "calculate_min_value",
                    "25": "calculate_and_update_min_value"
                },
                "update_values_08003618": {
                    "1": "calculate_updated_values",
                    "16": "update_values",
                    "8": "update_values_helper"
                }
            },
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid update_values_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    update_values_080058a0(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculate_and_update_min_value(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "current_name": "update_values_080058a0",
            "entrypoint": "0x080058a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080058a0": "update_values_080058a0",
                "calculate_and_update_min_value_08005324": "calculate_and_update_min_value",
                "update_values_08003618": "update_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005900": {
            "additional_data": {
                "0x18": {
                    "1": "cancel"
                },
                "0x21": {
                    "1": "exclamation_mark"
                },
                "0x3f": {
                    "1": "question_mark"
                },
                "0x40": {
                    "1": "flag_threshold"
                },
                "0x7e": {
                    "1": "flag_a"
                },
                "0x7f": {
                    "1": "del"
                },
                "DAT_20000eaa": {
                    "1": "bit_flags",
                    "2": "status_flags",
                    "3": "flag",
                    "8": "flags"
                },
                "FUN_08005900": {
                    "1": "check_input_byte",
                    "2": "check_and_update_flags",
                    "20": "process_byte"
                },
                "initialize_system_080025e8": {
                    "5": "initialize_system"
                },
                "param_1": {
                    "1": "byte_data",
                    "22": "byte_value",
                    "7": "input_byte"
                },
                "param_2": {
                    "1": "new_param_name"
                },
                "return": {
                    "1": "result"
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\nundefined4 process_byte_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    result 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      result 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        initialize_system();\n        result 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        result 1;\n      }\n    }\n  }\n  result 0;\n}\n\n",
            "current_name": "process_byte_08005900",
            "entrypoint": "0x08005900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005900": "process_byte_08005900",
                "initialize_system_080025e8": "initialize_system",
                "param_1": "byte_value",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800597c": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "FUN_0800597c": {
                    "1": "interrupt",
                    "2": "call_software_interrupt",
                    "3": "invoke_system_interrupt",
                    "4": "execute_system_interrupt",
                    "5": "execute_system_call"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "PTR_0800597c": {
                    "1": "ptr_call_software_interrupt"
                },
                "software_interrupt": {
                    "1": "make_system_call",
                    "3": "perform_interrupt"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005984"
            ],
            "code": "\nvoid execute_software_interrupt_0800597c(void)\n\n{\n  execute_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_software_interrupt_0800597c",
            "entrypoint": "0x0800597c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c",
                "software_interrupt": "execute_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005984": {
            "additional_data": {
                "DAT_20000e44": {
                    "1": "interrupt_flag"
                },
                "FUN_08005984": {
                    "1": "execute_or_return_result",
                    "2": "execute_or_return_interrupt",
                    "3": "execute_interrupt_or_return_zero",
                    "6": "execute_interrupt_handler"
                },
                "param_1": {
                    "1": "param",
                    "2": "interrupt_param",
                    "3": "interrupt_code",
                    "4": "input_value",
                    "5": "input",
                    "8": "input_param"
                },
                "uVar1": {
                    "1": "output_value",
                    "2": "return_value",
                    "27": "result"
                }
            },
            "called": [
                "FUN_0800597c"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nundefined4 execute_interrupt_handler_08005984(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = execute_software_interrupt_0800597c(1,input_param,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "execute_interrupt_handler_08005984",
            "entrypoint": "0x08005984",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005984": "execute_interrupt_handler_08005984",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059b4": {
            "additional_data": {
                "FUNC_08005a50": {
                    "1": "perform_initialization",
                    "2": "perform_additional_tasks",
                    "4": "perform_operation",
                    "7": "execute_function"
                },
                "FUN_080059b4": {
                    "1": "initialize_and_run_task",
                    "3": "initialize_and_configure",
                    "4": "initialize_system",
                    "5": "initialize_and_set_values"
                },
                "_DAT_40023c00": {
                    "1": "configuration",
                    "2": "register_flags"
                },
                "initialize_check_08006d72": {
                    "1": "initialize_memory",
                    "28": "initialize_check"
                },
                "set_register_value_08006ce0": {
                    "1": "set_thread_priority",
                    "26": "set_register_value"
                }
            },
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nundefined4 initialize_and_execute_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  initialize_check(16000);\n  set_register_value(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "current_name": "initialize_and_execute_080059b4",
            "entrypoint": "0x080059b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059b4": "initialize_and_execute_080059b4",
                "initialize_check_08006d72": "initialize_check",
                "set_register_value_08006ce0": "set_register_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059f8": {
            "additional_data": {
                "FUNC_08005a5c": {
                    "1": "perform_initialization",
                    "2": "perform_task",
                    "3": "perform_additional_tasks"
                },
                "FUN_080059f8": {
                    "1": "initialize_data_structures",
                    "2": "initialize_variables",
                    "26": "initialize_data"
                },
                "_DAT_40023810": {
                    "1": "data_value_3",
                    "10": "data3",
                    "2": "data_variable_3",
                    "3": "data_3"
                },
                "_DAT_40023814": {
                    "1": "variable2",
                    "10": "data4",
                    "2": "data_variable_4",
                    "3": "data_4"
                },
                "_DAT_40023818": {
                    "1": "data_structure_5",
                    "10": "data5",
                    "2": "data_variable_5",
                    "3": "data_5"
                },
                "_DAT_40023820": {
                    "1": "variable1",
                    "12": "data1",
                    "2": "data_variable_1",
                    "3": "data_1"
                },
                "_DAT_40023824": {
                    "1": "register2",
                    "12": "data2",
                    "2": "data_variable_2",
                    "3": "data_2"
                },
                "undefined4": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_08005a5c"
            ],
            "calling": [],
            "code": "\n\n\nvoid initialize_data_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "current_name": "initialize_data_080059f8",
            "entrypoint": "0x080059f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a50": {
            "called": [],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a50",
            "entrypoint": "0x08005a50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a5c": {
            "called": [],
            "calling": [
                "FUN_080059f8"
            ],
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a5c",
            "entrypoint": "0x08005a5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a68": {
            "additional_data": {
                "DAT_20000e48": {
                    "1": "data_counter",
                    "2": "count",
                    "27": "counter"
                },
                "FUN_08005a68": {
                    "1": "increment_data_counter",
                    "2": "increment_count",
                    "28": "increment_counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid increment_counter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "current_name": "increment_counter_08005a68",
            "entrypoint": "0x08005a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a84": {
            "additional_data": {
                "DAT_20000e48": {
                    "1": "result",
                    "14": "data",
                    "2": "global_variable_value"
                },
                "FUN_08005a84": {
                    "1": "get_dat_value",
                    "16": "get_data",
                    "2": "get_global_variable_value",
                    "6": "get_data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "code": "\nundefined4 get_data_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "current_name": "get_data_08005a84",
            "entrypoint": "0x08005a84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a84": "get_data_08005a84"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a98": {
            "additional_data": {
                "FUN_08005a98": {
                    "1": "check_param_and_data",
                    "2": "find_threshold",
                    "3": "find_target_value"
                },
                "iVar1": {
                    "1": "data_i_var",
                    "18": "initial_value",
                    "2": "data_1",
                    "3": "data_offset",
                    "4": "initial_data"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "target_value",
                    "2": "parameter",
                    "3": "limit"
                },
                "uVar2": {
                    "1": "current_data_value",
                    "16": "current_value",
                    "2": "data_2",
                    "4": "data_value"
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_080002a0"
            ],
            "code": "\nvoid find_target_value_08005a98(int target_value)\n\n{\n  int initial_value;\n  uint current_value;\n  \n  initial_value = get_data_08005a84();\n  do {\n    current_value = get_data_08005a84();\n  } while (current_value < (uint)(target_value + initial_value));\n  return;\n}\n\n",
            "current_name": "find_target_value_08005a98",
            "entrypoint": "0x08005a98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a98": "find_target_value_08005a98",
                "iVar1": "initial_value",
                "param_1": "target_value",
                "uVar2": "current_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "additional_data": {
                "(char)((param_2 & 0xff) << 4)": {
                    "1": "shifted_data"
                },
                "(char)param_1": {
                    "1": "is_negative_address"
                },
                "(char)param_1 + -0x1fff1c00": {
                    "1": "negative_address"
                },
                "(char)param_1 < '\\0'": {
                    "1": "is_negative"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "memory_addr_2"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "address1"
                },
                "0x1fff1c00": {
                    "1": "memory_block_2"
                },
                "0xe000ed14": {
                    "1": "memory_block_1"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "FUN_08005bdc": {
                    "1": "update_memory_with_byte",
                    "2": "store_byte",
                    "3": "store_byte_value",
                    "4": "store_data",
                    "6": "update_memory"
                },
                "PTR_0x1fff1c00": {
                    "1": "memory_block_2"
                },
                "PTR_0xe000ed14": {
                    "1": "memory_block_1"
                },
                "char": {
                    "1": "character"
                },
                "char)((param_2 & 0xff) << 4)": {
                    "1": "shifted_value"
                },
                "inputByte": {
                    "1": "byte_to_update"
                },
                "inputValue": {
                    "1": "value_to_store"
                },
                "param_1": {
                    "1": "byte_param",
                    "2": "byte_value",
                    "3": "data",
                    "7": "address",
                    "8": "input_byte"
                },
                "param_1 & 0xf": {
                    "1": "offset"
                },
                "param_1 & 0xf + 0xe000ed14": {
                    "1": "address1"
                },
                "param_1 + -0x1fff1c00": {
                    "1": "offset_address"
                },
                "param_2": {
                    "1": "data_to_store",
                    "15": "value",
                    "2": "new_value",
                    "3": "input_value",
                    "6": "data"
                },
                "param_2 & 0xff": {
                    "1": "trimmed_data"
                },
                "param_3": {
                    "1": "offset"
                },
                "param_4": {
                    "1": "shift"
                },
                "param_5": {
                    "1": "mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005c30"
            ],
            "code": "\nvoid update_memory_08005bdc(byte input_byte,uint value)\n\n{\n  if (is_negative_address < '\\0') {\n    *(character *)((input_byte & 0xf) + 0xe000ed14) = (character)((value & 0xff) << 4);\n  }\n  else {\n    *(character *)(is_negative_address + -0x1fff1c00) = (character)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_08005bdc",
            "entrypoint": "0x08005bdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_1": "is_negative_address",
                "FUN_08005bdc": "update_memory_08005bdc",
                "char": "character",
                "param_1": "input_byte",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c30": {
            "additional_data": {
                "FUN_08005c30": {
                    "1": "reverse_bits",
                    "14": "check_and_update_memory",
                    "2": "check_and_update_memory_range",
                    "3": "check_and_set_memory"
                },
                "_DAT_e000e010": {
                    "1": "flag2",
                    "2": "flag_value"
                },
                "_DAT_e000e014": {
                    "1": "memory_address_1",
                    "6": "updated_value"
                },
                "_DAT_e000e018": {
                    "1": "register_value",
                    "2": "some_value"
                },
                "bVar1": {
                    "1": "is_value_in_range",
                    "2": "is_within_bounds",
                    "3": "is_within_range",
                    "4": "is_in_range",
                    "5": "is_value_valid",
                    "8": "is_valid"
                },
                "param_1": {
                    "1": "input_param",
                    "18": "input_value",
                    "4": "input",
                    "7": "value"
                },
                "update_memory_08005bdc": {
                    "8": "update_memory"
                }
            },
            "called": [
                "FUN_08005bdc"
            ],
            "calling": [
                "FUN_0800618c"
            ],
            "code": "\n\n\nbool check_and_update_memory_08005c30(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    update_memory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "current_name": "check_and_update_memory_08005c30",
            "entrypoint": "0x08005c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c30": "check_and_update_memory_08005c30",
                "bVar1": "is_valid",
                "param_1": "input_value",
                "update_memory_08005bdc": "update_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cec": {
            "additional_data": {
                "CONCAT12": {
                    "1": "concat12"
                },
                "CONCAT13": {
                    "1": "concat13"
                },
                "CONCAT13(DAT_40023800_3,CONCAT12((char)param_1[1],_DAT_40023800))": {
                    "1": "new_status_flag"
                },
                "DAT_40023800": {
                    "1": "settings"
                },
                "DAT_40023800_2": {
                    "1": "param_bit2"
                },
                "DAT_40023800_3": {
                    "1": "value_3",
                    "2": "bit3"
                },
                "DAT_40023870_1": {
                    "1": "temp_flag6",
                    "2": "bit1"
                },
                "DAT_40023874": {
                    "1": "register4"
                },
                "FUN_08005cec": {
                    "1": "check_parameter_validity",
                    "2": "check_flags",
                    "5": "check_conditions"
                },
                "_DAT_40007000": {
                    "1": "register2"
                },
                "_DAT_40023800": {
                    "1": "register_a",
                    "3": "register_3",
                    "6": "register3"
                },
                "_DAT_40023804": {
                    "1": "register_b",
                    "2": "flag2",
                    "3": "register_2",
                    "6": "register2"
                },
                "_DAT_40023808": {
                    "1": "register_a",
                    "2": "flag1",
                    "3": "register_1",
                    "6": "register1"
                },
                "_DAT_40023840": {
                    "1": "register_4"
                },
                "_DAT_40023870": {
                    "1": "register_4"
                },
                "_DAT_40023874": {
                    "1": "flag2",
                    "2": "flag4"
                },
                "_DAT_42470000": {
                    "1": "flag_value1",
                    "2": "flag1"
                },
                "_DAT_42470060": {
                    "1": "flag_value4"
                },
                "_DAT_42470e80": {
                    "1": "flag2"
                },
                "condition_1": {
                    "1": "condition_4"
                },
                "condition_10": {
                    "1": "register_4"
                },
                "condition_11": {
                    "1": "register_5"
                },
                "condition_12": {
                    "1": "register_6"
                },
                "condition_13": {
                    "1": "register_7"
                },
                "condition_14": {
                    "1": "register_8"
                },
                "condition_15": {
                    "1": "register_9"
                },
                "condition_16": {
                    "1": "register_10"
                },
                "condition_17": {
                    "1": "register_11"
                },
                "condition_18": {
                    "1": "register_12"
                },
                "condition_19": {
                    "1": "register_13"
                },
                "condition_2": {
                    "1": "condition_5"
                },
                "condition_20": {
                    "1": "register_14"
                },
                "condition_3": {
                    "1": "operation_3"
                },
                "condition_4": {
                    "1": "operation_1"
                },
                "condition_5": {
                    "1": "operation_2"
                },
                "condition_6": {
                    "1": "operation_4"
                },
                "condition_7": {
                    "1": "operation_5"
                },
                "condition_8": {
                    "1": "operation_6"
                },
                "condition_9": {
                    "1": "operation_7"
                },
                "get_data_08005a84": {
                    "8": "get_data"
                },
                "get_data_08005a84()": {
                    "1": "get_data"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "2": "data1",
                    "3": "counter",
                    "4": "value",
                    "5": "data",
                    "8": "result"
                },
                "operation_1": {
                    "1": "threshold_1"
                },
                "operation_10": {
                    "1": "threshold_10"
                },
                "operation_11": {
                    "1": "threshold_11"
                },
                "operation_12": {
                    "1": "threshold_12"
                },
                "operation_13": {
                    "1": "threshold_13"
                },
                "operation_14": {
                    "1": "threshold_14"
                },
                "operation_15": {
                    "1": "threshold_15"
                },
                "operation_16": {
                    "1": "threshold_16"
                },
                "operation_17": {
                    "1": "threshold_17"
                },
                "operation_18": {
                    "1": "threshold_18"
                },
                "operation_19": {
                    "1": "threshold_19"
                },
                "operation_2": {
                    "1": "threshold_2"
                },
                "operation_20": {
                    "1": "threshold_20"
                },
                "operation_21": {
                    "1": "threshold_21"
                },
                "operation_22": {
                    "1": "threshold_22"
                },
                "operation_23": {
                    "1": "threshold_23"
                },
                "operation_24": {
                    "1": "threshold_24"
                },
                "operation_25": {
                    "1": "threshold_25"
                },
                "operation_26": {
                    "1": "threshold_26"
                },
                "operation_27": {
                    "1": "threshold_27"
                },
                "operation_28": {
                    "1": "threshold_28"
                },
                "operation_29": {
                    "1": "threshold_29"
                },
                "operation_3": {
                    "1": "threshold_3"
                },
                "operation_30": {
                    "1": "threshold_30"
                },
                "operation_31": {
                    "1": "threshold_31"
                },
                "operation_32": {
                    "1": "threshold_32"
                },
                "operation_33": {
                    "1": "threshold_33"
                },
                "operation_34": {
                    "1": "threshold_34"
                },
                "operation_35": {
                    "1": "threshold_35"
                },
                "operation_36": {
                    "1": "threshold_36"
                },
                "operation_37": {
                    "1": "threshold_37"
                },
                "operation_38": {
                    "1": "threshold_38"
                },
                "operation_39": {
                    "1": "threshold_39"
                },
                "operation_4": {
                    "1": "threshold_4"
                },
                "operation_40": {
                    "1": "threshold_40"
                },
                "operation_41": {
                    "1": "threshold_41"
                },
                "operation_42": {
                    "1": "threshold_42"
                },
                "operation_43": {
                    "1": "threshold_43"
                },
                "operation_44": {
                    "1": "threshold_44"
                },
                "operation_45": {
                    "1": "threshold_45"
                },
                "operation_46": {
                    "1": "threshold_46"
                },
                "operation_47": {
                    "1": "threshold_47"
                },
                "operation_48": {
                    "1": "threshold_48"
                },
                "operation_49": {
                    "1": "threshold_49"
                },
                "operation_5": {
                    "1": "threshold_5"
                },
                "operation_50": {
                    "1": "threshold_50"
                },
                "operation_6": {
                    "1": "threshold_6"
                },
                "operation_7": {
                    "1": "threshold_7"
                },
                "operation_8": {
                    "1": "threshold_8"
                },
                "operation_9": {
                    "1": "threshold_9"
                },
                "param_1": {
                    "1": "config_flags",
                    "13": "flags",
                    "2": "param",
                    "6": "params"
                },
                "param_1[0xb]": {
                    "1": "flag_5_param1"
                },
                "param_1[10]": {
                    "1": "param10_bit1"
                },
                "param_1[1]": {
                    "1": "flag_value1",
                    "2": "param1_value"
                },
                "param_1[2]": {
                    "1": "flag_check3",
                    "2": "param2_value"
                },
                "param_1[3]": {
                    "1": "module_flag1",
                    "2": "param3_value"
                },
                "param_1[4]": {
                    "1": "flag_2_param",
                    "2": "param4_value"
                },
                "param_1[5]": {
                    "1": "param5",
                    "2": "param5_value"
                },
                "param_1[6]": {
                    "1": "flag_check4",
                    "2": "param6_value"
                },
                "param_1[7]": {
                    "1": "param7"
                },
                "param_1[8]": {
                    "1": "parameter8"
                },
                "param_1[9]": {
                    "1": "param9_bit1"
                },
                "register_1": {
                    "1": "condition_1"
                },
                "register_2": {
                    "1": "condition_2"
                },
                "register_3": {
                    "1": "condition_3"
                },
                "uVar2": {
                    "1": "temp2",
                    "2": "temp_var2",
                    "6": "value",
                    "9": "data"
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\n\n\nundefined4 check_conditions_08005cec(uint *flags)\n\n{\n  int result;\n  uint data;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (param1_value != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      result = get_data;\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        data = get_data;\n        if (result + 5000U <= data) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = concatenate13(DAT_40023800_3,concatenate12((char)param1_value,_DAT_40023800));\n      if (param1_value == 1) {\n        result = get_data;\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          data = get_data;\n          if (result + 5000U <= data) {\n            return 3;\n          }\n        }\n      }\n      else {\n        result = get_data;\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          data = get_data;\n          if (result + 5000U <= data) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (param3_value != 1)) {\n        return 1;\n      }\n    }\n    else if (param3_value == 0) {\n      _DAT_42470000 = 0;\n      result = get_data;\n      while ((_DAT_40023800 & 2) != 0) {\n        data = get_data;\n        if (result + 100U <= data) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      result = get_data;\n      while ((_DAT_40023800 & 2) == 0) {\n        data = get_data;\n        if (result + 100U <= data) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = param4_value << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (param5_value == 0) {\n      _DAT_42470e80 = 0;\n      result = get_data;\n      while ((_DAT_40023874 & 2) != 0) {\n        data = get_data;\n        if (result + 100U <= data) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      result = get_data;\n      while ((_DAT_40023874 & 2) == 0) {\n        data = get_data;\n        if (result + 100U <= data) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    result = get_data;\n    while ((_DAT_40007000 & 0x100) == 0) {\n      data = get_data;\n      if (result + 100U <= data) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    result = get_data;\n    while ((_DAT_40023870 & 2) != 0) {\n      data = get_data;\n      if (result + 5000U <= data) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)param2_value);\n    if (param2_value == 1) {\n      result = get_data;\n      while ((_DAT_40023870 & 2) == 0) {\n        data = get_data;\n        if (result + 5000U <= data) {\n          return 3;\n        }\n      }\n    }\n    else {\n      result = get_data;\n      while ((_DAT_40023870 & 2) != 0) {\n        data = get_data;\n        if (result + 5000U <= data) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (param6_value != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (param6_value == 2) {\n      _DAT_42470060 = 0;\n      result = get_data;\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        data = get_data;\n        if (result + 100U <= data) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           config_value1 << 0x18 |\n           config_value2 | config_value3 << 6 | ((config_value4 >> 1) - 1) * 0x10000 | config_value5 |\n           0x20000000;\n      _DAT_42470060 = 1;\n      result = get_data;\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        data = get_data;\n        if (result + 100U <= data) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      result = get_data;\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        data = get_data;\n        if (result + 100U <= data) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_conditions_08005cec",
            "entrypoint": "0x08005cec",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT12": "concatenate12",
                "CONCAT13": "concatenate13",
                "FUN_08005cec": "check_conditions_08005cec",
                "get_data_08005a84": "get_data",
                "get_data_08005a84()": "get_data",
                "iVar1": "result",
                "param_1": "flags",
                "param_1[0xb]": "config_value1",
                "param_1[10]": "config_value4",
                "param_1[1]": "param1_value",
                "param_1[2]": "param2_value",
                "param_1[3]": "param3_value",
                "param_1[4]": "param4_value",
                "param_1[5]": "param5_value",
                "param_1[6]": "param6_value",
                "param_1[7]": "config_value5",
                "param_1[8]": "config_value2",
                "param_1[9]": "config_value3",
                "uVar2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800618c": {
            "additional_data": {
                "DAT_40023c00_1": {
                    "1": "data_var_1"
                },
                "FUN_0800618c": {
                    "1": "check_clock_and_memory",
                    "2": "perform_operation",
                    "3": "check_and_update_clock",
                    "4": "check_and_update_memory",
                    "7": "check_and_update_clock_frequency"
                },
                "_DAT_40023800": {
                    "1": "register"
                },
                "_DAT_40023808": {
                    "1": "data_var_4"
                },
                "_DAT_40023c00": {
                    "1": "stored_param"
                },
                "_FUN_0800618c": {
                    "1": "check_and_update_clock_frequency"
                },
                "calculate_clock_frequency_08006628": {
                    "19": "calculate_clock_frequency"
                },
                "check_and_update_memory_08005c30": {
                    "1": "check_and_update_memory_helper",
                    "18": "check_and_update_memory"
                },
                "get_data_08005a84": {
                    "1": "get_current_time",
                    "2": "get_current_value",
                    "6": "get_current_data",
                    "7": "get_data"
                },
                "iVar1": {
                    "1": "data_offset",
                    "14": "data",
                    "4": "data_result",
                    "6": "data_value"
                },
                "param_1": {
                    "1": "configurations",
                    "3": "parameters",
                    "5": "input_params"
                },
                "param_2": {
                    "1": "value",
                    "2": "config_flags",
                    "5": "size"
                },
                "uVar2": {
                    "1": "data_result",
                    "13": "current_data",
                    "2": "current_data_value",
                    "4": "data_value",
                    "5": "current_value"
                },
                "uVar3": {
                    "1": "max_time",
                    "2": "limit",
                    "3": "threshold_value",
                    "5": "target_data",
                    "7": "threshold"
                },
                "uVar4": {
                    "1": "frequency",
                    "29": "clock_frequency"
                }
            },
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\n\n\nundefined4 check_and_update_clock_frequency_0800618c(uint *input_params,uint size)\n\n{\n  int data;\n  uint current_data;\n  uint threshold;\n  undefined8 clock_frequency;\n  \n  if ((_DAT_40023c00 & 0xf) < size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n    if ((*input_params & 1) != 0) {\n      if (input_params[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((input_params[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = input_params[1] | _DAT_40023808 & 0xfffffffc;\n      data = get_data();\n      threshold = data + 5000;\n      if (input_params[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_data = get_data();\n          if (threshold <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else if (input_params[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_data = get_data();\n          if (threshold <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_data = get_data();\n          if (threshold <= current_data) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*input_params & 1) != 0) {\n      if (input_params[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (input_params[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = input_params[1] | _DAT_40023808 & 0xfffffffc;\n      data = get_data();\n      threshold = data + 5000;\n      if (input_params[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_data = get_data();\n          if (threshold <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else if (input_params[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_data = get_data();\n          if (threshold <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_data = get_data();\n          if (threshold <= current_data) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*input_params & 2) != 0) {\n    _DAT_40023808 = input_params[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*input_params & 4) != 0) {\n    _DAT_40023808 = input_params[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*input_params & 8) != 0) {\n    _DAT_40023808 = input_params[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clock_frequency = calculate_clock_frequency();\n  check_and_update_memory((uint)clock_frequency / 1000,(int)((ulonglong)clock_frequency >> 0x20),(uint)clock_frequency * 0x10624dd3);\n  return 0;\n}\n\n",
            "current_name": "check_and_update_clock_frequency_0800618c",
            "entrypoint": "0x0800618c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800618c": "check_and_update_clock_frequency_0800618c",
                "calculate_clock_frequency_08006628": "calculate_clock_frequency",
                "check_and_update_memory_08005c30": "check_and_update_memory",
                "get_data_08005a84": "get_data",
                "iVar1": "data",
                "param_1": "input_params",
                "param_2": "size",
                "uVar2": "current_data",
                "uVar3": "threshold",
                "uVar4": "clock_frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800640c": {
            "additional_data": {
                "FUN_0800640c": {
                    "1": "update_flags_and_parameters",
                    "11": "update_parameters",
                    "2": "update_registers",
                    "3": "initialize_parameters",
                    "4": "update_flags"
                },
                "_DAT_40023808": {
                    "1": "register2"
                },
                "_DAT_40023830": {
                    "1": "configuration"
                },
                "local_10": {
                    "1": "value1",
                    "2": "constant4",
                    "8": "constant3"
                },
                "local_14": {
                    "1": "unused",
                    "2": "constant3",
                    "6": "constant4"
                },
                "local_18": {
                    "1": "num1_param",
                    "9": "constant2"
                },
                "local_1c": {
                    "1": "address_param",
                    "4": "size",
                    "9": "constant1"
                },
                "local_c": {
                    "1": "zero2",
                    "2": "zero",
                    "8": "constant5"
                },
                "param_1": {
                    "1": "input_param",
                    "17": "flag",
                    "4": "mode"
                },
                "param_2": {
                    "1": "param",
                    "12": "value1",
                    "9": "value_1"
                },
                "param_3": {
                    "1": "flag2",
                    "12": "value2",
                    "9": "value_2"
                },
                "update_parameters_08006e88": {
                    "1": "update_parameters"
                }
            },
            "called": [
                "FUN_08006e88"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_parameters_0800640c(int flag,uint value1,uint value2)\n\n{\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant4;\n  undefined4 constant3;\n  undefined4 constant5;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    constant1 = 0x100;\n    constant2 = 2;\n    constant3 = 3;\n    constant4 = 0;\n    constant5 = 0;\n    update_parameters_0800640c(0x40020000,&constant1);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    constant1 = 0x200;\n    constant2 = 2;\n    constant3 = 3;\n    constant4 = 0;\n    constant5 = 0;\n    update_parameters_0800640c(0x40020800,&constant1);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "current_name": "update_parameters_0800640c",
            "entrypoint": "0x0800640c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800640c": "update_parameters_0800640c",
                "local_10": "constant3",
                "local_14": "constant4",
                "local_18": "constant2",
                "local_1c": "constant1",
                "local_c": "constant5",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "update_parameters_08006e88": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080064ec": {
            "additional_data": {
                "FUN_080064ec": {
                    "1": "calculate_frequency",
                    "22": "calculate_clock_frequency",
                    "7": "calculate_clock_speed"
                },
                "_DAT_40023804": {
                    "1": "input_values2",
                    "2": "control_register"
                },
                "_DAT_40023808": {
                    "1": "clock_setting1",
                    "2": "clock_config_register"
                },
                "_function_080064ec": {
                    "1": "calculate_clock_speed"
                },
                "local_c": {
                    "1": "final_frequency",
                    "11": "clock_frequency",
                    "2": "calculated_frequency",
                    "7": "frequency",
                    "8": "clock_speed"
                },
                "uVar1": {
                    "1": "configuration",
                    "11": "clock_config",
                    "2": "clock_source",
                    "3": "config_bits"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006628"
            ],
            "code": "\n\n\nuint calculate_clock_frequency_080064ec(void)\n\n{\n  uint clock_config;\n  uint clock_frequency;\n  \n  clock_config = _DAT_40023808 & 0xc;\n  if (clock_config == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clock_frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clock_frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clock_frequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clock_config < 9) {\n    if (clock_config == 0) {\n      return 16000000;\n    }\n    if (clock_config == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "current_name": "calculate_clock_frequency_080064ec",
            "entrypoint": "0x080064ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "local_c": "clock_frequency",
                "uVar1": "clock_config"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006628": {
            "additional_data": {
                "&DAT_0800bcac": {
                    "1": "bit_shift_array",
                    "2": "frequency_table"
                },
                "(&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4]": {
                    "1": "bit_shift"
                },
                "DAT_0800bcac": {
                    "1": "shift_values"
                },
                "DAT_20000000": {
                    "1": "new_clock_frequency",
                    "2": "adjusted_frequency"
                },
                "FUN_08006628": {
                    "1": "calculate_clock_frequency_and_assign",
                    "15": "calculate_clock_frequency",
                    "2": "calculate_clock_frequency_and_store",
                    "7": "calculate_and_set_clock_frequency"
                },
                "_DAT_40023808": {
                    "1": "clock_data",
                    "2": "data_register",
                    "3": "input_register",
                    "4": "register_value",
                    "5": "input_value",
                    "6": "input_data"
                },
                "calculate_clock_frequency_080064ec": {
                    "1": "calculate_clock_frequency",
                    "2": "get_clock_frequency"
                },
                "uVar1": {
                    "27": "clock_frequency",
                    "3": "frequency"
                },
                "uVar1 >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4]": {
                    "2": "adjusted_frequency"
                }
            },
            "called": [
                "FUN_080064ec"
            ],
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "code": "\n\n\nuint calculate_clock_frequency_08006628(void)\n\n{\n  uint clock_frequency;\n  \n  clock_frequency = get_clock_frequency();\n  DAT_20000000 = clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "current_name": "calculate_clock_frequency_08006628",
            "entrypoint": "0x08006628",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006628": "calculate_clock_frequency_08006628",
                "calculate_clock_frequency_080064ec": "get_clock_frequency",
                "uVar1": "clock_frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006680": {
            "additional_data": {
                "&DAT_0800bcac": {
                    "1": "frequency_offsets",
                    "3": "frequency_table"
                },
                "(&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10]": {
                    "1": "clock_shift_amount"
                },
                ">>": {
                    "1": "right_shift_amount"
                },
                "DAT_0800bcac": {
                    "1": "frequency_mapping",
                    "2": "lookup_table",
                    "3": "frequency_table"
                },
                "DAT_40023808": {
                    "1": "register_value"
                },
                "FUN_08006680": {
                    "1": "calculate_clock_frequency_and_shift",
                    "14": "calculate_clock_frequency",
                    "2": "get_clock_frequency",
                    "3": "calculate_frequency",
                    "5": "calculate_adjusted_frequency",
                    "6": "calculate_adjusted_clock_frequency"
                },
                "_DAT_0800bcac": {
                    "1": "bit_shift_array"
                },
                "_DAT_40023808": {
                    "1": "data_value",
                    "12": "input_value",
                    "6": "input_data",
                    "7": "register_value"
                },
                "_DAT_40023808 & 0x1c00": {
                    "1": "memory_config_field"
                },
                "calculate_clock_frequency_08006628": {
                    "3": "calculate_clock_frequency"
                },
                "uVar1": {
                    "1": "shifted_frequency",
                    "26": "clock_frequency"
                }
            },
            "called": [
                "FUN_08006628"
            ],
            "calling": [
                "FUN_08007f54"
            ],
            "code": "\n\n\nuint calculate_clock_frequency_08006680(void)\n\n{\n  uint clock_frequency;\n  \n  clock_frequency = calculate_clock_frequency_08006680();\n  return clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "current_name": "calculate_clock_frequency_08006680",
            "entrypoint": "0x08006680",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006680": "calculate_clock_frequency_08006680",
                "calculate_clock_frequency_08006628": "calculate_clock_frequency",
                "uVar1": "clock_frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080066cc": {
            "additional_data": {
                "&DAT_0800bcac": {
                    "1": "clock_divider_table",
                    "3": "frequency_table"
                },
                "(_DAT_40023808 & 0xe000) >> 0xd": {
                    "1": "shift_amount"
                },
                "DAT_0800bcac": {
                    "1": "clock_shift",
                    "2": "shift_array"
                },
                "FUN_080066cc": {
                    "1": "calculate_frequency_sensitivity",
                    "13": "calculate_clock_frequency",
                    "2": "calculate_adjusted_frequency",
                    "3": "calculate_frequency"
                },
                "_DAT_40023808": {
                    "1": "clock_config_register",
                    "2": "data_value",
                    "3": "data_register",
                    "4": "input_value",
                    "9": "register_value"
                },
                "calculate_clock_frequency_08006628": {
                    "2": "get_clock_frequency"
                },
                "uVar1": {
                    "24": "clock_frequency",
                    "6": "frequency"
                }
            },
            "called": [
                "FUN_08006628"
            ],
            "calling": [
                "FUN_08007f54"
            ],
            "code": "\n\n\nuint calculate_clock_frequency_080066cc(void)\n\n{\n  uint clock_frequency;\n  \n  clock_frequency = calculate_clock_frequency_080066cc();\n  return clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "current_name": "calculate_clock_frequency_080066cc",
            "entrypoint": "0x080066cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080066cc": "calculate_clock_frequency_080066cc",
                "calculate_clock_frequency_08006628": "calculate_clock_frequency",
                "uVar1": "clock_frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006950": {
            "additional_data": {
                "0x5fa0000": {
                    "1": "bit_mask2"
                },
                "0xf8ff": {
                    "1": "bitset_mask"
                },
                "DAT_e000ed0c": {
                    "1": "output_register"
                },
                "FUN_08006950": {
                    "1": "set_control_register_bits",
                    "2": "set_control_bits",
                    "3": "set_register_value"
                },
                "_DAT_e000ed0c": {
                    "1": "memory_register",
                    "2": "data_register",
                    "4": "register_value",
                    "7": "control_register"
                },
                "param_1": {
                    "1": "option",
                    "2": "value",
                    "3": "configuration"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006ce0"
            ],
            "code": "\n\n\nvoid set_register_value_08006950(uint configuration)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configuration & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "set_register_value_08006950",
            "entrypoint": "0x08006950",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006950": "set_register_value_08006950",
                "param_1": "configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006998": {
            "additional_data": {
                "7": {
                    "1": "bit_mask"
                },
                "8": {
                    "1": "bits_to_shift"
                },
                "DAT_e000ed0c": {
                    "1": "register_value"
                },
                "FUN_08006998": {
                    "1": "get_rightmost_three_bits",
                    "10": "get_shifted_bits",
                    "3": "get_three_least_significant_bits",
                    "5": "get_bits_from_register"
                },
                "_DAT_e000ed0c": {
                    "1": "shifted_data",
                    "2": "input_value",
                    "3": "input_data",
                    "4": "original_value",
                    "7": "register_value"
                },
                "new_variable_name_1": {
                    "1": "shifted_value"
                },
                "new_variable_name_2": {
                    "1": "masked_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "code": "\n\n\nuint get_shifted_bits_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "current_name": "get_shifted_bits_08006998",
            "entrypoint": "0x08006998",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006998": "get_shifted_bits_08006998"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069b4": {
            "additional_data": {
                "(param_1 & 0x1f)": {
                    "1": "bit_position"
                },
                "*((uint *)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "array_index"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_location",
                    "2": "array",
                    "3": "target_address",
                    "4": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "3": "bit_to_set",
                    "4": "bit_mask"
                },
                "1 << bitMask": {
                    "1": "bit_value"
                },
                "FUN_080069b4": {
                    "1": "set_bits_in_memory",
                    "11": "set_bit_in_memory",
                    "2": "set_bit_value",
                    "3": "set_bit_in_array",
                    "7": "set_bit"
                },
                "PTR_...": {
                    "1": "..."
                },
                "PTR_0800e85c": {
                    "1": "array_of_integers"
                },
                "VAR_1": {
                    "1": "bit_position"
                },
                "byteValue >> 5": {
                    "1": "array_index"
                },
                "param_1": {
                    "1": "index",
                    "12": "input_byte",
                    "3": "bit_position",
                    "7": "byte_to_set",
                    "8": "byte_value"
                },
                "param_1 & 0x1f": {
                    "1": "offset"
                },
                "param_1 >> 5": {
                    "1": "shifted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d2e"
            ],
            "code": "\nvoid set_bit_in_memory_080069b4(byte input_byte)\n\n{\n  *(int *)(((uint)(int)(char)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080069b4",
            "entrypoint": "0x080069b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069e4": {
            "additional_data": {
                "((((uint)(int)(char)param_1 >> 5) + 0x20) * 4 + -0x1fff1f00)": {
                    "1": "array_index"
                },
                "((uint)(int)(char)param_1 >> 5)": {
                    "1": "shifted_index"
                },
                "(int)(char)param_1": {
                    "1": "int_value"
                },
                "(no second parameter)\n: (int *)((((uint)(int)(char)param_1 >> 5) + 0x20) * 4 + -0x1fff1f00): ": {
                    "1": "bit_array_ptr"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_position"
                },
                "(uint)(int)(char)param_1": {
                    "1": "converted_value"
                },
                "(uint)(int)(char)param_1 >> 5": {
                    "1": "unsigned_shift_value"
                },
                "*((((uint)(int)(char)param_1 >> 5) + 0x20) * 4 + -0x1fff1f00)": {
                    "1": "bit_memory_address"
                },
                "*(int *)((((uint)(int)(char)param_1 >> 5) + 0x20) * 4 + -0x1fff1f00)": {
                    "1": "array_address",
                    "3": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "4": "bit_mask"
                },
                "FUN_080069e4": {
                    "1": "set_bit_at_index",
                    "13": "set_bit_in_array",
                    "3": "set_bit_at_offset",
                    "4": "set_bit",
                    "8": "set_bit_in_memory"
                },
                "char": {
                    "1": "character"
                },
                "param_1": {
                    "1": "bit_array",
                    "17": "input_byte",
                    "5": "byte_to_set",
                    "6": "byte_value"
                },
                "param_1 & 0x1f": {
                    "1": "bit_offset",
                    "2": "bit_mask"
                },
                "param_1 >> 5": {
                    "1": "shifted_value"
                },
                "param_2": {
                    "1": ""
                },
                "uint": {
                    "1": "unsigned_int"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d4a"
            ],
            "code": "\nvoid set_bit_in_array_080069e4(byte input_byte)\n\n{\n  *(int *)(((converted_byte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_array_080069e4",
            "entrypoint": "0x080069e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)(char)param_1": "int_value",
                "(uint)(int)(char)param_1": "converted_byte",
                "FUN_080069e4": "set_bit_in_array_080069e4",
                "char": "character",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a18": {
            "additional_data": {
                "(*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "3": "bit_array"
                },
                "(*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00) & 1 << (param_1 & 0x1f))": {
                    "1": "bit_status"
                },
                "(uint)(int)(char)": {
                    "1": "converted_byte"
                },
                "*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "memory",
                    "2": "bit_mask",
                    "9": "bit_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_shifted_value"
                },
                "FUN_08006a18": {
                    "1": "check_bit_at_index",
                    "16": "check_bit",
                    "2": "check_bit_status",
                    "3": "check_bit_set",
                    "5": "is_bit_set"
                },
                "char": {
                    "1": "character"
                },
                "int": {
                    "1": "signed_integer"
                },
                "param_1": {
                    "1": "data",
                    "2": "bit_index",
                    "4": "input",
                    "6": "byte_to_check",
                    "9": "byte_value"
                },
                "param_1 & 0x1f": {
                    "1": "bit_offset",
                    "6": "bit_index",
                    "7": "bit_position"
                },
                "param_1 >> 5": {
                    "1": "extracted_byte"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006de0"
            ],
            "code": "\nbool check_bit_08006a18(byte byte_value)\n\n{\n  return (*(unsigned_integer *)(((converted_bytebyte_value >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byte_value & 0x1f)) != 0;\n}\n\n",
            "current_name": "check_bit_08006a18",
            "entrypoint": "0x08006a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "(uint)(int)(char)": "converted_byte",
                "FUN_08006a18": "check_bit_08006a18",
                "char": "character",
                "int": "signed_integer",
                "param_1": "byte_value",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a58": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "((uint)(int)(char)param_1 >> 5)": {
                    "1": "shifted_value"
                },
                "(computedIndex + -0x1fff1f00)": {
                    "1": "array_base_index"
                },
                "(int)(char)param_1": {
                    "1": "integer_value"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_position"
                },
                "(shiftedValue + 0x40) * 4": {
                    "1": "computed_index"
                },
                "(uint)(int)(char)": {
                    "1": "converted_byte"
                },
                "(uint)(int)(char)param_1": {
                    "1": "unsigned_integer_value"
                },
                "* 4": {
                    "1": "multiply_by_four"
                },
                "*((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*((int *)((((uint)(int)(char)byteVal >> 5) + 0x40) * 4 + -0x1fff1f00)))": {
                    "1": "memory_address"
                },
                "*(int *)": {
                    "1": "ptr_value"
                },
                "*(int *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "memory_location",
                    "2": "memory_address",
                    "3": "target_address",
                    "4": "array_address"
                },
                "+ -0x1fff1f00": {
                    "1": "add_memory_offset"
                },
                "+ 0x40": {
                    "1": "add_offset"
                },
                "0x1f": {
                    "1": "bit_mask"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_shifted_value",
                    "2": "bit_value",
                    "5": "bit_mask",
                    "8": "bit_to_set"
                },
                "<<": {
                    "1": "bit_shift_left"
                },
                ">>": {
                    "1": "right_shift"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_08006a58": {
                    "1": "set_bit_in_int_array",
                    "12": "set_bit_in_memory",
                    "7": "set_bit",
                    "8": "set_bit_in_array"
                },
                "PTR_": {
                    "1": ""
                },
                "byte": {
                    "1": "byte_to_set"
                },
                "char": {
                    "2": "character"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "param",
                    "12": "input_byte",
                    "2": "input",
                    "5": "byte_value",
                    "7": "byte_to_set"
                },
                "param_1 & 0x1f": {
                    "1": "masked_input"
                },
                "param_1 >> 5": {
                    "1": "shifted_input"
                },
                "ptr": {
                    "1": "pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006dc4"
            ],
            "code": "\nvoid set_bit_in_memory_08006a58(byte_to_set input_byte)\n\n{\n  *(integer *)(((unsigned_integer_value >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (input_byte bitwise_and 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006a58",
            "entrypoint": "0x08006a58",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "(int)(char)param_1": "integer_value",
                "(uint)(int)(char)": "converted_byte",
                "(uint)(int)(char)param_1": "unsigned_integer_value",
                "FUN_08006a58": "set_bit_in_memory_08006a58",
                "byte": "byte_to_set",
                "char": "character",
                "int": "integer",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "additional_data": {
                "(((uint)(int)(char)param_1 >> 5) + 0x60)": {
                    "1": "index"
                },
                "(uint)(int)(char)param_1 >> 5": {
                    "2": "shifted_value"
                },
                "*((((uint)(int)(char)param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "array_index"
                },
                "*((uint *)(param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*(int *)": {
                    "1": "ptr"
                },
                "*(int *)((((uint)(int)(char)param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "memory_location",
                    "2": "array_address",
                    "3": "array_pointer",
                    "4": "memory_address"
                },
                "*(int*)((((uint)(int)(char)param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "array_ptr"
                },
                "-0x1fff1f00": {
                    "2": "base_address"
                },
                "0x1f": {
                    "1": "bit_mask"
                },
                "0x60": {
                    "1": "offset_value"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_shifted_value",
                    "5": "bit_value",
                    "6": "bit_mask"
                },
                "4": {
                    "1": "size_of_int"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_08006a8c": {
                    "1": "set_bit_at_index",
                    "10": "set_bit_in_array",
                    "12": "set_bit_in_memory",
                    "2": "set_bit_value"
                },
                "PTR_": {
                    "1": ""
                },
                "char": {
                    "1": "char",
                    "2": "character"
                },
                "int": {
                    "1": "int_value",
                    "2": "integer"
                },
                "int *": {
                    "1": "integer_pointer"
                },
                "originalVariableName1": {
                    "1": "shifted_position"
                },
                "originalVariableName2": {
                    "1": "bit_mask"
                },
                "param_1": {
                    "16": "input_byte",
                    "3": "input",
                    "4": "byte_to_set",
                    "8": "byte_value"
                },
                "param_1 & 0x1f": {
                    "1": "bit_position"
                },
                "param_2": {
                    "2": "bit_position"
                },
                "param_3": {
                    "1": "memory_address"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "uint": {
                    "1": "u_int",
                    "2": "unsigned_int"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006dfe"
            ],
            "code": "\nvoid set_bit_in_memory_08006a8c(byte input_byte)\n\n{\n  *(integer *)((((unsigned_int)(integer)(character)input_byte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006a8c",
            "entrypoint": "0x08006a8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006a8c": "set_bit_in_memory_08006a8c",
                "char": "character",
                "int": "integer",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "additional_data": {
                "!=": {
                    "1": "is_not_equal"
                },
                "%.2f": {
                    "1": "output_float"
                },
                "&": {
                    "1": "address_of"
                },
                "&=": {
                    "1": "bitwise_and_equal"
                },
                "(((uint)(int)(char)param_1 >> 5) + 0x80) * 4 + -0x1fff1f00": {
                    "1": "address"
                },
                "((uint)(int)(char)param_1 >> 5)": {
                    "1": "shifted_word"
                },
                "(*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x80) * 4 + -0x1fff1f00)": {
                    "1": "bit_array"
                },
                "(*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x80) * 4 + -0x1fff1f00)": {
                    "2": "bit_vector"
                },
                "(*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x80) * 4 + -0x1fff1f00) & 1 << (param_1 & 0x1f))": {
                    "1": "is_bit_set((byte_value))"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_offset",
                    "3": "bit_position"
                },
                "(uint)(int)(char)param_1": {
                    "1": "param_1_cast"
                },
                "*(uint *)": {
                    "1": "word_ptr"
                },
                "*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x80) * 4 + -0x1fff1f00)": {
                    "1": "word_value",
                    "7": "bit_array"
                },
                "+": {
                    "1": "add"
                },
                "-": {
                    "1": "subtract"
                },
                "1": {
                    "1": "one"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_mask"
                },
                "<<": {
                    "1": "bitwise_left_shift"
                },
                "<new_variable_name>": {
                    "1": "bit_mask"
                },
                ">>": {
                    "1": "right_shift"
                },
                "FUN_08006ac0": {
                    "1": "check_bit_in_array",
                    "13": "check_bit",
                    "2": "check_bit_at_index",
                    "3": "check_bit_value",
                    "5": "check_bit_status"
                },
                "char": {
                    "1": "character"
                },
                "param_1": {
                    "1": "byte_to_check",
                    "12": "byte_value",
                    "15": "input_byte",
                    "3": "input"
                },
                "param_1 & 0x1f": {
                    "1": "bit_offset",
                    "3": "bit_position",
                    "6": "bit_index"
                },
                "ptr_1": {
                    "1": "bit_array"
                },
                "uint": {
                    "1": "unsigned_int"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006e1a"
            ],
            "code": "\nbool check_bit_08006ac0(byte input_byte)\n\n{\n  return (*(unsigned_int *)(((param_1_cast >> 5) + 0x80) * 4 + subtract0x1fff1f00) address_of\n         1 << (input_byte address_of 0x1f)) is_not_equal 0;\n}\n\n",
            "current_name": "check_bit_08006ac0",
            "entrypoint": "0x08006ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "!=": "is_not_equal",
                "&": "address_of",
                "(uint)(int)(char)param_1": "param_1_cast",
                "-": "subtract",
                "FUN_08006ac0": "check_bit_08006ac0",
                "char": "character",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b00": {
            "additional_data": {
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "store_at_address_b"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "store_at_address_a"
                },
                "-0x1fff1c00": {
                    "1": "memory_address2"
                },
                "0x1fff1c00": {
                    "1": "modified_value",
                    "2": "memory_address2"
                },
                "0xe000ed14": {
                    "1": "modified_array",
                    "2": "memory_address1"
                },
                "<<": {
                    "1": "left_shift"
                },
                "FUN_08006b00": {
                    "1": "store_byte",
                    "2": "write_byte_to_memory",
                    "3": "store_data",
                    "4": "update_memory",
                    "6": "store_byte_value"
                },
                "char": {
                    "1": "byte_value",
                    "2": "character"
                },
                "e000ed14": {
                    "1": "memory_address1"
                },
                "newVariableName_1": {
                    "1": "mapped_address"
                },
                "newVariableName_2": {
                    "1": "base_address"
                },
                "new_variable_name_1": {
                    "1": "destination_address"
                },
                "new_variable_name_2": {
                    "1": "value"
                },
                "param_1": {
                    "1": "source_byte",
                    "2": "data",
                    "4": "input_value",
                    "6": "byte_value",
                    "9": "input_byte"
                },
                "param_1 & 0xf": {
                    "2": "address_offset"
                },
                "param_1 + -0x1fff1c00": {
                    "1": "address2"
                },
                "param_1&": {
                    "1": "lower_nibble"
                },
                "param_1+": {
                    "1": "upper_byte"
                },
                "param_2": {
                    "1": "byte_value",
                    "3": "value_to_store",
                    "5": "data",
                    "9": "value"
                },
                "param_2 & 0xff": {
                    "1": "value_masked"
                },
                "param_3": {
                    "1": "byte_to_store"
                },
                "param_4": {
                    "1": "temp_value"
                },
                "ptr_1": {
                    "1": "memory_address"
                },
                "ptr_2": {
                    "1": "memory_address"
                },
                "storeByteInMemory": {
                    "1": "store_byte_in_memory"
                },
                "value&": {
                    "1": "lower_byte"
                },
                "value<<4": {
                    "1": "shifted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "code": "\nvoid store_byte_value_08006b00(byte input_byte,uint value)\n\n{\n  if ((character)input_byte < '\\0') {\n    *(character *)((input_byte & 0xf) + 0xe000ed14) = (character)((value & 0xff) << 4);\n  }\n  else {\n    *(character *)((character)input_byte + -0x1fff1c00) = (character)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "store_byte_value_08006b00",
            "entrypoint": "0x08006b00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b00": "store_byte_value_08006b00",
                "char": "character",
                "param_1": "input_byte",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b54": {
            "additional_data": {
                "FUN_08006b54": {
                    "1": "extract_high_nibble",
                    "2": "byte_to_nibble",
                    "3": "extract_byte_from_memory",
                    "5": "extracted_byte",
                    "6": "extract_byte_from_binary"
                },
                "bVar1": {
                    "1": "output",
                    "2": "extracted_nibble",
                    "4": "result",
                    "6": "output_byte",
                    "7": "extracted_byte",
                    "9": "result_byte"
                },
                "param_1": {
                    "1": "input_value",
                    "24": "input_byte",
                    "4": "input"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d98"
            ],
            "code": "\nbyte extract_byte_from_binary_08006b54(byte input_byte)\n\n{\n  byte result_byte;\n  \n  if ((char)input_byte < '\\0') {\n    result_byte = *(byte *)((input_byte & 0xf) + 0xe000ed14);\n  }\n  else {\n    result_byte = *(byte *)((char)input_byte + -0x1fff1c00);\n  }\n  return result_byte >> 4;\n}\n\n",
            "current_name": "extract_byte_from_binary_08006b54",
            "entrypoint": "0x08006b54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b54": "extract_byte_from_binary_08006b54",
                "bVar1": "result_byte",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "additional_data": {
                "1 << (param_1 & 0xff)": {
                    "1": "bit_mask1"
                },
                "1 << (param_1 & 0xff) - 1U": {
                    "1": "first_mask"
                },
                "1 << (uVar1 & 0xff)": {
                    "1": "bit_mask2"
                },
                "1 << (uVar1 & 0xff) - 1U": {
                    "1": "second_mask"
                },
                "32": {
                    "1": "bit_mask"
                },
                "<original_function_name>": {
                    "1": "set_bit_range"
                },
                "<param_1>": {
                    "1": "value"
                },
                "<param_2>": {
                    "1": "mask"
                },
                "<param_3>": {
                    "1": "data"
                },
                "<uVar1>": {
                    "1": "shift_amount"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_08006ba0": {
                    "1": "extract_bits_and_combine",
                    "2": "get_bits",
                    "3": "bitwise_operations",
                    "7": "extract_bits"
                },
                "PTR_": {
                    "1": ""
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_bit",
                    "3": "input_value",
                    "7": "bit_position"
                },
                "param_1 & 0xff": {
                    "1": "bit_shift"
                },
                "param_1 & 7": {
                    "1": "shift_remainder"
                },
                "param_1 + 4": {
                    "1": "shift_limit"
                },
                "param_1 - 3": {
                    "1": "adjusted_shift_remainder"
                },
                "param_2": {
                    "1": "value1",
                    "2": "mask1",
                    "3": "bit_mask"
                },
                "param_2 & 0xff": {
                    "1": "masked_value"
                },
                "param_3": {
                    "1": "result",
                    "2": "bit_mask",
                    "3": "output_value",
                    "5": "data"
                },
                "return": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "num_bits_to_mask",
                    "10": "shift_amount",
                    "2": "num_bits1",
                    "3": "remaining_bits"
                },
                "uVar1 & 0xff": {
                    "1": "shift_amount_mask"
                },
                "uVar2": {
                    "1": "shifted_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006cf6"
            ],
            "code": "\nuint bitwise_operation_08006ba0(uint bit_position,uint mask,uint data)\n\n{\n  uint shift_amount;\n  \n  bit_position = bit_position & 7;\n  shift_amount = 7 - bit_position;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_position + 4 < 7) {\n    bit_position = 0;\n  }\n  else {\n    bit_position = bit_position - 3;\n  }\n  result data & (1 << (bit_position & 0xff)) - 1U |\n         ((1 << (shift_amount & 0xff)) - 1U & mask) << (bit_position & 0xff);\n}\n\n",
            "current_name": "bitwise_operation_08006ba0",
            "entrypoint": "0x08006ba0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ba0": "bitwise_operation_08006ba0",
                "param_1": "bit_position",
                "param_2": "mask",
                "param_3": "data",
                "return": "result",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c04": {
            "additional_data": {
                "*param_3": {
                    "1": "bit_masked_value_1",
                    "2": "result_1",
                    "3": "extracted_bits1"
                },
                "*param_4": {
                    "1": "masked_result2",
                    "2": "result_2",
                    "3": "extracted_bits2"
                },
                "0": {
                    "1": "zero"
                },
                "1": {
                    "1": "bit_mask"
                },
                "3": {
                    "1": "minimum_shift"
                },
                "4": {
                    "1": "default_shift"
                },
                "7": {
                    "1": "bit_size"
                },
                "<original_function_name>": {
                    "1": "decode_and_extract_bits"
                },
                "<param_1>": {
                    "1": "input_value"
                },
                "<param_2>": {
                    "1": "num_bits_to_decode"
                },
                "<param_3>": {
                    "1": "decoded_value_1"
                },
                "<param_4>": {
                    "1": "decoded_value_2"
                },
                "<uVar1>": {
                    "1": "shift_amount"
                },
                "FUN_08006c04": {
                    "1": "unpack_bits",
                    "2": "bitwise_operation",
                    "24": "extract_bits"
                },
                "newVariable": {
                    "1": "temp_offset"
                },
                "param_1": {
                    "1": "input_data",
                    "19": "input_value",
                    "2": "data",
                    "7": "input"
                },
                "param_1 >> (param_2 & 0xff)": {
                    "1": "shifted_number"
                },
                "param_2": {
                    "1": "adjusted_offset",
                    "10": "bit_offset",
                    "2": "shift_amount",
                    "4": "num_bits",
                    "6": "bit_position"
                },
                "param_2 & 0xff": {
                    "1": "bit_position_modulo"
                },
                "param_2 + 4": {
                    "1": "bit_position_plus_four"
                },
                "param_2 - 3": {
                    "1": "new_bit_offset"
                },
                "param_2_1": {
                    "1": "adjusted_offset"
                },
                "param_2_copy": {
                    "1": "bit_offset_copy"
                },
                "param_2_modified": {
                    "1": "adjusted_bit_position"
                },
                "param_3": {
                    "1": "output_value_ptr",
                    "2": "extracted_bits_1",
                    "3": "result_1",
                    "4": "output_value_1",
                    "5": "result1"
                },
                "param_4": {
                    "1": "output_bits_2",
                    "2": "extracted_bits_2",
                    "3": "result_2",
                    "4": "output_value_2",
                    "5": "output_value2"
                },
                "uVar1": {
                    "1": "bit_count",
                    "2": "num_bits",
                    "7": "shift_amount",
                    "9": "remaining_bits"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d98"
            ],
            "code": "\nvoid extract_bits_08006c04(uint input_value,uint bit_offset,uint *output_value1,uint *output_value2)\n\n{\n  uint remaining_bits;\n  \n  bit_offset = bit_offset & 7;\n  remaining_bits = 7 - bit_offset;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (bit_offset + 4 < 7) {\n    bit_offset = 0;\n  }\n  else {\n    bit_offset = bit_offset - 3;\n  }\n  *output_value1 = (1 << (remaining_bits & 0xff)) - 1U & input_value >> (bit_offset & 0xff);\n  *output_value2 = (1 << (bit_offset & 0xff)) - 1U & input_value;\n  return;\n}\n\n",
            "current_name": "extract_bits_08006c04",
            "entrypoint": "0x08006c04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input_value",
                "param_2": "bit_offset",
                "param_3": "output_value1",
                "param_4": "output_value2",
                "uVar1": "remaining_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c70": {
            "additional_data": {
                "0xf": {
                    "1": "sync_value"
                },
                "DataSynchronizationBarrier": {
                    "1": "sync_data",
                    "17": "sync_barrier",
                    "2": "wait_for_data_sync",
                    "5": "synchronize_data"
                },
                "FUN_08006c70": {
                    "1": "execute_endless_loop",
                    "16": "infinite_loop",
                    "2": "endless_loop",
                    "3": "run_infinite_loop"
                },
                "do": {
                    "1": "while"
                },
                "f": {
                    "1": "barrier_value"
                },
                "text": {
                    "1": "description"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d66"
            ],
            "code": "\nvoid infinite_loop_08006c70(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  start_loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "infinite_loop_08006c70",
            "entrypoint": "0x08006c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "DataSynchronizationBarrier": "sync_barrier",
                "FUN_08006c70": "infinite_loop_08006c70",
                "do": "start_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "additional_data": {
                "FUN_08006c9c": {
                    "1": "store_previous_value",
                    "2": "check_and_configure",
                    "5": "check_and_initialize"
                },
                "_DAT_e000e010": {
                    "1": "flag_value",
                    "2": "counter",
                    "3": "config_value"
                },
                "_DAT_e000e014": {
                    "1": "address_minus_one",
                    "2": "prev_value",
                    "3": "previous_value",
                    "4": "updated_value"
                },
                "_DAT_e000e018": {
                    "1": "flag_value",
                    "2": "initialized_value",
                    "3": "reset_value"
                },
                "bVar1": {
                    "1": "is_valid_address",
                    "15": "is_valid",
                    "2": "is_value_valid",
                    "3": "is_in_range"
                },
                "param_1": {
                    "1": "param",
                    "14": "input_value",
                    "3": "input_param",
                    "7": "value"
                },
                "store_byte_value_08006b00": {
                    "3": "store_byte_value"
                }
            },
            "called": [
                "FUN_08006b00"
            ],
            "calling": [
                "FUN_08006d72"
            ],
            "code": "\n\n\nbool check_and_initialize_08006c9c(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    store_byte_value(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "current_name": "check_and_initialize_08006c9c",
            "entrypoint": "0x08006c9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c9c": "check_and_initialize_08006c9c",
                "bVar1": "is_valid",
                "param_1": "input_value",
                "store_byte_value_08006b00": "store_byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "FUN_08006ce0": {
                    "2": "initialize_register_value",
                    "29": "set_register_value"
                },
                "param_1": {
                    "1": "new_value",
                    "23": "value",
                    "7": "register_value"
                },
                "set_register_value_08006950": {
                    "1": "set_register_value_helper",
                    "4": "set_register_value"
                }
            },
            "called": [
                "FUN_08006950"
            ],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nvoid set_register_value_08006ce0(undefined4 value)\n\n{\n  set_register_value_08006ce0(value);\n  return;\n}\n\n",
            "current_name": "set_register_value_08006ce0",
            "entrypoint": "0x08006ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ce0": "set_register_value_08006ce0",
                "param_1": "value",
                "set_register_value_08006950": "set_register_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "additional_data": {
                "FUN_08006cf6": {
                    "1": "store_shifted_bits_value",
                    "19": "store_shifted_bits",
                    "2": "store_shifted_byte_value",
                    "5": "store_byte_value"
                },
                "bitwise_operation_08006ba0": {
                    "1": "apply_bitwise_operation",
                    "8": "perform_bitwise_operation"
                },
                "get_shifted_bits_08006998": {
                    "9": "get_shifted_bits"
                },
                "param_1": {
                    "1": "target_byte",
                    "13": "byte_value",
                    "2": "input_byte",
                    "4": "byte_to_store",
                    "8": "character"
                },
                "param_2": {
                    "1": "shift_operand1",
                    "10": "value1",
                    "2": "shifted_bits",
                    "3": "shift_amount",
                    "4": "shifted_value1"
                },
                "param_3": {
                    "1": "val_2",
                    "10": "value2",
                    "2": "bitwise_operand",
                    "4": "shifted_value2"
                },
                "store_byte_value_08006b00": {
                    "9": "store_byte_value"
                },
                "uVar1": {
                    "1": "bits_with_shift",
                    "25": "shifted_bits"
                }
            },
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "calling": [
                "FUN_08007a70"
            ],
            "code": "\nvoid store_shifted_bits_08006cf6(char byte_value,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 shifted_bits;\n  \n  shifted_bits = get_shifted_bits();\n  shifted_bits = perform_bitwise_operation(shifted_bits,value1,value2);\n  store_byte_value((int)byte_value,shifted_bits);\n  return;\n}\n\n",
            "current_name": "store_shifted_bits_08006cf6",
            "entrypoint": "0x08006cf6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006cf6": "store_shifted_bits_08006cf6",
                "bitwise_operation_08006ba0": "perform_bitwise_operation",
                "get_shifted_bits_08006998": "get_shifted_bits",
                "param_1": "byte_value",
                "param_2": "value1",
                "param_3": "value2",
                "store_byte_value_08006b00": "store_byte_value",
                "uVar1": "shifted_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "additional_data": {
                "FUN_08006d2e": {
                    "1": "set_bit",
                    "26": "set_bit_in_memory",
                    "4": "set_memory_bit"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "character",
                    "2": "input_value",
                    "3": "bit_index",
                    "5": "value"
                }
            },
            "called": [
                "FUN_080069b4"
            ],
            "calling": [],
            "code": "\nvoid set_bit_in_memory_08006d2e(char character)\n\n{\n  set_bit_in_memory_08006d2e_080069b4((int)character);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006d2e",
            "entrypoint": "0x08006d2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d2e": "set_bit_in_memory_08006d2e",
                "param_1": "character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "additional_data": {
                "FUN_08006d4a": {
                    "1": "store_bit_in_array",
                    "30": "set_bit_in_array"
                },
                "param_1": {
                    "1": "input_character",
                    "2": "input",
                    "5": "input_char",
                    "7": "value",
                    "8": "character"
                },
                "set_bit_in_array_080069e4": {
                    "1": "set_bit_in_array"
                }
            },
            "called": [
                "FUN_080069e4"
            ],
            "calling": [],
            "code": "\nvoid set_bit_in_array_08006d4a(char character)\n\n{\n  set_bit_in_array_08006d4a((int)character);\n  return;\n}\n\n",
            "current_name": "set_bit_in_array_08006d4a",
            "entrypoint": "0x08006d4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d4a": "set_bit_in_array_08006d4a",
                "param_1": "character",
                "set_bit_in_array_080069e4": "set_bit_in_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d66": {
            "additional_data": {
                "FUN_08006d66": {
                    "1": "initialize_infinite_loop",
                    "20": "execute_infinite_loop",
                    "8": "run_infinite_loop"
                },
                "infinite_loop_08006c70": {
                    "19": "infinite_loop",
                    "4": "run_infinite_loop",
                    "8": "start_infinite_loop"
                }
            },
            "called": [
                "FUN_08006c70"
            ],
            "calling": [],
            "code": "\nvoid execute_infinite_loop_08006d66(void)\n\n{\n  infinite_loop();\n  return;\n}\n\n",
            "current_name": "execute_infinite_loop_08006d66",
            "entrypoint": "0x08006d66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d66": "execute_infinite_loop_08006d66",
                "infinite_loop_08006c70": "infinite_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d72": {
            "additional_data": {
                "FUN_08006d72": {
                    "1": "initialize_and_return_value",
                    "2": "initialize_checked_value",
                    "4": "initialize_and_return_result",
                    "5": "initialize",
                    "6": "initialize_check"
                },
                "param_1": {
                    "1": "value",
                    "2": "param",
                    "5": "input_value",
                    "7": "input_param",
                    "8": "input"
                },
                "uVar1": {
                    "1": "status",
                    "30": "result"
                }
            },
            "called": [
                "FUN_08006c9c"
            ],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nundefined4 initialize_check_08006d72(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = check_and_initialize_08006c9c(input);\n  return result;\n}\n\n",
            "current_name": "initialize_check_08006d72",
            "entrypoint": "0x08006d72",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d72": "initialize_check_08006d72",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "additional_data": {
                "FUN_08006d8a": {
                    "1": "retrieve_shifted_bits",
                    "22": "get_shifted_bits",
                    "3": "shifted_bits"
                },
                "uVar1": {
                    "1": "shifted_bits_value",
                    "2": "result",
                    "25": "shifted_bits"
                }
            },
            "called": [
                "FUN_08006998"
            ],
            "calling": [],
            "code": "\nundefined4 get_shifted_bits_08006d8a(void)\n\n{\n  undefined4 shifted_bits;\n  \n  shifted_bits = get_shifted_bits_08006d8a_08006998();\n  return shifted_bits;\n}\n\n",
            "current_name": "get_shifted_bits_08006d8a",
            "entrypoint": "0x08006d8a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d8a": "get_shifted_bits_08006d8a",
                "uVar1": "shifted_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d98": {
            "additional_data": {
                "FUN_08006d98": {
                    "1": "extract_and_process",
                    "2": "extract_and_extract_bits",
                    "3": "decode_and_extract_bits",
                    "5": "extract_bits_from_binary",
                    "6": "extract_and_process_data",
                    "7": "extract_and_process_bits"
                },
                "param_1": {
                    "1": "input_character",
                    "2": "binary_value",
                    "3": "input_char",
                    "4": "binary_data",
                    "9": "input_byte"
                },
                "param_2": {
                    "1": "destination_1",
                    "2": "output_param1",
                    "3": "parameter_2",
                    "7": "output1",
                    "9": "output_1"
                },
                "param_3": {
                    "1": "output_param_2",
                    "2": "output_param2",
                    "3": "parameter_3",
                    "7": "output2",
                    "9": "output_2"
                },
                "param_4": {
                    "1": "bit_3_output",
                    "2": "output_param3",
                    "3": "parameter_4",
                    "7": "output3",
                    "9": "output_3"
                },
                "uVar1": {
                    "1": "byte_extracted",
                    "28": "extracted_byte"
                }
            },
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "calling": [],
            "code": "\nvoid extract_and_process_bits_08006d98(char input_byte,undefined4 output_1,undefined4 output_2,undefined4 output_3)\n\n{\n  undefined4 extracted_byte;\n  \n  extracted_byte = extract_byte_from_binary_08006b54((int)input_byte);\n  extract_bits_08006c04(extracted_byte,output_1,output_2,output_3);\n  return;\n}\n\n",
            "current_name": "extract_and_process_bits_08006d98",
            "entrypoint": "0x08006d98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d98": "extract_and_process_bits_08006d98",
                "param_1": "input_byte",
                "param_2": "output_1",
                "param_3": "output_2",
                "param_4": "output_3",
                "uVar1": "extracted_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "additional_data": {
                "FUN_08006dc4": {
                    "1": "set_bit_in_parameter",
                    "23": "set_bit_in_memory",
                    "7": "set_memory_bit"
                },
                "param_1": {
                    "1": "bit",
                    "10": "character",
                    "2": "bit_position",
                    "3": "value",
                    "7": "input"
                },
                "param_2": {
                    "1": "new_parameter_name_2"
                },
                "set_bit_in_memory_08006a58": {
                    "1": "set_memory_bit_at_address",
                    "2": "set_bit_in_memory"
                }
            },
            "called": [
                "FUN_08006a58"
            ],
            "calling": [],
            "code": "\nvoid set_bit_in_memory_08006dc4(char character)\n\n{\n  set_bit_in_memory_08006dc4((int)character);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006dc4",
            "entrypoint": "0x08006dc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006dc4": "set_bit_in_memory_08006dc4",
                "param_1": "character",
                "set_bit_in_memory_08006a58": "set_bit_in_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006de0": {
            "additional_data": {
                "FUN_08006de0": {
                    "1": "check_bit_and_return",
                    "17": "check_bit",
                    "3": "check_bit_value",
                    "4": "check_bit_status"
                },
                "param_1": {
                    "1": "input_character",
                    "11": "input",
                    "3": "input_byte",
                    "6": "input_char",
                    "9": "input_value"
                },
                "uVar1": {
                    "1": "output",
                    "11": "result",
                    "4": "bit_check_result",
                    "7": "bit_result"
                }
            },
            "called": [
                "FUN_08006a18"
            ],
            "calling": [],
            "code": "\nundefined4 check_bit_08006de0(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_08006de0_08006a18((int)input);\n  return result;\n}\n\n",
            "current_name": "check_bit_08006de0",
            "entrypoint": "0x08006de0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006de0": "check_bit_08006de0",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "additional_data": {
                "FUN_08006dfe": {
                    "1": "set_bit",
                    "21": "set_bit_in_memory",
                    "9": "set_memory_bit"
                },
                "param_1": {
                    "1": "input_character",
                    "12": "character",
                    "3": "input_byte",
                    "5": "value"
                },
                "param_n": {
                    "1": "new_parameter_n"
                },
                "set_bit_in_memory_08006a8c": {
                    "1": "set_bit_in_memory"
                }
            },
            "called": [
                "FUN_08006a8c"
            ],
            "calling": [],
            "code": "\nvoid set_bit_in_memory_08006dfe(char character)\n\n{\n  set_bit((int)character);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006dfe",
            "entrypoint": "0x08006dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006dfe": "set_bit_in_memory_08006dfe",
                "param_1": "character",
                "set_bit_in_memory_08006a8c": "set_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "check_bit"
                },
                "FUN_08006e1a": {
                    "1": "check_bit_external",
                    "13": "check_bit",
                    "3": "check_bit_value",
                    "6": "check_bit_status"
                },
                "param_1": {
                    "1": "parameter",
                    "11": "input",
                    "2": "input_character",
                    "3": "input_byte",
                    "9": "input_value"
                },
                "uVar1": {
                    "4": "bit_result",
                    "6": "bit_status",
                    "8": "bit_check_result",
                    "9": "result"
                }
            },
            "called": [
                "FUN_08006ac0"
            ],
            "calling": [],
            "code": "\nundefined4 check_bit_08006e1a(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_08006e1a_08006ac0((int)input);\n  return result;\n}\n\n",
            "current_name": "check_bit_08006e1a",
            "entrypoint": "0x08006e1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e1a": "check_bit_08006e1a",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e88": {
            "additional_data": {
                "FUN_08006e88": {
                    "1": "update_state",
                    "2": "update_configuration",
                    "3": "update_register_values",
                    "4": "update_registers",
                    "8": "update_parameters"
                },
                "bit_index": {
                    "1": "bit_index"
                },
                "bit_mask": {
                    "1": "bit_mask"
                },
                "bit_value": {
                    "1": "bit_value"
                },
                "iVar3": {
                    "1": "section_index",
                    "14": "index",
                    "3": "array_index",
                    "8": "register_index"
                },
                "input": {
                    "1": "input"
                },
                "local_c": {
                    "1": "bit_idx",
                    "12": "counter",
                    "2": "loop_index",
                    "3": "bit_position",
                    "4": "index"
                },
                "output": {
                    "1": "output"
                },
                "param_1": {
                    "1": "current_registers",
                    "2": "register_array",
                    "3": "output",
                    "4": "output_params"
                },
                "param_2": {
                    "1": "new_register_data",
                    "2": "input_data",
                    "3": "new_values",
                    "4": "input_array"
                },
                "register_index": {
                    "1": "register_index"
                },
                "uVar1": {
                    "26": "bit_mask",
                    "4": "mask"
                },
                "uVar2": {
                    "1": "bit_mask_result",
                    "2": "bitwise_and",
                    "5": "bit_result",
                    "7": "bit_check",
                    "9": "bit_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "code": "\n\n\nvoid update_parameters_08006e88(uint *output_params,uint *input)\n\n{\n  uint bit_mask;\n  uint bit_value;\n  int index;\n  uint counter;\n  \n  for (counter = 0; counter < 0x10; counter = counter + 1) {\n    bit_mask = 1 << (counter & 0xff);\n    bit_value = *input & bit_mask;\n    if (bit_value == bit_mask) {\n      if ((input[1] == 2) || (input[1] == 0x12)) {\n        bit_mask = input[4];\n        output_params[(counter >> 3) + 8] = output_params[(counter >> 3) + 8] & ~(0xf << ((counter & 7) << 2));\n        output_params[(counter >> 3) + 8] = output_params[(counter >> 3) + 8] | bit_mask << ((counter & 7) << 2);\n      }\n      *output_params = *output_params & ~(3 << ((counter & 0x7f) << 1));\n      *output_params = *output_params | (input[1] & 3) << ((counter & 0x7f) << 1);\n      if ((((input[1] == 1) || (input[1] == 2)) || (input[1] == 0x11)) || (input[1] == 0x12)\n         ) {\n        output_params[2] = output_params[2] & ~(3 << ((counter & 0x7f) << 1));\n        output_params[2] = output_params[2] | input[3] << ((counter & 0x7f) << 1);\n        output_params[1] = output_params[1] & ~(1 << (counter & 0xff));\n        output_params[1] = output_params[1] | (input[1] >> 4 & 1) << (counter & 0xff);\n      }\n      output_params[3] = output_params[3] & ~(3 << ((counter & 0x7f) << 1));\n      output_params[3] = output_params[3] | input[2] << ((counter & 0x7f) << 1);\n      if ((input[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        if (output_params == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (output_params == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (output_params == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (output_params == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (output_params == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (output_params == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (output_params == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (output_params == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (output_params == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (output_params == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             index << ((counter & 3) << 2) | *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bit_value & _DAT_40013c00;\n        _DAT_40013c04 = ~bit_value & _DAT_40013c04;\n        if ((input[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bit_value | _DAT_40013c00;\n        }\n        if ((input[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bit_value | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bit_value & _DAT_40013c08;\n        _DAT_40013c0c = ~bit_value & _DAT_40013c0c;\n        if ((input[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bit_value | _DAT_40013c08;\n        }\n        if ((input[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bit_value | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_parameters_08006e88",
            "entrypoint": "0x08006e88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e88": "update_parameters_08006e88",
                "iVar3": "index",
                "local_c": "counter",
                "param_1": "output_params",
                "param_2": "input",
                "uVar1": "bit_mask",
                "uVar2": "bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800733e": {
            "additional_data": {
                "*(undefined2 *)(param_1 + 0x18)": {
                    "1": "param_value_2"
                },
                "*(undefined2 *)(param_1 + 0x1a)": {
                    "1": "param_value_1"
                },
                "0x18": {
                    "1": "offset2"
                },
                "0x1a": {
                    "1": "offset1"
                },
                "FUN_0800733e": {
                    "1": "assign_value_based_on_condition",
                    "2": "assign_parameter_value",
                    "3": "update_param_value",
                    "4": "update_param",
                    "5": "set_param_value"
                },
                "param_1": {
                    "1": "input_address",
                    "2": "target_address",
                    "5": "object_address",
                    "6": "base_address"
                },
                "param_1 + 0x18": {
                    "1": "address_if_false",
                    "2": "second_value_address"
                },
                "param_1 + 0x1a": {
                    "1": "primary_param_address",
                    "2": "first_value_address"
                },
                "param_1+0x18": {
                    "1": "memory_offset_plus16"
                },
                "param_1+0x1a": {
                    "1": "memory_offset_plus18"
                },
                "param_2": {
                    "1": "parameter_value",
                    "13": "value",
                    "2": "param_value"
                },
                "param_3": {
                    "1": "is_set",
                    "11": "flag",
                    "2": "is_secondary",
                    "3": "is_second_param"
                },
                "param_3 == '\\0'": {
                    "1": "is_second_parameter_false"
                },
                "param_4": {
                    "1": "value_to_set"
                },
                "param_5": {
                    "1": "is_third_param"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800778c"
            ],
            "code": "\nvoid set_param_value_0800733e(int base_address,undefined2 new_value,char flag)\n\n{\n  if (flag == '\\0') {\n    *(undefined2 *)(base_address + 0x1a) = new_value;\n  }\n  else {\n    *(undefined2 *)(base_address + 0x18) = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "set_param_value_0800733e",
            "entrypoint": "0x0800733e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800733e": "set_param_value_0800733e",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800738e": {
            "additional_data": {
                "FUNC_080073c0": {
                    "1": "perform_operation",
                    "2": "perform_update",
                    "4": "perform_action",
                    "7": "process_data"
                },
                "FUN_0800738e": {
                    "1": "update_flag_if_param_set",
                    "2": "update_and_call_function",
                    "3": "update_data",
                    "4": "update_data_and_call_function",
                    "6": "update_data_if_flag_set"
                },
                "_DAT_40013c14": {
                    "1": "status_register",
                    "2": "flag_value",
                    "5": "flag"
                },
                "param_1": {
                    "1": "new_data",
                    "18": "input_value",
                    "3": "input",
                    "4": "data"
                }
            },
            "called": [
                "FUN_080073c0"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_data_if_flag_set_0800738e(ushort input_value)\n\n{\n  if ((input_value & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)input_value;\n    FUNC_080073c0(input_value);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_if_flag_set_0800738e",
            "entrypoint": "0x0800738e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800738e": "update_data_if_flag_set_0800738e",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080073c0": {
            "called": [],
            "calling": [
                "FUN_0800738e"
            ],
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080073c0",
            "entrypoint": "0x080073c0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080073d4": {
            "additional_data": {
                "((int)value >> 4) * 0x400": {
                    "1": "index_offset"
                },
                "(1 << (param_1 & 0xf))": {
                    "1": "bit_mask"
                },
                "(int)param_1": {
                    "1": "index"
                },
                "(int)value >> 4": {
                    "1": "shifted_value"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_position"
                },
                "(shiftedValue >> 4)": {
                    "1": "shifted_value_divided"
                },
                "(shiftedValueDivided * 0x400 + 0x4002001a)": {
                    "1": "memory_address"
                },
                "(short *)memoryAddress": {
                    "1": "memory_pointer"
                },
                "(short)(1 << (param_1 & 0xf))": {
                    "1": "bit",
                    "5": "bit_value"
                },
                "(short)(1 << (value & 0xf))": {
                    "1": "updated_short_value"
                },
                "*(short *)(((int)param_1 >> 4) * 0x400 + 0x4002001a)": {
                    "1": "memory_location",
                    "5": "memory_address"
                },
                "0x400": {
                    "1": "offset"
                },
                "0x4002001a": {
                    "1": "base_memory_address",
                    "2": "memory_address"
                },
                "1 << (param_1 & 0xf)": {
                    "1": "bit_value",
                    "2": "bit_shifted_value"
                },
                "FUN_080073d4": {
                    "1": "write_short_to_memory",
                    "14": "set_bit_in_memory",
                    "2": "set_bit_value",
                    "3": "set_bit_in_short_array"
                },
                "int": {
                    "1": "index"
                },
                "param_1": {
                    "1": "index",
                    "4": "value",
                    "5": "bit_index",
                    "9": "input"
                },
                "param_2": {
                    "1": "data"
                },
                "short": {
                    "1": "bit_field",
                    "2": "short_value"
                },
                "short *": {
                    "1": "short_ptr"
                },
                "short_1": {
                    "1": "bit_mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007520"
            ],
            "code": "\nvoid set_bit_in_memory_080073d4(uindex input)\n\n{\n  *(short_value *)((index >> 4) * 0x400 + 0x4002001a) = (short_value)(1 << (input & 0xf));\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080073d4",
            "entrypoint": "0x080073d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "index",
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "int": "index",
                "param_1": "input",
                "short": "short_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007402": {
            "additional_data": {
                "((int)param_1 >> 4) * 0x400 + 0x40020018": {
                    "1": "address"
                },
                "(short)(1 << (param_1 & 0xf))": {
                    "1": "bit_to_set",
                    "2": "new_value",
                    "8": "bit_value"
                },
                "(short)(1 << (value & 0xf))": {
                    "1": "bit_value"
                },
                "*(((int)value >> 4) * 0x400 + 0x40020018)": {
                    "1": "memory_address"
                },
                "*(short *)(((int)param_1 >> 4) * 0x400 + 0x40020018)": {
                    "1": "target_address",
                    "2": "address",
                    "6": "memory_address"
                },
                "0x400": {
                    "1": "memory_offset"
                },
                "0x40020018": {
                    "2": "memory_address"
                },
                "1 << (param_1 & 0xf)": {
                    "1": "bit_shift_result"
                },
                "<new_variable_name_1>": {
                    "1": "<original_variable_name_1>"
                },
                "<new_variable_name_2>": {
                    "1": "<original_variable_name_2>"
                },
                "FUN_08007402": {
                    "1": "update_data",
                    "2": "write_bits_to_memory",
                    "3": "write_bit_to_memory",
                    "6": "set_bit_value",
                    "8": "set_bit_in_memory"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "offset",
                    "2": "input_number",
                    "3": "index",
                    "4": "input",
                    "7": "value"
                },
                "short": {
                    "1": "value",
                    "3": "short"
                }
            },
            "called": [],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid set_bit_in_memory_08007402(uinteger value)\n\n{\n  *(short *)(((integer)value >> 4) * 0x400 + 0x40020018) = (short)(1 << (value & 0xf));\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08007402",
            "entrypoint": "0x08007402",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "int": "integer",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007430": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "<none>": {
                    "1": "<none>"
                },
                "<original_variable_name_1>": {
                    "4": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "4": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "3": "<new_variable_name_n>"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "FUN_08007430": {
                    "1": "endless_loop",
                    "26": "infinite_loop",
                    "3": "run_infinite_loop"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "do": {
                    "1": "start_loop",
                    "2": "while",
                    "3": "do"
                },
                "original_function_name": {
                    "1": "infinite_loop"
                },
                "original_parameter_name_1": {
                    "1": "n/a"
                },
                "original_variable_name_1": {
                    "1": "n/a"
                },
                "true": {
                    "1": "condition",
                    "4": "true"
                },
                "while": {
                    "1": "condition"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\nvoid infinite_loop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } condition( true );\n}\n\n",
            "current_name": "infinite_loop_08007430",
            "entrypoint": "0x08007430",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430",
                "while": "condition"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007436": {
            "additional_data": {
                "FUN_08007436": {
                    "1": "initialize_and_check_conditions",
                    "18": "initialize_system",
                    "2": "set_flags_and_clock",
                    "3": "configure_hardware",
                    "4": "configure_system"
                },
                "_DAT_40007000": {
                    "1": "flag2"
                },
                "_DAT_40023840": {
                    "1": "flag1"
                },
                "check_and_update_clock_frequency_0800618c": {
                    "1": "check_and_update_clock"
                },
                "check_conditions_08005cec": {
                    "1": "check_flags"
                },
                "iVar1": {
                    "2": "condition_result",
                    "3": "result"
                },
                "infinite_loop_08007430": {
                    "1": "infinite_loop"
                },
                "local_10": {
                    "1": "initial_clock_value",
                    "3": "clock_freq4",
                    "5": "clock_value4"
                },
                "local_14": {
                    "1": "variable2",
                    "3": "counter",
                    "5": "clock_value3"
                },
                "local_18": {
                    "1": "variable1",
                    "2": "value8",
                    "3": "clock_freq2",
                    "5": "clock_value2"
                },
                "local_1c": {
                    "1": "clock_setting1",
                    "2": "clock_value",
                    "3": "clock_freq1",
                    "5": "clock_value1",
                    "9": "clock_frequency"
                },
                "local_20": {
                    "1": "parameter8",
                    "10": "value6",
                    "2": "value4"
                },
                "local_24": {
                    "1": "value4",
                    "10": "value5",
                    "2": "value_5",
                    "3": "value3"
                },
                "local_28": {
                    "1": "condition6",
                    "11": "value4",
                    "2": "value_4",
                    "3": "value2"
                },
                "local_2c": {
                    "1": "value4",
                    "12": "value3",
                    "2": "value_3"
                },
                "local_30": {
                    "1": "condition4",
                    "12": "value2",
                    "2": "value_2"
                },
                "local_34": {
                    "1": "option3",
                    "12": "value1",
                    "2": "flag_3"
                },
                "local_48": {
                    "1": "condition_2",
                    "16": "flag2",
                    "2": "value2",
                    "4": "flag_2"
                },
                "local_4c": {
                    "1": "condition_1",
                    "16": "flag1",
                    "2": "value1",
                    "4": "flag_1"
                },
                "local_c": {
                    "1": "size_three",
                    "3": "clock_freq5",
                    "5": "clock_value5"
                }
            },
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid initialize_system_08007436(void)\n\n{\n  int result;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 clock_frequency;\n  undefined4 clock_value2;\n  undefined4 clock_value3;\n  undefined4 clock_value4;\n  undefined4 clock_value5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag1 = 1;\n  flag2 = 1;\n  value1 = 2;\n  value2 = 0x400000;\n  value3 = 8;\n  value4 = 0x150;\n  value5 = 2;\n  value6 = 7;\n  result = check_flags(&flag1);\n  if (result != 0) {\n    trigger_infinite_loop();\n  }\n  clock_frequency = 0xf;\n  clock_value2 = 2;\n  clock_value3 = 0;\n  clock_value4 = 0x1400;\n  clock_value5 = 0x1000;\n  result = check_and_update_clock(&clock_frequency,5);\n  if (result != 0) {\n    trigger_infinite_loop();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_system_08007436",
            "entrypoint": "0x08007436",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "check_and_update_clock_frequency_0800618c": "check_and_update_clock",
                "check_conditions_08005cec": "check_flags",
                "iVar1": "result",
                "infinite_loop_08007430": "trigger_infinite_loop",
                "local_10": "clock_value4",
                "local_14": "clock_value3",
                "local_18": "clock_value2",
                "local_1c": "clock_frequency",
                "local_20": "value6",
                "local_24": "value5",
                "local_28": "value4",
                "local_2c": "value3",
                "local_30": "value2",
                "local_34": "value1",
                "local_48": "flag2",
                "local_4c": "flag1",
                "local_c": "clock_value5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080074c8": {
            "additional_data": {
                "DAT_20000e4c": {
                    "1": "check_system_initialization",
                    "3": "is_system_initialized",
                    "4": "system_initialization_flag",
                    "9": "system_initialized"
                },
                "DAT_20000e50": {
                    "1": "check_status_update",
                    "3": "is_status_updated",
                    "4": "status_update_flag",
                    "8": "status_updated"
                },
                "FUN_080074c8": {
                    "1": "handle_parameter_update",
                    "2": "update_flags",
                    "4": "process_flags",
                    "5": "update_function"
                },
                "initialize_system_if_needed_0800195c": {
                    "1": "check_and_initialize_system",
                    "20": "initialize_system_if_needed",
                    "7": "initialize_system"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "flags",
                    "2": "parameter",
                    "4": "input_flags",
                    "5": "input"
                },
                "set_bit_in_memory_08007402": {
                    "1": "set_flag",
                    "2": "set_memory_flag",
                    "21": "set_memory_bit"
                },
                "update_status_08003a18": {
                    "1": "update_system_status",
                    "27": "update_status"
                }
            },
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nvoid update_function_080074c8(uint flags)\n\n{\n  if ((flags & 1) != 0) {\n    set_memory_bit(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((flags & 0x1e) != 0)) {\n    initialize_system_if_needed();\n  }\n  if ((DAT_20000e50 != 0) && ((flags & 0x80) != 0)) {\n    update_status(flags);\n  }\n  return;\n}\n\n",
            "current_name": "update_function_080074c8",
            "entrypoint": "0x080074c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080074c8": "update_function_080074c8",
                "initialize_system_if_needed_0800195c": "initialize_system_if_needed",
                "param_1": "flags",
                "set_bit_in_memory_08007402": "set_memory_bit",
                "update_status_08003a18": "update_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007520": {
            "additional_data": {
                "0x3e": {
                    "1": "memory_address",
                    "2": "bit_value",
                    "3": "address"
                },
                "FUN_08007520": {
                    "1": "set_memory_bit_if_odd",
                    "14": "set_bit_if_odd",
                    "2": "set_bit_in_memory",
                    "3": "set_memory_bit"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "number",
                    "7": "value",
                    "9": "input"
                },
                "set_bit_in_memory_080073d4": {
                    "1": "set_bit_at_address",
                    "2": "set_memory_bit_in_address",
                    "7": "set_memory_bit",
                    "9": "set_bit_in_memory"
                }
            },
            "called": [
                "FUN_080073d4"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nvoid set_bit_if_odd_08007520(uint input)\n\n{\n  if ((input & 1) != 0) {\n    set_bit_in_memory(0x3e);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_if_odd_08007520",
            "entrypoint": "0x08007520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007520": "set_bit_if_odd_08007520",
                "param_1": "input",
                "set_bit_in_memory_080073d4": "set_bit_in_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007540": {
            "additional_data": {
                "FUN_08007540": {
                    "1": "execute_program",
                    "15": "initialize_program",
                    "2": "initialize_and_execute_system",
                    "4": "initialize_and_execute_program",
                    "8": "initialize_and_execute"
                },
                "_unspecified_parameter_1": {
                    "1": ""
                },
                "_unspecified_parameter_2": {
                    "1": ""
                },
                "_unspecified_variable_1": {
                    "1": ""
                },
                "_unspecified_variable_2": {
                    "1": ""
                },
                "execute_interrupt_handler_08005984": {
                    "1": "",
                    "26": "execute_interrupt_handler",
                    "3": "handle_interrupt"
                },
                "initialize_and_execute_080059b4": {
                    "1": "initialize_gpio",
                    "17": "initialize_and_execute"
                },
                "initialize_and_set_flags_08007e08": {
                    "1": "initialize_and_set_system_flags",
                    "22": "initialize_and_set_flags",
                    "5": "initialize_flags"
                },
                "initialize_memory_080079c0": {
                    "1": "initialize_memory_1",
                    "23": "initialize_memory"
                },
                "initialize_memory_08008190": {
                    "1": "initialize_secondary_memory",
                    "3": "initialize_memory2",
                    "8": "initialize_memory_2"
                },
                "initialize_program_08001ddc": {
                    "1": "",
                    "24": "initialize_program",
                    "5": "finalize_program"
                },
                "initialize_system_08007436": {
                    "1": "initialize_and_set_flags",
                    "2": "initialize_system_components",
                    "24": "initialize_system"
                },
                "update_and_set_parameters_0800778c": {
                    "1": "update_and_set_system_parameters",
                    "21": "update_and_set_parameters",
                    "4": "update_parameters"
                }
            },
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nundefined4 initialize_program_08007540(void)\n\n{\n  initialize_and_execute();\n  initialize_system();\n  update_and_set_parameters();\n  initialize_and_set_flags();\n  initialize_memory();\n  initialize_memory_2();\n  execute_interrupt_handler(0);\n  initialize_program_08007540();\n  return 0;\n}\n\n",
            "current_name": "initialize_program_08007540",
            "entrypoint": "0x08007540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007540": "initialize_program_08007540",
                "execute_interrupt_handler_08005984": "execute_interrupt_handler",
                "initialize_and_execute_080059b4": "initialize_and_execute",
                "initialize_and_set_flags_08007e08": "initialize_and_set_flags",
                "initialize_memory_080079c0": "initialize_memory",
                "initialize_memory_08008190": "initialize_memory_2",
                "initialize_program_08001ddc": "initialize_program",
                "initialize_system_08007436": "initialize_system",
                "update_and_set_parameters_0800778c": "update_and_set_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800756c": {
            "additional_data": {
                "FUN_0800756c": {
                    "1": "initialize_settings",
                    "16": "initialize_system",
                    "2": "initialize_memory",
                    "3": "initialize_hardware",
                    "7": "initialize_registers"
                },
                "_DAT_40023800": {
                    "1": "system_flags",
                    "2": "config_register",
                    "3": "status_register",
                    "4": "register_value",
                    "6": "control_register"
                },
                "_DAT_40023804": {
                    "1": "ptr_register_config",
                    "2": "memory_address",
                    "5": "control_register",
                    "6": "base_address"
                },
                "_DAT_40023808": {
                    "1": "ptr_data",
                    "3": "counter"
                },
                "_DAT_4002380c": {
                    "1": "register_value4",
                    "2": "status_register"
                },
                "_DAT_e000ed08": {
                    "1": "system_flags",
                    "2": "scb_shcsr",
                    "3": "interrupt_enable_register",
                    "4": "interrupt_control_register"
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_system_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_system_0800756c",
            "entrypoint": "0x0800756c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080076c8": {
            "additional_data": {
                "((int)param_1 >> 4) * 0x400 + 0x40020014": {
                    "1": "base_address"
                },
                "(int)param_1": {
                    "1": "shifted_input"
                },
                "(int)param_1 >> 4": {
                    "1": "shifted_input_by_four"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_offset",
                    "4": "bit_position"
                },
                "*((int)param_1 >> 4) * 0x400 + 0x40020014": {
                    "1": "array_address"
                },
                "*(uint *)(((int)param_1 >> 4) * 0x400 + 0x40020014)": {
                    "1": "address_value",
                    "2": "target_address",
                    "4": "memory_location"
                },
                "*(uint*)(((int)param_1 >> 4) * 0x400 + 0x40020014)": {
                    "1": "data"
                },
                "0x40020014": {
                    "1": "base_address"
                },
                "1 << (param_1 & 0xf)": {
                    "1": "bit_shifted_value"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "FUN_080076c8": {
                    "1": "update_bit_in_register",
                    "12": "update_bit",
                    "2": "update_bit_in_array"
                },
                "^(param_1 & 0xf)": {
                    "1": "bit_to_toggle"
                },
                "newVariable1": {
                    "1": "base_address"
                },
                "newVariable2": {
                    "1": "shifted_value"
                },
                "param_1": {
                    "1": "register_value",
                    "14": "input",
                    "2": "index",
                    "3": "value",
                    "6": "input_value"
                },
                "param_1 & 0xf": {
                    "1": "bit",
                    "6": "bit_position"
                },
                "param_1 >> 4": {
                    "2": "shifted_input"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid update_bit_080076c8(uint input)\n\n{\n  *(uint *)((shifted_input >> 4) * 0x400 + 0x40020014) =\n       *(uint *)((shifted_input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "current_name": "update_bit_080076c8",
            "entrypoint": "0x080076c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "shifted_input",
                "FUN_080076c8": "update_bit_080076c8",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007756": {
            "additional_data": {
                "FUN_08007756": {
                    "1": "update_counter_and_flags",
                    "17": "update_data",
                    "2": "update_data_and_counters",
                    "5": "update_data_and_flags"
                },
                "get_data_08005a84": {
                    "1": "get_updated_data",
                    "2": "get_data_value",
                    "25": "get_data"
                },
                "increment_counter_08005a68": {
                    "30": "increment_counter"
                },
                "uVar1": {
                    "26": "data",
                    "5": "data_value"
                },
                "update_bit_080076c8": {
                    "1": "update_bit_value",
                    "14": "update_bit",
                    "2": "update_flag",
                    "3": "set_flag",
                    "4": "update_bits"
                },
                "update_bit_flags_08007930": {
                    "2": "set_bit_flags",
                    "20": "update_bit_flags",
                    "8": "update_flags"
                }
            },
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "calling": [],
            "code": "\nvoid update_data_08007756(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  if ((data & 0x1ff) == 0) {\n    update_bit(0x3c);\n  }\n  if ((data & 0xf) == 0) {\n    update_bit_flags();\n  }\n  increment_counter();\n  return;\n}\n\n",
            "current_name": "update_data_08007756",
            "entrypoint": "0x08007756",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007756": "update_data_08007756",
                "get_data_08005a84": "get_data",
                "increment_counter_08005a68": "increment_counter",
                "uVar1": "data",
                "update_bit_080076c8": "update_bit",
                "update_bit_flags_08007930": "update_bit_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800778c": {
            "additional_data": {
                "FUN_0800778c": {
                    "1": "update_parameters",
                    "2": "initialize_settings",
                    "3": "update_flags",
                    "5": "initialize_registers",
                    "6": "update_and_set_parameters"
                },
                "_DAT_40023830": {
                    "1": "flag_register"
                },
                "iVar1": {
                    "1": "current_index",
                    "7": "index",
                    "8": "offset"
                },
                "local_10": {
                    "1": "flag_values",
                    "2": "parameter_ptr",
                    "3": "param_array"
                },
                "local_10[5]": {
                    "1": "value"
                },
                "local_14": {
                    "1": "register_4",
                    "2": "param_value_4",
                    "3": "parameter_4",
                    "4": "parameter4",
                    "8": "param_4",
                    "9": "param4"
                },
                "local_18": {
                    "1": "param_c",
                    "2": "param_value_3",
                    "3": "parameter_3",
                    "4": "parameter3",
                    "8": "param_3",
                    "9": "param3"
                },
                "local_1c": {
                    "1": "value2",
                    "2": "param_value_2",
                    "3": "parameter_2",
                    "4": "parameter2",
                    "8": "param_2",
                    "9": "param2"
                },
                "local_20": {
                    "1": "value1",
                    "2": "param_value_1",
                    "3": "parameter_1",
                    "4": "parameter1",
                    "8": "param_1",
                    "9": "param1"
                },
                "local_24": {
                    "1": "param_bit_mask",
                    "13": "bit_mask",
                    "2": "flag_mask",
                    "7": "bitmask"
                },
                "local_c": {
                    "1": "iteration_count",
                    "11": "index",
                    "2": "iteration_counter",
                    "6": "loop_counter",
                    "9": "counter"
                },
                "set_param_value_0800733e": {
                    "4": "set_parameter_value"
                },
                "update_parameters_08006e88": {
                    "1": "update_settings",
                    "2": "update_parameters"
                }
            },
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid update_and_set_parameters_0800778c(void)\n\n{\n  int offset;\n  int bit_mask;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  uint *param_array;\n  uint index;\n  \n  for (index = 0; index < 0x11; index = index + 1) {\n    offset = index * 0x18;\n    param_array = (uint *)(&DAT_0800bcbc + offset);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*param_array >> 4 & 0xff);\n    bit_mask = 1 << (*param_array & 0xf);\n    param1 = *(undefined4 *)(&DAT_0800bcc0 + offset);\n    param2 = *(undefined4 *)(&DAT_0800bcc4 + offset);\n    param3 = *(undefined4 *)(&DAT_0800bcc8 + offset);\n    param4 = *(undefined4 *)(&DAT_0800bccc + offset);\n    update_parameters(((*param_array >> 4) + 0x100080) * 0x400,&bit_mask);\n    if (-1 < (int)value) {\n      set_parameter_value(((*param_array >> 4) + 0x100080) * 0x400,1 << (*param_array & 0xf) & 0xffff,\n                   value & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_and_set_parameters_0800778c",
            "entrypoint": "0x0800778c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800778c": "update_and_set_parameters_0800778c",
                "iVar1": "offset",
                "local_10": "param_array",
                "local_10[5]": "value",
                "local_14": "param4",
                "local_18": "param3",
                "local_1c": "param2",
                "local_20": "param1",
                "local_24": "bit_mask",
                "local_c": "index",
                "set_param_value_0800733e": "set_parameter_value",
                "update_parameters_08006e88": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007854": {
            "additional_data": {
                "(param_1 & 0xf)": {
                    "3": "bit_position"
                },
                "*(uint *)(((int)param_1 >> 4) * 0x400 + 0x40020010)": {
                    "1": "bit_section",
                    "6": "memory_address"
                },
                "*(uint *)(((int)param_1 >> 4) * 0x400 + 0x40020010) >> (param_1 & 0xf) & 1": {
                    "1": "extract_bit_value(input)"
                },
                "0x400": {
                    "1": "offset"
                },
                "0x40020010": {
                    "3": "base_address"
                },
                "0xf": {
                    "2": "bit_mask"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "DAT_08007858": {
                    "1": "bit_mask"
                },
                "DAT_0800785c": {
                    "1": "shift_amount"
                },
                "DAT_08007860": {
                    "1": "memory_address"
                },
                "FUN_08007854": {
                    "1": "get_bit_from_offset",
                    "2": "get_bit_from_uint",
                    "3": "check_bit_value",
                    "4": "extract_bit"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "PTR_08007854": {
                    "1": "base_pointer"
                },
                "b": {
                    "1": "shifted_input"
                },
                "c": {
                    "1": "offset"
                },
                "d": {
                    "1": "address"
                },
                "e": {
                    "1": "result"
                },
                "int": {
                    "1": "shifted_index"
                },
                "param_1": {
                    "1": "word",
                    "13": "input_value",
                    "2": "input_uint",
                    "8": "input"
                },
                "param_1 & 0xf": {
                    "3": "bit_position",
                    "5": "bit_offset"
                },
                "param_1 >> 4": {
                    "1": "shifted_input"
                },
                "result": {
                    "1": "output"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007884"
            ],
            "code": "\nunsigned_integer check_bit_08007854(unsigned_integer input_value)\n\n{\n  return *(unsigned_integer *)(((shifted_index)input_value >> 4) * 0x400 + 0x40020010) >> (input_value & 0xf) & 1;\n}\n\n",
            "current_name": "check_bit_08007854",
            "entrypoint": "0x08007854",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007854": "check_bit_08007854",
                "int": "shifted_index",
                "param_1": "input_value",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007884": {
            "additional_data": {
                "FUN_08007884": {
                    "1": "decode_bits",
                    "2": "get_bit_values",
                    "3": "get_bitfield_value",
                    "5": "get_bit_flags"
                },
                "check_bit_08007854": {
                    "1": "check_bit"
                },
                "iVar1": {
                    "1": "bit0",
                    "17": "bit_0x36",
                    "2": "bit_0",
                    "3": "bit_flag_0x36",
                    "6": "flag_0x36"
                },
                "iVar2": {
                    "1": "bit_value_0x37",
                    "17": "bit_0x37",
                    "2": "bit_1",
                    "3": "bit_flag_0x37",
                    "6": "flag_0x37"
                },
                "iVar3": {
                    "1": "bit_value_0x38",
                    "17": "bit_0x38",
                    "2": "bit_2",
                    "3": "bit_flag_0x38",
                    "6": "flag_0x38"
                },
                "iVar4": {
                    "1": "bit3",
                    "17": "bit_0x39",
                    "2": "bit_3",
                    "3": "bit_flag_0x39",
                    "6": "flag_0x39"
                },
                "iVar5": {
                    "1": "bit4",
                    "10": "bit_0xf",
                    "2": "flag_0x0f",
                    "3": "bit_0x0_f",
                    "4": "bit_0x0f"
                },
                "uVar6": {
                    "1": "flag0x00",
                    "2": "flag_0x00",
                    "3": "flag_0",
                    "7": "bit_0x0",
                    "8": "bit_0x00"
                }
            },
            "called": [
                "FUN_08007854"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nuint get_bit_flags_08007884(void)\n\n{\n  int bit_0x36;\n  int bit_0x37;\n  int bit_0x38;\n  int bit_0x39;\n  int bit_0xf;\n  uint bit_0x00;\n  \n  bit_0x36 = check_bit(0x36);\n  bit_0x37 = check_bit(0x37);\n  bit_0x38 = check_bit(0x38);\n  bit_0x39 = check_bit(0x39);\n  bit_0xf = check_bit(0xf);\n  bit_0x00 = check_bit(0);\n  return bit_0x00 | bit_0x36 << 4 | bit_0x37 << 3 | bit_0x38 << 2 | bit_0x39 << 1 | bit_0xf << 7;\n}\n\n",
            "current_name": "get_bit_flags_08007884",
            "entrypoint": "0x08007884",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007884": "get_bit_flags_08007884",
                "check_bit_08007854": "check_bit",
                "iVar1": "bit_0x36",
                "iVar2": "bit_0x37",
                "iVar3": "bit_0x38",
                "iVar4": "bit_0x39",
                "iVar5": "bit_0xf",
                "uVar6": "bit_0x00"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080078f4": {
            "additional_data": {
                "FUNK_080078f4": {
                    "1": "calculate_combined_values"
                },
                "FUN_080078f4": {
                    "1": "calculate_combined_value",
                    "2": "combine_bits",
                    "3": "combine_uint_values",
                    "4": "combine_values",
                    "9": "calculate_bitwise_or"
                },
                "local_10": {
                    "1": "counter",
                    "2": "iterator",
                    "26": "index"
                },
                "local_c": {
                    "1": "combined",
                    "12": "result",
                    "13": "combined_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "code": "\nuint calculate_bitwise_or_080078f4(void)\n\n{\n  int index;\n  uint combined_value;\n  \n  combined_value = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    combined_value = *(uint *)(&DAT_20000e54 + index * 4) | combined_value;\n  }\n  return combined_value;\n}\n\n",
            "current_name": "calculate_bitwise_or_080078f4",
            "entrypoint": "0x080078f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080078f4": "calculate_bitwise_or_080078f4",
                "local_10": "index",
                "local_c": "combined_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007930": {
            "additional_data": {
                "FUN_08007930": {
                    "1": "update_bitwise_operations",
                    "2": "update_flags_and_values",
                    "23": "update_bit_flags",
                    "4": "update_bitwise_flags"
                },
                "calculate_bitwise_or_080078f4": {
                    "2": "calculate_or",
                    "3": "calculate_bitwise_or"
                },
                "get_bit_flags_08007884": {
                    "1": "retrieve_bit_flags",
                    "2": "get_bit_flags"
                },
                "iVar1": {
                    "1": "current_value",
                    "2": "counter",
                    "3": "current_flag_index",
                    "8": "index",
                    "9": "current_index"
                },
                "set_bit_if_odd_08007520": {
                    "5": "set_bit_if_odd"
                },
                "uVar2": {
                    "1": "original_value",
                    "2": "previous_value",
                    "4": "current_flags",
                    "9": "previous_bit_flags"
                },
                "uVar3": {
                    "1": "bit_flag",
                    "16": "new_bit_flags",
                    "2": "new_flags_value",
                    "3": "bit_flags",
                    "6": "new_flags"
                },
                "uVar4": {
                    "1": "new_bitmask",
                    "12": "calculated_bitwise_or",
                    "2": "new_bitwise_or",
                    "5": "calculated_flags"
                },
                "uVar5": {
                    "1": "unset_bits",
                    "13": "changed_bits",
                    "2": "bitwise_difference",
                    "4": "changed_flags"
                },
                "uVar5 != 0": {
                    "1": "odd_bit_set"
                },
                "uVar6": {
                    "1": "new_flags"
                },
                "update_function_080074c8": {
                    "5": "update_function"
                }
            },
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid update_bit_flags_08007930(void)\n\n{\n  int current_index;\n  uint previous_bit_flags;\n  undefined4 new_bit_flags;\n  uint calculated_bitwise_or;\n  uint changed_bits;\n  \n  current_index = DAT_20000e68;\n  previous_bit_flags = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    new_bit_flags = get_bit_flags();\n    *(undefined4 *)(&DAT_20000e54 + current_index * 4) = new_bit_flags;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    calculated_bitwise_or = calculate_bitwise_or();\n    previous_bit_flags = DAT_20000e64;\n    if (calculated_bitwise_or != DAT_20000e64) {\n      changed_bits = ~calculated_bitwise_or & DAT_20000e64;\n      if ((~DAT_20000e64 & calculated_bitwise_or) != 0) {\n        update_function(~DAT_20000e64 & calculated_bitwise_or);\n      }\n      previous_bit_flags = calculated_bitwise_or;\n      if (changed_bits != 0) {\n        set_bit_if_odd(changed_bits);\n      }\n    }\n  }\n  DAT_20000e64 = previous_bit_flags;\n  return;\n}\n\n",
            "current_name": "update_bit_flags_08007930",
            "entrypoint": "0x08007930",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007930": "update_bit_flags_08007930",
                "calculate_bitwise_or_080078f4": "calculate_bitwise_or",
                "get_bit_flags_08007884": "get_bit_flags",
                "iVar1": "current_index",
                "set_bit_if_odd_08007520": "set_bit_if_odd",
                "uVar2": "previous_bit_flags",
                "uVar3": "new_bit_flags",
                "uVar4": "calculated_bitwise_or",
                "uVar5": "changed_bits",
                "update_function_080074c8": "update_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079c0": {
            "additional_data": {
                "&DAT_20000e54": {
                    "1": "memory"
                },
                "&DAT_20000e6c": {
                    "1": "flag"
                },
                "0": {
                    "1": "start_offset"
                },
                "0x18": {
                    "2": "size"
                },
                "1": {
                    "1": "value_to_fill"
                },
                "DAT_20000e54": {
                    "1": "memory_to_initialize",
                    "16": "memory_block"
                },
                "DAT_20000e6c": {
                    "1": "data_flag",
                    "19": "flag",
                    "2": "initialized_flag"
                },
                "FUN_080079c0": {
                    "1": "reset_memory",
                    "2": "initialize_data",
                    "27": "initialize_memory"
                },
                "fill_memory_0800b430": {
                    "1": "clear_memory",
                    "25": "fill_memory"
                },
                "void": {
                    "2": "void"
                }
            },
            "called": [
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_memory_080079c0(void)\n\n{\n  fill_memory(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "current_name": "initialize_memory_080079c0",
            "entrypoint": "0x080079c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079c0": "initialize_memory_080079c0",
                "fill_memory_0800b430": "fill_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079e0": {
            "additional_data": {
                "(param_1 & 0x1f)": {
                    "1": "bit_index"
                },
                "(uint)(int)(char)param_1": {
                    "1": "unsigned_input_byte"
                },
                "(uint)(int)(char)param_1 >> 5": {
                    "1": "shifted_unsigned_input_byte"
                },
                "*((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "int_ptr"
                },
                "*(int *)": {
                    "1": "memory_address"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_location",
                    "2": "target_memory_address",
                    "5": "memory_address"
                },
                "-0x1fff1f00": {
                    "1": "memory_address"
                },
                "0x1fff1f00": {
                    "1": "memory_offset"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bitwise_shifted_value",
                    "2": "bit_value",
                    "3": "bit_to_set",
                    "4": "bit_mask"
                },
                "FUN_080079e0": {
                    "1": "store_bitwise_shifted_value",
                    "12": "set_bit_in_memory",
                    "3": "set_bit_value",
                    "4": "set_bit_in_array",
                    "7": "set_bit"
                },
                "char": {
                    "2": "character"
                },
                "int": {
                    "1": "signed_integer"
                },
                "int *": {
                    "1": "bit_array"
                },
                "param_1": {
                    "1": "byte_value_to_set",
                    "18": "input_byte",
                    "2": "byte_to_set",
                    "3": "bit_position",
                    "4": "byte_value"
                },
                "param_1 & 0x1f": {
                    "1": "bit_mask"
                },
                "param_1 >> 5": {
                    "1": "shifted_input_byte"
                },
                "uint": {
                    "1": "unsigned_int"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007a70"
            ],
            "code": "\nvoid set_bit_in_memory_080079e0(byte input_byte)\n\n{\n  *(signed_integer *)((unsigned_input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080079e0",
            "entrypoint": "0x080079e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(uint)(int)(char)param_1": "unsigned_input_byte",
                "FUN_080079e0": "set_bit_in_memory_080079e0",
                "char": "character",
                "int": "signed_integer",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007a10": {
            "additional_data": {
                "&DAT_40000800": {
                    "1": "pointer_to_dat_40000800"
                },
                "0x40000000": {
                    "1": "pointer_a"
                },
                "0x40000400": {
                    "1": "pointer_b"
                },
                "DAT_40000800": {
                    "1": "dat_40000800"
                },
                "DAT_40023840": {
                    "1": "flag"
                },
                "FUN_08007a10": {
                    "1": "update_permission_flag",
                    "10": "update_flag",
                    "2": "update_flags",
                    "5": "update_data_flags"
                },
                "_DAT_40023840": {
                    "1": "flag_value",
                    "2": "status_flags",
                    "3": "data_flag",
                    "4": "flags",
                    "5": "data_flags"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "value",
                    "3": "param",
                    "5": "input_pointer",
                    "6": "input",
                    "9": "data_pointer"
                },
                "undefined": {
                    "2": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "code": "\n\n\nvoid update_flag_08007a10(void *data_pointer)\n\n{\n  if (data_pointer == (void *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (data_pointer == (void *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (data_pointer == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "current_name": "update_flag_08007a10",
            "entrypoint": "0x08007a10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007a10": "update_flag_08007a10",
                "param_1": "data_pointer",
                "undefined": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007a70": {
            "additional_data": {
                "FUN_08007a70": {
                    "1": "process_memory_entry",
                    "2": "process_address",
                    "3": "process_memory_region",
                    "4": "process_data",
                    "5": "process_memory"
                },
                "local_c": {
                    "1": "region_code",
                    "14": "shifted_bits",
                    "2": "selected_value",
                    "6": "shift_amount"
                },
                "param_1": {
                    "1": "param",
                    "2": "parameter",
                    "3": "memory_pointer",
                    "4": "memory_address",
                    "6": "input_ptr"
                },
                "param_2": {
                    "1": "first_param",
                    "13": "value1",
                    "2": "param2",
                    "3": "first_parameter",
                    "7": "value_1"
                },
                "param_3": {
                    "1": "value_3",
                    "13": "value2",
                    "2": "param3",
                    "3": "second_parameter",
                    "7": "value_2"
                },
                "set_bit_in_memory_080079e0": {
                    "1": "set_bit_in_memory"
                },
                "store_shifted_bits_08006cf6": {
                    "1": "store_shifted_bits"
                }
            },
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "calling": [
                "FUN_08007ad0"
            ],
            "code": "\nvoid process_memory_08007a70(undefined *input_ptr,undefined4 value1,undefined4 value2)\n\n{\n  undefined shifted_bits;\n  \n  if (input_ptr == (undefined *)0x40000000) {\n    shifted_bits = 0x1c;\n  }\n  else if (input_ptr == (undefined *)0x40000400) {\n    shifted_bits = 0x1d;\n  }\n  else {\n    if (input_ptr != &DAT_40000800) {\n      return;\n    }\n    shifted_bits = 0x1e;\n  }\n  store_shifted_bits(shifted_bits,value1,value2);\n  set_bit_in_memory(shifted_bits);\n  return;\n}\n\n",
            "current_name": "process_memory_08007a70",
            "entrypoint": "0x08007a70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007a70": "process_memory_08007a70",
                "local_c": "shifted_bits",
                "param_1": "input_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "set_bit_in_memory_080079e0": "set_bit_in_memory",
                "store_shifted_bits_08006cf6": "store_shifted_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "additional_data": {
                "DAT_20000000": {
                    "1": "memory_limit"
                },
                "FUN_08007ad0": {
                    "1": "initialize_registers",
                    "28": "initialize_memory"
                },
                "TASK1": {
                    "1": "base_address"
                },
                "TASK10": {
                    "1": "task10"
                },
                "TASK11": {
                    "1": "task11"
                },
                "TASK12": {
                    "1": "task12"
                },
                "TASK13": {
                    "1": "task13"
                },
                "TASK14": {
                    "1": "task14"
                },
                "TASK15": {
                    "1": "task15"
                },
                "TASK16": {
                    "1": "task16"
                },
                "TASK2": {
                    "1": "task2"
                },
                "TASK3": {
                    "1": "task3"
                },
                "TASK4": {
                    "1": "task4"
                },
                "TASK5": {
                    "1": "task5"
                },
                "TASK6": {
                    "1": "task6"
                },
                "TASK7": {
                    "1": "task7"
                },
                "TASK8": {
                    "1": "task8"
                },
                "TASK9": {
                    "1": "task9"
                },
                "_": {
                    "1": "_"
                },
                "_DAT_40000000": {
                    "1": "memory_location",
                    "2": "data0",
                    "3": "flag"
                },
                "_DAT_40000001": {
                    "1": "data1"
                },
                "_DAT_40000002": {
                    "1": "data2"
                },
                "_DAT_40000003": {
                    "1": "data3"
                },
                "_DAT_40000004": {
                    "1": "register2",
                    "2": "data1"
                },
                "_DAT_40000008": {
                    "1": "mem_location3",
                    "2": "data2"
                },
                "_DAT_4000000c": {
                    "1": "register4",
                    "2": "data3"
                },
                "_DAT_40000010": {
                    "1": "data5",
                    "2": "data4"
                },
                "_DAT_40000028": {
                    "1": "memory_limit",
                    "2": "memory_size"
                },
                "_DAT_4000002c": {
                    "1": "data7"
                },
                "_DAT_40000034": {
                    "1": "data7"
                },
                "_DAT_40000038": {
                    "1": "data7"
                },
                "_DAT_4000003c": {
                    "1": "memory_location_10"
                },
                "_DAT_40000040": {
                    "1": "memory_address11"
                },
                "_DAT_40000048": {
                    "1": "memory_segment12"
                },
                "_DAT_4000004c": {
                    "1": "memory_location13"
                },
                "_FUN_40000000": {
                    "1": "memory_address"
                },
                "_FUN_40000028": {
                    "1": "counter"
                },
                "_FUN_4000002c": {
                    "1": "unused_variable"
                },
                "_FUN_40000034": {
                    "1": "unused_variable"
                },
                "_FUN_40000038": {
                    "1": "unused_variable"
                },
                "_FUN_4000003c": {
                    "1": "unused_variable"
                },
                "_FUN_40000040": {
                    "1": "unused_variable"
                },
                "_FUN_40000048": {
                    "1": "unused_variable"
                },
                "_FUN_4000004c": {
                    "1": "unused_variable"
                },
                "process_memory_08007a70": {
                    "1": "clear_memory",
                    "26": "process_memory"
                },
                "update_flag_08007a10": {
                    "11": "update_flag",
                    "3": "set_flag"
                }
            },
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid initialize_memory_08007ad0(void)\n\n{\n  update_flag(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  process_memory(0x40000000,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_memory_08007ad0",
            "entrypoint": "0x08007ad0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0",
                "process_memory_08007a70": "process_memory",
                "update_flag_08007a10": "update_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007b70": {
            "additional_data": {
                "FUN_08007b70": {
                    "1": "configure_output_options",
                    "2": "update_data_flags",
                    "3": "configure_flags",
                    "4": "set_flags",
                    "8": "set_flags_and_values",
                    "9": "update_flags"
                },
                "_DAT_40000000": {
                    "1": "data2"
                },
                "_DAT_4000000c": {
                    "1": "result_1"
                },
                "_DAT_40000034": {
                    "2": "flag1",
                    "5": "condition_1"
                },
                "_DAT_40000038": {
                    "2": "flag2",
                    "5": "condition_2"
                },
                "local_c": {
                    "1": "status",
                    "2": "flag_value",
                    "21": "flags"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid update_flags_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "current_name": "update_flags_08007b70",
            "entrypoint": "0x08007b70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007b70": "update_flags_08007b70",
                "local_c": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "additional_data": {
                "FUN_08007bc2": {
                    "1": "clear_bit_masks",
                    "18": "clear_flags",
                    "2": "clear_bitwise_flags",
                    "7": "clear_bits"
                },
                "_DAT_40000000": {
                    "1": "flags1",
                    "2": "flags",
                    "3": "value1",
                    "9": "flag1"
                },
                "_DAT_4000000c": {
                    "1": "bits_register",
                    "2": "data_register2",
                    "3": "value2",
                    "9": "flag2"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                }
            },
            "called": [],
            "calling": [
                "FUN_080057e4"
            ],
            "code": "\n\n\nvoid clear_flags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "current_name": "clear_flags_08007bc2",
            "entrypoint": "0x08007bc2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007bc2": "clear_flags_08007bc2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "additional_data": {
                "FUN_08007bf0": {
                    "1": "update_and_limit_value",
                    "2": "set_minimum_value",
                    "3": "update_minimum_value",
                    "7": "update_data",
                    "9": "update_min_value"
                },
                "_DAT_40000024": {
                    "1": "param_limit_value",
                    "11": "min_value",
                    "2": "current_min_value",
                    "5": "minimum_value"
                },
                "_DAT_4000002c": {
                    "1": "minimum_value",
                    "2": "current_minimum",
                    "6": "current_value",
                    "8": "current_min_value"
                },
                "param_1": {
                    "1": "param",
                    "2": "value",
                    "24": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005324"
            ],
            "code": "\n\n\nvoid update_min_value_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_min_value_08007bf0",
            "entrypoint": "0x08007bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007bf0": "update_min_value_08007bf0",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c40": {
            "additional_data": {
                "FUN_08007c40": {
                    "1": "initialize_global_data",
                    "2": "set_param_value",
                    "3": "set_global_parameter",
                    "4": "set_global_value",
                    "9": "set_global_variable"
                },
                "_DAT_40000034": {
                    "1": "global_parameter",
                    "10": "global_variable"
                },
                "param_1": {
                    "1": "new_data",
                    "10": "new_value",
                    "13": "value",
                    "2": "data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_global_variable_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "current_name": "set_global_variable_08007c40",
            "entrypoint": "0x08007c40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c40": "set_global_variable_08007c40",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "additional_data": {
                "FUN_08007c5e": {
                    "1": "set_data",
                    "12": "set_global_variable",
                    "2": "store_parameter",
                    "4": "set_global_value"
                },
                "_DAT_40000038": {
                    "1": "global_var",
                    "11": "global_variable",
                    "2": "global_data"
                },
                "param_1": {
                    "1": "data_value",
                    "16": "value",
                    "2": "parameter",
                    "3": "data",
                    "5": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_global_variable_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "current_name": "set_global_variable_08007c5e",
            "entrypoint": "0x08007c5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "additional_data": {
                "FUN_08007c7c": {
                    "1": "update_if_conditions",
                    "2": "update_data_if_triggered",
                    "3": "update_flags",
                    "5": "update_flags_and_data"
                },
                "F_U_08007c7c": {
                    "1": "update_data_if_flags_set"
                },
                "_DAT_4000000c": {
                    "1": "other_flags_register",
                    "2": "status_register",
                    "4": "data",
                    "9": "control_register"
                },
                "_DAT_40000010": {
                    "1": "flags_reg",
                    "10": "flags_register",
                    "2": "status_register",
                    "4": "flags"
                },
                "update_data_080053a0": {
                    "1": "update_flagged_data_3",
                    "3": "update_data3",
                    "4": "update_data_3"
                },
                "update_data_08005760": {
                    "1": "update_data_flag_set_cond_2",
                    "3": "update_data2",
                    "4": "update_data_2"
                },
                "update_data_08005778": {
                    "1": "update_data_function_1",
                    "3": "update_data1",
                    "4": "update_data_1"
                }
            },
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_flags_and_data_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    update_data_1();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    update_data_2();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_data_3();\n  }\n  return;\n}\n\n",
            "current_name": "update_flags_and_data_08007c7c",
            "entrypoint": "0x08007c7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c7c": "update_flags_and_data_08007c7c",
                "update_data_080053a0": "update_data_3",
                "update_data_08005760": "update_data_2",
                "update_data_08005778": "update_data_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007d08": {
            "additional_data": {
                "DAT_20000000": {
                    "1": "input_frequency",
                    "2": "clock_frequency"
                },
                "DAT_40000800": {
                    "1": "flag_status"
                },
                "FUN_08007d08": {
                    "1": "initialize_hardware_settings",
                    "10": "initialize_flags",
                    "2": "initialize_flag",
                    "3": "initialize_device",
                    "4": "initialize_registers",
                    "5": "initialize_system",
                    "6": "initialize_hardware"
                },
                "_DAT_40000800": {
                    "1": "device_control_register1",
                    "13": "flag_register",
                    "2": "flag_status",
                    "8": "flag"
                },
                "_DAT_40000804": {
                    "1": "register_a"
                },
                "_DAT_40000808": {
                    "1": "flag2",
                    "2": "register1"
                },
                "_DAT_4000080c": {
                    "1": "register2"
                },
                "_DAT_40000810": {
                    "1": "register_4"
                },
                "_DAT_40000814": {
                    "1": "timer1_enable",
                    "12": "enable_flag",
                    "2": "is_initialized"
                },
                "_DAT_40000818": {
                    "1": "timer",
                    "2": "timer_register",
                    "3": "timer_value"
                },
                "_DAT_4000081c": {
                    "1": "register_e"
                },
                "_DAT_40000820": {
                    "1": "data_register_3"
                },
                "_DAT_40000824": {
                    "1": "data_register_4"
                },
                "_DAT_40000828": {
                    "1": "variable8",
                    "2": "prescaler",
                    "3": "prescaler_value"
                },
                "_DAT_4000082c": {
                    "1": "timer_counter",
                    "2": "interrupt_priority"
                },
                "_DAT_40000834": {
                    "1": "register_2"
                },
                "_DAT_40000838": {
                    "1": "timer_delay",
                    "2": "timeout_value"
                },
                "_DAT_4000083c": {
                    "1": "register_4"
                },
                "_DAT_40000840": {
                    "1": "register_5"
                },
                "_DAT_40000848": {
                    "1": "device_control_register6"
                },
                "_DAT_4000084c": {
                    "1": "device_control_register7"
                },
                "update_flag_08007a10": {
                    "1": "update_flag"
                }
            },
            "called": [
                "FUN_08007a10"
            ],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid initialize_flags_08007d08(void)\n\n{\n  update_flag(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_flags_08007d08",
            "entrypoint": "0x08007d08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007d08": "initialize_flags_08007d08",
                "update_flag_08007a10": "update_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007da8": {
            "additional_data": {
                "FUN_08007da8": {
                    "1": "set_flags_and_values",
                    "17": "set_flags",
                    "2": "update_flags",
                    "3": "set_flags_and_enable"
                },
                "_DAT_40000800": {
                    "1": "flag2",
                    "14": "control_register",
                    "2": "control"
                },
                "_DAT_40000820": {
                    "1": "flags1",
                    "2": "data_flags",
                    "3": "status_register",
                    "5": "flags_register",
                    "6": "flag_register",
                    "7": "flags"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid set_flags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "current_name": "set_flags_08007da8",
            "entrypoint": "0x08007da8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007da8": "set_flags_08007da8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e08": {
            "additional_data": {
                "FUN_08007e08": {
                    "1": "initialize_function",
                    "3": "initialize_system",
                    "4": "initialize_memory_and_flags",
                    "7": "initialize_program",
                    "8": "initialize_and_set_flags"
                },
                "initialize_flags_08007d08": {
                    "30": "initialize_flags"
                },
                "initialize_memory_08007ad0": {
                    "30": "initialize_memory"
                },
                "set_flags_08007da8": {
                    "1": "configure_flags",
                    "29": "set_flags"
                }
            },
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_and_set_flags_08007e08(void)\n\n{\n  initialize_memory();\n  initialize_flags();\n  set_flags();\n  return;\n}\n\n",
            "current_name": "initialize_and_set_flags_08007e08",
            "entrypoint": "0x08007e08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e08": "initialize_and_set_flags_08007e08",
                "initialize_flags_08007d08": "initialize_flags",
                "initialize_memory_08007ad0": "initialize_memory",
                "set_flags_08007da8": "set_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "additional_data": {
                "FUN_08007e1c": {
                    "1": "input_byte_to_data_memory",
                    "2": "set_byte_and_wait",
                    "3": "send_byte",
                    "4": "write_byte_to_memory"
                },
                "_DAT_40004400": {
                    "1": "status_value",
                    "3": "status",
                    "4": "status_register"
                },
                "_DAT_40004404": {
                    "1": "result",
                    "2": "register_data",
                    "3": "memory_address",
                    "6": "output_register"
                },
                "param_1": {
                    "1": "new_byte",
                    "2": "data_byte",
                    "3": "byte_to_set",
                    "4": "byte_to_write",
                    "5": "data",
                    "6": "byte_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "code": "\n\n\nvoid write_byte_to_memory_08007e1c(byte byte_value)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)byte_value;\n  return;\n}\n\n",
            "current_name": "write_byte_to_memory_08007e1c",
            "entrypoint": "0x08007e1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e1c": "write_byte_to_memory_08007e1c",
                "param_1": "byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e58": {
            "additional_data": {
                "0x20": {
                    "1": "bit_mask",
                    "3": "flag_mask"
                },
                "DAT_40004400": {
                    "1": "flag"
                },
                "FUN_08007e58": {
                    "1": "check_bit_5_set",
                    "2": "check_bit_status",
                    "3": "check_flag_set",
                    "6": "check_bit_set",
                    "7": "is_bit_set"
                },
                "_DAT_40004400": {
                    "1": "flag_value",
                    "2": "bit_flag",
                    "5": "status_register",
                    "7": "flag"
                },
                "bool": {
                    "1": "bool"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\n\n\nbool is_bit_set_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "current_name": "is_bit_set_08007e58",
            "entrypoint": "0x08007e58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e58": "is_bit_set_08007e58"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e84": {
            "additional_data": {
                "0xff": {
                    "3": "mask"
                },
                "DAT_40004404": {
                    "1": "data"
                },
                "FUN_08007e84": {
                    "1": "get_lsb",
                    "2": "get_least_significant_byte",
                    "23": "get_lowest_byte",
                    "3": "get_last_byte"
                },
                "_DAT_40004404": {
                    "1": "data_item",
                    "2": "original_value",
                    "3": "data_register",
                    "4": "input_data",
                    "7": "data",
                    "9": "data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "current_name": "get_lowest_byte_08007e84",
            "entrypoint": "0x08007e84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "additional_data": {
                "&DAT_40004400": {
                    "1": "memory_region1"
                },
                "(undefined *)0x40004800": {
                    "1": "memory_region2"
                },
                "(undefined *)0x40004c00": {
                    "1": "memory_address_4"
                },
                "(undefined *)0x40005000": {
                    "1": "memory_region4"
                },
                "(undefined *)0x40011000": {
                    "1": "memory_address_1"
                },
                "(undefined *)0x40011400": {
                    "1": "memory_address_6"
                },
                "0x40004800": {
                    "1": "mem_addr_flag_3"
                },
                "0x40004c00": {
                    "1": "mem_addr_flag_4"
                },
                "0x40005000": {
                    "1": "mem_addr_flag_5"
                },
                "0x40011000": {
                    "1": "mem_addr_flag_1"
                },
                "0x40011400": {
                    "1": "mem_addr_flag_6"
                },
                "FUN_08007ea4": {
                    "1": "set_flag_bits",
                    "15": "update_memory_flags",
                    "3": "update_memory_permissions",
                    "6": "update_flags"
                },
                "_DAT_40023840": {
                    "1": "status_flag2",
                    "2": "register2",
                    "4": "flag2",
                    "5": "flag_register2"
                },
                "_DAT_40023844": {
                    "1": "memory_permission_value1",
                    "2": "register1",
                    "4": "memory_flags1"
                },
                "param_1": {
                    "1": "data_pointer",
                    "17": "memory_address",
                    "2": "input",
                    "9": "address"
                },
                "undefined": {
                    "1": "byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008190"
            ],
            "code": "\n\n\nvoid update_memory_flags_08007ea4(byte *memory_address)\n\n{\n  if (memory_address == (byte *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (memory_address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (memory_address == (byte *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (memory_address == (byte *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (memory_address == (byte *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (memory_address == (byte *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_flags_08007ea4",
            "entrypoint": "0x08007ea4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007ea4": "update_memory_flags_08007ea4",
                "param_1": "memory_address",
                "undefined": "byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007f54": {
            "additional_data": {
                "FUN_08007f54": {
                    "1": "calculate_clock_and_frequency",
                    "14": "calculate_clock_frequency",
                    "2": "calculate_clock_frequency_and_set",
                    "3": "calculate_frequency",
                    "6": "calculate_clock_frequency_and_set_param"
                },
                "calculate_clock_frequency_08006680": {
                    "1": "get_clock_frequency_for_base_address1",
                    "2": "get_clock_frequency1",
                    "3": "calculate_clock_frequency1"
                },
                "calculate_clock_frequency_080066cc": {
                    "1": "calculate_frequency2",
                    "3": "get_clock_frequency2"
                },
                "iVar2": {
                    "1": "frequency_calc1",
                    "2": "calculation1",
                    "3": "calculated_frequency1",
                    "4": "result1"
                },
                "iVar3": {
                    "1": "previous_frequency",
                    "2": "clock_freq2",
                    "3": "calculated_frequency2",
                    "4": "result2"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "base_address",
                    "2": "input_address",
                    "3": "register_address",
                    "7": "address"
                },
                "param_2": {
                    "1": "param",
                    "2": "factor",
                    "3": "divisor",
                    "4": "value",
                    "8": "multiplier"
                },
                "uVar1": {
                    "1": "frequency_ratio",
                    "19": "clock_frequency",
                    "2": "frequency_multiplier",
                    "6": "frequency"
                },
                "uVar4": {
                    "1": "result",
                    "2": "clock_multiplier",
                    "3": "clock_frequency_result",
                    "4": "calculated_frequency",
                    "7": "clock_frequency"
                }
            },
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "calling": [
                "FUN_08008190"
            ],
            "code": "\nvoid calculate_clock_frequency_08007f54(int base_address,int multiplier)\n\n{\n  ulonglong clock_frequency;\n  int result1;\n  int result2;\n  undefined8 clock_frequency;\n  \n  if ((*(uint *)(base_address + 0xc) & 0x8000) == 0) {\n    if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n      clock_frequency = calculate_clock_frequency_08007f541();\n      clock_frequency = (ulonglong)(uint)((int)clock_frequency * 0x19) / (ulonglong)(uint)(multiplier << 2);\n      result1 = calculate_clock_frequency_08007f541((int)clock_frequency,(int)((ulonglong)clock_frequency >> 0x20),(int)(clock_frequency * 0x51eb851f));\n      result2 = calculate_clock_frequency_08007f541();\n      *(uint *)(base_address + 8) =\n           (int)(clock_frequency / 100) << 4 |\n           (((uint)(result1 * 0x19) / (uint)(multiplier << 2) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(multiplier << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clock_frequency = get_clock_frequency2();\n    clock_frequency = (ulonglong)(uint)((int)clock_frequency * 0x19) / (ulonglong)(uint)(multiplier << 2);\n    result1 = get_clock_frequency2((int)clock_frequency,(int)((ulonglong)clock_frequency >> 0x20),(int)(clock_frequency * 0x51eb851f));\n    result2 = get_clock_frequency2();\n    *(uint *)(base_address + 8) =\n         (int)(clock_frequency / 100) << 4 |\n         (((uint)(result1 * 0x19) / (uint)(multiplier << 2) +\n          (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(multiplier << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n      clock_frequency = calculate_clock_frequency_08007f541();\n      clock_frequency = (ulonglong)(uint)((int)clock_frequency * 0x19) / (ulonglong)(uint)(multiplier << 1);\n      result1 = calculate_clock_frequency_08007f541((int)clock_frequency,(int)((ulonglong)clock_frequency >> 0x20),(int)(clock_frequency * 0x51eb851f));\n      result2 = calculate_clock_frequency_08007f541();\n      *(uint *)(base_address + 8) =\n           (int)(clock_frequency / 100) << 4 |\n           (((uint)(result1 * 0x19) / (uint)(multiplier << 1) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(multiplier << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clock_frequency = get_clock_frequency2();\n    clock_frequency = (ulonglong)(uint)((int)clock_frequency * 0x19) / (ulonglong)(uint)(multiplier << 1);\n    result1 = get_clock_frequency2((int)clock_frequency,(int)((ulonglong)clock_frequency >> 0x20),(int)(clock_frequency * 0x51eb851f));\n    result2 = get_clock_frequency2();\n    *(uint *)(base_address + 8) =\n         (int)(clock_frequency / 100) << 4 |\n         (((uint)(result1 * 0x19) / (uint)(multiplier << 1) +\n          (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(multiplier << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_clock_frequency_08007f54",
            "entrypoint": "0x08007f54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007f54": "calculate_clock_frequency_08007f54",
                "calculate_clock_frequency_08006680": "calculate_clock_frequency1",
                "calculate_clock_frequency_080066cc": "get_clock_frequency2",
                "iVar2": "result1",
                "iVar3": "result2",
                "param_1": "base_address",
                "param_2": "multiplier",
                "uVar1": "clock_frequency",
                "uVar4": "clock_frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008190": {
            "additional_data": {
                "0x1c200": {
                    "1": "clock_value"
                },
                "DAT_40004400": {
                    "1": "memory_flags"
                },
                "FUN_08008190": {
                    "1": "initialize_device",
                    "14": "initialize_memory",
                    "2": "initialize_system",
                    "3": "initialize_memory_and_clock",
                    "4": "initialize_memory_flags",
                    "5": "update_memory_flags"
                },
                "_DAT_40004400": {
                    "1": "flag_a",
                    "2": "memory_flag4",
                    "3": "memory_address",
                    "5": "memory"
                },
                "_DAT_4000440c": {
                    "1": "register_0xc",
                    "10": "memory_flags",
                    "2": "memory_flags_1"
                },
                "_DAT_4000440c:": {
                    "1": "flags_1"
                },
                "_DAT_40004410": {
                    "1": "status_register",
                    "2": "memory_flags_2",
                    "3": "clock_config",
                    "6": "clock_frequency"
                },
                "_DAT_40004414": {
                    "1": "reserved_flags",
                    "2": "memory_flag3"
                },
                "calculate_clock_frequency_08007f54": {
                    "1": "compute_clock_frequency",
                    "26": "calculate_clock_frequency"
                },
                "update_memory_flags_08007ea4": {
                    "1": "update_flags",
                    "10": "update_memory_flags"
                }
            },
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid initialize_memory_08008190(void)\n\n{\n  update_memory_flags(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  calculate_clock_frequency(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_08008190",
            "entrypoint": "0x08008190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008190": "initialize_memory_08008190",
                "calculate_clock_frequency_08007f54": "calculate_clock_frequency",
                "update_memory_flags_08007ea4": "update_memory_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008244": {
            "called": [],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008244",
            "entrypoint": "0x08008244",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008250": {
            "additional_data": {
                "FUN_08008250": {
                    "1": "store_byte_to_memory",
                    "30": "write_byte_to_memory"
                },
                "param_1": {
                    "1": "memory_byte",
                    "11": "byte_to_write",
                    "2": "param",
                    "6": "input_byte",
                    "8": "data"
                },
                "write_byte_to_memory_08007e1c": {
                    "2": "write_byte_to_memory"
                }
            },
            "called": [
                "FUN_08007e1c"
            ],
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "code": "\nvoid write_byte_to_memory_08008250(undefined byte_to_write)\n\n{\n  write_byte_to_memory_08008250(byte_to_write);\n  return;\n}\n\n",
            "current_name": "write_byte_to_memory_08008250",
            "entrypoint": "0x08008250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008250": "write_byte_to_memory_08008250",
                "param_1": "byte_to_write",
                "write_byte_to_memory_08007e1c": "write_byte_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800826a": {
            "additional_data": {
                "FUN_0800826a": {
                    "1": "write_to_memory",
                    "19": "write_byte_to_memory",
                    "2": "write_byte_to_memory_wrapper",
                    "9": "write_param_to_memory"
                },
                "param_1": {
                    "1": "input_data",
                    "18": "byte_to_write",
                    "2": "input_param",
                    "3": "value"
                },
                "param_10": {
                    "1": "temp_byte"
                },
                "param_11": {
                    "1": "temp_var"
                },
                "param_12": {
                    "1": "temp_ptr"
                },
                "param_2": {
                    "1": "output_byte"
                },
                "param_3": {
                    "1": "buffer"
                },
                "param_4": {
                    "1": "size"
                },
                "param_5": {
                    "1": "index"
                },
                "param_6": {
                    "1": "count"
                },
                "param_7": {
                    "1": "write_offset"
                },
                "param_8": {
                    "1": "read_offset"
                },
                "param_9": {
                    "1": "temp_data"
                },
                "write_byte_to_memory_08007e1c": {
                    "1": "write_to_memory",
                    "5": "write_byte_to_memory"
                }
            },
            "called": [
                "FUN_08007e1c"
            ],
            "calling": [],
            "code": "\nundefined4 write_byte_to_memory_0800826a(undefined byte_to_write)\n\n{\n  write_byte_to_memory_0800826a(byte_to_write);\n  return 0;\n}\n\n",
            "current_name": "write_byte_to_memory_0800826a",
            "entrypoint": "0x0800826a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800826a": "write_byte_to_memory_0800826a",
                "param_1": "byte_to_write",
                "write_byte_to_memory_08007e1c": "write_byte_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008286": {
            "additional_data": {
                "FUN_08008286": {
                    "1": "process_and_check_data",
                    "2": "check_lowest_byte",
                    "3": "process_byte_if_bit_set",
                    "4": "process_and_return_byte",
                    "5": "process_and_check_byte",
                    "6": "process_data"
                },
                "get_lowest_byte_08007e84": {
                    "1": "get_lowest_value",
                    "14": "get_lowest_byte",
                    "4": "retrieve_lowest_byte"
                },
                "iVar2": {
                    "1": "bit",
                    "2": "bit_result",
                    "3": "bit_is_set",
                    "5": "is_bit_set_result",
                    "9": "is_bit_set"
                },
                "is_bit_set_08007e58": {
                    "1": "check_bit_status",
                    "3": "check_if_bit_is_set",
                    "7": "is_bit_set"
                },
                "process_byte_08005900": {
                    "1": "process_single_byte",
                    "20": "process_byte"
                },
                "uVar1": {
                    "1": "byte_value",
                    "24": "lowest_byte",
                    "3": "byte"
                }
            },
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "calling": [
                "FUN_08003f34"
            ],
            "code": "\nundefined process_data_08008286(void)\n\n{\n  undefined lowest_byte;\n  int is_bit_set;\n  \n  is_bit_set = is_bit_set();\n  if (is_bit_set != 0) {\n    lowest_byte = get_lowest_byte();\n    is_bit_set = process_byte(lowest_byte);\n    if (is_bit_set == 0) {\n      return lowest_byte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "current_name": "process_data_08008286",
            "entrypoint": "0x08008286",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008286": "process_data_08008286",
                "get_lowest_byte_08007e84": "get_lowest_byte",
                "iVar2": "is_bit_set",
                "is_bit_set_08007e58": "is_bit_set",
                "process_byte_08005900": "process_byte",
                "uVar1": "lowest_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080082ba": {
            "called": [],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080082ba",
            "entrypoint": "0x080082ba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080082d0": {
            "additional_data": {
                "FUN_080082d0": {
                    "1": "calculate_result",
                    "2": "perform_operation",
                    "5": "calculate",
                    "7": "reverse_bits"
                },
                "FunnyFunction": {
                    "1": "calculate_result"
                },
                "bVar13": {
                    "1": "is_equal",
                    "2": "is_zero1",
                    "3": "is_zero",
                    "5": "flag1",
                    "7": "condition1"
                },
                "bVar14": {
                    "1": "is_condition2",
                    "2": "is_zero2",
                    "5": "flag2",
                    "7": "condition2"
                },
                "bVar15": {
                    "1": "bool_var3",
                    "2": "flag_3",
                    "4": "is_negative",
                    "5": "flag3",
                    "6": "condition3"
                },
                "bVar2": {
                    "1": "byte_value",
                    "2": "byte_var",
                    "3": "carry_flag",
                    "7": "carry"
                },
                "iVar1": {
                    "1": "ivar1",
                    "2": "shift_amount1",
                    "4": "shift1"
                },
                "iVar8": {
                    "1": "ivar2",
                    "2": "temp3",
                    "4": "shift2"
                },
                "param1": {
                    "1": "multiplier"
                },
                "param2": {
                    "1": "multiplicand"
                },
                "param3": {
                    "1": "multiplier_overflow"
                },
                "param4": {
                    "1": "multiplicand_overflow"
                },
                "param_1": {
                    "1": "num1",
                    "2": "input_a",
                    "22": "input1",
                    "3": "input_1"
                },
                "param_2": {
                    "1": "b",
                    "2": "input_b",
                    "22": "input2",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "2": "input_c",
                    "22": "input3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "d",
                    "2": "input_d",
                    "22": "input4",
                    "3": "input_4"
                },
                "uVar10": {
                    "1": "result4",
                    "2": "temp4",
                    "4": "result2",
                    "5": "temp5"
                },
                "uVar11": {
                    "1": "temp3",
                    "2": "temp4",
                    "4": "temp6"
                },
                "uVar12": {
                    "1": "temp_value7",
                    "2": "result_d",
                    "3": "result4",
                    "4": "temp7"
                },
                "uVar13": {
                    "1": "temp_13"
                },
                "uVar14": {
                    "1": "temp_14"
                },
                "uVar15": {
                    "1": "var13"
                },
                "uVar3": {
                    "1": "temp9",
                    "2": "temp_7",
                    "4": "temp_var1",
                    "5": "result1",
                    "9": "temp1"
                },
                "uVar4": {
                    "1": "temp10",
                    "2": "temp_value2",
                    "4": "temp_var2",
                    "5": "result2",
                    "9": "temp2"
                },
                "uVar5": {
                    "1": "temp_8",
                    "2": "temp_value3",
                    "4": "result3",
                    "9": "temp3"
                },
                "uVar6": {
                    "1": "temp2",
                    "2": "result1",
                    "3": "temp_var4",
                    "6": "temp4",
                    "7": "temp1"
                },
                "uVar6_2": {
                    "1": "input2_copy"
                },
                "uVar7": {
                    "1": "temp_10",
                    "2": "temp_value5",
                    "3": "temp_var5",
                    "6": "temp2"
                },
                "uVar8": {
                    "1": "temp3"
                },
                "uVar9": {
                    "1": "temp_var6",
                    "2": "temp3",
                    "4": "result1",
                    "5": "temp4"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "code": "\nulonglong reverse_bits_080082d0(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp1;\n  uint temp5;\n  int shift2;\n  uint temp4;\n  uint temp5;\n  uint result3;\n  uint temp7;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp1 = input4 ^ 0x80000000;\n  temp4 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ temp1) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (temp4 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)temp4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift2 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  if (condition2) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp4 = temp1;\n      result3 = input3;\n      if (shift2 == -1) {\n        temp4 = input2;\n        result3 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = result3;\n        temp1 = temp4;\n      }\n      condition2 = (result3 | temp4 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | temp1 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp4 == temp1;\n      }\n      if (!condition2) {\n        temp4 = temp4 | 0x80000;\n      }\n      return CONCAT44(temp4,result3);\n    }\n    if (((input2 ^ temp1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp4 | input1) == 0) {\n        input1 = input3;\n        input2 = temp1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp1) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      temp1 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return CONCAT44(temp1,input1 << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - temp4;\n  condition2 = result3 != 0;\n  if (input4 < temp4) {\n    result3 = -result3;\n  }\n  temp5 = input1;\n  temp5 = input2;\n  if (condition2 && temp4 <= input4) {\n    temp4 = temp4 + result3;\n    temp5 = input3;\n    temp5 = temp1;\n    input3 = input1;\n    temp1 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp5,temp5);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    condition2 = temp5 != 0;\n    temp5 = -temp5;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  temp5 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)condition2;\n  }\n  if (temp4 == result3) {\n    temp5 = temp5 ^ 0x100000;\n    if (temp4 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp1 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    temp7 = input3 << (temp1 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp1 = temp5 + input3;\n    temp3 = temp5 << (temp1 & 0xff);\n    temp1 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp5,input3) + ((int)temp5 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp7 = temp5 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp7 = temp7 | 2;\n    }\n    temp5 = (int)temp5 >> (result3 - 0x20 & 0xff);\n    temp1 = temp5 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp5,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    condition2 = temp7 == 0;\n    temp7 = -temp7;\n    result3 = -temp1;\n    temp1 = -(uint)!condition2 - temp1;\n    result3 = -(uint)(condition2 <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < result3) {\n      temp5 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)temp1;\n      temp1 = (uint)(temp5 != 0) << 0x1f | temp1 >> 1;\n      temp7 = (uint)(carry & 1) << 0x1f | temp7 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    condition2 = 0x7fffffff < temp7;\n    if (temp7 == 0x80000000) {\n      condition2 = (temp1 & 1) != 0;\n    }\n    return CONCAT44(result3 + temp5 * 0x100000 + (uint)CARRY4(temp1,(uint)condition2) | input2,\n                    temp1 + condition2);\n  }\n  condition1 = (temp7 & 0x80000000) != 0;\n  temp7 = temp7 << 1;\n  temp5 = temp1 * 2;\n  condition2 = CARRY4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)condition1;\n  result3 = result3 * 2 + (uint)(condition2 || CARRY4(temp5,(uint)condition1));\n  temp5 = temp4 - 2;\n  if (temp4 - 1 != 0 && 0xfffff < result3) goto LAB_080083e0;\n  temp5 = temp1;\n  temp4 = result3;\n  if (result3 == 0) {\n    temp5 = 0;\n    temp4 = temp1;\n  }\n  shift2 = LZCOUNT(temp4);\n  if (result3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result3 = shift2 - 0xb;\n  condition3 = SBORROW4(result3,0x20);\n  temp1 = shift2 - 0x2b;\n  condition2 = (int)temp1 < 0;\n  condition1 = temp1 == 0;\n  if ((int)result3 < 0x20) {\n    condition3 = SCARRY4(temp1,0xc);\n    shift2 = shift2 + -0x1f;\n    condition2 = shift2 < 0;\n    condition1 = shift2 == 0;\n    temp1 = result3;\n    if (!condition1 && condition2 == condition3) {\n      temp5 = temp4 << (result3 & 0xff);\n      temp4 = temp4 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp7 = 0x20 - temp1;\n  }\n  temp4 = temp4 << (temp1 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    temp4 = temp4 | temp5 >> (temp7 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp5 = temp5 << (temp1 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result3 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - result3) * 0x100000 | input2,temp5);\n  }\n  temp1 = ~(temp5 - result3);\n  if ((int)temp1 < 0x1f) {\n    shift2 = temp1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp1 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift2) & 0xff) | temp4 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return CONCAT44(input2 | temp4 >> (temp1 & 0xff),\n                    temp5 >> (temp1 & 0xff) | temp4 << (0x20 - temp1 & 0xff));\n  }\n  return CONCAT44(temp2,temp4 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_080082d0",
            "entrypoint": "0x080082d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080082d0": "reverse_bits_080082d0",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar8": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "temp5",
                "uVar11": "result3",
                "uVar12": "temp7",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp1",
                "uVar7": "temp5",
                "uVar9": "temp4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080082d4": {
            "additional_data": {
                "FUN_080082d4": {
                    "1": "reversed_binary_operation",
                    "2": "calculate",
                    "4": "calculate_sum"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "bVar13": {
                    "1": "is_equal_condition",
                    "2": "is_negative",
                    "5": "is_equal"
                },
                "bVar14": {
                    "1": "is_special_case",
                    "2": "flag2",
                    "3": "condition",
                    "4": "is_condition_met"
                },
                "bVar15": {
                    "1": "is_carry_condition",
                    "2": "carry_flag",
                    "3": "is_negative"
                },
                "bVar2": {
                    "1": "temp_bit",
                    "10": "carry"
                },
                "iVar1": {
                    "1": "variable1",
                    "5": "shift1"
                },
                "iVar6": {
                    "1": "temp9",
                    "2": "temp_8",
                    "5": "shift2"
                },
                "lVar14": {
                    "1": "temp_var12"
                },
                "param_1": {
                    "1": "first_param",
                    "16": "input1",
                    "2": "operand1",
                    "6": "input_1"
                },
                "param_2": {
                    "1": "second_param",
                    "16": "input2",
                    "2": "operand2",
                    "6": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "16": "input3",
                    "2": "operand3",
                    "6": "input_3"
                },
                "param_4": {
                    "1": "input_value4",
                    "16": "input4",
                    "2": "operand4",
                    "6": "input_4"
                },
                "uCARRY4": {
                    "1": "is_carry_occurred"
                },
                "uVar1": {
                    "1": "tmp_shifted"
                },
                "uVar10": {
                    "1": "shifted_output1",
                    "2": "temp4",
                    "5": "difference"
                },
                "uVar11": {
                    "1": "temp_result_shifted",
                    "2": "temp4"
                },
                "uVar12": {
                    "1": "temp9",
                    "2": "temp6",
                    "3": "result"
                },
                "uVar13": {
                    "1": "shifted_output4"
                },
                "uVar16": {
                    "1": "result1"
                },
                "uVar17": {
                    "1": "result2"
                },
                "uVar18": {
                    "1": "carry_bit"
                },
                "uVar2": {
                    "1": "tmp2_shifted"
                },
                "uVar3": {
                    "1": "temp3",
                    "3": "result1",
                    "7": "temp1"
                },
                "uVar4": {
                    "1": "result",
                    "3": "result2",
                    "7": "temp2"
                },
                "uVar5": {
                    "1": "input_b_after_comparison",
                    "2": "result3",
                    "6": "temp3"
                },
                "uVar6": {
                    "1": "shifted_by15_2"
                },
                "uVar7": {
                    "1": "temp4",
                    "3": "shifted_input_2",
                    "7": "shifted_input2"
                },
                "uVar8": {
                    "1": "variable8",
                    "2": "temp1"
                },
                "uVar9": {
                    "1": "u_input1",
                    "3": "shifted_input_4",
                    "6": "shifted_input4"
                }
            },
            "called": [],
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "code": "\nulonglong calculate_sum_080082d4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint temp2;\n  uint shifted_input4;\n  uint difference;\n  uint temp5;\n  uint result;\n  bool is_equal;\n  bool is_condition_met;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  shifted_input4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_condition_met = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_condition_met = (shifted_input2 | input1) == 0;\n  }\n  if (!is_condition_met) {\n    is_condition_met = (shifted_input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_condition_met) {\n    is_condition_met = shift2 == -1;\n  }\n  shift1 = (int)shifted_input4 >> 0x15;\n  if (!is_condition_met) {\n    is_condition_met = shift1 == -1;\n  }\n  if (is_condition_met) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_input4 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        shifted_input4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_input4;\n      }\n      is_condition_met = (shifted_input2 | shifted_input4 << 0xc) == 0;\n      if (is_condition_met) {\n        is_condition_met = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_condition_met) {\n        is_condition_met = shifted_input4 == input4;\n      }\n      if (!is_condition_met) {\n        shifted_input4 = shifted_input4 | 0x80000;\n      }\n      return CONCAT44(shifted_input4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_condition_met = (input1 & 0x80000000) != 0;\n      shifted_input4 = input2 * 2 + (uint)is_condition_met;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_condition_met)) {\n        shifted_input4 = shifted_input4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_input4 = shifted_input4 >> 0x15;\n  difference = shifted_input4 - shifted_input2;\n  is_condition_met = difference != 0;\n  if (shifted_input4 < shifted_input2) {\n    difference = -difference;\n  }\n  temp2 = input1;\n  temp3 = input2;\n  if (is_condition_met && shifted_input2 <= shifted_input4) {\n    shifted_input2 = shifted_input2 + difference;\n    temp2 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,temp2);\n  }\n  shifted_input4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_condition_met = temp2 != 0;\n    temp2 = -temp2;\n    shifted_input4 = -shifted_input4 - (uint)is_condition_met;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_condition_met = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_condition_met;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_input4 = shifted_input4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp5 = input3 << (result & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = temp2 + input3;\n    temp2 = temp3 << (result & 0xff);\n    result = temp1 + temp2;\n    shifted_input4 = shifted_input4 + CARRY4(temp2,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp5 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp5 = temp5 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    result = temp2 + temp3;\n    shifted_input4 = shifted_input4 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp2,temp3);\n  }\n  input2 = shifted_input4 & 0x80000000;\n  difference = shifted_input4;\n  if ((int)shifted_input4 < 0) {\n    is_condition_met = temp5 == 0;\n    temp5 = -temp5;\n    difference = -result;\n    result = -(uint)!is_condition_met - result;\n    difference = -(uint)(is_condition_met <= difference) - shifted_input4;\n  }\n  if (0xfffff < difference) {\n    temp2 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_input4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)result;\n      result = (uint)(shifted_input4 != 0) << 0x1f | result >> 1;\n      temp5 = (uint)(carry & 1) << 0x1f | temp5 >> 1;\n      temp2 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    is_condition_met = 0x7fffffff < temp5;\n    if (temp5 == 0x80000000) {\n      is_condition_met = (result & 1) != 0;\n    }\n    return CONCAT44(difference + temp2 * 0x100000 + (uint)CARRY4(result,(uint)is_condition_met) | input2,\n                    result + is_condition_met);\n  }\n  is_equal = (temp5 & 0x80000000) != 0;\n  temp5 = temp5 << 1;\n  temp2 = result * 2;\n  is_condition_met = CARRY4(result,result);\n  result = result * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_condition_met || CARRY4(temp2,(uint)is_equal));\n  temp2 = shifted_input2 - 2;\n  if (shifted_input2 - 1 != 0 && 0xfffff < difference) goto LAB_080083e0;\n  temp3 = result;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = result;\n  }\n  shift2 = leading_zeros_count(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result = shift2 - 0xb;\n  is_negative = SBORROW4(result,0x20);\n  difference = shift2 - 0x2b;\n  is_condition_met = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)result < 0x20) {\n    is_negative = SCARRY4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_condition_met = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = result;\n    if (!is_equal && is_condition_met == is_negative) {\n      temp3 = shifted_input2 << (result & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_equal || is_condition_met != is_negative) {\n    temp5 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_condition_met != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp5 & 0xff);\n  }\n  if (is_equal || is_condition_met != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_08008458:\n  if ((int)result <= (int)temp2) {\n    return CONCAT44(shifted_input2 + (temp2 - result) * 0x100000 | input2,temp3);\n  }\n  difference = ~(temp2 - result);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_input4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_input4,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_sum_080082d4",
            "entrypoint": "0x080082d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080082d4": "calculate_sum_080082d4",
                "LZCOUNT": "leading_zeros_count",
                "bVar13": "is_equal",
                "bVar14": "is_condition_met",
                "bVar15": "is_negative",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "tmp_shifted",
                "uVar10": "difference",
                "uVar11": "temp5",
                "uVar12": "result",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "temp2",
                "uVar9": "shifted_input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800854c": {
            "additional_data": {
                "0U": {
                    "1": "zero_bits"
                },
                "0x432": {
                    "1": "max_shift_value"
                },
                "CONCAT44": {
                    "1": "combine",
                    "2": "concatenate",
                    "3": "combine_values"
                },
                "FUN_0800854c": {
                    "1": "reversed_bit_shift",
                    "12": "reverse_bits",
                    "2": "shift_and_concatenate",
                    "3": "bitwise_shift"
                },
                "LAB_08008458": {
                    "1": "bitwise_shift",
                    "2": "perform_shift"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "SCARRY4": {
                    "1": "subtraction_carry"
                },
                "bVar5": {
                    "1": "is_negative_or_zero",
                    "17": "is_negative",
                    "2": "is_shift_negative",
                    "5": "is_negative_shift"
                },
                "bVar6": {
                    "1": "shift_amount_zero",
                    "19": "is_zero",
                    "2": "is_shift_zero",
                    "5": "is_zero_shift"
                },
                "bVar7": {
                    "1": "is_negative_upper",
                    "2": "is_borrow",
                    "5": "is_carry",
                    "6": "is_overflow"
                },
                "iVar3": {
                    "1": "shift_count",
                    "13": "leading_zeros",
                    "2": "lz_count",
                    "5": "bit_count",
                    "7": "count"
                },
                "in_r12": {
                    "1": "bit_mask",
                    "2": "remainder",
                    "20": "remaining_bits"
                },
                "param_1": {
                    "1": "number",
                    "2": "input_number",
                    "24": "input",
                    "3": "input_value"
                },
                "uVar1": {
                    "1": "result_upper",
                    "2": "concatenated_value",
                    "3": "result1",
                    "9": "result"
                },
                "uVar2": {
                    "1": "output_lower_bits",
                    "18": "shift_amount"
                },
                "uVar4": {
                    "1": "shift_offset",
                    "2": "shifted_amount",
                    "3": "adjusted_count",
                    "6": "shift_amount"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\nulonglong reverse_bits_0800854c(uint input)\n\n{\n  uint result;\n  uint shift_amount;\n  int leading_zeros;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  leading_zeros = leading_zeros_count(input);\n  shift_amount = leading_zeros + 0x15;\n  is_overflow = SBORROW4(shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_overflow = subtraction_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_overflow == false) {\n      result = input << shift_amount;\n      input = input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto perform_shift;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input = input | zero_bits >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    result = 0 << (shift_amount & 0xff);\n  }\nperform_shift:\n  if (shift_amount < 0x433) {\n    return combine_values(input + (0x432 - shift_amount) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != subtraction_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_values(input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - leading_zeros) & 0xff) | input << (0xcU - leading_zeros & 0xff));\n}\n\n",
            "current_name": "reverse_bits_0800854c",
            "entrypoint": "0x0800854c",
            "imported": false,
            "improved": true,
            "renaming": {
                "0U": "zero_bits",
                "CONCAT44": "combine_values",
                "FUN_0800854c": "reverse_bits_0800854c",
                "LAB_08008458": "perform_shift",
                "LZCOUNT": "leading_zeros_count",
                "SCARRY4": "subtraction_carry",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow",
                "iVar3": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800856c": {
            "additional_data": {
                "CONCAT44": {
                    "1": "combine_values"
                },
                "FUN_0800856c": {
                    "1": "bitwise_shift",
                    "2": "calculate_shifted_value",
                    "3": "bitwise_shift_and_concat",
                    "9": "reverse_bits"
                },
                "LAB_08008458": {
                    "1": "perform_shift"
                },
                "bVar7": {
                    "1": "has_negative_shift",
                    "16": "is_negative",
                    "3": "is_shift_amount_negative",
                    "4": "negative_shift"
                },
                "bVar8": {
                    "1": "equals_zero",
                    "15": "is_zero",
                    "3": "is_shift_amount_zero",
                    "4": "is_zero_shift"
                },
                "bVar9": {
                    "1": "is_borrowed",
                    "2": "carry",
                    "3": "is_borrow",
                    "5": "is_carry",
                    "6": "carry_flag"
                },
                "iVar4": {
                    "1": "shift_count",
                    "17": "leading_zeros",
                    "2": "leading_zeros_count",
                    "3": "lz_count"
                },
                "in_r12": {
                    "1": "in_registers",
                    "13": "remaining_bits",
                    "3": "mask"
                },
                "in_r13": {
                    "1": "shifted_output"
                },
                "param_1": {
                    "1": "num",
                    "24": "input",
                    "4": "input_value"
                },
                "uVar1": {
                    "1": "result",
                    "2": "shift_amount",
                    "3": "bit_count",
                    "5": "shifted_value"
                },
                "uVar2": {
                    "1": "abs_num",
                    "14": "abs_input",
                    "2": "absolute_value",
                    "3": "abs_value"
                },
                "uVar3": {
                    "1": "adjusted_shift_amount",
                    "2": "temp2",
                    "22": "shift_amount"
                },
                "uVar5": {
                    "1": "shift_amount_adjusted",
                    "2": "shifted_leading_zeros",
                    "3": "adjusted_shift_amount"
                },
                "uVar6": {
                    "1": "result",
                    "24": "sign_bit"
                },
                "uVar7": {
                    "1": "shifted_input"
                },
                "uVar8": {
                    "1": "extended_input"
                },
                "uVar9": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "code": "\nulonglong reverse_bits_0800856c(uint input)\n\n{\n  uint shifted_value;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint final_shift_amount;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  shifted_value = 0;\n  leading_zeros = LZCOUNT(abs_input);\n  final_shift_amount = leading_zeros + 0x15;\n  carry_flag = SBORROW4(final_shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (final_shift_amount < 0x20) {\n    carry_flag = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = final_shift_amount;\n    if (!is_zero && carry_flag == false) {\n      shifted_value = abs_input << final_shift_amount;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto combine_bits;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\ncombine_bits:\n  if (final_shift_amount < 0x433) {\n    return combine_values(abs_input + (0x432 - final_shift_amount) * 0x100000 | sign_bit,shifted_value);\n  }\n  shift_amount = ~(0x432 - final_shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return combine_values(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_values(sign_bit | abs_input >> (shift_amount & 0xff),\n                    shifted_value >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return combine_values(input,shifted_value >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_0800856c",
            "entrypoint": "0x0800856c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_values",
                "FUN_0800856c": "reverse_bits_0800856c",
                "LAB_08008458": "combine_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "shifted_value",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "final_shift_amount",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008590": {
            "additional_data": {
                "FUN_08008590": {
                    "1": "decode_unsigned_long_long",
                    "23": "reverse_bits"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "SBORROW4": {
                    "1": "is_s_borrow"
                },
                "SCARRY4": {
                    "1": "is_s_carry"
                },
                "bVar10": {
                    "1": "check_3",
                    "2": "carry_flag",
                    "4": "is_negative"
                },
                "bVar8": {
                    "1": "carry_flag",
                    "2": "condition1",
                    "4": "is_zero",
                    "5": "is_negative"
                },
                "bVar9": {
                    "1": "b_var9",
                    "2": "is_mask_zero",
                    "3": "is_ff000000",
                    "9": "is_zero"
                },
                "iVar6": {
                    "1": "num_bits",
                    "12": "bit_count",
                    "3": "shift_amount",
                    "8": "count"
                },
                "in_r12": {
                    "1": "temp_var8",
                    "2": "temp2",
                    "5": "remainder",
                    "7": "remaining_bits"
                },
                "new_variable_name_1": {
                    "1": "lzcount"
                },
                "new_variable_name_2": {
                    "1": "unused_variable"
                },
                "new_variable_name_n": {
                    "1": "unused_variable"
                },
                "param_1": {
                    "1": "value",
                    "22": "input",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "unknown_1",
                    "3": "param_2",
                    "4": "unused1",
                    "7": "param2"
                },
                "param_3": {
                    "1": "unknown2",
                    "3": "param_3",
                    "4": "unused2",
                    "7": "param3"
                },
                "param_4": {
                    "1": "bit_mask",
                    "2": "flags",
                    "3": "param_4",
                    "7": "param4"
                },
                "uVar1": {
                    "1": "msb_set",
                    "2": "bit_31",
                    "3": "upper_bit",
                    "4": "sign_bit",
                    "5": "bit31"
                },
                "uVar2": {
                    "1": "output",
                    "11": "temp1",
                    "2": "temp_1",
                    "4": "temp",
                    "5": "shifted_input"
                },
                "uVar3": {
                    "1": "high_bits",
                    "2": "result1",
                    "8": "result"
                },
                "uVar4": {
                    "1": "bit_count",
                    "2": "temp2",
                    "3": "shift_amount",
                    "4": "shifted",
                    "5": "shifted_input"
                },
                "uVar5": {
                    "1": "shifted_input_times_two",
                    "2": "double_input",
                    "3": "temp",
                    "6": "shifted_input",
                    "7": "temp2"
                },
                "uVar7": {
                    "1": "difference",
                    "2": "shift",
                    "3": "diff",
                    "9": "shift_amount"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "code": "\nulonglong reverse_bits_08008590(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint bit31;\n  uint temp1;\n  uint result_high;\n  uint shifted_input;\n  uint temp2;\n  int bit_count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_negative;\n  \n  temp2 = input << 1;\n  is_zero = temp2 == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)temp2 >> 3) >> 1;\n  result_high = bit31 | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    param4 = temp2 & 0xff000000;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result_high,input) ^ 0x3800000000000000;\n  }\n  if ((temp2 & 0xffffff) == 0) {\n    return CONCAT44(result_high,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(result_high,input) | 0x8000000000000;\n  }\n  temp1 = input;\n  temp2 = shifted_input;\n  if (shifted_input == 0) {\n    temp1 = 0;\n    temp2 = input;\n  }\n  bit_count = leading_zero_count(temp2);\n  if (shifted_input == 0) {\n    bit_count = bit_count + 0x20;\n  }\n  shift_amount = bit_count - 0xb;\n  is_negative = is_s_borrow(shift_amount,0x20);\n  shifted_input = bit_count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_negative = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = is_s_carry(shifted_input,0xc);\n    bit_count = bit_count + -0x1f;\n    is_zero = bit_count < 0;\n    is_negative = bit_count == 0;\n    shifted_input = shift_amount;\n    if (!is_negative && is_zero == is_negative) {\n      temp1 = temp2 << (shift_amount & 0xff);\n      temp2 = temp2 >> (0xcU - bit_count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_negative || is_zero != is_negative) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  temp2 = temp2 << (shifted_input & 0xff);\n  if (is_negative || is_zero != is_negative) {\n    temp2 = temp2 | temp1 >> (remaining_bits & 0xff);\n  }\n  if (is_negative || is_zero != is_negative) {\n    temp1 = temp1 << (shifted_input & 0xff);\n  }\nLAB_08008458:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(temp2 + (0x380 - shift_amount) * 0x100000 | bit31,temp1);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_input) {\n    return CONCAT44(result_high,temp2 >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bit_count = shifted_input - 0x13;\n  if (bit_count == 0 || bit_count < 0 != is_s_carry(shifted_input - 0x1f,0xc)) {\n    shifted_input = shifted_input + 1;\n    return CONCAT44(bit31 | temp2 >> (shifted_input & 0xff),\n                    temp1 >> (shifted_input & 0xff) | temp2 << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result_high,temp1 >> (0x20 - (0xcU - bit_count) & 0xff) | temp2 << (0xcU - bit_count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_08008590",
            "entrypoint": "0x08008590",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008590": "reverse_bits_08008590",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "is_s_borrow",
                "SCARRY4": "is_s_carry",
                "bVar10": "is_negative",
                "bVar8": "is_negative",
                "bVar9": "is_zero",
                "iVar6": "bit_count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bit31",
                "uVar2": "temp1",
                "uVar3": "result_high",
                "uVar4": "shifted_input",
                "uVar5": "temp2",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008640": {
            "additional_data": {
                "FUN_08008640": {
                    "1": "calculate_floating_point_product",
                    "12": "calculate_result",
                    "2": "calculate",
                    "3": "calculate_floating_point",
                    "8": "calculate_product"
                },
                "bVar10": {
                    "1": "is_shifted",
                    "12": "flag2",
                    "3": "is_negative",
                    "5": "condition2"
                },
                "bVar11": {
                    "1": "is_greater2",
                    "11": "flag3",
                    "2": "is_overflow",
                    "5": "condition3"
                },
                "bVar9": {
                    "1": "is_exponent1_zero",
                    "11": "flag1",
                    "5": "condition1",
                    "7": "is_zero"
                },
                "iVar5": {
                    "1": "i_var5",
                    "4": "temp_var3",
                    "5": "sum",
                    "7": "temp3"
                },
                "lVar2": {
                    "1": "intermediate_result2",
                    "2": "result_2",
                    "4": "result2",
                    "5": "temp2"
                },
                "label1": {
                    "1": "skip_shift"
                },
                "param_1": {
                    "1": "first_param",
                    "12": "input1",
                    "2": "num1",
                    "3": "input_param1",
                    "6": "value1"
                },
                "param_2": {
                    "1": "second_param",
                    "12": "input2",
                    "2": "input_2",
                    "3": "input_param2",
                    "5": "value2"
                },
                "param_3": {
                    "1": "third_param",
                    "10": "input3",
                    "3": "input_param3",
                    "5": "value3"
                },
                "param_4": {
                    "1": "input_value4",
                    "10": "input4",
                    "3": "input_param4",
                    "5": "value4"
                },
                "reverse_bits_0800881c": {
                    "2": "reverse_bits"
                },
                "uVar1": {
                    "1": "fraction_mul1",
                    "2": "result",
                    "3": "product1",
                    "5": "result1"
                },
                "uVar12": {
                    "1": "input_value_combined",
                    "2": "combined",
                    "5": "combined_input",
                    "6": "combined_params"
                },
                "uVar3": {
                    "1": "shifted_param2",
                    "11": "temp1",
                    "3": "temp_var1",
                    "5": "temp3"
                },
                "uVar4": {
                    "1": "value2_extracted",
                    "10": "temp2",
                    "2": "u_var4",
                    "3": "temp_var2",
                    "4": "temp4"
                },
                "uVar6": {
                    "1": "result_6",
                    "2": "temp3",
                    "3": "temp_var4",
                    "4": "temp6",
                    "8": "temp4"
                },
                "uVar7": {
                    "1": "sum_of_ms_bs_with_carry",
                    "2": "u_var7",
                    "3": "temp8",
                    "4": "temp6"
                },
                "uVar8": {
                    "1": "temp_u_var8",
                    "2": "u_var8",
                    "3": "temp9",
                    "4": "temp6",
                    "6": "temp7"
                },
                "unaff_r5": {
                    "1": "unaff_r5",
                    "2": "temp4",
                    "5": "temp7",
                    "6": "temp5"
                }
            },
            "called": [
                "FUN_0800881c"
            ],
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "code": "\nulonglong calculate_result_08008640(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong temp1;\n  longlong temp2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp5;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_params;\n  \n  combined_params = CONCAT44(input2,input1);\n  temp5 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_params = reverse_bits();\n  }\n  temp1 = (uint)(combined_params >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp5 << 0x15);\n  input4 = input4 & ~(temp5 << 0x15);\n  flag1 = ((uint)combined_params | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_params | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp5 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp5,temp4);\n      temp1 = temp5 - temp4;\n      flag1 = temp5 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp5 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    temp1 = (combined_params & 0xffffffff) * (ulonglong)input3;\n    combined_params = (combined_params & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (temp1 >> 0x20);\n    temp7 = (uint)combined_params;\n    temp2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_params >> 0x20);\n    temp5 = (uint)temp2;\n    temp1 = (uint)((ulonglong)temp2 >> 0x20);\n    if ((int)temp1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      temp2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp5,temp5) || CARRY4(temp5 * 2,(uint)flag1)),\n                       temp5 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)temp2 >> 0x20) << 0xb | (uint)temp2 >> 0x15;\n    input3 = (uint)temp2 << 0xb | temp7 >> 0x15;\n    temp5 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp5;\n      if (temp5 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp5 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp5 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp5 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_result_08008640",
            "entrypoint": "0x08008640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008640": "calculate_result_08008640",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "flag1",
                "iVar5": "temp3",
                "lVar2": "temp2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_0800881c": "reverse_bits",
                "uVar1": "temp1",
                "uVar12": "combined_params",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800881c": {
            "additional_data": {
                "FUN_0800881c": {
                    "1": "reverse_and_bitwise_operation",
                    "9": "reverse_bits"
                },
                "bVar4": {
                    "1": "is_zero_flag",
                    "2": "flag",
                    "22": "is_zero"
                },
                "in_r12": {
                    "1": "flag2",
                    "2": "temp4",
                    "3": "bit_5",
                    "4": "temp2"
                },
                "param_1": {
                    "1": "data_1",
                    "10": "input_1",
                    "17": "input1"
                },
                "param_2": {
                    "1": "bit_input_2",
                    "10": "input_2",
                    "17": "input2"
                },
                "param_3": {
                    "1": "data_3",
                    "10": "input_3",
                    "17": "input3"
                },
                "param_4": {
                    "1": "input_value_4",
                    "10": "input_4",
                    "17": "input4"
                },
                "uVar1": {
                    "1": "temp_var_1",
                    "2": "temp2",
                    "3": "temp3",
                    "5": "bit_1",
                    "7": "bit1"
                },
                "uVar2": {
                    "1": "flag2",
                    "2": "temp3",
                    "3": "temp2",
                    "4": "bit3"
                },
                "uVar3": {
                    "1": "result",
                    "2": "temp4",
                    "3": "temp3",
                    "4": "bit4"
                },
                "uVar5": {
                    "1": "flag2"
                },
                "uVar6": {
                    "1": "shifted_bit_4"
                },
                "unaff_r4": {
                    "1": "temp_var1",
                    "2": "constant2",
                    "3": "bit_2",
                    "5": "bit2",
                    "8": "temp1"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008640"
            ],
            "code": "\nulonglong reverse_bits_0800881c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit3;\n  uint bit4;\n  uint temp2;\n  bool is_zero;\n  \n  bit3 = temp2 & input4 >> 0x14;\n  if (temp1 != temp2 && bit3 != temp2) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      bit4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  bit4 = input2;\n  if (((!is_zero) && ((temp1 != temp2 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit3 != temp2 || (input1 = input3, bit4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_0800881c",
            "entrypoint": "0x0800881c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800881c": "reverse_bits_0800881c",
                "bVar4": "is_zero",
                "in_r12": "temp2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008894": {
            "additional_data": {
                "FUN_08008894": {
                    "1": "improved_double_calculation",
                    "18": "calculate_double_precision",
                    "2": "calculate_double",
                    "7": "calculate_floating_point"
                },
                "bVar14": {
                    "1": "is_zero1",
                    "11": "flag1",
                    "2": "flag_1",
                    "3": "condition1",
                    "4": "is_zero"
                },
                "bVar15": {
                    "1": "condition_2",
                    "11": "flag2",
                    "2": "bool2",
                    "3": "condition2"
                },
                "bVar16": {
                    "1": "condition_3",
                    "2": "bool3",
                    "3": "flag_var_3",
                    "9": "flag3"
                },
                "bVar17": {
                    "1": "temp_bool_4"
                },
                "iVar8": {
                    "1": "exp_diff",
                    "13": "temp8",
                    "3": "temp_8",
                    "5": "temp_var_8"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "num1",
                    "3": "input_1",
                    "5": "input1",
                    "6": "input_param_1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "2": "num2",
                    "3": "input_2",
                    "5": "value2",
                    "6": "input_param_2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "num3",
                    "3": "input_3",
                    "5": "input3",
                    "6": "input_param_3"
                },
                "param_4": {
                    "1": "fourth_param",
                    "2": "num4",
                    "3": "input_4",
                    "5": "input4",
                    "6": "input_param_4"
                },
                "uVar1": {
                    "1": "shifted_val",
                    "14": "temp1",
                    "3": "temp_1",
                    "5": "temp_var_1"
                },
                "uVar10": {
                    "1": "temp10",
                    "12": "temp11",
                    "2": "temp_var_10",
                    "3": "temp_var_11"
                },
                "uVar11": {
                    "1": "mantissa_bits1",
                    "12": "temp12",
                    "2": "temp_var_11",
                    "3": "temp_var_12"
                },
                "uVar12": {
                    "1": "difference2",
                    "12": "temp13",
                    "2": "temp_var_12",
                    "3": "temp_var_13"
                },
                "uVar13": {
                    "1": "temp13",
                    "12": "temp14",
                    "2": "temp_var_13",
                    "3": "temp_14"
                },
                "uVar17": {
                    "1": "result_var",
                    "2": "combined_params",
                    "21": "result"
                },
                "uVar18": {
                    "1": "temp_15"
                },
                "uVar2": {
                    "1": "var2",
                    "14": "temp2",
                    "3": "temp_2",
                    "5": "temp_var_2"
                },
                "uVar3": {
                    "1": "normalized_exponent",
                    "13": "temp3",
                    "3": "temp_3",
                    "5": "temp_var_3"
                },
                "uVar4": {
                    "1": "rounded_exponent_and_significand_low_shifted",
                    "13": "temp4",
                    "3": "temp_4",
                    "5": "temp_var_4"
                },
                "uVar5": {
                    "1": "exp_bits4",
                    "13": "temp5",
                    "3": "temp_5",
                    "5": "temp_var_5"
                },
                "uVar6": {
                    "1": "shifted_val6",
                    "13": "temp6",
                    "3": "temp_6",
                    "5": "temp_var_6"
                },
                "uVar7": {
                    "1": "combine_sign_and_exponent",
                    "13": "temp7",
                    "3": "temp_7",
                    "5": "temp_var_7"
                },
                "uVar9": {
                    "1": "exponent_bias",
                    "13": "temp9",
                    "3": "temp_9",
                    "5": "temp_var_9"
                },
                "unaff_r5": {
                    "1": "rounded_exponent_and_significand_high_shifted",
                    "12": "temp10",
                    "3": "temp_var_10"
                }
            },
            "called": [
                "FUN_08008a02"
            ],
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "code": "\nulonglong calculate_double_precision_08008894(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input_param_2,input_param_1);\n  temp14 = 0x7ff;\n  temp7 = input_param_2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input_param_4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_double_precision_08008894_08008a02();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input_param_3 | input_param_4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input_param_4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input_param_4 << 0xc) >> 4 | 0x10000000 | input_param_3 >> 0x18;\n    temp14 = input_param_3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input_param_4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input_param_3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_double_precision_08008894",
            "entrypoint": "0x08008894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008894": "calculate_double_precision_08008894",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "temp8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "temp1",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "result",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008a02": {
            "additional_data": {
                "FUN_08008a02": {
                    "1": "extract_bits",
                    "2": "calculate_floating_point_value",
                    "3": "reverse_bits",
                    "4": "calculate_double_precision"
                },
                "LAB_08008838": {
                    "1": "return_case2"
                },
                "LAB_08008874": {
                    "1": "return_case1"
                },
                "bVar4": {
                    "1": "all_zeros_check",
                    "2": "flag",
                    "23": "is_zero"
                },
                "in_r12": {
                    "1": "constant2",
                    "2": "temp4",
                    "3": "temp2",
                    "5": "constant"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "input_1",
                    "24": "input1"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "input_2",
                    "24": "input2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "input_3",
                    "24": "input3"
                },
                "param_4": {
                    "1": "bits4",
                    "2": "input_4",
                    "24": "input4"
                },
                "uVar1": {
                    "1": "temp4",
                    "13": "bit1",
                    "2": "temp_var1"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "masked_var",
                    "3": "bit2",
                    "4": "temp3",
                    "5": "temp2"
                },
                "uVar3": {
                    "1": "temp_var4",
                    "2": "bit3",
                    "4": "bit4",
                    "5": "result"
                },
                "uVar4": {
                    "1": "bit_mask2"
                },
                "uVar5": {
                    "1": "zero_unsigned"
                },
                "uVar6": {
                    "1": "zero_unsigned2"
                },
                "uVar7": {
                    "1": "is_negative"
                },
                "uVar8": {
                    "1": "bit_shifted_param3"
                },
                "uVar9": {
                    "1": "bit_shifted_param4"
                },
                "unaff_r4": {
                    "1": "bit4",
                    "5": "bit2",
                    "8": "temp1"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008894"
            ],
            "code": "\nulonglong calculate_double_precision_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint constant;\n  bool is_zero;\n  \n  temp2 = constant & input4 >> 0x14;\n  temp3 = input2;\n  if (temp1 != constant || temp2 != constant) {\n    if (temp1 == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp3 = input4, temp2 != constant)\n         ) {\nreturn_case1:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp2 == constant) {\n      input1 = input3;\n      temp3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nreturn_case2:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          temp3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp3;\n          if (temp2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto return_case1;\n      if ((input3 | input4 << 1) != 0) goto return_case2;\n    }\n  }\n  return CONCAT44(temp3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "calculate_double_precision_08008a02",
            "entrypoint": "0x08008a02",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008a02": "calculate_double_precision_08008a02",
                "LAB_08008838": "return_case2",
                "LAB_08008874": "return_case1",
                "bVar4": "is_zero",
                "in_r12": "constant",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008a74": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "check_value_equality"
                },
                "<param_1>": {
                    "1": "value1"
                },
                "<param_2>": {
                    "1": "value2"
                },
                "<param_3>": {
                    "1": "value3"
                },
                "<param_4>": {
                    "1": "value4"
                },
                "FUN_08008a74": {
                    "1": "check_parameters_equal",
                    "2": "compare_parameters",
                    "5": "check_equality",
                    "9": "check_parameters"
                },
                "bVar2": {
                    "1": "is_values_zero",
                    "15": "is_zero",
                    "2": "are_params_zero",
                    "3": "is_equal"
                },
                "bVar3": {
                    "1": "result2",
                    "2": "is_less_than",
                    "3": "is_less_or_equal",
                    "6": "is_negative"
                },
                "param_1": {
                    "1": "first_param",
                    "10": "value1",
                    "2": "input_1",
                    "3": "input1",
                    "6": "a"
                },
                "param_2": {
                    "1": "second_parameter",
                    "10": "value2",
                    "2": "input_2",
                    "3": "input2",
                    "6": "b"
                },
                "param_3": {
                    "1": "third_param",
                    "10": "value3",
                    "2": "input_3",
                    "3": "input3",
                    "6": "value_3"
                },
                "param_4": {
                    "1": "w",
                    "10": "value4",
                    "2": "input_4",
                    "3": "input4",
                    "6": "d"
                },
                "param_4_1f": {
                    "1": "param_4_shifted"
                },
                "param_4_inverted": {
                    "1": "param_4_inverted"
                },
                "param_4_updated": {
                    "1": "shifted_param_4"
                },
                "param_4_updated2": {
                    "1": "shifted_param_4_updated"
                },
                "param_4_updated3": {
                    "1": "shifted_param_4_updated2"
                },
                "param_4_updated4": {
                    "1": "shifted_param_4_updated3"
                },
                "return": {
                    "3": "result"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "11": "result",
                    "15": "xor_result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08008b00"
            ],
            "code": "\nuint check_parameters_08008a74(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint xor_result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    xor_result = value2 ^ value4;\n    is_zero = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)xor_result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "current_name": "check_parameters_08008a74",
            "entrypoint": "0x08008a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "return": "result",
                "uVar1": "xor_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008af0": {
            "additional_data": {
                "FUN_08008af0": {
                    "1": "check_and_validate_parameters",
                    "11": "check_parameters",
                    "12": "validate_parameters",
                    "6": "check_and_return"
                },
                "param_1": {
                    "1": "input_param_1",
                    "10": "input_1",
                    "2": "parameter_1",
                    "3": "first_param"
                },
                "param_2": {
                    "1": "param_2",
                    "10": "input_2",
                    "2": "parameter_2",
                    "3": "second_parameter"
                },
                "param_3": {
                    "1": "param_c",
                    "2": "parameter_1",
                    "3": "third_param",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "parameter_4",
                    "3": "fourth_param",
                    "5": "param_4"
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "code": "\nvoid validate_parameters_08008af0(undefined4 input_1,undefined4 input_2,undefined4 param_3,undefined4 param_4)\n\n{\n  check_parameters_08008b00(param_3,param_4,input_1,input_2);\n  return;\n}\n\n",
            "current_name": "validate_parameters_08008af0",
            "entrypoint": "0x08008af0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008af0": "validate_parameters_08008af0",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b00": {
            "additional_data": {
                "FUN_08008b00": {
                    "1": "validate_and_return_parameter",
                    "2": "validate_and_return_param",
                    "3": "verify_parameters",
                    "7": "validate_parameters",
                    "8": "check_parameters"
                },
                "check_parameters_08008a74": {
                    "1": "validate_input",
                    "2": "check_parameters"
                },
                "param_1": {
                    "1": "value",
                    "14": "input_param",
                    "4": "input",
                    "8": "input_value"
                }
            },
            "called": [
                "FUN_08008a74"
            ],
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "code": "\nundefined4 check_parameters_08008b00(undefined4 input_param)\n\n{\n  check_parameters_08008b00();\n  return input_param;\n}\n\n",
            "current_name": "check_parameters_08008b00",
            "entrypoint": "0x08008b00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b00": "check_parameters_08008b00",
                "check_parameters_08008a74": "check_parameters",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b10": {
            "additional_data": {
                "FUN_08008b10": {
                    "1": "check_passed_parameters",
                    "16": "check_parameters",
                    "2": "check_parameters_and_return_result",
                    "3": "check_if_parameters_valid"
                },
                "check_parameters_08008b00": {
                    "1": "validate_parameters"
                },
                "in_ZR": {
                    "1": "input_result",
                    "2": "is_not_null",
                    "3": "is_nonzero",
                    "4": "result"
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "code": "\nbool check_parameters_08008b10(void)\n\n{\n  char result;\n  \n  validate_parameters();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_parameters_08008b10",
            "entrypoint": "0x08008b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b10": "check_parameters_08008b10",
                "check_parameters_08008b00": "validate_parameters",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b24": {
            "additional_data": {
                "FUN_08008b24": {
                    "1": "check_if_parameter_is_null",
                    "2": "check_if_input_is_empty",
                    "4": "is_cy_null",
                    "7": "check_if_string_empty"
                },
                "in_CY": {
                    "1": "is_empty",
                    "12": "input_char",
                    "14": "input_character",
                    "2": "cy_character"
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "code": "\nbool check_if_string_empty_08008b24(void)\n\n{\n  char input_character;\n  \n  check_parameters_08008b00();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_string_empty_08008b24",
            "entrypoint": "0x08008b24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b24": "check_if_string_empty_08008b24",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "additional_data": {
                "FUN_08008b4c": {
                    "1": "check_zero_and_carry",
                    "10": "check_parameters",
                    "2": "validate_parameters",
                    "3": "check_parameter_validity",
                    "5": "validate_and_return_result"
                },
                "in_CY": {
                    "1": "is_cy_set",
                    "11": "carry_flag",
                    "2": "has_carry",
                    "5": "is_carry_flag_set",
                    "6": "is_carry"
                },
                "in_ZR": {
                    "1": "is_zr_set",
                    "2": "is_zero_return",
                    "4": "is_zero_result",
                    "5": "is_zero",
                    "8": "zero_flag"
                },
                "validate_parameters_08008af0": {
                    "4": "validate_parameters"
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_0800a5a0"
            ],
            "code": "\nbool check_parameters_08008b4c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  validate_parameters();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_parameters_08008b4c",
            "entrypoint": "0x08008b4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b4c": "check_parameters_08008b4c",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "validate_parameters_08008af0": "validate_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b60": {
            "additional_data": {
                "FUN_08008b60": {
                    "1": "validate_input",
                    "2": "is_null_terminated",
                    "3": "check_if_input_empty",
                    "6": "is_cy_null"
                },
                "in_CY": {
                    "1": "input_char_is_valid",
                    "11": "input_character",
                    "2": "cy",
                    "4": "character",
                    "7": "input_char"
                },
                "validate_parameters_08008af0": {
                    "1": "validate_parameters_08008af0",
                    "5": "validate_parameters"
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "code": "\nbool is_cy_null_08008b60(void)\n\n{\n  char input_character;\n  \n  validate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "is_cy_null_08008b60",
            "entrypoint": "0x08008b60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b60": "is_cy_null_08008b60",
                "in_CY": "input_character",
                "validate_parameters_08008af0": "validate_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b74": {
            "additional_data": {
                "FUN_08008b74": {
                    "1": "check_params_valid",
                    "13": "check_parameters",
                    "4": "check_conditions",
                    "6": "check_params"
                },
                "param_1": {
                    "1": "input_value1",
                    "10": "value1",
                    "2": "first_param",
                    "4": "input1",
                    "8": "input_1"
                },
                "param_2": {
                    "1": "input1",
                    "2": "second_param",
                    "4": "input2",
                    "7": "input_2",
                    "9": "value2"
                },
                "param_3": {
                    "1": "input_value3",
                    "2": "third_param",
                    "4": "input3",
                    "7": "input_3",
                    "9": "value3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "fourth_param",
                    "4": "input4",
                    "7": "input_4",
                    "9": "value4"
                }
            },
            "called": [],
            "calling": [
                "FUN_080098d0"
            ],
            "code": "\nundefined4 check_parameters_08008b74(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_08008b74",
            "entrypoint": "0x08008b74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b74": "check_parameters_08008b74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "additional_data": {
                "FUN_08008ba0": {
                    "1": "reverse_sign",
                    "2": "reverse_bits"
                },
                "iVar2": {
                    "1": "temp_var",
                    "2": "result",
                    "3": "multiplied_value",
                    "5": "offset"
                },
                "param_1": {
                    "1": "integer_part",
                    "2": "dividend",
                    "3": "input_value_1",
                    "4": "input_value",
                    "5": "input_value1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "unsigned_integer2",
                    "2": "input_2",
                    "3": "input_value_2",
                    "5": "input_value2",
                    "7": "input2"
                },
                "uVar1": {
                    "1": "quotient",
                    "9": "result"
                },
                "uVar3": {
                    "1": "result",
                    "2": "offset",
                    "3": "adjusted_value",
                    "4": "shift_amount"
                },
                "uVar4": {
                    "1": "converted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "code": "\nuint reverse_bits_08008ba0(uint input1,uint input2)\n\n{\n  uint result;\n  int offset;\n  uint shift_amount;\n  \n  offset = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < offset) {\n      return 0;\n    }\n    result = offset >> 0x15;\n    shift_amount = -result - 0x3e1;\n    if (result < 0xfffffc20 && shift_amount != 0) {\n      result = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shift_amount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "current_name": "reverse_bits_08008ba0",
            "entrypoint": "0x08008ba0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008ba0": "reverse_bits_08008ba0",
                "iVar2": "offset",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar3": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "additional_data": {
                "FUN_08008bf0": {
                    "1": "calculate_result",
                    "2": "reverse_bits",
                    "4": "calculate_shift_amount",
                    "8": "calculate_shifted_value"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "12": "shifted_value",
                    "3": "temp_var"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input",
                    "3": "value_1",
                    "6": "input_1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "3": "value_2",
                    "5": "shift_amount",
                    "6": "input_2",
                    "8": "input2"
                },
                "uVar2": {
                    "1": "temp_variable2",
                    "18": "shift_amount",
                    "2": "shifted_result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "code": "\nuint calculate_shifted_value_08008bf0(uint input_value,uint input2)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((input2 & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (input2 << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_value | input2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_shifted_value_08008bf0",
            "entrypoint": "0x08008bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "iVar1": "shifted_value",
                "param_1": "input_value",
                "param_2": "input2",
                "uVar2": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008c30": {
            "additional_data": {
                "(0x20 - uVar2 & 0xff)": {
                    "1": "shift_amount"
                },
                "(0x7fffffff < param_1 * 8)": {
                    "1": "carry"
                },
                "(int)(uVar2 + 0x92e00000) < 0": {
                    "1": "compare_result"
                },
                "(param_1 * 8 == 0x80000000)": {
                    "1": "is_max_value"
                },
                "(param_1 << (0x20 - uVar2 & 0xff))": {
                    "1": "shifted_value"
                },
                "(param_1 | param_2 << 0xc)": {
                    "1": "combined"
                },
                "(param_2 & 0x1fffff | 0x100000)": {
                    "1": "updated_flag"
                },
                "(param_2 & 0x80000000 | param_1 >> 0x1d)": {
                    "1": "combined_result"
                },
                "(uVar1 & 0xfffffffe)": {
                    "1": "final_result"
                },
                "(uVar1 | 1)": {
                    "1": "or_value"
                },
                "(uVar2 + 0x92e00000 >> 0x15)": {
                    "1": "shifted_compare_value"
                },
                "(uVar3 >> (uVar2 & 0xff)) << 1": {
                    "1": "shifted_flag"
                },
                "FUN_08008c30": {
                    "1": "calculate_floating_point_value",
                    "10": "calculate_float",
                    "2": "calculate_normalized_float",
                    "3": "calculate_floating_point",
                    "5": "convert_to_float"
                },
                "SCARRY4": {
                    "1": "carry_overflow",
                    "3": "check_overflow",
                    "5": "is_carry"
                },
                "bVar4": {
                    "1": "check_condition",
                    "24": "is_zero"
                },
                "bVar5": {
                    "1": "flag2",
                    "11": "is_less_than",
                    "2": "is_less_than_threshold"
                },
                "in_r12": {
                    "1": "conditional_value",
                    "10": "temp3",
                    "2": "limit"
                },
                "param_1": {
                    "1": "exponent",
                    "2": "input_value1",
                    "3": "value1",
                    "4": "input",
                    "5": "input1"
                },
                "param_1 >> (uVar2 & 0xff)": {
                    "1": "shifted_input"
                },
                "param_2": {
                    "1": "bit_mask",
                    "2": "num_bits",
                    "3": "value2",
                    "4": "multiplier",
                    "5": "input2"
                },
                "uVar1": {
                    "1": "normalized_float",
                    "2": "output_float",
                    "24": "result"
                },
                "uVar2": {
                    "1": "shifted_bits",
                    "10": "temp1",
                    "2": "shifted_value"
                },
                "uVar2 + 0x92e00000 >> 0x15": {
                    "1": "shift_value"
                },
                "uVar2 >> 0x15": {
                    "1": "shifted"
                },
                "uVar3": {
                    "1": "shifted_flag_times_two",
                    "10": "temp2",
                    "2": "adjusted_value"
                },
                "value1": {
                    "1": "input_value"
                },
                "value2": {
                    "1": "multiplier"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "code": "\nuint calculate_float_08008c30(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than;\n  \n  temp1 = input2 * 2;\n  is_less_than = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != is_carry(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_float_08008c30",
            "entrypoint": "0x08008c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008c30": "calculate_float_08008c30",
                "SCARRY4": "is_carry",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "in_r12": "temp3",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "additional_data": {
                "FUN_08008cd8": {
                    "1": "calculate_number",
                    "2": "perform_arithmetic_operation",
                    "4": "calculate_float",
                    "5": "calculate_floating_point"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count",
                    "3": "leading_zero_count"
                },
                "bVar8": {
                    "1": "is_flag_true",
                    "10": "is_equal",
                    "2": "is_zero",
                    "3": "is_condition_met",
                    "5": "is_true"
                },
                "condition": {
                    "1": "condition"
                },
                "difference": {
                    "1": "difference"
                },
                "iVar1": {
                    "1": "shifted_num1",
                    "2": "shifted_input_1",
                    "3": "shifted_input1"
                },
                "iVar2": {
                    "1": "shift_count2",
                    "2": "shift_amount2",
                    "3": "shifted_input_2"
                },
                "input_1": {
                    "1": "input1"
                },
                "input_2": {
                    "1": "input2"
                },
                "input_2_Inverted": {
                    "1": "input2_inverted"
                },
                "input_3": {
                    "1": "input3"
                },
                "input_4": {
                    "1": "input4"
                },
                "param_1": {
                    "1": "numerator",
                    "11": "input1",
                    "2": "value1",
                    "4": "input_1",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "denominator",
                    "11": "input2",
                    "2": "value2",
                    "3": "mask",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "shift_amount",
                    "2": "constant",
                    "3": "input_3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "unknown2",
                    "2": "rounding_mode",
                    "3": "input_4",
                    "4": "result",
                    "7": "input4"
                },
                "shift_Amount": {
                    "1": "shift_amount"
                },
                "shift_Amount2": {
                    "1": "shift_amount2"
                },
                "shifted_Input_1": {
                    "1": "shifted_input1"
                },
                "shifted_Input_1_Modified": {
                    "1": "shifted_input1_modified"
                },
                "uVar3": {
                    "1": "input_2_complement",
                    "2": "input_xor",
                    "3": "result1",
                    "4": "temp1"
                },
                "uVar4": {
                    "1": "flipped_number",
                    "2": "result_xor",
                    "3": "result2"
                },
                "uVar4_temp": {
                    "1": "current_value_temp"
                },
                "uVar5": {
                    "1": "rounded_value",
                    "2": "result",
                    "3": "shifted_input1"
                },
                "uVar5_temp": {
                    "1": "adjusted_value_temp"
                },
                "uVar6": {
                    "1": "updated_shift_value",
                    "2": "shift_amount"
                },
                "uVar7": {
                    "1": "operand_difference",
                    "21": "difference",
                    "3": "diff"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "code": "\nuint calculate_floating_point_08008cd8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input_2;\n  uint temp1;\n  uint result2;\n  uint shifted_input;\n  uint result2;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  shifted_input = input1 << 1;\n  is_equal = shifted_input == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = shifted_input == input4;\n  }\n  shifted_input1 = (int)shifted_input >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input_2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input_2 == -1) {\n      shifted_input = temp1;\n      if (shifted_input1 == -1) {\n        shifted_input = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input_2 != -1) {\n        temp1 = shifted_input;\n      }\n      is_equal = (shifted_input & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = shifted_input == temp1;\n      }\n      if (!is_equal) {\n        shifted_input = shifted_input | 0x400000;\n      }\n      return shifted_input;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (shifted_input == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((shifted_input & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (shifted_input < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  shifted_input = shifted_input >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shifted_input;\n  is_equal = difference != 0;\n  result2 = shifted_input;\n  if (is_equal && shifted_input <= input4) {\n    result2 = shifted_input + difference;\n  }\n  if (is_equal && shifted_input <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && shifted_input <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && shifted_input <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < shifted_input) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shifted_input = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shifted_input = -shifted_input;\n  }\n  result2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (result2 == difference) {\n    result2 = result2 ^ 0x800000;\n    if (result2 == 0) {\n      shifted_input = shifted_input ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input = shifted_input + ((int)result2 >> (difference & 0xff));\n  result2 = result2 << (0x20 - difference & 0xff);\n  input1 = shifted_input & 0x80000000;\n  if ((int)shifted_input < 0) {\n    is_equal = result2 != 0;\n    result2 = -result2;\n    shifted_input = -shifted_input - (uint)is_equal;\n  }\n  if (shifted_input < 0x800000) {\n    temp1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    shifted_input = shifted_input * 2 + (uint)(temp1 != 0);\n    temp1 = result2 - 2;\n    if (result2 - 1 == 0 || shifted_input < 0x800000) {\n      difference = leading_zero_count(shifted_input) - 8;\n      shifted_input = shifted_input << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        shifted_input = shifted_input >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        shifted_input = shifted_input + (temp1 - difference) * 0x800000;\n      }\n      return shifted_input | input1;\n    }\n  }\n  else {\n    temp1 = result2 - 1;\n    if (0xffffff < shifted_input) {\n      temp1 = shifted_input & 1;\n      shifted_input = shifted_input >> 1;\n      result2 = (uint)(temp1 != 0) << 0x1f | result2 >> 1;\n      temp1 = result2;\n      if (0xfd < result2) goto LAB_08008e12;\n    }\n  }\n  shifted_input = shifted_input + temp1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    shifted_input = shifted_input & 0xfffffffe;\n  }\n  return shifted_input | input1;\n}\n\n",
            "current_name": "calculate_floating_point_08008cd8",
            "entrypoint": "0x08008cd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008cd8": "calculate_floating_point_08008cd8",
                "LZCOUNT": "leading_zero_count",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input_2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar4": "result2",
                "uVar5": "shifted_input",
                "uVar6": "result2",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "additional_data": {
                "FUN_08008cdc": {
                    "1": "floating_point_addition",
                    "2": "calculate_floating_point_value",
                    "3": "calculate_float",
                    "9": "calculate_floating_point"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "bVar7": {
                    "1": "is_negative_or_zero",
                    "10": "is_equal",
                    "18": "is_zero"
                },
                "iVar1": {
                    "1": "temp4",
                    "2": "shifted_value1",
                    "5": "shifted_input1"
                },
                "iVar2": {
                    "1": "shifted_val2",
                    "2": "shifted_value2",
                    "5": "shifted_input2"
                },
                "param_1": {
                    "1": "num1",
                    "10": "input1",
                    "2": "input_value1",
                    "6": "value1"
                },
                "param_2": {
                    "1": "second_operand",
                    "10": "input2",
                    "2": "input_2",
                    "6": "value2"
                },
                "param_3": {
                    "1": "input_val3",
                    "2": "undefined",
                    "3": "value3",
                    "4": "input3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "limit",
                    "2": "input_value3",
                    "3": "result",
                    "4": "input4",
                    "5": "param4"
                },
                "uVar10": {
                    "1": "y_mantissa"
                },
                "uVar11": {
                    "1": "x_exponent"
                },
                "uVar12": {
                    "1": "y_exponent"
                },
                "uVar13": {
                    "1": "diff_exponent"
                },
                "uVar14": {
                    "1": "mantissa_mask"
                },
                "uVar15": {
                    "1": "is_normalized"
                },
                "uVar16": {
                    "1": "shifted_mantissa"
                },
                "uVar17": {
                    "1": "is_negative"
                },
                "uVar18": {
                    "1": "diff"
                },
                "uVar19": {
                    "1": "is_leading_bit_set"
                },
                "uVar20": {
                    "1": "x_shift"
                },
                "uVar21": {
                    "1": "shift"
                },
                "uVar22": {
                    "1": "leading_zero_count"
                },
                "uVar3": {
                    "1": "abs_value1",
                    "2": "temp1",
                    "5": "result"
                },
                "uVar4": {
                    "1": "result",
                    "2": "temp2"
                },
                "uVar5": {
                    "1": "fraction_length",
                    "2": "temp3"
                },
                "uVar6": {
                    "1": "diff2",
                    "17": "difference",
                    "2": "diff"
                },
                "uVar8": {
                    "1": "result"
                },
                "uVar9": {
                    "1": "x_mantissa"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "code": "\nuint calculate_floating_point_08008cdc(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result;\n  uint temp2;\n  uint temp3;\n  uint difference;\n  bool is_zero;\n  \n  temp2 = input1 << 1;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    param4 = input2 << 1;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == param4;\n  }\n  shifted_input1 = (int)temp2 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)param4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      temp2 = input2;\n      if (shifted_input1 == -1) {\n        temp2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = temp2;\n      }\n      is_zero = (temp2 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = temp2 == input2;\n      }\n      if (!is_zero) {\n        temp2 = temp2 | 0x400000;\n      }\n      return temp2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp2 & 0xff000000) == 0) {\n      temp2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return temp2;\n    }\n    if (temp2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  temp2 = temp2 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - temp2;\n  is_zero = difference != 0;\n  temp3 = temp2;\n  if (is_zero && temp2 <= param4) {\n    temp3 = temp2 + difference;\n  }\n  if (is_zero && temp2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && temp2 <= param4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && temp2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (param4 < temp2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  result = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result = -result;\n  }\n  if (temp3 == difference) {\n    result = result ^ 0x800000;\n    if (temp3 == 0) {\n      temp2 = temp2 ^ 0x800000;\n      temp3 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp2 = temp2 + ((int)result >> (difference & 0xff));\n  result = result << (0x20 - difference & 0xff);\n  input1 = temp2 & 0x80000000;\n  if ((int)temp2 < 0) {\n    is_zero = result != 0;\n    result = -result;\n    temp2 = -temp2 - (uint)is_zero;\n  }\n  if (temp2 < 0x800000) {\n    difference = result & 0x80000000;\n    result = result << 1;\n    temp2 = temp2 * 2 + (uint)(difference != 0);\n    difference = temp3 - 2;\n    if (temp3 - 1 == 0 || temp2 < 0x800000) {\n      temp3 = leading_zeros_count(temp2) - 8;\n      temp2 = temp2 << (temp3 & 0xff);\n      if ((int)difference < (int)temp3) {\n        temp2 = temp2 >> (-(difference - temp3) & 0xff);\n      }\n      else {\n        temp2 = temp2 + (difference - temp3) * 0x800000;\n      }\n      return temp2 | input1;\n    }\n  }\n  else {\n    difference = temp3 - 1;\n    if (0xffffff < temp2) {\n      difference = temp2 & 1;\n      temp2 = temp2 >> 1;\n      result = (uint)(difference != 0) << 0x1f | result >> 1;\n      difference = temp3;\n      if (0xfd < temp3) goto LAB_08008e12;\n    }\n  }\n  temp2 = temp2 + difference * 0x800000 + (uint)(0x7fffffff < result);\n  if (result == 0x80000000) {\n    temp2 = temp2 & 0xfffffffe;\n  }\n  return temp2 | input1;\n}\n\n",
            "current_name": "calculate_floating_point_08008cdc",
            "entrypoint": "0x08008cdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008cdc": "calculate_floating_point_08008cdc",
                "LZCOUNT": "leading_zeros_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar3": "result",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "additional_data": {
                "(uVar2 & 0x7fffffff) == 0": {
                    "1": "is_zero_mask"
                },
                "0x20 - (uVar1 + 0x18) & 0xff": {
                    "1": "inverse_shift"
                },
                "0x20 - uVar2 & 0xff": {
                    "1": "right_shift"
                },
                "0x7fffffff": {
                    "1": "max_value"
                },
                "0x7fffffff < uVar4": {
                    "1": "is_greater"
                },
                "FUN_08008e3c": {
                    "1": "calculate_inverse",
                    "13": "reverse_bits",
                    "2": "calculate_modified_value",
                    "4": "calculate_result"
                },
                "iVar3": {
                    "1": "multiplier",
                    "2": "calculation_result",
                    "3": "initial_value",
                    "4": "constant_value",
                    "5": "offset",
                    "7": "constant"
                },
                "int(uVar2) >> 0x1f": {
                    "1": "shifted_value"
                },
                "param_1": {
                    "1": "input_num",
                    "10": "input_value",
                    "16": "input",
                    "2": "input_number"
                },
                "uVar1": {
                    "1": "temp_value2",
                    "18": "leading_zeros",
                    "2": "leading_zeros_count",
                    "4": "result"
                },
                "uVar1 + 0x18": {
                    "1": "shift_value"
                },
                "uVar1 > 7": {
                    "1": "is_large_leading_zeros"
                },
                "uVar11": {
                    "1": "result"
                },
                "uVar1_2": {
                    "1": "leading_zeros_count2"
                },
                "uVar1_3": {
                    "1": "leading_zeros_count3"
                },
                "uVar2": {
                    "1": "shift_count",
                    "2": "shifted_input",
                    "20": "shift_amount",
                    "3": "shift_value"
                },
                "uVar2 & 0x7fffffff": {
                    "1": "bit_mask_check"
                },
                "uVar2 & 0xff": {
                    "1": "shift_mask"
                },
                "uVar2 + 0x18": {
                    "1": "shifted_value"
                },
                "uVar2 >> 0x1f": {
                    "1": "shifted_mask"
                },
                "uVar2_2": {
                    "1": "shift_amount2"
                },
                "uVar2_3": {
                    "1": "shift_amount3"
                },
                "uVar3": {
                    "1": "temp_value"
                },
                "uVar3_2": {
                    "1": "shifted_input_value"
                },
                "uVar3_3": {
                    "1": "shifted_cleared_input_value"
                },
                "uVar4": {
                    "1": "compare_value",
                    "14": "mask",
                    "2": "bit_mask"
                },
                "uVar4 & 0xfffffffe": {
                    "1": "cleared_mask"
                },
                "uVar4 == 0x80000000": {
                    "1": "is_masked"
                },
                "uVar5": {
                    "1": "shift_result",
                    "7": "result"
                },
                "uVar6": {
                    "1": "temp_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "code": "\nuint reverse_bits_08008e3c(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  leading_zeros = constant + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "reverse_bits_08008e3c",
            "entrypoint": "0x08008e3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008e3c": "reverse_bits_08008e3c",
                "iVar3": "constant",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008e44": {
            "additional_data": {
                "(param_1 >> (0x20 - (uVar1 + 0x18) & shiftAmountMask)) - ((int)uVar2 >> 0x1f)": {
                    "1": "shifted_result"
                },
                "(uVar2 & 0x7fffffff) == 0": {
                    "1": "is_shifted_input_zero"
                },
                "0U >> (0x20 - uVar2 & shiftAmountMask)": {
                    "1": "shifted_zero"
                },
                "0x7fffffff < uVar1": {
                    "1": "is_max_leading_zeros"
                },
                "FUN_08008e44": {
                    "1": "count_set_bits_and_adjust_value",
                    "2": "count_bits",
                    "4": "reverse_bits"
                },
                "LZCOUNT": {
                    "2": "count_leading_zeros"
                },
                "PARAM_1": {
                    "1": "input_copy"
                },
                "iVar4": {
                    "1": "intermediate_value",
                    "2": "hash_value",
                    "21": "result",
                    "3": "offset",
                    "4": "adjusted_value"
                },
                "input_num": {
                    "1": "input_num"
                },
                "param_1": {
                    "1": "number",
                    "16": "input",
                    "2": "input_number",
                    "8": "input_value"
                },
                "param_1 << (uVar2 & shiftAmountMask)": {
                    "1": "shifted_input"
                },
                "result": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "lower_bits",
                    "20": "leading_zeros",
                    "4": "bit_count"
                },
                "uVar1 & 0xff": {
                    "1": "shift_amount_mask"
                },
                "uVar1 - 8": {
                    "1": "modified_leading_zeros"
                },
                "uVar1 << (uVar2 & shiftAmountMask)": {
                    "1": "shifted_leading_zeros"
                },
                "uVar1 == 0x80000000": {
                    "1": "is_max_unsigned"
                },
                "uVar2": {
                    "1": "upper_bits",
                    "2": "shift",
                    "20": "shift_amount"
                },
                "uVar2 & shiftAmountMask": {
                    "1": "shift"
                },
                "uVar2 & ~(uVar2 >> 0x1f)": {
                    "1": "cleared_shifted_sign_bit"
                },
                "uVar2 << (uVar1 + 0x18)": {
                    "1": "shifted_input2"
                },
                "uVar2 >> 0x1f": {
                    "1": "shifted_sign_bit"
                },
                "uVar3": {
                    "1": "sign",
                    "22": "sign_bit",
                    "6": "is_negative"
                },
                "uVar3 & 0xfffffffe": {
                    "1": "cleared_sign_bit"
                },
                "uVar3 | 0x4b000000 - 0x800000": {
                    "1": "modified_sign_bit"
                },
                "uVar4": {
                    "1": "temp_value"
                },
                "uVar5": {
                    "1": "adjusted_input"
                },
                "uVar6": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "code": "\nuint reverse_bits_08008e44(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "reverse_bits_08008e44",
            "entrypoint": "0x08008e44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008e44": "reverse_bits_08008e44",
                "LZCOUNT": "count_leading_zeros",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008eec": {
            "additional_data": {
                "FUN_08008eec": {
                    "1": "calculate_result",
                    "2": "calculate_float_value",
                    "8": "calculate_floating_point",
                    "9": "calculate_float"
                },
                "bVar10": {
                    "1": "flag2",
                    "2": "carry_flag",
                    "3": "condition2",
                    "8": "is_negative"
                },
                "bVar6": {
                    "1": "flag1"
                },
                "bVar7": {
                    "1": "flag2"
                },
                "bVar9": {
                    "1": "is_input1_zero_or_ff",
                    "10": "is_zero",
                    "2": "is_zero1",
                    "3": "condition1"
                },
                "iVar1": {
                    "1": "temp1"
                },
                "iVar2": {
                    "1": "temp2"
                },
                "iVar3": {
                    "1": "temp3"
                },
                "iVar4": {
                    "1": "input1_bit8to15_plus_input2_bit8to15",
                    "12": "sum",
                    "2": "shifted_sum"
                },
                "iVar5": {
                    "1": "offset",
                    "5": "diff",
                    "6": "difference"
                },
                "iVar7": {
                    "1": "subtract_multiply",
                    "2": "count",
                    "5": "shift_amount"
                },
                "iVarn": {
                    "1": "temp_variable"
                },
                "lVar1": {
                    "1": "result",
                    "2": "long_product",
                    "5": "product"
                },
                "param_1": {
                    "1": "num1",
                    "2": "input_a",
                    "20": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "input_value2",
                    "20": "input2"
                },
                "param_3": {
                    "1": "third_param",
                    "10": "input3",
                    "2": "unused",
                    "3": "unused_param",
                    "5": "param3"
                },
                "param_4": {
                    "1": "unknown2",
                    "10": "input4",
                    "2": "input3",
                    "5": "param4"
                },
                "uVar1": {
                    "1": "sign_bit_input1"
                },
                "uVar10": {
                    "1": "temp7"
                },
                "uVar2": {
                    "1": "normalized_result",
                    "23": "result"
                },
                "uVar3": {
                    "1": "bit_count1",
                    "2": "exponent1",
                    "3": "input1_shifted"
                },
                "uVar4": {
                    "1": "expo_input2"
                },
                "uVar6": {
                    "1": "result_lsb",
                    "2": "temp2",
                    "4": "product"
                },
                "uVar7": {
                    "1": "mant_input2"
                },
                "uVar8": {
                    "1": "result_with_sign",
                    "2": "bitwise_result",
                    "4": "result"
                },
                "uVar9": {
                    "1": "temp6"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "code": "\nuint calculate_float_08008eec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint input1_shifted;\n  int sum;\n  int difference;\n  uint product;\n  int shift_amount;\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  input1_shifted = input1 >> 0x17 & 0xff;\n  is_zero = input1_shifted == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = input1_shifted == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (input1_shifted == 0xff || input4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      result = result;\n      if (((is_zero) || ((input1_shifted == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (result = input2, (input2 & 0x7fffff) != 0)))) {\n        return result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = input1_shifted == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input1_shifted = input1_shifted - 1;\n    }\n    input1 = input1 | result;\n    is_zero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = input1_shifted + input4;\n  result = input1 ^ input2;\n  input1_shifted = input1 << 9;\n  is_zero = input1_shifted == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (input1_shifted == 0) {\n      input2 = input2 << 9;\n    }\n    result = result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    shift_amount = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,difference);\n      shift_amount = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && shift_amount < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && shift_amount < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(difference,1);\n    result = sum - 0x80;\n    is_zero = result == 0;\n    input1_shifted = result;\n  }\n  else {\n    product = (ulonglong)(input1_shifted >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = result & 0x80000000 | result;\n    result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(result,0xfd);\n    is_zero = result == 0xfd;\n    input1_shifted = result - 0xfd;\n    if (result < 0xfe) {\n      result = result + result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)input1_shifted < 0 != is_negative) {\n    is_zero = (int)(result + 0x19) < 0;\n    if (result == 0xffffffe7 || is_zero != SCARRY4(result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (result != 0xffffffe7 && is_zero == SCARRY4(result,0x19)) {\n      input1_shifted = (result << 1) >> (-result & 0xff);\n      result = result << (result + 0x20 & 0xff);\n      input1_shifted = ((uint)((result & 0x80000000) != 0) << 0x1f | input1_shifted >> 1) + (uint)((byte)input1_shifted & 1);\n      if ((product | result << 1) == 0) {\n        input1_shifted = input1_shifted & ~(result >> 0x1f);\n      }\n      return input1_shifted;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_08008eec",
            "entrypoint": "0x08008eec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008eec": "calculate_float_08008eec",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "shift_amount",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result",
                "uVar3": "input1_shifted",
                "uVar6": "product",
                "uVar8": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009054": {
            "additional_data": {
                "FUN_08009054": {
                    "1": "decode_float",
                    "11": "calculate_floating_point",
                    "2": "compute_floating_point_value",
                    "8": "calculate_float"
                },
                "SBORROW4": {
                    "1": "addition_overflow"
                },
                "SCARRY4": {
                    "1": "subtraction_overflow"
                },
                "bVar7": {
                    "1": "comparison1",
                    "2": "flag",
                    "4": "condition",
                    "7": "flag1",
                    "8": "is_zero"
                },
                "bVar8": {
                    "1": "is_ff",
                    "2": "overflow_flag",
                    "3": "is_negative",
                    "7": "flag2",
                    "8": "condition2"
                },
                "bVar9": {
                    "1": "flag2",
                    "3": "carry_flag",
                    "7": "condition3"
                },
                "iVar3": {
                    "1": "diff_msb",
                    "15": "difference",
                    "2": "temp_var3",
                    "3": "diff",
                    "5": "temp3"
                },
                "iVar5": {
                    "1": "i_var5",
                    "2": "temp4",
                    "3": "temp",
                    "4": "temp2",
                    "5": "sum"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "num1",
                    "3": "operand1",
                    "4": "float1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "input_float2",
                    "3": "operand2",
                    "4": "float2",
                    "7": "value2"
                },
                "param_3": {
                    "1": "value1",
                    "13": "param3",
                    "2": "value3",
                    "4": "input3"
                },
                "param_4": {
                    "1": "value2",
                    "2": "value4",
                    "3": "input4",
                    "9": "param4"
                },
                "uVar1": {
                    "1": "result",
                    "2": "temp_var1",
                    "3": "quotient",
                    "8": "temp1"
                },
                "uVar2": {
                    "1": "bits2",
                    "2": "temp_var2",
                    "3": "exponent1",
                    "8": "temp2"
                },
                "uVar3": {
                    "1": "constant1"
                },
                "uVar4": {
                    "1": "addition",
                    "2": "temp3",
                    "3": "temp1",
                    "5": "temp4"
                },
                "uVar5": {
                    "1": "loop_counter"
                },
                "uVar6": {
                    "1": "float_result",
                    "2": "temp_var6",
                    "21": "result",
                    "4": "temp6"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "code": "\nuint calculate_floating_point_08009054(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp4;\n  int temp5;\n  uint result;\n  bool is_zero;\n  bool condition2;\n  bool flag3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      is_zero = (input1 & 0x7fffffff) == 0;\n      if (!is_zero) {\n        is_zero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!is_zero) {\n        is_zero = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input1 = input1 << 1;\n            is_zero = (input1 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        is_zero = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input2 = input2 << 1;\n            is_zero = (input2 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_0800906c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_0800906c:\n    difference = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      flag3 = subtraction_overflow(difference,0x7f);\n      temp5 = difference + 0x7f;\n      is_zero = temp5 < 0;\n      condition2 = temp5 == 0;\n      if (!condition2 && is_zero == flag3) {\n        flag3 = addition_overflow(0xff,temp5);\n        is_zero = 0xff - temp5 < 0;\n        condition2 = temp5 == 0xff;\n      }\n      if (!condition2 && is_zero == flag3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!condition2 && is_zero == flag3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = addition_overflow(temp5,1);\n      temp4 = difference + 0x7e;\n      is_zero = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      is_zero = temp1 <= temp2;\n      if (!is_zero) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = difference + 0x7d + (uint)is_zero;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        is_zero = temp1 >> 1 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 1;\n        }\n        is_zero = temp1 >> 2 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 2;\n        }\n        is_zero = temp1 >> 3 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        is_zero = temp2 == 0;\n        if (!is_zero) {\n          result = result >> 4;\n          is_zero = result == 0;\n        }\n      } while (!is_zero);\n      condition2 = addition_overflow(temp4,0xfd);\n      is_zero = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (is_zero || (int)result < 0 != condition2) {\n      is_zero = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || is_zero != subtraction_overflow(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || is_zero != subtraction_overflow(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_08009054",
            "entrypoint": "0x08009054",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009054": "calculate_floating_point_08009054",
                "SBORROW4": "addition_overflow",
                "SCARRY4": "subtraction_overflow",
                "bVar7": "is_zero",
                "bVar8": "condition2",
                "bVar9": "flag3",
                "iVar3": "difference",
                "iVar5": "temp5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar4": "temp4",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800919c": {
            "additional_data": {
                "FUN_0800919c": {
                    "1": "check_overflow_and_sign",
                    "2": "calculate_signed_addition",
                    "8": "calculate_result"
                },
                "bVar1": {
                    "1": "is_combined_inputs_negative",
                    "12": "is_negative",
                    "2": "is_combined_negative",
                    "5": "is_negative_result"
                },
                "bVar5": {
                    "1": "is_combined_inputs_zero",
                    "17": "is_zero",
                    "2": "is_zero_combined",
                    "3": "is_zero_result",
                    "4": "is_combined_zero"
                },
                "int(input_2) >> 0x1f": {
                    "1": "input_2_reverse_sign_bit"
                },
                "param_1": {
                    "1": "input_value1",
                    "19": "input_1",
                    "3": "num1",
                    "4": "input1"
                },
                "param_1 & 0x7fffff": {
                    "1": "input_1_low_bits"
                },
                "param_1 + param_2 * -2": {
                    "1": "sum_negated_input_2"
                },
                "param_1 | 1": {
                    "1": "result"
                },
                "param_1_bit_shifted": {
                    "1": "result_shifted_right_31_bits"
                },
                "param_1_bitwise_or_1": {
                    "1": "result_bitwise_or_1"
                },
                "param_1_bitwise_or_2": {
                    "1": "result_bitwise_or_2"
                },
                "param_1_bitwise_or_3": {
                    "1": "result_bitwise_or_3"
                },
                "param_1_times_neg_2": {
                    "1": "input_1_times_negative_2"
                },
                "param_2": {
                    "1": "input_param_2",
                    "19": "input_2",
                    "3": "num2",
                    "4": "input2"
                },
                "param_2 & 0x7fffff": {
                    "1": "input_2_low_bits"
                },
                "return": {
                    "3": "result"
                },
                "uVar2": {
                    "1": "result_1",
                    "2": "input_1_doubled",
                    "4": "doubled_input_1",
                    "9": "input_1_times_2"
                },
                "uVar3": {
                    "1": "result_2",
                    "2": "input2_times2",
                    "4": "doubled_input_2",
                    "9": "input_2_times_2"
                },
                "uVar3 <= uVar2": {
                    "1": "is_input_2_less_equal_input_1"
                },
                "uVar3 > uVar2": {
                    "1": "is_input_2_greater_input_1"
                },
                "uVar4": {
                    "1": "combined_params",
                    "2": "combined",
                    "3": "result",
                    "4": "combined_result",
                    "5": "combined_input",
                    "8": "combined_inputs"
                },
                "uVar4 == 0": {
                    "1": "is_xor_zero"
                },
                "~(int(input_2) >> 0x1f)": {
                    "1": "input_2_complement"
                }
            },
            "called": [],
            "calling": [
                "FUN_08009204"
            ],
            "code": "\nuint check_overflow_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "current_name": "check_overflow_0800919c",
            "entrypoint": "0x0800919c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800919c": "check_overflow_0800919c",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "return": "result",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091fc": {
            "additional_data": {
                "FUN_080091fc": {
                    "26": "concatenate_parameters",
                    "5": "concatenate_params"
                },
                "param_1": {
                    "1": "target",
                    "2": "dest",
                    "3": "source_parameter",
                    "4": "first_param",
                    "6": "first_parameter",
                    "8": "destination"
                },
                "param_2": {
                    "1": "target",
                    "2": "src",
                    "3": "destination",
                    "4": "second_param",
                    "6": "second_parameter",
                    "9": "source"
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "code": "\nvoid concatenate_parameters_080091fc(undefined4 destination,undefined4 source)\n\n{\n  concatenate_parameters_080091fc_08009204(source,destination);\n  return;\n}\n\n",
            "current_name": "concatenate_parameters_080091fc",
            "entrypoint": "0x080091fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091fc": "concatenate_parameters_080091fc",
                "param_1": "destination",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009204": {
            "additional_data": {
                "FUN_08009204": {
                    "1": "concatenate_32bit_numbers",
                    "2": "concatenate_values",
                    "5": "concatenate_and_return",
                    "6": "concatenate_integers",
                    "8": "concatenate_parameters"
                },
                "param_1": {
                    "1": "input1",
                    "2": "first_integer",
                    "3": "integer1",
                    "7": "first_param",
                    "8": "first_parameter"
                },
                "param_2": {
                    "1": "number2",
                    "2": "value2",
                    "3": "integer2",
                    "7": "second_param",
                    "8": "second_parameter"
                }
            },
            "called": [
                "FUN_0800919c"
            ],
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "code": "\nundefined8 concatenate_parameters_08009204(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  check_overflow_0800919c();\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "current_name": "concatenate_parameters_08009204",
            "entrypoint": "0x08009204",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009204": "concatenate_parameters_08009204",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009214": {
            "additional_data": {
                "FUN_08009214": {
                    "1": "check_if_parameters_concatenated",
                    "2": "is_string_concatenated",
                    "3": "is_concatenation_successful",
                    "4": "check_concatenated_parameters",
                    "6": "check_concatenation_result"
                },
                "concatenate_parameters_08009204": {
                    "1": "concatenate_parameters"
                },
                "in_ZR": {
                    "1": "is_null",
                    "2": "input_character",
                    "3": "is_concatenated",
                    "4": "concatenation_result",
                    "9": "result"
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "code": "\nbool check_concatenation_result_08009214(void)\n\n{\n  char result;\n  \n  concatenate_parameters();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_concatenation_result_08009214",
            "entrypoint": "0x08009214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009214": "check_concatenation_result_08009214",
                "concatenate_parameters_08009204": "concatenate_parameters",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009228": {
            "additional_data": {
                "FUN_08009228": {
                    "1": "is_null_terminator",
                    "2": "check_if_concatenation_is_empty",
                    "3": "is_null_terminated",
                    "6": "is_string_empty"
                },
                "concatenate_parameters_08009204": {
                    "2": "concatenate_parameters"
                },
                "in_CY": {
                    "1": "char",
                    "17": "input_character",
                    "2": "character",
                    "5": "input_char"
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "code": "\nbool is_string_empty_08009228(void)\n\n{\n  char input_character;\n  \n  concatenate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "is_string_empty_08009228",
            "entrypoint": "0x08009228",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009228": "is_string_empty_08009228",
                "concatenate_parameters_08009204": "concatenate_parameters",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800923c": {
            "additional_data": {
                "FUN_0800923c": {
                    "1": "check_carry_and_zero",
                    "10": "check_concatenation_result",
                    "2": "concatenate_parameters",
                    "4": "check_parameters",
                    "5": "check_concatenated_parameters"
                },
                "concatenate_parameters_08009204": {
                    "2": "concatenate_parameters"
                },
                "in_CY": {
                    "1": "carry",
                    "2": "is_carry_flag",
                    "3": "is_carry_flag_set",
                    "4": "carry_flag",
                    "7": "is_carry_set",
                    "8": "is_carry"
                },
                "in_ZR": {
                    "1": "is_zero_result_set",
                    "15": "is_zero_result",
                    "2": "is_zero_flag_set",
                    "3": "zero_flag",
                    "7": "is_zero"
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "code": "\nbool check_concatenation_result_0800923c(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry;\n  \n  concatenate_parameters();\n  return !(bool)is_carry || (bool)is_zero_result;\n}\n\n",
            "current_name": "check_concatenation_result_0800923c",
            "entrypoint": "0x0800923c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800923c": "check_concatenation_result_0800923c",
                "concatenate_parameters_08009204": "concatenate_parameters",
                "in_CY": "is_carry",
                "in_ZR": "is_zero_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009250": {
            "additional_data": {
                "FUN_08009250": {
                    "1": "check_concatenation",
                    "12": "check_concatenation_result",
                    "2": "check_concate_params",
                    "3": "check_parameters",
                    "6": "check_concatenated_parameters"
                },
                "concatenate_parameters_080091fc": {
                    "3": "concatenate_parameters"
                },
                "in_CY": {
                    "1": "has_carry",
                    "12": "is_carry",
                    "2": "is_carry_result",
                    "4": "carry_flag",
                    "8": "is_carry_set"
                },
                "in_ZR": {
                    "1": "is_result_zero",
                    "14": "is_zero_result",
                    "3": "zero_flag",
                    "4": "is_zero_return",
                    "6": "is_zero"
                }
            },
            "called": [
                "FUN_080091fc"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "code": "\nbool check_concatenation_result_08009250(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry;\n  \n  concatenate_parameters();\n  return !(bool)is_carry || (bool)is_zero_result;\n}\n\n",
            "current_name": "check_concatenation_result_08009250",
            "entrypoint": "0x08009250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009250": "check_concatenation_result_08009250",
                "concatenate_parameters_080091fc": "concatenate_parameters",
                "in_CY": "is_carry",
                "in_ZR": "is_zero_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009264": {
            "additional_data": {
                "FUN_08009264": {
                    "1": "is_null_terminated",
                    "2": "is_concatenation_empty",
                    "4": "check_if_concatenated_parameters_are_empty"
                },
                "concatenate_parameters_080091fc": {
                    "4": "concatenate_parameters"
                },
                "in_CY": {
                    "1": "end_of_string_indicator",
                    "16": "input_character",
                    "3": "concatenation_result",
                    "7": "input_char"
                }
            },
            "called": [
                "FUN_080091fc"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "code": "\nbool check_if_concatenated_parameters_are_empty_08009264(void)\n\n{\n  char input_character;\n  \n  concatenate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_concatenated_parameters_are_empty_08009264",
            "entrypoint": "0x08009264",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009264": "check_if_concatenated_parameters_are_empty_08009264",
                "concatenate_parameters_080091fc": "concatenate_parameters",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009278": {
            "additional_data": {
                "FUN_08009278": {
                    "1": "reverse_sign",
                    "2": "extract_integer",
                    "4": "reverse_bits"
                },
                "param_1": {
                    "1": "unsigned_value",
                    "12": "input_value",
                    "2": "input_integer",
                    "4": "value",
                    "6": "input"
                },
                "param_1_2": {
                    "1": "converted_input"
                },
                "param_2": {
                    "1": "sign_bit"
                },
                "uVar1": {
                    "1": "shifted_unsigned_value",
                    "13": "shifted_value",
                    "2": "shifted_bits",
                    "5": "shifted_input"
                },
                "uVar1_2": {
                    "1": "converted_value"
                },
                "uVar2": {
                    "1": "subtract_value",
                    "18": "difference",
                    "2": "shift_amount"
                },
                "uVar3": {
                    "1": "shifted_value8_bits",
                    "2": "shift_amount",
                    "5": "result"
                },
                "uVar4": {
                    "1": "converted_num",
                    "2": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "code": "\nuint reverse_bits_08009278(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "current_name": "reverse_bits_08009278",
            "entrypoint": "0x08009278",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009278": "reverse_bits_08009278",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009318": {
            "additional_data": {
                "FUN_08009318": {
                    "1": "calculate_sum_with_conditions",
                    "2": "calculate_double",
                    "3": "calculate_double_precision",
                    "4": "calculate_result"
                },
                "bVar4": {
                    "1": "carry_flag_result",
                    "20": "carry_flag",
                    "8": "carry"
                },
                "calculate_sum_080082d4": {
                    "3": "calculate_sum"
                },
                "iVar1": {
                    "1": "carry_flag",
                    "13": "is_cy_null",
                    "2": "is_null",
                    "3": "is_carry_null"
                },
                "is_cy_null_08008b60": {
                    "1": "is_carry_null",
                    "2": "check_carry"
                },
                "lVar6": {
                    "1": "integer_result",
                    "19": "result",
                    "2": "output",
                    "3": "output_value",
                    "4": "final_value"
                },
                "param_1": {
                    "1": "first_param",
                    "10": "input1",
                    "2": "input_param_1",
                    "5": "input_1"
                },
                "param_2": {
                    "1": "value2",
                    "10": "input2",
                    "2": "input_param_2",
                    "5": "input_2"
                },
                "param_3": {
                    "1": "extra_param_1",
                    "3": "param_3",
                    "4": "param3",
                    "6": "constant_1"
                },
                "param_4": {
                    "1": "const_val2",
                    "3": "constant2",
                    "4": "param4",
                    "6": "constant_2"
                },
                "uVar2": {
                    "1": "shifted_val",
                    "2": "exponent",
                    "3": "shifted_value",
                    "8": "shift_amount"
                },
                "uVar3": {
                    "1": "shifted_param2",
                    "19": "mask",
                    "2": "shift_amount"
                },
                "uVar4": {
                    "1": "carry"
                },
                "uVar5": {
                    "1": "temp_variable6",
                    "15": "sum_result",
                    "7": "result"
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "code": "\nlonglong calculate_value_08009318(uint input1,uint input2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  int is_cy_null;\n  uint shift_amount;\n  uint mask;\n  bool carry_flag;\n  undefined8 sum_result;\n  longlong result;\n  \n  mask = (input2 << 1) >> 0x15;\n  shift_amount = mask - 0x3ff;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      sum_result = calculate_sum(input1,input2,0x8800759c,0x7e37e43c,constant_2);\n      is_cy_null = check_carry((int)sum_result,(int)((ulonglong)sum_result >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (is_cy_null != 0) {\n        if ((int)input2 < 0) {\n          result = -0x8000000000000000;\n        }\n        else if ((input1 | input2) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shift_amount & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        sum_result = calculate_sum(input1,input2,0x8800759c,0x7e37e43c,constant_2);\n        is_cy_null = check_carry((int)sum_result,(int)((ulonglong)sum_result >> 0x20),0,0);\n        result = CONCAT44(input2,input1);\n        if (is_cy_null != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (shift_amount & 0xff));\n          }\n          result = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shift_amount < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    result = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      sum_result = calculate_sum(input1,input2,0x8800759c,0x7e37e43c,constant_2);\n      is_cy_null = check_carry((int)sum_result,(int)((ulonglong)sum_result >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (is_cy_null != 0) {\n        if (0 < (int)input2) {\n          if (shift_amount == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shift_amount = 1 << (0x34 - shift_amount & 0xff);\n            carry_flag = CARRY4(shift_amount,input1);\n            input1 = shift_amount + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (shift_amount == 0x400) {\n      result = calculate_sum();\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_value_08009318",
            "entrypoint": "0x08009318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009318": "calculate_value_08009318",
                "bVar4": "carry_flag",
                "calculate_sum_080082d4": "calculate_sum",
                "iVar1": "is_cy_null",
                "is_cy_null_08008b60": "check_carry",
                "lVar6": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "uVar2": "shift_amount",
                "uVar3": "mask",
                "uVar5": "sum_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009410": {
            "additional_data": {
                "FUN_08009410": {
                    "1": "calculate_new_result",
                    "2": "process_data",
                    "23": "calculate_result",
                    "4": "calculate"
                },
                "calculate_0800adf0": {
                    "1": "calculate_result2"
                },
                "calculate_result_08009d78": {
                    "1": "calculate_result1"
                },
                "calculate_result_0800a348": {
                    "1": "calculate_result3"
                },
                "local_20": {
                    "1": "local_var_3",
                    "2": "calculated_value_3",
                    "3": "temp_value_3",
                    "6": "result_3"
                },
                "local_28": {
                    "1": "variable1",
                    "2": "value_1",
                    "3": "temp_value_1",
                    "6": "result_1"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_parameter",
                    "4": "input1",
                    "5": "input_value",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "unsigned_value",
                    "4": "input_2",
                    "9": "input_value"
                },
                "reverse_bits_080082d0": {
                    "1": "reverse_bits"
                },
                "uStack_1c": {
                    "1": "temporary_variable_4",
                    "2": "temp_var4",
                    "3": "result4",
                    "6": "result_4"
                },
                "uStack_24": {
                    "1": "variable2",
                    "2": "value_2",
                    "3": "result2",
                    "6": "result_2"
                },
                "uVar1": {
                    "19": "result",
                    "2": "output",
                    "3": "output_value",
                    "5": "final_result"
                },
                "uVar2": {
                    "1": "flag_result",
                    "10": "calculation_type",
                    "2": "flags",
                    "3": "status"
                }
            },
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nundefined4 calculate_result_08009410(undefined4 input_param,uint input_value)\n\n{\n  undefined4 result;\n  uint calculation_type;\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  \n  if (0x3fe921fb < (input_value & 0x7fffffff)) {\n    if ((input_value & 0x7fffffff) < 0x7ff00000) {\n      calculation_type = calculate_result_080094101(input_param,input_value,&result_1);\n      calculation_type = calculation_type & 3;\n      if (calculation_type == 1) {\n        result = calculate_result_080094102(result_1,result_2,result_3,result_4,1);\n      }\n      else if (calculation_type == 2) {\n        result = calculate_result_080094103(result_1,result_2,result_3,result_4);\n      }\n      else if (calculation_type == 0) {\n        result = calculate_result_080094103(result_1,result_2,result_3,result_4);\n      }\n      else {\n        result = calculate_result_080094102(result_1,result_2,result_3,result_4,1);\n      }\n    }\n    else {\n      result = reverse_bits(input_param,input_value,input_param,input_value);\n    }\n    return result;\n  }\n  result = calculate_result_080094103(input_param,input_value,0,0);\n  return result;\n}\n\n",
            "current_name": "calculate_result_08009410",
            "entrypoint": "0x08009410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009410": "calculate_result_08009410",
                "calculate_0800adf0": "calculate_result2",
                "calculate_result_08009d78": "calculate_result1",
                "calculate_result_0800a348": "calculate_result3",
                "local_20": "result_3",
                "local_28": "result_1",
                "param_1": "input_param",
                "param_2": "input_value",
                "reverse_bits_080082d0": "reverse_bits",
                "uStack_1c": "result_4",
                "uStack_24": "result_2",
                "uVar1": "result",
                "uVar2": "calculation_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080094c0": {
            "additional_data": {
                "CARRY4": {
                    "1": "check_carry"
                },
                "CONST_1": {
                    "1": "constant1"
                },
                "CONST_2": {
                    "1": "constant2"
                },
                "FUN_080094c0": {
                    "1": "calculate_sum_and_shift",
                    "11": "calculate_result",
                    "2": "calculate_something",
                    "3": "calculate_value",
                    "4": "calculate_sum"
                },
                "bVar4": {
                    "1": "carry_overflow",
                    "23": "carry_flag",
                    "6": "carry"
                },
                "calculate_sum_080082d4": {
                    "3": "calculate_sum"
                },
                "iVar1": {
                    "1": "is_cy_null_result",
                    "10": "is_cy_null",
                    "2": "cy_null_result",
                    "5": "is_null",
                    "7": "is_carry_null"
                },
                "is_cy_null_08008b60": {
                    "1": "check_carry"
                },
                "lVar6": {
                    "1": "final_result",
                    "2": "concatenated_result",
                    "21": "result",
                    "5": "output"
                },
                "param_1": {
                    "1": "input_param_1",
                    "10": "input_1",
                    "15": "input1",
                    "3": "input_value_1"
                },
                "param_2": {
                    "1": "value_2",
                    "10": "input_2",
                    "15": "input2",
                    "3": "input_value_2"
                },
                "param_3": {
                    "1": "unused_param_1",
                    "4": "unused_param1",
                    "5": "param_3",
                    "7": "constant_1"
                },
                "param_4": {
                    "1": "input_param_4",
                    "4": "unused_param2",
                    "5": "constant2",
                    "7": "constant_2"
                },
                "uVar2": {
                    "1": "excess",
                    "2": "shifted_diff",
                    "3": "difference",
                    "4": "shift_amount",
                    "7": "shifted_bits"
                },
                "uVar3": {
                    "1": "bit_mask",
                    "11": "mask",
                    "2": "shifted_bits",
                    "3": "shifted_input2",
                    "4": "shifted_mask"
                },
                "uVar5": {
                    "1": "sum_value",
                    "14": "sum_result",
                    "2": "calculated_sum",
                    "5": "result",
                    "9": "sum"
                }
            },
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "code": "\nlonglong calculate_result_080094c0(uint input1,uint input2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  int is_cy_null;\n  uint shifted_bits;\n  uint mask;\n  bool carry_flag;\n  undefined8 sum_result;\n  longlong result;\n  \n  mask = (input2 << 1) >> 0x15;\n  shifted_bits = mask - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      sum_result = calculate_sum(input1,input2,0x8800759c,0x7e37e43c,constant_2);\n      is_cy_null = check_cy_null((int)sum_result,(int)((ulonglong)sum_result >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (is_cy_null != 0) {\n        if ((int)input2 < 0) {\n          if ((input1 | input2 & 0x7fffffff) != 0) {\n            input2 = 0xbff00000;\n          }\n          result = (ulonglong)input2 << 0x20;\n        }\n        else {\n          result = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shifted_bits & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        sum_result = calculate_sum(input1,input2,0x8800759c,0x7e37e43c,constant_2);\n        is_cy_null = check_cy_null((int)sum_result,(int)((ulonglong)sum_result >> 0x20),0,0);\n        result = CONCAT44(input2,input1);\n        if (is_cy_null != 0) {\n          if ((int)input2 < 0) {\n            input2 = input2 + (0x100000 >> (shifted_bits & 0xff));\n          }\n          result = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shifted_bits < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    result = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      sum_result = calculate_sum(input1,input2,0x8800759c,0x7e37e43c,constant_2);\n      is_cy_null = check_cy_null((int)sum_result,(int)((ulonglong)sum_result >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (is_cy_null != 0) {\n        if ((int)input2 < 0) {\n          if (shifted_bits == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shifted_bits = 1 << (0x34 - shifted_bits & 0xff);\n            carry_flag = carry_operation(shifted_bits,input1);\n            input1 = shifted_bits + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (shifted_bits == 0x400) {\n      result = calculate_sum();\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_result_080094c0",
            "entrypoint": "0x080094c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry_operation",
                "FUN_080094c0": "calculate_result_080094c0",
                "bVar4": "carry_flag",
                "calculate_sum_080082d4": "calculate_sum",
                "iVar1": "is_cy_null",
                "is_cy_null_08008b60": "check_cy_null",
                "lVar6": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "uVar2": "shifted_bits",
                "uVar3": "mask",
                "uVar5": "sum_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080095b8": {
            "additional_data": {
                "CARRY4": {
                    "1": "check_carry"
                },
                "FUN_080095b8": {
                    "1": "calculate_multiplied_output",
                    "15": "calculate_product",
                    "9": "calculate_result"
                },
                "iVar4": {
                    "1": "multiplier",
                    "30": "sign"
                },
                "param_1": {
                    "1": "number1",
                    "13": "input1",
                    "2": "input_a",
                    "3": "multiplier",
                    "4": "input_value1"
                },
                "param_2": {
                    "1": "number2",
                    "13": "input2",
                    "2": "input_number2",
                    "3": "input_2",
                    "4": "input_value2"
                },
                "reverse_bits_08008ba0": {
                    "2": "reverse_bits"
                },
                "uVar1": {
                    "1": "carry_flag",
                    "2": "bit_shifted_input1",
                    "3": "temp1",
                    "6": "carry"
                },
                "uVar2": {
                    "1": "temp2",
                    "3": "shifted_param2",
                    "4": "shifted_input2",
                    "7": "shift_amount"
                },
                "uVar3": {
                    "1": "modified_num",
                    "28": "result"
                },
                "uVar5": {
                    "1": "adjusted_shift_amount",
                    "10": "difference",
                    "2": "shift_amount",
                    "3": "shifted_difference",
                    "9": "exponent"
                },
                "uVar6": {
                    "1": "mask"
                },
                "uVar7": {
                    "1": "carried_over_bit"
                }
            },
            "called": [
                "FUN_08008ba0"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "code": "\nint calculate_product_080095b8(uint input1,uint input2)\n\n{\n  uint carry;\n  uint shift_amount;\n  uint result;\n  int sign;\n  uint difference;\n  \n  shift_amount = (input2 << 1) >> 0x15;\n  difference = shift_amount - 0x3ff;\n  if ((int)input2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input2 & 0xfffff | 0x100000;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      if (difference != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (difference & 0xff)) >> (0x14 - difference & 0xff);\n  }\n  else {\n    if (0x1e < difference) {\n      sign = reverse_bits();\n      return sign;\n    }\n    if ((int)difference < 0x34) {\n      carry = 0x80000000 >> (shift_amount - 0x413 & 0xff);\n      if (check_carry(carry,input1) != false) {\n        result = result + 1;\n      }\n      result = result << (shift_amount - 0x413 & 0xff);\n      if (difference != 0x14) {\n        result = result | carry + input1 >> (0x34 - difference & 0xff);\n      }\n    }\n    else {\n      result = result << (shift_amount - 0x413 & 0xff) | input1 << (shift_amount - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "current_name": "calculate_product_080095b8",
            "entrypoint": "0x080095b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "check_carry",
                "FUN_080095b8": "calculate_product_080095b8",
                "iVar4": "sign",
                "param_1": "input1",
                "param_2": "input2",
                "reverse_bits_08008ba0": "reverse_bits",
                "uVar1": "carry",
                "uVar2": "shift_amount",
                "uVar3": "result",
                "uVar5": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009654": {
            "additional_data": {
                "(ulonglong)param_2 << 0x20": {
                    "1": "shifted_input2"
                },
                "0x14": {
                    "1": "lower_threshold"
                },
                "0x20": {
                    "1": "shift_amount"
                },
                "0x3ff": {
                    "1": "bias"
                },
                "0x3ff00000": {
                    "1": "bias_shifted"
                },
                "0x400": {
                    "1": "trigger_value"
                },
                "0xfffff >> (uVar1 & 0xff)": {
                    "1": "shifted_value"
                },
                "0xffffffff": {
                    "1": "negative_offset"
                },
                "0xffffffff >> (uVar2 - 0x413 & 0xff)": {
                    "1": "shifted_mask"
                },
                "CARRY4": {
                    "1": "carry_check_func"
                },
                "FUN_08009654": {
                    "1": "calculate_longlong_value",
                    "2": "convert_float_to_long",
                    "3": "calculate_double_precision",
                    "9": "convert_to_double"
                },
                "calculate_sum_080082d4": {
                    "1": "compute_sum",
                    "4": "calculate_sum"
                },
                "lVar3": {
                    "1": "concatenated",
                    "2": "double_value",
                    "21": "result"
                },
                "param_1": {
                    "1": "bit_pattern1",
                    "2": "value1",
                    "3": "input_1",
                    "5": "input1",
                    "7": "integer_part"
                },
                "param_1 & uVar2": {
                    "1": "mantissa_masked"
                },
                "param_1 + uVar1 & ~uVar2": {
                    "1": "sum_result_masked"
                },
                "param_2": {
                    "1": "integer_part",
                    "2": "value2",
                    "3": "input_2",
                    "5": "input2",
                    "6": "fractional_part"
                },
                "param_2 & 0x80000000": {
                    "1": "sign_bit"
                },
                "param_2 + (0x80000 >> (uVar1 & 0xff)) & ~uVar2": {
                    "1": "modified_value"
                },
                "param_2 + 1": {
                    "1": "increased_input_float_2"
                },
                "param_2 | 0x3ff00000": {
                    "1": "modified_input2"
                },
                "uVar1": {
                    "1": "extra_bits",
                    "2": "difference",
                    "3": "shift_count",
                    "4": "shift_amount",
                    "8": "exponent"
                },
                "uVar2": {
                    "1": "shifted_uint2",
                    "2": "shift_amount",
                    "3": "shifted_exponent",
                    "8": "mask"
                },
                "uVar2 - 0x413": {
                    "1": "mask_shifted"
                },
                "uVar2 - 0x413 & 0xff": {
                    "1": "shift_count"
                },
                "uVar3": {
                    "1": "mask"
                },
                "uVar4": {
                    "1": "round_bit"
                },
                "uVar5": {
                    "1": "carry_bit"
                },
                "uVar6": {
                    "1": "shift_count"
                }
            },
            "called": [
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08004e30"
            ],
            "code": "\nlonglong convert_to_double_08009654(uint integer_part,uint fractional_part)\n\n{\n  uint exponent;\n  uint mask;\n  longlong result;\n  \n  result = CONCAT44(fractional_part,integer_part);\n  mask = (fractional_part << 1) >> 0x15;\n  exponent = mask - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      fractional_part = fractional_part & 0x80000000;\n      if (exponent == 0xffffffff) {\n        fractional_part = fractional_part | 0x3ff00000;\n      }\n      result = (ulonglong)fractional_part << 0x20;\n    }\n    else {\n      mask = 0xfffff >> (exponent & 0xff);\n      result = CONCAT44(fractional_part,integer_part);\n      if ((fractional_part & mask | integer_part) != 0) {\n        result = (ulonglong)(fractional_part + (0x80000 >> (exponent & 0xff)) & ~mask) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponent < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    if ((integer_part & mask) != 0) {\n      exponent = 1 << (0x33 - exponent & 0xff);\n      if (overflow_occurred(integer_part,exponent) != false) {\n        fractional_part = fractional_part + 1;\n      }\n      result = CONCAT44(fractional_part,integer_part + exponent & ~mask);\n    }\n  }\n  else {\n    result = CONCAT44(fractional_part,integer_part);\n    if (exponent == 0x400) {\n      result = calculate_sum();\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "convert_to_double_08009654",
            "entrypoint": "0x08009654",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "overflow_occurred",
                "FUN_08009654": "convert_to_double_08009654",
                "calculate_sum_080082d4": "calculate_sum",
                "lVar3": "result",
                "param_1": "integer_part",
                "param_2": "fractional_part",
                "uVar1": "exponent",
                "uVar2": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080096e8": {
            "additional_data": {
                "FUN_080096e8": {
                    "1": "calculate_final_result",
                    "21": "calculate_result",
                    "9": "calculate"
                },
                "calculate_0800adf0": {
                    "1": "calculate_variant2"
                },
                "calculate_result_08009d78": {
                    "1": "calculate"
                },
                "calculate_result_0800a348": {
                    "1": "calculate_variant1"
                },
                "local_20": {
                    "1": "temp_value3",
                    "2": "temp3",
                    "3": "temp_3",
                    "9": "result_3"
                },
                "local_28": {
                    "1": "calc_result_1",
                    "10": "result_1",
                    "2": "temp_var1",
                    "3": "temp_1"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "input_parameter",
                    "5": "input_1",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "arg2",
                    "3": "bit_mask",
                    "5": "input_2",
                    "9": "input_value"
                },
                "reverse_bits_080082d0": {
                    "1": "reverse_bits"
                },
                "uStack_1c": {
                    "1": "calc_result_4",
                    "2": "temp4",
                    "3": "temp_4",
                    "9": "result_4"
                },
                "uStack_24": {
                    "1": "temp_value2",
                    "10": "result_2",
                    "2": "temp2",
                    "3": "temp_2"
                },
                "uVar1": {
                    "1": "result_1",
                    "15": "result",
                    "9": "final_result"
                },
                "uVar2": {
                    "1": "result_2",
                    "2": "flag",
                    "8": "result_type",
                    "9": "calculation_type"
                }
            },
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nundefined4 calculate_result_080096e8(undefined4 input_value,uint input_value)\n\n{\n  undefined4 result;\n  uint calculation_type;\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  \n  if (0x3fe921fb < (input_value & 0x7fffffff)) {\n    if ((input_value & 0x7fffffff) < 0x7ff00000) {\n      calculation_type = calculate(input_value,input_value,&result_1);\n      calculation_type = calculation_type & 3;\n      if (calculation_type == 1) {\n        result = calculate_variant1(result_1,result_2,result_3,result_4);\n      }\n      else if (calculation_type == 2) {\n        result = calculate_variant2(result_1,result_2,result_3,result_4,1);\n      }\n      else if (calculation_type == 0) {\n        result = calculate_variant2(result_1,result_2,result_3,result_4,1);\n      }\n      else {\n        result = calculate_variant1(result_1,result_2,result_3,result_4);\n      }\n    }\n    else {\n      result = reverse_bits(input_value,input_value,input_value,input_value);\n    }\n    return result;\n  }\n  result = calculate_variant2(input_value,input_value,0,0,0);\n  return result;\n}\n\n",
            "current_name": "calculate_result_080096e8",
            "entrypoint": "0x080096e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080096e8": "calculate_result_080096e8",
                "calculate_0800adf0": "calculate_variant2",
                "calculate_result_08009d78": "calculate",
                "calculate_result_0800a348": "calculate_variant1",
                "local_20": "result_3",
                "local_28": "result_1",
                "param_1": "input_value",
                "param_2": "input_value",
                "reverse_bits_080082d0": "reverse_bits",
                "uStack_1c": "result_4",
                "uStack_24": "result_2",
                "uVar1": "result",
                "uVar2": "calculation_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009798": {
            "additional_data": {
                "FUN_08009798": {
                    "1": "extract_sum_from_parameters",
                    "10": "calculate_shifted_value",
                    "2": "extract_bits",
                    "4": "calculate_result"
                },
                "lVar3": {
                    "31": "result"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "input_param_1",
                    "4": "input_value1",
                    "7": "input_value_1",
                    "9": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "input_param_2",
                    "4": "input_2",
                    "6": "input_value_2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "unknown_param",
                    "3": "unused_param",
                    "7": "unused_param_1"
                },
                "param_4": {
                    "1": "unknown_param2",
                    "2": "unused_param",
                    "3": "unused_parameter",
                    "4": "unused_param2",
                    "7": "unused_param_2"
                },
                "uVar1": {
                    "1": "difference",
                    "2": "bit_difference",
                    "4": "shift_amount",
                    "6": "shifted_bits"
                },
                "uVar2": {
                    "1": "shifted_param_2",
                    "2": "shifted_input2",
                    "3": "shift_amount",
                    "7": "shifted_bits",
                    "8": "shifted_value"
                }
            },
            "called": [
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "code": "\nlonglong calculate_shifted_value_08009798(uint input1,uint input2,undefined4 unused_param_1,undefined4 unused_param_2)\n\n{\n  uint shifted_value;\n  uint shifted_value;\n  longlong result;\n  \n  shifted_value = (input2 << 1) >> 0x15;\n  shifted_value = shifted_value - 0x3ff;\n  if ((int)shifted_value < 0x14) {\n    if ((int)shifted_value < 0) {\n      return ((ulonglong)input2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input2 & ~(0xfffff >> (shifted_value & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shifted_value < 0x34) {\n      return CONCAT44(input2,input1 & ~(0xffffffffU >> (shifted_value - 0x413 & 0xff)));\n    }\n    if (shifted_value != 0x400) {\n      return CONCAT44(input2,input1);\n    }\n    result = calculate_sum_080082d4(input1,input2,input1,input2,unused_param_2);\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_shifted_value_08009798",
            "entrypoint": "0x08009798",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009798": "calculate_shifted_value_08009798",
                "lVar3": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "shifted_value",
                "uVar2": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800981c": {
            "additional_data": {
                "FUN_0800981c": {
                    "1": "calculate_and_set_values",
                    "2": "calculate_result",
                    "7": "calculate_hypotenuse",
                    "9": "calculate_and_initialize"
                },
                "get_data_0800b3dc": {
                    "1": "get_data"
                },
                "iVar1": {
                    "1": "result_1",
                    "13": "result",
                    "2": "set_bit_result"
                },
                "initialize_0800b2e0": {
                    "1": "initialize_variables"
                },
                "local_30": {
                    "1": "result",
                    "2": "bit_and_shift_result",
                    "21": "bit_shift_result"
                },
                "local_38": {
                    "1": "constant2",
                    "2": "start_value",
                    "3": "constant_2"
                },
                "local_40": {
                    "1": "input_param_3_copy",
                    "2": "operand_3",
                    "3": "input_3_copy",
                    "9": "param_3_copy"
                },
                "local_48": {
                    "1": "processed_param_1",
                    "2": "input1_copy",
                    "3": "input_1_copy",
                    "9": "param_1_copy"
                },
                "local_50": {
                    "1": "var_1",
                    "2": "operation_id",
                    "4": "constant1",
                    "6": "constant_1"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "input1",
                    "3": "input_param_1",
                    "6": "side_a",
                    "7": "input_1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "value_2",
                    "3": "input_param_2",
                    "6": "side_b",
                    "7": "input_2"
                },
                "param_3": {
                    "1": "height",
                    "2": "value_3",
                    "3": "input_param_3",
                    "5": "side_c",
                    "7": "input_3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "2": "input4",
                    "3": "input_param_4",
                    "5": "side_d",
                    "7": "input_4"
                },
                "pcStack_4c": {
                    "1": "name",
                    "2": "string_ptr",
                    "3": "constant2",
                    "4": "shape_name",
                    "5": "operation_name",
                    "6": "function_name"
                },
                "piVar3": {
                    "1": "data_value_ptr",
                    "2": "data_integer_pointer",
                    "3": "data_ptr_int",
                    "5": "data_ptr_2"
                },
                "puVar2": {
                    "1": "pointer_to_data",
                    "18": "data_ptr",
                    "6": "data_pointer"
                },
                "uStack_34": {
                    "1": "flag2",
                    "2": "end_value",
                    "3": "constant_3"
                },
                "uStack_3c": {
                    "1": "parameter_4",
                    "2": "operand_4",
                    "3": "param4_copy",
                    "9": "param_4_copy"
                },
                "uStack_44": {
                    "1": "param_2",
                    "2": "operand_2",
                    "3": "side_b",
                    "9": "param_2_copy"
                },
                "uVar4": {
                    "1": "result_2",
                    "13": "result",
                    "2": "return_value",
                    "6": "final_result"
                }
            },
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "code": "\nundefined8 calculate_and_initialize_0800981c(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  undefined4 *data_ptr;\n  int *data_ptr_2;\n  undefined8 result;\n  undefined4 constant_1;\n  char *function_name;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 constant_2;\n  undefined4 constant_3;\n  int bit_shift_result;\n  \n  result = calculate_result_08009b24();\n  if (DAT_20000014 == -1) {\n    return result;\n  }\n  bit_shift_result = set_bit_and_shift_0800b2d4();\n  if (bit_shift_result != 0) {\n    return result;\n  }\n  result = set_bit_and_shift_0800b2d4(input_1,input_2);\n  if (result == 0) {\n    return result;\n  }\n  result = set_bit_and_shift_0800b2d4(input_3,input_4);\n  if (result == 0) {\n    return result;\n  }\n  constant_1 = 3;\n  function_name = \"hypot\";\n  param_1_copy = input_1;\n  param_2_copy = input_2;\n  param_3_copy = input_3;\n  param_4_copy = input_4;\n  if (DAT_20000014 == '\\0') {\n    constant_2 = 0xe0000000;\n    constant_3 = 0x47efffff;\nLAB_080098aa:\n    result = initialize_variables(&constant_1);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    constant_2 = 0;\n    constant_3 = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  data_ptr = (undefined4 *)get_data();\n  *data_ptr = 0x22;\nLAB_08009896:\n  result = CONCAT44(constant_3,constant_2);\n  if (bit_shift_result != 0) {\n    data_ptr_2 = (int *)get_data();\n    result = CONCAT44(constant_3,constant_2);\n    *data_ptr_2 = bit_shift_result;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_and_initialize_0800981c",
            "entrypoint": "0x0800981c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800981c": "calculate_and_initialize_0800981c",
                "get_data_0800b3dc": "get_data",
                "iVar1": "result",
                "initialize_0800b2e0": "initialize_variables",
                "local_30": "bit_shift_result",
                "local_38": "constant_2",
                "local_40": "param_3_copy",
                "local_48": "param_1_copy",
                "local_50": "constant_1",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "pcStack_4c": "function_name",
                "piVar3": "data_ptr_2",
                "puVar2": "data_ptr",
                "uStack_34": "constant_3",
                "uStack_3c": "param_4_copy",
                "uStack_44": "param_2_copy",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080098d0": {
            "additional_data": {
                "FUN_080098d0": {
                    "1": "validate_parameters",
                    "2": "process_parameters",
                    "3": "calculate_result",
                    "8": "process_data"
                },
                "cVar1": {
                    "1": "flag_byte",
                    "6": "flag"
                },
                "iVar3": {
                    "1": "is_valid",
                    "16": "check_result",
                    "3": "param_check_result",
                    "4": "parameter_check"
                },
                "local_30": {
                    "1": "check_result",
                    "2": "result",
                    "3": "is_empty",
                    "6": "string_check_result",
                    "7": "string_length"
                },
                "local_38": {
                    "1": "precision_result",
                    "2": "double_precision_value",
                    "3": "precision_value",
                    "5": "double_precision_result",
                    "7": "result"
                },
                "local_40": {
                    "1": "param_1_copy_2",
                    "2": "input_1_copy2",
                    "4": "input1_copy2",
                    "7": "input_1_copy_2"
                },
                "local_48": {
                    "1": "temp_param_1",
                    "11": "input_1_copy",
                    "3": "param_1_copy",
                    "4": "input1_copy"
                },
                "local_4c": {
                    "1": "character_pointer",
                    "2": "error_message",
                    "3": "message",
                    "6": "string_ptr",
                    "7": "string_pointer"
                },
                "local_50": {
                    "1": "initialized_flag",
                    "2": "is_valid_input",
                    "21": "flag"
                },
                "param_1": {
                    "14": "input_1",
                    "2": "input_parameter1",
                    "3": "input_param1",
                    "5": "input_param_1",
                    "7": "input1"
                },
                "param_2": {
                    "14": "input_2",
                    "2": "input_parameter2",
                    "3": "input_param2",
                    "5": "input_param_2",
                    "7": "input2"
                },
                "piVar5": {
                    "1": "data_pointer2",
                    "2": "data_int_ptr",
                    "3": "int_data_ptr",
                    "5": "data_ptr_int"
                },
                "puVar4": {
                    "1": "data_pointer1",
                    "10": "data_pointer",
                    "14": "data_ptr"
                },
                "uStack_3c": {
                    "1": "temp_input_2_ptr",
                    "2": "input_2_copy2",
                    "4": "input2_copy2",
                    "7": "input_2_copy_2"
                },
                "uStack_44": {
                    "1": "saved_param_2",
                    "11": "input_2_copy",
                    "3": "param_2_copy",
                    "4": "input2_copy"
                },
                "uVar2": {
                    "1": "result_variable",
                    "22": "result",
                    "3": "calculated_result"
                }
            },
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "code": "\nundefined4 process_data_080098d0(undefined4 input_1,undefined4 input_2)\n\n{\n  char flag;\n  undefined4 result;\n  int check_result;\n  undefined4 *data_ptr;\n  int *data_int_pointer;\n  undefined4 flag;\n  undefined *string_pointer;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_1_copy_2;\n  undefined4 input_2_copy_2;\n  undefined8 result;\n  int string_length;\n  \n  result = calculate_result_0800a1bc();\n  flag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (string_length = check_parameters_08008b74(input_1,input_2,input_1,input_2), string_length != 0)) ||\n     (check_result = check_if_string_empty_08008b24(input_1,input_2,0,0), check_result == 0)) {\n    return result;\n  }\n  flag = 1;\n  string_pointer = &DAT_0800be5c;\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_1_copy_2 = input_1;\n  input_2_copy_2 = input_2;\n  if (flag == '\\0') {\n    result = 0;\nLAB_0800996c:\n    check_result = initialize_0800b2e0(&flag);\n    if (check_result != 0) goto joined_r0x0800997a;\n  }\n  else {\n    result = calculate_double_precision_08008894(0,0,0,0);\n    if (flag != '\\x02') goto LAB_0800996c;\n  }\n  data_ptr = (undefined4 *)get_data_0800b3dc();\n  *data_ptr = 0x21;\njoined_r0x0800997a:\n  if (string_length != 0) {\n    data_int_pointer = (int *)get_data_0800b3dc();\n    *data_int_pointer = string_length;\n  }\n  return (undefined4)result;\n}\n\n",
            "current_name": "process_data_080098d0",
            "entrypoint": "0x080098d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080098d0": "process_data_080098d0",
                "cVar1": "flag",
                "iVar3": "check_result",
                "local_30": "string_length",
                "local_38": "result",
                "local_40": "input_1_copy_2",
                "local_48": "input_1_copy",
                "local_4c": "string_pointer",
                "local_50": "flag",
                "param_1": "input_1",
                "param_2": "input_2",
                "piVar5": "data_int_pointer",
                "puVar4": "data_ptr",
                "uStack_3c": "input_2_copy_2",
                "uStack_44": "input_2_copy",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009990": {
            "additional_data": {
                "DAT_0800be68": {
                    "1": "data_1",
                    "2": "constant1"
                },
                "DAT_0800be80": {
                    "1": "constants2",
                    "2": "constant2"
                },
                "FUNC_0800b2cc": {
                    "1": "perform_additional_calculation",
                    "2": "perform_operation",
                    "3": "some_function"
                },
                "FUN_08009990": {
                    "1": "calculate_improved_result",
                    "18": "calculate_result",
                    "6": "calculate"
                },
                "calculate_double_precision_08008894": {
                    "1": "calc_double_precision",
                    "13": "calculate_double_precision"
                },
                "calculate_result_0800af78": {
                    "1": "calculate_result_2",
                    "9": "calculate_result"
                },
                "calculate_sum_080082d4": {
                    "1": "calc_sum",
                    "13": "calculate_sum"
                },
                "iVar1": {
                    "1": "temp_var",
                    "2": "temp_var1",
                    "25": "difference"
                },
                "param_1": {
                    "1": "first_param",
                    "17": "input1",
                    "8": "input_1"
                },
                "param_2": {
                    "1": "var2",
                    "17": "input2",
                    "8": "input_2"
                },
                "param_3": {
                    "1": "third_param",
                    "17": "input3",
                    "8": "input_3"
                },
                "param_4": {
                    "1": "value4",
                    "17": "input4",
                    "8": "input_4"
                },
                "reverse_bits_080082d0": {
                    "14": "reverse_bits"
                },
                "uVar2": {
                    "1": "upper32",
                    "2": "temp_var2",
                    "5": "upper_bits"
                },
                "uVar3": {
                    "1": "bitwise_result",
                    "2": "temp3",
                    "3": "flag"
                },
                "uVar4": {
                    "1": "positive_input_4",
                    "2": "temp4",
                    "3": "normalized_input4"
                },
                "uVar5": {
                    "1": "temp_var_5",
                    "2": "normalized_input_2",
                    "3": "normalized_input2"
                },
                "uVar6": {
                    "1": "result_2",
                    "18": "result",
                    "2": "temp_var6",
                    "3": "calculation_result"
                },
                "uVar7": {
                    "1": "temp"
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "calling": [
                "thunk_FUN_08009990"
            ],
            "code": "\nuint calculate_result_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 upper_bits;\n  uint flag;\n  uint normalized_input4;\n  uint normalized_input2;\n  undefined8 result;\n  \n  normalized_input4 = input4 & 0x7fffffff;\n  if (((normalized_input4 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (normalized_input2 = input2 & 0x7fffffff, (normalized_input2 | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      normalized_input4 = calculate_result_08009990();\n      return normalized_input4;\n    }\n    flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((normalized_input2 | input1) == 0) {\n      if (flag == 2) {\n        input1 = 0x54442d18;\n      }\n      else if (flag == 3) {\n        input1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((normalized_input4 | input3) != 0) {\n        if (normalized_input4 == 0x7ff00000) {\n          flag = flag - 1;\n          if (normalized_input2 == 0x7ff00000) {\n            if (flag < 3) {\n              return *(uint *)(&DAT_0800be68 + flag * 8);\n            }\n            return 0x54442d18;\n          }\n          if (flag < 3) {\n            return *(uint *)(&DAT_0800be80 + flag * 8);\n          }\n          return 0;\n        }\n        if (normalized_input2 != 0x7ff00000) {\n          difference = (int)(normalized_input2 - normalized_input4) >> 0x14;\n          if ((int)(normalized_input2 - normalized_input4) < 0x3d00000) {\n            if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              result = 0;\n            }\n            else {\n              calculate_double_precision(input1,input2,input3,input4,input4);\n              FUNC_0800b2cc();\n              result = calculate_result_08009990();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          upper_bits = (undefined4)((ulonglong)result >> 0x20);\n          normalized_input4 = (uint)result;\n          if (flag == 1) {\n            return normalized_input4;\n          }\n          if (flag == 2) {\n            result = reverse_bits(normalized_input4,upper_bits,0x33145c07,0x3ca1a626);\n            normalized_input4 = reverse_bits(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return normalized_input4;\n          }\n          if (flag == 0) {\n            return normalized_input4;\n          }\n          result = reverse_bits(normalized_input4,upper_bits,0x33145c07,0x3ca1a626);\n          normalized_input4 = reverse_bits((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return normalized_input4;\n        }\n      }\n      if ((int)input2 < 0) {\n        input1 = 0x54442d18;\n      }\n      else {\n        input1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input1 = calculate_sum(input3,input4,input1,input2);\n  }\n  return input1;\n}\n\n",
            "current_name": "calculate_result_08009990",
            "entrypoint": "0x08009990",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009990": "calculate_result_08009990",
                "calculate_double_precision_08008894": "calculate_double_precision",
                "calculate_result_0800af78": "calculate_result",
                "calculate_sum_080082d4": "calculate_sum",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_080082d0": "reverse_bits",
                "uVar2": "upper_bits",
                "uVar3": "flag",
                "uVar4": "normalized_input4",
                "uVar5": "normalized_input2",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009b24": {
            "additional_data": {
                "FUN_08009b24": {
                    "1": "calculate_modified_value",
                    "18": "calculate_result",
                    "2": "calculate_result_with_conditions",
                    "7": "calculate"
                },
                "iVar2": {
                    "1": "is_empty",
                    "13": "result_2",
                    "2": "check_result",
                    "7": "result2"
                },
                "iVar4": {
                    "1": "result_temp",
                    "11": "result_4",
                    "2": "result_var_4",
                    "6": "result4"
                },
                "iVar6": {
                    "1": "temp_variable2",
                    "11": "result_6",
                    "2": "result_var_6",
                    "6": "result6"
                },
                "local_3c": {
                    "1": "shift",
                    "11": "local_var",
                    "2": "local_var_1",
                    "3": "result_14",
                    "4": "local_variable"
                },
                "param_1": {
                    "1": "input_a",
                    "13": "input_1",
                    "2": "input_param_1",
                    "9": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "13": "input_2",
                    "2": "input_param_2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "third_param",
                    "13": "input_3",
                    "2": "input_param_3",
                    "9": "input3"
                },
                "param_4": {
                    "1": "value4",
                    "13": "input_4",
                    "2": "input_param_4",
                    "9": "input4"
                },
                "uVar1": {
                    "1": "var1",
                    "13": "result_1",
                    "2": "result_var_1",
                    "4": "result",
                    "9": "result1"
                },
                "uVar10": {
                    "1": "result_6",
                    "2": "result_var_10",
                    "4": "result10",
                    "9": "result_10"
                },
                "uVar11": {
                    "1": "intermediate_result1",
                    "10": "result_11",
                    "2": "result_var_11",
                    "4": "result11"
                },
                "uVar12": {
                    "1": "intermediate_result2",
                    "10": "result_12",
                    "2": "result_var_12",
                    "4": "result12"
                },
                "uVar13": {
                    "1": "temp_result3",
                    "10": "result_13",
                    "2": "result_var_13",
                    "4": "result13"
                },
                "uVar3": {
                    "1": "output",
                    "11": "result_3",
                    "2": "result",
                    "6": "result3"
                },
                "uVar5": {
                    "1": "result1",
                    "12": "result_5",
                    "2": "result_3",
                    "6": "result5"
                },
                "uVar7": {
                    "1": "result_6",
                    "11": "result_7",
                    "2": "result_var_7",
                    "5": "result7"
                },
                "uVar8": {
                    "1": "high_input",
                    "11": "result_8",
                    "2": "result5",
                    "5": "result8"
                },
                "uVar9": {
                    "1": "u_var_temp2",
                    "11": "result_9",
                    "2": "result_var_9",
                    "5": "result9"
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_0800981c"
            ],
            "code": "\nuint calculate_result_08009b24(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  int result_2;\n  uint result_3;\n  int result_4;\n  undefined4 result_5;\n  int result_6;\n  uint result_7;\n  undefined4 result_8;\n  undefined4 result_9;\n  undefined8 result_10;\n  undefined8 result_11;\n  undefined8 result_12;\n  undefined8 result_13;\n  int local_var;\n  \n  input_2 = input_2 & 0x7fffffff;\n  input_4 = input_4 & 0x7fffffff;\n  result_3 = input_1;\n  result_7 = input_2;\n  if (input_2 < input_4) {\n    result_3 = input_3;\n    input_3 = input_1;\n    result_7 = input_4;\n    input_4 = input_2;\n  }\n  if (0x3c00000 < (int)(result_7 - input_4)) {\n    result_3 = calculate_sum_080082d4(result_3,result_7,input_3,input_4);\n    return result_3;\n  }\n  if (result_7 < 0x5f300001) {\n    local_var = 0;\n  }\n  else {\n    if (0x7fefffff < result_7) {\n      if ((result_7 & 0xfffff | result_3) != 0) {\n        result_3 = calculate_sum_080082d4(result_3,result_7,input_3,input_4);\n      }\n      if ((input_4 ^ 0x7ff00000 | input_3) != 0) {\n        return result_3;\n      }\n      return input_3;\n    }\n    result_7 = result_7 + 0xda800000;\n    input_4 = input_4 + 0xda800000;\n    local_var = 600;\n  }\n  result_11 = CONCAT44(result_7,result_3);\n  result_10 = CONCAT44(input_4,input_3);\n  if ((int)input_4 < 0x20b00000) {\n    if ((int)input_4 < 0x100000) {\n      if ((input_4 | input_3) == 0) {\n        return result_3;\n      }\n      result_10 = calculate_result_08009b24_08008640(input_3,input_4,0,0x7fd00000);\n      result_11 = calculate_result_08009b24_08008640(result_3,result_7,0,0x7fd00000);\n      local_var = local_var + -0x3fe;\n    }\n    else {\n      result_7 = result_7 + 0x25800000;\n      result_11 = CONCAT44(result_7,result_3);\n      input_4 = input_4 + 0x25800000;\n      result_10 = CONCAT44(input_4,input_3);\n      local_var = local_var + -600;\n    }\n  }\n  result_9 = (undefined4)((ulonglong)result_11 >> 0x20);\n  result_8 = (undefined4)result_11;\n  result_6 = (int)((ulonglong)result_10 >> 0x20);\n  result_5 = (undefined4)result_10;\n  result_10 = reverse_bits_080082d0(result_8,result_9,result_5,result_6);\n  result_4 = (int)((ulonglong)result_10 >> 0x20);\n  result_1 = (undefined4)result_10;\n  result_2 = check_if_string_empty_08008b24(result_5,result_6,result_1,result_4);\n  if (result_2 == 0) {\n    result_10 = calculate_result_08009b24_08008640(0,input_4,0);\n    result_11 = calculate_result_08009b24_08008640(result_1,result_4 + -0x80000000,result_1,result_4);\n    result_12 = calculate_sum_080082d4(result_8,result_9,result_8,result_9);\n    result_12 = reverse_bits_080082d0((int)result_12,(int)((ulonglong)result_12 >> 0x20),0,result_7 + 0x100000);\n    result_12 = calculate_result_08009b24_08008640((int)result_12,(int)((ulonglong)result_12 >> 0x20),result_5,result_6);\n    result_13 = reverse_bits_080082d0(result_5,result_6,0,input_4);\n    result_13 = calculate_result_08009b24_08008640((int)result_13,(int)((ulonglong)result_13 >> 0x20),0,result_7 + 0x100000);\n    result_12 = calculate_sum_080082d4((int)result_12,(int)((ulonglong)result_12 >> 0x20),(int)result_13,\n                          (int)((ulonglong)result_13 >> 0x20));\n    result_11 = reverse_bits_080082d0((int)result_11,(int)((ulonglong)result_11 >> 0x20),(int)result_12,\n                          (int)((ulonglong)result_12 >> 0x20));\n    reverse_bits_080082d0((int)result_10,(int)((ulonglong)result_10 >> 0x20),(int)result_11,\n                 (int)((ulonglong)result_11 >> 0x20));\n    result_10 = calculate_result_08009b24_0800a1bc();\n  }\n  else {\n    result_10 = calculate_result_08009b24_08008640(0,result_7,0,result_7);\n    result_11 = calculate_result_08009b24_08008640(result_5,result_6 + -0x80000000,result_5,result_6);\n    result_12 = calculate_sum_080082d4(result_8,result_9,0,result_7);\n    result_13 = reverse_bits_080082d0(result_8,result_9,0,result_7);\n    result_12 = calculate_result_08009b24_08008640((int)result_12,(int)((ulonglong)result_12 >> 0x20),(int)result_13,\n                          (int)((ulonglong)result_13 >> 0x20));\n    result_11 = reverse_bits_080082d0((int)result_11,(int)((ulonglong)result_11 >> 0x20),(int)result_12,\n                          (int)((ulonglong)result_12 >> 0x20));\n    reverse_bits_080082d0((int)result_10,(int)((ulonglong)result_10 >> 0x20),(int)result_11,\n                 (int)((ulonglong)result_11 >> 0x20));\n    result_10 = calculate_result_08009b24_0800a1bc();\n  }\n  result_3 = (uint)result_10;\n  if (local_var != 0) {\n    result_3 = calculate_result_08009b24_08008640(result_3,(int)((ulonglong)result_10 >> 0x20),0,local_var * 0x100000 + 0x3ff00000);\n  }\n  return result_3;\n}\n\n",
            "current_name": "calculate_result_08009b24",
            "entrypoint": "0x08009b24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009b24": "calculate_result_08009b24",
                "iVar2": "result_2",
                "iVar4": "result_4",
                "iVar6": "result_6",
                "local_3c": "local_var",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar10": "result_10",
                "uVar11": "result_11",
                "uVar12": "result_12",
                "uVar13": "result_13",
                "uVar3": "result_3",
                "uVar5": "result_5",
                "uVar7": "result_7",
                "uVar8": "result_8",
                "uVar9": "result_9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009d78": {
            "additional_data": {
                "FUN_08009d78": {
                    "1": "process_number",
                    "17": "calculate_result",
                    "2": "calculate_improved_result"
                },
                "iVar9": {
                    "1": "result_code",
                    "17": "result",
                    "2": "loop_counter",
                    "4": "return_value"
                },
                "local_30": {
                    "1": "local5",
                    "12": "local_var5",
                    "2": "new_var5"
                },
                "local_38": {
                    "1": "local_var3",
                    "12": "local_var4",
                    "2": "new_var4"
                },
                "local_40": {
                    "1": "temp13",
                    "12": "local_var3",
                    "2": "new_var3"
                },
                "local_50": {
                    "1": "temp_val",
                    "13": "local_var1",
                    "2": "var1"
                },
                "param_1": {
                    "1": "input_val",
                    "18": "input1",
                    "2": "input_param",
                    "4": "input_value"
                },
                "param_2": {
                    "1": "input_param",
                    "18": "input2",
                    "2": "input_2"
                },
                "param_3": {
                    "1": "result",
                    "18": "output",
                    "2": "output_values",
                    "4": "result_array"
                },
                "uStack_4c": {
                    "1": "temp_var4_c",
                    "12": "local_var2",
                    "2": "var2"
                },
                "uVar1": {
                    "1": "result",
                    "5": "temp_var1",
                    "6": "result1",
                    "9": "var1"
                },
                "uVar10": {
                    "1": "temp10",
                    "2": "result1",
                    "5": "temp_var10",
                    "8": "temp1"
                },
                "uVar11": {
                    "1": "temp10",
                    "2": "temp9",
                    "5": "temp_var11",
                    "8": "temp2"
                },
                "uVar12": {
                    "1": "calculation_result3",
                    "2": "temp10",
                    "5": "temp_var12",
                    "8": "temp3"
                },
                "uVar2": {
                    "1": "temp_value2",
                    "4": "temp2",
                    "5": "temp_var2",
                    "6": "result2",
                    "9": "var2"
                },
                "uVar3": {
                    "1": "temp_value3",
                    "2": "temp2",
                    "4": "temp3",
                    "5": "temp_var3",
                    "9": "var3"
                },
                "uVar4": {
                    "1": "temp2",
                    "2": "temp3",
                    "4": "result4",
                    "5": "temp_var4",
                    "9": "var4"
                },
                "uVar5": {
                    "1": "temp_value_5",
                    "2": "temp4",
                    "4": "result5",
                    "5": "temp_var5",
                    "9": "var5"
                },
                "uVar6": {
                    "1": "temp4",
                    "2": "temp5",
                    "4": "temp6",
                    "5": "temp_var6",
                    "9": "var6"
                },
                "uVar7": {
                    "1": "temp_value7",
                    "2": "temp6",
                    "4": "temp7",
                    "5": "temp_var7",
                    "9": "var7"
                },
                "uVar8": {
                    "1": "param2_unsigned",
                    "2": "modified_input2",
                    "4": "var8"
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "code": "\nint calculate_result_08009d78(undefined4 input1,uint input2,undefined8 *output)\n\n{\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  uint var8;\n  int result;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  \n  var8 = input2 & 0x7fffffff;\n  if (var8 < 0x3fe921fc) {\n    *(undefined4 *)output = input1;\n    *(uint *)((int)output + 4) = input2;\n    *(undefined4 *)(output + 1) = 0;\n    *(undefined4 *)((int)output + 0xc) = 0;\n    return 0;\n  }\n  if (var8 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      temp1 = calculate_sum_080082d4(input1,input2,0x54400000,0x3ff921fb);\n      var3 = (undefined4)((ulonglong)temp1 >> 0x20);\n      var1 = (undefined4)temp1;\n      if (var8 != 0x3ff921fb) {\n        temp1 = calculate_sum_080082d4(var1,var3,0x1a626331,0x3dd0b461);\n        *output = temp1;\n        temp1 = reverse_bits_080082d0(var1,var3);\n        temp1 = calculate_sum_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x1a626331,0x3dd0b461);\n        output[1] = temp1;\n        return -1;\n      }\n      temp1 = calculate_sum_080082d4(var1,var3,0x1a600000,0x3dd0b461);\n      var1 = (undefined4)((ulonglong)temp1 >> 0x20);\n      temp2 = calculate_sum_080082d4((int)temp1,var1,0x2e037073,0x3ba3198a);\n      *output = temp2;\n      temp1 = reverse_bits_080082d0((int)temp1,var1);\n      temp1 = calculate_sum_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x2e037073,0x3ba3198a);\n      output[1] = temp1;\n      return -1;\n    }\n    temp1 = reverse_bits_080082d0();\n    var3 = (undefined4)((ulonglong)temp1 >> 0x20);\n    var1 = (undefined4)temp1;\n    if (var8 != 0x3ff921fb) {\n      temp1 = reverse_bits_080082d0(var1,var3,0x1a626331,0x3dd0b461);\n      *output = temp1;\n      temp1 = reverse_bits_080082d0(var1,var3);\n      temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x1a626331,0x3dd0b461);\n      output[1] = temp1;\n      return 1;\n    }\n    temp1 = reverse_bits_080082d0(var1,var3,0x1a600000,0x3dd0b461);\n    var1 = (undefined4)((ulonglong)temp1 >> 0x20);\n    temp2 = reverse_bits_080082d0((int)temp1,var1,0x2e037073,0x3ba3198a);\n    *output = temp2;\n    temp1 = reverse_bits_080082d0((int)temp1,var1);\n    temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x2e037073,0x3ba3198a);\n    output[1] = temp1;\n    return 1;\n  }\n  if (0x413921fb < var8) {\n    if (0x7fefffff < var8) {\n      temp1 = reverse_bits_080082d0(input1,input2,input1,input2);\n      output[1] = temp1;\n      *output = temp1;\n      return 0;\n    }\n    result = ((int)var8 >> 0x14) + -0x416;\n    reverse_bits_08008ba0();\n    local_var3 = reverse_bits_0800856c();\n    temp1 = reverse_bits_080082d0(input1,var8 + result * -0x100000,(int)local_var3,\n                          (int)((ulonglong)local_var3 >> 0x20));\n    temp1 = calculate_result_08009d78_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x41700000);\n    reverse_bits_08008ba0();\n    local_var4 = reverse_bits_0800856c();\n    temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    local_var5 = calculate_result_08009d78_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x41700000);\n    check_parameters_08008b10((int)local_var5,(int)((ulonglong)local_var5 >> 0x20),0,0);\n    result = reverse_and_calculate_0800a5a0(&local_var3,output,result);\n    if (-1 < (int)input2) {\n      return result;\n    }\n    *(int *)((int)output + 4) = *(int *)((int)output + 4) + -0x80000000;\n    *(int *)((int)output + 0xc) = *(int *)((int)output + 0xc) + -0x80000000;\n    return -result;\n  }\n  temp1 = FUNC_0800b2cc();\n  var3 = (undefined4)((ulonglong)temp1 >> 0x20);\n  temp2 = calculate_result_08009d78_08008640((int)temp1,var3,0x6dc9c883,0x3fe45f30);\n  calculate_sum_080082d4((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3fe00000);\n  result = reverse_bits_08008ba0();\n  temp2 = reverse_bits_0800856c();\n  var4 = (undefined4)((ulonglong)temp2 >> 0x20);\n  var1 = (undefined4)temp2;\n  temp2 = calculate_result_08009d78_08008640(var1,var4,0x54400000,0x3ff921fb);\n  temp1 = reverse_bits_080082d0((int)temp1,var3,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  var5 = (undefined4)((ulonglong)temp1 >> 0x20);\n  var3 = (undefined4)temp1;\n  temp2 = calculate_result_08009d78_08008640(var1,var4,0x1a626331,0x3dd0b461);\n  if ((0x1f < result) || (*(uint *)(&DAT_0800be98 + (result + -1) * 4) == var8)) {\n    temp3 = reverse_bits_080082d0(var3,var5,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if ((int)((var8 >> 0x14) - ((uint)((int)((ulonglong)temp3 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp2 = calculate_result_08009d78_08008640(var1,var4,0x1a600000,0x3dd0b461);\n    var6 = (undefined4)((ulonglong)temp2 >> 0x20);\n    temp1 = reverse_bits_080082d0(var3,var5,(int)temp2,var6);\n    var7 = (undefined4)((ulonglong)temp1 >> 0x20);\n    var2 = (undefined4)temp1;\n    temp3 = reverse_bits_080082d0(var3,var5,var2,var7);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,var6);\n    temp3 = calculate_result_08009d78_08008640(var1,var4,0x2e037073,0x3ba3198a);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,\n                          (int)((ulonglong)temp2 >> 0x20));\n    temp3 = reverse_bits_080082d0(var2,var7,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if ((int)(((int)var8 >> 0x14) - ((uint)((int)((ulonglong)temp3 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp2 = calculate_result_08009d78_08008640(var1,var4,0x2e000000,0x3ba3198a);\n    var3 = (undefined4)((ulonglong)temp2 >> 0x20);\n    temp1 = reverse_bits_080082d0(var2,var7,(int)temp2,var3);\n    temp3 = reverse_bits_080082d0(var2,var7);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,var3);\n    temp3 = calculate_result_08009d78_08008640(var1,var4,0x252049c1,0x397b839a);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,\n                          (int)((ulonglong)temp2 >> 0x20));\n  }\n  temp3 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                        (int)((ulonglong)temp2 >> 0x20));\nLAB_0800a0ce:\n  local_var2 = (undefined4)((ulonglong)temp1 >> 0x20);\n  local_var1 = (undefined4)temp1;\n  *output = temp3;\n  temp1 = reverse_bits_080082d0(local_var1,local_var2);\n  temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                        (int)((ulonglong)temp2 >> 0x20));\n  output[1] = temp1;\n  if ((int)input2 < 0) {\n    *(int *)output = (int)temp3;\n    *(int *)((int)output + 4) = (int)((ulonglong)temp3 >> 0x20) + -0x80000000;\n    *(int *)(output + 1) = (int)temp1;\n    *(int *)((int)output + 0xc) = (int)((ulonglong)temp1 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_result_08009d78",
            "entrypoint": "0x08009d78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "iVar9": "result",
                "local_30": "local_var5",
                "local_38": "local_var4",
                "local_40": "local_var3",
                "local_50": "local_var1",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "uStack_4c": "local_var2",
                "uVar1": "var1",
                "uVar10": "temp1",
                "uVar11": "temp2",
                "uVar12": "temp3",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "var7",
                "uVar8": "var8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "additional_data": {
                "FUN_0800a1bc": {
                    "1": "reverse_and_calculate",
                    "12": "calculate_result",
                    "3": "calculate_sum",
                    "4": "calculate_result_and_sum",
                    "6": "calculate"
                },
                "calculate_double_precision_08008894": {
                    "2": "calculate_double_precision"
                },
                "calculate_result_08008640": {
                    "2": "calculate_result"
                },
                "calculate_sum_080082d4": {
                    "2": "calculate_sum"
                },
                "iVar10": {
                    "1": "temp9",
                    "2": "inner_counter",
                    "3": "temp10",
                    "6": "loop_counter"
                },
                "iVar2": {
                    "1": "var35",
                    "2": "iteration_count",
                    "3": "temp2",
                    "5": "count",
                    "6": "counter"
                },
                "param_1": {
                    "1": "input_num1",
                    "10": "input1",
                    "11": "input_1",
                    "2": "input",
                    "3": "input_value_1"
                },
                "param_2": {
                    "1": "shift",
                    "10": "input2",
                    "11": "input_2",
                    "3": "input_value_2"
                },
                "reverse_bits_080082d0": {
                    "2": "reverse_bits"
                },
                "uVar1": {
                    "1": "result",
                    "10": "shifted_input",
                    "2": "result1",
                    "4": "temp1"
                },
                "uVar10": {
                    "1": "var36"
                },
                "uVar11": {
                    "1": "result",
                    "2": "u_var11",
                    "3": "temp11"
                },
                "uVar12": {
                    "1": "leading_zeros",
                    "2": "shift_amount",
                    "3": "temp12",
                    "4": "shift"
                },
                "uVar13": {
                    "1": "temp9",
                    "2": "result_2",
                    "3": "temp13",
                    "4": "intermediate_result",
                    "8": "result"
                },
                "uVar14": {
                    "1": "loop_multiplier",
                    "2": "sum"
                },
                "uVar15": {
                    "1": "double_result"
                },
                "uVar2": {
                    "1": "shifted_result"
                },
                "uVar21": {
                    "1": "shifted_result"
                },
                "uVar22": {
                    "1": "shifted_mask"
                },
                "uVar23": {
                    "1": "compared_value"
                },
                "uVar3": {
                    "1": "adding_mask",
                    "2": "result2",
                    "3": "temp3",
                    "8": "temp"
                },
                "uVar4": {
                    "1": "temp3",
                    "2": "temp_value",
                    "3": "result",
                    "4": "temp4"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "shift",
                    "3": "temp5",
                    "4": "shift_amount"
                },
                "uVar6": {
                    "1": "temp4",
                    "2": "bit",
                    "3": "temp6",
                    "7": "mask"
                },
                "uVar7": {
                    "1": "var48",
                    "11": "result",
                    "2": "calculation_result",
                    "3": "remainder"
                },
                "uVar8": {
                    "1": "remaining_shifts",
                    "2": "difference",
                    "3": "temp8"
                },
                "uVar9": {
                    "1": "temp_var_5",
                    "2": "u_var9",
                    "3": "temp9",
                    "4": "shifted_input"
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "code": "\nuint calculate_result_0800a1bc(uint input_1,uint input_2)\n\n{\n  uint shifted_input;\n  int counter;\n  uint temp;\n  undefined4 temp2;\n  uint shift_amount;\n  uint mask;\n  uint result;\n  uint temp8;\n  uint shifted_input;\n  int loop_counter;\n  uint temp_result;\n  uint shift_count;\n  undefined8 result;\n  \n  if ((~input_2 & 0x7ff00000) == 0) {\n    result = calculate_result_0800a1bc(input_1,input_2,input_1,input_2);\n    result = calculate_sum((int)result,(int)((ulonglong)result >> 0x20),input_1,input_2);\n    return result;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return input_1;\n    }\n    if (input_2 != 0) {\n      result = reverse_bits(input_1,input_2,input_1);\n      temp2 = (undefined4)((ulonglong)result >> 0x20);\n      result = calculate_double_precision((int)result,temp2,(int)result,temp2);\n      return result;\n    }\n    do {\n      shifted_input = input_1;\n      result = shifted_input >> 0xb;\n      input_2 = input_2 - 0x15;\n      input_1 = shifted_input << 0x15;\n    } while (result == 0);\n    shifted_input = input_2;\n    if (-1 < (int)shifted_input) goto LAB_0800a290;\n    shift_count = 0x20;\n    shift_amount = 0xffffffff;\n    shifted_input = input_1;\n  }\n  else {\n    shifted_input = (int)input_2 >> 0x14;\n    result = input_2;\n    shifted_input = input_1;\n    if (shifted_input != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    shifted_input = 0;\n    shift_count = result;\n    do {\n      shift_amount = shifted_input;\n      result = shift_count << 1;\n      loop_counter = shift_count << 0xc;\n      shifted_input = shift_amount + 1;\n      shift_count = result;\n    } while (-1 < loop_counter);\n    shift_count = 0x20 - shifted_input;\n    input_2 = shifted_input;\n    shifted_input = input_1 << (shifted_input & 0xff);\n  }\n  result = input_1 >> (shift_count & 0xff) | result;\n  shifted_input = input_2 - shift_amount;\nLAB_0800a1da:\n  result = result & 0xfffff | 0x100000;\n  if (-1 < (int)(shifted_input << 0x1f)) {\n    result = result * 2 - ((int)shifted_input >> 0x1f);\n    shifted_input = shifted_input << 1;\n  }\n  shift_count = 0;\n  result = result * 2 - ((int)shifted_input >> 0x1f);\n  shifted_input = shifted_input << 1;\n  shifted_input = 0;\n  loop_counter = 0x16;\n  shift_amount = 0x200000;\n  do {\n    counter = shifted_input + shift_amount;\n    if (counter <= (int)result) {\n      result = result - counter;\n      shifted_input = counter + shift_amount;\n      shift_count = shift_count + shift_amount;\n    }\n    loop_counter = loop_counter + -1;\n    result = result * 2 - ((int)shifted_input >> 0x1f);\n    shift_amount = shift_amount >> 1;\n    shifted_input = shifted_input << 1;\n  } while (loop_counter != 0);\n  counter = 0x20;\n  mask = 0x80000000;\n  loop_counter = 0;\n  shift_amount = 0;\n  do {\n    temp = mask + loop_counter;\n    temp_result = shifted_input;\n    if ((int)shifted_input < (int)result) {\n      if ((int)temp < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp + mask)) {\n          temp_result = shifted_input + 1;\n        }\n      }\n      temp8 = result - shifted_input;\n      shifted_input = temp_result;\n      if (shifted_input < temp) {\n        temp8 = temp8 - 1;\n      }\nLAB_0800a262:\n      loop_counter = temp + mask;\n      shifted_input = shifted_input - temp;\n      shift_amount = shift_amount + mask;\n      result = temp8;\n    }\n    else if ((result == shifted_input) && (temp <= shifted_input)) {\n      if ((int)temp < 0) goto LAB_0800a26a;\n      temp8 = 0;\n      shifted_input = result;\n      goto LAB_0800a262;\n    }\n    counter = counter + -1;\n    mask = mask >> 1;\n    result = result * 2 - ((int)shifted_input >> 0x1f);\n    shifted_input = shifted_input << 1;\n    if (counter == 0) {\n      if ((result | shifted_input) == 0) {\n        shift_amount = shift_amount >> 1;\n      }\n      else if (shift_amount == 0xffffffff) {\n        shift_count = shift_count + 1;\n        shift_amount = 0;\n      }\n      else {\n        shift_amount = shift_amount + 1 >> 1;\n      }\n      if ((shift_count & 1) != 0) {\n        shift_amount = shift_amount | 0x80000000;\n      }\n      return shift_amount;\n    }\n  } while( true );\n}\n\n",
            "current_name": "calculate_result_0800a1bc",
            "entrypoint": "0x0800a1bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a1bc": "calculate_result_0800a1bc",
                "calculate_double_precision_08008894": "calculate_double_precision",
                "calculate_result_08008640": "calculate_result",
                "calculate_sum_080082d4": "calculate_sum",
                "iVar10": "loop_counter",
                "iVar2": "counter",
                "param_1": "input_1",
                "param_2": "input_2",
                "reverse_bits_080082d0": "reverse_bits",
                "uVar1": "shifted_input",
                "uVar11": "temp_result",
                "uVar12": "shift_count",
                "uVar13": "result",
                "uVar3": "temp",
                "uVar4": "temp2",
                "uVar5": "shift_amount",
                "uVar6": "mask",
                "uVar7": "result",
                "uVar8": "temp8",
                "uVar9": "shifted_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a348": {
            "additional_data": {
                "FUN_0800a348": {
                    "1": "calculate_result_with_reversed_bits",
                    "3": "calculate_improved_result",
                    "6": "calculate",
                    "7": "calculate_result"
                },
                "iVar1": {
                    "12": "result",
                    "2": "result_1",
                    "4": "reverse_bits_result",
                    "7": "reverse_result"
                },
                "local_28": {
                    "1": "temp_result3",
                    "2": "value_3",
                    "4": "temp_var3",
                    "6": "temp_3",
                    "8": "temp3"
                },
                "local_30": {
                    "1": "temp_variable_1",
                    "2": "local1",
                    "4": "temp_var1",
                    "6": "temp_1",
                    "9": "temp1"
                },
                "param_1": {
                    "1": "input_value1",
                    "13": "input1",
                    "14": "input_1",
                    "2": "input_value"
                },
                "param_2": {
                    "1": "input_param_2",
                    "13": "input2",
                    "14": "input_2"
                },
                "param_3": {
                    "1": "input_value3",
                    "13": "input3",
                    "14": "input_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "13": "input4",
                    "14": "input_4"
                },
                "uStack_10": {
                    "1": "calculated_result_4"
                },
                "uStack_14": {
                    "1": "calculated_result_3"
                },
                "uStack_18": {
                    "1": "calculated_result_2"
                },
                "uStack_1c": {
                    "1": "calculated_result_1"
                },
                "uStack_24": {
                    "1": "temp_result_part4",
                    "2": "local4",
                    "4": "temp_var4",
                    "6": "temp_4",
                    "8": "temp4"
                },
                "uStack_2c": {
                    "1": "partial_result5",
                    "2": "value_2",
                    "4": "temp_var2",
                    "6": "temp_2",
                    "8": "temp2"
                },
                "uStack_8": {
                    "1": "calculated_result_6"
                },
                "uStack_c": {
                    "1": "calculated_result_5"
                },
                "uVar2": {
                    "1": "result_1",
                    "11": "result_low",
                    "2": "result_2",
                    "4": "result2"
                },
                "uVar3": {
                    "1": "high_result",
                    "11": "result_high",
                    "2": "result_part2",
                    "4": "result3"
                },
                "uVar4": {
                    "1": "modified_flag",
                    "2": "absolute_input_2",
                    "3": "unsigned_input",
                    "4": "masked_input_2",
                    "5": "abs_input_2",
                    "6": "abs_input2"
                },
                "uVar5": {
                    "1": "result_2_low",
                    "2": "temp3",
                    "3": "calculation_result",
                    "4": "calc_result1"
                },
                "uVar6": {
                    "1": "intermediate_result2",
                    "2": "partial_result2",
                    "4": "temp_result2",
                    "6": "final_result"
                },
                "uVar7": {
                    "1": "intermediate_result3",
                    "2": "temp5",
                    "4": "temp_result3"
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "code": "\nundefined4 calculate_result_0800a348(undefined4 input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  undefined4 result_low;\n  undefined4 result_high;\n  uint abs_input2;\n  undefined8 temp_result1;\n  undefined8 final_result;\n  undefined8 temp_result3;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  \n  abs_input2 = input_2 & 0x7fffffff;\n  if (abs_input2 < 0x3e400000) {\n    result = reverse_bits_08008ba0();\n    if (result == 0) {\n      return 0;\n    }\n    temp_result1 = calculate_result_0800a348_08008640(input_1,input_2,input_1,input_2);\n    result_high = (undefined4)((ulonglong)temp_result1 >> 0x20);\n    result_low = (undefined4)temp_result1;\n    final_result = calculate_result_0800a348_08008640(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    final_result = calculate_result_0800a348_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x809c52ad,0x3e927e4f);\n    final_result = calculate_result_0800a348_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x19cb1590,0x3efa01a0);\n    final_result = calculate_result_0800a348_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x16c15177,0x3f56c16c);\n    final_result = calculate_result_0800a348_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555554c,0x3fa55555);\n    final_result = calculate_result_0800a348_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n  }\n  else {\n    temp_result1 = calculate_result_0800a348_08008640(input_1,input_2,input_1,input_2);\n    result_high = (undefined4)((ulonglong)temp_result1 >> 0x20);\n    result_low = (undefined4)temp_result1;\n    final_result = calculate_result_0800a348_08008640(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    final_result = calculate_result_0800a348_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x809c52ad,0x3e927e4f);\n    final_result = calculate_result_0800a348_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x19cb1590,0x3efa01a0);\n    final_result = calculate_result_0800a348_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x16c15177,0x3f56c16c);\n    final_result = calculate_result_0800a348_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555554c,0x3fa55555);\n    final_result = calculate_result_0800a348_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    if (0x3fd33332 < abs_input2) {\n      if (abs_input2 < 0x3fe90001) {\n        result = abs_input2 - 0x200000;\n        temp_result1 = reverse_bits_080082d0(0,0x3ff00000,0,result);\n      }\n      else {\n        result = 0x3fd20000;\n        temp_result1 = 0x3fe7000000000000;\n      }\n      temp4 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n      temp3 = (undefined4)temp_result1;\n      temp_result1 = calculate_result_0800a348_08008640(result_low,result_high,0,0x3fe00000);\n      temp_result1 = reverse_bits_080082d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0,result);\n      final_result = calculate_result_0800a348_08008640(result_low,result_high,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n      temp_result3 = calculate_result_0800a348_08008640(input_1,input_2,input_3,input_4);\n      final_result = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result3,\n                           (int)((ulonglong)temp_result3 >> 0x20));\n      temp_result1 = reverse_bits_080082d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)final_result,\n                           (int)((ulonglong)final_result >> 0x20));\n      result_low = reverse_bits_080082d0(temp3,temp4,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      return result_low;\n    }\n  }\n  temp2 = (undefined4)((ulonglong)final_result >> 0x20);\n  temp1 = (undefined4)final_result;\n  result_low = (undefined4)((ulonglong)temp_result1 >> 0x20);\n  final_result = calculate_result_0800a348_08008640((int)temp_result1,result_low,0,0x3fe00000);\n  temp_result1 = calculate_result_0800a348_08008640((int)temp_result1,result_low,temp1,temp2);\n  temp_result3 = calculate_result_0800a348_08008640(input_1,input_2,input_3,input_4);\n  temp_result1 = reverse_bits_080082d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result3,\n                       (int)((ulonglong)temp_result3 >> 0x20));\n  temp_result1 = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result1,\n                       (int)((ulonglong)temp_result1 >> 0x20));\n  result_low = reverse_bits_080082d0(0,0x3ff00000,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n  return result_low;\n}\n\n",
            "current_name": "calculate_result_0800a348",
            "entrypoint": "0x0800a348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "iVar1": "result",
                "local_28": "temp3",
                "local_30": "temp1",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uStack_24": "temp4",
                "uStack_2c": "temp2",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "abs_input2",
                "uVar5": "temp_result1",
                "uVar6": "final_result",
                "uVar7": "temp_result3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "additional_data": {
                "FUN_0800a5a0": {
                    "1": "calculate_result_and_sum",
                    "2": "calculate_sum",
                    "3": "calculate_result",
                    "4": "reverse_and_calculate"
                },
                "bVar24": {
                    "1": "flag2",
                    "2": "condition",
                    "8": "flag"
                },
                "iVar1": {
                    "1": "iter_var4"
                },
                "iVar14": {
                    "1": "var_3",
                    "2": "index2",
                    "4": "temp_index"
                },
                "iVar15": {
                    "1": "temp_var",
                    "2": "offset",
                    "3": "start_offset"
                },
                "iVar16": {
                    "1": "index3"
                },
                "iVar17": {
                    "1": "var_6",
                    "2": "temp_var2"
                },
                "iVar18": {
                    "1": "count_4"
                },
                "iVar20": {
                    "1": "index4"
                },
                "iVar21": {
                    "1": "temp_var6",
                    "2": "var5"
                },
                "iVar24": {
                    "1": "flag2"
                },
                "iVar4": {
                    "1": "index_3",
                    "13": "index",
                    "8": "i"
                },
                "iVar9": {
                    "1": "limit",
                    "2": "index2",
                    "3": "j"
                },
                "local_160": {
                    "1": "stack3",
                    "2": "temp_array",
                    "3": "temp_array2"
                },
                "local_160[38]": {
                    "1": "var_counts"
                },
                "local_168": {
                    "1": "temp_local_var1",
                    "2": "local_var_5",
                    "4": "temp_value2"
                },
                "local_17c": {
                    "1": "temp_var26"
                },
                "local_208": {
                    "1": "temp_var25"
                },
                "local_258": {
                    "1": "loop_array",
                    "2": "buffer",
                    "5": "result_array"
                },
                "local_258[20]": {
                    "1": "num_array"
                },
                "local_260": {
                    "1": "array1",
                    "2": "local_array1",
                    "3": "local_array2"
                },
                "local_260[0]": {
                    "1": "temp_array2"
                },
                "local_268": {
                    "1": "local_var1"
                },
                "local_26c": {
                    "1": "initial_local_values",
                    "2": "local_var_3"
                },
                "local_270": {
                    "1": "end_idx",
                    "2": "local_var_2",
                    "3": "temp_offset"
                },
                "local_278": {
                    "1": "temp_var22"
                },
                "local_280": {
                    "1": "local_var6",
                    "2": "local_var1",
                    "3": "temp_count"
                },
                "local_284": {
                    "1": "temp_pointer",
                    "2": "local_array_1",
                    "6": "temp_array"
                },
                "local_c8": {
                    "1": "temp_var28"
                },
                "param_1": {
                    "1": "num1",
                    "2": "input_data",
                    "3": "input_value",
                    "5": "input_param",
                    "7": "input_size"
                },
                "param_2": {
                    "1": "array_param",
                    "2": "output_data",
                    "5": "output",
                    "6": "output_array"
                },
                "param_3": {
                    "1": "offset",
                    "2": "array_length",
                    "3": "param3",
                    "8": "input_length"
                },
                "param_4": {
                    "1": "num_bits",
                    "2": "num_iterations",
                    "3": "offset",
                    "5": "param4"
                },
                "param_5": {
                    "1": "op_type",
                    "3": "operation_type",
                    "4": "parameter",
                    "5": "param5",
                    "6": "param_5"
                },
                "param_6": {
                    "1": "input_6",
                    "2": "input_array",
                    "3": "data",
                    "5": "param6"
                },
                "ppuVar7": {
                    "1": "ptr_to_ptr_var7",
                    "2": "pointer3",
                    "3": "ptr_array"
                },
                "puVar1": {
                    "1": "pointer_var_1",
                    "2": "pointer_1",
                    "3": "pointer1",
                    "7": "ptr1"
                },
                "puVar10": {
                    "1": "pointer3",
                    "5": "ptr3"
                },
                "puVar11": {
                    "1": "pointer21"
                },
                "puVar13": {
                    "1": "ptr13",
                    "2": "ptr",
                    "3": "temp_ptr",
                    "4": "ptr4"
                },
                "puVar16": {
                    "1": "temp_ptr_2",
                    "2": "ptr5"
                },
                "puVar18": {
                    "1": "temp_ptr_3",
                    "2": "ptr5"
                },
                "puVar19": {
                    "1": "var2"
                },
                "puVar21": {
                    "1": "ptr6"
                },
                "puVar22": {
                    "1": "array_pointer_2",
                    "2": "ptr6"
                },
                "puVar23": {
                    "1": "ptr8",
                    "2": "ptr7"
                },
                "puVar5": {
                    "1": "temp_ptr_2",
                    "2": "ptr_2",
                    "4": "ptr",
                    "6": "ptr2"
                },
                "puVar7": {
                    "1": "pointer_3"
                },
                "uStack_208": {
                    "1": "temp_value3",
                    "2": "local_var_4",
                    "4": "temp_value1"
                },
                "uStack_c8": {
                    "1": "temp9",
                    "2": "temp_var5",
                    "3": "temp_value3"
                },
                "uVar11": {
                    "1": "result4",
                    "2": "temp_3",
                    "6": "temp3"
                },
                "uVar12": {
                    "1": "temp_value_5",
                    "2": "temp_var4",
                    "5": "temp4"
                },
                "uVar18": {
                    "1": "temp_var_10"
                },
                "uVar19": {
                    "1": "temp_5"
                },
                "uVar2": {
                    "1": "result_mask",
                    "2": "return_value",
                    "28": "result"
                },
                "uVar20": {
                    "1": "result4",
                    "2": "temp_var6"
                },
                "uVar25": {
                    "1": "temp_value3",
                    "2": "temp6",
                    "3": "temp5"
                },
                "uVar26": {
                    "1": "result_2"
                },
                "uVar27": {
                    "1": "temp_value7",
                    "3": "temp7"
                },
                "uVar3": {
                    "1": "result",
                    "2": "sum",
                    "8": "temp",
                    "9": "temp_result"
                },
                "uVar6": {
                    "1": "var_5",
                    "2": "temp_1",
                    "6": "temp1"
                },
                "uVar8": {
                    "1": "temp4",
                    "2": "temp_var4",
                    "6": "temp2"
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_08009d78"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint reverse_and_calculate_0800a5a0(int input_size,undefined8 *output_array,int input_length,int param4,int param_5,int param6)\n\n{\n  undefined4 *ptr1;\n  uint result;\n  uint temp_result;\n  int index;\n  uint *ptr2;\n  undefined4 temp1;\n  uint **ptr_array;\n  undefined4 temp2;\n  int j;\n  undefined4 *ptr3;\n  undefined4 temp3;\n  uint temp4;\n  uint *ptr4;\n  int temp_index;\n  int start_index;\n  undefined8 *ptr5;\n  int index2;\n  undefined4 *ptr5;\n  undefined8 *ptr19;\n  undefined4 temp_var6;\n  int condition;\n  undefined8 *ptr6;\n  undefined4 *ptr7;\n  bool flag;\n  undefined8 temp_result;\n  undefined8 result6;\n  undefined8 temp7;\n  undefined8 *temp_array;\n  int temp_count;\n  int temp_offset;\n  int local_var_3;\n  uint *local_array2 [2];\n  uint result_array [20];\n  undefined8 temp_value1;\n  undefined8 temp_value2;\n  int temp_array2 [38];\n  undefined8 temp_value3;\n  \n  start_index = *(int *)(&DAT_0800c060 + param_5 * 4);\n  j = param4 + -1;\n  local_array2[1] = (uint *)output_array;\n  if (input_length + 0x14 < 0 == SCARRY4(input_length,0x14)) {\n    local_var_3 = (input_length + -3) / 0x18;\n    temp_offset = (local_var_3 + 1) * -0x18;\n  }\n  else {\n    temp_offset = -0x18;\n    local_var_3 = 0;\n  }\n  temp_offset = input_length + temp_offset;\n  index2 = local_var_3 - j;\n  if (-1 < start_index + j) {\n    condition = start_index + j + 1 + index2;\n    ptr5 = &temp_value1;\n    do {\n      while (index2 < 0) {\n        index2 = index2 + 1;\n        *(undefined4 *)ptr5 = 0;\n        *(undefined4 *)((int)ptr5 + 4) = 0;\n        ptr5 = ptr5 + 1;\n        if (index2 == condition) goto LAB_0800a626;\n      }\n      result6 = reverse_bits_0800856c(*(undefined4 *)(param6 + index2 * 4));\n      index2 = index2 + 1;\n      *ptr5 = result6;\n      ptr5 = ptr5 + 1;\n    } while (index2 != condition);\n  }\nLAB_0800a626:\n  ptr3 = (undefined4 *)(input_size + -8);\n  if (-1 < start_index) {\n    ptr6 = &temp_value1 + param4;\n    index2 = j;\n    ptr5 = &temp_value3;\n    do {\n      if (j < 0) {\n        result6 = 0;\n      }\n      else {\n        result6 = 0;\n        ptr7 = ptr3;\n        ptr19 = ptr6;\n        do {\n          ptr5 = ptr7 + 2;\n          temp_result = calculate_result_08008640(*ptr5,ptr7[3],*(undefined4 *)(ptr19 + -1),\n                                *(undefined4 *)((int)ptr19 + -4));\n          result6 = calculate_sum_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),(int)temp_result,\n                                (int)((ulonglong)temp_result >> 0x20));\n          ptr7 = ptr5;\n          ptr19 = ptr19 + -1;\n        } while (ptr5 != ptr3 + param4 * 2);\n      }\n      index2 = index2 + 1;\n      *ptr5 = result6;\n      ptr6 = ptr6 + 1;\n      ptr5 = ptr5 + 1;\n    } while (index2 != start_index + param4);\n  }\n  temp_array2 = result_array + start_index + -1;\n  index2 = start_index;\n  do {\n    result6 = CONCAT44(*(undefined4 *)((int)&temp_value3 + index2 * 8 + 4),\n                      *(undefined4 *)(&temp_value3 + index2));\n    if (0 < index2) {\n      ptr5 = &temp_value3 + index2;\n      ptr2 = result_array;\n      do {\n        temp1 = (undefined4)((ulonglong)result6 >> 0x20);\n        calculate_result_08008640((int)result6,temp1,0,0x3e700000);\n        reverse_bits_08008ba0();\n        temp_result = reverse_bits_0800856c();\n        temp2 = (undefined4)((ulonglong)temp_result >> 0x20);\n        temp7 = calculate_result_08008640((int)temp_result,temp2,0,0x41700000);\n        reverse_bits_080082d0((int)result6,temp1,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n        result = reverse_bits_08008ba0();\n        ptr6 = ptr5 + -1;\n        temp1 = *(undefined4 *)ptr6;\n        temp3 = *(undefined4 *)((int)ptr5 + -4);\n        *ptr2 = result;\n        result6 = calculate_sum_080082d4((int)temp_result,temp2,temp1,temp3);\n        ptr5 = ptr6;\n        ptr2 = ptr2 + 1;\n      } while (ptr6 != &temp_value3);\n    }\n    result6 = calculate_result_0800b2e8((int)result6,(int)((ulonglong)result6 >> 0x20),temp_offset);\n    temp2 = (undefined4)((ulonglong)result6 >> 0x20);\n    calculate_result_08008640((int)result6,temp2,0,0x3fc00000);\n    temp_result = calculate_result_080094c0();\n    temp_result = calculate_result_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x40200000);\n    result6 = reverse_bits_080082d0((int)result6,temp2,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n    result = reverse_bits_08008ba0();\n    temp_result = reverse_bits_0800856c();\n    result6 = reverse_bits_080082d0((int)result6,(int)((ulonglong)result6 >> 0x20),(int)temp_result,\n                          (int)((ulonglong)temp_result >> 0x20));\n    temp1 = (undefined4)((ulonglong)result6 >> 0x20);\n    temp2 = (undefined4)result6;\n    if (temp_offset < 1) {\n      if (temp_offset == 0) {\n        condition = (int)result_array[index2 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      condition = check_parameters_08008b4c(temp2,temp1,0,0x3fe00000);\n      if (condition != 0) {\n        result = result + 1;\n        if (index2 < 1) {\n          result6 = reverse_bits_080082d0(0,0x3ff00000,temp2,temp1);\n          condition = 2;\n          goto LAB_0800a7a4;\n        }\n        condition = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      index = (int)result_array[index2 + -1] >> (0x18U - temp_offset & 0xff);\n      temp4 = result_array[index2 + -1] - (index << (0x18U - temp_offset & 0xff));\n      condition = (int)temp4 >> (0x17U - temp_offset & 0xff);\n      result_array[index2 + -1] = temp4;\n      result = result + index;\njoined_r0x0800a8b8:\n      if (0 < condition) {\n        result = result + 1;\n        if (index2 < 1) {\n          flag = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (result_array[0] == 0) {\n            flag = false;\n            if (index2 != 1) {\n              ptr2 = result_array;\n              index = 1;\n              do {\n                ptr2 = ptr2 + 1;\n                if (*ptr2 != 0) {\n                  temp_index = index + 1;\n                  temp4 = *ptr2;\n                  goto LAB_0800a8e2;\n                }\n                index = index + 1;\n              } while (index != index2);\n              flag = false;\n            }\n          }\n          else {\n            temp_index = 1;\n            index = 0;\n            temp4 = result_array[0];\nLAB_0800a8e2:\n            result_array[index] = 0x1000000 - temp4;\n            if (temp_index < index2) {\n              temp4 = result_array[temp_index];\n              ptr2 = result_array + temp_index;\n              while( true ) {\n                ptr4 = ptr2 + 1;\n                *ptr2 = 0xffffff - temp4;\n                if (ptr4 == result_array + index2) break;\n                temp4 = *ptr4;\n                ptr2 = ptr4;\n              }\n            }\n            flag = true;\n          }\n        }\n        if (0 < temp_offset) {\n          if (temp_offset == 1) {\n            result_array[index2 + -1] = result_array[index2 + -1] & 0x7fffff;\n          }\n          else if (temp_offset == 2) {\n            result_array[index2 + -1] = result_array[index2 + -1] & 0x3fffff;\n          }\n        }\n        if (condition == 2) {\n          result6 = reverse_bits_080082d0(0,0x3ff00000,temp2,temp1);\n          if (flag) {\n            temp_result = calculate_result_0800b2e8(0,0x3ff00000,temp_offset);\n            result6 = reverse_bits_080082d0((int)result6,(int)((ulonglong)result6 >> 0x20),(int)temp_result,\n                                  (int)((ulonglong)temp_result >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp2 = (undefined4)((ulonglong)result6 >> 0x20);\n    index = check_parameters_08008b10((int)result6,temp2,0,0);\n    if (index == 0) {\n      result6 = calculate_result_0800b2e8((int)result6,temp2,-temp_offset);\n      temp1 = (undefined4)((ulonglong)result6 >> 0x20);\n      temp2 = (undefined4)result6;\n      j = check_parameters_08008b4c(temp2,temp1,0,0x41700000);\n      if (j == 0) {\n        temp4 = reverse_bits_08008ba0(temp2,temp1);\n        result_array[index2] = temp4;\n        index = index2;\n      }\n      else {\n        calculate_result_08008640(temp2,temp1,0,0x3e700000);\n        temp4 = reverse_bits_08008ba0();\n        result6 = reverse_bits_0800856c();\n        result6 = calculate_result_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),0,0x41700000);\n        reverse_bits_080082d0(temp2,temp1,(int)result6,(int)((ulonglong)result6 >> 0x20));\n        temp_result = reverse_bits_08008ba0();\n        temp_offset = temp_offset + 0x18;\n        result_array[index2] = temp_result;\n        result_array[index2 + 1] = temp4;\n        index = index2 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    index = index2 + -1;\n    if (start_index <= index) {\n      temp4 = 0;\n      ptr2 = result_array + index2 + 0x3fffffff;\n      do {\n        ptr4 = ptr2 + -1;\n        temp4 = temp4 | *ptr2;\n        ptr2 = ptr4;\n      } while (ptr4 != temp_array2);\n      if (temp4 != 0) break;\n    }\n    if (result_array[start_index + -1] == 0) {\n      temp_count = 1;\n      ptr_array = local_array2 + start_index;\n      do {\n        ptr2 = *ptr_array;\n        temp_count = temp_count + 1;\n        ptr_array = ptr_array + -1;\n      } while (ptr2 == (uint *)0x0);\n      temp_count = index2 + temp_count;\n    }\n    else {\n      temp_count = index2 + 1;\n    }\n    condition = index2 + 1;\n    ptr7 = (undefined4 *)(param6 + (condition + local_var_3 + 0x3fffffff) * 4);\n    ptr5 = &temp_value1 + index2 + param4;\n    temp_array = &temp_value3 + condition;\n    do {\n      ptr7 = ptr7 + 1;\n      result6 = reverse_bits_0800856c(*ptr7);\n      *ptr5 = result6;\n      ptr6 = ptr5 + 1;\n      if (j < 0) {\n        temp_result = 0;\n      }\n      else {\n        temp_result = 0;\n        ptr5 = ptr3;\n        while( true ) {\n          ptr5 = ptr5 + -1;\n          ptr1 = ptr5 + 2;\n          result6 = calculate_result_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),*ptr1,ptr5[3]);\n          temp_result = calculate_sum_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)result6,\n                                (int)((ulonglong)result6 >> 0x20));\n          if (ptr1 == ptr3 + param4 * 2) break;\n          result6 = *ptr5;\n          ptr5 = ptr1;\n        }\n      }\n      *temp_array = temp_result;\n      condition = condition + 1;\n      index2 = temp_count;\n      ptr5 = ptr6;\n      temp_array = temp_array + 1;\n    } while (condition <= temp_count);\n  } while( true );\n  temp_offset = temp_offset + -0x18;\n  if (result_array[index] == 0) {\n    ptr2 = result_array + index2 + 0x3ffffffe;\n    do {\n      temp4 = *ptr2;\n      index = index + -1;\n      temp_offset = temp_offset + -0x18;\n      ptr2 = ptr2 + -1;\n    } while (temp4 == 0);\n  }\nLAB_0800a9f6:\n  result6 = calculate_result_0800b2e8(0,0x3ff00000,temp_offset);\n  if (index < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        result6 = 0;\nLAB_0800abe4:\n        if (condition == 0) {\n          *local_array2[1] = (undefined4)temp_value2;\n          *(int *)((int)local_array2[1] + 4) = temp_value2._4_4_;\n          *(undefined8 *)((int)local_array2[1] + 0x10) = result6;\n          *(int *)((int)local_array2[1] + 8) = temp_array2[0];\n          *(int *)((int)local_array2[1] + 0xc) = temp_array2[1];\n          return result & 7;\n        }\n        *(int *)((int)local_array2[1] + 0x10) = (int)result6;\n        *(int *)((int)local_array2[1] + 8) = temp_array2[0];\n        *(int *)((int)local_array2[1] + 0x14) = (int)((ulonglong)result6 >> 0x20) + -0x80000000;\n        *(int *)((int)local_array2[1] + 4) = temp_value2._4_4_ + -0x80000000;\n        *(int *)((int)local_array2[1] + 0xc) = temp_array2[1] + -0x80000000;\n        *local_array2[1] = (undefined4)temp_value2;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      result6 = 0;\nLAB_0800aafc:\n      j = (int)((ulonglong)result6 >> 0x20);\n      if (condition != 0) {\n        j = j + -0x80000000;\n      }\n      *local_array2[1] = (int)result6;\n      *(int *)((int)local_array2[1] + 4) = j;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    result6 = 0;\n  }\n  else {\n    ptr6 = &temp_value3 + index;\n    ptr2 = result_array + index + 1;\n    ptr5 = &temp_value3 + index + 1;\n    do {\n      temp2 = (undefined4)((ulonglong)result6 >> 0x20);\n      ptr2 = ptr2 + -1;\n      temp_result = reverse_bits_0800856c(*ptr2);\n      temp_result = calculate_result_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)result6,temp2);\n      ptr5 = ptr5 + -1;\n      *ptr5 = temp_result;\n      result6 = calculate_result_08008640((int)result6,temp2,0,0x3e700000);\n    } while (ptr2 != result_array);\n    j = 0;\n    do {\n      if (start_index < 0) {\n        result6 = 0;\n      }\n      else {\n        temp2 = 0x40000000;\n        temp1 = 0x3ff921fb;\n        result6 = 0;\n        index2 = 0;\n        ptr5 = ptr6;\n        ptr3 = &DAT_0800c028;\n        while( true ) {\n          temp_result = calculate_result_08008640(*(undefined4 *)ptr5,*(undefined4 *)((int)ptr5 + 4),temp2,temp1\n                               );\n          result6 = calculate_sum_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),(int)temp_result,\n                                (int)((ulonglong)temp_result >> 0x20));\n          index2 = index2 + 1;\n          if ((start_index < index2) || (j < index2)) break;\n          temp2 = *ptr3;\n          temp1 = ptr3[1];\n          ptr5 = ptr5 + 1;\n          ptr3 = ptr3 + 2;\n        }\n      }\n      flag = j != index;\n      *(int *)(&temp_value2 + j) = (int)result6;\n      *(int *)((int)&temp_value2 + (j * 2 + 1) * 4) = (int)((ulonglong)result6 >> 0x20);\n      ptr6 = ptr6 + -1;\n      j = j + 1;\n    } while (flag);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (index != 0) {\n          ptr5 = &temp_value2 + index;\n          result6 = CONCAT44(*(undefined4 *)((int)&temp_value2 + (index * 2 + 1) * 4),\n                            *(undefined4 *)ptr5);\n          do {\n            temp1 = (undefined4)((ulonglong)result6 >> 0x20);\n            temp2 = (undefined4)result6;\n            temp3 = *(undefined4 *)(ptr5 + -1);\n            temp_var6 = *(undefined4 *)((int)ptr5 + -4);\n            result6 = calculate_sum_080082d4(temp2,temp1,temp3,temp_var6);\n            temp_result = reverse_bits_080082d0(temp3,temp_var6,(int)result6,(int)((ulonglong)result6 >> 0x20));\n            temp_result = calculate_sum_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp1);\n            *ptr5 = temp_result;\n            ptr5 = ptr5 + -1;\n            *ptr5 = result6;\n          } while (&temp_value2 != ptr5);\n          if (1 < index) {\n            ptr5 = &temp_value2 + index;\n            result6 = CONCAT44(*(undefined4 *)((int)&temp_value2 + (index * 2 + 1) * 4),\n                              *(undefined4 *)ptr5);\n            do {\n              temp1 = (undefined4)((ulonglong)result6 >> 0x20);\n              temp2 = (undefined4)result6;\n              temp3 = *(undefined4 *)(ptr5 + -1);\n              temp_var6 = *(undefined4 *)((int)ptr5 + -4);\n              result6 = calculate_sum_080082d4(temp2,temp1,temp3,temp_var6);\n              temp_result = reverse_bits_080082d0(temp3,temp_var6,(int)result6,(int)((ulonglong)result6 >> 0x20));\n              temp_result = calculate_sum_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp1);\n              *ptr5 = temp_result;\n              ptr5 = ptr5 + -1;\n              *ptr5 = result6;\n            } while (&temp_value2 + 1 != ptr5);\n            result6 = 0;\n            ptr5 = &temp_value2 + index + 1;\n            do {\n              ptr6 = ptr5 + -1;\n              result6 = calculate_sum_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),\n                                    *(undefined4 *)ptr6,*(undefined4 *)((int)ptr5 + -4));\n              ptr5 = ptr6;\n            } while (&temp_value2 + 2 != ptr6);\n            goto LAB_0800abe4;\n          }\n        }\n        result6 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      result6 = 0;\n      ptr5 = &temp_value2 + index + 1;\n      do {\n        ptr6 = ptr5 + -1;\n        result6 = calculate_sum_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),*(undefined4 *)ptr6,\n                              *(undefined4 *)((int)ptr5 + -4));\n        ptr5 = ptr6;\n      } while (&temp_value2 != ptr6);\n      goto LAB_0800aafc;\n    }\n    result6 = 0;\n    ptr5 = &temp_value2 + index + 1;\n    do {\n      ptr6 = ptr5 + -1;\n      result6 = calculate_sum_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),*(undefined4 *)ptr6,\n                            *(undefined4 *)((int)ptr5 + -4));\n      ptr5 = ptr6;\n    } while (&temp_value2 != ptr6);\n  }\n  j = (int)((ulonglong)result6 >> 0x20);\n  temp2 = (undefined4)result6;\n  if (condition == 0) {\n    *(undefined8 *)local_array2[1] = result6;\n    result6 = reverse_bits_080082d0((undefined4)temp_value2,temp_value2._4_4_,temp2,j);\n    if (index < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    j = 1;\n    ptr5 = &temp_value2;\n    do {\n      result6 = calculate_sum_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),\n                            *(undefined4 *)(ptr5 + 1),*(undefined4 *)((int)ptr5 + 0xc));\n      j = j + 1;\n      ptr5 = ptr5 + 1;\n    } while (j <= index);\n    if (condition == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_array2[1] = temp2;\n    *(int *)((int)local_array2[1] + 4) = j + -0x80000000;\n    result6 = reverse_bits_080082d0((undefined4)temp_value2,temp_value2._4_4_,temp2,j);\n    if (0 < index) goto LAB_0800ad04;\n  }\n  result6 = CONCAT44((int)((ulonglong)result6 >> 0x20) + -0x80000000,(int)result6);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_array2[1] + 8) = result6;\n  return result & 7;\n}\n\n",
            "current_name": "reverse_and_calculate_0800a5a0",
            "entrypoint": "0x0800a5a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a5a0": "reverse_and_calculate_0800a5a0",
                "bVar24": "flag",
                "iVar1": "iter_var4",
                "iVar14": "temp_index",
                "iVar15": "start_index",
                "iVar17": "index2",
                "iVar21": "condition",
                "iVar4": "index",
                "iVar9": "j",
                "local_160": "temp_array2",
                "local_168": "temp_value2",
                "local_258": "result_array",
                "local_260": "local_array2",
                "local_260[0]": "temp_array2",
                "local_26c": "local_var_3",
                "local_270": "temp_offset",
                "local_280": "temp_count",
                "local_284": "temp_array",
                "param_1": "input_size",
                "param_2": "output_array",
                "param_3": "input_length",
                "param_4": "param4",
                "param_6": "param6",
                "ppuVar7": "ptr_array",
                "puVar1": "ptr1",
                "puVar10": "ptr3",
                "puVar13": "ptr4",
                "puVar16": "ptr5",
                "puVar18": "ptr5",
                "puVar19": "ptr19",
                "puVar22": "ptr6",
                "puVar23": "ptr7",
                "puVar5": "ptr2",
                "puVar7": "temp_ptr_ptr",
                "uStack_208": "temp_value1",
                "uStack_c8": "temp_value3",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "uVar18": "reversed_value",
                "uVar19": "temp5",
                "uVar2": "result",
                "uVar20": "temp_var6",
                "uVar25": "temp_result",
                "uVar26": "result6",
                "uVar27": "temp7",
                "uVar3": "temp_result",
                "uVar6": "temp1",
                "uVar8": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "additional_data": {
                "FUN_0800adf0": {
                    "1": "calculate_result_with_condition",
                    "2": "calculate_improved_result",
                    "3": "calculate_result",
                    "4": "calculate_new_value",
                    "8": "calculate"
                },
                "calculate_result_08008640": {
                    "2": "calculate_result"
                },
                "calculate_sum_080082d4": {
                    "2": "calculate_sum"
                },
                "iVar1": {
                    "1": "result_1",
                    "2": "reverse_check",
                    "4": "bits_reversed",
                    "5": "reverse_result",
                    "8": "result"
                },
                "param_1": {
                    "1": "original_param",
                    "11": "input_value",
                    "2": "input",
                    "3": "input_param",
                    "7": "input_1"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "size",
                    "3": "input2",
                    "4": "bitmask",
                    "7": "input_2"
                },
                "param_3": {
                    "1": "param_1",
                    "3": "param1",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "input_param2",
                    "3": "param2",
                    "5": "param_4"
                },
                "param_5": {
                    "1": "is_flag_set",
                    "12": "flag",
                    "2": "condition",
                    "8": "is_reversed"
                },
                "reverse_bits_080082d0": {
                    "2": "reverse_bits"
                },
                "reverse_bits_08008ba0": {
                    "1": "reverse_bits"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "result_2",
                    "3": "result1",
                    "6": "result_part1",
                    "9": "result_low"
                },
                "uVar3": {
                    "1": "result_hi",
                    "2": "result_2",
                    "3": "result2",
                    "6": "result_part2",
                    "8": "result_high"
                },
                "uVar4": {
                    "1": "result_2_low",
                    "2": "result3",
                    "4": "result_part3"
                },
                "uVar5": {
                    "1": "result_part2_alt",
                    "2": "result4",
                    "4": "temp_high"
                },
                "uVar6": {
                    "1": "temp2_low",
                    "2": "sum_low",
                    "3": "result_part5"
                },
                "uVar7": {
                    "1": "result",
                    "2": "final_result",
                    "3": "calc_result",
                    "8": "temp_result"
                },
                "uVar8": {
                    "1": "intermediate_result2",
                    "2": "temp_result_2",
                    "3": "temp_result",
                    "5": "temp_result2"
                },
                "uVar9": {
                    "1": "result9"
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "code": "\nundefined4\ncalculate_0800adf0(undefined4 input_value,uint input_2,undefined4 param_3,undefined4 param_4,int flag)\n\n{\n  int result;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 result_part3;\n  undefined4 result_part4;\n  undefined4 result_part5;\n  undefined8 temp_result;\n  undefined8 temp_result2;\n  \n  if (((input_2 & 0x7fffffff) < 0x3e400000) && (result = reverse_bits(), result == 0)) {\n    return input_value;\n  }\n  temp_result = calculate_0800adf0_result(input_value,input_2,input_value);\n  result_part3 = (undefined4)((ulonglong)temp_result >> 0x20);\n  result_high = (undefined4)temp_result;\n  temp_result = calculate_0800adf0_result(input_value,input_2,result_high,result_part3);\n  result_part4 = (undefined4)((ulonglong)temp_result >> 0x20);\n  result_low = (undefined4)temp_result;\n  temp_result = calculate_0800adf0_result(result_high,result_part3,0x5acfd57c,0x3de5d93a);\n  temp_result = reverse_bits((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  temp_result = calculate_0800adf0_result((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,result_part3);\n  temp_result = calculate_0800adf0_sum((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x57b1fe7d,0x3ec71de3);\n  temp_result = calculate_0800adf0_result((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,result_part3);\n  temp_result = reverse_bits((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x19c161d5,0x3f2a01a0);\n  temp_result = calculate_0800adf0_result((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,result_part3);\n  temp_result = calculate_0800adf0_sum((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x1110f8a6,0x3f811111);\n  result_part5 = (undefined4)((ulonglong)temp_result >> 0x20);\n  if (flag != 0) {\n    temp_result2 = calculate_0800adf0_result(param_3,param_4,0,0x3fe00000);\n    temp_result = calculate_0800adf0_result(result_low,result_part4,(int)temp_result,result_part5);\n    temp_result = reverse_bits((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n    temp_result = calculate_0800adf0_result((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,result_part3);\n    temp_result = reverse_bits((int)temp_result,(int)((ulonglong)temp_result >> 0x20),param_3,param_4);\n    temp_result2 = calculate_0800adf0_result(result_low,result_part4,0x55555549,0x3fc55555);\n    temp_result = calculate_0800adf0_sum((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result2,\n                         (int)((ulonglong)temp_result2 >> 0x20));\n    result_high = reverse_bits(input_value,input_2,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n    return result_high;\n  }\n  temp_result = calculate_0800adf0_result(result_high,result_part3,(int)temp_result,result_part5);\n  temp_result = reverse_bits((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x55555549,0x3fc55555);\n  temp_result = calculate_0800adf0_result((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_part4);\n  result_high = calculate_0800adf0_sum((int)temp_result,(int)((ulonglong)temp_result >> 0x20),input_value,input_2);\n  return result_high;\n}\n\n",
            "current_name": "calculate_0800adf0",
            "entrypoint": "0x0800adf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800adf0": "calculate_0800adf0",
                "calculate_result_08008640": "calculate_result",
                "calculate_sum_080082d4": "calculate_sum",
                "iVar1": "result",
                "param_1": "input_value",
                "param_2": "input_2",
                "param_5": "flag",
                "reverse_bits_080082d0": "reverse_bits",
                "reverse_bits_08008ba0": "reverse_bits",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "result_part3",
                "uVar5": "result_part4",
                "uVar6": "result_part5",
                "uVar7": "temp_result",
                "uVar8": "temp_result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800af78": {
            "additional_data": {
                "FUN_0800af78": {
                    "1": "improved_calculate",
                    "10": "calculate_result",
                    "3": "calculate_improved_result",
                    "5": "calculate",
                    "6": "calculate_improved_value"
                },
                "iVar5": {
                    "1": "result_code",
                    "10": "output",
                    "2": "result",
                    "3": "output_value"
                },
                "local_2c": {
                    "1": "temp4",
                    "4": "local_variable",
                    "6": "local_var"
                },
                "param_1": {
                    "1": "input_value_1",
                    "11": "input1",
                    "2": "value1",
                    "5": "input_param",
                    "6": "input_1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "11": "input2",
                    "2": "value2",
                    "4": "flags",
                    "5": "input_value2",
                    "6": "input_2"
                },
                "uVar1": {
                    "1": "result_upper_1",
                    "21": "result1",
                    "9": "result_1"
                },
                "uVar2": {
                    "1": "result_lower_1",
                    "21": "result2",
                    "9": "result_2"
                },
                "uVar3": {
                    "1": "result_upper_2",
                    "21": "result3",
                    "9": "result_3"
                },
                "uVar4": {
                    "1": "result_lower_3",
                    "21": "result4",
                    "9": "result_4"
                },
                "uVar6": {
                    "1": "sum_1",
                    "2": "temp_1",
                    "3": "temp_result1",
                    "4": "result6",
                    "5": "result_5",
                    "6": "result5"
                },
                "uVar7": {
                    "1": "flags_masked",
                    "2": "masked_input_2",
                    "3": "positive_input2"
                },
                "uVar8": {
                    "1": "calc_result2",
                    "2": "temp3",
                    "3": "temp_result2"
                },
                "uVar9": {
                    "1": "temp_value3",
                    "2": "temp4",
                    "3": "temp_result_2"
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_08009990"
            ],
            "code": "\nint calculate_result_0800af78(int input1,uint input2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int output;\n  undefined4 result5;\n  uint temp_value;\n  undefined8 temp_result_1;\n  undefined8 temp_result_2;\n  undefined4 local_var;\n  \n  temp_result_1 = CONCAT44(input2,input1);\n  temp_value = input2 & 0x7fffffff;\n  if (temp_value < 0x44100000) {\n    if (temp_value < 0x3fdc0000) {\n      if (temp_value < 0x3e200000) {\n        temp_result_2 = calculate_sum_080082d4(input1,input2,0x8800759c,0x7e37e43c);\n        output = is_cy_null_08008b60((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0,0x3ff00000);\n        if (output != 0) {\n          return input1;\n        }\n      }\n      output = -1;\n    }\n    else {\n      temp_result_1 = FUNC_0800b2cc();\n      result4 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n      result1 = (undefined4)temp_result_1;\n      if (temp_value < 0x3ff30000) {\n        if (temp_value < 0x3fe60000) {\n          temp_result_1 = calculate_sum_080082d4(result1,result4,result1,result4);\n          temp_result_1 = reverse_bits_080082d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,0x3ff00000);\n          temp_result_2 = calculate_sum_080082d4(result1,result4,0,0x40000000);\n          temp_result_1 = calculate_double_precision_08008894((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                               (int)((ulonglong)temp_result_2 >> 0x20));\n          output = 0;\n        }\n        else {\n          temp_result_1 = reverse_bits_080082d0(result1,result4,0,0x3ff00000);\n          temp_result_2 = calculate_sum_080082d4(result1,result4,0,0x3ff00000);\n          temp_result_1 = calculate_double_precision_08008894((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                               (int)((ulonglong)temp_result_2 >> 0x20));\n          output = 1;\n        }\n      }\n      else if (temp_value < 0x40038000) {\n        temp_result_1 = reverse_bits_080082d0(result1,result4,0,0x3ff80000);\n        temp_result_2 = calculate_result_0800af78_08008640(result1,result4,0,0x3ff80000);\n        temp_result_2 = calculate_sum_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0,0x3ff00000);\n        temp_result_1 = calculate_double_precision_08008894((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                             (int)((ulonglong)temp_result_2 >> 0x20));\n        output = 2;\n      }\n      else {\n        temp_result_1 = calculate_double_precision_08008894(0,0xbff00000,result1,result4);\n        output = 3;\n      }\n    }\n    local_var = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    result5 = (undefined4)temp_result_1;\n    temp_result_1 = calculate_result_0800af78_08008640(result5,local_var,result5);\n    result2 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    result1 = (undefined4)temp_result_1;\n    temp_result_1 = calculate_result_0800af78_08008640(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    result4 = (undefined4)temp_result_1;\n    temp_result_1 = calculate_result_0800af78_08008640(result4,result3,0xe322da11,0x3f90ad3a);\n    temp_result_1 = calculate_sum_080082d4((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp_result_1 = calculate_result_0800af78_08008640((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result4,result3);\n    temp_result_1 = calculate_sum_080082d4((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp_result_1 = calculate_result_0800af78_08008640((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result4,result3);\n    temp_result_1 = calculate_sum_080082d4((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp_result_1 = calculate_result_0800af78_08008640((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result4,result3);\n    temp_result_1 = calculate_sum_080082d4((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x920083ff,0x3fc24924);\n    temp_result_1 = calculate_result_0800af78_08008640((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result4,result3);\n    temp_result_1 = calculate_sum_080082d4((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x5555550d,0x3fd55555);\n    temp_result_1 = calculate_result_0800af78_08008640((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    temp_result_2 = calculate_result_0800af78_08008640(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp_result_2 = reverse_bits_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result_2 = calculate_result_0800af78_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result4,result3);\n    temp_result_2 = reverse_bits_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result_2 = calculate_result_0800af78_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result4,result3);\n    temp_result_2 = reverse_bits_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result_2 = calculate_result_0800af78_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result4,result3);\n    temp_result_2 = reverse_bits_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result_2 = calculate_result_0800af78_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n    if (output == -1) {\n      temp_result_1 = calculate_sum_080082d4((int)temp_result_1,result1,(int)temp_result_2,result4);\n      temp_result_1 = calculate_result_0800af78_08008640((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result5,local_var);\n      output = reverse_bits_080082d0(result5,local_var,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      return output;\n    }\n    temp_result_1 = calculate_sum_080082d4((int)temp_result_1,result1,(int)temp_result_2,result4);\n    temp_result_1 = calculate_result_0800af78_08008640((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result5,local_var);\n    temp_result_1 = reverse_bits_080082d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + output * 8),\n                         *(undefined4 *)(&UNK_0800c094 + output * 8));\n    temp_result_1 = reverse_bits_080082d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result5,local_var);\n    output = reverse_bits_080082d0(*(undefined4 *)(&UNK_0800c070 + output * 8),\n                         *(undefined4 *)(&UNK_0800c074 + output * 8),(int)temp_result_1,\n                         (int)((ulonglong)temp_result_1 >> 0x20));\n    if ((int)input2 < 0) {\n      return output;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp_value) || ((temp_value == 0x7ff00000 && (input1 != 0)))) {\n      output = calculate_sum_080082d4(input1,input2,input1);\n      return output;\n    }\n    output = 0x54442d18;\n  }\n  return output;\n}\n\n",
            "current_name": "calculate_result_0800af78",
            "entrypoint": "0x0800af78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800af78": "calculate_result_0800af78",
                "iVar5": "output",
                "local_2c": "local_var",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar6": "result5",
                "uVar7": "temp_value",
                "uVar8": "temp_result_1",
                "uVar9": "temp_result_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "called": [],
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b2cc",
            "entrypoint": "0x0800b2cc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b2d4": {
            "additional_data": {
                "0x100000": {
                    "1": "value_mask"
                },
                "0x1f": {
                    "1": "shift_amount"
                },
                "0x80000000": {
                    "1": "sign_bit_mask"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "FUN_0800b2d4": {
                    "1": "calculate_offset",
                    "2": "set_most_significant_bit",
                    "3": "get_bitwise_result",
                    "4": "set_bit_and_shift"
                },
                "local_var_1": {
                    "1": "result"
                },
                "param_1": {
                    "1": "first_parameter",
                    "2": "flags",
                    "3": "value",
                    "4": "input",
                    "6": "input_flag"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "number",
                    "3": "bit_mask",
                    "4": "input",
                    "6": "input_value"
                },
                "param_3": {
                    "1": "output",
                    "2": "result"
                },
                "param_4": {
                    "1": "shifted_result"
                },
                "temp_var_1": {
                    "1": "updated_bit_field"
                },
                "temp_var_2": {
                    "1": "shifted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800981c"
            ],
            "code": "\nuint set_bit_and_shift_0800b2d4(undefined4 input_flag,uint input_value)\n\n{\n  return (input_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "current_name": "set_bit_and_shift_0800b2d4",
            "entrypoint": "0x0800b2d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2d4": "set_bit_and_shift_0800b2d4",
                "param_1": "input_flag",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "additional_data": {
                "<no parameters>": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                },
                "<no_parameter_name>": {
                    "1": "<no_parameter_name>"
                },
                "<no_variable_name>": {
                    "1": "<no_variable_name>"
                },
                "<original_function_name_1>": {
                    "1": "<new_function_name_1>"
                },
                "<original_function_name_2>": {
                    "1": "<new_function_name_2>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_variable_name>": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_0800b2e0": {
                    "1": "initialize_program",
                    "17": "initialize",
                    "2": "initialize_system",
                    "3": "initialize_data"
                },
                "FUN_0800b2e0_return": {
                    "1": "success"
                },
                "PTR_0800b2e0": {
                    "1": "pointer_0800b2e0"
                },
                "return": {
                    "1": "result"
                },
                "undefined4": {
                    "9": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "code": "\nvoid initialize_0800b2e0(void)\n\n{\n  status 0;\n}\n\n",
            "current_name": "initialize_0800b2e0",
            "entrypoint": "0x0800b2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0",
                "return": "status",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "additional_data": {
                "FUN_0800b2e8": {
                    "1": "calculate_improved_result",
                    "15": "calculate_result",
                    "2": "calculate",
                    "3": "calculate_updated_value",
                    "5": "calculate_result_or_sum"
                },
                "calculate_result_08008640": {
                    "1": "calculate_result_from_inputs",
                    "4": "calculate_result"
                },
                "calculate_sum_080082d4": {
                    "1": "calculate_sum_from_inputs",
                    "5": "calculate_sum"
                },
                "iVar2": {
                    "1": "result_offset",
                    "19": "sum",
                    "2": "result",
                    "4": "sum_offset"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "input1",
                    "3": "input_value_1",
                    "4": "input_param1",
                    "9": "input_1"
                },
                "param_2": {
                    "1": "value2",
                    "13": "input2",
                    "3": "input_value_2",
                    "4": "input_param2",
                    "9": "input_2"
                },
                "param_3": {
                    "1": "offset_param",
                    "12": "offset",
                    "2": "shift_amount",
                    "4": "input_param3",
                    "6": "modifier"
                },
                "param_4": {
                    "1": "config_value",
                    "12": "constant",
                    "2": "constant_value",
                    "3": "param_4",
                    "4": "input_param4"
                },
                "uVar1": {
                    "1": "shifted_input",
                    "14": "shifted_value",
                    "2": "shift_result",
                    "9": "shifted_input2"
                },
                "uVar3": {
                    "1": "high_part_input",
                    "12": "high_bits",
                    "2": "upper_value",
                    "6": "upper_bits"
                },
                "uVar4": {
                    "1": "combined_value",
                    "2": "combined_param",
                    "3": "concatenated_values",
                    "4": "concatenated_value",
                    "6": "concatenated_inputs",
                    "9": "combined_inputs"
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_0800a5a0"
            ],
            "code": "\nuint calculate_result_0800b2e8(uint input1,uint input2,int offset,undefined4 constant)\n\n{\n  uint shifted_value;\n  int sum;\n  uint high_bits;\n  undefined8 combined_inputs;\n  \n  combined_inputs = CONCAT44(input2,input1);\n  shifted_value = (input2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    combined_inputs = calculate_result_0800b2e8(input1,input2,0,0x43500000);\n    if (offset < -50000) goto LAB_0800b34a;\n    shifted_value = ((uint)((int)((ulonglong)combined_inputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_value == 0x7ff) {\n    shifted_value = calculate_sum(input1,input2,input1,input2,constant);\n    return shifted_value;\n  }\n  high_bits = (uint)((ulonglong)combined_inputs >> 0x20);\n  sum = shifted_value + offset;\n  if (sum < 0x7ff) {\n    if (0 < sum) {\n      return (uint)combined_inputs;\n    }\n    if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n      shifted_value = calculate_result_0800b2e8((uint)combined_inputs,high_bits & 0x800fffff | (sum + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_value;\n    }\n    if (offset < 0xc351) {\n      combined_inputs = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_value = calculate_result_0800b2e8((int)combined_inputs,(int)((ulonglong)combined_inputs >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_value;\n    }\n  }\n  shifted_value = calculate_result_0800b2e8(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_value;\n}\n\n",
            "current_name": "calculate_result_0800b2e8",
            "entrypoint": "0x0800b2e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "calculate_result_08008640": "calculate_result",
                "calculate_sum_080082d4": "calculate_sum",
                "iVar2": "sum",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "offset",
                "param_4": "constant",
                "uVar1": "shifted_value",
                "uVar3": "high_bits",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "additional_data": {
                "DAT_20000018": {
                    "1": "global_var",
                    "11": "data",
                    "2": "constant_value"
                },
                "FUN_0800b3dc": {
                    "1": "get_config_value",
                    "13": "get_data",
                    "2": "get_dat_value",
                    "4": "get_data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "code": "\nundefined4 get_data_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "current_name": "get_data_0800b3dc",
            "entrypoint": "0x0800b3dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b3dc": "get_data_0800b3dc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "additional_data": {
                "**ppcVar2": {
                    "1": "callback"
                },
                "2": {
                    "1": "iterations"
                },
                "DAT_0800c0b4": {
                    "1": "pointer_array",
                    "2": "function_pointer_array"
                },
                "FUNC_0800b5b0": {
                    "1": "initialize_function_set",
                    "7": "initialize"
                },
                "FUN_0800b3e8": {
                    "1": "execute_functions_with_warning",
                    "10": "execute_functions",
                    "2": "execute_function_list",
                    "4": "execute_function_set_twice"
                },
                "iVar1": {
                    "1": "function_count",
                    "18": "iteration_count",
                    "9": "counter"
                },
                "ppcVar2": {
                    "1": "callback_ptr",
                    "11": "function_pointer",
                    "2": "function_list",
                    "3": "function_array",
                    "9": "function_pointer_array"
                }
            },
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid execute_functions_0800b3e8(void)\n\n{\n  int iteration_count;\n  code **function_pointer;\n  \n  FUNC_0800b5b0();\n  iteration_count = 0;\n  function_pointer = (code **)&DAT_0800c0b4;\n  do {\n    iteration_count = iteration_count + 1;\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  } while (iteration_count != 2);\n  return;\n}\n\n",
            "current_name": "execute_functions_0800b3e8",
            "entrypoint": "0x0800b3e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b3e8": "execute_functions_0800b3e8",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b430": {
            "additional_data": {
                "FUN_0800b430": {
                    "1": "memset_with_byte",
                    "2": "initialize_memory",
                    "5": "fill_memory_with_byte",
                    "7": "memset",
                    "8": "fill_memory"
                },
                "bVar5": {
                    "1": "is_last_chunk",
                    "2": "is_empty",
                    "4": "is_size_zero",
                    "5": "is_zero",
                    "6": "is_zero_size"
                },
                "joined_r0x0800b4a8": {
                    "1": "end_of_loop"
                },
                "param_1": {
                    "1": "dest_ptr",
                    "13": "dest",
                    "5": "buffer",
                    "7": "destination"
                },
                "param_2": {
                    "1": "pattern",
                    "2": "byte",
                    "21": "value",
                    "4": "byte_value"
                },
                "param_3": {
                    "1": "size_in_bytes",
                    "2": "length",
                    "23": "size",
                    "3": "count"
                },
                "puVar1": {
                    "1": "dest_ptr1",
                    "10": "dest_ptr",
                    "2": "current_pointer",
                    "5": "dst_ptr"
                },
                "puVar2": {
                    "1": "dst_ptr",
                    "2": "ptr",
                    "3": "ptr2",
                    "8": "temp_ptr"
                },
                "uVar3": {
                    "1": "size_minus_one",
                    "15": "remaining_size",
                    "2": "bytes_remaining",
                    "4": "remaining"
                },
                "uVar4": {
                    "1": "merged_value",
                    "2": "pattern",
                    "3": "value32",
                    "5": "fill_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "code": "\nvoid fill_memory_0800b430(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_size;\n  undefined4 fill_value;\n  bool is_zero_size;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_zero_size = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_zero_size) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = fill_value;\n        dest_ptr[-3] = fill_value;\n        dest_ptr[-2] = fill_value;\n        dest_ptr[-1] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x20));\n      remaining_size = size & 0xc;\n      dest = dest + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remaining_size == 0) goto continue_loop;\n    }\n    dest_ptr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)dest);\n    do {\n      temp_ptr = dest + 1;\n      *dest = fill_value;\n      dest = temp_ptr;\n    } while (dest_ptr != temp_ptr);\n    size = size & 3;\n    dest = dest_ptr;\n  }\ncontinue_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      temp_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = temp_ptr;\n    } while ((undefined4 *)(size + (int)dest) != temp_ptr);\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_0800b430",
            "entrypoint": "0x0800b430",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b430": "fill_memory_0800b430",
                "bVar5": "is_zero_size",
                "joined_r0x0800b4a8": "continue_loop",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "temp_ptr",
                "uVar3": "remaining_size",
                "uVar4": "fill_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "called": [
                "FUN_0800b524"
            ],
            "calling": [
                "FUN_0800b3e8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b4d0",
            "entrypoint": "0x0800b4d0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b51c": {
            "called": [],
            "calling": [
                "FUN_0800b524"
            ],
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b51c",
            "entrypoint": "0x0800b51c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b520": {
            "called": [],
            "calling": [
                "FUN_0800b524"
            ],
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b520",
            "entrypoint": "0x0800b520",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b524": {
            "additional_data": {
                "FUNKY_FUNCTION": {
                    "1": "handle_data"
                },
                "FUN_0800b524": {
                    "1": "handle_parameter",
                    "16": "update_data",
                    "4": "process_data"
                },
                "param_1": {
                    "1": "op_code",
                    "2": "operation_type",
                    "3": "type",
                    "4": "data_flag",
                    "5": "input_type"
                },
                "param_2": {
                    "1": "input1",
                    "2": "value1",
                    "4": "new_data",
                    "5": "new_value",
                    "8": "value"
                },
                "param_3": {
                    "1": "data_value",
                    "2": "data2",
                    "3": "value1",
                    "5": "data1"
                },
                "param_4": {
                    "1": "new_data2",
                    "2": "data_param2",
                    "3": "value2",
                    "5": "data2"
                },
                "puVar1": {
                    "1": "current_value",
                    "16": "data_ptr",
                    "4": "data_pointer"
                },
                "uVar2": {
                    "23": "return_value",
                    "8": "result"
                },
                "uVar3": {
                    "1": "bitwise_shift_value",
                    "2": "bit_flag",
                    "27": "bit_mask"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "current_index",
                    "3": "count",
                    "4": "index",
                    "7": "counter"
                }
            },
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "calling": [
                "FUN_0800b4d0"
            ],
            "code": "\nundefined4 update_data_0800b524(int input_type,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined *data_ptr;\n  undefined4 return_value;\n  uint bit_mask;\n  uint counter;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  counter = *(uint *)(DAT_20000168 + 4);\n  if ((int)counter < 0x20) {\n    if (input_type != 0) {\n      *(undefined4 *)(DAT_20000168 + counter * 4 + 0x88) = data1;\n      bit_mask = 1 << (counter & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + counter * 4 + 0x108) = data2;\n      if (input_type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    return_value = DAT_20000448;\n    *(uint *)(data_ptr + 4) = counter + 1;\n    *(undefined4 *)(data_ptr + (counter + 2) * 4) = value;\n    FUNC_0800b520(return_value);\n    return_value = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_data_0800b524",
            "entrypoint": "0x0800b524",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b524": "update_data_0800b524",
                "param_1": "input_type",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "data_ptr",
                "uVar2": "return_value",
                "uVar3": "bit_mask",
                "uVar4": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "called": [],
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b5b0",
            "entrypoint": "0x0800b5b0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b5bc": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b5bc",
            "entrypoint": "0x0800b5bc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "calling": [],
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_0800756c();\n  execute_functions_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_program_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x080092c4",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "additional_data": {
                "DAT_0800be68": {
                    "1": "result_values_1",
                    "3": "constant_1"
                },
                "DAT_0800be80": {
                    "1": "constant2",
                    "3": "constant_2"
                },
                "FUNC_0800b2cc": {
                    "1": "perform_operation",
                    "2": "helper_function",
                    "3": "some_function"
                },
                "SCARRY4": {
                    "1": "subtraction_carry"
                },
                "calculate_double_precision_08008894": {
                    "2": "calculate_double",
                    "9": "calculate_double_precision"
                },
                "calculate_result_0800af78": {
                    "1": "calculate_result_af78",
                    "2": "calculate_result_1",
                    "8": "calculate_result"
                },
                "calculate_sum_080082d4": {
                    "11": "calculate_sum"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "20": "difference",
                    "4": "temp_var_1"
                },
                "param_1": {
                    "1": "input_value1",
                    "10": "input1",
                    "2": "input_param_1",
                    "3": "value1",
                    "9": "input_1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "10": "input2",
                    "2": "value_2",
                    "3": "value2",
                    "9": "input_2"
                },
                "param_3": {
                    "1": "input_value3",
                    "10": "input3",
                    "2": "value_3",
                    "3": "value3",
                    "9": "input_3"
                },
                "param_4": {
                    "1": "input_value4",
                    "10": "input4",
                    "2": "input_param_4",
                    "3": "value4",
                    "9": "input_4"
                },
                "reverse_bits_080082d0": {
                    "1": "reverse_bits_1",
                    "10": "reverse_bits"
                },
                "thunk_FUN_08009990": {
                    "1": "calculate_updated_value",
                    "18": "calculate_result",
                    "2": "calculate_float_result",
                    "3": "calculate_thunk",
                    "4": "calculate"
                },
                "uVar2": {
                    "1": "result",
                    "2": "result_high",
                    "3": "temp_var_2"
                },
                "uVar3": {
                    "1": "result_2",
                    "3": "temp_var_3",
                    "4": "bit_shift",
                    "5": "flag"
                },
                "uVar4": {
                    "1": "masked_param4",
                    "2": "masked_input4",
                    "3": "temp_var_4"
                },
                "uVar5": {
                    "1": "normalized_input_2",
                    "2": "param2_masked",
                    "3": "temp_var_5"
                },
                "uVar6": {
                    "1": "result_u_var6",
                    "14": "result",
                    "3": "temp_var_6"
                }
            },
            "called": [
                "FUN_08009990"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nuint calculate_result_thunk_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 upper_result;\n  uint flag;\n  uint temp_var_4;\n  uint temp_var_5;\n  undefined8 result;\n  \n  temp_var_4 = input4 & 0x7fffffff;\n  if (((temp_var_4 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (temp_var_5 = input2 & 0x7fffffff, (temp_var_5 | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      temp_var_4 = calculate_result_thunk_08009990();\n      return temp_var_4;\n    }\n    flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((temp_var_5 | input1) == 0) {\n      if (flag == 2) {\n        input1 = 0x54442d18;\n      }\n      else if (flag == 3) {\n        input1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((temp_var_4 | input3) != 0) {\n        if (temp_var_4 == 0x7ff00000) {\n          flag = flag - 1;\n          if (temp_var_5 == 0x7ff00000) {\n            if (flag < 3) {\n              return *(uint *)(&DAT_0800be68 + flag * 8);\n            }\n            return 0x54442d18;\n          }\n          if (flag < 3) {\n            return *(uint *)(&DAT_0800be80 + flag * 8);\n          }\n          return 0;\n        }\n        if (temp_var_5 != 0x7ff00000) {\n          difference = (int)(temp_var_5 - temp_var_4) >> 0x14;\n          if ((int)(temp_var_5 - temp_var_4) < 0x3d00000) {\n            if (((int)input4 < 0) && (difference + 0x3c < 0 != subtraction_carry(difference,0x3c))) {\n              result = 0;\n            }\n            else {\n              calculate_double_precision(input1,input2,input3,input4,input4);\n              FUNC_0800b2cc();\n              result = calculate_result_thunk_08009990();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          upper_result = (undefined4)((ulonglong)result >> 0x20);\n          temp_var_4 = (uint)result;\n          if (flag == 1) {\n            return temp_var_4;\n          }\n          if (flag == 2) {\n            result = reverse_bits(temp_var_4,upper_result,0x33145c07,0x3ca1a626);\n            temp_var_4 = reverse_bits(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return temp_var_4;\n          }\n          if (flag == 0) {\n            return temp_var_4;\n          }\n          result = reverse_bits(temp_var_4,upper_result,0x33145c07,0x3ca1a626);\n          temp_var_4 = reverse_bits((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return temp_var_4;\n        }\n      }\n      if ((int)input2 < 0) {\n        input1 = 0x54442d18;\n      }\n      else {\n        input1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input1 = calculate_sum(input3,input4,input1,input2);\n  }\n  return input1;\n}\n\n",
            "current_name": "calculate_result_thunk_08009990",
            "entrypoint": "0x08009818",
            "imported": false,
            "improved": true,
            "renaming": {
                "SCARRY4": "subtraction_carry",
                "calculate_double_precision_08008894": "calculate_double_precision",
                "calculate_result_0800af78": "calculate_result",
                "calculate_sum_080082d4": "calculate_sum",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_080082d0": "reverse_bits",
                "thunk_FUN_08009990": "calculate_result_thunk_08009990",
                "uVar2": "upper_result",
                "uVar3": "flag",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 910690
}